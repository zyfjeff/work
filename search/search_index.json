{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"About \u6211\u662f\u4e00\u4e2aC++\u3001Rust\u70ed\u7231\u8005\uff0c\u4e13\u6ce8\u4e8eService Mesh\u9886\u57df\uff0c\u662fEnvoy/Istio\u7684\u793e\u533aMember\uff0c\u76ee\u524d\u5728\u67d0BAT\u516c\u53f8\u505aEnvoy\u7684\u4e8c\u6b21\u5f00\u53d1\u3002 \u5e73\u65f6\u559c\u6b22\u7814\u7a76\u5404\u79cd\u8bed\u8a00\u7279\u6027\u3001\u9006\u5411\u3001Linux\u5185\u6838\u7b49\u3002\u6bd5\u4e1a\u4e8e\u897f\u5b89\u90ae\u7535\u5927\u5b66\u5e08\u4ece\u9648\u8389\u541b\u6559\u6388\u3002 \u516c\u4f17\u53f7","title":"About"},{"location":"#about","text":"\u6211\u662f\u4e00\u4e2aC++\u3001Rust\u70ed\u7231\u8005\uff0c\u4e13\u6ce8\u4e8eService Mesh\u9886\u57df\uff0c\u662fEnvoy/Istio\u7684\u793e\u533aMember\uff0c\u76ee\u524d\u5728\u67d0BAT\u516c\u53f8\u505aEnvoy\u7684\u4e8c\u6b21\u5f00\u53d1\u3002 \u5e73\u65f6\u559c\u6b22\u7814\u7a76\u5404\u79cd\u8bed\u8a00\u7279\u6027\u3001\u9006\u5411\u3001Linux\u5185\u6838\u7b49\u3002\u6bd5\u4e1a\u4e8e\u897f\u5b89\u90ae\u7535\u5927\u5b66\u5e08\u4ece\u9648\u8389\u541b\u6559\u6388\u3002","title":"About"},{"location":"#_1","text":"","title":"\u516c\u4f17\u53f7"},{"location":"%E5%8D%9A%E5%AE%A2/doc/basic/linux-debugger/","text":"\u5982\u4f55\u5728Linux\u73af\u5883\u4e0b\u5b9e\u73b0\u4e00\u4e2a\u8c03\u8bd5\u5668 \u5199\u8fc7Linux C/C++\u7684\u540c\u5b66\u5e94\u8be5\u6ca1\u6709\u54ea\u4e2a\u6ca1\u6709\u7528\u8fc7GDB/LLDB\u5427\uff0c\u8fd9\u4e24\u4e2a\u5e94\u8be5\u7b97\u662f\u7c7bunix\u7cfb\u7edf\u4e0b\u6700\u4e3a\u8457\u540d\u7684\u4e24\u4e2a\u8c03\u8bd5\u5668\uff0c\u8c03\u8bd5\u5668\u5bf9\u4e8e\u5927\u591a\u6570\u7684\u4eba\u6765\u8bf4\u662f\u4e00\u4e2a\u795e\u79d8\u7684\u4e1c\u897f\uff0c \u8fd9\u662f\u56e0\u4e3a\u5b83\u4eec\u7684\u5b9e\u73b0\u539f\u7406\u5e76\u4e0d\u662f\u5f88\u5bb9\u6613\u5c31\u80fd\u591f\u638c\u63e1\uff0c\u800c\u672c\u6587\u5219\u5e0c\u671b\u7ed9\u5927\u5bb6\u666e\u53ca\u4e00\u4e0b\u8c03\u8bd5\u5668\u7684\u5b9e\u73b0\u539f\u7406\u3002 ptrace Linux\u4e0b\u8981\u5b9e\u73b0\u4e00\u4e2a\u8c03\u8bd5\u5668\u6700\u4e3a\u6838\u5fc3\u7684\u5c31\u662f ptrace \u7cfb\u7edf\u8c03\u7528\uff0c\u901a\u8fc7\u8fd9\u4e2a\u7cfb\u7edf\u8c03\u7528\u53ef\u4ee5\u63a7\u5236\u5f85\u8c03\u8bd5\u7684\u8fdb\u7a0b\uff0c\u53ef\u4ee5\u83b7\u53d6\u5176\u5185\u5b58\u548c\u5bc4\u5b58\u5668\u7b49\u4fe1\u606f\uff0c\u4e5f\u53ef\u4ee5\u4fee\u6539\u5176\u5185\u5b58\u3002\u4e0b\u9762\u662f man\u624b\u518c\u4e2d\u5bf9\u4e8e ptrace \u7684\u4e00\u4e2a\u4ecb\u7ecd\u3002 1 2 3 4 5 The ptrace() system call provides a means by which one process (the \"tracer\") may observe and control the execution of another process (the \"tracee\"), and examine and change the tracee's memory and registers. It is primarily used to implement breakpoint debugging and system call tracing. \u901a\u8fc7man\u624b\u518c\u7684\u4ecb\u7ecd\u53ef\u4ee5\u77e5\u9053 ptrace \u662f\u5b9e\u73b0debugger\u7684\u4e3b\u8981\u5de5\u5177\u3002\u6709\u4e86 ptrace \u540e\u5c31\u9700\u8981\u627e\u5230\u5f85\u8c03\u8bd5\u7684\u8fdb\u7a0b\uff0c\u8fd9\u4e2a\u8fdb\u7a0b\u6709\u4e24\u7c7b\uff0c\u4e00\u7c7b\u662f\u8ddf\u8c03\u8bd5\u5668(debugger)\u672c\u8eab\u6ca1\u6709\u4efb\u4f55\u5173\u7cfb\u7684 \u8fdb\u7a0b\uff0c\u5bf9\u8fd9\u7c7b\u8fdb\u7a0b\u53ef\u4ee5\u901a\u8fc7ptrace\u7684 PTRACE_ATTACH \u6216\u8005\u662f PTRACE_SEIZE \u9009\u9879\u6765\u8fdb\u884cattach\uff0c\u5bf9\u5e94\u5230gdb\u7684 attach \u547d\u4ee4\u3002\u5982\u679c\u8fd9\u4e2a\u5f85\u8c03\u8bd5\u8fdb\u7a0b\u662f\u8c03\u8bd5\u5668\u7684\u5b50\u8fdb\u7a0b\u90a3\u4e48\u53ef\u4ee5 \u76f4\u63a5\u5728\u5b50\u8fdb\u7a0b\u4e2d\u6267\u884c PTRACE_ME \u6765\u8ba9\u5b50\u8fdb\u7a0b\u505c\u6b62\uff0c\u5e76\u8fdb\u5165\u8c03\u8bd5\u72b6\u6001\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 auto pid = fork (); if ( pid == 0 ) { // \u8ba9\u5b50\u8fdb\u7a0b\u8fdb\u5165\u8c03\u8bd5\u72b6\u6001 ptrace ( PTRACE_TRACEME , 0 , nullptr , nullptr ); int err = execl ( prog , prog , nullptr ); if ( err == -1 ) { perror ( \"execl failure:\" ); } return err ; //we're in the child process //execute debugee } else if ( pid >= 1 ) { //we're in the parent process //execute debugger } } \u901a\u8fc7 PTRACE_ME \u9009\u9879\u53ef\u4ee5\u4f7f\u5f97\u5b50\u8fdb\u7a0b\u5728\u542f\u52a8\u540e\u4f1a\u6536\u5230SIGTRAP\u4fe1\u53f7\uff0c\u8fd9\u4e2a\u4fe1\u53f7\u53ef\u4ee5\u4f7f\u5f97\u5b50\u8fdb\u7a0b\u505c\u6b62\uff0c\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u9700\u8981\u5728\u7236\u8fdb\u7a0b(debugger)\u4e5f\u5c31\u662f\u8c03\u8bd5\u5668\u8fdb\u7a0b\u4e2d\u901a\u8fc7waitpid\u6765\u7b49\u5f85\u5b50\u8fdb\u7a0b\u5230\u8fbe \u505c\u6b62\u7684\u8fd9\u4e2a\u72b6\u6001\u3002\u56e0\u4e3a\u7236\u5b50\u8fdb\u7a0b\u7684\u6267\u884c\u987a\u5e8f\u662f\u4e0d\u4e00\u5b9a\u7684\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 int wait_status ; auto options = 0 ; waitpid ( pid_ , & wait_status , options ); if ( WIFEXITED ( wait_status )) { printf ( \"exited, status=%d \\n \" , WEXITSTATUS ( wait_status )); } else if ( WIFSIGNALED ( wait_status )) { printf ( \"killed by signal %d \\n \" , WTERMSIG ( wait_status )); } else if ( WIFSTOPPED ( wait_status )) { printf ( \"stopped by signal %d \\n \" , WSTOPSIG ( wait_status )); } else if ( WIFCONTINUED ( wait_status )) { printf ( \"continued \\n \" ); } char * line = nullptr ; \u901a\u8fc7\u5728\u7236\u8fdb\u7a0b\u4e2d\u6dfb\u52a0waitpid\uff0c\u5e76\u6253\u5370\u5b50\u8fdb\u7a0b\u72b6\u6001\u6539\u53d8\u7684\u539f\u56e0\uff0c\u4f1a\u8f93\u51fa stopped by signal 5 \uff0c\u4fe1\u53f75\u5c31\u662f SIGTRAP \u3002\u5230\u4e86\u8fd9\u91cc\u6211\u4eec\u5df2\u7ecf\u53ef\u4ee5\u5f00\u59cb\u8c03\u8bd5\u8fdb\u7a0b\u4e86\u3002 int3 \u5f85\u8c03\u8bd5\u7684\u8fdb\u7a0b\u5df2\u7ecf\u505c\u6b62\u4e86\uff0c\u63a5\u4e0b\u6765\u5c31\u5230\u4e86\u8c03\u8bd5\u5668\u8981\u505a\u7684\u6700\u91cd\u8981\u7684\u4e00\u4ef6\u4e8b\u4e86\uff0c\u90a3\u5c31\u662f\u6253\u65ad\u70b9\u3002\u8ba9\u7a0b\u5e8f\u8fd0\u884c\u5230\u65ad\u70b9\u5904\u5c31\u505c\u6b62\u3002\u8fd9\u9700\u8981\u501f\u52a9\u795e\u5947\u7684 int3 \u6307\u4ee4\u4e86\uff0cx86\u5904\u7406\u5668\u4e0b\uff0c\u5f53\u6267\u884c\u7684 \u6307\u4ee4\u662f int3 \u7684\u65f6\u5019\u5c31\u4f1a\u89e6\u53d1\u4e2d\u65ad\uff0cLinux OS\u4f1a\u8bbe\u7f6e\u597d\u5bf9\u5e94\u4e2d\u65ad\u7684\u4e2d\u65ad\u5904\u7406\u51fd\u6570\uff0c\u5bf9\u4e8e int3 \u89e6\u53d1\u7684\u4e2d\u65ad\u6765\u8bf4\u5c31\u662f\u5411\u53d1\u751f int3 \u6307\u4ee4\u7684\u8fdb\u7a0b\u53d1\u9001\u4e00\u4e2a SIGTRAP \u4fe1\u53f7\u3002\u901a\u8fc7\u4e0a\u6587 \u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u8fd9\u4e2a\u4fe1\u53f7\u53ef\u4ee5\u4f7f\u5f97\u8fdb\u7a0b\u505c\u6b62\u3002 1 2 3 4 5 6 7 8 auto data = ptrace ( PTRACE_PEEKDATA , pid_ , addr_ , nullptr ); saved_data_ = static_cast < uint8_t > ( data & 0xff ); uint64_t int3 = 0xcc ; uint64_t data_with_int3 = (( data & ~ 0xff ) | int3 ); int ret = ptrace ( PTRACE_POKEDATA , pid_ , addr_ , data_with_int3 ); if ( ret == -1 ) { perror ( \"ptrace pokedata for address failure\" ); } \u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\u901a\u8fc7 PTRACE_PEEKDATA \u83b7\u53d6\u8981\u6253\u65ad\u70b9\u7684\u5730\u5740\u91cc\u9762\u5b58\u653e\u7684\u503c\uff0c\u7136\u540e\u4fee\u6539\u5176\u503c\uff0c\u628a int3 \u6307\u4ee4\u653e\u8fdb\u53bb\uff0c\u5f53\u6267\u884c\u5230\u8fd9\u6bb5\u4ee3\u7801\u5c31\u4f1a\u81ea\u52a8\u6267\u884c int3 \u6307\u4ee4\u4e86\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u6307\u4ee4\u53ea\u6709\u4e00\u4e2a\u5b57\u8282 \u6240\u4ee5\u53ea\u9700\u8981\u4fee\u6539\u524d8\u4f4d\u5373\u53ef\u3002\u4fee\u6539\u5b8c\u6210\u540e\uff0c\u9700\u8981\u6062\u590d\u8fdb\u7a0b\uff0c\u8ba9\u8fdb\u7a0b\u7ee7\u7eed\u8fd0\u884c\uff0c\u76f4\u5230\u8fd0\u884c\u5230\u6253\u65ad\u70b9\u7684\u4f4d\u7f6e\u5c31\u4f1a\u81ea\u52a8\u505c\u6b62\u4e86\u3002 1 ptrace(PTRACE_CONT, pid_, nullptr, nullptr); \u5355\u6b65\u6267\u884c \u6709\u4e86\u65ad\u70b9\u540e\uff0c\u4e0b\u4e00\u6b65\u5c31\u662f\u5355\u6b65\u6267\u884c\u4e86\uff0c\u5355\u6b65\u6267\u884c\u7406\u8bba\u4e0a\u53ef\u4ee5\u501f\u52a9\u591a\u4e2a\u65ad\u70b9\u6765\u5b9e\u73b0\uff0c\u4f46\u662f\u5f88\u663e\u7136\u8fd9\u5e76\u4e0d\u4f18\u96c5\uff0c\u5e78\u8fd0\u7684\u662fptrace\u63d0\u4f9b\u4e86 PTRACE_SINGLESTEP \u6765\u5b8c\u6210\u3002 1 SIGTRAP\u4fe1\u53f7\u5904\u7406 \u901a\u8fc7\u4e0a\u6587\u7684\u4ecb\u7ecd\u6211\u4eec\u77e5\u9053\u4e86SIGTRAP\u4fe1\u53f7\u7684\u91cd\u8981\u6027\uff0c\u5b83\u53ef\u4ee5\u4f7f\u5f97\u8fdb\u7a0b\u505c\u6b62\uff0c\u4f46\u662f\u505c\u6b62\u7684\u539f\u56e0\u6709\u5f88\u591a\uff0c\u6bd4\u5982\u4e0a\u6587\u4e2d\u63d0\u5230\u7684\u89e6\u53d1\u65ad\u70b9\uff0c\u4e5f\u6709\u53ef\u80fd\u662f\u5355\u6b65\u6267\u884c\u5bfc\u81f4\u7684\u3001\u6216\u8005\u662f \u8fd0\u884c\u72b6\u6001\u5206\u6790 \u9664\u4e86\u6253\u65ad\u70b9\u5916\uff0c\u8c03\u8bd5\u5668\u6700\u4e3a\u91cd\u8981\u7684\u4e00\u4e2a\u80fd\u529b\u5c31\u662f\u67e5\u770b\u5bc4\u5b58\u5668\u3001\u6253\u5370\u8c03\u7528\u5806\u6808\u3001\u67e5\u770b\u5185\u5b58\u4e2d\u7684\u503c\u7b49\u529f\u80fd\uff0c\u4e5f\u5c31\u662f\u8fdb\u7a0b\u7684\u8fd0\u884c\u72b6\u6001\u3002\u8fd9\u4e9b\u80fd\u529b\u90fd\u53ef\u4ee5\u501f\u52a9ptrace\u6765\u5b8c\u6210(\u8fd9\u4e2a\u7cfb\u7edf\u8c03\u7528\u5c31\u50cf\u4e00\u4e2a\u5927\u6742\u70e9\u4e00\u6837\uff0c\u5305\u542b\u4e86\u5f88\u591a\u529f\u80fd \u6bcf\u4e00\u7c7b\u529f\u80fd\u901a\u8fc7\u4e00\u4e2aoption\u6765\u542f\u7528)\u3002 1 2 user_regs_struct regs ; ptrace ( PTRACE_GETREGS , pid , nullptr , & regs ); \u5176\u4e2d user_regs_struct \u5b9a\u4e49\u4e86\u6240\u6709\u7684x86\u4e0b\u7684\u5bc4\u5b58\u5668\uff0c\u53ef\u4ee5\u901a\u8fc7 /usr/include/sys/user.h \u8fd9\u4e2a\u5934\u6587\u4ef6\u6765\u67e5\u770b\u8fd9\u4e2a\u7ed3\u6784\u7684\u5b9a\u4e49\u3002\u901a\u8fc7 ptrace \u7684 PTRACE_GETREGS \u6765\u83b7\u53d6\u6240\u6709\u5bc4\u5b58\u5668\u7684\u503c\u3002\u800c\u4fee\u6539 \u5bc4\u5b58\u5668\u7684\u503c\u5219\u53ef\u4ee5\u901a\u8fc7 PTRACE_SETREGS \u6765\u5b8c\u6210\u3002\u5185\u5b58\u67e5\u770b\u548c\u4fee\u6539\u662f\u901a\u8fc7\u4e0a\u6587\u4e2d\u63d0\u5230\u7684 PTRACE_PEEKDATA \u548c PTRACE_POKEDATA \u6765\u5b8c\u6210\u3002\u63a5\u4e0b\u6765\u8981\u8bb2\u4e00\u4e0b\u8c03\u7528\u5806\u6808\u7684\u83b7\u53d6\u3002\u8c03\u7528\u5806\u6808\u4f9d\u8d56\u4e8ex86\u7684\u6808\u5e27\u7684\u5e03\u5c40\u3002 \u8c03\u8bd5\u4fe1\u606f \u603b\u7ed3","title":"\u5982\u4f55\u5728Linux\u73af\u5883\u4e0b\u5b9e\u73b0\u4e00\u4e2a\u8c03\u8bd5\u5668"},{"location":"%E5%8D%9A%E5%AE%A2/doc/basic/linux-debugger/#linux","text":"\u5199\u8fc7Linux C/C++\u7684\u540c\u5b66\u5e94\u8be5\u6ca1\u6709\u54ea\u4e2a\u6ca1\u6709\u7528\u8fc7GDB/LLDB\u5427\uff0c\u8fd9\u4e24\u4e2a\u5e94\u8be5\u7b97\u662f\u7c7bunix\u7cfb\u7edf\u4e0b\u6700\u4e3a\u8457\u540d\u7684\u4e24\u4e2a\u8c03\u8bd5\u5668\uff0c\u8c03\u8bd5\u5668\u5bf9\u4e8e\u5927\u591a\u6570\u7684\u4eba\u6765\u8bf4\u662f\u4e00\u4e2a\u795e\u79d8\u7684\u4e1c\u897f\uff0c \u8fd9\u662f\u56e0\u4e3a\u5b83\u4eec\u7684\u5b9e\u73b0\u539f\u7406\u5e76\u4e0d\u662f\u5f88\u5bb9\u6613\u5c31\u80fd\u591f\u638c\u63e1\uff0c\u800c\u672c\u6587\u5219\u5e0c\u671b\u7ed9\u5927\u5bb6\u666e\u53ca\u4e00\u4e0b\u8c03\u8bd5\u5668\u7684\u5b9e\u73b0\u539f\u7406\u3002","title":"\u5982\u4f55\u5728Linux\u73af\u5883\u4e0b\u5b9e\u73b0\u4e00\u4e2a\u8c03\u8bd5\u5668"},{"location":"%E5%8D%9A%E5%AE%A2/doc/basic/linux-debugger/#ptrace","text":"Linux\u4e0b\u8981\u5b9e\u73b0\u4e00\u4e2a\u8c03\u8bd5\u5668\u6700\u4e3a\u6838\u5fc3\u7684\u5c31\u662f ptrace \u7cfb\u7edf\u8c03\u7528\uff0c\u901a\u8fc7\u8fd9\u4e2a\u7cfb\u7edf\u8c03\u7528\u53ef\u4ee5\u63a7\u5236\u5f85\u8c03\u8bd5\u7684\u8fdb\u7a0b\uff0c\u53ef\u4ee5\u83b7\u53d6\u5176\u5185\u5b58\u548c\u5bc4\u5b58\u5668\u7b49\u4fe1\u606f\uff0c\u4e5f\u53ef\u4ee5\u4fee\u6539\u5176\u5185\u5b58\u3002\u4e0b\u9762\u662f man\u624b\u518c\u4e2d\u5bf9\u4e8e ptrace \u7684\u4e00\u4e2a\u4ecb\u7ecd\u3002 1 2 3 4 5 The ptrace() system call provides a means by which one process (the \"tracer\") may observe and control the execution of another process (the \"tracee\"), and examine and change the tracee's memory and registers. It is primarily used to implement breakpoint debugging and system call tracing. \u901a\u8fc7man\u624b\u518c\u7684\u4ecb\u7ecd\u53ef\u4ee5\u77e5\u9053 ptrace \u662f\u5b9e\u73b0debugger\u7684\u4e3b\u8981\u5de5\u5177\u3002\u6709\u4e86 ptrace \u540e\u5c31\u9700\u8981\u627e\u5230\u5f85\u8c03\u8bd5\u7684\u8fdb\u7a0b\uff0c\u8fd9\u4e2a\u8fdb\u7a0b\u6709\u4e24\u7c7b\uff0c\u4e00\u7c7b\u662f\u8ddf\u8c03\u8bd5\u5668(debugger)\u672c\u8eab\u6ca1\u6709\u4efb\u4f55\u5173\u7cfb\u7684 \u8fdb\u7a0b\uff0c\u5bf9\u8fd9\u7c7b\u8fdb\u7a0b\u53ef\u4ee5\u901a\u8fc7ptrace\u7684 PTRACE_ATTACH \u6216\u8005\u662f PTRACE_SEIZE \u9009\u9879\u6765\u8fdb\u884cattach\uff0c\u5bf9\u5e94\u5230gdb\u7684 attach \u547d\u4ee4\u3002\u5982\u679c\u8fd9\u4e2a\u5f85\u8c03\u8bd5\u8fdb\u7a0b\u662f\u8c03\u8bd5\u5668\u7684\u5b50\u8fdb\u7a0b\u90a3\u4e48\u53ef\u4ee5 \u76f4\u63a5\u5728\u5b50\u8fdb\u7a0b\u4e2d\u6267\u884c PTRACE_ME \u6765\u8ba9\u5b50\u8fdb\u7a0b\u505c\u6b62\uff0c\u5e76\u8fdb\u5165\u8c03\u8bd5\u72b6\u6001\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 auto pid = fork (); if ( pid == 0 ) { // \u8ba9\u5b50\u8fdb\u7a0b\u8fdb\u5165\u8c03\u8bd5\u72b6\u6001 ptrace ( PTRACE_TRACEME , 0 , nullptr , nullptr ); int err = execl ( prog , prog , nullptr ); if ( err == -1 ) { perror ( \"execl failure:\" ); } return err ; //we're in the child process //execute debugee } else if ( pid >= 1 ) { //we're in the parent process //execute debugger } } \u901a\u8fc7 PTRACE_ME \u9009\u9879\u53ef\u4ee5\u4f7f\u5f97\u5b50\u8fdb\u7a0b\u5728\u542f\u52a8\u540e\u4f1a\u6536\u5230SIGTRAP\u4fe1\u53f7\uff0c\u8fd9\u4e2a\u4fe1\u53f7\u53ef\u4ee5\u4f7f\u5f97\u5b50\u8fdb\u7a0b\u505c\u6b62\uff0c\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u9700\u8981\u5728\u7236\u8fdb\u7a0b(debugger)\u4e5f\u5c31\u662f\u8c03\u8bd5\u5668\u8fdb\u7a0b\u4e2d\u901a\u8fc7waitpid\u6765\u7b49\u5f85\u5b50\u8fdb\u7a0b\u5230\u8fbe \u505c\u6b62\u7684\u8fd9\u4e2a\u72b6\u6001\u3002\u56e0\u4e3a\u7236\u5b50\u8fdb\u7a0b\u7684\u6267\u884c\u987a\u5e8f\u662f\u4e0d\u4e00\u5b9a\u7684\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 int wait_status ; auto options = 0 ; waitpid ( pid_ , & wait_status , options ); if ( WIFEXITED ( wait_status )) { printf ( \"exited, status=%d \\n \" , WEXITSTATUS ( wait_status )); } else if ( WIFSIGNALED ( wait_status )) { printf ( \"killed by signal %d \\n \" , WTERMSIG ( wait_status )); } else if ( WIFSTOPPED ( wait_status )) { printf ( \"stopped by signal %d \\n \" , WSTOPSIG ( wait_status )); } else if ( WIFCONTINUED ( wait_status )) { printf ( \"continued \\n \" ); } char * line = nullptr ; \u901a\u8fc7\u5728\u7236\u8fdb\u7a0b\u4e2d\u6dfb\u52a0waitpid\uff0c\u5e76\u6253\u5370\u5b50\u8fdb\u7a0b\u72b6\u6001\u6539\u53d8\u7684\u539f\u56e0\uff0c\u4f1a\u8f93\u51fa stopped by signal 5 \uff0c\u4fe1\u53f75\u5c31\u662f SIGTRAP \u3002\u5230\u4e86\u8fd9\u91cc\u6211\u4eec\u5df2\u7ecf\u53ef\u4ee5\u5f00\u59cb\u8c03\u8bd5\u8fdb\u7a0b\u4e86\u3002","title":"ptrace"},{"location":"%E5%8D%9A%E5%AE%A2/doc/basic/linux-debugger/#int3","text":"\u5f85\u8c03\u8bd5\u7684\u8fdb\u7a0b\u5df2\u7ecf\u505c\u6b62\u4e86\uff0c\u63a5\u4e0b\u6765\u5c31\u5230\u4e86\u8c03\u8bd5\u5668\u8981\u505a\u7684\u6700\u91cd\u8981\u7684\u4e00\u4ef6\u4e8b\u4e86\uff0c\u90a3\u5c31\u662f\u6253\u65ad\u70b9\u3002\u8ba9\u7a0b\u5e8f\u8fd0\u884c\u5230\u65ad\u70b9\u5904\u5c31\u505c\u6b62\u3002\u8fd9\u9700\u8981\u501f\u52a9\u795e\u5947\u7684 int3 \u6307\u4ee4\u4e86\uff0cx86\u5904\u7406\u5668\u4e0b\uff0c\u5f53\u6267\u884c\u7684 \u6307\u4ee4\u662f int3 \u7684\u65f6\u5019\u5c31\u4f1a\u89e6\u53d1\u4e2d\u65ad\uff0cLinux OS\u4f1a\u8bbe\u7f6e\u597d\u5bf9\u5e94\u4e2d\u65ad\u7684\u4e2d\u65ad\u5904\u7406\u51fd\u6570\uff0c\u5bf9\u4e8e int3 \u89e6\u53d1\u7684\u4e2d\u65ad\u6765\u8bf4\u5c31\u662f\u5411\u53d1\u751f int3 \u6307\u4ee4\u7684\u8fdb\u7a0b\u53d1\u9001\u4e00\u4e2a SIGTRAP \u4fe1\u53f7\u3002\u901a\u8fc7\u4e0a\u6587 \u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u8fd9\u4e2a\u4fe1\u53f7\u53ef\u4ee5\u4f7f\u5f97\u8fdb\u7a0b\u505c\u6b62\u3002 1 2 3 4 5 6 7 8 auto data = ptrace ( PTRACE_PEEKDATA , pid_ , addr_ , nullptr ); saved_data_ = static_cast < uint8_t > ( data & 0xff ); uint64_t int3 = 0xcc ; uint64_t data_with_int3 = (( data & ~ 0xff ) | int3 ); int ret = ptrace ( PTRACE_POKEDATA , pid_ , addr_ , data_with_int3 ); if ( ret == -1 ) { perror ( \"ptrace pokedata for address failure\" ); } \u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\u901a\u8fc7 PTRACE_PEEKDATA \u83b7\u53d6\u8981\u6253\u65ad\u70b9\u7684\u5730\u5740\u91cc\u9762\u5b58\u653e\u7684\u503c\uff0c\u7136\u540e\u4fee\u6539\u5176\u503c\uff0c\u628a int3 \u6307\u4ee4\u653e\u8fdb\u53bb\uff0c\u5f53\u6267\u884c\u5230\u8fd9\u6bb5\u4ee3\u7801\u5c31\u4f1a\u81ea\u52a8\u6267\u884c int3 \u6307\u4ee4\u4e86\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u6307\u4ee4\u53ea\u6709\u4e00\u4e2a\u5b57\u8282 \u6240\u4ee5\u53ea\u9700\u8981\u4fee\u6539\u524d8\u4f4d\u5373\u53ef\u3002\u4fee\u6539\u5b8c\u6210\u540e\uff0c\u9700\u8981\u6062\u590d\u8fdb\u7a0b\uff0c\u8ba9\u8fdb\u7a0b\u7ee7\u7eed\u8fd0\u884c\uff0c\u76f4\u5230\u8fd0\u884c\u5230\u6253\u65ad\u70b9\u7684\u4f4d\u7f6e\u5c31\u4f1a\u81ea\u52a8\u505c\u6b62\u4e86\u3002 1 ptrace(PTRACE_CONT, pid_, nullptr, nullptr);","title":"int3"},{"location":"%E5%8D%9A%E5%AE%A2/doc/basic/linux-debugger/#_1","text":"\u6709\u4e86\u65ad\u70b9\u540e\uff0c\u4e0b\u4e00\u6b65\u5c31\u662f\u5355\u6b65\u6267\u884c\u4e86\uff0c\u5355\u6b65\u6267\u884c\u7406\u8bba\u4e0a\u53ef\u4ee5\u501f\u52a9\u591a\u4e2a\u65ad\u70b9\u6765\u5b9e\u73b0\uff0c\u4f46\u662f\u5f88\u663e\u7136\u8fd9\u5e76\u4e0d\u4f18\u96c5\uff0c\u5e78\u8fd0\u7684\u662fptrace\u63d0\u4f9b\u4e86 PTRACE_SINGLESTEP \u6765\u5b8c\u6210\u3002 1","title":"\u5355\u6b65\u6267\u884c"},{"location":"%E5%8D%9A%E5%AE%A2/doc/basic/linux-debugger/#sigtrap","text":"\u901a\u8fc7\u4e0a\u6587\u7684\u4ecb\u7ecd\u6211\u4eec\u77e5\u9053\u4e86SIGTRAP\u4fe1\u53f7\u7684\u91cd\u8981\u6027\uff0c\u5b83\u53ef\u4ee5\u4f7f\u5f97\u8fdb\u7a0b\u505c\u6b62\uff0c\u4f46\u662f\u505c\u6b62\u7684\u539f\u56e0\u6709\u5f88\u591a\uff0c\u6bd4\u5982\u4e0a\u6587\u4e2d\u63d0\u5230\u7684\u89e6\u53d1\u65ad\u70b9\uff0c\u4e5f\u6709\u53ef\u80fd\u662f\u5355\u6b65\u6267\u884c\u5bfc\u81f4\u7684\u3001\u6216\u8005\u662f","title":"SIGTRAP\u4fe1\u53f7\u5904\u7406"},{"location":"%E5%8D%9A%E5%AE%A2/doc/basic/linux-debugger/#_2","text":"\u9664\u4e86\u6253\u65ad\u70b9\u5916\uff0c\u8c03\u8bd5\u5668\u6700\u4e3a\u91cd\u8981\u7684\u4e00\u4e2a\u80fd\u529b\u5c31\u662f\u67e5\u770b\u5bc4\u5b58\u5668\u3001\u6253\u5370\u8c03\u7528\u5806\u6808\u3001\u67e5\u770b\u5185\u5b58\u4e2d\u7684\u503c\u7b49\u529f\u80fd\uff0c\u4e5f\u5c31\u662f\u8fdb\u7a0b\u7684\u8fd0\u884c\u72b6\u6001\u3002\u8fd9\u4e9b\u80fd\u529b\u90fd\u53ef\u4ee5\u501f\u52a9ptrace\u6765\u5b8c\u6210(\u8fd9\u4e2a\u7cfb\u7edf\u8c03\u7528\u5c31\u50cf\u4e00\u4e2a\u5927\u6742\u70e9\u4e00\u6837\uff0c\u5305\u542b\u4e86\u5f88\u591a\u529f\u80fd \u6bcf\u4e00\u7c7b\u529f\u80fd\u901a\u8fc7\u4e00\u4e2aoption\u6765\u542f\u7528)\u3002 1 2 user_regs_struct regs ; ptrace ( PTRACE_GETREGS , pid , nullptr , & regs ); \u5176\u4e2d user_regs_struct \u5b9a\u4e49\u4e86\u6240\u6709\u7684x86\u4e0b\u7684\u5bc4\u5b58\u5668\uff0c\u53ef\u4ee5\u901a\u8fc7 /usr/include/sys/user.h \u8fd9\u4e2a\u5934\u6587\u4ef6\u6765\u67e5\u770b\u8fd9\u4e2a\u7ed3\u6784\u7684\u5b9a\u4e49\u3002\u901a\u8fc7 ptrace \u7684 PTRACE_GETREGS \u6765\u83b7\u53d6\u6240\u6709\u5bc4\u5b58\u5668\u7684\u503c\u3002\u800c\u4fee\u6539 \u5bc4\u5b58\u5668\u7684\u503c\u5219\u53ef\u4ee5\u901a\u8fc7 PTRACE_SETREGS \u6765\u5b8c\u6210\u3002\u5185\u5b58\u67e5\u770b\u548c\u4fee\u6539\u662f\u901a\u8fc7\u4e0a\u6587\u4e2d\u63d0\u5230\u7684 PTRACE_PEEKDATA \u548c PTRACE_POKEDATA \u6765\u5b8c\u6210\u3002\u63a5\u4e0b\u6765\u8981\u8bb2\u4e00\u4e0b\u8c03\u7528\u5806\u6808\u7684\u83b7\u53d6\u3002\u8c03\u7528\u5806\u6808\u4f9d\u8d56\u4e8ex86\u7684\u6808\u5e27\u7684\u5e03\u5c40\u3002","title":"\u8fd0\u884c\u72b6\u6001\u5206\u6790"},{"location":"%E5%8D%9A%E5%AE%A2/doc/basic/linux-debugger/#_3","text":"","title":"\u8c03\u8bd5\u4fe1\u606f"},{"location":"%E5%8D%9A%E5%AE%A2/doc/basic/linux-debugger/#_4","text":"","title":"\u603b\u7ed3"},{"location":"%E5%8D%9A%E5%AE%A2/doc/cpp/%E5%A6%82%E4%BD%95mock%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/","text":"\u5982\u4f55mock\u7cfb\u7edf\u8c03\u7528 \u80cc\u666f \u200b\u2003 \u2003Linux\u4e0b\u5f00\u53d1\u5b58\u50a8\u7cfb\u7edf\u3001\u7f51\u7edc\u5e93\u7684\u65f6\u5019\u4f1a\u7528\u5230\u4e00\u7cfb\u5217Linux\u7684\u7cfb\u7edf\u8c03\u7528\uff0c\u6bcf\u4e00\u4e2a\u7cfb\u7edf\u8c03\u7528\u90fd\u6709\u4e00\u4e9b\u51fa\u9519\u7684\u573a\u666f\uff0c\u6709\u4e9b\u573a\u666f\u5f88\u6781\u7aef\uff0c\u6bd4\u5982\u5185\u5b58\u4f7f\u7528\u8fbe\u5230\u4e0a\u9650\u3001\u78c1\u76d8\u5199\u6ee1\u7b49\uff0c\u5982\u679c\u5bf9\u5176\u8fdb\u884c\u6d4b\u8bd5\u7684\u8bdd\uff0c\u5f88\u96be\u53bb\u6784\u9020\u8fd9\u6837\u7684\u4e00\u4e2a\u573a\u666f\uff0c\u8fd9\u4e2a\u65f6\u5019\u96c6\u6210\u6d4b\u8bd5\u5c31\u663e\u5f97\u529b\u4e0d\u5b58\u5fc3\u4e86\uff0c\u53ea\u80fd\u9760\u5355\u5143\u6d4b\u8bd5\u6765\u8986\u76d6\u8fd9\u4e9b\u573a\u666f\u3002\u73b0\u5728\u7684\u95ee\u9898\u5c31\u662f\u5982\u4f55\u53bbmock\u8fd9\u4e9b\u7cfb\u7edf\u8c03\u7528\uff0c\u7136\u540e\u901a\u8fc7\u7a0b\u5e8f\u8fd4\u56de\u5bf9\u5e94\u573a\u666f\u7684\u9519\u8bef\u7801\u6765\u6a21\u62df\u5404\u79cd\u573a\u666f\u3002\u4e5f\u5c31\u662f\u5c06\u5bf9\u7cfb\u7edf\u51fd\u6570\u7684\u4f9d\u8d56\u6ce8\u5165\u5230\u7a0b\u5e8f\u4e2d\u3002 \u7cfb\u7edf\u51fd\u6570\u7684\u4f9d\u8d56\u6ce8\u5165 \u200b\u2003 \u2003\u76ee\u524d\u5b9e\u73b0\u7cfb\u7edf\u51fd\u6570\u7684\u4f9d\u8d56\u6ce8\u5165\u7684\u624b\u6bb5\u6709\u5f88\u591a\uff0c\u5206\u4e3a\u7f16\u8bd1\u671f\u6ce8\u5165\uff0c\u548c\u8fd0\u884c\u671f\u6ce8\u5165\uff0c\u81f3\u4e8e\u4ec0\u4e48\u662f\u4f9d\u8d56\u6ce8\u5165\u53ef\u4ee5\u53c2\u8003\u77e5\u4e4e\u7684\u4e00\u7bc7\u6587\u7ae0 \u5982\u4f55\u7528\u6700\u7b80\u5355\u7684\u65b9\u5f0f\u89e3\u91ca\u4f9d\u8d56\u6ce8\u5165 \uff0c\u4e0b\u9762\u4ecb\u7ecd\u51e0\u79cd\u4f9d\u8d56\u6ce8\u5165\u7684\u65b9\u6cd5: \u865a\u51fd\u6570\u5b9e\u73b0\u4f9d\u8d56\u6ce8\u5165(\u8fd0\u884c\u671f\u6ce8\u5165) \u200b\u2003 \u2003\u4f7f\u7528\u4f20\u7edf\u7684\u9762\u5411\u5bf9\u8c61\u7684\u624b\u6cd5\uff0c\u501f\u52a9\u8fd0\u884c\u671f\u7684\u5ef6\u8fdf\u7ed1\u5b9a\u5b9e\u73b0\u6ce8\u5165\u548c\u66ff\u6362\uff0c\u81ea\u5df1\u5b9e\u73b0\u4e00\u4e2aSystem\u63a5\u53e3\u7c7b\uff0c\u628a\u7a0b\u5e8f\u7528\u5230\u7684\u7cfb\u7edf\u8c03\u7528\u90fd\u7528\u865a\u51fd\u6570\u5c01\u88c5\u4e00\u5c42\uff0c\u7136\u540e\u5728\u8c03\u7528\u7684\u65f6\u5019\u4e0d\u76f4\u63a5\u8c03\u7528\u7cfb\u7edf\u8c03\u7528\uff0c\u800c\u662f\u8c03\u7528\u7684System\u5bf9\u5e94\u7684\u65b9\u6cd5\u3002\u8fd9\u6837\u4ee3\u7801\u7684\u4e3b\u52a8\u6743\u5c31\u4ea4\u7ed9\u4e86System\u63a5\u53e3\u7c7b\u4e86\u3002\u5199\u5355\u5143\u6d4b\u8bd5\u7684\u65f6\u5019\u5c06\u8fd9\u4e2aSystem\u63a5\u53e3\u7c7b\u66ff\u6362\u6210\u6211\u4eec\u81ea\u5df1\u7684mock\u5bf9\u8c61\u5c31\u53ef\u4ee5\u3002\u5b8c\u6574\u7684\u793a\u4f8b\u4ee3\u7801\u5982\u4e0b: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 // system.h class System { public : virtual int open ( const char * path , int oflag , ...) = 0 ; virtual ssize_t read ( int fildes , void * buf , size_t nbyte ) = 0 ; virtual ssize_t write ( int fildes , const void * buf , size_t nbyte ) = 0 ; virtual int close ( int fildes ) = 0 ; static System * GetInstance (); static void set_instance ( System * instance ) { instance_ = instance ; } private : static System * instance_ ; }; // \u5177\u4f53\u7684\u5b9e\u73b0 class FileOps : public System { public : int open ( const char * path , int oflag , ...) override ; ssize_t read ( int fildes , void * buf , size_t nbyte ) override ; ssize_t write ( int fildes , const void * buf , size_t nbyte ) override ; int close ( int fildes ) override ; static FileOps * GetInstance (); }; // system.cc System * System :: instance_ = nullptr ; // \u9ed8\u8ba4\u5b9e\u73b0\u662fFileOps\uff0cmock\u7684\u65f6\u5019\u901a\u8fc7\u6539\u53d8\u8fd9\u4e2a\u9ed8\u8ba4\u5b9e\u73b0\u4ece\u800c\u628a\u4e3b\u52a8\u6743\u4ece\u9ed8\u8ba4\u5b9e\u73b0\u8f6c\u5230\u4e86mock\u7684\u5b9e\u73b0 System * System::GetInstance () { if ( ! instance_ ) { instance_ = FileOps :: GetInstance (); } assert ( instance_ ); return instance_ ; } int FileOps::open ( const char * path , int oflag , ...) { return :: open ( path , oflag , 0777 ); } ssize_t FileOps::read ( int fildes , void * buf , size_t nbyte ) { return :: read ( fildes , buf , nbyte ); } ssize_t FileOps::write ( int fildes , const void * buf , size_t nbyte ) { return :: write ( fildes , buf , nbyte ); } int FileOps::close ( int fildes ) { return :: close ( fildes ); } FileOps * FileOps::GetInstance () { static FileOps sys ; return & sys ; } // \u6b63\u5e38\u8c03\u7528 main.cc int main () { assert ( System :: GetInstance () != nullptr ); int fd = System :: GetInstance () -> open ( \"txt\" , O_RDWR | O_CREAT , 0777 ); assert ( fd > 0 ); int ret = System :: GetInstance () -> write ( fd , \"12345\" , 5 ); assert ( ret > 0 ); ret = System :: GetInstance () -> close ( fd ); assert ( ret == 0 ); return 0 ; } // \u6d4b\u8bd5\u7684\u65f6\u5019\u8c03\u7528\u5982\u4e0b\uff0c\u6a21\u62df\u4e00\u4e2aIO\u9519\u8bef // \u4e00\u4e2amock\u7248\u672c\u7684\u5b9e\u73b0 test.cc class MockFileOps : public System { public : int open ( const char * path , int oflag , ...) override ; ssize_t read ( int fildes , void * buf , size_t nbyte ) override ; ssize_t write ( int fildes , const void * buf , size_t nbyte ) override ; int close ( int fildes ) override ; static MockFileOps * GetInstance (); }; int MockFileOps::open ( const char * path , int oflag , ...) { return :: open ( path , oflag , 0777 ); } ssize_t MockFileOps::read ( int fildes , void * buf , size_t nbyte ) { return :: read ( fildes , buf , nbyte ); } // \u6a21\u62df\u7684\u4e00\u4e2aIO\u9519\u8bef ssize_t MockFileOps::write ( int fildes , const void * buf , size_t nbyte ) { errno = EIO ; return -1 ; } int MockFileOps::close ( int fildes ) { return :: close ( fildes ); } MockFileOps * MockFileOps::GetInstance () { static MockFileOps sys ; return & sys ; } int main () { // \u6539\u53d8\u9ed8\u8ba4\u5b9e\u73b0 System :: set_instance ( MockFileOps :: GetInstance ()); assert ( System :: GetInstance () != nullptr ); int fd = System :: GetInstance () -> open ( \"txt\" , O_RDWR | O_CREAT , 0777 ); assert ( fd > 0 ); int ret = System :: GetInstance () -> write ( fd , \"12345\" , 5 ); assert ( ret == -1 ); // \u53d1\u751f\u9519\u8bef perror ( \"write\" ); ret = System :: GetInstance () -> close ( fd ); assert ( ret == 0 ); return 0 ; } \u7f16\u8bd1\u671f\u5ef6\u8fdf\u7ed1\u5b9a(\u7f16\u8bd1\u671f\u6ce8\u5165) \u200b\u2003 \u2003\u521b\u5efa\u4e00\u4e2a\u547d\u540d\u7a7a\u95f4\uff0c\u521b\u5efa\u4e00\u7cfb\u5217\u548c\u7cfb\u7edf\u8c03\u7528\u540c\u540d\u7684\u65b9\u6cd5\uff0c\u95f4\u63a5\u7684\u8c03\u7528\u7cfb\u7edf\u8c03\u7528\uff0c\u5199\u6d4b\u8bd5\u4ee3\u7801\u7684\u65f6\u5019\u91cd\u65b0\u5b9a\u4e49\u8fd9\u4e9b\u65b9\u6cd5\uff0c\u8fd9\u5c31\u76f8\u5f53\u4e8e\u4e00\u4efd\u4ee3\u7801\u6709\u4e86\u4e24\u4efd\u5b9e\u73b0\uff0c\u6839\u636e\u7f16\u8bd1\u7684\u65f6\u5019\u94fe\u63a5\u54ea\u4efd\u4ee3\u7801\u6765\u51b3\u5b9a\u662f\u5426\u542f\u7528mock\uff0c\u8fd9\u4e2a\u770b\u8d77\u6765\u8981\u6bd4\u57fa\u4e8e\u865a\u51fd\u6570\u7684\u8981\u7b80\u5355\u7684\u591a\u4e86\u3002\u5b8c\u6574\u7684\u793a\u4f8b\u4ee3\u7801\u5982\u4e0b: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 // file_ops.h namespace FileOps { int open ( const char * path , int oflag , ...); ssize_t read ( int fildes , void * buf , size_t nbyte ); ssize_t write ( int fildes , const void * buf , size_t nbyte ); int close ( int fildes ); } // namespace FileOps // file_ops.cc namespace FileOps { int open ( const char * path , int oflag , ...) { return :: open ( path , oflag , 0777 ); } ssize_t read ( int fildes , void * buf , size_t nbyte ) { return :: read ( fildes , buf , nbyte ); } ssize_t write ( int fildes , const void * buf , size_t nbyte ) { return :: write ( fildes , buf , nbyte ); } int close ( int fildes ) { return :: close ( fildes ); } } // namespace FileOps // mock_file_ops.cc namespace FileOps { int open ( const char * path , int oflag , ...) { return :: open ( path , oflag , 0777 ); } ssize_t read ( int fildes , void * buf , size_t nbyte ) { return :: read ( fildes , buf , nbyte ); } // \u8fd9\u91cc\u505a\u4e86mock\uff0c\u6539\u53d8\u4e86write\u7684\u884c\u4e3a ssize_t write ( int fildes , const void * buf , size_t nbyte ) { errno = EIO ; return -1 ; } int close ( int fildes ) { return :: close ( fildes ); } } // namespace FileOps // \u6d4b\u8bd5\u7a0b\u5e8f int main () { int fd = FileOps :: open ( \"txt\" , O_RDWR | O_CREAT , 0777 ); assert ( fd > 0 ); int ret = FileOps :: write ( fd , \"12345\" , 5 ); if ( ret == -1 ) { perror ( \"write:\" ); } ret = FileOps :: close ( fd ); assert ( ret == 0 ); return 0 ; } \u200b\u2003 \u2003\u200b\u4e24\u79cd\u65b9\u6cd5\u90fd\u6bd4\u8f83\u597d\u5b9e\u73b0\uff0c\u524d\u63d0\u662f\u4ee3\u7801\u5728\u4e00\u5f00\u59cb\u7684\u65f6\u5019\u5c31\u8003\u8651\u8fc7\u8fd9\u4e9b\u56e0\u7d20\uff0c\u5e76\u6309\u7167\u4e0a\u8ff0\u65b9\u5f0f\u6765\u7f16\u5199\uff0c\u7136\u540e\u73b0\u5b9e\u603b\u662f\u6b8b\u9177\u7684\uff0c\u9762\u5bf9\u4e00\u4e2a\u5df2\u7ecf\u7f16\u7801\u5b8c\u6210\u7684\u7a0b\u5e8f\u8be5\u5982\u4f55\u4e3a\u5176\u7f16\u5199\u7cfb\u7edf\u8c03\u7528\u7684mock\u5462?\u5c31\u9700\u8981\u7528\u5230\u94fe\u63a5\u671f\u57ab\u7247(link seam)\u7684\u65b9\u6cd5\u3002 \u94fe\u63a5\u671f\u57ab\u7247(link seam) \u200b\u2003 \u2003\u8fde\u63a5\u5668\u57ab\u7247\u7684\u65b9\u5f0f\u4e00\u822c\u60c5\u51b5\u6709\u4e09\u79cd\uff0c\u5982\u4e0b: Shadowing functions through linking order (override functions in libraries with new definitions in object files) Wrapping functions with GNU's linker option -wrap (GNU Linux only) Run-time function interception* with the preload functionality of the dynamic linker for shared libraries (GNU Linux and Mac OS X only) \u200b\u2003 \u2003\u7b2c\u4e00\u79cd\u5c31\u662f\u901a\u8fc7\u94fe\u63a5\u987a\u5e8f\u6765\u6539\u53d8\u94fe\u63a5\u7684\u5bf9\u8c61\uff0c\u5c06\u8981mock\u7684\u5bf9\u8c61\u91cd\u65b0\u5b9e\u73b0\u4e00\u904d\uff0c\u94fe\u63a5\u7684\u65f6\u5019\u94fe\u63a5\u5668\u4f1a\u4f18\u5148\u4f7f\u7528\u6211\u4eec\u81ea\u5df1\u5b9e\u73b0\u7684\u540c\u540d\u51fd\u6570\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5c06\u76ee\u6807\u66ff\u6362\u4e3a\u8981mock\u7684\u5bf9\u8c61\u4e86\uff0c\u5b8c\u6574\u4ee3\u7801\u5982\u4e0b: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 // \u4e00\u4e2a\u5f85\u6d4b\u8bd5\u7684\u5bf9\u8c61 int main () { int fd = :: open ( \"txt\" , O_RDWR | O_CREAT , 0777 ); assert ( fd > 0 ); int ret = :: write ( fd , \"12345\" , 5 ); if ( ret == -1 ) { perror ( \"write:\" ); } ret = :: close ( fd ); assert ( ret == 0 ); return 0 ; } // \u5bf9\u76ee\u6807\u8fdb\u884cmock\uff0cmock\u7684\u5bf9\u8c61\u662fwrite\u7cfb\u7edf\u8c03\u7528 typedef ssize_t ( * write_func_t )( int fildes , const void * buf , size_t nbyte ); // \u901a\u8fc7dlsym\u7684RTLD_NEXT\u83b7\u53d6write\u7684\u4e0b\u4e00\u4e2a\u5b9a\u4e49\uff0c\u4e5f\u5c31\u662flibc\u4e2d\u7684\u5b9a\u4e49\uff0c\u5982\u679c\u60f3\u5728mock\u4e2d // \u8c03\u7528\u771f\u5b9e\u7684write\u7cfb\u7edf\u8c03\u7528\u4e0d\u80fd\u76f4\u63a5\u7528write\uff0c\u56e0\u4e3awrite\u5df2\u7ecf\u88abmock\u4e86\uff0c\u8fd9\u6837\u4f1a\u5bfc\u81f4\u4e00\u76f4\u9012\u5f52\u4e0b\u53bb // \u6240\u4ee5\u8fd9\u91cc\u901a\u8fc7\u83b7\u53d6\u771f\u5b9e\u7684write\u8c03\u7528\u7684\u5730\u5740\uff0c\u4ece\u800c\u96be\u9053write\u7684\u8c03\u7528\u5165\u53e3\uff0c\u8fd9\u6837\u65e2\u53ef\u4ee5\u5728mock\u4e2d\u8c03\u7528 // \u771f\u5b9e\u7684write\u8c03\u7528\u4e86 write_func_t old_write_func = reinterpret_cast < write_func_t > ( dlsym ( RTLD_NEXT , \"write\" )); // \u8981mock\u7684\u5bf9\u8c61 extern \"C\" ssize_t write ( int fildes , const void * buf , size_t nbyte ) { errno = EIO ; return -1 ; } \u200b\u2003 \u2003\u53e6\u5916\u4e00\u79cd\u5c31\u662fLinux\u4e0b\u72ec\u6709\u7684\uff0c\u901a\u8fc7gcc\u7684--wrap\u9009\u9879\u53ef\u4ee5\u6307\u5b9a\u8981wrap\u7684\u7cfb\u7edf\u8c03\u7528\uff0c\u90a3\u4e48\u76f8\u5e94\u7684\u5c31\u56de\u53bb\u8c03\u7528\u5e26\u6709 __wrap \u524d\u7f00\u7684\u5bf9\u5e94\u7cfb\u7edf\u8c03\u7528\u5b9e\u73b0\uff0c\u6bd4\u5982--wrap=write\uff0c\u90a3\u4e48\u5728\u94fe\u63a5\u7684\u65f6\u5019\u5c31\u4f1a\u94fe\u63a5\u5230 __wrap_write \uff0c\u800c\u771f\u5b9e\u7684write\u8c03\u7528\u53d8\u6210\u4e86 __real_write \u3002\u5b8c\u6574\u4ee3\u7801\u4f8b\u5b50\u5982\u4e0b: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 // \u6d4b\u8bd5\u7a0b\u5e8f int main () { int fd = :: open ( \"txt\" , O_RDWR | O_CREAT , 0777 ); assert ( fd > 0 ); int ret = :: write ( fd , \"12345\" , 5 ); if ( ret == -1 ) { perror ( \"write:\" ); } ret = :: close ( fd ); assert ( ret == 0 ); return 0 ; } // mock\u5bf9\u8c61 extern \"C\" ssize_t __real_write ( int fildes , const void * buf , size_t nbyte ); extern \"C\" ssize_t __wrap_write ( int fildes , const void * buf , size_t nbyte ) { __real_write ( fildes , buf , nbyte ); errno = EIO ; return -1 ; } \u200b\u2003 \u2003\u6700\u540e\u4e00\u79cd\u5c31\u662f\u7ed9\u7cfb\u7edf\u8c03\u7528\u63d0\u4f9b\u4e00\u4efd mock \u5b9e\u73b0\uff0c\u5e76\u7f16\u8bd1\u6210\u52a8\u6001\u5e93\uff0c\u7136\u540e\u901a\u8fc7 LD_LIBRARY_PATH \u6539\u53d8\u52a0\u8f7d\u52a8\u6001\u5e93\u7684\u641c\u7d22\u8def\u5f84\u8ba9\u5176\u4f18\u5148\u641c\u7d22mock\u7248\u672c\u7684\u52a8\u6001\u5e93\uff0c\u6216\u8005\u662f\u8bbe\u7f6e LD_PRELOAD \u73af\u5883\u53d8\u91cf\uff0c\u9884\u5148\u52a0\u8f7dmock\u7684\u52a8\u6001\u5e93\u3002 \u9644\u5f55 \u672c\u6587\u6240\u6709\u4ee3\u7801\u89c1 github Advice on Mocking System Calls","title":"\u5982\u4f55mock\u7cfb\u7edf\u8c03\u7528"},{"location":"%E5%8D%9A%E5%AE%A2/doc/cpp/%E5%A6%82%E4%BD%95mock%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/#mock","text":"","title":"\u5982\u4f55mock\u7cfb\u7edf\u8c03\u7528"},{"location":"%E5%8D%9A%E5%AE%A2/doc/cpp/%E5%A6%82%E4%BD%95mock%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/#_1","text":"\u200b\u2003 \u2003Linux\u4e0b\u5f00\u53d1\u5b58\u50a8\u7cfb\u7edf\u3001\u7f51\u7edc\u5e93\u7684\u65f6\u5019\u4f1a\u7528\u5230\u4e00\u7cfb\u5217Linux\u7684\u7cfb\u7edf\u8c03\u7528\uff0c\u6bcf\u4e00\u4e2a\u7cfb\u7edf\u8c03\u7528\u90fd\u6709\u4e00\u4e9b\u51fa\u9519\u7684\u573a\u666f\uff0c\u6709\u4e9b\u573a\u666f\u5f88\u6781\u7aef\uff0c\u6bd4\u5982\u5185\u5b58\u4f7f\u7528\u8fbe\u5230\u4e0a\u9650\u3001\u78c1\u76d8\u5199\u6ee1\u7b49\uff0c\u5982\u679c\u5bf9\u5176\u8fdb\u884c\u6d4b\u8bd5\u7684\u8bdd\uff0c\u5f88\u96be\u53bb\u6784\u9020\u8fd9\u6837\u7684\u4e00\u4e2a\u573a\u666f\uff0c\u8fd9\u4e2a\u65f6\u5019\u96c6\u6210\u6d4b\u8bd5\u5c31\u663e\u5f97\u529b\u4e0d\u5b58\u5fc3\u4e86\uff0c\u53ea\u80fd\u9760\u5355\u5143\u6d4b\u8bd5\u6765\u8986\u76d6\u8fd9\u4e9b\u573a\u666f\u3002\u73b0\u5728\u7684\u95ee\u9898\u5c31\u662f\u5982\u4f55\u53bbmock\u8fd9\u4e9b\u7cfb\u7edf\u8c03\u7528\uff0c\u7136\u540e\u901a\u8fc7\u7a0b\u5e8f\u8fd4\u56de\u5bf9\u5e94\u573a\u666f\u7684\u9519\u8bef\u7801\u6765\u6a21\u62df\u5404\u79cd\u573a\u666f\u3002\u4e5f\u5c31\u662f\u5c06\u5bf9\u7cfb\u7edf\u51fd\u6570\u7684\u4f9d\u8d56\u6ce8\u5165\u5230\u7a0b\u5e8f\u4e2d\u3002","title":"\u80cc\u666f"},{"location":"%E5%8D%9A%E5%AE%A2/doc/cpp/%E5%A6%82%E4%BD%95mock%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/#_2","text":"\u200b\u2003 \u2003\u76ee\u524d\u5b9e\u73b0\u7cfb\u7edf\u51fd\u6570\u7684\u4f9d\u8d56\u6ce8\u5165\u7684\u624b\u6bb5\u6709\u5f88\u591a\uff0c\u5206\u4e3a\u7f16\u8bd1\u671f\u6ce8\u5165\uff0c\u548c\u8fd0\u884c\u671f\u6ce8\u5165\uff0c\u81f3\u4e8e\u4ec0\u4e48\u662f\u4f9d\u8d56\u6ce8\u5165\u53ef\u4ee5\u53c2\u8003\u77e5\u4e4e\u7684\u4e00\u7bc7\u6587\u7ae0 \u5982\u4f55\u7528\u6700\u7b80\u5355\u7684\u65b9\u5f0f\u89e3\u91ca\u4f9d\u8d56\u6ce8\u5165 \uff0c\u4e0b\u9762\u4ecb\u7ecd\u51e0\u79cd\u4f9d\u8d56\u6ce8\u5165\u7684\u65b9\u6cd5: \u865a\u51fd\u6570\u5b9e\u73b0\u4f9d\u8d56\u6ce8\u5165(\u8fd0\u884c\u671f\u6ce8\u5165) \u200b\u2003 \u2003\u4f7f\u7528\u4f20\u7edf\u7684\u9762\u5411\u5bf9\u8c61\u7684\u624b\u6cd5\uff0c\u501f\u52a9\u8fd0\u884c\u671f\u7684\u5ef6\u8fdf\u7ed1\u5b9a\u5b9e\u73b0\u6ce8\u5165\u548c\u66ff\u6362\uff0c\u81ea\u5df1\u5b9e\u73b0\u4e00\u4e2aSystem\u63a5\u53e3\u7c7b\uff0c\u628a\u7a0b\u5e8f\u7528\u5230\u7684\u7cfb\u7edf\u8c03\u7528\u90fd\u7528\u865a\u51fd\u6570\u5c01\u88c5\u4e00\u5c42\uff0c\u7136\u540e\u5728\u8c03\u7528\u7684\u65f6\u5019\u4e0d\u76f4\u63a5\u8c03\u7528\u7cfb\u7edf\u8c03\u7528\uff0c\u800c\u662f\u8c03\u7528\u7684System\u5bf9\u5e94\u7684\u65b9\u6cd5\u3002\u8fd9\u6837\u4ee3\u7801\u7684\u4e3b\u52a8\u6743\u5c31\u4ea4\u7ed9\u4e86System\u63a5\u53e3\u7c7b\u4e86\u3002\u5199\u5355\u5143\u6d4b\u8bd5\u7684\u65f6\u5019\u5c06\u8fd9\u4e2aSystem\u63a5\u53e3\u7c7b\u66ff\u6362\u6210\u6211\u4eec\u81ea\u5df1\u7684mock\u5bf9\u8c61\u5c31\u53ef\u4ee5\u3002\u5b8c\u6574\u7684\u793a\u4f8b\u4ee3\u7801\u5982\u4e0b: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 // system.h class System { public : virtual int open ( const char * path , int oflag , ...) = 0 ; virtual ssize_t read ( int fildes , void * buf , size_t nbyte ) = 0 ; virtual ssize_t write ( int fildes , const void * buf , size_t nbyte ) = 0 ; virtual int close ( int fildes ) = 0 ; static System * GetInstance (); static void set_instance ( System * instance ) { instance_ = instance ; } private : static System * instance_ ; }; // \u5177\u4f53\u7684\u5b9e\u73b0 class FileOps : public System { public : int open ( const char * path , int oflag , ...) override ; ssize_t read ( int fildes , void * buf , size_t nbyte ) override ; ssize_t write ( int fildes , const void * buf , size_t nbyte ) override ; int close ( int fildes ) override ; static FileOps * GetInstance (); }; // system.cc System * System :: instance_ = nullptr ; // \u9ed8\u8ba4\u5b9e\u73b0\u662fFileOps\uff0cmock\u7684\u65f6\u5019\u901a\u8fc7\u6539\u53d8\u8fd9\u4e2a\u9ed8\u8ba4\u5b9e\u73b0\u4ece\u800c\u628a\u4e3b\u52a8\u6743\u4ece\u9ed8\u8ba4\u5b9e\u73b0\u8f6c\u5230\u4e86mock\u7684\u5b9e\u73b0 System * System::GetInstance () { if ( ! instance_ ) { instance_ = FileOps :: GetInstance (); } assert ( instance_ ); return instance_ ; } int FileOps::open ( const char * path , int oflag , ...) { return :: open ( path , oflag , 0777 ); } ssize_t FileOps::read ( int fildes , void * buf , size_t nbyte ) { return :: read ( fildes , buf , nbyte ); } ssize_t FileOps::write ( int fildes , const void * buf , size_t nbyte ) { return :: write ( fildes , buf , nbyte ); } int FileOps::close ( int fildes ) { return :: close ( fildes ); } FileOps * FileOps::GetInstance () { static FileOps sys ; return & sys ; } // \u6b63\u5e38\u8c03\u7528 main.cc int main () { assert ( System :: GetInstance () != nullptr ); int fd = System :: GetInstance () -> open ( \"txt\" , O_RDWR | O_CREAT , 0777 ); assert ( fd > 0 ); int ret = System :: GetInstance () -> write ( fd , \"12345\" , 5 ); assert ( ret > 0 ); ret = System :: GetInstance () -> close ( fd ); assert ( ret == 0 ); return 0 ; } // \u6d4b\u8bd5\u7684\u65f6\u5019\u8c03\u7528\u5982\u4e0b\uff0c\u6a21\u62df\u4e00\u4e2aIO\u9519\u8bef // \u4e00\u4e2amock\u7248\u672c\u7684\u5b9e\u73b0 test.cc class MockFileOps : public System { public : int open ( const char * path , int oflag , ...) override ; ssize_t read ( int fildes , void * buf , size_t nbyte ) override ; ssize_t write ( int fildes , const void * buf , size_t nbyte ) override ; int close ( int fildes ) override ; static MockFileOps * GetInstance (); }; int MockFileOps::open ( const char * path , int oflag , ...) { return :: open ( path , oflag , 0777 ); } ssize_t MockFileOps::read ( int fildes , void * buf , size_t nbyte ) { return :: read ( fildes , buf , nbyte ); } // \u6a21\u62df\u7684\u4e00\u4e2aIO\u9519\u8bef ssize_t MockFileOps::write ( int fildes , const void * buf , size_t nbyte ) { errno = EIO ; return -1 ; } int MockFileOps::close ( int fildes ) { return :: close ( fildes ); } MockFileOps * MockFileOps::GetInstance () { static MockFileOps sys ; return & sys ; } int main () { // \u6539\u53d8\u9ed8\u8ba4\u5b9e\u73b0 System :: set_instance ( MockFileOps :: GetInstance ()); assert ( System :: GetInstance () != nullptr ); int fd = System :: GetInstance () -> open ( \"txt\" , O_RDWR | O_CREAT , 0777 ); assert ( fd > 0 ); int ret = System :: GetInstance () -> write ( fd , \"12345\" , 5 ); assert ( ret == -1 ); // \u53d1\u751f\u9519\u8bef perror ( \"write\" ); ret = System :: GetInstance () -> close ( fd ); assert ( ret == 0 ); return 0 ; } \u7f16\u8bd1\u671f\u5ef6\u8fdf\u7ed1\u5b9a(\u7f16\u8bd1\u671f\u6ce8\u5165) \u200b\u2003 \u2003\u521b\u5efa\u4e00\u4e2a\u547d\u540d\u7a7a\u95f4\uff0c\u521b\u5efa\u4e00\u7cfb\u5217\u548c\u7cfb\u7edf\u8c03\u7528\u540c\u540d\u7684\u65b9\u6cd5\uff0c\u95f4\u63a5\u7684\u8c03\u7528\u7cfb\u7edf\u8c03\u7528\uff0c\u5199\u6d4b\u8bd5\u4ee3\u7801\u7684\u65f6\u5019\u91cd\u65b0\u5b9a\u4e49\u8fd9\u4e9b\u65b9\u6cd5\uff0c\u8fd9\u5c31\u76f8\u5f53\u4e8e\u4e00\u4efd\u4ee3\u7801\u6709\u4e86\u4e24\u4efd\u5b9e\u73b0\uff0c\u6839\u636e\u7f16\u8bd1\u7684\u65f6\u5019\u94fe\u63a5\u54ea\u4efd\u4ee3\u7801\u6765\u51b3\u5b9a\u662f\u5426\u542f\u7528mock\uff0c\u8fd9\u4e2a\u770b\u8d77\u6765\u8981\u6bd4\u57fa\u4e8e\u865a\u51fd\u6570\u7684\u8981\u7b80\u5355\u7684\u591a\u4e86\u3002\u5b8c\u6574\u7684\u793a\u4f8b\u4ee3\u7801\u5982\u4e0b: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 // file_ops.h namespace FileOps { int open ( const char * path , int oflag , ...); ssize_t read ( int fildes , void * buf , size_t nbyte ); ssize_t write ( int fildes , const void * buf , size_t nbyte ); int close ( int fildes ); } // namespace FileOps // file_ops.cc namespace FileOps { int open ( const char * path , int oflag , ...) { return :: open ( path , oflag , 0777 ); } ssize_t read ( int fildes , void * buf , size_t nbyte ) { return :: read ( fildes , buf , nbyte ); } ssize_t write ( int fildes , const void * buf , size_t nbyte ) { return :: write ( fildes , buf , nbyte ); } int close ( int fildes ) { return :: close ( fildes ); } } // namespace FileOps // mock_file_ops.cc namespace FileOps { int open ( const char * path , int oflag , ...) { return :: open ( path , oflag , 0777 ); } ssize_t read ( int fildes , void * buf , size_t nbyte ) { return :: read ( fildes , buf , nbyte ); } // \u8fd9\u91cc\u505a\u4e86mock\uff0c\u6539\u53d8\u4e86write\u7684\u884c\u4e3a ssize_t write ( int fildes , const void * buf , size_t nbyte ) { errno = EIO ; return -1 ; } int close ( int fildes ) { return :: close ( fildes ); } } // namespace FileOps // \u6d4b\u8bd5\u7a0b\u5e8f int main () { int fd = FileOps :: open ( \"txt\" , O_RDWR | O_CREAT , 0777 ); assert ( fd > 0 ); int ret = FileOps :: write ( fd , \"12345\" , 5 ); if ( ret == -1 ) { perror ( \"write:\" ); } ret = FileOps :: close ( fd ); assert ( ret == 0 ); return 0 ; } \u200b\u2003 \u2003\u200b\u4e24\u79cd\u65b9\u6cd5\u90fd\u6bd4\u8f83\u597d\u5b9e\u73b0\uff0c\u524d\u63d0\u662f\u4ee3\u7801\u5728\u4e00\u5f00\u59cb\u7684\u65f6\u5019\u5c31\u8003\u8651\u8fc7\u8fd9\u4e9b\u56e0\u7d20\uff0c\u5e76\u6309\u7167\u4e0a\u8ff0\u65b9\u5f0f\u6765\u7f16\u5199\uff0c\u7136\u540e\u73b0\u5b9e\u603b\u662f\u6b8b\u9177\u7684\uff0c\u9762\u5bf9\u4e00\u4e2a\u5df2\u7ecf\u7f16\u7801\u5b8c\u6210\u7684\u7a0b\u5e8f\u8be5\u5982\u4f55\u4e3a\u5176\u7f16\u5199\u7cfb\u7edf\u8c03\u7528\u7684mock\u5462?\u5c31\u9700\u8981\u7528\u5230\u94fe\u63a5\u671f\u57ab\u7247(link seam)\u7684\u65b9\u6cd5\u3002","title":"\u7cfb\u7edf\u51fd\u6570\u7684\u4f9d\u8d56\u6ce8\u5165"},{"location":"%E5%8D%9A%E5%AE%A2/doc/cpp/%E5%A6%82%E4%BD%95mock%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/#link-seam","text":"\u200b\u2003 \u2003\u8fde\u63a5\u5668\u57ab\u7247\u7684\u65b9\u5f0f\u4e00\u822c\u60c5\u51b5\u6709\u4e09\u79cd\uff0c\u5982\u4e0b: Shadowing functions through linking order (override functions in libraries with new definitions in object files) Wrapping functions with GNU's linker option -wrap (GNU Linux only) Run-time function interception* with the preload functionality of the dynamic linker for shared libraries (GNU Linux and Mac OS X only) \u200b\u2003 \u2003\u7b2c\u4e00\u79cd\u5c31\u662f\u901a\u8fc7\u94fe\u63a5\u987a\u5e8f\u6765\u6539\u53d8\u94fe\u63a5\u7684\u5bf9\u8c61\uff0c\u5c06\u8981mock\u7684\u5bf9\u8c61\u91cd\u65b0\u5b9e\u73b0\u4e00\u904d\uff0c\u94fe\u63a5\u7684\u65f6\u5019\u94fe\u63a5\u5668\u4f1a\u4f18\u5148\u4f7f\u7528\u6211\u4eec\u81ea\u5df1\u5b9e\u73b0\u7684\u540c\u540d\u51fd\u6570\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5c06\u76ee\u6807\u66ff\u6362\u4e3a\u8981mock\u7684\u5bf9\u8c61\u4e86\uff0c\u5b8c\u6574\u4ee3\u7801\u5982\u4e0b: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 // \u4e00\u4e2a\u5f85\u6d4b\u8bd5\u7684\u5bf9\u8c61 int main () { int fd = :: open ( \"txt\" , O_RDWR | O_CREAT , 0777 ); assert ( fd > 0 ); int ret = :: write ( fd , \"12345\" , 5 ); if ( ret == -1 ) { perror ( \"write:\" ); } ret = :: close ( fd ); assert ( ret == 0 ); return 0 ; } // \u5bf9\u76ee\u6807\u8fdb\u884cmock\uff0cmock\u7684\u5bf9\u8c61\u662fwrite\u7cfb\u7edf\u8c03\u7528 typedef ssize_t ( * write_func_t )( int fildes , const void * buf , size_t nbyte ); // \u901a\u8fc7dlsym\u7684RTLD_NEXT\u83b7\u53d6write\u7684\u4e0b\u4e00\u4e2a\u5b9a\u4e49\uff0c\u4e5f\u5c31\u662flibc\u4e2d\u7684\u5b9a\u4e49\uff0c\u5982\u679c\u60f3\u5728mock\u4e2d // \u8c03\u7528\u771f\u5b9e\u7684write\u7cfb\u7edf\u8c03\u7528\u4e0d\u80fd\u76f4\u63a5\u7528write\uff0c\u56e0\u4e3awrite\u5df2\u7ecf\u88abmock\u4e86\uff0c\u8fd9\u6837\u4f1a\u5bfc\u81f4\u4e00\u76f4\u9012\u5f52\u4e0b\u53bb // \u6240\u4ee5\u8fd9\u91cc\u901a\u8fc7\u83b7\u53d6\u771f\u5b9e\u7684write\u8c03\u7528\u7684\u5730\u5740\uff0c\u4ece\u800c\u96be\u9053write\u7684\u8c03\u7528\u5165\u53e3\uff0c\u8fd9\u6837\u65e2\u53ef\u4ee5\u5728mock\u4e2d\u8c03\u7528 // \u771f\u5b9e\u7684write\u8c03\u7528\u4e86 write_func_t old_write_func = reinterpret_cast < write_func_t > ( dlsym ( RTLD_NEXT , \"write\" )); // \u8981mock\u7684\u5bf9\u8c61 extern \"C\" ssize_t write ( int fildes , const void * buf , size_t nbyte ) { errno = EIO ; return -1 ; } \u200b\u2003 \u2003\u53e6\u5916\u4e00\u79cd\u5c31\u662fLinux\u4e0b\u72ec\u6709\u7684\uff0c\u901a\u8fc7gcc\u7684--wrap\u9009\u9879\u53ef\u4ee5\u6307\u5b9a\u8981wrap\u7684\u7cfb\u7edf\u8c03\u7528\uff0c\u90a3\u4e48\u76f8\u5e94\u7684\u5c31\u56de\u53bb\u8c03\u7528\u5e26\u6709 __wrap \u524d\u7f00\u7684\u5bf9\u5e94\u7cfb\u7edf\u8c03\u7528\u5b9e\u73b0\uff0c\u6bd4\u5982--wrap=write\uff0c\u90a3\u4e48\u5728\u94fe\u63a5\u7684\u65f6\u5019\u5c31\u4f1a\u94fe\u63a5\u5230 __wrap_write \uff0c\u800c\u771f\u5b9e\u7684write\u8c03\u7528\u53d8\u6210\u4e86 __real_write \u3002\u5b8c\u6574\u4ee3\u7801\u4f8b\u5b50\u5982\u4e0b: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 // \u6d4b\u8bd5\u7a0b\u5e8f int main () { int fd = :: open ( \"txt\" , O_RDWR | O_CREAT , 0777 ); assert ( fd > 0 ); int ret = :: write ( fd , \"12345\" , 5 ); if ( ret == -1 ) { perror ( \"write:\" ); } ret = :: close ( fd ); assert ( ret == 0 ); return 0 ; } // mock\u5bf9\u8c61 extern \"C\" ssize_t __real_write ( int fildes , const void * buf , size_t nbyte ); extern \"C\" ssize_t __wrap_write ( int fildes , const void * buf , size_t nbyte ) { __real_write ( fildes , buf , nbyte ); errno = EIO ; return -1 ; } \u200b\u2003 \u2003\u6700\u540e\u4e00\u79cd\u5c31\u662f\u7ed9\u7cfb\u7edf\u8c03\u7528\u63d0\u4f9b\u4e00\u4efd mock \u5b9e\u73b0\uff0c\u5e76\u7f16\u8bd1\u6210\u52a8\u6001\u5e93\uff0c\u7136\u540e\u901a\u8fc7 LD_LIBRARY_PATH \u6539\u53d8\u52a0\u8f7d\u52a8\u6001\u5e93\u7684\u641c\u7d22\u8def\u5f84\u8ba9\u5176\u4f18\u5148\u641c\u7d22mock\u7248\u672c\u7684\u52a8\u6001\u5e93\uff0c\u6216\u8005\u662f\u8bbe\u7f6e LD_PRELOAD \u73af\u5883\u53d8\u91cf\uff0c\u9884\u5148\u52a0\u8f7dmock\u7684\u52a8\u6001\u5e93\u3002","title":"\u94fe\u63a5\u671f\u57ab\u7247(link seam)"},{"location":"%E5%8D%9A%E5%AE%A2/doc/cpp/%E5%A6%82%E4%BD%95mock%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/#_3","text":"\u672c\u6587\u6240\u6709\u4ee3\u7801\u89c1 github Advice on Mocking System Calls","title":"\u9644\u5f55"},{"location":"%E5%8D%9A%E5%AE%A2/doc/cpp/Effective-Model-Cpp/item1/","text":"","title":"Item1"},{"location":"%E5%8D%9A%E5%AE%A2/doc/cpp/Effective-Model-Cpp/item38/","text":"Item38 Be aware of varying thread handle destructor behavior \u2003 \u2003\u5728 Item37 \u4e2d\u89e3\u91ca\u8fc7\u4e00\u4e2a\u72b6\u6001\u4e3a joinable \u7684 std::thread \u5bf9\u8c61\u5176\u5e95\u5c42\u5bf9\u5e94\u4e00\u4e2a\u7cfb\u7edf\u7ebf\u7a0b\u3002 std::future \u5bf9\u8c61\u548c std::thread \u6bd4\u8f83\u7c7b\u4f3c\uff0c\u4e00\u4e2a future \u5bf9\u8c61\u4e5f\u5bf9\u5e94\u7740\u4e00\u4e2a\u7cfb\u7edf\u7ebf\u7a0b\u3002\u5c3d\u7ba1\u5982\u6b64\u8fd9\u4e24\u8005\u5728\u6790\u6784\u7684\u65f6\u5019\u5176\u884c\u4e3a\u4e5f\u662f\u4e0d\u4e00\u6837\u7684\u3002\u5728 Item37 \u4e2d\u5df2\u7ecf\u63d0\u5230\u8fc7\u4e00\u4e2a joinable \u72b6\u6001\u7684 std::thread \u5bf9\u8c61\u5728\u6790\u6784\u7684\u65f6\u5019\u4f1a\u5bfc\u81f4\u7a0b\u5e8f terminate \uff0c\u8fd9\u662f\u56e0\u4e3a\u65e0\u8bba\u662f\u8c03\u7528 join \u8fd8\u662f detach \u90fd\u662f\u4e00\u4e2a\u7cdf\u7cd5\u7684\u884c\u4e3a\uff0c\u8fd9\u4e2a\u5728 Item37 \u4e2d\u5df2\u7ecf\u8fdb\u884c\u4e86\u89e3\u91ca\u3002\u800c\u672c\u6587\u6240\u8bf4\u7684 std::future \u5bf9\u8c61\uff0c\u5b83\u7684\u6790\u6784\u6709\u7684\u65f6\u5019\u7c7b\u4f3c\u4e8e\u9690\u5f0f\u8c03\u7528 join \uff0c\u6709\u7684\u65f6\u5019\u5219\u662f\u7c7b\u4f3c\u4e8e\u9690\u5f0f\u8c03\u7528 detach \uff0c\u751a\u81f3\u4e24\u8005\u90fd\u4e0d\u662f\uff0c\u4f46\u662f std::future \u4e0d\u4f1a\u5bfc\u81f4\u7a0b\u5e8f terminate \u3002 \u2003 \u2003\u65e2\u7136\u8c08\u5230\u4e86 std::future \uff0c\u90a3\u5c31\u6765\u8fdb\u4e00\u6b65\u770b\u4e00\u4e0b std::future \u5230\u5e95\u662f\u4ec0\u4e48\u4e1c\u897f\uff0c\u8fd9\u4e2a\u5bf9\u8c61\u5bf9\u4e8e\u5728\u5f02\u6b65\u7f16\u7a0b\u4e2d\u6709\u5f88\u5927\u7684\u4f5c\u7528\uff0c\u53ef\u4ee5\u5f02\u6b65\u83b7\u53d6\u7ebf\u7a0b\u7684\u6267\u884c\u7ed3\u679c\uff0c\u76f8\u5f53\u4e8e\u662f\u4e00\u4e2a channel \uff0c\u7528\u6765\u94fe\u63a5\u8c03\u7528\u8005\u548c\u88ab\u8c03\u7528\u8005\uff0c\u88ab\u8c03\u7528\u8005\u901a\u5e38\u4f1a\u5f02\u6b65\u7684\u5c06\u7ed3\u679c\u5199\u5165\u5230\u8fd9\u4e2a channel \u4e2d(\u901a\u5e38\u662f std::promise )\uff0c\u8c03\u7528\u8005\u901a\u8fc7 std::future \u5bf9\u8c61\u6765\u83b7\u53d6\u5199\u5165\u7684\u7ed3\u679c\uff0c\u6574\u4e2a\u8fc7\u7a0b\u5982\u4e0b\u56fe\uff1a \u2003 \u2003\u770b\u5230\u4e0a\u9762\u8fd9\u4e2a\u56fe\uff0c\u4f60\u6216\u8bb8\u4f1a\u5947\u602a\uff0c\u8fd9\u4e2a\u7ed3\u679c\u662f\u4fdd\u5b58\u5728\u54ea\u5462\uff1f\u9996\u5148\u80af\u5b9a\u662f\u4e0d\u80fd\u653e\u5728 std::promise \u5bf9\u8c61\u7684\uff0c\u56e0\u4e3a\u7ed3\u679c\u53ef\u80fd\u662f\u5728\u8c03\u7528 future \u5bf9\u8c61\u83b7\u53d6\u65f6\u65e9\u5df2\u4fdd\u5b58\u8d77\u6765\u4e86\uff0c\u90a3\u4e48\u88ab\u8c03\u7528\u8005\u8fd0\u884c\u7ed3\u675f\u4f1a\u5c06 std::promise \u6790\u6784\uff0c\u5982\u679c\u7ed3\u679c\u4fdd\u5b58\u5728\u8fd9\u4e2a\u5bf9\u8c61\u4e2d\u90a3\u5c31\u4f1a\u5bfc\u81f4\u7ed3\u679c\u4e22\u5931\u4e86\u3002\u90a3\u4e48\u80fd\u5426\u653e\u5728 std::future \u5bf9\u8c61\u91cc\u9762\u5462? \u540c\u6837\u4e5f\u4e0d\u884c\uff0c\u56e0\u4e3a std::future \u53ef\u4ee5\u7528\u6765\u521b\u5efa std::shared_future \uff0c\u90a3\u4e48\u5c31\u9700\u8981\u5c06\u7ed3\u679c\u4fdd\u5b58\u5728\u6bcf\u4e00\u4e2a future \u5bf9\u8c61\u4e2d\uff0c\u4f1a\u5bfc\u81f4\u8fd9\u4e2a\u7ed3\u679c\u88ab\u591a\u6b21\u62f7\u8d1d\u548c\u590d\u5236\uff0c\u6216\u8bb8\u53ef\u4ee5\u4f7f\u7528\u5f15\u7528\u8ba1\u6570\u7684\u65b9\u5f0f\u6765\u8bb0\u5f55\u5f53\u524d\u6709\u591a\u5c11\u4e2a future \u5bf9\u8c61\u5173\u8054\u5230\u8fd9\u4e2a\u7ed3\u679c\u4e2d\uff0c\u8fd9\u4e5f\u4e0d\u5931\u4e3a\u4e00\u79cd\u65b9\u6cd5\u3002\u4f46\u662f\u65e0\u8bba\u662f\u4f55\u79cd\u65b9\u5f0f\uff0c\u90fd\u4f1a\u9020\u6210\u4e00\u5b9a\u7684\u5f00\u9500\uff0c\u7b97\u4e0d\u4e0a\u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u65b9\u5f0f\u3002\u56e0\u6b64 C++11 \u5c06\u7ed3\u679c\u4fdd\u5b58\u5728\u4e00\u4e2a\u7279\u6b8a\u7684\u4f4d\u7f6e\uff0c\u8fd9\u4e2a\u4f4d\u7f6e\u88ab\u79f0\u4e3a\u5171\u4eab\u72b6\u6001\u3002\u53ef\u4ee5\u7b80\u5355\u7684\u4f7f\u7528\u4e0b\u9762\u8fd9\u5f20\u56fe\u6765\u8868\u793a\u5b83\u4eec\u4e4b\u95f4\u7684\u5173\u7cfb\uff1a \u200b\u8fd9\u4e2a\u5171\u4eab\u72b6\u6001\u5f88\u91cd\u8981\uff0c\u56e0\u4e3a std::future \u5bf9\u8c61\u7684\u6790\u6784\u884c\u4e3a\u548c\u8fd9\u4e2a\u72b6\u6001\u606f\u606f\u76f8\u5173\uff0c\u8fd9\u4e5f\u662f\u672c\u6587\u8981\u8ba8\u8bba\u7684\u4e3b\u9898\u3002 \u901a\u8fc7 std::async \u53d1\u8d77\u7684non-deferred\u7b56\u7565\u7684task\uff0c\u5176\u8fd4\u56de\u7684 std::future \uff0c\u5e76\u4e14\u662f\u6700\u540e\u4e00\u4e2a\u5f15\u7528\u5171\u4eab\u72b6\u6001\u7684\uff0c\u5176\u6790\u6784\u4f1a\u4e00\u76f4\u963b\u585e\uff0c\u76f4\u5230\u8fd9\u4e2atask\u8fd0\u884c\u7ed3\u675f\uff0c\u76f8\u5f53\u4e8e\u9690\u5f0f\u7684\u505a\u4e86 join \u3002 \u5176\u4ed6\u5f62\u5f0f\u7684 std::future \u5bf9\u8c61\u7684\u6790\u6784\u5c31\u662f\u7b80\u5355\u7684\u6790\u6784\uff0c\u5bf9\u4e8e\u5f02\u6b65\u8fd0\u884c\u7684task\u6765\u8bf4\uff0c\u8fd9\u7c7b\u4f3c\u4e8e\u9690\u5f0f\u8c03\u7528detach\uff0c\u5bf9\u4e8edeferred\u7b56\u7565\u8fd0\u884c\u7684task\u6765\u8bf4\uff0c\u76f8\u5f53\u4e8e\u8fd9\u4e2atask\u5c06\u4e0d\u4f1a\u8fd0\u884c\u3002 \u2003 \u2003\u8ba9\u6211\u4eec\u628a std::future \u6790\u6784\u4f1a\u9690\u5f0f\u8fdb\u884cjoin\u8fd9\u4e2a\u884c\u4e3a\u8fdb\u4e00\u6b65\u7ec6\u5316\u4e00\u4e0b\uff0c\u53ea\u8981\u6ee1\u8db3\u4e0b\u5217\u4e09\u4e2a\u6761\u4ef6\u7684\u60c5\u51b5\uff0c std::future \u7684\u6790\u6784\u624d\u4f1a\u662f\u9690\u5f0f\u7684\u505ajoin\u3002 \u8fd9\u4e2a std::future \u662f\u901a\u8fc7 std::async \u521b\u5efa\u7684\uff0c\u5e76\u4e14\u5f15\u7528\u4e86\u4e00\u4e2a\u5171\u4eab\u72b6\u6001 std::async \u8fd0\u884c\u4efb\u52a1\u7684\u65f6\u5019\u6307\u5b9a\u7684\u8fd0\u884c\u7b56\u7565\u662f std::launch::async \u8fd9\u4e2a future \u5bf9\u8c61\u662f\u6700\u540e\u4e00\u4e2a\u5f15\u7528\u5171\u4eab\u72b6\u6001\u7684\u5bf9\u8c61 \u200b\u2003 \u2003 std::future \u7684\u8fd9\u79cd\u7279\u6b8a\u7684\u6790\u6784\u884c\u4e3a\u8ba9\u6211\u4eec\u7684\u7a0b\u5e8f\u884c\u4e3a\u53d8\u5f97\u4e0d\u53ef\u9884\u6d4b\uff0c\u7279\u522b\u662f\u6211\u4eec\u6ca1\u6709\u529e\u6cd5\u77e5\u9053\u54ea\u4e2a future \u4f1a\u9690\u5f0f\u7684 join \uff0c\u54ea\u4e9b\u53c8\u662f detach \uff0c\u4ece std::future \u5bf9\u8c61\u672c\u8eab\u6765\u770b\u662f\u65e0\u6cd5\u770b\u51fa\u6765\u7684\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c\u4f46\u662f\u6211\u4eec\u77e5\u9053\uff0c\u51e1\u662f\u4ece std::async \u521b\u5efa\u7684 std::future \u90fd\u6709\u53ef\u80fd\u662f\u9690\u5f0f\u7684 join \uff0c\u800c\u5176\u4ed6\u65b9\u5f0f\u521b\u5efa\u7684 std::future \u5bf9\u8c61\u5219\u4e0d\u662f\uff0c\u6bd4\u5982\u901a\u8fc7 std::packaged_task \u521b\u5efa\u7684 std::future \uff0c\u5176\u6790\u6784\u5c31\u4e0d\u4f1a\u9690\u5f0f\u7684\u8fdb\u884c join \u3002","title":"Item38 Be aware of varying thread handle destructor behavior"},{"location":"%E5%8D%9A%E5%AE%A2/doc/cpp/Effective-Model-Cpp/item38/#item38-be-aware-of-varying-thread-handle-destructor-behavior","text":"\u5728 Item37 \u4e2d\u89e3\u91ca\u8fc7\u4e00\u4e2a\u72b6\u6001\u4e3a joinable \u7684 std::thread \u5bf9\u8c61\u5176\u5e95\u5c42\u5bf9\u5e94\u4e00\u4e2a\u7cfb\u7edf\u7ebf\u7a0b\u3002 std::future \u5bf9\u8c61\u548c std::thread \u6bd4\u8f83\u7c7b\u4f3c\uff0c\u4e00\u4e2a future \u5bf9\u8c61\u4e5f\u5bf9\u5e94\u7740\u4e00\u4e2a\u7cfb\u7edf\u7ebf\u7a0b\u3002\u5c3d\u7ba1\u5982\u6b64\u8fd9\u4e24\u8005\u5728\u6790\u6784\u7684\u65f6\u5019\u5176\u884c\u4e3a\u4e5f\u662f\u4e0d\u4e00\u6837\u7684\u3002\u5728 Item37 \u4e2d\u5df2\u7ecf\u63d0\u5230\u8fc7\u4e00\u4e2a joinable \u72b6\u6001\u7684 std::thread \u5bf9\u8c61\u5728\u6790\u6784\u7684\u65f6\u5019\u4f1a\u5bfc\u81f4\u7a0b\u5e8f terminate \uff0c\u8fd9\u662f\u56e0\u4e3a\u65e0\u8bba\u662f\u8c03\u7528 join \u8fd8\u662f detach \u90fd\u662f\u4e00\u4e2a\u7cdf\u7cd5\u7684\u884c\u4e3a\uff0c\u8fd9\u4e2a\u5728 Item37 \u4e2d\u5df2\u7ecf\u8fdb\u884c\u4e86\u89e3\u91ca\u3002\u800c\u672c\u6587\u6240\u8bf4\u7684 std::future \u5bf9\u8c61\uff0c\u5b83\u7684\u6790\u6784\u6709\u7684\u65f6\u5019\u7c7b\u4f3c\u4e8e\u9690\u5f0f\u8c03\u7528 join \uff0c\u6709\u7684\u65f6\u5019\u5219\u662f\u7c7b\u4f3c\u4e8e\u9690\u5f0f\u8c03\u7528 detach \uff0c\u751a\u81f3\u4e24\u8005\u90fd\u4e0d\u662f\uff0c\u4f46\u662f std::future \u4e0d\u4f1a\u5bfc\u81f4\u7a0b\u5e8f terminate \u3002 \u2003 \u2003\u65e2\u7136\u8c08\u5230\u4e86 std::future \uff0c\u90a3\u5c31\u6765\u8fdb\u4e00\u6b65\u770b\u4e00\u4e0b std::future \u5230\u5e95\u662f\u4ec0\u4e48\u4e1c\u897f\uff0c\u8fd9\u4e2a\u5bf9\u8c61\u5bf9\u4e8e\u5728\u5f02\u6b65\u7f16\u7a0b\u4e2d\u6709\u5f88\u5927\u7684\u4f5c\u7528\uff0c\u53ef\u4ee5\u5f02\u6b65\u83b7\u53d6\u7ebf\u7a0b\u7684\u6267\u884c\u7ed3\u679c\uff0c\u76f8\u5f53\u4e8e\u662f\u4e00\u4e2a channel \uff0c\u7528\u6765\u94fe\u63a5\u8c03\u7528\u8005\u548c\u88ab\u8c03\u7528\u8005\uff0c\u88ab\u8c03\u7528\u8005\u901a\u5e38\u4f1a\u5f02\u6b65\u7684\u5c06\u7ed3\u679c\u5199\u5165\u5230\u8fd9\u4e2a channel \u4e2d(\u901a\u5e38\u662f std::promise )\uff0c\u8c03\u7528\u8005\u901a\u8fc7 std::future \u5bf9\u8c61\u6765\u83b7\u53d6\u5199\u5165\u7684\u7ed3\u679c\uff0c\u6574\u4e2a\u8fc7\u7a0b\u5982\u4e0b\u56fe\uff1a \u2003 \u2003\u770b\u5230\u4e0a\u9762\u8fd9\u4e2a\u56fe\uff0c\u4f60\u6216\u8bb8\u4f1a\u5947\u602a\uff0c\u8fd9\u4e2a\u7ed3\u679c\u662f\u4fdd\u5b58\u5728\u54ea\u5462\uff1f\u9996\u5148\u80af\u5b9a\u662f\u4e0d\u80fd\u653e\u5728 std::promise \u5bf9\u8c61\u7684\uff0c\u56e0\u4e3a\u7ed3\u679c\u53ef\u80fd\u662f\u5728\u8c03\u7528 future \u5bf9\u8c61\u83b7\u53d6\u65f6\u65e9\u5df2\u4fdd\u5b58\u8d77\u6765\u4e86\uff0c\u90a3\u4e48\u88ab\u8c03\u7528\u8005\u8fd0\u884c\u7ed3\u675f\u4f1a\u5c06 std::promise \u6790\u6784\uff0c\u5982\u679c\u7ed3\u679c\u4fdd\u5b58\u5728\u8fd9\u4e2a\u5bf9\u8c61\u4e2d\u90a3\u5c31\u4f1a\u5bfc\u81f4\u7ed3\u679c\u4e22\u5931\u4e86\u3002\u90a3\u4e48\u80fd\u5426\u653e\u5728 std::future \u5bf9\u8c61\u91cc\u9762\u5462? \u540c\u6837\u4e5f\u4e0d\u884c\uff0c\u56e0\u4e3a std::future \u53ef\u4ee5\u7528\u6765\u521b\u5efa std::shared_future \uff0c\u90a3\u4e48\u5c31\u9700\u8981\u5c06\u7ed3\u679c\u4fdd\u5b58\u5728\u6bcf\u4e00\u4e2a future \u5bf9\u8c61\u4e2d\uff0c\u4f1a\u5bfc\u81f4\u8fd9\u4e2a\u7ed3\u679c\u88ab\u591a\u6b21\u62f7\u8d1d\u548c\u590d\u5236\uff0c\u6216\u8bb8\u53ef\u4ee5\u4f7f\u7528\u5f15\u7528\u8ba1\u6570\u7684\u65b9\u5f0f\u6765\u8bb0\u5f55\u5f53\u524d\u6709\u591a\u5c11\u4e2a future \u5bf9\u8c61\u5173\u8054\u5230\u8fd9\u4e2a\u7ed3\u679c\u4e2d\uff0c\u8fd9\u4e5f\u4e0d\u5931\u4e3a\u4e00\u79cd\u65b9\u6cd5\u3002\u4f46\u662f\u65e0\u8bba\u662f\u4f55\u79cd\u65b9\u5f0f\uff0c\u90fd\u4f1a\u9020\u6210\u4e00\u5b9a\u7684\u5f00\u9500\uff0c\u7b97\u4e0d\u4e0a\u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u65b9\u5f0f\u3002\u56e0\u6b64 C++11 \u5c06\u7ed3\u679c\u4fdd\u5b58\u5728\u4e00\u4e2a\u7279\u6b8a\u7684\u4f4d\u7f6e\uff0c\u8fd9\u4e2a\u4f4d\u7f6e\u88ab\u79f0\u4e3a\u5171\u4eab\u72b6\u6001\u3002\u53ef\u4ee5\u7b80\u5355\u7684\u4f7f\u7528\u4e0b\u9762\u8fd9\u5f20\u56fe\u6765\u8868\u793a\u5b83\u4eec\u4e4b\u95f4\u7684\u5173\u7cfb\uff1a \u200b\u8fd9\u4e2a\u5171\u4eab\u72b6\u6001\u5f88\u91cd\u8981\uff0c\u56e0\u4e3a std::future \u5bf9\u8c61\u7684\u6790\u6784\u884c\u4e3a\u548c\u8fd9\u4e2a\u72b6\u6001\u606f\u606f\u76f8\u5173\uff0c\u8fd9\u4e5f\u662f\u672c\u6587\u8981\u8ba8\u8bba\u7684\u4e3b\u9898\u3002 \u901a\u8fc7 std::async \u53d1\u8d77\u7684non-deferred\u7b56\u7565\u7684task\uff0c\u5176\u8fd4\u56de\u7684 std::future \uff0c\u5e76\u4e14\u662f\u6700\u540e\u4e00\u4e2a\u5f15\u7528\u5171\u4eab\u72b6\u6001\u7684\uff0c\u5176\u6790\u6784\u4f1a\u4e00\u76f4\u963b\u585e\uff0c\u76f4\u5230\u8fd9\u4e2atask\u8fd0\u884c\u7ed3\u675f\uff0c\u76f8\u5f53\u4e8e\u9690\u5f0f\u7684\u505a\u4e86 join \u3002 \u5176\u4ed6\u5f62\u5f0f\u7684 std::future \u5bf9\u8c61\u7684\u6790\u6784\u5c31\u662f\u7b80\u5355\u7684\u6790\u6784\uff0c\u5bf9\u4e8e\u5f02\u6b65\u8fd0\u884c\u7684task\u6765\u8bf4\uff0c\u8fd9\u7c7b\u4f3c\u4e8e\u9690\u5f0f\u8c03\u7528detach\uff0c\u5bf9\u4e8edeferred\u7b56\u7565\u8fd0\u884c\u7684task\u6765\u8bf4\uff0c\u76f8\u5f53\u4e8e\u8fd9\u4e2atask\u5c06\u4e0d\u4f1a\u8fd0\u884c\u3002 \u2003 \u2003\u8ba9\u6211\u4eec\u628a std::future \u6790\u6784\u4f1a\u9690\u5f0f\u8fdb\u884cjoin\u8fd9\u4e2a\u884c\u4e3a\u8fdb\u4e00\u6b65\u7ec6\u5316\u4e00\u4e0b\uff0c\u53ea\u8981\u6ee1\u8db3\u4e0b\u5217\u4e09\u4e2a\u6761\u4ef6\u7684\u60c5\u51b5\uff0c std::future \u7684\u6790\u6784\u624d\u4f1a\u662f\u9690\u5f0f\u7684\u505ajoin\u3002 \u8fd9\u4e2a std::future \u662f\u901a\u8fc7 std::async \u521b\u5efa\u7684\uff0c\u5e76\u4e14\u5f15\u7528\u4e86\u4e00\u4e2a\u5171\u4eab\u72b6\u6001 std::async \u8fd0\u884c\u4efb\u52a1\u7684\u65f6\u5019\u6307\u5b9a\u7684\u8fd0\u884c\u7b56\u7565\u662f std::launch::async \u8fd9\u4e2a future \u5bf9\u8c61\u662f\u6700\u540e\u4e00\u4e2a\u5f15\u7528\u5171\u4eab\u72b6\u6001\u7684\u5bf9\u8c61 \u200b\u2003 \u2003 std::future \u7684\u8fd9\u79cd\u7279\u6b8a\u7684\u6790\u6784\u884c\u4e3a\u8ba9\u6211\u4eec\u7684\u7a0b\u5e8f\u884c\u4e3a\u53d8\u5f97\u4e0d\u53ef\u9884\u6d4b\uff0c\u7279\u522b\u662f\u6211\u4eec\u6ca1\u6709\u529e\u6cd5\u77e5\u9053\u54ea\u4e2a future \u4f1a\u9690\u5f0f\u7684 join \uff0c\u54ea\u4e9b\u53c8\u662f detach \uff0c\u4ece std::future \u5bf9\u8c61\u672c\u8eab\u6765\u770b\u662f\u65e0\u6cd5\u770b\u51fa\u6765\u7684\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c\u4f46\u662f\u6211\u4eec\u77e5\u9053\uff0c\u51e1\u662f\u4ece std::async \u521b\u5efa\u7684 std::future \u90fd\u6709\u53ef\u80fd\u662f\u9690\u5f0f\u7684 join \uff0c\u800c\u5176\u4ed6\u65b9\u5f0f\u521b\u5efa\u7684 std::future \u5bf9\u8c61\u5219\u4e0d\u662f\uff0c\u6bd4\u5982\u901a\u8fc7 std::packaged_task \u521b\u5efa\u7684 std::future \uff0c\u5176\u6790\u6784\u5c31\u4e0d\u4f1a\u9690\u5f0f\u7684\u8fdb\u884c join \u3002","title":"Item38 Be aware of varying thread handle destructor behavior"},{"location":"%E5%8D%9A%E5%AE%A2/doc/cpp/Effective-Model-Cpp/item39/","text":"Item39 Consider void futures for one-shot event communication \u2003 \u2003\u6709\u7684\u65f6\u5019\u5bf9\u4e8e\u4e00\u4e2a\u4efb\u52a1\u6765\u8bf4\uff0c\u5e0c\u671b\u6709\u4e00\u79cd\u673a\u5236\u53ef\u4ee5\u548c\u53e6\u5916\u4e00\u4e2a\u4efb\u52a1\u8fdb\u884c\u901a\u4fe1\uff0c\u5c24\u5176\u662f\u90a3\u79cd\u5f02\u6b65\u8fd0\u884c\u7684\u4efb\u52a1\uff0c\u5e76\u4e14\u4f1a\u51fa\u73b0\u4e00\u79cd\u7279\u5b9a\u4e8b\u4ef6\u7684\u4efb\u52a1\uff0c\u53e6\u5916\u4e00\u4e2a\u4efb\u52a1\u9700\u8981\u7b49\u5230\u8fd9\u4e2a\u4e8b\u4ef6\u7684\u53d1\u751f\u624d\u80fd\u7ee7\u7eed\u8fd0\u884c\uff0c\u5178\u578b\u7684\uff0c\u53ef\u4ee5\u662f\u7b49\u5f85\u4e00\u4e2a\u91cd\u8981\u7684\u6570\u636e\u7ed3\u6784\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u6216\u8005\u662f\u7b49\u5f85\u4e00\u4e2a\u8ba1\u7b97\u9636\u6bb5\u5b8c\u6210\uff0c\u53c8\u6216\u8005\u662f\u68c0\u6d4b\u4e00\u4e2a\u91cd\u8981\u7684\u503c\u3002\u90a3\u4e48\u4ec0\u4e48\u6837\u7684\u65b9\u5f0f\u53ef\u4ee5\u5904\u7406\u597d\u8fd9\u79cd\u7ebf\u7a0b\u95f4\u7684\u901a\u4fe1\u5462\uff1f \u200b\u4e00\u4e2a\u5f88\u660e\u663e\u7684\u65b9\u6cd5\u5c31\u662f\u4f7f\u7528\u6761\u4ef6\u53d8\u91cf\uff0c\u4e00\u4e2a\u4efb\u52a1\u5c31\u7b49\u5f85\u6761\u4ef6\u53d8\u91cf\u4e0a\uff0c\u7b49\u5f85\u7279\u5b9a\u4e8b\u4ef6\u5b8c\u6210\u540e\u88ab\u5524\u9192\u5373\u53ef\uff0c\u90e8\u5206\u4ee3\u7801\u5982\u4e0b: 1 2 3 4 5 6 7 // cv\u8868\u793a\u4e00\u4e2a\u4e8b\u4ef6\uff0cm\u662f\u7528\u6765\u4fdd\u62a4\u8fd9\u4e2a\u6761\u4ef6\u53d8\u91cf std :: condition_variable cv ; std :: mutex m ; // \u8fdb\u884c\u4e8b\u4ef6\u63a2\u6d4b\u548c\u901a\u77e5 ..... // \u63a2\u6d4b\u4e8b\u4ef6\u662f\u5426\u53d1\u751f cv . notify_one (); // \u8fdb\u884c\u4e8b\u4ef6\u7684\u901a\u77e5 \u2003 \u2003\u5c3d\u7ba1\u4f7f\u7528\u6761\u4ef6\u53d8\u91cf\u53ef\u4ee5\u8fbe\u5230\u6211\u4eec\u60f3\u8981\u7684\u6548\u679c\uff0c\u4f46\u662f\u672a\u514d\u6709\u70b9\u590d\u6742\uff0c\u7b49\u5f85\u4e8b\u4ef6\u7684\u65f6\u5019\u8fd8\u9700\u8981\u4f7f\u7528 mutex \u5bf9\u6761\u4ef6\u53d8\u91cf\u8fdb\u884c\u4fdd\u62a4\uff0c\u5bf9\u4e8e\u4e00\u4e9b\u6bd4\u8f83\u7b80\u5355\u7684\u4e8b\u4ef6\u6765\u8bf4\u6ca1\u672a\u514d\u663e\u5f97\u8fc7\u91cd\u4e86\u3002\u6b64\u5916\u4f7f\u7528\u6761\u4ef6\u53d8\u91cf\u8fd8\u9700\u8981\u8003\u8651\u4e0b\u9762\u51e0\u4e2a\u95ee\u9898\uff1a \u5982\u679c\u63a2\u6d4b\u7684\u4efb\u52a1\u5728\u6761\u4ef6\u53d8\u91cfwait\u4e4b\u524d\u5c31\u8fdb\u884c\u4e86\u901a\u77e5\uff0c\u90a3\u4e48\u7b49\u5f85\u4e8b\u4ef6\u7684\u4efb\u52a1\u5c31\u4f1ahang\u4f4f \u6761\u4ef6\u53d8\u91cf\u7684wait\u4f1a\u51fa\u73b0\u865a\u5047\u5524\u9192\u7684\u95ee\u9898\uff0c\u5c3d\u7ba1\u53ef\u4ee5\u901a\u8fc7\u6dfb\u52a0\u4e00\u4e2a\u68c0\u6d4b\u6761\u4ef6\uff0c\u5728\u88ab\u865a\u5047\u5524\u9192\u7684\u65f6\u5019\uff0c\u518d\u6b21\u68c0\u6d4b\u6307\u5b9a\u4e8b\u4ef6\u662f\u5426\u53d1\u751f\uff0c\u4f46\u662f\u6709\u7684\u65f6\u5019\u5374\u6ca1\u6709\u4e00\u79cd\u53ef\u884c\u7684\u65b9\u5f0f\u7528\u6765\u68c0\u6d4b\u3002 \u2003 \u2003\u5047\u8bbe\u6211\u4eec\u53ef\u4ee5\u5904\u7406\u597d\u4e0a\u8ff0\u95ee\u9898\uff0c\u4f46\u662f\u4f7f\u7528\u6761\u4ef6\u53d8\u91cf\u4ecd\u7136\u4f1a\u5e26\u6765\u4e0d\u5c11\u7684\u5f00\u9500\uff0c\u6bd4\u5982\uff1a\u5728\u7279\u5b9a\u4e8b\u4ef6\u5b8c\u6210\u540e\u5fc5\u987b\u8981\u8fdb\u884c\u901a\u77e5\uff0c\u63a5\u53d7\u5230\u901a\u77e5\u540e\u8fd8\u9700\u8981\u518d\u6b21\u68c0\u67e5\u4e8b\u4ef6\u662f\u5426\u5b8c\u6210\u3002\u8fd9\u663e\u7136\u90fd\u662f\u4e00\u4e9b\u591a\u4f59\u7684\u64cd\u4f5c\u3002\u5bf9\u4e8e\u8fd9\u4e2a\u95ee\u9898\u53ef\u4ee5\u4f7f\u7528\u6211\u4eec\u5728 Item38 \u4e2d\u63d0\u5230\u7684 std::promise \u548c std::future \u6765\u5b8c\u6210\uff0c\u8fd9\u4e24\u8005\u6784\u6210\u4e86\u4e00\u4e2a\u7b80\u5355\u7684 channel \u7528\u4e8e\u901a\u4fe1\uff0c\u7279\u5b9a\u4e8b\u4ef6\u5b8c\u6210\u540e\u53ea\u9700\u8981\u5f80 std::promise \u5199\u5165\u4e00\u4e2a\u7a7a\u503c\u6765\u8868\u660e\u4e8b\u4ef6\u5b8c\u6210\uff0c\u90a3\u4e48\u963b\u585e\u5728 std::future \u5bf9\u8c61\u4e0a\u7684\u4efb\u52a1\u5c31\u4f1a\u88ab\u5524\u9192\uff0c\u90e8\u5206\u4ee3\u7801\u5982\u4e0b\uff1a 1 2 3 4 std :: promise < void > p ; p . set_value (); // \u4e8b\u4ef6\u5b8c\u6210\uff0c\u8fdb\u884c\u901a\u77e5 p . get_future (). wait (); // \u7b49\u5f85\u4e8b\u4ef6\u5b8c\u6210 \u2003 \u2003\u867d\u7136 std::promise \u548c std::future \u8fd9\u79cd\u65b9\u5f0f\u663e\u5f97\u66f4\u52a0\u7b80\u5355\uff0c\u4f46\u662f\u8fd9\u4e0d\u4ee3\u8868\u5b83\u662f\u5b8c\u7f8e\u7684\u65b9\u6848\uff0c\u8fd9\u79cd\u65b9\u5f0f\u9700\u8981\u7ef4\u62a4\u4e00\u4e2a\u5171\u4eab\u72b6\u6001\uff0c\u9700\u8981\u5728\u5806\u4e0a\u5206\u914d\u5b58\u50a8\uff0c\u6709\u5206\u914d\u548c\u91ca\u653e\u7684\u5f00\u9500\uff0c\u5e76\u4e14\u8fd9\u79cd\u4e8b\u4ef6\u901a\u77e5\u4e5f\u662f\u4e00\u6b21\u6027\u7684\uff0c\u800c\u6761\u4ef6\u53d8\u91cf\u7684\u65b9\u5f0f\u53ef\u4ee5\u591a\u6b21\u89e6\u53d1\u4e8b\u4ef6\u3002","title":"Item39 Consider void futures for one-shot event communication"},{"location":"%E5%8D%9A%E5%AE%A2/doc/cpp/Effective-Model-Cpp/item39/#item39-consider-void-futures-for-one-shot-event-communication","text":"\u6709\u7684\u65f6\u5019\u5bf9\u4e8e\u4e00\u4e2a\u4efb\u52a1\u6765\u8bf4\uff0c\u5e0c\u671b\u6709\u4e00\u79cd\u673a\u5236\u53ef\u4ee5\u548c\u53e6\u5916\u4e00\u4e2a\u4efb\u52a1\u8fdb\u884c\u901a\u4fe1\uff0c\u5c24\u5176\u662f\u90a3\u79cd\u5f02\u6b65\u8fd0\u884c\u7684\u4efb\u52a1\uff0c\u5e76\u4e14\u4f1a\u51fa\u73b0\u4e00\u79cd\u7279\u5b9a\u4e8b\u4ef6\u7684\u4efb\u52a1\uff0c\u53e6\u5916\u4e00\u4e2a\u4efb\u52a1\u9700\u8981\u7b49\u5230\u8fd9\u4e2a\u4e8b\u4ef6\u7684\u53d1\u751f\u624d\u80fd\u7ee7\u7eed\u8fd0\u884c\uff0c\u5178\u578b\u7684\uff0c\u53ef\u4ee5\u662f\u7b49\u5f85\u4e00\u4e2a\u91cd\u8981\u7684\u6570\u636e\u7ed3\u6784\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u6216\u8005\u662f\u7b49\u5f85\u4e00\u4e2a\u8ba1\u7b97\u9636\u6bb5\u5b8c\u6210\uff0c\u53c8\u6216\u8005\u662f\u68c0\u6d4b\u4e00\u4e2a\u91cd\u8981\u7684\u503c\u3002\u90a3\u4e48\u4ec0\u4e48\u6837\u7684\u65b9\u5f0f\u53ef\u4ee5\u5904\u7406\u597d\u8fd9\u79cd\u7ebf\u7a0b\u95f4\u7684\u901a\u4fe1\u5462\uff1f \u200b\u4e00\u4e2a\u5f88\u660e\u663e\u7684\u65b9\u6cd5\u5c31\u662f\u4f7f\u7528\u6761\u4ef6\u53d8\u91cf\uff0c\u4e00\u4e2a\u4efb\u52a1\u5c31\u7b49\u5f85\u6761\u4ef6\u53d8\u91cf\u4e0a\uff0c\u7b49\u5f85\u7279\u5b9a\u4e8b\u4ef6\u5b8c\u6210\u540e\u88ab\u5524\u9192\u5373\u53ef\uff0c\u90e8\u5206\u4ee3\u7801\u5982\u4e0b: 1 2 3 4 5 6 7 // cv\u8868\u793a\u4e00\u4e2a\u4e8b\u4ef6\uff0cm\u662f\u7528\u6765\u4fdd\u62a4\u8fd9\u4e2a\u6761\u4ef6\u53d8\u91cf std :: condition_variable cv ; std :: mutex m ; // \u8fdb\u884c\u4e8b\u4ef6\u63a2\u6d4b\u548c\u901a\u77e5 ..... // \u63a2\u6d4b\u4e8b\u4ef6\u662f\u5426\u53d1\u751f cv . notify_one (); // \u8fdb\u884c\u4e8b\u4ef6\u7684\u901a\u77e5 \u2003 \u2003\u5c3d\u7ba1\u4f7f\u7528\u6761\u4ef6\u53d8\u91cf\u53ef\u4ee5\u8fbe\u5230\u6211\u4eec\u60f3\u8981\u7684\u6548\u679c\uff0c\u4f46\u662f\u672a\u514d\u6709\u70b9\u590d\u6742\uff0c\u7b49\u5f85\u4e8b\u4ef6\u7684\u65f6\u5019\u8fd8\u9700\u8981\u4f7f\u7528 mutex \u5bf9\u6761\u4ef6\u53d8\u91cf\u8fdb\u884c\u4fdd\u62a4\uff0c\u5bf9\u4e8e\u4e00\u4e9b\u6bd4\u8f83\u7b80\u5355\u7684\u4e8b\u4ef6\u6765\u8bf4\u6ca1\u672a\u514d\u663e\u5f97\u8fc7\u91cd\u4e86\u3002\u6b64\u5916\u4f7f\u7528\u6761\u4ef6\u53d8\u91cf\u8fd8\u9700\u8981\u8003\u8651\u4e0b\u9762\u51e0\u4e2a\u95ee\u9898\uff1a \u5982\u679c\u63a2\u6d4b\u7684\u4efb\u52a1\u5728\u6761\u4ef6\u53d8\u91cfwait\u4e4b\u524d\u5c31\u8fdb\u884c\u4e86\u901a\u77e5\uff0c\u90a3\u4e48\u7b49\u5f85\u4e8b\u4ef6\u7684\u4efb\u52a1\u5c31\u4f1ahang\u4f4f \u6761\u4ef6\u53d8\u91cf\u7684wait\u4f1a\u51fa\u73b0\u865a\u5047\u5524\u9192\u7684\u95ee\u9898\uff0c\u5c3d\u7ba1\u53ef\u4ee5\u901a\u8fc7\u6dfb\u52a0\u4e00\u4e2a\u68c0\u6d4b\u6761\u4ef6\uff0c\u5728\u88ab\u865a\u5047\u5524\u9192\u7684\u65f6\u5019\uff0c\u518d\u6b21\u68c0\u6d4b\u6307\u5b9a\u4e8b\u4ef6\u662f\u5426\u53d1\u751f\uff0c\u4f46\u662f\u6709\u7684\u65f6\u5019\u5374\u6ca1\u6709\u4e00\u79cd\u53ef\u884c\u7684\u65b9\u5f0f\u7528\u6765\u68c0\u6d4b\u3002 \u2003 \u2003\u5047\u8bbe\u6211\u4eec\u53ef\u4ee5\u5904\u7406\u597d\u4e0a\u8ff0\u95ee\u9898\uff0c\u4f46\u662f\u4f7f\u7528\u6761\u4ef6\u53d8\u91cf\u4ecd\u7136\u4f1a\u5e26\u6765\u4e0d\u5c11\u7684\u5f00\u9500\uff0c\u6bd4\u5982\uff1a\u5728\u7279\u5b9a\u4e8b\u4ef6\u5b8c\u6210\u540e\u5fc5\u987b\u8981\u8fdb\u884c\u901a\u77e5\uff0c\u63a5\u53d7\u5230\u901a\u77e5\u540e\u8fd8\u9700\u8981\u518d\u6b21\u68c0\u67e5\u4e8b\u4ef6\u662f\u5426\u5b8c\u6210\u3002\u8fd9\u663e\u7136\u90fd\u662f\u4e00\u4e9b\u591a\u4f59\u7684\u64cd\u4f5c\u3002\u5bf9\u4e8e\u8fd9\u4e2a\u95ee\u9898\u53ef\u4ee5\u4f7f\u7528\u6211\u4eec\u5728 Item38 \u4e2d\u63d0\u5230\u7684 std::promise \u548c std::future \u6765\u5b8c\u6210\uff0c\u8fd9\u4e24\u8005\u6784\u6210\u4e86\u4e00\u4e2a\u7b80\u5355\u7684 channel \u7528\u4e8e\u901a\u4fe1\uff0c\u7279\u5b9a\u4e8b\u4ef6\u5b8c\u6210\u540e\u53ea\u9700\u8981\u5f80 std::promise \u5199\u5165\u4e00\u4e2a\u7a7a\u503c\u6765\u8868\u660e\u4e8b\u4ef6\u5b8c\u6210\uff0c\u90a3\u4e48\u963b\u585e\u5728 std::future \u5bf9\u8c61\u4e0a\u7684\u4efb\u52a1\u5c31\u4f1a\u88ab\u5524\u9192\uff0c\u90e8\u5206\u4ee3\u7801\u5982\u4e0b\uff1a 1 2 3 4 std :: promise < void > p ; p . set_value (); // \u4e8b\u4ef6\u5b8c\u6210\uff0c\u8fdb\u884c\u901a\u77e5 p . get_future (). wait (); // \u7b49\u5f85\u4e8b\u4ef6\u5b8c\u6210 \u2003 \u2003\u867d\u7136 std::promise \u548c std::future \u8fd9\u79cd\u65b9\u5f0f\u663e\u5f97\u66f4\u52a0\u7b80\u5355\uff0c\u4f46\u662f\u8fd9\u4e0d\u4ee3\u8868\u5b83\u662f\u5b8c\u7f8e\u7684\u65b9\u6848\uff0c\u8fd9\u79cd\u65b9\u5f0f\u9700\u8981\u7ef4\u62a4\u4e00\u4e2a\u5171\u4eab\u72b6\u6001\uff0c\u9700\u8981\u5728\u5806\u4e0a\u5206\u914d\u5b58\u50a8\uff0c\u6709\u5206\u914d\u548c\u91ca\u653e\u7684\u5f00\u9500\uff0c\u5e76\u4e14\u8fd9\u79cd\u4e8b\u4ef6\u901a\u77e5\u4e5f\u662f\u4e00\u6b21\u6027\u7684\uff0c\u800c\u6761\u4ef6\u53d8\u91cf\u7684\u65b9\u5f0f\u53ef\u4ee5\u591a\u6b21\u89e6\u53d1\u4e8b\u4ef6\u3002","title":"Item39 Consider void futures for one-shot event communication"},{"location":"%E5%8D%9A%E5%AE%A2/doc/cpp/Effective-Model-Cpp/item40/","text":"Item40 Use std::atomic for concurrency, volatile for specific memory \u2003 \u2003 volatile \u5173\u952e\u5b57\u5728C++\u4e2d\u5f88\u5c11\u88ab\u4f7f\u7528\uff0c\u66f4\u51c6\u786e\u6765\u8bf4\u662f\u5f88\u5c11\u88ab\u6b63\u786e\u4f7f\u7528\uff0c\u5b83\u7684\u7528\u9014\u4ee4\u4eba\u5f88\u8ff7\u60d1\uff0c\u751a\u81f3\u8fd9\u4e2a\u5173\u952e\u5b57\u90fd\u4e0d\u4f1a\u51fa\u73b0\u5728\u5e76\u53d1\u7ae0\u8282\u3002\u56e0\u4e3a\u8fd9\u4e2a\u5173\u952e\u5b57\u5bf9\u4e8e\u5e76\u53d1\u7f16\u7a0b\u6765\u8bf4\u6ca1\u6709\u4efb\u4f55\u7528\u5904\uff0c\u4f46\u662f\u5728\u5176\u4ed6\u7f16\u7a0b\u8bed\u8a00\u4e2d\u8fd9\u4e2a\u5173\u952e\u5b57\u7684\u7528\u9014\u5374\u5f88\u5927\uff0c\u56e0\u6b64\u5f88\u503c\u5f97\u5728\u672c\u6587\u53bb\u63a2\u8ba8\u4e00\u4e0b volatile \u5173\u952e\u5b57\uff0c\u6392\u9664\u8bfb\u8005\u4eec\u5bf9 volatile \u5173\u952e\u5b57\u7684\u56f0\u6270\u3002 \u63a8\u8350\u4e00\u4e0b\u4f55\u767b\u6210\u5927\u795e\u7684\u4e00\u7bc7\u5173\u4e8evolatile\u5173\u952e\u5b57\u7684\u535a\u5ba2 C/C++ Volatile\u5173\u952e\u8bcd\u6df1\u5ea6\u5256\u6790 \u2003 \u2003\u5728 C++11 \u4e2d\u63d0\u4f9b\u4e86\u4e00\u4e2a std::atomic \u7c7b\u6a21\u7248\uff0c\u53ef\u4ee5\u5177\u4f53\u5b9e\u4f8b\u5316\u51faint\u3001bool\u3001\u6307\u9488\u7b49\u7c7b\u578b\u5b9e\u4f8b\uff0c\u8fd9\u4e2a\u5b9e\u4f8b\u4fdd\u8bc1\u4e86\u64cd\u4f5c\u7684\u539f\u5b50\u6027\uff0c\u53ef\u4ee5\u88ab\u5176\u4ed6\u7ebf\u7a0b\u67e5\u770b\u5230\u64cd\u4f5c\u540e\u7684\u7ed3\u679c\u3002\u5c31\u597d\u6bd4\u662f\u5bf9\u64cd\u4f5c\u8fdb\u884c\u4e86\u52a0\u9501\uff0c\u4f46\u662f\u6027\u80fd\u635f\u8017\u66f4\u5c0f\uff0c\u56e0\u4e3a\u5176\u5185\u90e8\u4f7f\u7528\u4e86\u4e00\u79cd\u7279\u6b8a\u7684\u673a\u5668\u6307\u4ee4\u5b9e\u73b0\uff0c\u8be5\u6a21\u7248\u7c7b\u7684\u57fa\u672c\u4f7f\u7528\u5982\u4e0b\uff1a 1 2 3 4 5 std :: atomic < int > ai ( 0 ); ai = 10 ; // \u539f\u5b50\u7684\u8bbe\u7f6eai\u7684\u503c\u4e3a10 std :: cout << ai ; // \u539f\u5b50\u7684\u8bfb\u53d6ai\u7684\u503c\uff0c\u4f46\u662fstd::cout\u8f93\u51fa\u7684\u52a8\u4f5c\u5e76\u4e0d\u662f\u539f\u5b50\u7684 ++ ai ; // \u539f\u5b50\u7684\uff0c\u9012\u589e\u523011 -- ai ; // \u539f\u5b50\u7684\uff0c\u9012\u51cf\u523010 \u2003 \u2003\u5728\u6267\u884c\u4e0a\u9762\u7684\u8fd9\u4e9b\u64cd\u4f5c\u65f6\uff0c\u5176\u4ed6\u7ebf\u7a0b\u5728\u4efb\u4f55\u65f6\u95f4\u90fd\u53ef\u4ee5\u770b\u5230ai\u7684\u6700\u65b0\u503c\uff0c\u53ef\u80fd\u662f0\u300110\u300111\u4e0d\u4f1a\u770b\u5230\u5176\u4ed6\u7684\u4e2d\u95f4\u503c\u3002\u4e0a\u9762\u7684\u8fd9\u6bb5\u4ee3\u7801\u4e2d\u6709\u4e24\u70b9\u503c\u5f97\u7ec6\u7a76\uff0c\u7b2c\u4e00\u4e2a\u5c31\u662f std::cout << ai \uff0c\u8fd9\u4e2a\u8bed\u53e5\u672c\u8eab\u5e76\u4e0d\u662f\u539f\u5b50\u7684\uff0c\u8bfb\u53d6ai\u7684\u503c\uff0c\u8fd9\u672c\u8eab\u662f\u539f\u5b50\u7684\uff0c\u4f46\u662f\u5c06ai\u7684\u503c\u8f93\u51fa\u5219\u4e0d\u662f\u539f\u5b50\u7684\uff0c\u5728\u8f93\u51fa\u7684\u65f6\u5019\u5176\u4ed6\u7ebf\u7a0b\u53ef\u4ee5\u6539\u53d8ai\u7684\u503c\u3002\u7b2c\u4e8c\u4e2a\u65b9\u9762\u662f ++ai \u3001 --ai \u8fd9\u4e24\u4e2a\u64cd\u4f5c\uff0c\u8fd9\u4e24\u4e2a\u662f\u64cd\u4f5c\u662f RMW(Read-Modtify-Write) \u7c7b\u578b\u7684\u64cd\u4f5c\uff0c\u8fd9\u4e5f\u662f\u539f\u5b50\u7684\uff0c\u8fd9\u5f97\u76ca\u4e8e std::atomic \u7c7b\u6240\u63d0\u4f9b\u7684\u7279\u6027\u3002 \u200b\u2003 \u2003 volatile \u5219\u76f8\u53cd\uff0c\u4f7f\u7528 volatile \u4fee\u9970\u7684\u53d8\u91cf\u5176\u64cd\u4f5c\u5e76\u4e0d\u662f\u539f\u5b50\u7684\uff0c\u5176\u4ed6\u7ebf\u7a0b\u53ef\u80fd\u4f1a\u8bfb\u53d6\u5230\u4e2d\u95f4\u503c\uff0c volatile \u7684\u57fa\u672c\u4f7f\u7528\u5982\u4e0b: 1 2 3 4 5 volatile int vi ( 0 ); vi = 10 ; std :: cout << vi ; ++ vi ; -- vi ; \u200b\u2003 \u2003\u5728\u4e0a\u9762\u7684\u4ee3\u7801\u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u5176\u4ed6\u7ebf\u7a0b\u4f1a\u53bb\u8bfbvi\u7684\u503c\u65f6\u53ef\u80fd\u4f1a\u51fa\u73b0\u4efb\u610f\u503c\uff0c\u8fd9\u662f\u4e00\u79cd\u672a\u5b9a\u4e49\u884c\u4e3a\u3002 \u4e3a\u4e86\u66f4\u4e00\u6b65\u5206\u6790 std::atomic \u548c volatile \u4e24\u8005\u884c\u4e3a\u7684\u4e0d\u540c\uff0c\u4e0b\u9762\u4e3e\u4e00\u4e2a\u5177\u4f53\u7684\u4f8b\u5b50: 1 2 std :: atomic < int > ac ( 0 ); volatile int vc ( 0 ); \u6709\u4e24\u4e2a\u7ebf\u7a0b\u540c\u65f6\u6267\u884c\u4e0b\u9762\u4e24\u4e2a\u64cd\u4f5c\uff1a 1 2 3 4 5 6 7 // \u7ebf\u7a0b1 ++ ac ; ++ vc // \u7ebf\u7a0b2 ++ ac ; ++ vc ; \u200b\u2003 \u2003\u5f53\u4e24\u4e2a\u7ebf\u7a0b\u6267\u884c\u5b8c\u6210\u540e\uff0cac\u7684\u503c\u80af\u5b9a\u662f2\uff0c\u800cvc\u7684\u503c\u5219\u4e0d\u4e00\u5b9a\uff0c volatile \u4e0d\u4fdd\u8bc1vc\u7684\u6700\u540e\u503c\u662f2\uff0c\u5b83\u53ef\u80fd\u662f0\uff0c\u4e5f\u6709\u53ef\u80fd\u662f1\uff0c\u4e0b\u9762\u8ba9\u6211\u4eec\u6765\u5177\u4f53\u5206\u6790\u4e00\u4e0b: \u7ebf\u7a0b1\u8bfb\u53d6vc\u7684\u503c\uff0c\u662f0 \u7ebf\u7a0b2\u8bfb\u53d6vc\u7684\u503c\uff0c\u4ecd\u7136\u662f0 \u7ebf\u7a0b1\u589e\u52a0\u8bfb\u53d6vc\u7684\u503c\u4e3a\u4e3a0\uff0c\u7136\u540e\u9012\u589e\uff0c\u6700\u540e\u5c06\u9012\u589e\u540e\u7684\u503c\u5199\u5165\u5230vc \u7ebf\u7a0b1\u589e\u52a0\u8bfb\u53d6vc\u7684\u503c\u4e3a\u4e3a0\uff0c\u7136\u540e\u9012\u589e\uff0c\u6700\u540e\u5c06\u9012\u589e\u540e\u7684\u503c\u5199\u5165\u5230vc \u2003 \u2003\u4e0a\u9762\u8fd9\u79cd\u60c5\u51b5\uff0cvc\u7684\u503c\u6700\u540e\u662f1\uff0c\u8fdb\u884c\u4e86\u4e24\u6b21\u9012\u589e\uff0c\u4f46\u662f\u9012\u589e\u7684\u7ed3\u679c\u662f\u60f3\u540c\u7684\uff0c\u56e0\u4e3a\u7ebf\u7a0b1\u548c2\u770b\u5230\u4e86vc\u7684\u503c\u662f\u60f3\u540c\u7684\uff0c\u5bf9\u4e8e\u8fd9\u79cd\u884c\u4e3a\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u5b58\u5728 data race (\u6570\u636e\u7ade\u4e89)\uff0c\u662f\u4e00\u4e2a\u672a\u5b9a\u4e49\u7684\u884c\u4e3a\u3002\u9700\u8981\u4f7f\u7528 mutex \uff0c\u6216\u8005\u662f\u539f\u5b50\u64cd\u4f5c\u6765\u907f\u514d\u8fd9\u79cd\u672a\u5b9a\u4e49\u884c\u4e3a\u7684\u51fa\u73b0\u3002 \u2003 \u2003 RWN \u8fd9\u79cd\u64cd\u4f5c\u7684\u539f\u5b50\u6027\u5e76\u4e0d\u662f std::atomic \u548c volatile \u4e24\u8005\u7684\u552f\u4e00\u4e00\u4e2a\u533a\u522b\uff0c\u8003\u8651\u53e6\u5916\u4e00\u4e2a\u573a\u666f\uff0c\u5f53\u4e00\u4e2a\u7ebf\u7a0b\u5b8c\u6210\u4e00\u4e2a\u91cd\u8981\u8ba1\u7b97\u540e\uff0c\u901a\u77e5\u53e6\u5916\u4e00\u4e2a\u7ebf\u7a0b\uff0c\u5f88\u660e\u663e\u8fd9\u4e2a\u573a\u666f\u5f88\u9002\u5408\u6211\u4eec\u5728 Item39 \u4e2d\u63d0\u5230\u7684\u65b9\u6848\u6765\u89e3\u51b3\uff0c\u4e0d\u8fc7\u5728\u8fd9\u91cc\u4f7f\u7528 std::atomic \u6765\u89e3\u51b3\u8fd9\u4ef6\u4e8b\uff0c\u901a\u8fc7\u4f7f\u7528 std::atomic<bool> \u4f5c\u4e3a\u4e00\u4e2aflag\u8fdb\u884c\u901a\u77e5\uff0c\u90e8\u5206\u4ee3\u7801\u5982\u4e0b\uff1a 1 2 3 std :: atomic < bool > valAvailabel ( false ); auto imptValue = computeImportantValue (); valAvailabel = true ; \u2003 \u2003\u4e00\u773c\u770b\u4e0a\u53bb\uff0c valAvailabel \u7684\u8d4b\u503c\u662f\u5728 imptValue \u8d4b\u503c\u4e4b\u524d\u53d1\u751f\u7684\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u5e76\u4e0d\u4e00\u5b9a\u662f\u8fd9\u6837\u7684\uff0c\u7f16\u8bd1\u5668\u53ef\u80fd\u4f1a\u5bf9\u8fd9\u4e24\u4e2a\u8d4b\u503c\u8bed\u53e5\u8fdb\u884c\u91cd\u6392\u5e8f\uff0c\u5373\u4f7f\u7f16\u8bd1\u5668\u6ca1\u6709\u505a\u8fd9\u6837\u7684\u5de5\u4f5c\uff0c\u786c\u4ef6\u4e5f\u53ef\u80fd\u4f1a\u5bf9\u8fd9\u4e24\u4e2a\u64cd\u4f5c\u8fdb\u884c\u6307\u4ee4\u7ea7\u522b\u7684\u91cd\u6392\uff0c\u5bf9\u4e8e\u7ed9\u5b9a\u5982\u4e0b\u7684\u987a\u5e8f: 1 2 a = b ; x = y ; \u2003 \u2003\u56e0\u4e3aa\uff0cb\u548cx\uff0cy\u4e92\u76f8\u4e0d\u4ea7\u751f\u4f9d\u8d56\uff0c\u6240\u4ee5\u7f16\u8bd1\u5668\u53ef\u80fd\u4f1a\u8fdb\u884c\u91cd\u6392\uff0c\u91cd\u6392\u540e\u7684\u987a\u5e8f\u5982\u4e0b\uff1a 1 2 x = y ; a = b ; \u2003 \u2003\u8fd9\u79cd\u91cd\u6392\u5e8f\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u8fd0\u884c\u7684\u66f4\u5feb\uff0c\u65e0\u8bba\u662f\u5728\u7f16\u8bd1\u5668\u5c42\u9762\u7684\u91cd\u6392\u5e8f\uff0c\u8fd8\u662f\u5728CPU\u6307\u4ee4\u96c6\u5c42\u9762\u7684\u91cd\u6392\uff0c\u7136\u540e\u8fd9\u4e00\u5207\u90fd\u88ab std::atomic \u5c4f\u853d\u4e86\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b std::atomic \u7981\u6b62\u4e86\u5e95\u5c42\u7f16\u8bd1\u5668\u548c\u786c\u4ef6\u7684\u91cd\u6392\u5e8f\u3002\u8fd9\u79cd\u884c\u4e3a\u79f0\u4e3a\u987a\u5e8f\u4e00\u81f4\u6027\u6a21\u578b\uff0c std::atomic \u4e5f\u652f\u6301\u66f4\u52a0\u590d\u6742\u7684\u5185\u5b58\u6a21\u578b\uff0c\u6bd4\u5982\u677e\u6563\u6a21\u578b\uff0c\u8fd9\u79cd\u6a21\u578b\u4e0b\u53ef\u4ee5\u662f\u7684\u4ee3\u7801\u8fd0\u884c\u7684\u66f4\u5feb\u3002\u76f8\u53cd\u7684\u662f volatile \u65e0\u6cd5\u963b\u6b62\u8fd9\u79cd\u91cd\u6392\u5e8f\u7684\u53d1\u751f\u3002\u7efc\u4e0a\u6240\u8ff0\uff0c volatile \u5b58\u5728\u4e24\u4e2a\u95ee\u9898\uff0c\u7b2c\u4e00\u4e2a\u5c31\u662f\u539f\u5b50\u6027\uff0c\u7b2c\u4e8c\u4e2a\u5c31\u662f\u91cd\u6392\u5e8f\u7684\u95ee\u9898\u3002\u8fd9\u4e5f\u5c31\u89e3\u91ca\u4e86\u4e3a\u4f55 volatile \u5728\u5e76\u53d1\u7f16\u7a0b\u9886\u57df\u4e2d\u51e0\u4e4e\u6ca1\u6709\u4efb\u4f55\u4ef7\u503c\u3002 \u2003 \u2003\u65e2\u7136 volatile \u5728\u5e76\u53d1\u7f16\u7a0b\u9886\u57df\u51e0\u4e4e\u6ca1\u6709\u4efb\u52a1\u4ef7\u503c\uff0c\u90a3\u4e48 volatile \u5b58\u5728\u7684\u610f\u4e49\u662f\u4ec0\u4e48\u5462\uff1f\u9996\u5148\u6211\u4eec\u6765\u770b\u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801: 1 2 3 int x = 10 ; auto y = x ; std :: cout << x ; \u2003 \u2003\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u591a\u6b21\u8bfb\u53d6x\u7684\u503c\uff0c\u7f16\u8bd1\u5668\u4e3a\u4e86\u4f18\u5316\u4f1a\u5c06x\u7684\u503c\u653e\u5728\u5bc4\u5b58\u5668\u4e2d\uff0c\u6bcf\u6b21\u540e\u9762\u8bfb\u53d6x\u7684\u503c\u65f6\uff0c\u76f4\u63a5\u4ece\u5bc4\u5b58\u5668\u8fd4\u56de\u5373\u53ef\u3002\u540c\u7406\u5bf9\u4e8e\u591a\u6b21\u5199\u4e00\u4e2a\u5185\u5b58\u4f4d\u7f6e\u7684\u60c5\u51b5\uff0c\u7f16\u8bd1\u5668\u4e5f\u4f1a\u505a\u4f18\u5316\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a 1 2 x = 10 ; x = 12 ; \u2003 \u2003\u7f16\u8bd1\u5668\u4f1a\u8fdb\u884c\u4f18\u5316\uff0c\u5b9e\u9645\u4e0a\u53ea\u6267\u884c\u4e86 x = 12 \u8fd9\u6b21\u64cd\u4f5c\uff0c\u7701\u7565\u4e86 x = 10 \u8fd9\u4e00\u6b65\u3002\u8fd9\u4e9b\u4f18\u5316\u52a0\u901f\u4e86\u7a0b\u5e8f\u7684\u8fd0\u884c\u901f\u5ea6\uff0c\u4f46\u662f\u5982\u679c\u662f\u5728\u4e00\u4e9b\u7279\u6b8a\u7684\u8bbe\u5907\u4e0a\u8fdb\u884c\u8fd9\u6837\u7684\u64cd\u4f5c\u5c31\u4f1a\u5bfc\u81f4\u4e0d\u7b26\u5408\u9884\u671f\u7684\u6548\u679c\uff0c\u6211\u4eec\u90fd\u77e5\u9053\u4e00\u4e9b\u5916\u90e8\u8bbe\u5907\u7684\u8bbf\u95ee\u5176\u5b9e\u662f\u53ef\u4ee5\u901a\u8fc7\u8bbf\u95ee\u5185\u5b58\u7684\u5f62\u5f0f\u6765\u8bbf\u95ee\uff0c\u5bf9\u4e8e\u8fd9\u4e9b\u8bbe\u5907\u6765\u8bf4\u6bcf\u4e00\u6b21\u8bbf\u95ee\u90fd\u4f1a\u8ba9\u8bbe\u5907\u4ea7\u751f\u4e00\u5b9a\u7684\u6548\u679c\uff0c\u662f\u4e0d\u80fd\u7701\u7565\u6389\u7684\u3002\u5c31\u597d\u6bd4 x = 10; x = 12 \u6765\u8bf4\uff0c\u5bf9\u4e8e\u67d0\u4e9b\u8bbe\u5907\u6765\u8bf4\u8fd9\u53ef\u80fd\u662f\u4e00\u4e2a\u6e10\u53d8\u7684\u6548\u679c\uff0c\u5982\u679c\u7701\u53bb\u4e86 x = 10 \u90a3\u4e48\u8fd9\u4e2a\u6548\u679c\u5c31\u5927\u6253\u6298\u6263\u4e86\u3002 \u4e3a\u6b64\u5bf9\u4e8e\u8fd9\u79cd\u60c5\u51b5\u6765\u8bf4\u5fc5\u9700\u4f7f\u7528 volatile \u6765\u544a\u8bc9\u7f16\u8bd1\u5668\u7981\u6b62\u5bf9\u53d8\u91cf\u7684\u8bfb\u5199\u8fdb\u884c\u4f18\u5316\u3002 std::atomic \u65e0\u6cd5\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u5b83\u53ea\u4fdd\u8bc1\u4e86\u64cd\u4f5c\u7684\u539f\u5b50\u6027\uff0c\u7f16\u8bd1\u5668\u4ecd\u7136\u4f1a\u591a\u6b21\u5197\u4f59\u7684\u8bfb\u5199\u64cd\u4f5c\u8fdb\u884c\u4f18\u5316\u3002","title":"Item40 Use std::atomic for concurrency, volatile for specific memory"},{"location":"%E5%8D%9A%E5%AE%A2/doc/cpp/Effective-Model-Cpp/item40/#item40-use-stdatomic-for-concurrency-volatile-for-specific-memory","text":"volatile \u5173\u952e\u5b57\u5728C++\u4e2d\u5f88\u5c11\u88ab\u4f7f\u7528\uff0c\u66f4\u51c6\u786e\u6765\u8bf4\u662f\u5f88\u5c11\u88ab\u6b63\u786e\u4f7f\u7528\uff0c\u5b83\u7684\u7528\u9014\u4ee4\u4eba\u5f88\u8ff7\u60d1\uff0c\u751a\u81f3\u8fd9\u4e2a\u5173\u952e\u5b57\u90fd\u4e0d\u4f1a\u51fa\u73b0\u5728\u5e76\u53d1\u7ae0\u8282\u3002\u56e0\u4e3a\u8fd9\u4e2a\u5173\u952e\u5b57\u5bf9\u4e8e\u5e76\u53d1\u7f16\u7a0b\u6765\u8bf4\u6ca1\u6709\u4efb\u4f55\u7528\u5904\uff0c\u4f46\u662f\u5728\u5176\u4ed6\u7f16\u7a0b\u8bed\u8a00\u4e2d\u8fd9\u4e2a\u5173\u952e\u5b57\u7684\u7528\u9014\u5374\u5f88\u5927\uff0c\u56e0\u6b64\u5f88\u503c\u5f97\u5728\u672c\u6587\u53bb\u63a2\u8ba8\u4e00\u4e0b volatile \u5173\u952e\u5b57\uff0c\u6392\u9664\u8bfb\u8005\u4eec\u5bf9 volatile \u5173\u952e\u5b57\u7684\u56f0\u6270\u3002 \u63a8\u8350\u4e00\u4e0b\u4f55\u767b\u6210\u5927\u795e\u7684\u4e00\u7bc7\u5173\u4e8evolatile\u5173\u952e\u5b57\u7684\u535a\u5ba2 C/C++ Volatile\u5173\u952e\u8bcd\u6df1\u5ea6\u5256\u6790 \u2003 \u2003\u5728 C++11 \u4e2d\u63d0\u4f9b\u4e86\u4e00\u4e2a std::atomic \u7c7b\u6a21\u7248\uff0c\u53ef\u4ee5\u5177\u4f53\u5b9e\u4f8b\u5316\u51faint\u3001bool\u3001\u6307\u9488\u7b49\u7c7b\u578b\u5b9e\u4f8b\uff0c\u8fd9\u4e2a\u5b9e\u4f8b\u4fdd\u8bc1\u4e86\u64cd\u4f5c\u7684\u539f\u5b50\u6027\uff0c\u53ef\u4ee5\u88ab\u5176\u4ed6\u7ebf\u7a0b\u67e5\u770b\u5230\u64cd\u4f5c\u540e\u7684\u7ed3\u679c\u3002\u5c31\u597d\u6bd4\u662f\u5bf9\u64cd\u4f5c\u8fdb\u884c\u4e86\u52a0\u9501\uff0c\u4f46\u662f\u6027\u80fd\u635f\u8017\u66f4\u5c0f\uff0c\u56e0\u4e3a\u5176\u5185\u90e8\u4f7f\u7528\u4e86\u4e00\u79cd\u7279\u6b8a\u7684\u673a\u5668\u6307\u4ee4\u5b9e\u73b0\uff0c\u8be5\u6a21\u7248\u7c7b\u7684\u57fa\u672c\u4f7f\u7528\u5982\u4e0b\uff1a 1 2 3 4 5 std :: atomic < int > ai ( 0 ); ai = 10 ; // \u539f\u5b50\u7684\u8bbe\u7f6eai\u7684\u503c\u4e3a10 std :: cout << ai ; // \u539f\u5b50\u7684\u8bfb\u53d6ai\u7684\u503c\uff0c\u4f46\u662fstd::cout\u8f93\u51fa\u7684\u52a8\u4f5c\u5e76\u4e0d\u662f\u539f\u5b50\u7684 ++ ai ; // \u539f\u5b50\u7684\uff0c\u9012\u589e\u523011 -- ai ; // \u539f\u5b50\u7684\uff0c\u9012\u51cf\u523010 \u2003 \u2003\u5728\u6267\u884c\u4e0a\u9762\u7684\u8fd9\u4e9b\u64cd\u4f5c\u65f6\uff0c\u5176\u4ed6\u7ebf\u7a0b\u5728\u4efb\u4f55\u65f6\u95f4\u90fd\u53ef\u4ee5\u770b\u5230ai\u7684\u6700\u65b0\u503c\uff0c\u53ef\u80fd\u662f0\u300110\u300111\u4e0d\u4f1a\u770b\u5230\u5176\u4ed6\u7684\u4e2d\u95f4\u503c\u3002\u4e0a\u9762\u7684\u8fd9\u6bb5\u4ee3\u7801\u4e2d\u6709\u4e24\u70b9\u503c\u5f97\u7ec6\u7a76\uff0c\u7b2c\u4e00\u4e2a\u5c31\u662f std::cout << ai \uff0c\u8fd9\u4e2a\u8bed\u53e5\u672c\u8eab\u5e76\u4e0d\u662f\u539f\u5b50\u7684\uff0c\u8bfb\u53d6ai\u7684\u503c\uff0c\u8fd9\u672c\u8eab\u662f\u539f\u5b50\u7684\uff0c\u4f46\u662f\u5c06ai\u7684\u503c\u8f93\u51fa\u5219\u4e0d\u662f\u539f\u5b50\u7684\uff0c\u5728\u8f93\u51fa\u7684\u65f6\u5019\u5176\u4ed6\u7ebf\u7a0b\u53ef\u4ee5\u6539\u53d8ai\u7684\u503c\u3002\u7b2c\u4e8c\u4e2a\u65b9\u9762\u662f ++ai \u3001 --ai \u8fd9\u4e24\u4e2a\u64cd\u4f5c\uff0c\u8fd9\u4e24\u4e2a\u662f\u64cd\u4f5c\u662f RMW(Read-Modtify-Write) \u7c7b\u578b\u7684\u64cd\u4f5c\uff0c\u8fd9\u4e5f\u662f\u539f\u5b50\u7684\uff0c\u8fd9\u5f97\u76ca\u4e8e std::atomic \u7c7b\u6240\u63d0\u4f9b\u7684\u7279\u6027\u3002 \u200b\u2003 \u2003 volatile \u5219\u76f8\u53cd\uff0c\u4f7f\u7528 volatile \u4fee\u9970\u7684\u53d8\u91cf\u5176\u64cd\u4f5c\u5e76\u4e0d\u662f\u539f\u5b50\u7684\uff0c\u5176\u4ed6\u7ebf\u7a0b\u53ef\u80fd\u4f1a\u8bfb\u53d6\u5230\u4e2d\u95f4\u503c\uff0c volatile \u7684\u57fa\u672c\u4f7f\u7528\u5982\u4e0b: 1 2 3 4 5 volatile int vi ( 0 ); vi = 10 ; std :: cout << vi ; ++ vi ; -- vi ; \u200b\u2003 \u2003\u5728\u4e0a\u9762\u7684\u4ee3\u7801\u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u5176\u4ed6\u7ebf\u7a0b\u4f1a\u53bb\u8bfbvi\u7684\u503c\u65f6\u53ef\u80fd\u4f1a\u51fa\u73b0\u4efb\u610f\u503c\uff0c\u8fd9\u662f\u4e00\u79cd\u672a\u5b9a\u4e49\u884c\u4e3a\u3002 \u4e3a\u4e86\u66f4\u4e00\u6b65\u5206\u6790 std::atomic \u548c volatile \u4e24\u8005\u884c\u4e3a\u7684\u4e0d\u540c\uff0c\u4e0b\u9762\u4e3e\u4e00\u4e2a\u5177\u4f53\u7684\u4f8b\u5b50: 1 2 std :: atomic < int > ac ( 0 ); volatile int vc ( 0 ); \u6709\u4e24\u4e2a\u7ebf\u7a0b\u540c\u65f6\u6267\u884c\u4e0b\u9762\u4e24\u4e2a\u64cd\u4f5c\uff1a 1 2 3 4 5 6 7 // \u7ebf\u7a0b1 ++ ac ; ++ vc // \u7ebf\u7a0b2 ++ ac ; ++ vc ; \u200b\u2003 \u2003\u5f53\u4e24\u4e2a\u7ebf\u7a0b\u6267\u884c\u5b8c\u6210\u540e\uff0cac\u7684\u503c\u80af\u5b9a\u662f2\uff0c\u800cvc\u7684\u503c\u5219\u4e0d\u4e00\u5b9a\uff0c volatile \u4e0d\u4fdd\u8bc1vc\u7684\u6700\u540e\u503c\u662f2\uff0c\u5b83\u53ef\u80fd\u662f0\uff0c\u4e5f\u6709\u53ef\u80fd\u662f1\uff0c\u4e0b\u9762\u8ba9\u6211\u4eec\u6765\u5177\u4f53\u5206\u6790\u4e00\u4e0b: \u7ebf\u7a0b1\u8bfb\u53d6vc\u7684\u503c\uff0c\u662f0 \u7ebf\u7a0b2\u8bfb\u53d6vc\u7684\u503c\uff0c\u4ecd\u7136\u662f0 \u7ebf\u7a0b1\u589e\u52a0\u8bfb\u53d6vc\u7684\u503c\u4e3a\u4e3a0\uff0c\u7136\u540e\u9012\u589e\uff0c\u6700\u540e\u5c06\u9012\u589e\u540e\u7684\u503c\u5199\u5165\u5230vc \u7ebf\u7a0b1\u589e\u52a0\u8bfb\u53d6vc\u7684\u503c\u4e3a\u4e3a0\uff0c\u7136\u540e\u9012\u589e\uff0c\u6700\u540e\u5c06\u9012\u589e\u540e\u7684\u503c\u5199\u5165\u5230vc \u2003 \u2003\u4e0a\u9762\u8fd9\u79cd\u60c5\u51b5\uff0cvc\u7684\u503c\u6700\u540e\u662f1\uff0c\u8fdb\u884c\u4e86\u4e24\u6b21\u9012\u589e\uff0c\u4f46\u662f\u9012\u589e\u7684\u7ed3\u679c\u662f\u60f3\u540c\u7684\uff0c\u56e0\u4e3a\u7ebf\u7a0b1\u548c2\u770b\u5230\u4e86vc\u7684\u503c\u662f\u60f3\u540c\u7684\uff0c\u5bf9\u4e8e\u8fd9\u79cd\u884c\u4e3a\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u5b58\u5728 data race (\u6570\u636e\u7ade\u4e89)\uff0c\u662f\u4e00\u4e2a\u672a\u5b9a\u4e49\u7684\u884c\u4e3a\u3002\u9700\u8981\u4f7f\u7528 mutex \uff0c\u6216\u8005\u662f\u539f\u5b50\u64cd\u4f5c\u6765\u907f\u514d\u8fd9\u79cd\u672a\u5b9a\u4e49\u884c\u4e3a\u7684\u51fa\u73b0\u3002 \u2003 \u2003 RWN \u8fd9\u79cd\u64cd\u4f5c\u7684\u539f\u5b50\u6027\u5e76\u4e0d\u662f std::atomic \u548c volatile \u4e24\u8005\u7684\u552f\u4e00\u4e00\u4e2a\u533a\u522b\uff0c\u8003\u8651\u53e6\u5916\u4e00\u4e2a\u573a\u666f\uff0c\u5f53\u4e00\u4e2a\u7ebf\u7a0b\u5b8c\u6210\u4e00\u4e2a\u91cd\u8981\u8ba1\u7b97\u540e\uff0c\u901a\u77e5\u53e6\u5916\u4e00\u4e2a\u7ebf\u7a0b\uff0c\u5f88\u660e\u663e\u8fd9\u4e2a\u573a\u666f\u5f88\u9002\u5408\u6211\u4eec\u5728 Item39 \u4e2d\u63d0\u5230\u7684\u65b9\u6848\u6765\u89e3\u51b3\uff0c\u4e0d\u8fc7\u5728\u8fd9\u91cc\u4f7f\u7528 std::atomic \u6765\u89e3\u51b3\u8fd9\u4ef6\u4e8b\uff0c\u901a\u8fc7\u4f7f\u7528 std::atomic<bool> \u4f5c\u4e3a\u4e00\u4e2aflag\u8fdb\u884c\u901a\u77e5\uff0c\u90e8\u5206\u4ee3\u7801\u5982\u4e0b\uff1a 1 2 3 std :: atomic < bool > valAvailabel ( false ); auto imptValue = computeImportantValue (); valAvailabel = true ; \u2003 \u2003\u4e00\u773c\u770b\u4e0a\u53bb\uff0c valAvailabel \u7684\u8d4b\u503c\u662f\u5728 imptValue \u8d4b\u503c\u4e4b\u524d\u53d1\u751f\u7684\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u5e76\u4e0d\u4e00\u5b9a\u662f\u8fd9\u6837\u7684\uff0c\u7f16\u8bd1\u5668\u53ef\u80fd\u4f1a\u5bf9\u8fd9\u4e24\u4e2a\u8d4b\u503c\u8bed\u53e5\u8fdb\u884c\u91cd\u6392\u5e8f\uff0c\u5373\u4f7f\u7f16\u8bd1\u5668\u6ca1\u6709\u505a\u8fd9\u6837\u7684\u5de5\u4f5c\uff0c\u786c\u4ef6\u4e5f\u53ef\u80fd\u4f1a\u5bf9\u8fd9\u4e24\u4e2a\u64cd\u4f5c\u8fdb\u884c\u6307\u4ee4\u7ea7\u522b\u7684\u91cd\u6392\uff0c\u5bf9\u4e8e\u7ed9\u5b9a\u5982\u4e0b\u7684\u987a\u5e8f: 1 2 a = b ; x = y ; \u2003 \u2003\u56e0\u4e3aa\uff0cb\u548cx\uff0cy\u4e92\u76f8\u4e0d\u4ea7\u751f\u4f9d\u8d56\uff0c\u6240\u4ee5\u7f16\u8bd1\u5668\u53ef\u80fd\u4f1a\u8fdb\u884c\u91cd\u6392\uff0c\u91cd\u6392\u540e\u7684\u987a\u5e8f\u5982\u4e0b\uff1a 1 2 x = y ; a = b ; \u2003 \u2003\u8fd9\u79cd\u91cd\u6392\u5e8f\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u8fd0\u884c\u7684\u66f4\u5feb\uff0c\u65e0\u8bba\u662f\u5728\u7f16\u8bd1\u5668\u5c42\u9762\u7684\u91cd\u6392\u5e8f\uff0c\u8fd8\u662f\u5728CPU\u6307\u4ee4\u96c6\u5c42\u9762\u7684\u91cd\u6392\uff0c\u7136\u540e\u8fd9\u4e00\u5207\u90fd\u88ab std::atomic \u5c4f\u853d\u4e86\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b std::atomic \u7981\u6b62\u4e86\u5e95\u5c42\u7f16\u8bd1\u5668\u548c\u786c\u4ef6\u7684\u91cd\u6392\u5e8f\u3002\u8fd9\u79cd\u884c\u4e3a\u79f0\u4e3a\u987a\u5e8f\u4e00\u81f4\u6027\u6a21\u578b\uff0c std::atomic \u4e5f\u652f\u6301\u66f4\u52a0\u590d\u6742\u7684\u5185\u5b58\u6a21\u578b\uff0c\u6bd4\u5982\u677e\u6563\u6a21\u578b\uff0c\u8fd9\u79cd\u6a21\u578b\u4e0b\u53ef\u4ee5\u662f\u7684\u4ee3\u7801\u8fd0\u884c\u7684\u66f4\u5feb\u3002\u76f8\u53cd\u7684\u662f volatile \u65e0\u6cd5\u963b\u6b62\u8fd9\u79cd\u91cd\u6392\u5e8f\u7684\u53d1\u751f\u3002\u7efc\u4e0a\u6240\u8ff0\uff0c volatile \u5b58\u5728\u4e24\u4e2a\u95ee\u9898\uff0c\u7b2c\u4e00\u4e2a\u5c31\u662f\u539f\u5b50\u6027\uff0c\u7b2c\u4e8c\u4e2a\u5c31\u662f\u91cd\u6392\u5e8f\u7684\u95ee\u9898\u3002\u8fd9\u4e5f\u5c31\u89e3\u91ca\u4e86\u4e3a\u4f55 volatile \u5728\u5e76\u53d1\u7f16\u7a0b\u9886\u57df\u4e2d\u51e0\u4e4e\u6ca1\u6709\u4efb\u4f55\u4ef7\u503c\u3002 \u2003 \u2003\u65e2\u7136 volatile \u5728\u5e76\u53d1\u7f16\u7a0b\u9886\u57df\u51e0\u4e4e\u6ca1\u6709\u4efb\u52a1\u4ef7\u503c\uff0c\u90a3\u4e48 volatile \u5b58\u5728\u7684\u610f\u4e49\u662f\u4ec0\u4e48\u5462\uff1f\u9996\u5148\u6211\u4eec\u6765\u770b\u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801: 1 2 3 int x = 10 ; auto y = x ; std :: cout << x ; \u2003 \u2003\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u591a\u6b21\u8bfb\u53d6x\u7684\u503c\uff0c\u7f16\u8bd1\u5668\u4e3a\u4e86\u4f18\u5316\u4f1a\u5c06x\u7684\u503c\u653e\u5728\u5bc4\u5b58\u5668\u4e2d\uff0c\u6bcf\u6b21\u540e\u9762\u8bfb\u53d6x\u7684\u503c\u65f6\uff0c\u76f4\u63a5\u4ece\u5bc4\u5b58\u5668\u8fd4\u56de\u5373\u53ef\u3002\u540c\u7406\u5bf9\u4e8e\u591a\u6b21\u5199\u4e00\u4e2a\u5185\u5b58\u4f4d\u7f6e\u7684\u60c5\u51b5\uff0c\u7f16\u8bd1\u5668\u4e5f\u4f1a\u505a\u4f18\u5316\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a 1 2 x = 10 ; x = 12 ; \u2003 \u2003\u7f16\u8bd1\u5668\u4f1a\u8fdb\u884c\u4f18\u5316\uff0c\u5b9e\u9645\u4e0a\u53ea\u6267\u884c\u4e86 x = 12 \u8fd9\u6b21\u64cd\u4f5c\uff0c\u7701\u7565\u4e86 x = 10 \u8fd9\u4e00\u6b65\u3002\u8fd9\u4e9b\u4f18\u5316\u52a0\u901f\u4e86\u7a0b\u5e8f\u7684\u8fd0\u884c\u901f\u5ea6\uff0c\u4f46\u662f\u5982\u679c\u662f\u5728\u4e00\u4e9b\u7279\u6b8a\u7684\u8bbe\u5907\u4e0a\u8fdb\u884c\u8fd9\u6837\u7684\u64cd\u4f5c\u5c31\u4f1a\u5bfc\u81f4\u4e0d\u7b26\u5408\u9884\u671f\u7684\u6548\u679c\uff0c\u6211\u4eec\u90fd\u77e5\u9053\u4e00\u4e9b\u5916\u90e8\u8bbe\u5907\u7684\u8bbf\u95ee\u5176\u5b9e\u662f\u53ef\u4ee5\u901a\u8fc7\u8bbf\u95ee\u5185\u5b58\u7684\u5f62\u5f0f\u6765\u8bbf\u95ee\uff0c\u5bf9\u4e8e\u8fd9\u4e9b\u8bbe\u5907\u6765\u8bf4\u6bcf\u4e00\u6b21\u8bbf\u95ee\u90fd\u4f1a\u8ba9\u8bbe\u5907\u4ea7\u751f\u4e00\u5b9a\u7684\u6548\u679c\uff0c\u662f\u4e0d\u80fd\u7701\u7565\u6389\u7684\u3002\u5c31\u597d\u6bd4 x = 10; x = 12 \u6765\u8bf4\uff0c\u5bf9\u4e8e\u67d0\u4e9b\u8bbe\u5907\u6765\u8bf4\u8fd9\u53ef\u80fd\u662f\u4e00\u4e2a\u6e10\u53d8\u7684\u6548\u679c\uff0c\u5982\u679c\u7701\u53bb\u4e86 x = 10 \u90a3\u4e48\u8fd9\u4e2a\u6548\u679c\u5c31\u5927\u6253\u6298\u6263\u4e86\u3002 \u4e3a\u6b64\u5bf9\u4e8e\u8fd9\u79cd\u60c5\u51b5\u6765\u8bf4\u5fc5\u9700\u4f7f\u7528 volatile \u6765\u544a\u8bc9\u7f16\u8bd1\u5668\u7981\u6b62\u5bf9\u53d8\u91cf\u7684\u8bfb\u5199\u8fdb\u884c\u4f18\u5316\u3002 std::atomic \u65e0\u6cd5\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u5b83\u53ea\u4fdd\u8bc1\u4e86\u64cd\u4f5c\u7684\u539f\u5b50\u6027\uff0c\u7f16\u8bd1\u5668\u4ecd\u7136\u4f1a\u591a\u6b21\u5197\u4f59\u7684\u8bfb\u5199\u64cd\u4f5c\u8fdb\u884c\u4f18\u5316\u3002","title":"Item40 Use std::atomic for concurrency, volatile for specific memory"},{"location":"%E5%8D%9A%E5%AE%A2/doc/cpp/Effective-Model-Cpp/item41/","text":"Item41 Consider pass by value for copyable parameters that are cheap to move and always copied. \u2003 \u2003\u51fd\u6570\u7684\u53c2\u6570\u4f20\u9012\u65b9\u5f0f\u6709\u5f88\u591a\u79cd\uff0c\u53ef\u4ee5\u662f\u503c\u62f7\u8d1d\u3001\u4f20\u6307\u9488\u3001\u4f20\u5f15\u7528\u3001\u751a\u81f3\u662f\u79fb\u52a8\u3002\u4e0b\u9762\u8fd9\u4e2aaddName\u51fd\u6570\u5c31\u662f\u5c06\u5916\u90e8\u4f20\u5165\u7684\u503c\u5b58\u653e\u5230\u5176\u5185\u90e8\u7684\u4e00\u4e2a\u79c1\u6709\u7684\u5bb9\u5668\u4e2d\uff0c\u4e3a\u4e86\u8ba9\u4f20\u9012\u7684\u8fc7\u7a0b\u66f4\u52a0\u9ad8\u6548\uff0caddName\u540c\u65f6\u652f\u6301\u5f15\u7528\u4f20\u9012\u548c\u79fb\u52a8\u4e24\u79cd\u65b9\u5f0f\u3002 1 2 3 4 5 6 7 8 9 10 11 class Widget { public : void addName ( const std :: string & newName ) { names . push_back ( newName ); } void addName ( std :: string && newName ) { names . push_back ( std :: move ( newName )); } private : std :: vector < std :: string > names ; } \u2003 \u2003\u540c\u6837\u7684\u4e00\u4e2a\u529f\u80fd\u4f46\u662f\u5374\u6709\u4e24\u4efd\u4ee3\u7801\uff0c\u9700\u8981\u5199\u4e24\u4efd\u51fd\u6570\u6587\u6863\uff0c\u5b58\u5728\u4e00\u5b9a\u7684\u5197\u4f59\u3002\u4e3a\u6b64\u53ef\u4ee5\u901a\u8fc7C++\u7684\u6a21\u7248\u5c06\u4e0a\u9762\u4e24\u4e2a\u51fd\u6570\u8fdb\u884c\u5408\u5e76\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 class Widget { public : template < typename T > void addName ( T && newName ) { names . push_back ( std :: forward < T > ( newNames )); } } \u2003 \u2003\u867d\u7136\u901a\u8fc7\u4e0a\u9762\u7684\u4ee3\u7801\u51cf\u5c11\u4e86\u4ee3\u7801\u7684\u5197\u4f59\uff0c\u4f46\u662f\u901a\u7528\u5f15\u7528\u4f1a\u5e26\u6765\u4e00\u4e9b\u5176\u5b83\u7684\u95ee\u9898\uff0c\u4f5c\u4e3a\u4e00\u4e2a\u6a21\u7248\uff0c addName \u7684\u5b9e\u73b0\u5fc5\u9700\u653e\u5728\u5934\u6587\u4ef6\u4e2d\uff0c\u4e8e\u6b64\u540c\u65f6\u5b83\u4e5f\u4f1a\u5b9e\u4f8b\u5316\u51fa\u4e0d\u540c\u7684\u7c7b\u578b\u3002\u5728 item30 \u4e2d\u5c31\u63d0\u5230\u4e86\u5f88\u591a\u5173\u4e8e\u901a\u7528\u5f15\u7528\u5931\u6548\u7684\u95ee\u9898\uff0c\u8fd8\u6709\u5728 Item26 \u4e2d\u63d0\u5230\u7684\u7684\u51fd\u6570\u91cd\u8f7d\u95ee\u9898\u3002\u56e0\u6b64\u901a\u7528\u5f15\u7528\u7684\u8fd9\u4e2a\u65b9\u6848\u5e76\u6ca1\u6709\u60f3\u8c61\u4e2d\u90a3\u4e48\u597d\u7528\u3002\u90a3\u662f\u5426\u610f\u5473\u7740\u6211\u4eec\u8981\u653e\u5f03\u8fd9\u4e2a\u65b9\u6848\u5462\uff0c\u4e5f\u4e0d\u5c3d\u7136\uff0c\u51e1\u4e8b\u90fd\u662f\u8981\u5206\u60c5\u51b5\u8ba8\u8bba\u7684\uff0c\u6ca1\u529e\u6cd5\u4e00\u6982\u800c\u8bba\u3002\u4e0a\u6587\u4e2d\u7684 addName \u66f4\u9002\u5408\u4f20\u503c\uff0c\u53ef\u4ee5\u662f\u4e0b\u9762\u8fd9\u79cd\u5199\u6cd5\uff1a 1 2 3 4 5 6 class Widget { public : void addName ( std :: string newName ) { names . push_back ( std :: move ( newName )); // \u907f\u514d\u4e00\u6b21\u62f7\u8d1d\uff0c\u76f4\u63a5move\u8fc7\u6765 } } \u2003 \u2003\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u5728\u5185\u90e8\u901a\u8fc7 std::move \u907f\u514d\u4e86\u4e00\u6b21\u62f7\u8d1d\uff0c\u56e0\u4e3a\u6211\u4eec\u77e5\u9053\u884c\u53c2 newName \u5176\u5b9e\u662f\u4e00\u4e2a\u4e34\u65f6\u7684\u503c\uff0c\u4e0d\u4f1a\u88ab\u5176\u5b83\u4ee3\u7801\u8bbf\u95ee\u5230\uff0c\u8fd9\u4e5f\u662f\u6700\u540e\u4e00\u6b21\u5bf9 newName \u7684\u8bbf\u95ee\uff0c\u6240\u4ee5\u662f\u53ef\u4ee5\u76f4\u63a5\u79fb\u52a8\u8fc7\u6765\u7684\u3002\u8fd9\u79cd\u65b9\u6cd5\u7684\u597d\u5904\u5c31\u662f\u907f\u514d\u4e86\u5c06\u4ee3\u7801\u5199\u5728\u5934\u6587\u4ef6\u4e2d\uff0c\u907f\u514d\u4e86\u901a\u7528\u5f15\u7528\u5e26\u6765\u7684\u4e00\u4e9b\u5931\u8d25\u7684case\uff0c\u907f\u514d\u51fa\u73b0\u4e00\u4e9b\u83ab\u540d\u5947\u5999\u7684\u7f16\u8bd1\u9519\u8bef\u3002\u574f\u5904\u81ea\u7136\u5c31\u662f\u591a\u4e86\u4e00\u6b21\u5b57\u7b26\u4e32\u7684\u62f7\u8d1d\uff0c\u6027\u80fd\u53ef\u80fd\u4f1a\u6709\u635f\u5931\u3002 \u2003 \u2003\u5728 C++98 \u4e2d\u65e0\u8bba\u7528\u6237\u4f20\u9012\u7684\u662f\u4ec0\u4e48\uff0c\u4e0a\u9762\u7684\u4ee3\u7801\u90fd\u907f\u514d\u4e0d\u4e86\u4e00\u6b21\u5b57\u7b26\u4e32\u7684\u62f7\u8d1d\u8fc7\u7a0b\uff0c\u4f46\u662f\u5230\u4e86 C++11 \u5219\u4e0d\u7136\uff0c\u5982\u679c\u4f20\u9012\u7684\u662f\u5de6\u503c\uff0c\u90a3\u4e48\u5f88\u81ea\u7136\u662f\u8981\u8fdb\u884c\u62f7\u8d1d\u7684\uff0c\u5982\u679c\u4f20\u9012\u7684\u662f\u53f3\u503c\u4f1a\u76f4\u63a5\u8c03\u7528\u79fb\u52a8\u6784\u9020\u8d4b\u503c\u64cd\u4f5c\u7b26\uff0c\u8fd9\u6837\u5c31\u4e0d\u4f1a\u8fdb\u884c\u62f7\u8d1d\u4e86\u3002 \u603b\u7ed3\u4e00\u4e0b\uff0c\u51fd\u6570\u7684\u53c2\u6570\u4f20\u9012\u53ef\u4ee5\u5f52\u4e3a\u4e0b\u9762\u4e09\u79cd\u5f62\u5f0f\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 // \u7b2c\u4e00\u79cd\u57fa\u4e8e\u91cd\u8f7d\u7684 class Widget { public : void addName ( const std :: string & newName ) { names . push_back ( newName ); } void addName ( std :: string && newName ) { names . push_back ( std :: move ( newName )); } ........ } // \u7b2c\u4e8c\u79cd\u57fa\u4e8e\u901a\u7528\u5f15\u7528\u7684 class Widget { public : template < typename T > void addName ( T && newName ) { names . push_back ( std :: forward < T > ( newNames )); } } // \u7b2c\u4e09\u79cd\u57fa\u4e8e\u503c\u62f7\u8d1d\u7684 class Widget { public : void addName ( std :: string newName ) { names . push_back ( std :: move ( newName )); // \u907f\u514d\u4e00\u6b21\u62f7\u8d1d\uff0c\u76f4\u63a5move\u8fc7\u6765 } } \u200b\u2003 \u2003\u524d\u4e24\u79cd\u53ef\u4ee5\u7edf\u79f0\u4e3a\u57fa\u4e8e\u5f15\u7528\u7684\u65b9\u6cd5\uff0c\u56e0\u4e3a\u5b83\u4eec\u90fd\u662f\u901a\u8fc7\u5f15\u7528\u6765\u4f20\u9012\u53c2\u6570\u7684\uff0c\u4e0b\u9762\u662f\u4e00\u7ec4\u51fd\u6570\u4f20\u9012\u7684\u573a\u666f\uff0c\u503c\u5f97\u597d\u597d\u7814\u7a76\u4e00\u4e0b\uff1a 1 2 3 4 Widget w ; std :: string name ( \"Bart\" ); w . addName ( name ); w . addName ( name + \"Jenne\" ); \u200b\u2003 \u2003\u73b0\u5728\u6211\u4e48\u6765\u8c08\u8bba\u4e00\u4e0b\u4e0a\u9762\u8fd9\u6bb5\u4ee3\u7801\u7684\u6027\u80fd\uff0c\u9996\u5148\u5ffd\u7565\u6389\u7f16\u8bd1\u5668\u5bf9\u4e0a\u9762\u4ee3\u7801\u53ef\u80fd\u505a\u7684\u4f18\u5316\uff0c\u56e0\u4e3a\u8fd9\u7c7b\u4f18\u5316\u90fd\u662f\u548c\u7f16\u8bd1\u5668\u76f8\u5173\u7684\uff0c\u6709\u4e00\u5b9a\u7684\u4e0a\u4e0b\u6587\uff0c\u6211\u4eec\u5206\u6790\u6027\u80fd\u7684\u65f6\u5019\u5e94\u8be5\u6487\u5f00\u8fd9\u4e9b\u5e72\u6270\u56e0\u7d20\u3002 \u57fa\u4e8e\u91cd\u8f7d \u8fd9\u79cd\u53c2\u6570\u4f20\u9012\u65b9\u5f0f\u5bf9\u4e8e\u4f20\u9012\u7684\u503c\u6765\u8bf4\uff0c\u65e0\u8bba\u662f\u5de6\u503c\u8fd8\u662f\u53f3\u503c\u90fd\u662f\u53ef\u4ee5\u4f20\u9012\u7684\uff0c\u5bf9\u4e8e\u4e0a\u9762\u4e24\u4e2a\u573a\u666f\u6765\u8bf4\u51e0\u4e4e\u662f\u6ca1\u6709\u5f00\u9500\u7684\uff0c\u524d\u8005\u57fa\u4e8e\u5f15\u7528\u4f20\u9012\uff0c\u540e\u8005\u662f\u76f4\u63a5\u79fb\u52a8\u6784\u9020\u3002\u5230\u4e86\u5185\u90e8\u524d\u8005\u9700\u8981\u8fdb\u884c\u4e00\u6b21\u62f7\u8d1d\u624d\u80fd \u653e\u5230\u5bb9\u5668\u4e2d\uff0c\u540e\u8005\u662f\u76f4\u63a5move\u8fdb\u53bb\u7684\uff0c\u6240\u4ee5\u603b\u7684\u6765\u8bf4\u5bf9\u4e8e\u5de6\u503c\u9700\u8981\u4e00\u6b21\u62f7\u8d1d\uff0c\u5bf9\u4e8e\u53f3\u503c\u9700\u8981\u4e00\u6b21move\u3002 \u57fa\u4e8e\u901a\u7528\u5f15\u7528 \u5f00\u9500\u548c\u57fa\u4e8e\u91cd\u8f7d\u7684\u4e00\u81f4\uff0c\u5bf9\u4e8e\u5de6\u503c\u9700\u8981\u4e00\u6b21\u62f7\u8d1d\uff0c\u5bf9\u4e8e\u53f3\u503c\u9700\u8981\u4e00\u6b21move\uff0c std::forward \u53ef\u4ee5\u533a\u5206\u4f20\u5165\u7684\u662f\u5426\u662f\u5de6\u503c\u8fd8\u662f\u53f3\u503c\u3002\u4f46\u662f\u5982\u679c\u7528\u6237\u4f20\u5165\u7684\u662f char* \u5e76\u4e0d\u662f string \u7684\u8bdd\uff0c\u57fa\u4e8e\u91cd\u8f7d\u7684\u65b9\u6cd5\u5f00\u9500\u4f1a\u53d8\u5f97\u66f4\u5927\uff0c\u56e0\u4e3a char* \u9700\u8981\u8fdb\u884c\u4e34\u65f6\u6784\u9020\u4e3a\u4e00\u4e2a std::string \u5bf9\u8c61\uff0c\u7136\u540e\u518d\u8fdb\u884c\u4e00\u6b21\u5185\u90e8\u62f7\u8d1d\uff0c\u4f46\u662f\u901a\u7528\u5f15\u7528\u7684\u8fd9\u4e2a\u7248\u672c\u4e0d\u4f1a\u5bfc\u81f4\u8fd9\u4e2a\u95ee\u9898( Item25 \u5bf9\u8fd9\u4e2a\u95ee\u9898\u6709\u4e86\u8fd1\u4e00\u6b65\u8bb2\u89e3)\u3002 \u4f20\u503c \u5982\u679c\u4f20\u9012\u7684\u662f\u5de6\u503c\u5c31\u9700\u8981\u8fdb\u884c\u4e00\u6b21\u62f7\u8d1d\u6784\u9020\uff0c\u5982\u679c\u662f\u53f3\u503c\u5219\u9700\u8981\u8fdb\u884c\u4e00\u6b21\u79fb\u52a8\u6784\u9020\uff0c\u65e0\u8bba\u5de6\u503c\u8fd8\u662f\u53f3\u503c\u5728\u51fd\u6570\u5185\u90e8\u90fd\u9700\u8981\u8fdb\u884c\u4e00\u6b21 move \u64cd\u4f5c\u3002\u603b\u7684\u6765\u8bf4\u5c31\u662f\u5bf9\u4e8e\u5de6\u503c\u662f\u4e00\u6b21\u62f7\u8d1d\u4e00\u6b21 move \uff0c\u5bf9\u4e8e\u53f3\u503c\u5c31\u662f\u4e24\u6b21 move \u3002\u65e0\u8bba\u662f\u5de6\u503c\u8fd8\u662f\u53f3\u503c\u4f20\u9012\u76f8\u6bd4\u4e8e\u4e0a\u9762\u4e24\u79cd\u90fd\u591a\u4e86\u4e00\u6b21\u989d\u5916\u7684\u62f7\u8d1d\u548c\u79fb\u52a8\u3002 \u2003 \u2003\u200b\u8ba9\u6211\u4eec\u91cd\u65b0\u6765\u770b\u4e00\u4e0b\u672c\u7bc7\u6587\u7ae0\u7684\u6807\u9898\uff0c Consider pass by value for conpyable parameters that are cheap to move and always copied \uff0c\u4e3a\u4f55\u8981\u8fd9\u4e48\u8bf4\u5462\uff0c\u6709\u4ee5\u4e0b\u56db\u70b9\u539f\u56e0\uff1a \u5982\u679c\u53ea\u8003\u8651\u4f20\u503c\u7684\u8bdd\uff0c\u90a3\u4e48\u5c31\u4e0d\u4f1a\u6709\u591a\u4efd\u4ee3\u7801\uff0c\u4e0d\u7528\u91cd\u8f7d\uff0c\u4e5f\u907f\u514d\u4f7f\u7528\u901a\u7528\u5f15\u7528\u5e26\u6765\u7684\u95ee\u9898\uff0c\u4f46\u662f\u5374\u5e26\u6765\u4e86\u6027\u80fd\u635f\u8017\uff0c\u4f46\u662f\u4e8b\u5b9e\u5e76\u4e0d\u603b\u662f\u8fd9\u6837\u7684\u3002 \u5bf9\u4e8e\u53ef\u62f7\u8d1d\u7684\u53c2\u6570\u8003\u8651\u4f7f\u7528\u4f20\u503c\u7684\u65b9\u5f0f\uff0c \u5bf9\u4e8e\u8fd9\u79cd\u60c5\u51b5\u53ea\u6709\u5f53\u53c2\u6570\u662f\u53ea\u80fd\u79fb\u52a8\u7684\u65f6\u5019\u624d\u4f1a\u5931\u8d25\u3002\u56e0\u4e3a\u5982\u679c\u53c2\u6570\u4e0d\u662f\u53ef\u62f7\u8d1d\u7684\uff0c\u90a3\u4e48\u5c31\u5fc5\u987b\u901a\u8fc7\u79fb\u52a8\u6784\u9020\u8fdb\u884c\u62f7\u8d1d\u3002\u6240\u4ee5\u5f53\u53c2\u6570\u53ea\u80fd\u79fb\u52a8\u7684\u65f6\u5019\u53ea\u9700\u8981\u63d0\u4f9b\u4e00\u4e2a\u53f3\u503c\u5f15\u7528\u7684\u7248\u672c\u6765\u8fdb\u884c\u53c2\u6570\u4f20\u9012\uff0c\u4f8b\u5982 std::unique_ptr \u8fd9\u5c31\u662f\u4e00\u4e2a move-only \u7684\u7c7b\u578b\uff0c\u6240\u4ee5\u5f53\u8981\u4f20\u9012 std::unique_ptr \u7684\u53c2\u6570\u65f6\uff0c\u53ea\u9700\u8981\u63d0\u4f9b\u53f3\u503c\u5f15\u7528\u7684\u7248\u672c\u5373\u53ef\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 class Widget { public : void setPtr ( std :: unique_ptr < std :: string >&& ptr ) { p = std :: move ( ptr ); } private : std :: unique_ptr < std :: string > p ; }; Widget w ; w . setPtr ( std :: make_unique < std :: string > ( \"Modern C++\" )); \u2003 \u2003\u4e0a\u9762\u7684\u4ee3\u7801\u603b\u5171\u9700\u8981\u82b1\u8d391\u6b21 move \u7684\u5f00\u9500\uff0c\u5982\u679c\u4e0a\u9762\u7684\u4ee3\u7801\u53ea\u63d0\u4f9b\u4e86\u503c\u4f20\u9012\u7684\u65b9\u5f0f\u7684\u8bdd\uff0c\u4f1a\u5bfc\u81f4\u9690\u5f0f\u7684\u8c03\u7528\u79fb\u52a8\u8d4b\u503c\u64cd\u4f5c\u7b26(\u56e0\u4e3a std::unique_ptr \u662f move-only \u7c7b\u578b\u7684\uff0c\u6240\u4ee5\u4e0d\u4f1a\u8c03\u7528\u62f7\u8d1d\u6784\u9020)\uff0c\u7136\u540e\u5185\u90e8\u518d\u505a\u4e00\u6b21move\uff0c\u6240\u4ee5\u603b\u5171\u9700\u8981\u82b1\u8d392\u6b21move\u7684\u5f00\u9500\u3002 \u53ea\u6709\u5f53\u503c\u62f7\u8d1d\u6bd4\u79fb\u52a8\u5f00\u9500\u4f4e\u7684\u65f6\u5019\u624d\u9009\u62e9\u4f7f\u7528\u4f20\u503c\u65b9\u5f0f\u3002\u5f53move\u64cd\u4f5c\u5f00\u9500\u4f4e\u7684\u65f6\u5019\uff0c\u5373\u4f7f\u591a\u4e00\u6b21move\u52a8\u4f5c\u4e5f\u662f\u53ef\u4ee5\u63a5\u53d7\u7684\uff0c\u4f46\u662f\u5f53move\u64cd\u4f5c\u5f00\u9500\u5927\u7684\u65f6\u5019\uff0c\u6267\u884c\u4e00\u6b21\u4e0d\u5fc5\u8981\u7684move\u64cd\u4f5c\u548c\u6267\u884c\u4e00\u6b21\u4e0d\u5fc5\u8981\u7684\u62f7\u8d1d\u64cd\u4f5c\u662f\u7c7b\u4f3c\u7684\uff0c\u90fd\u8fdd\u53cd\u4e86 C++98 \u4e2d\u907f\u514d\u503c\u62f7\u8d1d\u8fd9\u4e00\u89c4\u5219\u3002 \u53ea\u6709\u5f53\u53c2\u6570\u603b\u662f\u9700\u8981\u62f7\u8d1d\u7684\u65f6\u5019\u624d\u4f7f\u7528\u4f20\u503c\u7684\u65b9\u5f0f\uff0c\u8003\u8651\u4e00\u79cd\u60c5\u51b5\uff0c\u5047\u8bbe\u5f53\u6211\u4eec\u62f7\u8d1d\u4e00\u4e2a\u53c2\u6570\u5230\u4e00\u4e2a\u5185\u90e8\u7684\u5bb9\u5668\u65f6\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u5728\u6b64\u4e4b\u524d\u4f1a\u5bf9\u8fd9\u4e2a\u53c2\u6570\u8fdb\u884c\u4e00\u4e9b\u5408\u6cd5\u6027\u68c0\u67e5\uff0c\u53ea\u6709\u5f53\u6ee1\u8db3\u6761\u4ef6\u7684\u65f6\u5019\u624d\u4f1a\u8003\u8651\u6dfb\u52a0\u5230\u5bb9\u5668\u4e2d\uff0c\u5426\u5219\u4e0d\u6dfb\u52a0\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u4ee3\u7801\u8868\u793a: 1 2 3 4 5 6 7 8 9 class Widget { public : void addName ( std :: string newName ) { if (( newName . length () >= minLen ) && ( newName . length () <= maxLen )) { names . push_back ( std :: move ( newName )); } } } \u2003 \u2003\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c newName \u5e76\u4e0d\u603b\u4f1a\u62f7\u8d1d\u5230\u5185\u90e8\u5bb9\u5668\u4e2d\uff0c\u5982\u679c\u6dfb\u52a0\u7684 newName \u4e0d\u7b26\u5408\u6761\u4ef6\u5c31\u4f1a\u88ab\u4e22\u5f03\uff0c\u5c31\u4f1a\u9020\u6210 newName \u7684\u6784\u9020\u548c\u6790\u6784\u7684\u5f00\u9500\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5f15\u7528\u4f20\u9012\u5219\u4f1a\u663e\u5f97\u5f00\u9500\u66f4\u5c0f\u3002 \u2003 \u2003\u5373\u4f7f\u5f53\u62f7\u8d1d\u5f00\u9500\u8981\u6bd4\u79fb\u52a8\u5f00\u9500\u4f4e\u7684\u65f6\u5019\uff0c\u67d0\u4e9b\u60c5\u51b5\u4e0b\u4e5f\u4e0d\u9002\u5408\u4f7f\u7528\u503c\u4f20\u9012\u7684\u65b9\u5f0f\uff0c\u8fd9\u662f\u56e0\u4e3a\u51fd\u6570\u62f7\u8d1d\u53c2\u6570\u6709\u4e24\u79cd\u65b9\u5f0f\uff0c\u4e00\u79cd\u662f\u6784\u9020(\u62f7\u8d1d\u6784\u9020\u6216\u79fb\u52a8\u6784\u9020)\uff0c\u53e6\u5916\u4e00\u79cd\u5219\u662f\u8d4b\u503c(\u62f7\u8d1d\u8d4b\u503c\u6216\u79fb\u52a8\u8d4b\u503c)\u3002\u4e0a\u6587\u4e2d\u7684 addName \u4f7f\u7528\u7684\u5c31\u662f\u6784\u9020\u7684\u65b9\u5f0f\uff0c\u5176\u53c2\u6570 newName \u901a\u8fc7\u62f7\u8d1d\u6784\u9020\u521b\u5efa\u4e86\u4e00\u4e2a\u65b0\u7684\u5143\u7d20\u653e\u5728 vector::push_back \u7684\u5c3e\u90e8\u3002\u6587\u7ae0\u7684\u4e00\u5f00\u59cb\u5c31\u5206\u6790\u4e86\u8fd9\u79cd\u60c5\u51b5\uff0c\u65e0\u8bba\u4f20\u9012\u7684\u662f\u5de6\u503c\u8fd8\u662f\u53f3\u503c\u90fd\u4f1a\u5bfc\u81f4\u989d\u5916\u7684\u4e00\u6b21 move \u7684\u5f00\u9500\u3002 \u2003 \u2003\u5f53\u53c2\u6570\u4f20\u9012\u4f7f\u7528\u8d4b\u503c\u7684\u65b9\u5f0f\uff0c\u8fd9\u79cd\u60c5\u51b5\u76f8\u6bd4\u524d\u8005\u8981\u590d\u6742\u7684\u591a\uff0c\u4f8b\u5982\u6709\u4e00\u4e2a\u8868\u793a\u5bc6\u7801\u7684\u7c7b\uff0c\u56e0\u4e3a\u5bc6\u7801\u53ef\u80fd\u4f1a\u88ab\u6539\u53d8\uff0c\u6240\u4ee5\u8fd9\u4e2a\u7c7b\u63d0\u4f9b\u4e86\u4e00\u4e2asetter\u51fd\u6570changeto\uff0c\u8fd9\u4e2a\u51fd\u6570\u901a\u8fc7\u503c\u4f20\u9012\u7684\u7b56\u7565\uff0c\u4e0b\u9762\u662f\u8fd9\u4e2a\u7c7b\u7684\u5b9e\u73b0\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Password { public : explicit Password ( std :: string pwd ) : text ( std :: move ( pwd )) {} void changeTo ( std :: string newPwd ) { text = std :: move ( newPwd ); } .... private : std :: string text ; } std :: string initPwd ( \"Beware the Jabberwock\" ); Password p ( initPwd ); \u2003 \u2003\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0cp.text\u901a\u8fc7\u6784\u9020\u51fd\u6570\u8fdb\u884c\u4e86\u5bc6\u7801\u7684\u521d\u59cb\u5316\uff0c\u901a\u8fc7\u4e4b\u524d\u7684\u5206\u6790\u53ef\u77e5\uff0c\u8fd9\u91cc\u4f7f\u7528\u7684\u662f\u503c\u4f20\u9012\u7684\u65b9\u5f0f\uff0c\u989d\u5916\u591a\u4e86\u4e00\u6b21 std::string \u7684move\u6784\u9020\u7684\u5f00\u9500\uff0c\u5982\u679c\u4f7f\u7528\u5b8c\u7f8e\u8f6c\u53d1\u7684\u8bdd\u53ef\u4ee5\u7701\u53bb\u8fd9\u4e00\u5f00\u9500\u3002\u5bc6\u7801\u4f7f\u7528\u4e00\u6bb5\u65f6\u95f4\u540e\uff0c\u4e3a\u4e86\u5b89\u5168\u9700\u8981\u66f4\u6539\u5bc6\u7801\uff0c\u4e8e\u662f\u4f7f\u7528\u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801\u8fdb\u884c\u66f4\u6539\uff1a 1 2 std :: string newPasswrd = \"test password\" ; p . changeTo ( newPassword ); \u2003 \u2003 changeTo \u4e2d\u4f7f\u7528\u7684\u662f\u8d4b\u503c\u6784\u9020\uff0c\u51fd\u6570\u7684\u53c2\u6570\u4f7f\u7528\u7684\u662f\u503c\u4f20\u9012\u7684\u65b9\u5f0f\uff0c\u8fd9\u79cd\u60c5\u51b5\u5bfc\u81f4\u4e86\u7a0b\u5e8f\u6709\u6bd4\u8f83\u4e25\u91cd\u7684\u6027\u80fd\u95ee\u9898\u3002\u4f20\u9012\u8fdb\u6765\u7684\u53c2\u6570 newPwd \u662f\u4e00\u4e2a\u5de6\u503c\uff0c\u56e0\u6b64\u5f53 newPwd \u88ab\u6784\u9020\u7684\u65f6\u5019\uff0c std::string \u7684\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u4f1a\u88ab\u8c03\u7528\uff0c\u5728\u8fd9\u4e2a\u6784\u9020\u51fd\u6570\u4e2d\u4f1a\u8fdb\u884c\u5185\u5b58\u7684\u5206\u914d\uff0c\u7b49\u6784\u9020\u5b8c\u6210\u540e\u5185\u90e8\u4f1a\u4f7f\u7528 std::move \u8fdb\u884c\u79fb\u52a8\u8d4b\u503c\u6784\u9020\uff0c\u8fd9\u4f1a\u5bfc\u81f4p.text\u539f\u6765\u6307\u5411\u7684\u5185\u5b58\u88ab\u91ca\u653e\u3002\u6574\u4e2a\u66f4\u6539\u5bc6\u7801\u7684\u8fc7\u7a0b\u4e2d\u6d89\u53ca\u4e86\u4e24\u6b21\u5185\u5b58\u7684\u5206\u914d\u6216\u91ca\u653e\u3002\u4f46\u662f\u5982\u679c\u4f7f\u7528\u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801\u5c06\u6709\u53ef\u80fd\u907f\u514d\u4e00\u6b21\u5185\u5b58\u7684\u5206\u914d\u6216\u91ca\u653e\u3002 1 2 3 4 5 6 7 8 9 class Password { public : ..... void changeTo ( const std :: string & newPwd ) { text = newPwd ; } private : std :: string text ; } \u2003 \u2003\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\u4f7f\u7528\u7684\u662f\u8d4b\u503c\u6784\u9020\uff0c\u56e0\u6b64\u5f53 p.text \u7684\u5b57\u7b26\u4e32\u957f\u5ea6\u5927\u4e8e newPwd \u7684\u957f\u5ea6\u65f6\u4f1a\u590d\u7528\u5df2\u7ecf\u5206\u914d\u7684\u5185\u5b58\uff0c\u5f00\u9500\u8981\u6bd4\u503c\u4f20\u9012\u7684\u65b9\u5f0f\u8981\u5c0f\u3002\u4f46\u662f\u5982\u679c p.text \u7684\u5b57\u7b26\u4e32\u957f\u5ea6\u5c0f\u4e8e newPwd \u7684\u957f\u5ea6\uff0c\u90a3\u4e48\u989d\u5916\u7684\u5185\u5b58\u5206\u914d\u548c\u91ca\u653e\u7684\u5f00\u9500\u662f\u5c11\u4e0d\u4e86\u7684\u548c\u503c\u4f20\u9012\u7684\u65b9\u5f0f\u4e00\u6837\u3002\u4e0a\u6587\u7684\u8fd9\u4e9b\u5206\u6790\u6ca1\u529e\u6cd5\u4e00\u6982\u800c\u8bba\uff0c\u53ea\u9002\u7528\u4e8e\u503c\u662f\u4fdd\u5b58\u5728\u5806\u5185\u5b58\u4e2d\u7684\uff0c\u9700\u8981\u52a8\u6001\u5206\u914d\u5185\u5b58\u7684\u7c7b\u578b\uff0c\u4e0d\u662f\u6240\u6709\u7684\u7c7b\u578b\u90fd\u9002\u5408\u4e0a\u6587\u7684\u5206\u6790\uff0c std::string \u548c std::vector \u662f\u786e\u5b9a\u9002\u7528\u7684\u3002 \u2003 \u2003\u4e0a\u6587\u5bf9\u8d4b\u503c\u6784\u9020\u7684\u5206\u6790\u53ea\u9002\u7528\u4e8e\u53c2\u6570\u4f20\u9012\u7684\u662f\u5de6\u503c\u7684\u60c5\u51b5\uff0c\u5982\u679c\u4f20\u9012\u7684\u662f\u53f3\u503c\uff0c\u90a3\u4e48\u5f00\u9500\u8fd8\u662f\u5f88\u4f4e\u7684\uff0c\u56e0\u4e3a\u4e0d\u9700\u8981\u8fdb\u884c\u62f7\u8d1d\u6784\u9020\u4e86\uff0c\u6ca1\u6709\u62f7\u8d1d\u6784\u9020\u65f6\u7684\u5185\u5b58\u5206\u914d\u5f00\u9500\u4e86\u3002 \u2003 \u2003\u603b\u800c\u8a00\u4e4b\uff0c\u5bf9\u4e8e\u4e0a\u6587\u7684\u8d4b\u503c\u6784\u9020\u7684\u5206\u6790\uff0c\u8981\u8003\u8651\u4f20\u9012\u7684\u662f\u5de6\u503c\u8fd8\u662f\u53f3\u503c\uff0c\u8003\u8651\u8d4b\u503c\u7684\u7c7b\u578b\u662f\u4ec0\u4e48\uff0c\u662f\u5426\u6709\u52a8\u6001\u5185\u5b58\u5206\u914d\uff0c\u751a\u81f3\u8fd8\u8981\u8003\u8651\u8981\u8d4b\u503c\u7684\u7c7b\u578b\u7684\u5b9e\u73b0\u662f\u4ec0\u4e48\u6837\u5b50\u7684\uff0c\u4f8b\u5982: std::string \uff0c\u5982\u679c\u5b83\u4f7f\u7528\u4e86SSO\u4f18\u5316\u8fdb\u884c\u5b9e\u73b0\uff0c\u90a3\u4e48\u8d4b\u503c\u7684\u64cd\u4f5c\u4f1a\u5c06\u8981\u8d4b\u503c\u7684\u5185\u5bb9\u653e\u5230 SSO \u7684 buffer \u4e2d\uff0c\u90a3\u4e48\u60c5\u51b5\u53c8\u4e0d\u4e00\u6837\u4e86\u3002\u56e0\u6b64\u6211\u8bf4\u4f7f\u7528\u8d4b\u503c\u7684\u65b9\u5f0f\u8fdb\u884c\u53c2\u6570\u4f20\u9012\u8fd9\u79cd\u60c5\u51b5\u5206\u6790\u8d77\u6765\u5f88\u590d\u6742\u3002\u56e0\u6b64\u901a\u5e38\u60c5\u51b5\u6700\u5b9e\u9645\u7684\u505a\u6cd5\u662f\u91c7\u7528\"\u6709\u7f6a\u63a8\u5b9a\"\u7684\u7b56\u7565\uff0c\u4e5f\u5c31\u662f\u4f7f\u7528\u91cd\u8f7d\u6216\u8005\u662f\u5f15\u7528\u7684\u65b9\u5f0f\u8fdb\u884c\u53c2\u6570\u4f20\u9012\uff0c\u9664\u975e\u5728\u76ee\u6807\u7c7b\u578b\u7684\u60c5\u51b5\u4e0b\u503c\u4f20\u9012\u88ab\u8868\u660e\u5176\u5f00\u9500\u8981\u6bd4\u524d\u8005\u66f4\u9ad8\u6548\u3002 \u2003 \u2003\u73b0\u5982\u4eca\uff0c\u8f6f\u4ef6\u8981\u5c3d\u53ef\u80fd\u7684\u5feb\uff0c\u6240\u4ee5\u503c\u4f20\u9012\u7684\u65b9\u5f0f\u53ef\u80fd\u4e0d\u518d\u662f\u4e00\u4e2a\u53ef\u884c\u7684\u7b56\u7565\uff0c\u56e0\u4e3a\u907f\u514d\u4e00\u6b21\u5ec9\u4ef7\u7684 move \u5f00\u9500\u4e5f\u662f\u5f88\u91cd\u8981\u7684\uff0c\u56e0\u4e3a\u6211\u4eec\u6ca1\u529e\u6cd5\u77e5\u9053\u4e00\u4e2a\u64cd\u4f5c\u4f1a\u6709\u591a\u5c11\u6b21\u8fd9\u6837\u7684 move \u64cd\u4f5c\uff0c\u4f8b\u5982 Widget::addName \u901a\u8fc7\u503c\u4f20\u9012\u9020\u6210\u4e86\u4e00\u6b21\u989d\u5916\u7684 move \u64cd\u4f5c\uff0c\u4f46\u662f\u8fd9\u4e2a\u51fd\u6570\u5185\u90e8\u53c8\u8c03\u7528\u4e86 Widget::validateName \uff0c\u8fd9\u4e2a\u51fd\u6570\u4e5f\u662f\u503c\u4f20\u9012\u7684\u65b9\u5f0f\uff0c\u8fd9\u5c31\u53c8\u9020\u6210\u4e86\u4e00\u6b21\u989d\u5916\u7684 move \u5f00\u9500\uff0c validateName \u5185\u90e8\u5982\u679c\u518d\u8c03\u7528\u5176\u4ed6\u7684\u51fd\u6570\uff0c\u5e76\u4e14\u8fd9\u4e2a\u51fd\u6570\u540c\u6837\u662f\u503c\u4f20\u9012\u7684\u65b9\u5f0f\u5462?\uff0c\u8fd9\u5c31\u9020\u6210\u4e86\u7d2f\u52a0\u6548\u5e94\uff0c\u5982\u679c\u4f7f\u7528 \u5f15\u7528\u4f20\u9012\u7684\u8bdd\u5c31\u4e0d\u4f1a\u6709\u8fd9\u6837\u7684\u7d2f\u52a0\u6548\u5e94\u4e86\u3002 \u2003 \u2003\u5728\u672c\u6587\u7684\u6700\u540e\u6211\u4eec\u6765\u8ba8\u8bba\u4e00\u4e2a\u4e0e\u6027\u80fd\u65e0\u5173\u7684\u8bdd\u9898\uff0c\u4f46\u662f\u8fd9\u4e2a\u8bdd\u9898\u4ecd\u7136\u503c\u5f97\u6211\u4eec\u8bb0\u4f4f\u3002\u503c\u4f20\u9012\u4e0d\u50cf\u5f15\u7528\u4f20\u9012\uff0c\u5b83\u5bb9\u6613\u53d7\u5230\u5207\u5272\u95ee\u9898\u7684\u5f71\u54cd\u3002\u5982\u679c\u4f60\u6709\u4e00\u4e2a\u51fd\u6570\u88ab\u8bbe\u8ba1\u6210\u63a5\u6536\u4e00\u4e2a\u57fa\u7c7b\u6216\u662f\u4efb\u4f55\u4e00\u4e2a\u6d3e\u751f\u7c7b\uff0c\u4f60\u4e0d\u5e94\u8be5\u5c06\u5176\u58f0\u660e\u4e3a\u503c\u4f20\u9012\u7684\u65b9\u5f0f\uff0c\u56e0\u4e3a\u8fd9\u4f1a\u9020\u6210\u7c7b\u578b\u5207\u5272\u7684\u95ee\u9898\u3002\u4f8b\u5982\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50: 1 2 3 4 5 class Widget { ... }; class SpecialWidget : public Widget { ... }; void processWidget ( Widget w ); SpecialWidget sw ; processWidget ( sw ); // \u5bfc\u81f4\u4e86\u7c7b\u578b\u5207\u5272\u7684\u95ee\u9898\uff0cprocessWidget\u770b\u5230\u7684\u662fWidget\u7c7b\u578b","title":"Item41 Consider pass by value for copyable parameters that are cheap to move and always copied."},{"location":"%E5%8D%9A%E5%AE%A2/doc/cpp/Effective-Model-Cpp/item41/#item41-consider-pass-by-value-for-copyable-parameters-that-are-cheap-to-move-and-always-copied","text":"\u51fd\u6570\u7684\u53c2\u6570\u4f20\u9012\u65b9\u5f0f\u6709\u5f88\u591a\u79cd\uff0c\u53ef\u4ee5\u662f\u503c\u62f7\u8d1d\u3001\u4f20\u6307\u9488\u3001\u4f20\u5f15\u7528\u3001\u751a\u81f3\u662f\u79fb\u52a8\u3002\u4e0b\u9762\u8fd9\u4e2aaddName\u51fd\u6570\u5c31\u662f\u5c06\u5916\u90e8\u4f20\u5165\u7684\u503c\u5b58\u653e\u5230\u5176\u5185\u90e8\u7684\u4e00\u4e2a\u79c1\u6709\u7684\u5bb9\u5668\u4e2d\uff0c\u4e3a\u4e86\u8ba9\u4f20\u9012\u7684\u8fc7\u7a0b\u66f4\u52a0\u9ad8\u6548\uff0caddName\u540c\u65f6\u652f\u6301\u5f15\u7528\u4f20\u9012\u548c\u79fb\u52a8\u4e24\u79cd\u65b9\u5f0f\u3002 1 2 3 4 5 6 7 8 9 10 11 class Widget { public : void addName ( const std :: string & newName ) { names . push_back ( newName ); } void addName ( std :: string && newName ) { names . push_back ( std :: move ( newName )); } private : std :: vector < std :: string > names ; } \u2003 \u2003\u540c\u6837\u7684\u4e00\u4e2a\u529f\u80fd\u4f46\u662f\u5374\u6709\u4e24\u4efd\u4ee3\u7801\uff0c\u9700\u8981\u5199\u4e24\u4efd\u51fd\u6570\u6587\u6863\uff0c\u5b58\u5728\u4e00\u5b9a\u7684\u5197\u4f59\u3002\u4e3a\u6b64\u53ef\u4ee5\u901a\u8fc7C++\u7684\u6a21\u7248\u5c06\u4e0a\u9762\u4e24\u4e2a\u51fd\u6570\u8fdb\u884c\u5408\u5e76\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 class Widget { public : template < typename T > void addName ( T && newName ) { names . push_back ( std :: forward < T > ( newNames )); } } \u2003 \u2003\u867d\u7136\u901a\u8fc7\u4e0a\u9762\u7684\u4ee3\u7801\u51cf\u5c11\u4e86\u4ee3\u7801\u7684\u5197\u4f59\uff0c\u4f46\u662f\u901a\u7528\u5f15\u7528\u4f1a\u5e26\u6765\u4e00\u4e9b\u5176\u5b83\u7684\u95ee\u9898\uff0c\u4f5c\u4e3a\u4e00\u4e2a\u6a21\u7248\uff0c addName \u7684\u5b9e\u73b0\u5fc5\u9700\u653e\u5728\u5934\u6587\u4ef6\u4e2d\uff0c\u4e8e\u6b64\u540c\u65f6\u5b83\u4e5f\u4f1a\u5b9e\u4f8b\u5316\u51fa\u4e0d\u540c\u7684\u7c7b\u578b\u3002\u5728 item30 \u4e2d\u5c31\u63d0\u5230\u4e86\u5f88\u591a\u5173\u4e8e\u901a\u7528\u5f15\u7528\u5931\u6548\u7684\u95ee\u9898\uff0c\u8fd8\u6709\u5728 Item26 \u4e2d\u63d0\u5230\u7684\u7684\u51fd\u6570\u91cd\u8f7d\u95ee\u9898\u3002\u56e0\u6b64\u901a\u7528\u5f15\u7528\u7684\u8fd9\u4e2a\u65b9\u6848\u5e76\u6ca1\u6709\u60f3\u8c61\u4e2d\u90a3\u4e48\u597d\u7528\u3002\u90a3\u662f\u5426\u610f\u5473\u7740\u6211\u4eec\u8981\u653e\u5f03\u8fd9\u4e2a\u65b9\u6848\u5462\uff0c\u4e5f\u4e0d\u5c3d\u7136\uff0c\u51e1\u4e8b\u90fd\u662f\u8981\u5206\u60c5\u51b5\u8ba8\u8bba\u7684\uff0c\u6ca1\u529e\u6cd5\u4e00\u6982\u800c\u8bba\u3002\u4e0a\u6587\u4e2d\u7684 addName \u66f4\u9002\u5408\u4f20\u503c\uff0c\u53ef\u4ee5\u662f\u4e0b\u9762\u8fd9\u79cd\u5199\u6cd5\uff1a 1 2 3 4 5 6 class Widget { public : void addName ( std :: string newName ) { names . push_back ( std :: move ( newName )); // \u907f\u514d\u4e00\u6b21\u62f7\u8d1d\uff0c\u76f4\u63a5move\u8fc7\u6765 } } \u2003 \u2003\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u5728\u5185\u90e8\u901a\u8fc7 std::move \u907f\u514d\u4e86\u4e00\u6b21\u62f7\u8d1d\uff0c\u56e0\u4e3a\u6211\u4eec\u77e5\u9053\u884c\u53c2 newName \u5176\u5b9e\u662f\u4e00\u4e2a\u4e34\u65f6\u7684\u503c\uff0c\u4e0d\u4f1a\u88ab\u5176\u5b83\u4ee3\u7801\u8bbf\u95ee\u5230\uff0c\u8fd9\u4e5f\u662f\u6700\u540e\u4e00\u6b21\u5bf9 newName \u7684\u8bbf\u95ee\uff0c\u6240\u4ee5\u662f\u53ef\u4ee5\u76f4\u63a5\u79fb\u52a8\u8fc7\u6765\u7684\u3002\u8fd9\u79cd\u65b9\u6cd5\u7684\u597d\u5904\u5c31\u662f\u907f\u514d\u4e86\u5c06\u4ee3\u7801\u5199\u5728\u5934\u6587\u4ef6\u4e2d\uff0c\u907f\u514d\u4e86\u901a\u7528\u5f15\u7528\u5e26\u6765\u7684\u4e00\u4e9b\u5931\u8d25\u7684case\uff0c\u907f\u514d\u51fa\u73b0\u4e00\u4e9b\u83ab\u540d\u5947\u5999\u7684\u7f16\u8bd1\u9519\u8bef\u3002\u574f\u5904\u81ea\u7136\u5c31\u662f\u591a\u4e86\u4e00\u6b21\u5b57\u7b26\u4e32\u7684\u62f7\u8d1d\uff0c\u6027\u80fd\u53ef\u80fd\u4f1a\u6709\u635f\u5931\u3002 \u2003 \u2003\u5728 C++98 \u4e2d\u65e0\u8bba\u7528\u6237\u4f20\u9012\u7684\u662f\u4ec0\u4e48\uff0c\u4e0a\u9762\u7684\u4ee3\u7801\u90fd\u907f\u514d\u4e0d\u4e86\u4e00\u6b21\u5b57\u7b26\u4e32\u7684\u62f7\u8d1d\u8fc7\u7a0b\uff0c\u4f46\u662f\u5230\u4e86 C++11 \u5219\u4e0d\u7136\uff0c\u5982\u679c\u4f20\u9012\u7684\u662f\u5de6\u503c\uff0c\u90a3\u4e48\u5f88\u81ea\u7136\u662f\u8981\u8fdb\u884c\u62f7\u8d1d\u7684\uff0c\u5982\u679c\u4f20\u9012\u7684\u662f\u53f3\u503c\u4f1a\u76f4\u63a5\u8c03\u7528\u79fb\u52a8\u6784\u9020\u8d4b\u503c\u64cd\u4f5c\u7b26\uff0c\u8fd9\u6837\u5c31\u4e0d\u4f1a\u8fdb\u884c\u62f7\u8d1d\u4e86\u3002 \u603b\u7ed3\u4e00\u4e0b\uff0c\u51fd\u6570\u7684\u53c2\u6570\u4f20\u9012\u53ef\u4ee5\u5f52\u4e3a\u4e0b\u9762\u4e09\u79cd\u5f62\u5f0f\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 // \u7b2c\u4e00\u79cd\u57fa\u4e8e\u91cd\u8f7d\u7684 class Widget { public : void addName ( const std :: string & newName ) { names . push_back ( newName ); } void addName ( std :: string && newName ) { names . push_back ( std :: move ( newName )); } ........ } // \u7b2c\u4e8c\u79cd\u57fa\u4e8e\u901a\u7528\u5f15\u7528\u7684 class Widget { public : template < typename T > void addName ( T && newName ) { names . push_back ( std :: forward < T > ( newNames )); } } // \u7b2c\u4e09\u79cd\u57fa\u4e8e\u503c\u62f7\u8d1d\u7684 class Widget { public : void addName ( std :: string newName ) { names . push_back ( std :: move ( newName )); // \u907f\u514d\u4e00\u6b21\u62f7\u8d1d\uff0c\u76f4\u63a5move\u8fc7\u6765 } } \u200b\u2003 \u2003\u524d\u4e24\u79cd\u53ef\u4ee5\u7edf\u79f0\u4e3a\u57fa\u4e8e\u5f15\u7528\u7684\u65b9\u6cd5\uff0c\u56e0\u4e3a\u5b83\u4eec\u90fd\u662f\u901a\u8fc7\u5f15\u7528\u6765\u4f20\u9012\u53c2\u6570\u7684\uff0c\u4e0b\u9762\u662f\u4e00\u7ec4\u51fd\u6570\u4f20\u9012\u7684\u573a\u666f\uff0c\u503c\u5f97\u597d\u597d\u7814\u7a76\u4e00\u4e0b\uff1a 1 2 3 4 Widget w ; std :: string name ( \"Bart\" ); w . addName ( name ); w . addName ( name + \"Jenne\" ); \u200b\u2003 \u2003\u73b0\u5728\u6211\u4e48\u6765\u8c08\u8bba\u4e00\u4e0b\u4e0a\u9762\u8fd9\u6bb5\u4ee3\u7801\u7684\u6027\u80fd\uff0c\u9996\u5148\u5ffd\u7565\u6389\u7f16\u8bd1\u5668\u5bf9\u4e0a\u9762\u4ee3\u7801\u53ef\u80fd\u505a\u7684\u4f18\u5316\uff0c\u56e0\u4e3a\u8fd9\u7c7b\u4f18\u5316\u90fd\u662f\u548c\u7f16\u8bd1\u5668\u76f8\u5173\u7684\uff0c\u6709\u4e00\u5b9a\u7684\u4e0a\u4e0b\u6587\uff0c\u6211\u4eec\u5206\u6790\u6027\u80fd\u7684\u65f6\u5019\u5e94\u8be5\u6487\u5f00\u8fd9\u4e9b\u5e72\u6270\u56e0\u7d20\u3002 \u57fa\u4e8e\u91cd\u8f7d \u8fd9\u79cd\u53c2\u6570\u4f20\u9012\u65b9\u5f0f\u5bf9\u4e8e\u4f20\u9012\u7684\u503c\u6765\u8bf4\uff0c\u65e0\u8bba\u662f\u5de6\u503c\u8fd8\u662f\u53f3\u503c\u90fd\u662f\u53ef\u4ee5\u4f20\u9012\u7684\uff0c\u5bf9\u4e8e\u4e0a\u9762\u4e24\u4e2a\u573a\u666f\u6765\u8bf4\u51e0\u4e4e\u662f\u6ca1\u6709\u5f00\u9500\u7684\uff0c\u524d\u8005\u57fa\u4e8e\u5f15\u7528\u4f20\u9012\uff0c\u540e\u8005\u662f\u76f4\u63a5\u79fb\u52a8\u6784\u9020\u3002\u5230\u4e86\u5185\u90e8\u524d\u8005\u9700\u8981\u8fdb\u884c\u4e00\u6b21\u62f7\u8d1d\u624d\u80fd \u653e\u5230\u5bb9\u5668\u4e2d\uff0c\u540e\u8005\u662f\u76f4\u63a5move\u8fdb\u53bb\u7684\uff0c\u6240\u4ee5\u603b\u7684\u6765\u8bf4\u5bf9\u4e8e\u5de6\u503c\u9700\u8981\u4e00\u6b21\u62f7\u8d1d\uff0c\u5bf9\u4e8e\u53f3\u503c\u9700\u8981\u4e00\u6b21move\u3002 \u57fa\u4e8e\u901a\u7528\u5f15\u7528 \u5f00\u9500\u548c\u57fa\u4e8e\u91cd\u8f7d\u7684\u4e00\u81f4\uff0c\u5bf9\u4e8e\u5de6\u503c\u9700\u8981\u4e00\u6b21\u62f7\u8d1d\uff0c\u5bf9\u4e8e\u53f3\u503c\u9700\u8981\u4e00\u6b21move\uff0c std::forward \u53ef\u4ee5\u533a\u5206\u4f20\u5165\u7684\u662f\u5426\u662f\u5de6\u503c\u8fd8\u662f\u53f3\u503c\u3002\u4f46\u662f\u5982\u679c\u7528\u6237\u4f20\u5165\u7684\u662f char* \u5e76\u4e0d\u662f string \u7684\u8bdd\uff0c\u57fa\u4e8e\u91cd\u8f7d\u7684\u65b9\u6cd5\u5f00\u9500\u4f1a\u53d8\u5f97\u66f4\u5927\uff0c\u56e0\u4e3a char* \u9700\u8981\u8fdb\u884c\u4e34\u65f6\u6784\u9020\u4e3a\u4e00\u4e2a std::string \u5bf9\u8c61\uff0c\u7136\u540e\u518d\u8fdb\u884c\u4e00\u6b21\u5185\u90e8\u62f7\u8d1d\uff0c\u4f46\u662f\u901a\u7528\u5f15\u7528\u7684\u8fd9\u4e2a\u7248\u672c\u4e0d\u4f1a\u5bfc\u81f4\u8fd9\u4e2a\u95ee\u9898( Item25 \u5bf9\u8fd9\u4e2a\u95ee\u9898\u6709\u4e86\u8fd1\u4e00\u6b65\u8bb2\u89e3)\u3002 \u4f20\u503c \u5982\u679c\u4f20\u9012\u7684\u662f\u5de6\u503c\u5c31\u9700\u8981\u8fdb\u884c\u4e00\u6b21\u62f7\u8d1d\u6784\u9020\uff0c\u5982\u679c\u662f\u53f3\u503c\u5219\u9700\u8981\u8fdb\u884c\u4e00\u6b21\u79fb\u52a8\u6784\u9020\uff0c\u65e0\u8bba\u5de6\u503c\u8fd8\u662f\u53f3\u503c\u5728\u51fd\u6570\u5185\u90e8\u90fd\u9700\u8981\u8fdb\u884c\u4e00\u6b21 move \u64cd\u4f5c\u3002\u603b\u7684\u6765\u8bf4\u5c31\u662f\u5bf9\u4e8e\u5de6\u503c\u662f\u4e00\u6b21\u62f7\u8d1d\u4e00\u6b21 move \uff0c\u5bf9\u4e8e\u53f3\u503c\u5c31\u662f\u4e24\u6b21 move \u3002\u65e0\u8bba\u662f\u5de6\u503c\u8fd8\u662f\u53f3\u503c\u4f20\u9012\u76f8\u6bd4\u4e8e\u4e0a\u9762\u4e24\u79cd\u90fd\u591a\u4e86\u4e00\u6b21\u989d\u5916\u7684\u62f7\u8d1d\u548c\u79fb\u52a8\u3002 \u2003 \u2003\u200b\u8ba9\u6211\u4eec\u91cd\u65b0\u6765\u770b\u4e00\u4e0b\u672c\u7bc7\u6587\u7ae0\u7684\u6807\u9898\uff0c Consider pass by value for conpyable parameters that are cheap to move and always copied \uff0c\u4e3a\u4f55\u8981\u8fd9\u4e48\u8bf4\u5462\uff0c\u6709\u4ee5\u4e0b\u56db\u70b9\u539f\u56e0\uff1a \u5982\u679c\u53ea\u8003\u8651\u4f20\u503c\u7684\u8bdd\uff0c\u90a3\u4e48\u5c31\u4e0d\u4f1a\u6709\u591a\u4efd\u4ee3\u7801\uff0c\u4e0d\u7528\u91cd\u8f7d\uff0c\u4e5f\u907f\u514d\u4f7f\u7528\u901a\u7528\u5f15\u7528\u5e26\u6765\u7684\u95ee\u9898\uff0c\u4f46\u662f\u5374\u5e26\u6765\u4e86\u6027\u80fd\u635f\u8017\uff0c\u4f46\u662f\u4e8b\u5b9e\u5e76\u4e0d\u603b\u662f\u8fd9\u6837\u7684\u3002 \u5bf9\u4e8e\u53ef\u62f7\u8d1d\u7684\u53c2\u6570\u8003\u8651\u4f7f\u7528\u4f20\u503c\u7684\u65b9\u5f0f\uff0c \u5bf9\u4e8e\u8fd9\u79cd\u60c5\u51b5\u53ea\u6709\u5f53\u53c2\u6570\u662f\u53ea\u80fd\u79fb\u52a8\u7684\u65f6\u5019\u624d\u4f1a\u5931\u8d25\u3002\u56e0\u4e3a\u5982\u679c\u53c2\u6570\u4e0d\u662f\u53ef\u62f7\u8d1d\u7684\uff0c\u90a3\u4e48\u5c31\u5fc5\u987b\u901a\u8fc7\u79fb\u52a8\u6784\u9020\u8fdb\u884c\u62f7\u8d1d\u3002\u6240\u4ee5\u5f53\u53c2\u6570\u53ea\u80fd\u79fb\u52a8\u7684\u65f6\u5019\u53ea\u9700\u8981\u63d0\u4f9b\u4e00\u4e2a\u53f3\u503c\u5f15\u7528\u7684\u7248\u672c\u6765\u8fdb\u884c\u53c2\u6570\u4f20\u9012\uff0c\u4f8b\u5982 std::unique_ptr \u8fd9\u5c31\u662f\u4e00\u4e2a move-only \u7684\u7c7b\u578b\uff0c\u6240\u4ee5\u5f53\u8981\u4f20\u9012 std::unique_ptr \u7684\u53c2\u6570\u65f6\uff0c\u53ea\u9700\u8981\u63d0\u4f9b\u53f3\u503c\u5f15\u7528\u7684\u7248\u672c\u5373\u53ef\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 class Widget { public : void setPtr ( std :: unique_ptr < std :: string >&& ptr ) { p = std :: move ( ptr ); } private : std :: unique_ptr < std :: string > p ; }; Widget w ; w . setPtr ( std :: make_unique < std :: string > ( \"Modern C++\" )); \u2003 \u2003\u4e0a\u9762\u7684\u4ee3\u7801\u603b\u5171\u9700\u8981\u82b1\u8d391\u6b21 move \u7684\u5f00\u9500\uff0c\u5982\u679c\u4e0a\u9762\u7684\u4ee3\u7801\u53ea\u63d0\u4f9b\u4e86\u503c\u4f20\u9012\u7684\u65b9\u5f0f\u7684\u8bdd\uff0c\u4f1a\u5bfc\u81f4\u9690\u5f0f\u7684\u8c03\u7528\u79fb\u52a8\u8d4b\u503c\u64cd\u4f5c\u7b26(\u56e0\u4e3a std::unique_ptr \u662f move-only \u7c7b\u578b\u7684\uff0c\u6240\u4ee5\u4e0d\u4f1a\u8c03\u7528\u62f7\u8d1d\u6784\u9020)\uff0c\u7136\u540e\u5185\u90e8\u518d\u505a\u4e00\u6b21move\uff0c\u6240\u4ee5\u603b\u5171\u9700\u8981\u82b1\u8d392\u6b21move\u7684\u5f00\u9500\u3002 \u53ea\u6709\u5f53\u503c\u62f7\u8d1d\u6bd4\u79fb\u52a8\u5f00\u9500\u4f4e\u7684\u65f6\u5019\u624d\u9009\u62e9\u4f7f\u7528\u4f20\u503c\u65b9\u5f0f\u3002\u5f53move\u64cd\u4f5c\u5f00\u9500\u4f4e\u7684\u65f6\u5019\uff0c\u5373\u4f7f\u591a\u4e00\u6b21move\u52a8\u4f5c\u4e5f\u662f\u53ef\u4ee5\u63a5\u53d7\u7684\uff0c\u4f46\u662f\u5f53move\u64cd\u4f5c\u5f00\u9500\u5927\u7684\u65f6\u5019\uff0c\u6267\u884c\u4e00\u6b21\u4e0d\u5fc5\u8981\u7684move\u64cd\u4f5c\u548c\u6267\u884c\u4e00\u6b21\u4e0d\u5fc5\u8981\u7684\u62f7\u8d1d\u64cd\u4f5c\u662f\u7c7b\u4f3c\u7684\uff0c\u90fd\u8fdd\u53cd\u4e86 C++98 \u4e2d\u907f\u514d\u503c\u62f7\u8d1d\u8fd9\u4e00\u89c4\u5219\u3002 \u53ea\u6709\u5f53\u53c2\u6570\u603b\u662f\u9700\u8981\u62f7\u8d1d\u7684\u65f6\u5019\u624d\u4f7f\u7528\u4f20\u503c\u7684\u65b9\u5f0f\uff0c\u8003\u8651\u4e00\u79cd\u60c5\u51b5\uff0c\u5047\u8bbe\u5f53\u6211\u4eec\u62f7\u8d1d\u4e00\u4e2a\u53c2\u6570\u5230\u4e00\u4e2a\u5185\u90e8\u7684\u5bb9\u5668\u65f6\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u5728\u6b64\u4e4b\u524d\u4f1a\u5bf9\u8fd9\u4e2a\u53c2\u6570\u8fdb\u884c\u4e00\u4e9b\u5408\u6cd5\u6027\u68c0\u67e5\uff0c\u53ea\u6709\u5f53\u6ee1\u8db3\u6761\u4ef6\u7684\u65f6\u5019\u624d\u4f1a\u8003\u8651\u6dfb\u52a0\u5230\u5bb9\u5668\u4e2d\uff0c\u5426\u5219\u4e0d\u6dfb\u52a0\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u4ee3\u7801\u8868\u793a: 1 2 3 4 5 6 7 8 9 class Widget { public : void addName ( std :: string newName ) { if (( newName . length () >= minLen ) && ( newName . length () <= maxLen )) { names . push_back ( std :: move ( newName )); } } } \u2003 \u2003\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c newName \u5e76\u4e0d\u603b\u4f1a\u62f7\u8d1d\u5230\u5185\u90e8\u5bb9\u5668\u4e2d\uff0c\u5982\u679c\u6dfb\u52a0\u7684 newName \u4e0d\u7b26\u5408\u6761\u4ef6\u5c31\u4f1a\u88ab\u4e22\u5f03\uff0c\u5c31\u4f1a\u9020\u6210 newName \u7684\u6784\u9020\u548c\u6790\u6784\u7684\u5f00\u9500\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5f15\u7528\u4f20\u9012\u5219\u4f1a\u663e\u5f97\u5f00\u9500\u66f4\u5c0f\u3002 \u2003 \u2003\u5373\u4f7f\u5f53\u62f7\u8d1d\u5f00\u9500\u8981\u6bd4\u79fb\u52a8\u5f00\u9500\u4f4e\u7684\u65f6\u5019\uff0c\u67d0\u4e9b\u60c5\u51b5\u4e0b\u4e5f\u4e0d\u9002\u5408\u4f7f\u7528\u503c\u4f20\u9012\u7684\u65b9\u5f0f\uff0c\u8fd9\u662f\u56e0\u4e3a\u51fd\u6570\u62f7\u8d1d\u53c2\u6570\u6709\u4e24\u79cd\u65b9\u5f0f\uff0c\u4e00\u79cd\u662f\u6784\u9020(\u62f7\u8d1d\u6784\u9020\u6216\u79fb\u52a8\u6784\u9020)\uff0c\u53e6\u5916\u4e00\u79cd\u5219\u662f\u8d4b\u503c(\u62f7\u8d1d\u8d4b\u503c\u6216\u79fb\u52a8\u8d4b\u503c)\u3002\u4e0a\u6587\u4e2d\u7684 addName \u4f7f\u7528\u7684\u5c31\u662f\u6784\u9020\u7684\u65b9\u5f0f\uff0c\u5176\u53c2\u6570 newName \u901a\u8fc7\u62f7\u8d1d\u6784\u9020\u521b\u5efa\u4e86\u4e00\u4e2a\u65b0\u7684\u5143\u7d20\u653e\u5728 vector::push_back \u7684\u5c3e\u90e8\u3002\u6587\u7ae0\u7684\u4e00\u5f00\u59cb\u5c31\u5206\u6790\u4e86\u8fd9\u79cd\u60c5\u51b5\uff0c\u65e0\u8bba\u4f20\u9012\u7684\u662f\u5de6\u503c\u8fd8\u662f\u53f3\u503c\u90fd\u4f1a\u5bfc\u81f4\u989d\u5916\u7684\u4e00\u6b21 move \u7684\u5f00\u9500\u3002 \u2003 \u2003\u5f53\u53c2\u6570\u4f20\u9012\u4f7f\u7528\u8d4b\u503c\u7684\u65b9\u5f0f\uff0c\u8fd9\u79cd\u60c5\u51b5\u76f8\u6bd4\u524d\u8005\u8981\u590d\u6742\u7684\u591a\uff0c\u4f8b\u5982\u6709\u4e00\u4e2a\u8868\u793a\u5bc6\u7801\u7684\u7c7b\uff0c\u56e0\u4e3a\u5bc6\u7801\u53ef\u80fd\u4f1a\u88ab\u6539\u53d8\uff0c\u6240\u4ee5\u8fd9\u4e2a\u7c7b\u63d0\u4f9b\u4e86\u4e00\u4e2asetter\u51fd\u6570changeto\uff0c\u8fd9\u4e2a\u51fd\u6570\u901a\u8fc7\u503c\u4f20\u9012\u7684\u7b56\u7565\uff0c\u4e0b\u9762\u662f\u8fd9\u4e2a\u7c7b\u7684\u5b9e\u73b0\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Password { public : explicit Password ( std :: string pwd ) : text ( std :: move ( pwd )) {} void changeTo ( std :: string newPwd ) { text = std :: move ( newPwd ); } .... private : std :: string text ; } std :: string initPwd ( \"Beware the Jabberwock\" ); Password p ( initPwd ); \u2003 \u2003\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0cp.text\u901a\u8fc7\u6784\u9020\u51fd\u6570\u8fdb\u884c\u4e86\u5bc6\u7801\u7684\u521d\u59cb\u5316\uff0c\u901a\u8fc7\u4e4b\u524d\u7684\u5206\u6790\u53ef\u77e5\uff0c\u8fd9\u91cc\u4f7f\u7528\u7684\u662f\u503c\u4f20\u9012\u7684\u65b9\u5f0f\uff0c\u989d\u5916\u591a\u4e86\u4e00\u6b21 std::string \u7684move\u6784\u9020\u7684\u5f00\u9500\uff0c\u5982\u679c\u4f7f\u7528\u5b8c\u7f8e\u8f6c\u53d1\u7684\u8bdd\u53ef\u4ee5\u7701\u53bb\u8fd9\u4e00\u5f00\u9500\u3002\u5bc6\u7801\u4f7f\u7528\u4e00\u6bb5\u65f6\u95f4\u540e\uff0c\u4e3a\u4e86\u5b89\u5168\u9700\u8981\u66f4\u6539\u5bc6\u7801\uff0c\u4e8e\u662f\u4f7f\u7528\u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801\u8fdb\u884c\u66f4\u6539\uff1a 1 2 std :: string newPasswrd = \"test password\" ; p . changeTo ( newPassword ); \u2003 \u2003 changeTo \u4e2d\u4f7f\u7528\u7684\u662f\u8d4b\u503c\u6784\u9020\uff0c\u51fd\u6570\u7684\u53c2\u6570\u4f7f\u7528\u7684\u662f\u503c\u4f20\u9012\u7684\u65b9\u5f0f\uff0c\u8fd9\u79cd\u60c5\u51b5\u5bfc\u81f4\u4e86\u7a0b\u5e8f\u6709\u6bd4\u8f83\u4e25\u91cd\u7684\u6027\u80fd\u95ee\u9898\u3002\u4f20\u9012\u8fdb\u6765\u7684\u53c2\u6570 newPwd \u662f\u4e00\u4e2a\u5de6\u503c\uff0c\u56e0\u6b64\u5f53 newPwd \u88ab\u6784\u9020\u7684\u65f6\u5019\uff0c std::string \u7684\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u4f1a\u88ab\u8c03\u7528\uff0c\u5728\u8fd9\u4e2a\u6784\u9020\u51fd\u6570\u4e2d\u4f1a\u8fdb\u884c\u5185\u5b58\u7684\u5206\u914d\uff0c\u7b49\u6784\u9020\u5b8c\u6210\u540e\u5185\u90e8\u4f1a\u4f7f\u7528 std::move \u8fdb\u884c\u79fb\u52a8\u8d4b\u503c\u6784\u9020\uff0c\u8fd9\u4f1a\u5bfc\u81f4p.text\u539f\u6765\u6307\u5411\u7684\u5185\u5b58\u88ab\u91ca\u653e\u3002\u6574\u4e2a\u66f4\u6539\u5bc6\u7801\u7684\u8fc7\u7a0b\u4e2d\u6d89\u53ca\u4e86\u4e24\u6b21\u5185\u5b58\u7684\u5206\u914d\u6216\u91ca\u653e\u3002\u4f46\u662f\u5982\u679c\u4f7f\u7528\u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801\u5c06\u6709\u53ef\u80fd\u907f\u514d\u4e00\u6b21\u5185\u5b58\u7684\u5206\u914d\u6216\u91ca\u653e\u3002 1 2 3 4 5 6 7 8 9 class Password { public : ..... void changeTo ( const std :: string & newPwd ) { text = newPwd ; } private : std :: string text ; } \u2003 \u2003\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\u4f7f\u7528\u7684\u662f\u8d4b\u503c\u6784\u9020\uff0c\u56e0\u6b64\u5f53 p.text \u7684\u5b57\u7b26\u4e32\u957f\u5ea6\u5927\u4e8e newPwd \u7684\u957f\u5ea6\u65f6\u4f1a\u590d\u7528\u5df2\u7ecf\u5206\u914d\u7684\u5185\u5b58\uff0c\u5f00\u9500\u8981\u6bd4\u503c\u4f20\u9012\u7684\u65b9\u5f0f\u8981\u5c0f\u3002\u4f46\u662f\u5982\u679c p.text \u7684\u5b57\u7b26\u4e32\u957f\u5ea6\u5c0f\u4e8e newPwd \u7684\u957f\u5ea6\uff0c\u90a3\u4e48\u989d\u5916\u7684\u5185\u5b58\u5206\u914d\u548c\u91ca\u653e\u7684\u5f00\u9500\u662f\u5c11\u4e0d\u4e86\u7684\u548c\u503c\u4f20\u9012\u7684\u65b9\u5f0f\u4e00\u6837\u3002\u4e0a\u6587\u7684\u8fd9\u4e9b\u5206\u6790\u6ca1\u529e\u6cd5\u4e00\u6982\u800c\u8bba\uff0c\u53ea\u9002\u7528\u4e8e\u503c\u662f\u4fdd\u5b58\u5728\u5806\u5185\u5b58\u4e2d\u7684\uff0c\u9700\u8981\u52a8\u6001\u5206\u914d\u5185\u5b58\u7684\u7c7b\u578b\uff0c\u4e0d\u662f\u6240\u6709\u7684\u7c7b\u578b\u90fd\u9002\u5408\u4e0a\u6587\u7684\u5206\u6790\uff0c std::string \u548c std::vector \u662f\u786e\u5b9a\u9002\u7528\u7684\u3002 \u2003 \u2003\u4e0a\u6587\u5bf9\u8d4b\u503c\u6784\u9020\u7684\u5206\u6790\u53ea\u9002\u7528\u4e8e\u53c2\u6570\u4f20\u9012\u7684\u662f\u5de6\u503c\u7684\u60c5\u51b5\uff0c\u5982\u679c\u4f20\u9012\u7684\u662f\u53f3\u503c\uff0c\u90a3\u4e48\u5f00\u9500\u8fd8\u662f\u5f88\u4f4e\u7684\uff0c\u56e0\u4e3a\u4e0d\u9700\u8981\u8fdb\u884c\u62f7\u8d1d\u6784\u9020\u4e86\uff0c\u6ca1\u6709\u62f7\u8d1d\u6784\u9020\u65f6\u7684\u5185\u5b58\u5206\u914d\u5f00\u9500\u4e86\u3002 \u2003 \u2003\u603b\u800c\u8a00\u4e4b\uff0c\u5bf9\u4e8e\u4e0a\u6587\u7684\u8d4b\u503c\u6784\u9020\u7684\u5206\u6790\uff0c\u8981\u8003\u8651\u4f20\u9012\u7684\u662f\u5de6\u503c\u8fd8\u662f\u53f3\u503c\uff0c\u8003\u8651\u8d4b\u503c\u7684\u7c7b\u578b\u662f\u4ec0\u4e48\uff0c\u662f\u5426\u6709\u52a8\u6001\u5185\u5b58\u5206\u914d\uff0c\u751a\u81f3\u8fd8\u8981\u8003\u8651\u8981\u8d4b\u503c\u7684\u7c7b\u578b\u7684\u5b9e\u73b0\u662f\u4ec0\u4e48\u6837\u5b50\u7684\uff0c\u4f8b\u5982: std::string \uff0c\u5982\u679c\u5b83\u4f7f\u7528\u4e86SSO\u4f18\u5316\u8fdb\u884c\u5b9e\u73b0\uff0c\u90a3\u4e48\u8d4b\u503c\u7684\u64cd\u4f5c\u4f1a\u5c06\u8981\u8d4b\u503c\u7684\u5185\u5bb9\u653e\u5230 SSO \u7684 buffer \u4e2d\uff0c\u90a3\u4e48\u60c5\u51b5\u53c8\u4e0d\u4e00\u6837\u4e86\u3002\u56e0\u6b64\u6211\u8bf4\u4f7f\u7528\u8d4b\u503c\u7684\u65b9\u5f0f\u8fdb\u884c\u53c2\u6570\u4f20\u9012\u8fd9\u79cd\u60c5\u51b5\u5206\u6790\u8d77\u6765\u5f88\u590d\u6742\u3002\u56e0\u6b64\u901a\u5e38\u60c5\u51b5\u6700\u5b9e\u9645\u7684\u505a\u6cd5\u662f\u91c7\u7528\"\u6709\u7f6a\u63a8\u5b9a\"\u7684\u7b56\u7565\uff0c\u4e5f\u5c31\u662f\u4f7f\u7528\u91cd\u8f7d\u6216\u8005\u662f\u5f15\u7528\u7684\u65b9\u5f0f\u8fdb\u884c\u53c2\u6570\u4f20\u9012\uff0c\u9664\u975e\u5728\u76ee\u6807\u7c7b\u578b\u7684\u60c5\u51b5\u4e0b\u503c\u4f20\u9012\u88ab\u8868\u660e\u5176\u5f00\u9500\u8981\u6bd4\u524d\u8005\u66f4\u9ad8\u6548\u3002 \u2003 \u2003\u73b0\u5982\u4eca\uff0c\u8f6f\u4ef6\u8981\u5c3d\u53ef\u80fd\u7684\u5feb\uff0c\u6240\u4ee5\u503c\u4f20\u9012\u7684\u65b9\u5f0f\u53ef\u80fd\u4e0d\u518d\u662f\u4e00\u4e2a\u53ef\u884c\u7684\u7b56\u7565\uff0c\u56e0\u4e3a\u907f\u514d\u4e00\u6b21\u5ec9\u4ef7\u7684 move \u5f00\u9500\u4e5f\u662f\u5f88\u91cd\u8981\u7684\uff0c\u56e0\u4e3a\u6211\u4eec\u6ca1\u529e\u6cd5\u77e5\u9053\u4e00\u4e2a\u64cd\u4f5c\u4f1a\u6709\u591a\u5c11\u6b21\u8fd9\u6837\u7684 move \u64cd\u4f5c\uff0c\u4f8b\u5982 Widget::addName \u901a\u8fc7\u503c\u4f20\u9012\u9020\u6210\u4e86\u4e00\u6b21\u989d\u5916\u7684 move \u64cd\u4f5c\uff0c\u4f46\u662f\u8fd9\u4e2a\u51fd\u6570\u5185\u90e8\u53c8\u8c03\u7528\u4e86 Widget::validateName \uff0c\u8fd9\u4e2a\u51fd\u6570\u4e5f\u662f\u503c\u4f20\u9012\u7684\u65b9\u5f0f\uff0c\u8fd9\u5c31\u53c8\u9020\u6210\u4e86\u4e00\u6b21\u989d\u5916\u7684 move \u5f00\u9500\uff0c validateName \u5185\u90e8\u5982\u679c\u518d\u8c03\u7528\u5176\u4ed6\u7684\u51fd\u6570\uff0c\u5e76\u4e14\u8fd9\u4e2a\u51fd\u6570\u540c\u6837\u662f\u503c\u4f20\u9012\u7684\u65b9\u5f0f\u5462?\uff0c\u8fd9\u5c31\u9020\u6210\u4e86\u7d2f\u52a0\u6548\u5e94\uff0c\u5982\u679c\u4f7f\u7528 \u5f15\u7528\u4f20\u9012\u7684\u8bdd\u5c31\u4e0d\u4f1a\u6709\u8fd9\u6837\u7684\u7d2f\u52a0\u6548\u5e94\u4e86\u3002 \u2003 \u2003\u5728\u672c\u6587\u7684\u6700\u540e\u6211\u4eec\u6765\u8ba8\u8bba\u4e00\u4e2a\u4e0e\u6027\u80fd\u65e0\u5173\u7684\u8bdd\u9898\uff0c\u4f46\u662f\u8fd9\u4e2a\u8bdd\u9898\u4ecd\u7136\u503c\u5f97\u6211\u4eec\u8bb0\u4f4f\u3002\u503c\u4f20\u9012\u4e0d\u50cf\u5f15\u7528\u4f20\u9012\uff0c\u5b83\u5bb9\u6613\u53d7\u5230\u5207\u5272\u95ee\u9898\u7684\u5f71\u54cd\u3002\u5982\u679c\u4f60\u6709\u4e00\u4e2a\u51fd\u6570\u88ab\u8bbe\u8ba1\u6210\u63a5\u6536\u4e00\u4e2a\u57fa\u7c7b\u6216\u662f\u4efb\u4f55\u4e00\u4e2a\u6d3e\u751f\u7c7b\uff0c\u4f60\u4e0d\u5e94\u8be5\u5c06\u5176\u58f0\u660e\u4e3a\u503c\u4f20\u9012\u7684\u65b9\u5f0f\uff0c\u56e0\u4e3a\u8fd9\u4f1a\u9020\u6210\u7c7b\u578b\u5207\u5272\u7684\u95ee\u9898\u3002\u4f8b\u5982\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50: 1 2 3 4 5 class Widget { ... }; class SpecialWidget : public Widget { ... }; void processWidget ( Widget w ); SpecialWidget sw ; processWidget ( sw ); // \u5bfc\u81f4\u4e86\u7c7b\u578b\u5207\u5272\u7684\u95ee\u9898\uff0cprocessWidget\u770b\u5230\u7684\u662fWidget\u7c7b\u578b","title":"Item41 Consider pass by value for copyable parameters that are cheap to move and always copied."},{"location":"%E5%8D%9A%E5%AE%A2/doc/cpp/Effective-Model-Cpp/item42/","text":"Item42 Consider emplacement instead of insertion \u2003 \u2003\u5982\u679c\u4f60\u6709\u4e00\u4e2a\u5bb9\u5668\uff0c\u5b58\u653e\u7684\u662f std::string \u7c7b\u578b\uff0c\u5f53\u4f60\u901a\u8fc7\u63d2\u5165\u51fd\u6570(\u5982: insert \u3001 push_front \u3001 push_back \u6216\u8005\u662f std::forward_list \u7684 insert_after )\u4f20\u9012\u4e00\u4e2a std::string \u7c7b\u578b\u7684\u5143\u7d20\u5230\u5bb9\u5668\u4e2d\uff0c\u903b\u8f91\u4e0a\u5bb9\u5668\u4e2d\u5c31\u4f1a\u6709\u8fd9\u4e2a\u5143\u7d20\u4e86\u3002\u5c3d\u7ba1\u8fd9\u53ef\u80fd\u53ea\u662f\u903b\u8f91\u4e0a\u7684\uff0c\u4f46\u5e76\u4e0d\u603b\u662f\u771f\u7684\uff0c\u8003\u8651\u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801\uff1a 1 2 std :: vector < std :: string > vs ; vs . push_back ( \"xyzzy\" ); \u2003 \u2003\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u5305\u542b\u4e86\u4e00\u4e2a\u5b58\u653e std::string \u7c7b\u578b\u7684\u5bb9\u5668\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u63d2\u5165\u7684\u5374\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u5e38\u91cf\uff0c\u5e76\u4e0d\u662fstd::string\u7c7b\u578b\u7684\u5b57\u7b26\u4e32\uff0c\u4e5f\u5c31\u662f\u610f\u5473\u7740\u63d2\u5165\u7684\u5e76\u4e0d\u662f\u5bb9\u5668\u671f\u671b\u7684\u7c7b\u578b\u3002 std::vector \u7684 push_back \u51fd\u6570\u5bf9\u4e8e\u5de6\u503c\u548c\u53f3\u503c\u90fd\u8fdb\u884c\u4e86\u91cd\u8f7d\uff0c\u4ee3\u7801\u5982\u4e0b: 1 2 3 4 5 6 7 template < class T , class Allocator = allocator < T >> class vector { public : void push_back ( const T & x ); void push_back ( T && x ); }; \u2003 \u2003\u5f53\u63d2\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32\u5e38\u91cf\u7684\u65f6\u5019\uff0c\u7f16\u8bd1\u5668\u5c31\u4f1a\u53bb\u5bfb\u627e\u5408\u9002\u7684\u91cd\u8f7d\u51fd\u6570\uff0c\u4f46\u662f push_back \u5e76\u6ca1\u6709\u5bf9\u5b57\u7b26\u4e32\u5e38\u91cf\u7684\u91cd\u8f7d\uff0c\u56e0\u6b64\u7f16\u8bd1\u5668\u4f1a\u521b\u5efa\u4e00\u4e2a\u4e34\u65f6\u7684 std::string \u53d8\u91cf\uff0c\u5e76\u5c06\u4f20\u5165\u7684\u5b57\u7b26\u4e32\u5e38\u91cf\u5bf9\u5176\u8fdb\u884c\u6784\u9020\uff0c\u6700\u540e\u5c06\u521b\u5efa\u7684\u4e34\u65f6\u53d8\u91cf\u4f20\u5165\u5230 push_back \u4e2d\uff0c\u6362\u53e5\u8bdd\u8bf4\u7b49\u540c\u4e0e\u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801\uff1a 1 vs . push_back ( std :: string ( \"xyzzy\" )); \u2003 \u2003\u4e0a\u9762\u7684\u4ee3\u7801\u6b63\u5e38\u7f16\u8bd1\u548c\u8fd0\u884c\uff0c\u6bcf\u4e2a\u4eba\u90fd\u5f88\u9ad8\u5174\uff0c\u9664\u4e86\u90a3\u4e9b\u5bf9\u6027\u80fd\u8981\u6c42\u82db\u523b\u7684\u4eba\uff0c\u56e0\u4e3a\u8fd9\u6bb5\u4ee3\u7801\u5b58\u5728\u6027\u80fd\u95ee\u9898\uff0c\u5e76\u4e0d\u662f\u5f88\u9ad8\u6548\u3002\u4e3a\u4e86\u63d2\u5165\u5b57\u7b26\u4e32\u5e38\u91cf\u800c\u6784\u9020\u4e00\u4e2a std::string \u7684\u4e34\u65f6\u53d8\u91cf\u8fd9\u662f\u6ca1\u6709\u95ee\u9898\u7684\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u5e76\u4e0d\u4ec5\u4ec5\u662f\u8fd9\u4e9b\uff0c\u7f16\u8bd1\u5668\u8fd8\u4f1a\u5bf9\u8fd9\u4e2a\u4e34\u65f6\u53d8\u91cf\u8fdb\u884c\u62f7\u8d1d\uff0c\u62f7\u8d1d\u5b8c\u6210\u540e\uff0c\u8fd9\u4e2a\u4e34\u65f6\u53d8\u91cf\u5c31\u4f1a\u6790\u6784\u4e86\u3002\u6574\u4e2a\u8fc7\u7a0b\u5982\u4e0b: \u4e00\u4e2a\u4e34\u65f6\u7684 std::string \u5bf9\u8c61\u901a\u8fc7\u5b57\u7b26\u4e32\u5e38\u91cf \"xyzzy\" \u8fdb\u884c\u6784\u9020\uff0c\u8fd9\u4e2a\u5bf9\u8c61\u6ca1\u6709\u540d\u5b57\uff0c\u6211\u4eec\u5360\u4e14\u79f0\u4e3a temp \u5bf9\u8c61\uff0c\u8fd9\u4e2a temp \u5bf9\u8c61\u5c31\u662f\u901a\u8fc7 std::string \u7684\u6784\u9020\u51fd\u6570\u8fdb\u884c\u6784\u9020\uff0c\u8fd9\u4e2a temp \u5bf9\u8c61\u662f\u4e00\u4e2a\u5de6\u503c\u3002 temp \u5bf9\u8c61\u4f20\u9012\u7ed9 push_back \u7684\u5de6\u503c\u91cd\u8f7d\u7248\u672c\uff0c\u8fd9\u4e2a\u51fd\u6570\u7684\u53c2\u6570\u662f\u4e00\u4e2a\u5de6\u503c\u5f15\u7528x\uff0c\u5728 push_back \u7684\u51fd\u6570\u5185\u90e8\u4f1a\u5bf9x\u6240\u5f15\u7528\u7684\u5bf9\u8c61\u8fdb\u884c\u62f7\u8d1d\uff0c\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5bf9\u8c61\u653e\u5165\u5230\u5bb9\u5668\u4e2d\u3002(\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u4e0d\u8fdb\u884c move \uff0c\u8fd9\u662f\u56e0\u4e3a\u53c2\u6570x\u662f\u5de6\u503c\u5f15\u7528\uff0c\u5982\u679c\u8fdb\u884c move \u4f1a\u5bfc\u81f4\u5916\u90e8\u4f20\u5165\u7684\u5bf9\u8c61\u6307\u5411\u7a7a\u7684\u5185\u5b58\u4f4d\u7f6e\u4ea7\u751f\u672a\u5b9a\u4e49\u7684\u884c\u4e3a) push_back \u8fd4\u56de\u540e\uff0c temp \u5bf9\u8c61\u6790\u6784\uff0c\u7136\u540e\u8c03\u7528 std::string \u7684\u6790\u6784\u51fd\u6570\u3002 \u200b\u2003 \u2003\u4ece\u4e0a\u9762\u5206\u6790\u7684\u8fc7\u7a0b\u6765\u770b\u5982\u679c\u4f20\u5165\u7684\u5b57\u7b26\u4e32\u5e38\u91cf\u6784\u9020\u7684\u4e34\u65f6 temp \u5bf9\u8c61\u80fd\u5728\u4e0a\u9762\u7684\u7b2c\u4e8c\u6b65\u4e2d\u76f4\u63a5\u653e\u5230\u5bb9\u5668\u4e2d\uff0c\u90a3\u4e48\u5c31\u907f\u514d\u4e86\u62f7\u8d1d\u6784\u9020\u548c\u6790\u6784\u7684\u5f00\u9500\u3002\u8981\u60f3\u8fbe\u5230\u8fd9\u6837\u7684\u6548\u679c\u5c31\u4e0d\u80fd\u4f7f\u7528 push_back \u51fd\u6570\uff0c\u8fd9\u4e2a\u51fd\u6570\u662f\u5b58\u5728\u95ee\u9898\u7684\uff0c\u5e94\u8be5\u4f7f\u7528 emplace_back \u3002\u8fd9\u4e2a\u51fd\u6570\u7684\u884c\u4e3a\u548c\u6211\u4eec\u9884\u671f\u662f\u4e00\u6837\u7684\uff0c\u65e0\u8bba\u4f20\u9012\u4ec0\u4e48\u6837\u7684\u53c2\u6570\u90fd\u4f1a\u76f4\u63a5\u6784\u9020\u6210 std::string \u76f4\u63a5\u4f20\u9012\u5230\u5bb9\u5668\u4e2d\uff0c\u6ca1\u6709\u4e34\u65f6\u5bf9\u8c61\u7684\u53c2\u4e0e\u3002 \u2003 \u2003 \u200b emplace_back \u4e4b\u6240\u4ee5\u80fd\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u5f88\u91cd\u8981\u7684\u539f\u56e0\u662f emplace_back \u53ef\u4ee5\u8bc6\u522b\u51fa\u4f20\u5165\u7684\u5bf9\u8c61\u5230\u5e95\u662f\u4e00\u4e2a\u4e34\u65f6\u5bf9\u8c61(\u53f3\u503c)\uff0c\u8fd8\u662f\u4e00\u4e2a\u5de6\u503c\u5bf9\u8c61\uff0c\u5982\u679c\u662f\u53f3\u503c\u5c31\u53ef\u4ee5\u76f4\u63a5\u5728\u5bb9\u5668\u5185\u90e8\u8fdb\u884c\u6784\u9020\u3002\u8fd9\u4e00\u5207\u90fd\u8981\u5f52\u529f\u4e8e\u5b8c\u7f8e\u8f6c\u53d1\uff0c\u5c3d\u7ba1\u5728 Item30 \u4e2d\u63d0\u5230\u8fc7\u5173\u4e8e\u5b8c\u7f8e\u8f6c\u53d1\u7684\u4e00\u4e9b\u5931\u8d25\u7684case\u4f46\u662f\u8fd9\u4e0d\u59a8\u788d\u6211\u4eec\u4e0b\u9762\u7684\u8ba8\u8bba\uff0c\u4e0b\u9762\u662f emplace_back \u7684\u58f0\u660e\u3002 1 2 template < class ... Args > void emplace_back ( Args && ... args ); \u2003 \u2003\u901a\u8fc7\u4e0a\u9762\u7684\u4ee3\u7801\u53ef\u89c1 emplace_back \u8fd8\u5e26\u6709\u4e00\u4e2a\u53ef\u53d8\u53c2\u6570\uff0c\u53ef\u4ee5\u63a5\u53d7\u4efb\u610f\u53c2\u6570\uff0c\u901a\u8fc7\u5b8c\u7f8e\u8f6c\u53d1\u4f1a\u5c06\u4f20\u5165\u7684\u53c2\u6570\u653e\u5165\u5230\u5bb9\u5668\u4e2d\u76f4\u63a5\u6784\u9020\u51fa\u5143\u7d20\u3002\u4f8b\u5982\u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801: 1 vs . emplace_back ( 50 , 'x' ); \u2003 \u200350\u548c x \u4f1a\u88ab\u4f20\u9012\u7ed9 std::string \u7684\u6784\u9020\u51fd\u6570\uff0c\u7528\u6765\u5728\u5bb9\u5668\u4e2d\u6784\u9020\u4e00\u4e2a std::string \u5bf9\u8c61\uff0c\u8be5\u5bf9\u8c61\u5305\u542b\u4e8650\u4e2ax\u5b57\u7b26\u3002\u901a\u8fc7 emplace_back \u7684\u53ef\u53d8\u53c2\u6570\u4f7f\u5f97 emplace_back \u53ef\u4ee5\u652f\u6301 std::string \u6240\u6709\u7684\u6784\u9020\u51fd\u6570\u3002 \u2003 \u2003 emplace_back \u5bf9\u4e8e\u652f\u6301 push_back \u7684\u6807\u51c6\u5bb9\u5668\u6765\u8bf4\u90fd\u662f\u53ef\u7528\u7684\uff0c\u5bf9\u4e8e\u652f\u6301 push_font \u7684\u5bb9\u5668 C++11 \u63d0\u4f9b\u4e86 emplace_front \uff0c\u5bf9\u4e8e\u652f\u6301 insert \u51fd\u6570\u7684\u6807\u51c6\u5bb9\u5668\u6765\u8bf4(\u9664\u4e86 std::forward_list \u548c std::array )\u63d0\u4f9b\u4e86 emplace \uff0c\u5bf9\u4e8e\u5173\u8054\u5bb9\u5668\u5219\u63d0\u4f9b\u4e86 emplace_hint \u66ff\u6362\u5176 insert \u51fd\u6570\uff0c\u5bf9\u4e8estd::forward_list\u4f7f\u7528 emplace_after \u4ee3\u66ff\u5176 insert_after \u3002 \u2003 \u2003 emplace \u7cfb\u5217\u51fd\u6570\u80fd\u591f\u66ff\u6362\u4f20\u7edf\u7684\u63d2\u5165\u51fd\u6570\uff0c\u6700\u91cd\u8981\u7684\u539f\u56e0\u662f\u56e0\u4e3a\uff0c emplace \u7cfb\u5217\u51fd\u6570\u62e5\u6709\u66f4\u7075\u6d3b\u7684\u63a5\u53e3\uff0c\u4f20\u7edf\u7684\u63d2\u5165\u51fd\u6570\u662f\u62ff\u5230\u5bf9\u8c61\u8fdb\u884c\u63d2\u5165\uff0c\u800c emplace \u7cfb\u5217\u51fd\u6570\u53ef\u4ee5\u62ff\u7740\u6784\u9020\u51fd\u6570\u8fdb\u884c\u5bf9\u8c61\u7684\u6784\u9020\uff0c\u7136\u540e\u63d2\u5165\u5230\u5bb9\u5668\u4e2d\u3002\u4e24\u8005\u7684\u4e0d\u540c\u5c31\u662f\u907f\u514d\u4e86\u4e34\u65f6\u5bf9\u8c61\u7684\u6784\u9020\u548c\u6790\u6784\u5f00\u9500\u3002\u5982\u679c\u76f4\u63a5\u63d2\u5165\u7684\u5c31\u662f\u76ee\u6807\u7c7b\u578b\uff0c\u4e5f\u5c31\u6ca1\u6709\u4e34\u65f6\u5bf9\u8c61\u7684\u4ea7\u751f\uff0c\u90a3\u4e48 emplace \u7cfb\u5217\u51fd\u6570\u548c\u4f20\u7edf\u7684\u63d2\u5165\u51fd\u6570\u672c\u8d28\u4e0a\u5c31\u662f\u4e00\u81f4\u7684\u4e86\u3002 1 2 vs . push_back ( queenOfDisco ); vs . emplace_back ( queenOfDisco ); \u2003 \u2003\u7efc\u5408\u6765\u8bf4\uff0c\u4f20\u7edf\u7684\u63d2\u5165\u51fd\u6570\u80fd\u505a\u7684\uff0c emplace \u7cfb\u5217\u51fd\u6570\u90fd\u53ef\u4ee5\u505a\uff0c\u5e76\u4e14\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u66f4\u9ad8\u6548\u3002\u7406\u8bba\u4e0a emplace \u53ef\u4ee5\u5b8c\u5168\u66ff\u4ee3\u4f20\u7edf\u7684\u63d2\u5165\u51fd\u6570\uff0c\u90a3\u4e48\u4e3a\u4ec0\u4e48\u6211\u4eec\u4e0d\u603b\u662f\u8fd9\u6837\u7528\u5462? \u7406\u8bba\u4e0a\u8fd9\u662f\u5bf9\u7684\uff0c\u4e24\u8005\u5728\u884c\u4e3a\u4e0a\u7684\u8868\u73b0\u4e00\u81f4\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u5e76\u4e0d\u662f\u8fd9\u6837\u7684\uff0c\u76ee\u524d\u6807\u51c6\u5e93\u5728\u5b9e\u73b0\u7684\u65f6\u5019\u5728\u67d0\u4e9b\u65b9\u9762\u548c\u6211\u4eec\u7684\u9884\u671f\u8fd8\u4e0d\u592a\u4e00\u6837\uff0c\u867d\u7136\u5927\u591a\u6570\u573a\u666f\u4e0b emplace \u7cfb\u5217\u51fd\u6570\u7684\u786e\u662f\u4f18\u4e8e\u4f20\u7edf\u7684\u63d2\u5165\u51fd\u6570\uff0c\u4f46\u662f\u53ef\u60b2\u7684\u662f\uff0c\u5b58\u5728\u67d0\u4e9b\u573a\u666f\u4e0b\u4f20\u7edf\u7684\u63d2\u5165\u51fd\u6570\u8981\u6bd4 emplace \u5feb\u3002\u8fd9\u6837\u7684\u573a\u666f\u53c8\u4e0d\u592a\u597d\u5f52\u7c7b\uff0c\u56e0\u4e3a\u8fd9\u53d6\u51b3\u4e8e\u4f20\u9012\u7684\u53c2\u6570\u7c7b\u578b\u3001\u4f7f\u7528\u7684\u5bb9\u5668\u3001\u63d2\u5165\u5bb9\u5668\u7684\u4f4d\u7f6e\u3001\u5bb9\u5668\u4e2d\u4fdd\u5b58\u7684\u5bf9\u8c61\u5176\u6784\u9020\u51fd\u6570\u7684\u5f02\u5e38\u5b89\u5168\u6027\u3001\u5bb9\u5668\u662f\u5426\u5141\u8bb8\u63d2\u5165\u91cd\u590d\u7684\u503c\u3001\u8981\u63d2\u5165\u7684\u5143\u7d20\u662f\u5426\u5df2\u7ecf\u5728\u5bb9\u5668\u4e2d\u4e86\u7b49\u7b49\u3002\u6309\u7167\u901a\u5e38\u7684\u8c03\u4f18\u5efa\u8bae\u5e94\u8be5\u5bf9\u4e24\u8005\u8fdb\u884c\u538b\u529b\u6d4b\u8bd5\u3002 \u2003 \u2003\u8fd9\u5f53\u7136\u4e0d\u662f\u5f88\u4ee4\u4eba\u6ee1\u610f\uff0c\u6240\u4ee5\u4f60\u4f1a\u5f88\u9ad8\u5174\u5730\u5f97\u77e5\uff0c\u6709\u4e00\u4e2a\u53ef\u4ee5\u5e2e\u52a9\u4f60\u8bc6\u522b\u4f55\u79cd\u65b9\u5f0f\u63d2\u5165\u662f\u9ad8\u6548\u7684\u65b9\u6cd5\u3002 \u5982\u679c\u4ee5\u4e0b\u6240\u6709\u60c5\u51b5\u90fd\u662f\u771f\u5b9e\u7684\uff0c\u5219 emplaces \u51e0\u4e4e\u80af\u5b9a\u4f1a\u6bd4\u4f20\u7edf\u7684\u63d2\u5165\u8981\u9ad8\u6548\uff1a \u8981\u63d2\u5165\u7684\u503c\u662f\u901a\u8fc7\u6784\u9020\u51fd\u6570\u63d2\u5165\u5230\u5bb9\u5668\u4e2d\u7684\uff0c\u4e0d\u662f\u901a\u8fc7\u8d4b\u503c\u3002 \u4e0a\u6587\u4e2d\u63d0\u5230\u7684\u5b57\u7b26\u4e32\u5e38\u91cf\u5c31\u662f\u8fd9\u79cd\u60c5\u51b5\uff0c\u4f20\u5165\u7684\u503c\u9700\u8981\u5148\u6784\u9020\u4e3a\u4e00\u4e2a\u4e34\u65f6\u7684\u5bf9\u8c61\uff0c\u7136\u540e\u518d\u4fdd\u5b58\u5230\u5bb9\u5668\u4e2d\uff0c\u6b64\u65f6 emplace \u7cfb\u5217\u51fd\u6570\u5c31\u53d1\u6325\u4e86\u5b83\u7684\u4f5c\u7528\uff0c\u5c06\u8fd9\u4e2a\u4e34\u65f6\u5bf9\u8c61\u76f4\u63a5 move \u5230\u5bb9\u5668\u4e2d\uff0c\u4f46\u662f\u5982\u679c\u8981\u63d2\u5165\u7684\u4f4d\u7f6e\u5df2\u7ecf\u6709\u5143\u7d20\u5b58\u5728\u7684\u65f6\u5019\uff0c\u60c5\u51b5\u53c8\u4e0d\u4e00\u6837\u4e86\u3002\u8003\u8651\u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801: 1 vs . emplace ( vs . begin (), \"xyzzy\" ); \u2003 \u2003\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u5f88\u5c11\u6709\u7f16\u8bd1\u5668\u4f1a\u5c06\u4e0a\u9762\u7684\u4ee3\u7801\u5b9e\u73b0\u4e3a\u6784\u9020\u4e00\u4e2a std::string \u5bf9\u8c61\u7136\u540e\u653e\u5230 vs[0] \u4f4d\u7f6e\u4e0a\uff0c\u5927\u591a\u6570\u7f16\u8bd1\u5668\u7684\u5b9e\u73b0\u662f\u8fdb\u884c\u79fb\u52a8\u8d4b\u503c\uff0c\u5c06\u4f20\u5165\u7684\u53c2\u6570\u76f4\u63a5\u79fb\u52a8\u8d4b\u503c\u5230\u76ee\u6807\u4f4d\u7f6e\u3002\u4f46\u662f\u79fb\u52a8\u8d4b\u503c\u9700\u8981\u4f20\u5165\u7684\u662f\u4e00\u4e2a\u5bf9\u8c61\uff0c\u8fd9\u5c31\u9700\u8981\u6784\u5efa\u4e00\u4e2a\u4e34\u65f6\u5bf9\u8c61\uff0c\u7136\u540e\u79fb\u52a8\u8fc7\u53bb\uff0c\u7b49\u64cd\u4f5c\u5b8c\u6210\u540e\u518d\u5c06\u8fd9\u4e2a\u5bf9\u8c61 \u6790\u6784\u3002\u4e0a\u6587\u4e2d\u5176\u5b9e\u6211\u4eec\u5df2\u7ecf\u5206\u6790\u4e86 emplace \u7cfb\u5217\u51fd\u6570\u7684\u4f18\u52bf\u5728\u4e8e\u7701\u53bb\u4e34\u65f6\u5bf9\u8c61\u7684\u6784\u9020\u548c\u6790\u6784\u6210\u672c\uff0c\u5f88\u4e0d\u5e78\u5728\u79fb\u52a8\u8d4b\u503c\u7684\u8fd9\u79cd\u573a\u666f\u4e0b\u8fd9\u4e9b\u5f00\u9500\u5e76\u6ca1\u6709\u88ab\u7701\u53bb\u3002 \u4f20\u9012\u7684\u53c2\u6570\u7c7b\u578b\u548c\u5bb9\u5668\u4e2d\u7684\u7c7b\u578b\u4e0d\u540c \u3002 emplace \u7cfb\u5217\u51fd\u6570\u7684\u4f18\u70b9\u5c31\u662f\u5728\u4e8e\u907f\u514d\u4e34\u65f6\u5bf9\u8c61\u7684\u6784\u9020\u548c\u6790\u6784\uff0c\u5982\u679c\u4f20\u9012\u7684\u53c2\u6570\u7c7b\u578b\u548c\u5bb9\u5668\u4e2d\u7684\u7c7b\u578b\u76f8\u540c\u5c31\u4e0d\u4f1a\u4ea7\u751f\u4e34\u65f6\u5bf9\u8c61\u4e86\uff0c\u90a3\u4e48\u5f88\u81ea\u7136 emplace \u7cfb\u5217\u51fd\u6570\u7684\u4f18\u52bf\u4e5f\u5c31\u65e0\u6cd5\u4f53\u73b0\u4e86\u3002 \u5bb9\u5668\u4e0d\u592a\u53ef\u80fd\u63d2\u5165\u91cd\u590d\u7684\u503c \u3002\u5bb9\u5668\u5141\u8bb8\u6709\u91cd\u590d\u7684\u503c\u4f46\u662f\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u63d2\u5165\u7684\u503c\u90fd\u662f\u552f\u4e00\u7684\uff0c\u8fd9\u662f\u56e0\u4e3a emplace \u7cfb\u5217\u51fd\u6570\u9996\u5148\u4f1a\u5c06\u4f20\u5165\u7684\u503c\u6784\u9020\u4e3a\u4e00\u4e2a\u65b0\u7684\u5143\u7d20\uff0c\u7136\u540e\u62ff\u7740\u8fd9\u4e2a\u65b0\u5143\u7d20\u7684\u503c\u548c\u5bb9\u5668\u4e2d\u5df2\u7ecf\u5b58\u5728\u7684\u5143\u7d20\u8fdb\u884c\u6bd4\u8f83\uff0c\u5982\u679c\u4e0d\u5728\u5bb9\u5668\u4e2d\u90a3\u4e48\u5c31\u6dfb\u52a0\u8fdb\u53bb\uff0c\u5426\u5219\u5c31\u4e22\u5f03\u521a\u521b\u5efa\u7684\u8fd9\u4e2a\u503c\uff0c\u8fd9\u5c31\u610f\u5473\u7740\u591a\u4e86\u4e00\u6b21\u989d\u5916\u7684\u6784\u9020\u548c\u6790\u6784\u6210\u672c\u5f00\u9500\u3002 \u4e0b\u9762\u8fd9\u4e9b\u8c03\u7528\u6ee1\u8db3\u4e0a\u8ff0\u4e09\u4e2a\u6761\u4ef6\uff0c\u56e0\u6b64\u4f7f\u7528 emplace \u7cfb\u5217\u51fd\u6570\u8981\u6bd4\u4f7f\u7528 push_back \u5feb\u3002 1 2 vs . emplace_back ( \"xyzzy\" ); vs . emplace_back ( 50. 'x' ); \u2003 \u2003\u9664\u4e86\u4e0a\u9762\u7684\u8fd9\u4e9b\u8003\u8651\u5916\uff0c\u51b3\u5b9a\u662f\u5426\u4f7f\u7528 emplace \u7cfb\u5217\u51fd\u6570\uff0c\u8fd8\u6709\u53e6\u5916\u4e24\u4e2a\u56e0\u7d20\u503c\u7684\u8003\u8651\u3002\u7b2c\u4e00\u4e2a\u56e0\u7d20\u5c31\u662f\u8d44\u6e90\u7ba1\u7406\uff0c\u5047\u8bbe\u4f60\u6709\u8fd9\u6837\u7684\u4e00\u4e2a\u5bb9\u5668\u5176\u5143\u7d20\u7c7b\u578b\u4e3a std::shared_ptr<Widget> s \u3002 1 std :: list < std :: shared_ptr < Widget >> ptrs ; \u2003 \u2003\u5f53\u4f60\u60f3\u5f80\u8fd9\u4e2a\u5bb9\u5668\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u65b0\u7684 std::shared_ptr<Widget> \u5143\u7d20\uff0c\u5e76\u4e14\u7ed9\u8fd9\u4e2a\u5143\u7d20\u6307\u5b9a\u81ea\u5b9a\u4e49\u5220\u9664\u5668( Item19 )\uff0c\u4f60\u5e94\u8be5\u4f7f\u7528\u5728 Item21 \u4e2d\u63d0\u5230\u8fc7\u7684 std::make_shared \u6765\u521b\u5efa\u4e00\u4e2a std::shared_ptr \u5143\u7d20\uff0c\u4f46\u662f\u5728\u8fd9\u91cc\u884c\u4e0d\u901a\uff0c\u56e0\u4e3a\u9700\u8981\u6307\u5b9a\u81ea\u5b9a\u4e49\u5220\u9664\u5668\uff0c\u6240\u4ee5\u53ea\u80fd\u4f7f\u7528\u88f8\u6307\u9488\u6765\u6784\u9020 std::shared_ptr \u5143\u7d20\uff0c\u4ee3\u7801\u5982\u4e0b: 1 2 3 4 void killWidget ( Widget * pWidget ); ptrs . push_back ( std :: shared_ptr < Widget > ( new Widget , killWidget )); // \u6216\u8005\u662f\u5982\u4e0b\u5f62\u5f0f ptrs . push_back ({ new Widget , killWidget }); \u2003 \u2003\u5f88\u4e0d\u5e78\uff0c\u4e0a\u9762\u7684\u4ee3\u7801\u4f1a\u4ea7\u751f std::shared_ptr \u7c7b\u578b\u7684\u4e34\u65f6\u5bf9\u8c61\uff0c\u5e76\u4e14\u8fd8\u4f1a\u8fdb\u884c\u62f7\u8d1d\u6784\u9020\uff0c\u540c\u6837\u7684\uff0c\u4f7f\u7528 emplace_back \u53ef\u4ee5\u907f\u514d\u4e34\u65f6\u5bf9\u8c61\u7684\u4ea7\u751f\u3002\u4f46\u662f\u5728\u8fd9\u4e2a\u573a\u666f\u4e0b\u672a\u5fc5\u662f\u503c\u7684\u7684\uff0c\u8003\u8651\u4e0b\u9762\u8fd9\u79cd\u6f5c\u5728\u7684\u53ef\u80fd\u3002 \u8fdb\u884c\u5982\u4e0a\u7684\u8c03\u7528\uff0c\u5bf9\u4f20\u5165\u7684\u88f8\u6307\u9488\u8fdb\u884c\u6784\u9020\uff0c\u4ea7\u751f\u4e86\u4e00\u4e2a\u4e34\u65f6\u7684 std::shared_ptr<Widget> \u5bf9\u8c61\uff0c\u8fd9\u91cc\u79f0\u4e3a temp \u5bf9\u8c61\u3002 push_back \u51fd\u6570\u6301\u6709\u5bf9\u8fd9\u4e2a temp \u5bf9\u8c61\u7684\u5f15\u7528\uff0c\u5f00\u59cb\u5728\u5bb9\u5668\u4e2d\u5206\u914d\u4e00\u4e2a\u8282\u70b9\uff0c\u7528\u6765\u4fdd\u5b58\u5bf9 temp \u5bf9\u8c61\u7684\u62f7\u8d1d\uff0c\u5728\u5206\u914d\u5185\u5b58\u7684\u65f6\u5019\u53d1\u751f\u4e86 out-of-memory \u5f02\u5e38 \u5f02\u5e38\u53d1\u751f\u540e\uff0c temp \u5bf9\u8c61\u6790\u6784\uff0c\u5176\u7ba1\u7406\u7684 Widget \u5bf9\u8c61\u4e5f\u4f1a\u81ea\u52a8\u8c03\u7528\u81ea\u5b9a\u4e49\u5220\u9664\u51fd\u6570 killWidget \u8fdb\u884c\u6790\u6784\u3002 \u2003 \u2003\u901a\u8fc7\u4e0a\u9762\u7684\u5206\u6790\u53ef\u77e5\uff0c\u5373\u4f7fpush_back\u4e2d\u53d1\u751f\u4e86\u5f02\u5e38\uff0c\u4e5f\u4e0d\u4f1a\u9020\u6210\u5185\u5b58\u7684\u6cc4\u6f0f\uff0c\u8fd9\u90fd\u662f\u56e0\u4e3a std::shared_ptr \u53ef\u4ee5\u8d1f\u8d23\u7ba1\u7406\u8d44\u6e90\uff0c\u73b0\u5728\u8003\u8651\u4e00\u4e0b\u5982\u679c\u4f7f\u7528 emplace_back \uff0c\u60c5\u51b5\u53c8\u662f\u5982\u4f55: 1 ptrs . emplace_back ( new widget , killWidget ); \u901a\u8fc7 new Widget \u4ea7\u751f\u7684\u88f8\u6307\u9488\uff0c\u7ecf\u8fc7\u5b8c\u7f8e\u8f6c\u53d1\u540e\u8fdb\u5165 push_back \u51fd\u6570\u5185\u90e8\uff0c\u7136\u540e\u5bb9\u5668\u5f00\u59cb\u5206\u914d\u5185\u5b58\u7528\u4e8e\u6784\u9020\u65b0\u5143\u7d20\uff0c\u5206\u914d\u5185\u5b58\u7684\u65f6\u5019\u53d1\u751f\u4e86 out-of-memory \u5f02\u5e38\u3002 emplace_back \u53d1\u751f\u5f02\u5e38\u540e\u6307\u5411Widget\u7684\u6307\u9488\u53d8\u91cf\u6790\u6784\uff0c\u6240\u6307\u5411\u7684\u5185\u5b58\u8fd8\u6ca1\u6709\u91ca\u653e\uff0c\u5df2\u7ecf\u6ca1\u6709\u529e\u6cd5\u5f15\u7528\u8fd9\u6bb5\u5185\u5b58\u4e86\uff0c\u4ea7\u751f\u4e86\u5185\u5b58\u6cc4\u6f0f\u3002 \u2003 \u2003\u901a\u8fc7\u4e0a\u9762\u7684\u5206\u6790\u53ef\u77e5\uff0c\u4f7f\u7528 emplace_back \u7684\u60c5\u51b5\u4f7f\u5f97\u7a0b\u5e8f\u6709\u53ef\u80fd\u4f1a\u4ea7\u751f\u5185\u5b58\u6cc4\u6f0f\uff0c\u5bf9\u4e8e std::unique_ptr \u9700\u8981\u5b9a\u5236\u5220\u9664\u5668\u7684\u573a\u666f\u6765\u8bf4\u4e5f\u662f\u540c\u6837\u5b58\u5728\u8fd9\u4e2a\u95ee\u9898\u7684\u3002\u8fd9\u4e5f\u4ece\u53e6\u4e00\u4e2a\u65b9\u9762\u53cd\u6620\u51fa std::make_shared \u548c std::make_unique \u8fd9\u7c7b\u6784\u9020\u8d44\u6e90\u7ba1\u7406\u7c7b\u5bf9\u8c61\u7684\u91cd\u8981\u6027\u3002 \u2003 \u2003\u7efc\u4e0a\u6240\u8ff0\uff0c\u5bf9\u4e8e\u4fdd\u5b58\u8d44\u6e90\u7ba1\u7406\u7c7b\u7684\u5bb9\u5668(\u4f8b\u5982: std::list<std::shared_ptr<Widget>> )\u6765\u8bf4\uff0c\u4f20\u7edf\u7684\u63d2\u5165\u51fd\u6570\u5176\u53c2\u6570\u5c31\u4fdd\u8bc1\u4e86\u5176\u5185\u5b58\u8d44\u6e90\u7684\u5206\u914d\u548c\u7ba1\u7406\u662f\u5b89\u5168\u7684\uff0c\u800c emplace \u7cfb\u5217\u51fd\u6570\u5176\u5b8c\u7f8e\u8f6c\u53d1\u5ef6\u8fdf\u4e86\u8d44\u6e90\u7ba1\u7406\u5bf9\u8c61\u7684\u521b\u5efa\uff0c\u76f4\u5230\u5bb9\u5668\u7684\u5185\u5b58\u5206\u914d\u6210\u529f\u540e\u624d\u4f1a\u8fdb\u884c\u6784\u9020\uff0c\u8fd9\u662f\u7684\u5728\u5f02\u5e38\u53d1\u751f\u7684\u60c5\u51b5\u4e0b\u4f1a\u51fa\u73b0\u5185\u5b58\u6cc4\u6f0f\u7684\u95ee\u9898\u3002\u6240\u6709\u7684\u6807\u51c6\u5bb9\u5668\u90fd\u5b58\u5728\u8fd9\u7c7b\u95ee\u9898\uff0c\u56e0\u6b64\u5f53\u4f60\u9009\u62e9\u4f7f\u7528 emplace \u7cfb\u5217\u51fd\u6570\u63d2\u5165\u4e00\u4e2a\u8d44\u6e90\u7ba1\u7406\u7c7b\u7684\u65f6\u5019\uff0c\u4f60\u9700\u8981\u8003\u8651\u6027\u80fd\u548c\u5f02\u5e38\u5b89\u5168\u6027\u8c01\u66f4\u91cd\u8981\u3002 \u2003 \u2003\u5766\u767d\u8bf4\uff0c\u4f60\u4e0d\u5e94\u8be5\u5728\u4ee3\u7801\u4e2d\u51fa\u73b0\u5c06 new Widget \u8fd9\u6837\u7684\u8868\u8fbe\u5f0f\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9 emplace_back \u3001 push_back \uff0c\u6216\u662f\u5176\u4ed6\u4efb\u4f55\u51fd\u6570\uff0c\u56e0\u4e3a\u5728 Item21 \u4e2d\u66fe\u7ecf\u63d0\u5230\u8fc7\u8fd9\u6837\u505a\u4f1a\u5bfc\u81f4\u5f02\u5e38\u5b89\u5168\u6027\u7684\u95ee\u9898\u3002\u6b63\u786e\u7684\u505a\u6cd5\u5e94\u8be5\u662f\u5c06 new Widget \u548c\u6784\u9020\u8d44\u6e90\u7ba1\u7406\u7c7b\u8fd9\u4e24\u4e2a\u52a8\u4f5c\u653e\u5728\u4e00\u4e2a\u72ec\u7acb\u7684\u8bed\u53e5\u4e2d\uff0c\u7b49\u8d44\u6e90\u7ba1\u7406\u7c7b\u6784\u9020\u5b8c\u6210\u540e\u518d\u5c06\u5176\u4f5c\u4e3a\u53f3\u503c\u4f20\u9012\u7ed9\u76ee\u6807\u51fd\u6570\uff0c\u4ee3\u7801\u5982\u4e0b: 1 2 3 4 5 std :: shared_ptr < Widget > spw ( new Widget , killWidget ); ptrs . push_back ( std :: move ( spw )); std :: shared_ptr < Widget > spw ( new Widget , killWidget ); std :: emplace_back ( std :: move ( spw )); \u200b\u2003 \u2003\u4e0d\u7ba1\u600e\u4e48\u6837\u4e0a\u9762\u7684\u8fd9\u4e2a\u65b9\u6cd5\u90fd\u5b58\u5728spw\u5bf9\u8c61\u7684\u6784\u9020\u548c\u6790\u6784\u7684\u5f00\u9500\uff0c\u800c\u6211\u4eec\u4f7f\u7528 emplace_back \u66ff\u6362 push_back \u7684\u76ee\u7684\u5c31\u662f\u4e3a\u4e86\u907f\u514d\u4e34\u65f6\u5bf9\u8c61\u7684\u6784\u9020\u548c\u6790\u6784\u5f00\u9500\uff0c\u800cspw\u6982\u5ff5\u4e0a\u5c31\u662f\u8fd9\u4e2a\u4e34\u65f6\u5bf9\u8c61\u3002\u4f46\u662f\u5f53\u4f7f\u7528emplace_back\u5f80\u5bb9\u5668\u4e2d\u63d2\u5165\u8d44\u6e90\u7ba1\u7406\u5bf9\u8c61\u7684\u65f6\u5019\uff0c\u5fc5\u987b\u8981\u4f7f\u7528\u9002\u5f53\u7684\u65b9\u5f0f\u6765\u4fdd\u8bc1\u8d44\u6e90\u7684\u83b7\u53d6\u548c\u8d44\u6e90\u7ba1\u7406\u5bf9\u8c61\u7684\u6784\u5efa\u4e4b\u95f4\u4e0d\u80fd\u88ab\u5e72\u9884\uff0c\u8fd9\u4e5f\u5c31\u662fspw\u5bf9\u8c61\u5b58\u5728\u7684\u610f\u4e49\u3002 \u2003 \u2003\u7b2c\u4e8c\u4e2a\u56e0\u7d20\u662f\u548c explicit \u6784\u9020\u51fd\u6570\u4ea4\u4e92\u76f8\u5173\u3002\u5728 C++11 \u4e2d\u5f00\u59cb\u652f\u6301\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801\u8bd5\u56fe\u521b\u5efa\u4e00\u7ec4\u6b63\u5219\u8868\u8fbe\u5f0f\u5bf9\u8c61\uff0c\u5e76\u5b58\u5230\u5bb9\u5668\u4e2d\u3002 1 std :: vector < std :: regex > regexes ; \u6709\u4e00\u5929\u4f60\u4e0d\u5c0f\u5fc3\u5199\u4e86\u4e0b\u9762\u8fd9\u6bb5\u770b\u4f3c\u770b\u4f3c\u610f\u4e49\u7684\u4ee3\u7801\u3002 1 regexes . emplace_back ( nullptr ); \u200b\u2003 \u2003\u4f60\u5e76\u6ca1\u6709\u6ce8\u610f\u5230\u4f60\u8f93\u5165\u7684\u8fd9\u6bb5\u9519\u8bef\u7684\u4ee3\u7801\uff0c\u7f16\u8bd1\u5668\u9875\u6ca1\u6709\u63d0\u793a\u4f60\u7f16\u8bd1\u95ee\u9898\uff0c\u6700\u7ec8\u4f60\u82b1\u8d39\u5927\u91cf\u65f6\u95f4\u6765 debug \u8fd9\u4e2a\u95ee\u9898\uff0c\u5728 debug \u8fd9\u4e2a\u95ee\u9898\u7684\u65f6\u5019\uff0c\u4f60\u53d1\u73b0\u5bb9\u5668\u4e2d\u5b58\u5728 nullptr \u6307\u9488\uff0c\u4f46\u662f\u6b63\u5219\u8868\u8fbe\u5f0f\u4e0d\u53ef\u80fd\u662f nullptr \u7684\uff0c\u4f8b\u5982\u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801: 1 std :: regex r = nullptr ; //\u7f16\u8bd1\u51fa\u9519 \u2003 \u2003\u901a\u8fc7\u4e0a\u9762\u7684\u4ee3\u7801\u53ef\u77e5\uff0c std::regex \u6ca1\u6709\u529e\u6cd5\u662f nullptr \u7a7a\u6307\u9488\u7684\uff0c\u6709\u8da3\u7684\u662f\u5982\u679c\u901a\u8fc7 push_back \u66ff\u6362 emplace_back \u7684\u8bdd\uff0c\u7f16\u8bd1\u5668\u540c\u6837\u4f1a\u62a5\u9519\u3002 1 regexes . push_back ( nullptr ); \u2003 \u2003\u9020\u6210\u8fd9\u6837\u5947\u602a\u7684\u884c\u4e3a\u7684\u6839\u672c\u539f\u56e0\u662f std::regex \u7684\u6784\u9020\u6210\u672c\u592a\u9ad8\u4e86\uff0c std::regex \u6784\u9020\u7684\u65f6\u5019\u4f1a\u5bf9\u4f20\u5165\u7684\u6b63\u5219\u5b57\u7b26\u4e32\u8fdb\u884c\u9884\u7f16\u8bd1\uff0c\u662f\u4e00\u4e2a\u5f88\u8017\u65f6\u7684\u52a8\u4f5c\uff0c\u4e3a\u6b64 std::regex \u7981\u6b62\u9690\u5f0f\u6784\u9020\uff0c\u907f\u514d\u4e0d\u5fc5\u8981\u7684\u6027\u80fd\u635f\u5931\u3002\u6240\u4ee5\u4e0a\u9762\u4ee3\u7801\u4e2d\u901a\u8fc7\u8d4b\u503c\u64cd\u4f5c\u7b26\u8fdb\u884c\u6784\u9020\u662f\u88ab\u7981\u6b62\u7684\uff0c\u800c push_back \u672c\u8d28\u4e0a\u5c31\u662f\u5148\u5c06 nullptr \u8fdb\u884c\u9690\u5f0f\u6784\u9020\u7136\u540e\u62f7\u8d1d\u6784\u9020\u5230\u5bb9\u5668\u5185\u90e8\uff0c\u56e0\u6b64\u4e5f\u662f\u88ab\u7981\u6b62\u7684\uff0c\u6539\u6210\u4e0b\u9762\u7684\u4ee3\u7801\u540e\u5373\u53ef\u7f16\u8bd1\u901a\u8fc7\uff1a 1 std :: regex r1 ( nullptr ); // \u663e\u5f0f\u6784\u9020 \u2003 \u2003\u4e0a\u6587\u4e2demplace_back\u53ef\u4ee5\u63d2\u5165nullptr\u7684\u539f\u56e0\u662f\u56e0\u4e3aemplace_back\u662f\u5c06nullptr\u53c2\u6570\u901a\u8fc7\u5b8c\u7f8e\u8f6c\u53d1\u540e\u4f20\u5165\u5230\u5bb9\u5668\u4e2d\u76f4\u63a5\u663e\u5f0f\u6784\u9020\u6b63\u5219\u5bf9\u8c61\u3002 \u2003 \u2003\u7efc\u4e0a\u6240\u8ff0\uff0c\u5f53\u4f7f\u7528 emplace \u7cfb\u5217\u51fd\u6570\u7684\u65f6\u5019\u8981\u7279\u522b\u6ce8\u610f\u786e\u4fdd\u4f20\u9012\u6b63\u786e\u7684\u53c2\u6570\uff0c\u56e0\u4e3a\u663e\u5f0f\u6784\u9020\u51fd\u6570\u88ab\u8ba4\u4e3a\u662f\u7f16\u8bd1\u5668\u8bd5\u56fe\u627e\u4e86\u4e00\u79cd\u6b63\u786e\u7684\u65b9\u5f0f\u6765\u8ba9\u4f60\u7684\u4ee3\u7801\u6709\u6548\u3002","title":"Item42 Consider emplacement instead of insertion"},{"location":"%E5%8D%9A%E5%AE%A2/doc/cpp/Effective-Model-Cpp/item42/#item42-consider-emplacement-instead-of-insertion","text":"\u5982\u679c\u4f60\u6709\u4e00\u4e2a\u5bb9\u5668\uff0c\u5b58\u653e\u7684\u662f std::string \u7c7b\u578b\uff0c\u5f53\u4f60\u901a\u8fc7\u63d2\u5165\u51fd\u6570(\u5982: insert \u3001 push_front \u3001 push_back \u6216\u8005\u662f std::forward_list \u7684 insert_after )\u4f20\u9012\u4e00\u4e2a std::string \u7c7b\u578b\u7684\u5143\u7d20\u5230\u5bb9\u5668\u4e2d\uff0c\u903b\u8f91\u4e0a\u5bb9\u5668\u4e2d\u5c31\u4f1a\u6709\u8fd9\u4e2a\u5143\u7d20\u4e86\u3002\u5c3d\u7ba1\u8fd9\u53ef\u80fd\u53ea\u662f\u903b\u8f91\u4e0a\u7684\uff0c\u4f46\u5e76\u4e0d\u603b\u662f\u771f\u7684\uff0c\u8003\u8651\u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801\uff1a 1 2 std :: vector < std :: string > vs ; vs . push_back ( \"xyzzy\" ); \u2003 \u2003\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u5305\u542b\u4e86\u4e00\u4e2a\u5b58\u653e std::string \u7c7b\u578b\u7684\u5bb9\u5668\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u63d2\u5165\u7684\u5374\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u5e38\u91cf\uff0c\u5e76\u4e0d\u662fstd::string\u7c7b\u578b\u7684\u5b57\u7b26\u4e32\uff0c\u4e5f\u5c31\u662f\u610f\u5473\u7740\u63d2\u5165\u7684\u5e76\u4e0d\u662f\u5bb9\u5668\u671f\u671b\u7684\u7c7b\u578b\u3002 std::vector \u7684 push_back \u51fd\u6570\u5bf9\u4e8e\u5de6\u503c\u548c\u53f3\u503c\u90fd\u8fdb\u884c\u4e86\u91cd\u8f7d\uff0c\u4ee3\u7801\u5982\u4e0b: 1 2 3 4 5 6 7 template < class T , class Allocator = allocator < T >> class vector { public : void push_back ( const T & x ); void push_back ( T && x ); }; \u2003 \u2003\u5f53\u63d2\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32\u5e38\u91cf\u7684\u65f6\u5019\uff0c\u7f16\u8bd1\u5668\u5c31\u4f1a\u53bb\u5bfb\u627e\u5408\u9002\u7684\u91cd\u8f7d\u51fd\u6570\uff0c\u4f46\u662f push_back \u5e76\u6ca1\u6709\u5bf9\u5b57\u7b26\u4e32\u5e38\u91cf\u7684\u91cd\u8f7d\uff0c\u56e0\u6b64\u7f16\u8bd1\u5668\u4f1a\u521b\u5efa\u4e00\u4e2a\u4e34\u65f6\u7684 std::string \u53d8\u91cf\uff0c\u5e76\u5c06\u4f20\u5165\u7684\u5b57\u7b26\u4e32\u5e38\u91cf\u5bf9\u5176\u8fdb\u884c\u6784\u9020\uff0c\u6700\u540e\u5c06\u521b\u5efa\u7684\u4e34\u65f6\u53d8\u91cf\u4f20\u5165\u5230 push_back \u4e2d\uff0c\u6362\u53e5\u8bdd\u8bf4\u7b49\u540c\u4e0e\u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801\uff1a 1 vs . push_back ( std :: string ( \"xyzzy\" )); \u2003 \u2003\u4e0a\u9762\u7684\u4ee3\u7801\u6b63\u5e38\u7f16\u8bd1\u548c\u8fd0\u884c\uff0c\u6bcf\u4e2a\u4eba\u90fd\u5f88\u9ad8\u5174\uff0c\u9664\u4e86\u90a3\u4e9b\u5bf9\u6027\u80fd\u8981\u6c42\u82db\u523b\u7684\u4eba\uff0c\u56e0\u4e3a\u8fd9\u6bb5\u4ee3\u7801\u5b58\u5728\u6027\u80fd\u95ee\u9898\uff0c\u5e76\u4e0d\u662f\u5f88\u9ad8\u6548\u3002\u4e3a\u4e86\u63d2\u5165\u5b57\u7b26\u4e32\u5e38\u91cf\u800c\u6784\u9020\u4e00\u4e2a std::string \u7684\u4e34\u65f6\u53d8\u91cf\u8fd9\u662f\u6ca1\u6709\u95ee\u9898\u7684\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u5e76\u4e0d\u4ec5\u4ec5\u662f\u8fd9\u4e9b\uff0c\u7f16\u8bd1\u5668\u8fd8\u4f1a\u5bf9\u8fd9\u4e2a\u4e34\u65f6\u53d8\u91cf\u8fdb\u884c\u62f7\u8d1d\uff0c\u62f7\u8d1d\u5b8c\u6210\u540e\uff0c\u8fd9\u4e2a\u4e34\u65f6\u53d8\u91cf\u5c31\u4f1a\u6790\u6784\u4e86\u3002\u6574\u4e2a\u8fc7\u7a0b\u5982\u4e0b: \u4e00\u4e2a\u4e34\u65f6\u7684 std::string \u5bf9\u8c61\u901a\u8fc7\u5b57\u7b26\u4e32\u5e38\u91cf \"xyzzy\" \u8fdb\u884c\u6784\u9020\uff0c\u8fd9\u4e2a\u5bf9\u8c61\u6ca1\u6709\u540d\u5b57\uff0c\u6211\u4eec\u5360\u4e14\u79f0\u4e3a temp \u5bf9\u8c61\uff0c\u8fd9\u4e2a temp \u5bf9\u8c61\u5c31\u662f\u901a\u8fc7 std::string \u7684\u6784\u9020\u51fd\u6570\u8fdb\u884c\u6784\u9020\uff0c\u8fd9\u4e2a temp \u5bf9\u8c61\u662f\u4e00\u4e2a\u5de6\u503c\u3002 temp \u5bf9\u8c61\u4f20\u9012\u7ed9 push_back \u7684\u5de6\u503c\u91cd\u8f7d\u7248\u672c\uff0c\u8fd9\u4e2a\u51fd\u6570\u7684\u53c2\u6570\u662f\u4e00\u4e2a\u5de6\u503c\u5f15\u7528x\uff0c\u5728 push_back \u7684\u51fd\u6570\u5185\u90e8\u4f1a\u5bf9x\u6240\u5f15\u7528\u7684\u5bf9\u8c61\u8fdb\u884c\u62f7\u8d1d\uff0c\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5bf9\u8c61\u653e\u5165\u5230\u5bb9\u5668\u4e2d\u3002(\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u4e0d\u8fdb\u884c move \uff0c\u8fd9\u662f\u56e0\u4e3a\u53c2\u6570x\u662f\u5de6\u503c\u5f15\u7528\uff0c\u5982\u679c\u8fdb\u884c move \u4f1a\u5bfc\u81f4\u5916\u90e8\u4f20\u5165\u7684\u5bf9\u8c61\u6307\u5411\u7a7a\u7684\u5185\u5b58\u4f4d\u7f6e\u4ea7\u751f\u672a\u5b9a\u4e49\u7684\u884c\u4e3a) push_back \u8fd4\u56de\u540e\uff0c temp \u5bf9\u8c61\u6790\u6784\uff0c\u7136\u540e\u8c03\u7528 std::string \u7684\u6790\u6784\u51fd\u6570\u3002 \u200b\u2003 \u2003\u4ece\u4e0a\u9762\u5206\u6790\u7684\u8fc7\u7a0b\u6765\u770b\u5982\u679c\u4f20\u5165\u7684\u5b57\u7b26\u4e32\u5e38\u91cf\u6784\u9020\u7684\u4e34\u65f6 temp \u5bf9\u8c61\u80fd\u5728\u4e0a\u9762\u7684\u7b2c\u4e8c\u6b65\u4e2d\u76f4\u63a5\u653e\u5230\u5bb9\u5668\u4e2d\uff0c\u90a3\u4e48\u5c31\u907f\u514d\u4e86\u62f7\u8d1d\u6784\u9020\u548c\u6790\u6784\u7684\u5f00\u9500\u3002\u8981\u60f3\u8fbe\u5230\u8fd9\u6837\u7684\u6548\u679c\u5c31\u4e0d\u80fd\u4f7f\u7528 push_back \u51fd\u6570\uff0c\u8fd9\u4e2a\u51fd\u6570\u662f\u5b58\u5728\u95ee\u9898\u7684\uff0c\u5e94\u8be5\u4f7f\u7528 emplace_back \u3002\u8fd9\u4e2a\u51fd\u6570\u7684\u884c\u4e3a\u548c\u6211\u4eec\u9884\u671f\u662f\u4e00\u6837\u7684\uff0c\u65e0\u8bba\u4f20\u9012\u4ec0\u4e48\u6837\u7684\u53c2\u6570\u90fd\u4f1a\u76f4\u63a5\u6784\u9020\u6210 std::string \u76f4\u63a5\u4f20\u9012\u5230\u5bb9\u5668\u4e2d\uff0c\u6ca1\u6709\u4e34\u65f6\u5bf9\u8c61\u7684\u53c2\u4e0e\u3002 \u2003 \u2003 \u200b emplace_back \u4e4b\u6240\u4ee5\u80fd\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u5f88\u91cd\u8981\u7684\u539f\u56e0\u662f emplace_back \u53ef\u4ee5\u8bc6\u522b\u51fa\u4f20\u5165\u7684\u5bf9\u8c61\u5230\u5e95\u662f\u4e00\u4e2a\u4e34\u65f6\u5bf9\u8c61(\u53f3\u503c)\uff0c\u8fd8\u662f\u4e00\u4e2a\u5de6\u503c\u5bf9\u8c61\uff0c\u5982\u679c\u662f\u53f3\u503c\u5c31\u53ef\u4ee5\u76f4\u63a5\u5728\u5bb9\u5668\u5185\u90e8\u8fdb\u884c\u6784\u9020\u3002\u8fd9\u4e00\u5207\u90fd\u8981\u5f52\u529f\u4e8e\u5b8c\u7f8e\u8f6c\u53d1\uff0c\u5c3d\u7ba1\u5728 Item30 \u4e2d\u63d0\u5230\u8fc7\u5173\u4e8e\u5b8c\u7f8e\u8f6c\u53d1\u7684\u4e00\u4e9b\u5931\u8d25\u7684case\u4f46\u662f\u8fd9\u4e0d\u59a8\u788d\u6211\u4eec\u4e0b\u9762\u7684\u8ba8\u8bba\uff0c\u4e0b\u9762\u662f emplace_back \u7684\u58f0\u660e\u3002 1 2 template < class ... Args > void emplace_back ( Args && ... args ); \u2003 \u2003\u901a\u8fc7\u4e0a\u9762\u7684\u4ee3\u7801\u53ef\u89c1 emplace_back \u8fd8\u5e26\u6709\u4e00\u4e2a\u53ef\u53d8\u53c2\u6570\uff0c\u53ef\u4ee5\u63a5\u53d7\u4efb\u610f\u53c2\u6570\uff0c\u901a\u8fc7\u5b8c\u7f8e\u8f6c\u53d1\u4f1a\u5c06\u4f20\u5165\u7684\u53c2\u6570\u653e\u5165\u5230\u5bb9\u5668\u4e2d\u76f4\u63a5\u6784\u9020\u51fa\u5143\u7d20\u3002\u4f8b\u5982\u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801: 1 vs . emplace_back ( 50 , 'x' ); \u2003 \u200350\u548c x \u4f1a\u88ab\u4f20\u9012\u7ed9 std::string \u7684\u6784\u9020\u51fd\u6570\uff0c\u7528\u6765\u5728\u5bb9\u5668\u4e2d\u6784\u9020\u4e00\u4e2a std::string \u5bf9\u8c61\uff0c\u8be5\u5bf9\u8c61\u5305\u542b\u4e8650\u4e2ax\u5b57\u7b26\u3002\u901a\u8fc7 emplace_back \u7684\u53ef\u53d8\u53c2\u6570\u4f7f\u5f97 emplace_back \u53ef\u4ee5\u652f\u6301 std::string \u6240\u6709\u7684\u6784\u9020\u51fd\u6570\u3002 \u2003 \u2003 emplace_back \u5bf9\u4e8e\u652f\u6301 push_back \u7684\u6807\u51c6\u5bb9\u5668\u6765\u8bf4\u90fd\u662f\u53ef\u7528\u7684\uff0c\u5bf9\u4e8e\u652f\u6301 push_font \u7684\u5bb9\u5668 C++11 \u63d0\u4f9b\u4e86 emplace_front \uff0c\u5bf9\u4e8e\u652f\u6301 insert \u51fd\u6570\u7684\u6807\u51c6\u5bb9\u5668\u6765\u8bf4(\u9664\u4e86 std::forward_list \u548c std::array )\u63d0\u4f9b\u4e86 emplace \uff0c\u5bf9\u4e8e\u5173\u8054\u5bb9\u5668\u5219\u63d0\u4f9b\u4e86 emplace_hint \u66ff\u6362\u5176 insert \u51fd\u6570\uff0c\u5bf9\u4e8estd::forward_list\u4f7f\u7528 emplace_after \u4ee3\u66ff\u5176 insert_after \u3002 \u2003 \u2003 emplace \u7cfb\u5217\u51fd\u6570\u80fd\u591f\u66ff\u6362\u4f20\u7edf\u7684\u63d2\u5165\u51fd\u6570\uff0c\u6700\u91cd\u8981\u7684\u539f\u56e0\u662f\u56e0\u4e3a\uff0c emplace \u7cfb\u5217\u51fd\u6570\u62e5\u6709\u66f4\u7075\u6d3b\u7684\u63a5\u53e3\uff0c\u4f20\u7edf\u7684\u63d2\u5165\u51fd\u6570\u662f\u62ff\u5230\u5bf9\u8c61\u8fdb\u884c\u63d2\u5165\uff0c\u800c emplace \u7cfb\u5217\u51fd\u6570\u53ef\u4ee5\u62ff\u7740\u6784\u9020\u51fd\u6570\u8fdb\u884c\u5bf9\u8c61\u7684\u6784\u9020\uff0c\u7136\u540e\u63d2\u5165\u5230\u5bb9\u5668\u4e2d\u3002\u4e24\u8005\u7684\u4e0d\u540c\u5c31\u662f\u907f\u514d\u4e86\u4e34\u65f6\u5bf9\u8c61\u7684\u6784\u9020\u548c\u6790\u6784\u5f00\u9500\u3002\u5982\u679c\u76f4\u63a5\u63d2\u5165\u7684\u5c31\u662f\u76ee\u6807\u7c7b\u578b\uff0c\u4e5f\u5c31\u6ca1\u6709\u4e34\u65f6\u5bf9\u8c61\u7684\u4ea7\u751f\uff0c\u90a3\u4e48 emplace \u7cfb\u5217\u51fd\u6570\u548c\u4f20\u7edf\u7684\u63d2\u5165\u51fd\u6570\u672c\u8d28\u4e0a\u5c31\u662f\u4e00\u81f4\u7684\u4e86\u3002 1 2 vs . push_back ( queenOfDisco ); vs . emplace_back ( queenOfDisco ); \u2003 \u2003\u7efc\u5408\u6765\u8bf4\uff0c\u4f20\u7edf\u7684\u63d2\u5165\u51fd\u6570\u80fd\u505a\u7684\uff0c emplace \u7cfb\u5217\u51fd\u6570\u90fd\u53ef\u4ee5\u505a\uff0c\u5e76\u4e14\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u66f4\u9ad8\u6548\u3002\u7406\u8bba\u4e0a emplace \u53ef\u4ee5\u5b8c\u5168\u66ff\u4ee3\u4f20\u7edf\u7684\u63d2\u5165\u51fd\u6570\uff0c\u90a3\u4e48\u4e3a\u4ec0\u4e48\u6211\u4eec\u4e0d\u603b\u662f\u8fd9\u6837\u7528\u5462? \u7406\u8bba\u4e0a\u8fd9\u662f\u5bf9\u7684\uff0c\u4e24\u8005\u5728\u884c\u4e3a\u4e0a\u7684\u8868\u73b0\u4e00\u81f4\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u5e76\u4e0d\u662f\u8fd9\u6837\u7684\uff0c\u76ee\u524d\u6807\u51c6\u5e93\u5728\u5b9e\u73b0\u7684\u65f6\u5019\u5728\u67d0\u4e9b\u65b9\u9762\u548c\u6211\u4eec\u7684\u9884\u671f\u8fd8\u4e0d\u592a\u4e00\u6837\uff0c\u867d\u7136\u5927\u591a\u6570\u573a\u666f\u4e0b emplace \u7cfb\u5217\u51fd\u6570\u7684\u786e\u662f\u4f18\u4e8e\u4f20\u7edf\u7684\u63d2\u5165\u51fd\u6570\uff0c\u4f46\u662f\u53ef\u60b2\u7684\u662f\uff0c\u5b58\u5728\u67d0\u4e9b\u573a\u666f\u4e0b\u4f20\u7edf\u7684\u63d2\u5165\u51fd\u6570\u8981\u6bd4 emplace \u5feb\u3002\u8fd9\u6837\u7684\u573a\u666f\u53c8\u4e0d\u592a\u597d\u5f52\u7c7b\uff0c\u56e0\u4e3a\u8fd9\u53d6\u51b3\u4e8e\u4f20\u9012\u7684\u53c2\u6570\u7c7b\u578b\u3001\u4f7f\u7528\u7684\u5bb9\u5668\u3001\u63d2\u5165\u5bb9\u5668\u7684\u4f4d\u7f6e\u3001\u5bb9\u5668\u4e2d\u4fdd\u5b58\u7684\u5bf9\u8c61\u5176\u6784\u9020\u51fd\u6570\u7684\u5f02\u5e38\u5b89\u5168\u6027\u3001\u5bb9\u5668\u662f\u5426\u5141\u8bb8\u63d2\u5165\u91cd\u590d\u7684\u503c\u3001\u8981\u63d2\u5165\u7684\u5143\u7d20\u662f\u5426\u5df2\u7ecf\u5728\u5bb9\u5668\u4e2d\u4e86\u7b49\u7b49\u3002\u6309\u7167\u901a\u5e38\u7684\u8c03\u4f18\u5efa\u8bae\u5e94\u8be5\u5bf9\u4e24\u8005\u8fdb\u884c\u538b\u529b\u6d4b\u8bd5\u3002 \u2003 \u2003\u8fd9\u5f53\u7136\u4e0d\u662f\u5f88\u4ee4\u4eba\u6ee1\u610f\uff0c\u6240\u4ee5\u4f60\u4f1a\u5f88\u9ad8\u5174\u5730\u5f97\u77e5\uff0c\u6709\u4e00\u4e2a\u53ef\u4ee5\u5e2e\u52a9\u4f60\u8bc6\u522b\u4f55\u79cd\u65b9\u5f0f\u63d2\u5165\u662f\u9ad8\u6548\u7684\u65b9\u6cd5\u3002 \u5982\u679c\u4ee5\u4e0b\u6240\u6709\u60c5\u51b5\u90fd\u662f\u771f\u5b9e\u7684\uff0c\u5219 emplaces \u51e0\u4e4e\u80af\u5b9a\u4f1a\u6bd4\u4f20\u7edf\u7684\u63d2\u5165\u8981\u9ad8\u6548\uff1a \u8981\u63d2\u5165\u7684\u503c\u662f\u901a\u8fc7\u6784\u9020\u51fd\u6570\u63d2\u5165\u5230\u5bb9\u5668\u4e2d\u7684\uff0c\u4e0d\u662f\u901a\u8fc7\u8d4b\u503c\u3002 \u4e0a\u6587\u4e2d\u63d0\u5230\u7684\u5b57\u7b26\u4e32\u5e38\u91cf\u5c31\u662f\u8fd9\u79cd\u60c5\u51b5\uff0c\u4f20\u5165\u7684\u503c\u9700\u8981\u5148\u6784\u9020\u4e3a\u4e00\u4e2a\u4e34\u65f6\u7684\u5bf9\u8c61\uff0c\u7136\u540e\u518d\u4fdd\u5b58\u5230\u5bb9\u5668\u4e2d\uff0c\u6b64\u65f6 emplace \u7cfb\u5217\u51fd\u6570\u5c31\u53d1\u6325\u4e86\u5b83\u7684\u4f5c\u7528\uff0c\u5c06\u8fd9\u4e2a\u4e34\u65f6\u5bf9\u8c61\u76f4\u63a5 move \u5230\u5bb9\u5668\u4e2d\uff0c\u4f46\u662f\u5982\u679c\u8981\u63d2\u5165\u7684\u4f4d\u7f6e\u5df2\u7ecf\u6709\u5143\u7d20\u5b58\u5728\u7684\u65f6\u5019\uff0c\u60c5\u51b5\u53c8\u4e0d\u4e00\u6837\u4e86\u3002\u8003\u8651\u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801: 1 vs . emplace ( vs . begin (), \"xyzzy\" ); \u2003 \u2003\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u5f88\u5c11\u6709\u7f16\u8bd1\u5668\u4f1a\u5c06\u4e0a\u9762\u7684\u4ee3\u7801\u5b9e\u73b0\u4e3a\u6784\u9020\u4e00\u4e2a std::string \u5bf9\u8c61\u7136\u540e\u653e\u5230 vs[0] \u4f4d\u7f6e\u4e0a\uff0c\u5927\u591a\u6570\u7f16\u8bd1\u5668\u7684\u5b9e\u73b0\u662f\u8fdb\u884c\u79fb\u52a8\u8d4b\u503c\uff0c\u5c06\u4f20\u5165\u7684\u53c2\u6570\u76f4\u63a5\u79fb\u52a8\u8d4b\u503c\u5230\u76ee\u6807\u4f4d\u7f6e\u3002\u4f46\u662f\u79fb\u52a8\u8d4b\u503c\u9700\u8981\u4f20\u5165\u7684\u662f\u4e00\u4e2a\u5bf9\u8c61\uff0c\u8fd9\u5c31\u9700\u8981\u6784\u5efa\u4e00\u4e2a\u4e34\u65f6\u5bf9\u8c61\uff0c\u7136\u540e\u79fb\u52a8\u8fc7\u53bb\uff0c\u7b49\u64cd\u4f5c\u5b8c\u6210\u540e\u518d\u5c06\u8fd9\u4e2a\u5bf9\u8c61 \u6790\u6784\u3002\u4e0a\u6587\u4e2d\u5176\u5b9e\u6211\u4eec\u5df2\u7ecf\u5206\u6790\u4e86 emplace \u7cfb\u5217\u51fd\u6570\u7684\u4f18\u52bf\u5728\u4e8e\u7701\u53bb\u4e34\u65f6\u5bf9\u8c61\u7684\u6784\u9020\u548c\u6790\u6784\u6210\u672c\uff0c\u5f88\u4e0d\u5e78\u5728\u79fb\u52a8\u8d4b\u503c\u7684\u8fd9\u79cd\u573a\u666f\u4e0b\u8fd9\u4e9b\u5f00\u9500\u5e76\u6ca1\u6709\u88ab\u7701\u53bb\u3002 \u4f20\u9012\u7684\u53c2\u6570\u7c7b\u578b\u548c\u5bb9\u5668\u4e2d\u7684\u7c7b\u578b\u4e0d\u540c \u3002 emplace \u7cfb\u5217\u51fd\u6570\u7684\u4f18\u70b9\u5c31\u662f\u5728\u4e8e\u907f\u514d\u4e34\u65f6\u5bf9\u8c61\u7684\u6784\u9020\u548c\u6790\u6784\uff0c\u5982\u679c\u4f20\u9012\u7684\u53c2\u6570\u7c7b\u578b\u548c\u5bb9\u5668\u4e2d\u7684\u7c7b\u578b\u76f8\u540c\u5c31\u4e0d\u4f1a\u4ea7\u751f\u4e34\u65f6\u5bf9\u8c61\u4e86\uff0c\u90a3\u4e48\u5f88\u81ea\u7136 emplace \u7cfb\u5217\u51fd\u6570\u7684\u4f18\u52bf\u4e5f\u5c31\u65e0\u6cd5\u4f53\u73b0\u4e86\u3002 \u5bb9\u5668\u4e0d\u592a\u53ef\u80fd\u63d2\u5165\u91cd\u590d\u7684\u503c \u3002\u5bb9\u5668\u5141\u8bb8\u6709\u91cd\u590d\u7684\u503c\u4f46\u662f\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u63d2\u5165\u7684\u503c\u90fd\u662f\u552f\u4e00\u7684\uff0c\u8fd9\u662f\u56e0\u4e3a emplace \u7cfb\u5217\u51fd\u6570\u9996\u5148\u4f1a\u5c06\u4f20\u5165\u7684\u503c\u6784\u9020\u4e3a\u4e00\u4e2a\u65b0\u7684\u5143\u7d20\uff0c\u7136\u540e\u62ff\u7740\u8fd9\u4e2a\u65b0\u5143\u7d20\u7684\u503c\u548c\u5bb9\u5668\u4e2d\u5df2\u7ecf\u5b58\u5728\u7684\u5143\u7d20\u8fdb\u884c\u6bd4\u8f83\uff0c\u5982\u679c\u4e0d\u5728\u5bb9\u5668\u4e2d\u90a3\u4e48\u5c31\u6dfb\u52a0\u8fdb\u53bb\uff0c\u5426\u5219\u5c31\u4e22\u5f03\u521a\u521b\u5efa\u7684\u8fd9\u4e2a\u503c\uff0c\u8fd9\u5c31\u610f\u5473\u7740\u591a\u4e86\u4e00\u6b21\u989d\u5916\u7684\u6784\u9020\u548c\u6790\u6784\u6210\u672c\u5f00\u9500\u3002 \u4e0b\u9762\u8fd9\u4e9b\u8c03\u7528\u6ee1\u8db3\u4e0a\u8ff0\u4e09\u4e2a\u6761\u4ef6\uff0c\u56e0\u6b64\u4f7f\u7528 emplace \u7cfb\u5217\u51fd\u6570\u8981\u6bd4\u4f7f\u7528 push_back \u5feb\u3002 1 2 vs . emplace_back ( \"xyzzy\" ); vs . emplace_back ( 50. 'x' ); \u2003 \u2003\u9664\u4e86\u4e0a\u9762\u7684\u8fd9\u4e9b\u8003\u8651\u5916\uff0c\u51b3\u5b9a\u662f\u5426\u4f7f\u7528 emplace \u7cfb\u5217\u51fd\u6570\uff0c\u8fd8\u6709\u53e6\u5916\u4e24\u4e2a\u56e0\u7d20\u503c\u7684\u8003\u8651\u3002\u7b2c\u4e00\u4e2a\u56e0\u7d20\u5c31\u662f\u8d44\u6e90\u7ba1\u7406\uff0c\u5047\u8bbe\u4f60\u6709\u8fd9\u6837\u7684\u4e00\u4e2a\u5bb9\u5668\u5176\u5143\u7d20\u7c7b\u578b\u4e3a std::shared_ptr<Widget> s \u3002 1 std :: list < std :: shared_ptr < Widget >> ptrs ; \u2003 \u2003\u5f53\u4f60\u60f3\u5f80\u8fd9\u4e2a\u5bb9\u5668\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u65b0\u7684 std::shared_ptr<Widget> \u5143\u7d20\uff0c\u5e76\u4e14\u7ed9\u8fd9\u4e2a\u5143\u7d20\u6307\u5b9a\u81ea\u5b9a\u4e49\u5220\u9664\u5668( Item19 )\uff0c\u4f60\u5e94\u8be5\u4f7f\u7528\u5728 Item21 \u4e2d\u63d0\u5230\u8fc7\u7684 std::make_shared \u6765\u521b\u5efa\u4e00\u4e2a std::shared_ptr \u5143\u7d20\uff0c\u4f46\u662f\u5728\u8fd9\u91cc\u884c\u4e0d\u901a\uff0c\u56e0\u4e3a\u9700\u8981\u6307\u5b9a\u81ea\u5b9a\u4e49\u5220\u9664\u5668\uff0c\u6240\u4ee5\u53ea\u80fd\u4f7f\u7528\u88f8\u6307\u9488\u6765\u6784\u9020 std::shared_ptr \u5143\u7d20\uff0c\u4ee3\u7801\u5982\u4e0b: 1 2 3 4 void killWidget ( Widget * pWidget ); ptrs . push_back ( std :: shared_ptr < Widget > ( new Widget , killWidget )); // \u6216\u8005\u662f\u5982\u4e0b\u5f62\u5f0f ptrs . push_back ({ new Widget , killWidget }); \u2003 \u2003\u5f88\u4e0d\u5e78\uff0c\u4e0a\u9762\u7684\u4ee3\u7801\u4f1a\u4ea7\u751f std::shared_ptr \u7c7b\u578b\u7684\u4e34\u65f6\u5bf9\u8c61\uff0c\u5e76\u4e14\u8fd8\u4f1a\u8fdb\u884c\u62f7\u8d1d\u6784\u9020\uff0c\u540c\u6837\u7684\uff0c\u4f7f\u7528 emplace_back \u53ef\u4ee5\u907f\u514d\u4e34\u65f6\u5bf9\u8c61\u7684\u4ea7\u751f\u3002\u4f46\u662f\u5728\u8fd9\u4e2a\u573a\u666f\u4e0b\u672a\u5fc5\u662f\u503c\u7684\u7684\uff0c\u8003\u8651\u4e0b\u9762\u8fd9\u79cd\u6f5c\u5728\u7684\u53ef\u80fd\u3002 \u8fdb\u884c\u5982\u4e0a\u7684\u8c03\u7528\uff0c\u5bf9\u4f20\u5165\u7684\u88f8\u6307\u9488\u8fdb\u884c\u6784\u9020\uff0c\u4ea7\u751f\u4e86\u4e00\u4e2a\u4e34\u65f6\u7684 std::shared_ptr<Widget> \u5bf9\u8c61\uff0c\u8fd9\u91cc\u79f0\u4e3a temp \u5bf9\u8c61\u3002 push_back \u51fd\u6570\u6301\u6709\u5bf9\u8fd9\u4e2a temp \u5bf9\u8c61\u7684\u5f15\u7528\uff0c\u5f00\u59cb\u5728\u5bb9\u5668\u4e2d\u5206\u914d\u4e00\u4e2a\u8282\u70b9\uff0c\u7528\u6765\u4fdd\u5b58\u5bf9 temp \u5bf9\u8c61\u7684\u62f7\u8d1d\uff0c\u5728\u5206\u914d\u5185\u5b58\u7684\u65f6\u5019\u53d1\u751f\u4e86 out-of-memory \u5f02\u5e38 \u5f02\u5e38\u53d1\u751f\u540e\uff0c temp \u5bf9\u8c61\u6790\u6784\uff0c\u5176\u7ba1\u7406\u7684 Widget \u5bf9\u8c61\u4e5f\u4f1a\u81ea\u52a8\u8c03\u7528\u81ea\u5b9a\u4e49\u5220\u9664\u51fd\u6570 killWidget \u8fdb\u884c\u6790\u6784\u3002 \u2003 \u2003\u901a\u8fc7\u4e0a\u9762\u7684\u5206\u6790\u53ef\u77e5\uff0c\u5373\u4f7fpush_back\u4e2d\u53d1\u751f\u4e86\u5f02\u5e38\uff0c\u4e5f\u4e0d\u4f1a\u9020\u6210\u5185\u5b58\u7684\u6cc4\u6f0f\uff0c\u8fd9\u90fd\u662f\u56e0\u4e3a std::shared_ptr \u53ef\u4ee5\u8d1f\u8d23\u7ba1\u7406\u8d44\u6e90\uff0c\u73b0\u5728\u8003\u8651\u4e00\u4e0b\u5982\u679c\u4f7f\u7528 emplace_back \uff0c\u60c5\u51b5\u53c8\u662f\u5982\u4f55: 1 ptrs . emplace_back ( new widget , killWidget ); \u901a\u8fc7 new Widget \u4ea7\u751f\u7684\u88f8\u6307\u9488\uff0c\u7ecf\u8fc7\u5b8c\u7f8e\u8f6c\u53d1\u540e\u8fdb\u5165 push_back \u51fd\u6570\u5185\u90e8\uff0c\u7136\u540e\u5bb9\u5668\u5f00\u59cb\u5206\u914d\u5185\u5b58\u7528\u4e8e\u6784\u9020\u65b0\u5143\u7d20\uff0c\u5206\u914d\u5185\u5b58\u7684\u65f6\u5019\u53d1\u751f\u4e86 out-of-memory \u5f02\u5e38\u3002 emplace_back \u53d1\u751f\u5f02\u5e38\u540e\u6307\u5411Widget\u7684\u6307\u9488\u53d8\u91cf\u6790\u6784\uff0c\u6240\u6307\u5411\u7684\u5185\u5b58\u8fd8\u6ca1\u6709\u91ca\u653e\uff0c\u5df2\u7ecf\u6ca1\u6709\u529e\u6cd5\u5f15\u7528\u8fd9\u6bb5\u5185\u5b58\u4e86\uff0c\u4ea7\u751f\u4e86\u5185\u5b58\u6cc4\u6f0f\u3002 \u2003 \u2003\u901a\u8fc7\u4e0a\u9762\u7684\u5206\u6790\u53ef\u77e5\uff0c\u4f7f\u7528 emplace_back \u7684\u60c5\u51b5\u4f7f\u5f97\u7a0b\u5e8f\u6709\u53ef\u80fd\u4f1a\u4ea7\u751f\u5185\u5b58\u6cc4\u6f0f\uff0c\u5bf9\u4e8e std::unique_ptr \u9700\u8981\u5b9a\u5236\u5220\u9664\u5668\u7684\u573a\u666f\u6765\u8bf4\u4e5f\u662f\u540c\u6837\u5b58\u5728\u8fd9\u4e2a\u95ee\u9898\u7684\u3002\u8fd9\u4e5f\u4ece\u53e6\u4e00\u4e2a\u65b9\u9762\u53cd\u6620\u51fa std::make_shared \u548c std::make_unique \u8fd9\u7c7b\u6784\u9020\u8d44\u6e90\u7ba1\u7406\u7c7b\u5bf9\u8c61\u7684\u91cd\u8981\u6027\u3002 \u2003 \u2003\u7efc\u4e0a\u6240\u8ff0\uff0c\u5bf9\u4e8e\u4fdd\u5b58\u8d44\u6e90\u7ba1\u7406\u7c7b\u7684\u5bb9\u5668(\u4f8b\u5982: std::list<std::shared_ptr<Widget>> )\u6765\u8bf4\uff0c\u4f20\u7edf\u7684\u63d2\u5165\u51fd\u6570\u5176\u53c2\u6570\u5c31\u4fdd\u8bc1\u4e86\u5176\u5185\u5b58\u8d44\u6e90\u7684\u5206\u914d\u548c\u7ba1\u7406\u662f\u5b89\u5168\u7684\uff0c\u800c emplace \u7cfb\u5217\u51fd\u6570\u5176\u5b8c\u7f8e\u8f6c\u53d1\u5ef6\u8fdf\u4e86\u8d44\u6e90\u7ba1\u7406\u5bf9\u8c61\u7684\u521b\u5efa\uff0c\u76f4\u5230\u5bb9\u5668\u7684\u5185\u5b58\u5206\u914d\u6210\u529f\u540e\u624d\u4f1a\u8fdb\u884c\u6784\u9020\uff0c\u8fd9\u662f\u7684\u5728\u5f02\u5e38\u53d1\u751f\u7684\u60c5\u51b5\u4e0b\u4f1a\u51fa\u73b0\u5185\u5b58\u6cc4\u6f0f\u7684\u95ee\u9898\u3002\u6240\u6709\u7684\u6807\u51c6\u5bb9\u5668\u90fd\u5b58\u5728\u8fd9\u7c7b\u95ee\u9898\uff0c\u56e0\u6b64\u5f53\u4f60\u9009\u62e9\u4f7f\u7528 emplace \u7cfb\u5217\u51fd\u6570\u63d2\u5165\u4e00\u4e2a\u8d44\u6e90\u7ba1\u7406\u7c7b\u7684\u65f6\u5019\uff0c\u4f60\u9700\u8981\u8003\u8651\u6027\u80fd\u548c\u5f02\u5e38\u5b89\u5168\u6027\u8c01\u66f4\u91cd\u8981\u3002 \u2003 \u2003\u5766\u767d\u8bf4\uff0c\u4f60\u4e0d\u5e94\u8be5\u5728\u4ee3\u7801\u4e2d\u51fa\u73b0\u5c06 new Widget \u8fd9\u6837\u7684\u8868\u8fbe\u5f0f\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9 emplace_back \u3001 push_back \uff0c\u6216\u662f\u5176\u4ed6\u4efb\u4f55\u51fd\u6570\uff0c\u56e0\u4e3a\u5728 Item21 \u4e2d\u66fe\u7ecf\u63d0\u5230\u8fc7\u8fd9\u6837\u505a\u4f1a\u5bfc\u81f4\u5f02\u5e38\u5b89\u5168\u6027\u7684\u95ee\u9898\u3002\u6b63\u786e\u7684\u505a\u6cd5\u5e94\u8be5\u662f\u5c06 new Widget \u548c\u6784\u9020\u8d44\u6e90\u7ba1\u7406\u7c7b\u8fd9\u4e24\u4e2a\u52a8\u4f5c\u653e\u5728\u4e00\u4e2a\u72ec\u7acb\u7684\u8bed\u53e5\u4e2d\uff0c\u7b49\u8d44\u6e90\u7ba1\u7406\u7c7b\u6784\u9020\u5b8c\u6210\u540e\u518d\u5c06\u5176\u4f5c\u4e3a\u53f3\u503c\u4f20\u9012\u7ed9\u76ee\u6807\u51fd\u6570\uff0c\u4ee3\u7801\u5982\u4e0b: 1 2 3 4 5 std :: shared_ptr < Widget > spw ( new Widget , killWidget ); ptrs . push_back ( std :: move ( spw )); std :: shared_ptr < Widget > spw ( new Widget , killWidget ); std :: emplace_back ( std :: move ( spw )); \u200b\u2003 \u2003\u4e0d\u7ba1\u600e\u4e48\u6837\u4e0a\u9762\u7684\u8fd9\u4e2a\u65b9\u6cd5\u90fd\u5b58\u5728spw\u5bf9\u8c61\u7684\u6784\u9020\u548c\u6790\u6784\u7684\u5f00\u9500\uff0c\u800c\u6211\u4eec\u4f7f\u7528 emplace_back \u66ff\u6362 push_back \u7684\u76ee\u7684\u5c31\u662f\u4e3a\u4e86\u907f\u514d\u4e34\u65f6\u5bf9\u8c61\u7684\u6784\u9020\u548c\u6790\u6784\u5f00\u9500\uff0c\u800cspw\u6982\u5ff5\u4e0a\u5c31\u662f\u8fd9\u4e2a\u4e34\u65f6\u5bf9\u8c61\u3002\u4f46\u662f\u5f53\u4f7f\u7528emplace_back\u5f80\u5bb9\u5668\u4e2d\u63d2\u5165\u8d44\u6e90\u7ba1\u7406\u5bf9\u8c61\u7684\u65f6\u5019\uff0c\u5fc5\u987b\u8981\u4f7f\u7528\u9002\u5f53\u7684\u65b9\u5f0f\u6765\u4fdd\u8bc1\u8d44\u6e90\u7684\u83b7\u53d6\u548c\u8d44\u6e90\u7ba1\u7406\u5bf9\u8c61\u7684\u6784\u5efa\u4e4b\u95f4\u4e0d\u80fd\u88ab\u5e72\u9884\uff0c\u8fd9\u4e5f\u5c31\u662fspw\u5bf9\u8c61\u5b58\u5728\u7684\u610f\u4e49\u3002 \u2003 \u2003\u7b2c\u4e8c\u4e2a\u56e0\u7d20\u662f\u548c explicit \u6784\u9020\u51fd\u6570\u4ea4\u4e92\u76f8\u5173\u3002\u5728 C++11 \u4e2d\u5f00\u59cb\u652f\u6301\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801\u8bd5\u56fe\u521b\u5efa\u4e00\u7ec4\u6b63\u5219\u8868\u8fbe\u5f0f\u5bf9\u8c61\uff0c\u5e76\u5b58\u5230\u5bb9\u5668\u4e2d\u3002 1 std :: vector < std :: regex > regexes ; \u6709\u4e00\u5929\u4f60\u4e0d\u5c0f\u5fc3\u5199\u4e86\u4e0b\u9762\u8fd9\u6bb5\u770b\u4f3c\u770b\u4f3c\u610f\u4e49\u7684\u4ee3\u7801\u3002 1 regexes . emplace_back ( nullptr ); \u200b\u2003 \u2003\u4f60\u5e76\u6ca1\u6709\u6ce8\u610f\u5230\u4f60\u8f93\u5165\u7684\u8fd9\u6bb5\u9519\u8bef\u7684\u4ee3\u7801\uff0c\u7f16\u8bd1\u5668\u9875\u6ca1\u6709\u63d0\u793a\u4f60\u7f16\u8bd1\u95ee\u9898\uff0c\u6700\u7ec8\u4f60\u82b1\u8d39\u5927\u91cf\u65f6\u95f4\u6765 debug \u8fd9\u4e2a\u95ee\u9898\uff0c\u5728 debug \u8fd9\u4e2a\u95ee\u9898\u7684\u65f6\u5019\uff0c\u4f60\u53d1\u73b0\u5bb9\u5668\u4e2d\u5b58\u5728 nullptr \u6307\u9488\uff0c\u4f46\u662f\u6b63\u5219\u8868\u8fbe\u5f0f\u4e0d\u53ef\u80fd\u662f nullptr \u7684\uff0c\u4f8b\u5982\u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801: 1 std :: regex r = nullptr ; //\u7f16\u8bd1\u51fa\u9519 \u2003 \u2003\u901a\u8fc7\u4e0a\u9762\u7684\u4ee3\u7801\u53ef\u77e5\uff0c std::regex \u6ca1\u6709\u529e\u6cd5\u662f nullptr \u7a7a\u6307\u9488\u7684\uff0c\u6709\u8da3\u7684\u662f\u5982\u679c\u901a\u8fc7 push_back \u66ff\u6362 emplace_back \u7684\u8bdd\uff0c\u7f16\u8bd1\u5668\u540c\u6837\u4f1a\u62a5\u9519\u3002 1 regexes . push_back ( nullptr ); \u2003 \u2003\u9020\u6210\u8fd9\u6837\u5947\u602a\u7684\u884c\u4e3a\u7684\u6839\u672c\u539f\u56e0\u662f std::regex \u7684\u6784\u9020\u6210\u672c\u592a\u9ad8\u4e86\uff0c std::regex \u6784\u9020\u7684\u65f6\u5019\u4f1a\u5bf9\u4f20\u5165\u7684\u6b63\u5219\u5b57\u7b26\u4e32\u8fdb\u884c\u9884\u7f16\u8bd1\uff0c\u662f\u4e00\u4e2a\u5f88\u8017\u65f6\u7684\u52a8\u4f5c\uff0c\u4e3a\u6b64 std::regex \u7981\u6b62\u9690\u5f0f\u6784\u9020\uff0c\u907f\u514d\u4e0d\u5fc5\u8981\u7684\u6027\u80fd\u635f\u5931\u3002\u6240\u4ee5\u4e0a\u9762\u4ee3\u7801\u4e2d\u901a\u8fc7\u8d4b\u503c\u64cd\u4f5c\u7b26\u8fdb\u884c\u6784\u9020\u662f\u88ab\u7981\u6b62\u7684\uff0c\u800c push_back \u672c\u8d28\u4e0a\u5c31\u662f\u5148\u5c06 nullptr \u8fdb\u884c\u9690\u5f0f\u6784\u9020\u7136\u540e\u62f7\u8d1d\u6784\u9020\u5230\u5bb9\u5668\u5185\u90e8\uff0c\u56e0\u6b64\u4e5f\u662f\u88ab\u7981\u6b62\u7684\uff0c\u6539\u6210\u4e0b\u9762\u7684\u4ee3\u7801\u540e\u5373\u53ef\u7f16\u8bd1\u901a\u8fc7\uff1a 1 std :: regex r1 ( nullptr ); // \u663e\u5f0f\u6784\u9020 \u2003 \u2003\u4e0a\u6587\u4e2demplace_back\u53ef\u4ee5\u63d2\u5165nullptr\u7684\u539f\u56e0\u662f\u56e0\u4e3aemplace_back\u662f\u5c06nullptr\u53c2\u6570\u901a\u8fc7\u5b8c\u7f8e\u8f6c\u53d1\u540e\u4f20\u5165\u5230\u5bb9\u5668\u4e2d\u76f4\u63a5\u663e\u5f0f\u6784\u9020\u6b63\u5219\u5bf9\u8c61\u3002 \u2003 \u2003\u7efc\u4e0a\u6240\u8ff0\uff0c\u5f53\u4f7f\u7528 emplace \u7cfb\u5217\u51fd\u6570\u7684\u65f6\u5019\u8981\u7279\u522b\u6ce8\u610f\u786e\u4fdd\u4f20\u9012\u6b63\u786e\u7684\u53c2\u6570\uff0c\u56e0\u4e3a\u663e\u5f0f\u6784\u9020\u51fd\u6570\u88ab\u8ba4\u4e3a\u662f\u7f16\u8bd1\u5668\u8bd5\u56fe\u627e\u4e86\u4e00\u79cd\u6b63\u786e\u7684\u65b9\u5f0f\u6765\u8ba9\u4f60\u7684\u4ee3\u7801\u6709\u6548\u3002","title":"Item42 Consider emplacement instead of insertion"},{"location":"%E5%8D%9A%E5%AE%A2/doc/envoy/dispatcher/","text":"Envoy\u6e90\u7801\u5206\u6790\u4e4bDispatcher Dispatcher \u5728Envoy\u7684\u4ee3\u7801\u4e2d Dispatcher \u662f\u968f\u5904\u53ef\u89c1\u7684\uff0c\u53ef\u4ee5\u8bf4\u5728Envoy\u4e2d\u6709\u7740\u4e3e\u8db3\u8f7b\u91cd\u7684\u5730\u4f4d\uff0c\u4e00\u4e2a Dispatcher \u5c31\u662f\u4e00\u4e2a EventLoop \uff0c\u5176\u627f\u62c5\u4e86\u4efb\u52a1\u961f\u5217\u3001\u7f51\u7edc\u4e8b\u4ef6\u5904\u7406\u3001\u5b9a\u65f6\u5668\u3001\u4fe1\u53f7\u5904\u7406\u7b49\u6838\u5fc3\u529f\u80fd\u3002\u5728 Envoy threading model \u8fd9\u7bc7\u6587\u7ae0\u6240\u63d0\u5230\u7684 EventLoop ( Each worker thread runs a \u201cnon-blocking\u201d event loop )\u6307\u7684\u5c31\u662f\u8fd9\u4e2a Dispatcher \u5bf9\u8c61\u3002\u8fd9\u4e2a\u90e8\u5206\u7684\u4ee3\u7801\u76f8\u5bf9\u8f83\u72ec\u7acb\uff0c\u548c\u5176\u4ed6\u6a21\u5757\u8026\u5408\u4e5f\u6bd4\u8f83\u5c11\uff0c\u4f46\u91cd\u8981\u6027\u5374\u4e0d\u8a00\u800c\u55bb\u3002\u4e0b\u9762\u662f\u4e0e Dispatcher \u76f8\u5173\u7684\u7c7b\u56fe\uff0c\u5728\u63a5\u4e0b\u6765\u4f1a\u5bf9\u5176\u4e2d\u7684\u5173\u952e\u6982\u5ff5\u8fdb\u884c\u4ecb\u7ecd\u3002 Dispatcher \u548c Libevent Dispatcher \u672c\u8d28\u4e0a\u5c31\u662f\u4e00\u4e2a EventLoop \uff0cEnvoy\u5e76\u6ca1\u6709\u91cd\u65b0\u5b9e\u73b0\uff0c\u800c\u662f\u590d\u7528\u4e86Libevent\u4e2d\u7684 event_base \uff0c\u5728Libevent\u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u4e86\u4e8c\u6b21\u5c01\u88c5\u5e76\u62bd\u8c61\u51fa\u4e00\u4e9b\u4e8b\u4ef6\u7c7b\uff0c\u6bd4\u5982 FileEvent \u3001 SignalEvent \u3001 Timer \u7b49\u3002Libevent\u662f\u4e00\u4e2aC\u5e93\uff0c\u800cEnvoy\u662fC++\uff0c\u4e3a\u4e86\u907f\u514d\u624b\u52a8\u7ba1\u7406\u8fd9\u4e9bC\u7ed3\u6784\u7684\u5185\u5b58\uff0cEnvoy\u901a\u8fc7\u7ee7\u627f unique_ptr \u7684\u65b9\u5f0f\u91cd\u65b0\u5c01\u88c5\u4e86\u8fd9\u4e9blibevent\u66b4\u9732\u51fa\u6765\u7684C\u7ed3\u6784\u3002 1 2 3 4 5 6 template < class T , void ( * deleter )( T * ) > class CSmartPtr : public std :: unique_ptr < T , void ( * )( T * ) > { public : CSmartPtr () : std :: unique_ptr < T , void ( * )( T * ) > ( nullptr , deleter ) {} CSmartPtr ( T * object ) : std :: unique_ptr < T , void ( * )( T * ) > ( object , deleter ) {} }; \u901a\u8fc7 CSmartPtr \u5c31\u53ef\u4ee5\u5c06Libevent\u4e2d\u7684\u4e00\u4e9bC\u6570\u636e\u7ed3\u6784\u7684\u5185\u5b58\u901a\u8fc7 RAII \u673a\u5236\u81ea\u52a8\u7ba1\u7406\u8d77\u6765\uff0c\u4f7f\u7528\u65b9\u5f0f\u5982\u4e0b: 1 2 3 4 5 6 7 8 9 10 11 12 13 extern \"C\" { void event_base_free ( event_base * ); } struct evbuffer ; extern \"C\" { void evbuffer_free ( evbuffer * ); } ..... typedef CSmartPtr < event_base , event_base_free > BasePtr ; typedef CSmartPtr < evbuffer , evbuffer_free > BufferPtr ; typedef CSmartPtr < bufferevent , bufferevent_free > BufferEventPtr ; typedef CSmartPtr < evconnlistener , evconnlistener_free > ListenerPtr ; \u5728Libevent\u4e2d\u65e0\u8bba\u662f\u5b9a\u65f6\u5668\u5230\u671f\u3001\u6536\u5230\u4fe1\u53f7\u3001\u8fd8\u662f\u6587\u4ef6\u53ef\u8bfb\u5199\u7b49\u90fd\u662f\u4e8b\u4ef6\uff0c\u7edf\u4e00\u4f7f\u7528 event \u7c7b\u578b\u6765\u8868\u793a\uff0cEnvoy\u4e2d\u5219\u5c06 event \u4f5c\u4e3a ImplBase \u7684\u6210\u5458\uff0c\u7136\u540e\u8ba9\u6240\u6709\u7684\u4e8b\u4ef6\u7c7b\u578b\u7684\u5bf9\u8c61\u90fd\u7ee7\u627f ImplBase \uff0c\u4ece\u800c\u5b9e\u73b0\u4e86\u4e8b\u4ef6\u7684\u62bd\u8c61\u3002 1 2 3 4 5 6 class ImplBase { protected : ~ ImplBase (); event raw_event_ ; }; SignalEvent SignalEvent\u7684\u5b9e\u73b0\u5f88\u7b80\u5355\uff0c\u901a\u8fc7 evsignal_assign \u6765\u521d\u59cb\u5316\u4e8b\u4ef6\uff0c\u7136\u540e\u901a\u8fc7 evsignal_add \u6dfb\u52a0\u4e8b\u4ef6\u4f7f\u4e8b\u4ef6\u6210\u4e3a\u672a\u51b3\u72b6\u6001(\u5173\u4e8eLibevent\u4e8b\u4ef6\u72b6\u6001\u89c1\u9644\u5f55)\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class SignalEventImpl : public SignalEvent , ImplBase { public : // signal_num: \u8981\u8bbe\u7f6e\u7684\u4fe1\u53f7\u503c // cb: \u4fe1\u53f7\u4e8b\u4ef6\u7684\u5904\u7406\u51fd\u6570 SignalEventImpl ( DispatcherImpl & dispatcher , int signal_num , SignalCb cb ); private : SignalCb cb_ ; }; SignalEventImpl :: SignalEventImpl ( DispatcherImpl & dispatcher , int signal_num , SignalCb cb ) : cb_ ( cb ) { evsignal_assign ( & raw_event_ , & dispatcher . base (), signal_num , []( evutil_socket_t , short , void * arg ) -> void { static_cast < SignalEventImpl *> ( arg ) -> cb_ (); }, this ); evsignal_add ( & raw_event_ , nullptr ); } Timer Timer\u4e8b\u4ef6\u66b4\u9732\u4e86\u4e24\u4e2a\u63a5\u53e3\u4e00\u4e2a\u7528\u4e8e\u5173\u95edTimer\uff0c\u53e6\u5916\u4e00\u4e2a\u5219\u7528\u4e8e\u542f\u52a8Timer\uff0c\u9700\u8981\u4f20\u9012\u4e00\u4e2a\u65f6\u95f4\u6765\u8bbe\u7f6eTimer\u7684\u5230\u671f\u65f6\u95f4\u95f4\u9694\u3002 1 2 3 4 5 6 class Timer { public : virtual ~ Timer () {} virtual void disableTimer () PURE ; virtual void enableTimer ( const std :: chrono :: milliseconds & d ) PURE ; }; \u521b\u5efaTimer\u7684\u65f6\u5019\u4f1a\u901a\u8fc7 evtimer_assgin \u5bf9event\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u8fd9\u4e2a\u65f6\u5019\u4e8b\u4ef6\u8fd8\u5904\u4e8e\u672a\u51b3\u72b6\u6001\u800c\u4e0d\u4f1a\u89e6\u53d1\uff0c\u9700\u8981\u901a\u8fc7 event_add \u6dfb\u52a0\u5230 Dispatcher \u4e2d\u624d\u80fd\u88ab\u89e6\u53d1\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class TimerImpl : public Timer , ImplBase { public : TimerImpl ( Libevent :: BasePtr & libevent , TimerCb cb ); // Timer void disableTimer () override ; void enableTimer ( const std :: chrono :: milliseconds & d ) override ; private : TimerCb cb_ ; }; TimerImpl :: TimerImpl ( DispatcherImpl & dispatcher , TimerCb cb ) : cb_ ( cb ) { ASSERT ( cb_ ); evtimer_assign ( & raw_event_ , & dispatcher . base (), []( evutil_socket_t , short , void * arg ) -> void { static_cast < TimerImpl *> ( arg ) -> cb_ (); }, this ); } disableTimer \u88ab\u8c03\u7528\u65f6\u5176\u5185\u90e8\u4f1a\u8c03\u7528 event_del \u6765\u5220\u9664\u4e8b\u4ef6\uff0c\u4f7f\u4e8b\u4ef6\u6210\u4e3a\u975e\u672a\u51b3\u72b6\u6001\uff0c enableTimer \u88ab\u8c03\u7528\u65f6\u5219\u95f4\u63a5\u8c03\u7528 event_add \u4f7f\u4e8b\u4ef6\u6210\u4e3a\u672a\u51b3\u72b6\u6001\uff0c\u8fd9\u6837\u4e00\u65e6\u8d85\u65f6\u65f6\u95f4\u5230\u4e86\u5c31\u4f1a\u89e6\u53d1\u8d85\u65f6\u4e8b\u4ef6\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 void TimerImpl::disableTimer () { event_del ( & raw_event_ ); } void TimerImpl::enableTimer ( const std :: chrono :: milliseconds & d ) { if ( d . count () == 0 ) { event_active ( & raw_event_ , EV_TIMEOUT , 0 ); } else { std :: chrono :: microseconds us = std :: chrono :: duration_cast < std :: chrono :: microseconds > ( d ); timeval tv ; tv . tv_sec = us . count () / 1000000 ; tv . tv_usec = us . count () % 1000000 ; event_add ( & raw_event_ , & tv ); } } \u4e0a\u9762\u7684\u4ee3\u7801\u5728\u8ba1\u7b97 timer \u65f6\u95f4 timeval \u7684\u65f6\u5019\u5b9e\u73b0\u7684\u5e76\u4e0d\u4f18\u96c5\uff0c\u5e94\u8be5\u907f\u514d\u4f7f\u7528\u50cf 1000000 \u8fd9\u6837\u7684\u4e0d\u5177\u5907\u53ef\u8bfb\u6027\u7684\u6570\u5b57\u5e38\u91cf\uff0c\u793e\u533a\u4e2d\u6709\u4eba\u5efa\u8bae\u53ef\u4ee5\u6539\u6210\u5982\u4e0b\u7684\u5f62\u5f0f\u3002 1 2 3 4 5 auto secs = std :: chrono :: duration_cast < std :: chrono :: seconds > ( d ); auto usecs = std :: chrono :: duration_cast < std :: chrono :: microseconds > ( d - secs ); tv . tv_secs = secs . count (); tv . tv_usecs = usecs . count (); FileEvent socket \u5957\u63a5\u5b57\u76f8\u5173\u7684\u4e8b\u4ef6\u88ab\u5c01\u88c5\u4e3a FileEvent \uff0c\u5176\u4e0a\u66b4\u9732\u4e86\u4e8c\u4e2a\u63a5\u53e3\uff1a activate \u7528\u4e8e\u4e3b\u52a8\u89e6\u53d1\u4e8b\u4ef6\uff0c\u5178\u578b\u7684\u4f7f\u7528\u573a\u666f\u6bd4\u5982: \u5524\u9192EventLoop\u3001Write Buffer\u6709\u6570\u636e\uff0c\u53ef\u4ee5\u4e3b\u52a8\u89e6\u53d1\u4e0b\u53ef\u5199\u4e8b\u4ef6(Envoy\u4e2d\u7684\u5178\u578b\u4f7f\u7528\u573a\u666f)\u7b49\uff1b setEnabled \u7528\u4e8e\u8bbe\u7f6e\u4e8b\u4ef6\u7c7b\u578b\uff0c\u5c06\u4e8b\u4ef6\u6dfb\u52a0\u5230 EventLoop \u4e2d\u4f7f\u5176\u6210\u4e3a\u672a\u51b3\u72b6\u6001\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 void FileEventImpl::activate ( uint32_t events ) { int libevent_events = 0 ; if ( events & FileReadyType :: Read ) { libevent_events |= EV_READ ; } if ( events & FileReadyType :: Write ) { libevent_events |= EV_WRITE ; } if ( events & FileReadyType :: Closed ) { libevent_events |= EV_CLOSED ; } ASSERT ( libevent_events ); event_active ( & raw_event_ , libevent_events , 0 ); } void FileEventImpl::setEnabled ( uint32_t events ) { event_del ( & raw_event_ ); assignEvents ( events ); event_add ( & raw_event_ , nullptr ); } \u4efb\u52a1\u961f\u5217 Dispatcher \u7684\u5185\u90e8\u6709\u4e00\u4e2a\u4efb\u52a1\u961f\u5217\uff0c\u4e5f\u4f1a\u521b\u5efa\u4e00\u4e2a\u7ebf\u7a0b\u4e13\u4eec\u5904\u7406\u4efb\u52a1\u961f\u5217\u4e2d\u7684\u4efb\u52a1\u3002\u901a\u8fc7 Dispatcher \u7684 post \u65b9\u6cd5\u53ef\u4ee5\u5c06\u4efb\u52a1\u6295\u9012\u5230\u4efb\u52a1\u961f\u5217\u4e2d\uff0c\u4ea4\u7ed9 Dispatcher \u5185\u7684\u7ebf\u7a0b\u53bb\u5904\u7406\u3002 1 2 3 4 5 6 7 8 9 10 11 void DispatcherImpl::post ( std :: function < void () > callback ) { bool do_post ; { Thread :: LockGuard lock ( post_lock_ ); do_post = post_callbacks_ . empty (); post_callbacks_ . push_back ( callback ); } if ( do_post ) { post_timer_ -> enableTimer ( std :: chrono :: milliseconds ( 0 )); } } post \u65b9\u6cd5\u5c06\u4f20\u9012\u8fdb\u6765\u7684 callback \u6240\u4ee3\u8868\u7684\u4efb\u52a1\uff0c\u6dfb\u52a0\u5230 post_callbacks_ \u6240\u4ee3\u8868\u7684\u7c7b\u578b\u4e3a vector<callback> \u7684\u6210\u5458\u8868\u53d8\u91cf\u4e2d\u3002\u5982\u679c post_callbacks_ \u4e3a\u7a7a\u7684\u8bdd\uff0c\u8bf4\u660e\u80cc\u540e\u7684\u5904\u7406\u7ebf\u7a0b\u662f\u5904\u4e8e\u975e\u6d3b\u52a8\u72b6\u6001\uff0c\u8fd9\u65f6\u901a\u8fc7 post_timer_ \u8bbe\u7f6e\u4e00\u4e2a\u8d85\u65f6\u65f6\u95f4\u65f6\u95f4\u4e3a0\u7684\u65b9\u5f0f\u6765\u5524\u9192\u5b83\u3002 post_timer_ \u5728\u6784\u9020\u7684\u65f6\u5019\u5c31\u5df2\u7ecf\u8bbe\u7f6e\u597d\u5bf9\u5e94\u7684 callback \u4e3a runPostCallbacks \uff0c\u5bf9\u5e94\u4ee3\u7801\u5982\u4e0b: 1 2 3 4 5 6 7 DispatcherImpl :: DispatcherImpl ( TimeSystem & time_system , Buffer :: WatermarkFactoryPtr && factory ) : ...... post_timer_ ( createTimer ([ this ]() -> void { runPostCallbacks (); })), current_to_delete_ ( & to_delete_1_ ) { RELEASE_ASSERT ( Libevent :: Global :: initialized (), \"\" ); } runPostCallbacks \u662f\u4e00\u4e2awhile\u5faa\u73af\uff0c\u6bcf\u6b21\u90fd\u4ece post_callbacks_ \u4e2d\u53d6\u51fa\u4e00\u4e2a callback \u6240\u4ee3\u8868\u7684\u4efb\u52a1\u53bb\u8fd0\u884c\uff0c\u76f4\u5230 post_callbacks_ \u4e3a\u7a7a\u3002\u6bcf\u6b21\u8fd0\u884c runPostCallbacks \u90fd\u4f1a\u786e\u4fdd\u6240\u6709\u7684\u4efb\u52a1\u90fd\u6267\u884c\u5b8c\u3002\u663e\u7136\uff0c\u5728 runPostCallbacks \u88ab\u7ebf\u7a0b\u6267\u884c\u7684\u671f\u95f4\u5982\u679c post \u8fdb\u6765\u4e86\u65b0\u7684\u4efb\u52a1\uff0c\u90a3\u4e48\u65b0\u4efb\u52a1\u76f4\u63a5\u8ffd\u52a0\u5230 post_callbacks_ \u5c3e\u90e8\u5373\u53ef\uff0c\u800c\u65e0\u9700\u505a\u5524\u9192\u7ebf\u7a0b\u8fd9\u4e00\u52a8\u4f5c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 void DispatcherImpl::runPostCallbacks () { while ( true ) { std :: function < void () > callback ; { Thread :: LockGuard lock ( post_lock_ ); if ( post_callbacks_ . empty ()) { return ; } callback = post_callbacks_ . front (); post_callbacks_ . pop_front (); } callback (); } } DeferredDeletable \u6700\u540e\u8bb2\u4e00\u4e0b Dispatcher \u4e2d\u6bd4\u8f83\u96be\u7406\u89e3\u4e5f\u5f88\u91cd\u8981\u7684 DeferredDeletable \uff0c\u5b83\u662f\u4e00\u4e2a\u7a7a\u63a5\u53e3\uff0c\u6240\u6709\u8981\u8fdb\u884c\u5ef6\u8fdf\u6790\u6784\u7684\u5bf9\u8c61\u90fd\u8981\u7ee7\u627f\u81ea\u8fd9\u4e2a\u7a7a\u63a5\u53e3\u3002\u5728Envoy\u7684\u4ee3\u7801\u4e2d\u50cf\u4e0b\u9762\u8fd9\u6837\u7ee7\u627f\u81ea DeferredDeletable \u7684\u7c7b\u968f\u5904\u53ef\u89c1\u3002 1 2 3 4 class DeferredDeletable { public : virtual ~ DeferredDeletable () {} }; \u90a3\u4f55\u4e3a\u5ef6\u8fdf\u6790\u6784\u5462\uff1f\u7528\u5728\u54ea\u4e2a\u573a\u666f\u5462?\u5ef6\u8fdf\u6790\u6784\u6307\u7684\u662f\u5c06\u6790\u6784\u7684\u52a8\u4f5c\u4ea4\u7531 Dispatcher \u6765\u5b8c\u6210\uff0c\u6240\u4ee5 DeferredDeletable \u548c Dispatcher \u5bc6\u5207\u76f8\u5173\u3002 Dispatcher \u5bf9\u8c61\u6709\u4e00\u4e2a vector \u4fdd\u5b58\u4e86\u6240\u6709\u8981\u5ef6\u8fdf\u6790\u6784\u7684\u5bf9\u8c61\u3002 1 2 3 4 5 6 7 8 class DispatcherImpl : public Dispatcher { ...... private : ........ std :: vector < DeferredDeletablePtr > to_delete_1_ ; std :: vector < DeferredDeletablePtr > to_delete_2_ ; std :: vector < DeferredDeletablePtr >* current_to_delete_ ; } to_delete_1_ \u548c to_delete_2_ \u5c31\u662f\u7528\u6765\u5b58\u653e\u6240\u6709\u7684\u8981\u5ef6\u8fdf\u6790\u6784\u7684\u5bf9\u8c61\uff0c\u8fd9\u91cc\u4f7f\u7528\u4e24\u4e2a vector \u5b58\u653e\uff0c\u4e3a\u4ec0\u4e48\u8981\u8fd9\u6837\u505a\u5462?\u3002 current_to_delete_ \u59cb\u7ec8\u6307\u5411\u5f53\u524d\u6b63\u8981\u6790\u6784\u7684\u5bf9\u8c61\u5217\u8868\uff0c\u6bcf\u6b21\u6267\u884c\u5b8c\u6790\u6784\u540e\u5c31\u4ea4\u66ff\u6307\u5411\u53e6\u5916\u4e00\u4e2a\u5bf9\u8c61\u5217\u8868\uff0c\u6765\u56de\u4ea4\u66ff\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 void DispatcherImpl::clearDeferredDeleteList () { ASSERT ( isThreadSafe ()); std :: vector < DeferredDeletablePtr >* to_delete = current_to_delete_ ; size_t num_to_delete = to_delete -> size (); if ( deferred_deleting_ || ! num_to_delete ) { return ; } ENVOY_LOG ( trace , \"clearing deferred deletion list (size={})\" , num_to_delete ); if ( current_to_delete_ == & to_delete_1_ ) { current_to_delete_ = & to_delete_2_ ; } else { current_to_delete_ = & to_delete_1_ ; } deferred_deleting_ = true ; for ( size_t i = 0 ; i < num_to_delete ; i ++ ) { ( * to_delete )[ i ]. reset (); } to_delete -> clear (); deferred_deleting_ = false ; } \u4e0a\u9762\u7684\u4ee3\u7801\u5728\u6267\u884c\u5bf9\u8c61\u6790\u6784\u7684\u65f6\u5019\u5148\u4f7f\u7528 to_delete \u6765\u6307\u5411\u5f53\u524d\u6b63\u8981\u6790\u6784\u7684\u5bf9\u8c61\u5217\u8868\uff0c\u7136\u540e\u5c06 current_to_delete_ \u6307\u5411\u53e6\u5916\u4e00\u4e2a\u5217\u8868\uff0c\u8fd9\u6837\u5728\u6dfb\u52a0\u5ef6\u8fdf\u5220\u9664\u7684\u5bf9\u8c61\u65f6\uff0c\u5c31\u53ef\u4ee5\u505a\u5230\u5b89\u5168\u7684\u628a\u5bf9\u8c61\u6dfb\u52a0\u5230\u5217\u8868\u4e2d\u4e86\u3002\u56e0\u4e3a deferredDelete \u548c clearDeferredDeleteList \u90fd\u662f\u5728\u540c\u4e00\u4e2a\u7ebf\u7a0b\u4e2d\u8fd0\u884c\uff0c\u6240\u4ee5 current_to_delete_ \u662f\u4e00\u4e2a\u666e\u901a\u7684\u6307\u9488\uff0c\u53ef\u4ee5\u5b89\u5168\u7684\u66f4\u6539\u6307\u9488\u6307\u5411\u53e6\u5916\u4e00\u4e2a\uff0c\u800c\u4e0d\u7528\u62c5\u5fc3\u6709\u7ebf\u7a0b\u5b89\u5168\u95ee\u9898\u3002 1 2 3 4 5 6 7 8 void DispatcherImpl::deferredDelete ( DeferredDeletablePtr && to_delete ) { ASSERT ( isThreadSafe ()); current_to_delete_ -> emplace_back ( std :: move ( to_delete )); ENVOY_LOG ( trace , \"item added to deferred deletion list (size={})\" , current_to_delete_ -> size ()); if ( 1 == current_to_delete_ -> size ()) { deferred_delete_timer_ -> enableTimer ( std :: chrono :: milliseconds ( 0 )); } } \u5f53\u6709\u8981\u8fdb\u884c\u5ef6\u8fdf\u6790\u6784\u7684\u5bf9\u8c61\u65f6\uff0c\u8c03\u7528 deferredDelete \u5373\u53ef\uff0c\u8fd9\u4e2a\u51fd\u6570\u5185\u90e8\u4f1a\u901a\u8fc7 current_to_delete_ \u628a\u5bf9\u8c61\u653e\u5230\u8981\u5ef6\u8fdf\u6790\u6784\u7684\u5217\u8868\u4e2d\uff0c\u6700\u540e\u5224\u65ad\u4e0b\u5f53\u524d\u8981\u5ef6\u8fdf\u6790\u6784\u7684\u5217\u8868\u5927\u5c0f\u662f\u5426\u662f1\uff0c\u5982\u679c\u662f1\u8868\u660e\u8fd9\u662f\u7b2c\u4e00\u6b21\u6dfb\u52a0\u5ef6\u8fdf\u6790\u6784\u7684\u5bf9\u8c61\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u901a\u8fc7 deferred_delete_timer_ \u628a\u80cc\u540e\u7684\u7ebf\u7a0b\u5524\u9192\u6267\u884c clearDeferredDeleteList \u51fd\u6570\u3002\u8fd9\u6837\u505a\u7684\u539f\u56e0\u662f\u907f\u514d\u591a\u6b21\u5524\u9192\uff0c\u56e0\u4e3a\u6709\u4e00\u79cd\u60c5\u51b5\u662f\u7ebf\u7a0b\u5df2\u7ecf\u5524\u9192\u4e86\u6b63\u5728\u6267\u884c clearDeferredDeleteList \uff0c\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u53c8\u6709\u5176\u4ed6\u7684\u5bf9\u8c61\u9700\u8981\u6790\u6784\u800c\u52a0\u5165\u5230 vector \u4e2d\u3002 \u5230\u6b64\u4e3a\u6b62 deferredDelete \u7684\u5b9e\u73b0\u539f\u7406\u5c31\u57fa\u672c\u5206\u6790\u5b8c\u4e86\uff0c\u53ef\u4ee5\u770b\u51fa\u5b83\u7684\u5b9e\u73b0\u548c\u4efb\u52a1\u961f\u5217\u7684\u5b9e\u73b0\u5f88\u7c7b\u4f3c\uff0c\u53ea\u4e0d\u8fc7\u4e00\u4e2a\u662f\u5faa\u73af\u6267\u884c callback \u6240\u4ee3\u8868\u7684\u4efb\u52a1\uff0c\u53e6\u4e00\u4e2a\u662f\u5bf9\u5bf9\u8c61\u8fdb\u884c\u6790\u6784\u3002\u6700\u540e\u6211\u4eec\u6765\u770b\u4e00\u4e0b deferredDelete \u7684\u5e94\u7528\u573a\u666f\uff0c\u5374\u201c\u4e3a\u4f55\u8981\u8fdb\u884c\u5ef6\u8fdf\u6790\u6784?\u201d\u5728Envoy\u7684\u6e90\u4ee3\u7801\u4e2d\u7ecf\u5e38\u4f1a\u770b\u5230\u50cf\u4e0b\u9762\u8fd9\u6837\u7684\u4ee3\u7801\u7247\u6bb5\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 ConnectionImpl :: ConnectionImpl ( Event :: Dispatcher & dispatcher , ConnectionSocketPtr && socket , TransportSocketPtr && transport_socket , bool connected ) { ...... } // \u4f20\u9012\u88f8\u6307\u9488\u5230\u56de\u8c03\u4e2d file_event_ = dispatcher_ . createFileEvent ( fd (), [ this ]( uint32_t events ) -> void { onFileEvent ( events ); }, Event :: FileTriggerType :: Edge , Event :: FileReadyType :: Read | Event :: FileReadyType :: Write ); ...... } \u4f20\u9012\u7ed9 Dispatcher \u7684 callback \u90fd\u662f\u901a\u8fc7\u88f8\u6307\u9488\u7684\u65b9\u5f0f\u8fdb\u884c\u56de\u8c03\uff0c\u5982\u679c\u8fdb\u884c\u56de\u8c03\u7684\u65f6\u5019\u5bf9\u8c61\u5df2\u7ecf\u6790\u6784\u4e86\uff0c\u5c31\u4f1a\u51fa\u73b0\u91ce\u6307\u9488\u7684\u95ee\u9898\uff0c\u6211\u76f8\u4fe1C++\u6c34\u5e73\u8fd8\u53ef\u4ee5\u7684\u540c\u5b66\u90fd\u4f1a\u770b\u51fa\u8fd9\u4e2a\u95ee\u9898\uff0c\u9664\u975e\u80fd\u5728\u903b\u8f91\u4e0a\u4fdd\u8bc1 Dispatcher \u7684\u751f\u547d\u5468\u671f\u6bd4\u6240\u6709\u5bf9\u8c61\u90fd\u77ed\uff0c\u8fd9\u6837\u5c31\u80fd\u4fdd\u8bc1\u5728\u56de\u8c03\u7684\u65f6\u5019\u5bf9\u8c61\u80af\u5b9a\u4e0d\u4f1a\u6790\u6784\uff0c\u4f46\u662f\u8fd9\u4e0d\u53ef\u80fd\u6210\u7acb\u7684\uff0c\u56e0\u4e3a Dispatcher \u662f EventLoop \u7684\u6838\u5fc3\u3002 \u4e00\u4e2a\u7ebf\u7a0b\u8fd0\u884c\u4e00\u4e2a EventLoop \u76f4\u5230\u7ebf\u7a0b\u7ed3\u675f\uff0c Dispatcher \u5bf9\u8c61\u624d\u4f1a\u6790\u6784\uff0c\u8fd9\u610f\u5473\u7740 Dispatcher \u5bf9\u8c61\u7684\u751f\u547d\u5468\u671f\u662f\u6700\u957f\u7684\u3002\u6240\u4ee5\u4ece\u903b\u8f91\u4e0a\u6ca1\u529e\u6cd5\u4fdd\u8bc1\u8fdb\u884c\u56de\u8c03\u7684\u65f6\u5019\u5bf9\u8c61\u6ca1\u6709\u6790\u6784\u3002\u53ef\u80fd\u6709\u4eba\u4f1a\u6709\u7591\u95ee\uff0c\u5bf9\u8c61\u5728\u6790\u6784\u7684\u65f6\u5019\u628a\u6ce8\u518c\u7684\u4e8b\u4ef6\u53d6\u6d88\u4e0d\u5c31\u53ef\u4ee5\u907f\u514d\u91ce\u6307\u9488\u7684\u95ee\u9898\u5417? \u90a3\u5982\u679c\u4e8b\u4ef6\u5df2\u7ecf\u89e6\u53d1\u4e86\uff0c callback \u6b63\u5728\u7b49\u5f85\u8fd0\u884c\u5462\uff1f \u53c8\u6216\u8005 callback \u8fd0\u884c\u4e86\u4e00\u534a\u5462\uff1f\u524d\u8005libevent\u662f\u53ef\u4ee5\u4fdd\u8bc1\u7684\uff0c\u5728\u8c03\u7528 event_del \u7684\u65f6\u5019\u53ef\u4ee5\u628a\u5904\u4e8e\u7b49\u5f85\u8fd0\u884c\u7684\u4e8b\u4ef6\u53d6\u6d88\u6389\uff0c\u4f46\u662f\u540e\u8005\u5c31\u65e0\u80fd\u4e3a\u529b\u4e86\uff0c\u8fd9\u4e2a\u65f6\u5019\u5982\u679c\u5bf9\u8c61\u6790\u6784\u4e86\uff0c\u90a3\u884c\u4e3a\u5c31\u662f\u672a\u5b9a\u4e49\u4e86\u3002\u6cbf\u7740\u8fd9\u4e2a\u601d\u8def\u60f3\u4e00\u60f3\uff0c\u662f\u4e0d\u662f\u53ea\u8981\u4fdd\u8bc1\u5bf9\u8c61\u6790\u6784\u7684\u65f6\u5019\u6ca1\u6709 callback \u6b63\u5728\u8fd0\u884c\u5c31\u53ef\u4ee5\u89e3\u51b3\u95ee\u9898\u4e86\u5462\uff1f\u662f\u7684\uff0c\u53ea\u8981\u4fdd\u8bc1\u6240\u6709\u5728\u6267\u884c\u4e2d\u7684 callback \u6267\u884c\u5b8c\u4e86\uff0c\u518d\u505a\u5bf9\u8c61\u6790\u6784\u5c31\u53ef\u4ee5\u4e86\u3002\u53ef\u4ee5\u5229\u7528 Dispatcher \u662f\u987a\u5e8f\u6267\u884c\u6240\u6709 callback \u7684\u7279\u70b9\uff0c\u5411 Dispatcher \u4e2d\u63d2\u5165\u4e00\u4e2a\u4efb\u52a1\u5c31\u662f\u7528\u6765\u5bf9\u8c61\u6790\u6784\u7684\uff0c\u90a3\u4e48\u5f53\u8fd9\u4e2a\u4efb\u52a1\u6267\u884c\u7684\u65f6\u5019\u662f\u53ef\u4ee5\u4fdd\u8bc1\u6ca1\u6709\u5176\u4ed6\u4efb\u4f55 callback \u5728\u8fd0\u884c\u3002\u901a\u8fc7\u8fd9\u4e2a\u65b9\u6cd5\u5c31\u5b8c\u7f8e\u89e3\u51b3\u4e86\u8fd9\u91cc\u9047\u5230\u7684\u91ce\u6307\u9488\u95ee\u9898\u4e86\u3002 \u6216\u8bb8\u6709\u4eba\u53c8\u4f1a\u60f3\uff0c\u8fd9\u91cc\u662f\u4e0d\u662f\u53ef\u4ee5\u7528 shared_ptr \u548c shared_from_this \u6765\u89e3\u8fd9\u4e2a\u5462? \u662f\u7684\uff0c\u8fd9\u662f\u89e3\u51b3\u591a\u7ebf\u7a0b\u73af\u5883\u4e0b\u5bf9\u8c61\u6790\u6784\u7684\u79d8\u5bc6\u6b66\u5668\uff0c\u901a\u8fc7\u5ef6\u957f\u5bf9\u8c61\u7684\u751f\u547d\u5468\u671f\uff0c\u628a\u5bf9\u8c61\u7684\u751f\u547d\u5468\u671f\u5ef6\u957f\u5230\u548c callback \u4e00\u6837\uff0c\u7b49 callback \u6267\u884c\u5b8c\u518d\u8fdb\u884c\u6790\u6784\uff0c\u540c\u6837\u53ef\u4ee5\u8fbe\u5230\u6548\u679c\uff0c\u4f46\u662f\u8fd9\u5e26\u6765\u4e86\u4e24\u4e2a\u95ee\u9898\uff0c\u7b2c\u4e00\u5c31\u662f\u5bf9\u8c61\u751f\u547d\u5468\u671f\u88ab\u65e0\u9650\u62c9\u957f\uff0c\u867d\u7136\u5ef6\u8fdf\u6790\u6784\u4e5f\u62c9\u957f\u4e86\u751f\u547d\u5468\u671f\uff0c\u4f46\u662f\u65f6\u95f4\u662f\u53ef\u9884\u671f\u7684\uff0c\u4e00\u65e6 EventLoop \u6267\u884c\u4e86 clearDeferredDeleteList \u4efb\u52a1\u5c31\u4f1a\u7acb\u523b\u88ab\u56de\u6536\uff0c\u800c\u901a\u8fc7 shared_ptr \u7684\u65b9\u5f0f\u5176\u751f\u547d\u5468\u671f\u53d6\u51b3\u4e8e callback \u4f55\u65f6\u8fd0\u884c\uff0c\u800c callback \u4f55\u65f6\u8fd0\u884c\u8fd9\u4e2a\u662f\u6ca1\u529e\u6cd5\u4fdd\u8bc1\u7684\uff0c\u6bd4\u5982\u4e00\u4e2a\u7b49\u5f85 socket \u7684\u53ef\u8bfb\u4e8b\u4ef6\u8fdb\u884c\u56de\u8c03\uff0c\u5982\u679c\u5bf9\u7aef\u4e00\u76f4\u4e0d\u53d1\u9001\u6570\u636e\uff0c\u90a3\u4e48 callback \u5c31\u4e00\u76f4\u4e0d\u4f1a\u88ab\u8fd0\u884c\uff0c\u5bf9\u8c61\u5c31\u4e00\u76f4\u65e0\u6cd5\u88ab\u6790\u6784\uff0c\u957f\u65f6\u95f4\u7d2f\u79ef\u4f1a\u5bfc\u81f4\u5185\u5b58\u4f7f\u7528\u7387\u4e0a\u6da8\u3002\u7b2c\u4e8c\u5c31\u662f\u5728\u4f7f\u7528\u65b9\u5f0f\u4e0a\u4fb5\u5165\u6027\u8f83\u5f3a\uff0c\u9700\u8981\u5f3a\u5236\u4f7f\u7528 shared_ptr \u7684\u65b9\u5f0f\u521b\u5efa\u5bf9\u8c61\u3002 \u603b\u7ed3 Dispatcher \u603b\u7684\u6765\u8bf4\u5176\u5b9e\u73b0\u8fd8\u662f\u6bd4\u8f83\u7b80\u5355\u660e\u4e86\u7684\uff0c\u6bd4\u8f83\u5bb9\u6613\u9a8c\u8bc1\u5176\u6b63\u786e\u6027\uff0c\u540c\u6837\u529f\u80fd\u4e5f\u76f8\u5bf9\u8f83\u5f31\uff0c\u548cchromium\u7684 MessageLoop \u3001boost\u7684 asio \u90fd\u662f\u76f8\u4f3c\u7684\u7528\u9014\uff0c\u4f46\u662f\u529f\u80fd\u4e0a\u5dee\u5f97\u6bd4\u8f83\u591a\u3002\u597d\u5728\u8fd9\u662f\u4e13\u95e8\u7ed9Envoy\u8bbe\u8ba1\u7684\uff0c\u800c\u4e14Envoy\u7684\u573a\u666f\u4e5f\u6bd4\u8f83\u5355\u4e00\uff0c\u4e0d\u5fc5\u505a\u6210\u90a3\u4e48\u901a\u7528\u7684\u3002\u53e6\u5916\u4e00\u4e2a\u6211\u89c9\u5f97\u6bd4\u8f83\u5947\u602a\u7684\u662f\uff0c\u4e3a\u4ec0\u4e48\u5728 DeferredDeletable \u7684\u5b9e\u73b0\u4e2d\u8981\u7528 to_delete_1_ \u548c to_delete_2_ \u4e24\u4e2a\u961f\u5217\u4ea4\u66ff\u6765\u5b58\u653e\uff0c\u5176\u5b9e\u6309\u7167\u6211\u7684\u7406\u89e3\u4e00\u4e2a\u961f\u5217\u5373\u53ef\uff0c\u56e0\u4e3a clearDeferredDeleteList \u548c deferredDelete \u662f\u4fdd\u8bc1\u5728\u540c\u4e00\u4e2a\u7ebf\u7a0b\u4e2d\u6267\u884c\u7684\uff0c\u5c31\u548c Dispatcher \u7684\u4efb\u52a1\u961f\u5217\u4e00\u6837\uff0c\u7528\u4e00\u4e2a\u961f\u5217\u4fdd\u5b58\u6240\u6709\u8981\u6267\u884c\u7684\u4efb\u52a1\uff0c\u5faa\u73af\u7684\u6267\u884c\u5373\u53ef\u3002\u4f46\u662fEnvoy\u4e2d\u6ca1\u6709\u8fd9\u6837\u505a\uff0c\u6211\u7406\u89e3\u8fd9\u6837\u8bbe\u8ba1\u7684\u539f\u56e0\u53ef\u80fd\u662f\u56e0\u4e3a\u76f8\u6bd4\u4e8e\u4efb\u52a1\u961f\u5217\u6765\u8bf4\u5ef6\u8fdf\u6790\u6784\u7684\u91cd\u8981\u6027\u66f4\u4f4e\u4e00\u4e9b\uff0c\u5927\u91cf\u5bf9\u8c61\u7684\u6790\u6784\u5982\u679c\u4fdd\u5b58\u5728\u4e00\u4e2a\u961f\u5217\u4e2d\u5faa\u73af\u7684\u8fdb\u884c\u6790\u6784\u52bf\u5fc5\u4f1a\u5f71\u54cd\u5176\u4ed6\u5173\u952e\u4efb\u52a1\u7684\u6267\u884c\uff0c\u6240\u4ee5\u8fd9\u91cc\u62c6\u5206\u6210\u4e24\u4e2a\u961f\u5217\uff0c\u591a\u4e2a\u4efb\u52a1\u4ea4\u66ff\u7684\u6267\u884c\uff0c\u5c31\u597d\u6bd4\u628a\u4e00\u4e2a\u5927\u4efb\u52a1\u62c6\u5206\u6210\u4e86\u597d\u51e0\u4e2a\u5c0f\u4efb\u52a1\u987a\u5e8f\u6765\u6267\u884c\u3002 \u9644\u5f55 Libevent\u72b6\u6001\u8f6c\u6362\u56fe","title":"Envoy\u6e90\u7801\u5206\u6790\u4e4bDispatcher"},{"location":"%E5%8D%9A%E5%AE%A2/doc/envoy/dispatcher/#envoydispatcher","text":"","title":"Envoy\u6e90\u7801\u5206\u6790\u4e4bDispatcher"},{"location":"%E5%8D%9A%E5%AE%A2/doc/envoy/dispatcher/#dispatcher","text":"\u5728Envoy\u7684\u4ee3\u7801\u4e2d Dispatcher \u662f\u968f\u5904\u53ef\u89c1\u7684\uff0c\u53ef\u4ee5\u8bf4\u5728Envoy\u4e2d\u6709\u7740\u4e3e\u8db3\u8f7b\u91cd\u7684\u5730\u4f4d\uff0c\u4e00\u4e2a Dispatcher \u5c31\u662f\u4e00\u4e2a EventLoop \uff0c\u5176\u627f\u62c5\u4e86\u4efb\u52a1\u961f\u5217\u3001\u7f51\u7edc\u4e8b\u4ef6\u5904\u7406\u3001\u5b9a\u65f6\u5668\u3001\u4fe1\u53f7\u5904\u7406\u7b49\u6838\u5fc3\u529f\u80fd\u3002\u5728 Envoy threading model \u8fd9\u7bc7\u6587\u7ae0\u6240\u63d0\u5230\u7684 EventLoop ( Each worker thread runs a \u201cnon-blocking\u201d event loop )\u6307\u7684\u5c31\u662f\u8fd9\u4e2a Dispatcher \u5bf9\u8c61\u3002\u8fd9\u4e2a\u90e8\u5206\u7684\u4ee3\u7801\u76f8\u5bf9\u8f83\u72ec\u7acb\uff0c\u548c\u5176\u4ed6\u6a21\u5757\u8026\u5408\u4e5f\u6bd4\u8f83\u5c11\uff0c\u4f46\u91cd\u8981\u6027\u5374\u4e0d\u8a00\u800c\u55bb\u3002\u4e0b\u9762\u662f\u4e0e Dispatcher \u76f8\u5173\u7684\u7c7b\u56fe\uff0c\u5728\u63a5\u4e0b\u6765\u4f1a\u5bf9\u5176\u4e2d\u7684\u5173\u952e\u6982\u5ff5\u8fdb\u884c\u4ecb\u7ecd\u3002","title":"Dispatcher"},{"location":"%E5%8D%9A%E5%AE%A2/doc/envoy/dispatcher/#dispatcher-libevent","text":"Dispatcher \u672c\u8d28\u4e0a\u5c31\u662f\u4e00\u4e2a EventLoop \uff0cEnvoy\u5e76\u6ca1\u6709\u91cd\u65b0\u5b9e\u73b0\uff0c\u800c\u662f\u590d\u7528\u4e86Libevent\u4e2d\u7684 event_base \uff0c\u5728Libevent\u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u4e86\u4e8c\u6b21\u5c01\u88c5\u5e76\u62bd\u8c61\u51fa\u4e00\u4e9b\u4e8b\u4ef6\u7c7b\uff0c\u6bd4\u5982 FileEvent \u3001 SignalEvent \u3001 Timer \u7b49\u3002Libevent\u662f\u4e00\u4e2aC\u5e93\uff0c\u800cEnvoy\u662fC++\uff0c\u4e3a\u4e86\u907f\u514d\u624b\u52a8\u7ba1\u7406\u8fd9\u4e9bC\u7ed3\u6784\u7684\u5185\u5b58\uff0cEnvoy\u901a\u8fc7\u7ee7\u627f unique_ptr \u7684\u65b9\u5f0f\u91cd\u65b0\u5c01\u88c5\u4e86\u8fd9\u4e9blibevent\u66b4\u9732\u51fa\u6765\u7684C\u7ed3\u6784\u3002 1 2 3 4 5 6 template < class T , void ( * deleter )( T * ) > class CSmartPtr : public std :: unique_ptr < T , void ( * )( T * ) > { public : CSmartPtr () : std :: unique_ptr < T , void ( * )( T * ) > ( nullptr , deleter ) {} CSmartPtr ( T * object ) : std :: unique_ptr < T , void ( * )( T * ) > ( object , deleter ) {} }; \u901a\u8fc7 CSmartPtr \u5c31\u53ef\u4ee5\u5c06Libevent\u4e2d\u7684\u4e00\u4e9bC\u6570\u636e\u7ed3\u6784\u7684\u5185\u5b58\u901a\u8fc7 RAII \u673a\u5236\u81ea\u52a8\u7ba1\u7406\u8d77\u6765\uff0c\u4f7f\u7528\u65b9\u5f0f\u5982\u4e0b: 1 2 3 4 5 6 7 8 9 10 11 12 13 extern \"C\" { void event_base_free ( event_base * ); } struct evbuffer ; extern \"C\" { void evbuffer_free ( evbuffer * ); } ..... typedef CSmartPtr < event_base , event_base_free > BasePtr ; typedef CSmartPtr < evbuffer , evbuffer_free > BufferPtr ; typedef CSmartPtr < bufferevent , bufferevent_free > BufferEventPtr ; typedef CSmartPtr < evconnlistener , evconnlistener_free > ListenerPtr ; \u5728Libevent\u4e2d\u65e0\u8bba\u662f\u5b9a\u65f6\u5668\u5230\u671f\u3001\u6536\u5230\u4fe1\u53f7\u3001\u8fd8\u662f\u6587\u4ef6\u53ef\u8bfb\u5199\u7b49\u90fd\u662f\u4e8b\u4ef6\uff0c\u7edf\u4e00\u4f7f\u7528 event \u7c7b\u578b\u6765\u8868\u793a\uff0cEnvoy\u4e2d\u5219\u5c06 event \u4f5c\u4e3a ImplBase \u7684\u6210\u5458\uff0c\u7136\u540e\u8ba9\u6240\u6709\u7684\u4e8b\u4ef6\u7c7b\u578b\u7684\u5bf9\u8c61\u90fd\u7ee7\u627f ImplBase \uff0c\u4ece\u800c\u5b9e\u73b0\u4e86\u4e8b\u4ef6\u7684\u62bd\u8c61\u3002 1 2 3 4 5 6 class ImplBase { protected : ~ ImplBase (); event raw_event_ ; };","title":"Dispatcher \u548c Libevent"},{"location":"%E5%8D%9A%E5%AE%A2/doc/envoy/dispatcher/#signalevent","text":"SignalEvent\u7684\u5b9e\u73b0\u5f88\u7b80\u5355\uff0c\u901a\u8fc7 evsignal_assign \u6765\u521d\u59cb\u5316\u4e8b\u4ef6\uff0c\u7136\u540e\u901a\u8fc7 evsignal_add \u6dfb\u52a0\u4e8b\u4ef6\u4f7f\u4e8b\u4ef6\u6210\u4e3a\u672a\u51b3\u72b6\u6001(\u5173\u4e8eLibevent\u4e8b\u4ef6\u72b6\u6001\u89c1\u9644\u5f55)\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class SignalEventImpl : public SignalEvent , ImplBase { public : // signal_num: \u8981\u8bbe\u7f6e\u7684\u4fe1\u53f7\u503c // cb: \u4fe1\u53f7\u4e8b\u4ef6\u7684\u5904\u7406\u51fd\u6570 SignalEventImpl ( DispatcherImpl & dispatcher , int signal_num , SignalCb cb ); private : SignalCb cb_ ; }; SignalEventImpl :: SignalEventImpl ( DispatcherImpl & dispatcher , int signal_num , SignalCb cb ) : cb_ ( cb ) { evsignal_assign ( & raw_event_ , & dispatcher . base (), signal_num , []( evutil_socket_t , short , void * arg ) -> void { static_cast < SignalEventImpl *> ( arg ) -> cb_ (); }, this ); evsignal_add ( & raw_event_ , nullptr ); }","title":"SignalEvent"},{"location":"%E5%8D%9A%E5%AE%A2/doc/envoy/dispatcher/#timer","text":"Timer\u4e8b\u4ef6\u66b4\u9732\u4e86\u4e24\u4e2a\u63a5\u53e3\u4e00\u4e2a\u7528\u4e8e\u5173\u95edTimer\uff0c\u53e6\u5916\u4e00\u4e2a\u5219\u7528\u4e8e\u542f\u52a8Timer\uff0c\u9700\u8981\u4f20\u9012\u4e00\u4e2a\u65f6\u95f4\u6765\u8bbe\u7f6eTimer\u7684\u5230\u671f\u65f6\u95f4\u95f4\u9694\u3002 1 2 3 4 5 6 class Timer { public : virtual ~ Timer () {} virtual void disableTimer () PURE ; virtual void enableTimer ( const std :: chrono :: milliseconds & d ) PURE ; }; \u521b\u5efaTimer\u7684\u65f6\u5019\u4f1a\u901a\u8fc7 evtimer_assgin \u5bf9event\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u8fd9\u4e2a\u65f6\u5019\u4e8b\u4ef6\u8fd8\u5904\u4e8e\u672a\u51b3\u72b6\u6001\u800c\u4e0d\u4f1a\u89e6\u53d1\uff0c\u9700\u8981\u901a\u8fc7 event_add \u6dfb\u52a0\u5230 Dispatcher \u4e2d\u624d\u80fd\u88ab\u89e6\u53d1\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class TimerImpl : public Timer , ImplBase { public : TimerImpl ( Libevent :: BasePtr & libevent , TimerCb cb ); // Timer void disableTimer () override ; void enableTimer ( const std :: chrono :: milliseconds & d ) override ; private : TimerCb cb_ ; }; TimerImpl :: TimerImpl ( DispatcherImpl & dispatcher , TimerCb cb ) : cb_ ( cb ) { ASSERT ( cb_ ); evtimer_assign ( & raw_event_ , & dispatcher . base (), []( evutil_socket_t , short , void * arg ) -> void { static_cast < TimerImpl *> ( arg ) -> cb_ (); }, this ); } disableTimer \u88ab\u8c03\u7528\u65f6\u5176\u5185\u90e8\u4f1a\u8c03\u7528 event_del \u6765\u5220\u9664\u4e8b\u4ef6\uff0c\u4f7f\u4e8b\u4ef6\u6210\u4e3a\u975e\u672a\u51b3\u72b6\u6001\uff0c enableTimer \u88ab\u8c03\u7528\u65f6\u5219\u95f4\u63a5\u8c03\u7528 event_add \u4f7f\u4e8b\u4ef6\u6210\u4e3a\u672a\u51b3\u72b6\u6001\uff0c\u8fd9\u6837\u4e00\u65e6\u8d85\u65f6\u65f6\u95f4\u5230\u4e86\u5c31\u4f1a\u89e6\u53d1\u8d85\u65f6\u4e8b\u4ef6\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 void TimerImpl::disableTimer () { event_del ( & raw_event_ ); } void TimerImpl::enableTimer ( const std :: chrono :: milliseconds & d ) { if ( d . count () == 0 ) { event_active ( & raw_event_ , EV_TIMEOUT , 0 ); } else { std :: chrono :: microseconds us = std :: chrono :: duration_cast < std :: chrono :: microseconds > ( d ); timeval tv ; tv . tv_sec = us . count () / 1000000 ; tv . tv_usec = us . count () % 1000000 ; event_add ( & raw_event_ , & tv ); } } \u4e0a\u9762\u7684\u4ee3\u7801\u5728\u8ba1\u7b97 timer \u65f6\u95f4 timeval \u7684\u65f6\u5019\u5b9e\u73b0\u7684\u5e76\u4e0d\u4f18\u96c5\uff0c\u5e94\u8be5\u907f\u514d\u4f7f\u7528\u50cf 1000000 \u8fd9\u6837\u7684\u4e0d\u5177\u5907\u53ef\u8bfb\u6027\u7684\u6570\u5b57\u5e38\u91cf\uff0c\u793e\u533a\u4e2d\u6709\u4eba\u5efa\u8bae\u53ef\u4ee5\u6539\u6210\u5982\u4e0b\u7684\u5f62\u5f0f\u3002 1 2 3 4 5 auto secs = std :: chrono :: duration_cast < std :: chrono :: seconds > ( d ); auto usecs = std :: chrono :: duration_cast < std :: chrono :: microseconds > ( d - secs ); tv . tv_secs = secs . count (); tv . tv_usecs = usecs . count ();","title":"Timer"},{"location":"%E5%8D%9A%E5%AE%A2/doc/envoy/dispatcher/#fileevent","text":"socket \u5957\u63a5\u5b57\u76f8\u5173\u7684\u4e8b\u4ef6\u88ab\u5c01\u88c5\u4e3a FileEvent \uff0c\u5176\u4e0a\u66b4\u9732\u4e86\u4e8c\u4e2a\u63a5\u53e3\uff1a activate \u7528\u4e8e\u4e3b\u52a8\u89e6\u53d1\u4e8b\u4ef6\uff0c\u5178\u578b\u7684\u4f7f\u7528\u573a\u666f\u6bd4\u5982: \u5524\u9192EventLoop\u3001Write Buffer\u6709\u6570\u636e\uff0c\u53ef\u4ee5\u4e3b\u52a8\u89e6\u53d1\u4e0b\u53ef\u5199\u4e8b\u4ef6(Envoy\u4e2d\u7684\u5178\u578b\u4f7f\u7528\u573a\u666f)\u7b49\uff1b setEnabled \u7528\u4e8e\u8bbe\u7f6e\u4e8b\u4ef6\u7c7b\u578b\uff0c\u5c06\u4e8b\u4ef6\u6dfb\u52a0\u5230 EventLoop \u4e2d\u4f7f\u5176\u6210\u4e3a\u672a\u51b3\u72b6\u6001\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 void FileEventImpl::activate ( uint32_t events ) { int libevent_events = 0 ; if ( events & FileReadyType :: Read ) { libevent_events |= EV_READ ; } if ( events & FileReadyType :: Write ) { libevent_events |= EV_WRITE ; } if ( events & FileReadyType :: Closed ) { libevent_events |= EV_CLOSED ; } ASSERT ( libevent_events ); event_active ( & raw_event_ , libevent_events , 0 ); } void FileEventImpl::setEnabled ( uint32_t events ) { event_del ( & raw_event_ ); assignEvents ( events ); event_add ( & raw_event_ , nullptr ); }","title":"FileEvent"},{"location":"%E5%8D%9A%E5%AE%A2/doc/envoy/dispatcher/#_1","text":"Dispatcher \u7684\u5185\u90e8\u6709\u4e00\u4e2a\u4efb\u52a1\u961f\u5217\uff0c\u4e5f\u4f1a\u521b\u5efa\u4e00\u4e2a\u7ebf\u7a0b\u4e13\u4eec\u5904\u7406\u4efb\u52a1\u961f\u5217\u4e2d\u7684\u4efb\u52a1\u3002\u901a\u8fc7 Dispatcher \u7684 post \u65b9\u6cd5\u53ef\u4ee5\u5c06\u4efb\u52a1\u6295\u9012\u5230\u4efb\u52a1\u961f\u5217\u4e2d\uff0c\u4ea4\u7ed9 Dispatcher \u5185\u7684\u7ebf\u7a0b\u53bb\u5904\u7406\u3002 1 2 3 4 5 6 7 8 9 10 11 void DispatcherImpl::post ( std :: function < void () > callback ) { bool do_post ; { Thread :: LockGuard lock ( post_lock_ ); do_post = post_callbacks_ . empty (); post_callbacks_ . push_back ( callback ); } if ( do_post ) { post_timer_ -> enableTimer ( std :: chrono :: milliseconds ( 0 )); } } post \u65b9\u6cd5\u5c06\u4f20\u9012\u8fdb\u6765\u7684 callback \u6240\u4ee3\u8868\u7684\u4efb\u52a1\uff0c\u6dfb\u52a0\u5230 post_callbacks_ \u6240\u4ee3\u8868\u7684\u7c7b\u578b\u4e3a vector<callback> \u7684\u6210\u5458\u8868\u53d8\u91cf\u4e2d\u3002\u5982\u679c post_callbacks_ \u4e3a\u7a7a\u7684\u8bdd\uff0c\u8bf4\u660e\u80cc\u540e\u7684\u5904\u7406\u7ebf\u7a0b\u662f\u5904\u4e8e\u975e\u6d3b\u52a8\u72b6\u6001\uff0c\u8fd9\u65f6\u901a\u8fc7 post_timer_ \u8bbe\u7f6e\u4e00\u4e2a\u8d85\u65f6\u65f6\u95f4\u65f6\u95f4\u4e3a0\u7684\u65b9\u5f0f\u6765\u5524\u9192\u5b83\u3002 post_timer_ \u5728\u6784\u9020\u7684\u65f6\u5019\u5c31\u5df2\u7ecf\u8bbe\u7f6e\u597d\u5bf9\u5e94\u7684 callback \u4e3a runPostCallbacks \uff0c\u5bf9\u5e94\u4ee3\u7801\u5982\u4e0b: 1 2 3 4 5 6 7 DispatcherImpl :: DispatcherImpl ( TimeSystem & time_system , Buffer :: WatermarkFactoryPtr && factory ) : ...... post_timer_ ( createTimer ([ this ]() -> void { runPostCallbacks (); })), current_to_delete_ ( & to_delete_1_ ) { RELEASE_ASSERT ( Libevent :: Global :: initialized (), \"\" ); } runPostCallbacks \u662f\u4e00\u4e2awhile\u5faa\u73af\uff0c\u6bcf\u6b21\u90fd\u4ece post_callbacks_ \u4e2d\u53d6\u51fa\u4e00\u4e2a callback \u6240\u4ee3\u8868\u7684\u4efb\u52a1\u53bb\u8fd0\u884c\uff0c\u76f4\u5230 post_callbacks_ \u4e3a\u7a7a\u3002\u6bcf\u6b21\u8fd0\u884c runPostCallbacks \u90fd\u4f1a\u786e\u4fdd\u6240\u6709\u7684\u4efb\u52a1\u90fd\u6267\u884c\u5b8c\u3002\u663e\u7136\uff0c\u5728 runPostCallbacks \u88ab\u7ebf\u7a0b\u6267\u884c\u7684\u671f\u95f4\u5982\u679c post \u8fdb\u6765\u4e86\u65b0\u7684\u4efb\u52a1\uff0c\u90a3\u4e48\u65b0\u4efb\u52a1\u76f4\u63a5\u8ffd\u52a0\u5230 post_callbacks_ \u5c3e\u90e8\u5373\u53ef\uff0c\u800c\u65e0\u9700\u505a\u5524\u9192\u7ebf\u7a0b\u8fd9\u4e00\u52a8\u4f5c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 void DispatcherImpl::runPostCallbacks () { while ( true ) { std :: function < void () > callback ; { Thread :: LockGuard lock ( post_lock_ ); if ( post_callbacks_ . empty ()) { return ; } callback = post_callbacks_ . front (); post_callbacks_ . pop_front (); } callback (); } }","title":"\u4efb\u52a1\u961f\u5217"},{"location":"%E5%8D%9A%E5%AE%A2/doc/envoy/dispatcher/#deferreddeletable","text":"\u6700\u540e\u8bb2\u4e00\u4e0b Dispatcher \u4e2d\u6bd4\u8f83\u96be\u7406\u89e3\u4e5f\u5f88\u91cd\u8981\u7684 DeferredDeletable \uff0c\u5b83\u662f\u4e00\u4e2a\u7a7a\u63a5\u53e3\uff0c\u6240\u6709\u8981\u8fdb\u884c\u5ef6\u8fdf\u6790\u6784\u7684\u5bf9\u8c61\u90fd\u8981\u7ee7\u627f\u81ea\u8fd9\u4e2a\u7a7a\u63a5\u53e3\u3002\u5728Envoy\u7684\u4ee3\u7801\u4e2d\u50cf\u4e0b\u9762\u8fd9\u6837\u7ee7\u627f\u81ea DeferredDeletable \u7684\u7c7b\u968f\u5904\u53ef\u89c1\u3002 1 2 3 4 class DeferredDeletable { public : virtual ~ DeferredDeletable () {} }; \u90a3\u4f55\u4e3a\u5ef6\u8fdf\u6790\u6784\u5462\uff1f\u7528\u5728\u54ea\u4e2a\u573a\u666f\u5462?\u5ef6\u8fdf\u6790\u6784\u6307\u7684\u662f\u5c06\u6790\u6784\u7684\u52a8\u4f5c\u4ea4\u7531 Dispatcher \u6765\u5b8c\u6210\uff0c\u6240\u4ee5 DeferredDeletable \u548c Dispatcher \u5bc6\u5207\u76f8\u5173\u3002 Dispatcher \u5bf9\u8c61\u6709\u4e00\u4e2a vector \u4fdd\u5b58\u4e86\u6240\u6709\u8981\u5ef6\u8fdf\u6790\u6784\u7684\u5bf9\u8c61\u3002 1 2 3 4 5 6 7 8 class DispatcherImpl : public Dispatcher { ...... private : ........ std :: vector < DeferredDeletablePtr > to_delete_1_ ; std :: vector < DeferredDeletablePtr > to_delete_2_ ; std :: vector < DeferredDeletablePtr >* current_to_delete_ ; } to_delete_1_ \u548c to_delete_2_ \u5c31\u662f\u7528\u6765\u5b58\u653e\u6240\u6709\u7684\u8981\u5ef6\u8fdf\u6790\u6784\u7684\u5bf9\u8c61\uff0c\u8fd9\u91cc\u4f7f\u7528\u4e24\u4e2a vector \u5b58\u653e\uff0c\u4e3a\u4ec0\u4e48\u8981\u8fd9\u6837\u505a\u5462?\u3002 current_to_delete_ \u59cb\u7ec8\u6307\u5411\u5f53\u524d\u6b63\u8981\u6790\u6784\u7684\u5bf9\u8c61\u5217\u8868\uff0c\u6bcf\u6b21\u6267\u884c\u5b8c\u6790\u6784\u540e\u5c31\u4ea4\u66ff\u6307\u5411\u53e6\u5916\u4e00\u4e2a\u5bf9\u8c61\u5217\u8868\uff0c\u6765\u56de\u4ea4\u66ff\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 void DispatcherImpl::clearDeferredDeleteList () { ASSERT ( isThreadSafe ()); std :: vector < DeferredDeletablePtr >* to_delete = current_to_delete_ ; size_t num_to_delete = to_delete -> size (); if ( deferred_deleting_ || ! num_to_delete ) { return ; } ENVOY_LOG ( trace , \"clearing deferred deletion list (size={})\" , num_to_delete ); if ( current_to_delete_ == & to_delete_1_ ) { current_to_delete_ = & to_delete_2_ ; } else { current_to_delete_ = & to_delete_1_ ; } deferred_deleting_ = true ; for ( size_t i = 0 ; i < num_to_delete ; i ++ ) { ( * to_delete )[ i ]. reset (); } to_delete -> clear (); deferred_deleting_ = false ; } \u4e0a\u9762\u7684\u4ee3\u7801\u5728\u6267\u884c\u5bf9\u8c61\u6790\u6784\u7684\u65f6\u5019\u5148\u4f7f\u7528 to_delete \u6765\u6307\u5411\u5f53\u524d\u6b63\u8981\u6790\u6784\u7684\u5bf9\u8c61\u5217\u8868\uff0c\u7136\u540e\u5c06 current_to_delete_ \u6307\u5411\u53e6\u5916\u4e00\u4e2a\u5217\u8868\uff0c\u8fd9\u6837\u5728\u6dfb\u52a0\u5ef6\u8fdf\u5220\u9664\u7684\u5bf9\u8c61\u65f6\uff0c\u5c31\u53ef\u4ee5\u505a\u5230\u5b89\u5168\u7684\u628a\u5bf9\u8c61\u6dfb\u52a0\u5230\u5217\u8868\u4e2d\u4e86\u3002\u56e0\u4e3a deferredDelete \u548c clearDeferredDeleteList \u90fd\u662f\u5728\u540c\u4e00\u4e2a\u7ebf\u7a0b\u4e2d\u8fd0\u884c\uff0c\u6240\u4ee5 current_to_delete_ \u662f\u4e00\u4e2a\u666e\u901a\u7684\u6307\u9488\uff0c\u53ef\u4ee5\u5b89\u5168\u7684\u66f4\u6539\u6307\u9488\u6307\u5411\u53e6\u5916\u4e00\u4e2a\uff0c\u800c\u4e0d\u7528\u62c5\u5fc3\u6709\u7ebf\u7a0b\u5b89\u5168\u95ee\u9898\u3002 1 2 3 4 5 6 7 8 void DispatcherImpl::deferredDelete ( DeferredDeletablePtr && to_delete ) { ASSERT ( isThreadSafe ()); current_to_delete_ -> emplace_back ( std :: move ( to_delete )); ENVOY_LOG ( trace , \"item added to deferred deletion list (size={})\" , current_to_delete_ -> size ()); if ( 1 == current_to_delete_ -> size ()) { deferred_delete_timer_ -> enableTimer ( std :: chrono :: milliseconds ( 0 )); } } \u5f53\u6709\u8981\u8fdb\u884c\u5ef6\u8fdf\u6790\u6784\u7684\u5bf9\u8c61\u65f6\uff0c\u8c03\u7528 deferredDelete \u5373\u53ef\uff0c\u8fd9\u4e2a\u51fd\u6570\u5185\u90e8\u4f1a\u901a\u8fc7 current_to_delete_ \u628a\u5bf9\u8c61\u653e\u5230\u8981\u5ef6\u8fdf\u6790\u6784\u7684\u5217\u8868\u4e2d\uff0c\u6700\u540e\u5224\u65ad\u4e0b\u5f53\u524d\u8981\u5ef6\u8fdf\u6790\u6784\u7684\u5217\u8868\u5927\u5c0f\u662f\u5426\u662f1\uff0c\u5982\u679c\u662f1\u8868\u660e\u8fd9\u662f\u7b2c\u4e00\u6b21\u6dfb\u52a0\u5ef6\u8fdf\u6790\u6784\u7684\u5bf9\u8c61\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u901a\u8fc7 deferred_delete_timer_ \u628a\u80cc\u540e\u7684\u7ebf\u7a0b\u5524\u9192\u6267\u884c clearDeferredDeleteList \u51fd\u6570\u3002\u8fd9\u6837\u505a\u7684\u539f\u56e0\u662f\u907f\u514d\u591a\u6b21\u5524\u9192\uff0c\u56e0\u4e3a\u6709\u4e00\u79cd\u60c5\u51b5\u662f\u7ebf\u7a0b\u5df2\u7ecf\u5524\u9192\u4e86\u6b63\u5728\u6267\u884c clearDeferredDeleteList \uff0c\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u53c8\u6709\u5176\u4ed6\u7684\u5bf9\u8c61\u9700\u8981\u6790\u6784\u800c\u52a0\u5165\u5230 vector \u4e2d\u3002 \u5230\u6b64\u4e3a\u6b62 deferredDelete \u7684\u5b9e\u73b0\u539f\u7406\u5c31\u57fa\u672c\u5206\u6790\u5b8c\u4e86\uff0c\u53ef\u4ee5\u770b\u51fa\u5b83\u7684\u5b9e\u73b0\u548c\u4efb\u52a1\u961f\u5217\u7684\u5b9e\u73b0\u5f88\u7c7b\u4f3c\uff0c\u53ea\u4e0d\u8fc7\u4e00\u4e2a\u662f\u5faa\u73af\u6267\u884c callback \u6240\u4ee3\u8868\u7684\u4efb\u52a1\uff0c\u53e6\u4e00\u4e2a\u662f\u5bf9\u5bf9\u8c61\u8fdb\u884c\u6790\u6784\u3002\u6700\u540e\u6211\u4eec\u6765\u770b\u4e00\u4e0b deferredDelete \u7684\u5e94\u7528\u573a\u666f\uff0c\u5374\u201c\u4e3a\u4f55\u8981\u8fdb\u884c\u5ef6\u8fdf\u6790\u6784?\u201d\u5728Envoy\u7684\u6e90\u4ee3\u7801\u4e2d\u7ecf\u5e38\u4f1a\u770b\u5230\u50cf\u4e0b\u9762\u8fd9\u6837\u7684\u4ee3\u7801\u7247\u6bb5\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 ConnectionImpl :: ConnectionImpl ( Event :: Dispatcher & dispatcher , ConnectionSocketPtr && socket , TransportSocketPtr && transport_socket , bool connected ) { ...... } // \u4f20\u9012\u88f8\u6307\u9488\u5230\u56de\u8c03\u4e2d file_event_ = dispatcher_ . createFileEvent ( fd (), [ this ]( uint32_t events ) -> void { onFileEvent ( events ); }, Event :: FileTriggerType :: Edge , Event :: FileReadyType :: Read | Event :: FileReadyType :: Write ); ...... } \u4f20\u9012\u7ed9 Dispatcher \u7684 callback \u90fd\u662f\u901a\u8fc7\u88f8\u6307\u9488\u7684\u65b9\u5f0f\u8fdb\u884c\u56de\u8c03\uff0c\u5982\u679c\u8fdb\u884c\u56de\u8c03\u7684\u65f6\u5019\u5bf9\u8c61\u5df2\u7ecf\u6790\u6784\u4e86\uff0c\u5c31\u4f1a\u51fa\u73b0\u91ce\u6307\u9488\u7684\u95ee\u9898\uff0c\u6211\u76f8\u4fe1C++\u6c34\u5e73\u8fd8\u53ef\u4ee5\u7684\u540c\u5b66\u90fd\u4f1a\u770b\u51fa\u8fd9\u4e2a\u95ee\u9898\uff0c\u9664\u975e\u80fd\u5728\u903b\u8f91\u4e0a\u4fdd\u8bc1 Dispatcher \u7684\u751f\u547d\u5468\u671f\u6bd4\u6240\u6709\u5bf9\u8c61\u90fd\u77ed\uff0c\u8fd9\u6837\u5c31\u80fd\u4fdd\u8bc1\u5728\u56de\u8c03\u7684\u65f6\u5019\u5bf9\u8c61\u80af\u5b9a\u4e0d\u4f1a\u6790\u6784\uff0c\u4f46\u662f\u8fd9\u4e0d\u53ef\u80fd\u6210\u7acb\u7684\uff0c\u56e0\u4e3a Dispatcher \u662f EventLoop \u7684\u6838\u5fc3\u3002 \u4e00\u4e2a\u7ebf\u7a0b\u8fd0\u884c\u4e00\u4e2a EventLoop \u76f4\u5230\u7ebf\u7a0b\u7ed3\u675f\uff0c Dispatcher \u5bf9\u8c61\u624d\u4f1a\u6790\u6784\uff0c\u8fd9\u610f\u5473\u7740 Dispatcher \u5bf9\u8c61\u7684\u751f\u547d\u5468\u671f\u662f\u6700\u957f\u7684\u3002\u6240\u4ee5\u4ece\u903b\u8f91\u4e0a\u6ca1\u529e\u6cd5\u4fdd\u8bc1\u8fdb\u884c\u56de\u8c03\u7684\u65f6\u5019\u5bf9\u8c61\u6ca1\u6709\u6790\u6784\u3002\u53ef\u80fd\u6709\u4eba\u4f1a\u6709\u7591\u95ee\uff0c\u5bf9\u8c61\u5728\u6790\u6784\u7684\u65f6\u5019\u628a\u6ce8\u518c\u7684\u4e8b\u4ef6\u53d6\u6d88\u4e0d\u5c31\u53ef\u4ee5\u907f\u514d\u91ce\u6307\u9488\u7684\u95ee\u9898\u5417? \u90a3\u5982\u679c\u4e8b\u4ef6\u5df2\u7ecf\u89e6\u53d1\u4e86\uff0c callback \u6b63\u5728\u7b49\u5f85\u8fd0\u884c\u5462\uff1f \u53c8\u6216\u8005 callback \u8fd0\u884c\u4e86\u4e00\u534a\u5462\uff1f\u524d\u8005libevent\u662f\u53ef\u4ee5\u4fdd\u8bc1\u7684\uff0c\u5728\u8c03\u7528 event_del \u7684\u65f6\u5019\u53ef\u4ee5\u628a\u5904\u4e8e\u7b49\u5f85\u8fd0\u884c\u7684\u4e8b\u4ef6\u53d6\u6d88\u6389\uff0c\u4f46\u662f\u540e\u8005\u5c31\u65e0\u80fd\u4e3a\u529b\u4e86\uff0c\u8fd9\u4e2a\u65f6\u5019\u5982\u679c\u5bf9\u8c61\u6790\u6784\u4e86\uff0c\u90a3\u884c\u4e3a\u5c31\u662f\u672a\u5b9a\u4e49\u4e86\u3002\u6cbf\u7740\u8fd9\u4e2a\u601d\u8def\u60f3\u4e00\u60f3\uff0c\u662f\u4e0d\u662f\u53ea\u8981\u4fdd\u8bc1\u5bf9\u8c61\u6790\u6784\u7684\u65f6\u5019\u6ca1\u6709 callback \u6b63\u5728\u8fd0\u884c\u5c31\u53ef\u4ee5\u89e3\u51b3\u95ee\u9898\u4e86\u5462\uff1f\u662f\u7684\uff0c\u53ea\u8981\u4fdd\u8bc1\u6240\u6709\u5728\u6267\u884c\u4e2d\u7684 callback \u6267\u884c\u5b8c\u4e86\uff0c\u518d\u505a\u5bf9\u8c61\u6790\u6784\u5c31\u53ef\u4ee5\u4e86\u3002\u53ef\u4ee5\u5229\u7528 Dispatcher \u662f\u987a\u5e8f\u6267\u884c\u6240\u6709 callback \u7684\u7279\u70b9\uff0c\u5411 Dispatcher \u4e2d\u63d2\u5165\u4e00\u4e2a\u4efb\u52a1\u5c31\u662f\u7528\u6765\u5bf9\u8c61\u6790\u6784\u7684\uff0c\u90a3\u4e48\u5f53\u8fd9\u4e2a\u4efb\u52a1\u6267\u884c\u7684\u65f6\u5019\u662f\u53ef\u4ee5\u4fdd\u8bc1\u6ca1\u6709\u5176\u4ed6\u4efb\u4f55 callback \u5728\u8fd0\u884c\u3002\u901a\u8fc7\u8fd9\u4e2a\u65b9\u6cd5\u5c31\u5b8c\u7f8e\u89e3\u51b3\u4e86\u8fd9\u91cc\u9047\u5230\u7684\u91ce\u6307\u9488\u95ee\u9898\u4e86\u3002 \u6216\u8bb8\u6709\u4eba\u53c8\u4f1a\u60f3\uff0c\u8fd9\u91cc\u662f\u4e0d\u662f\u53ef\u4ee5\u7528 shared_ptr \u548c shared_from_this \u6765\u89e3\u8fd9\u4e2a\u5462? \u662f\u7684\uff0c\u8fd9\u662f\u89e3\u51b3\u591a\u7ebf\u7a0b\u73af\u5883\u4e0b\u5bf9\u8c61\u6790\u6784\u7684\u79d8\u5bc6\u6b66\u5668\uff0c\u901a\u8fc7\u5ef6\u957f\u5bf9\u8c61\u7684\u751f\u547d\u5468\u671f\uff0c\u628a\u5bf9\u8c61\u7684\u751f\u547d\u5468\u671f\u5ef6\u957f\u5230\u548c callback \u4e00\u6837\uff0c\u7b49 callback \u6267\u884c\u5b8c\u518d\u8fdb\u884c\u6790\u6784\uff0c\u540c\u6837\u53ef\u4ee5\u8fbe\u5230\u6548\u679c\uff0c\u4f46\u662f\u8fd9\u5e26\u6765\u4e86\u4e24\u4e2a\u95ee\u9898\uff0c\u7b2c\u4e00\u5c31\u662f\u5bf9\u8c61\u751f\u547d\u5468\u671f\u88ab\u65e0\u9650\u62c9\u957f\uff0c\u867d\u7136\u5ef6\u8fdf\u6790\u6784\u4e5f\u62c9\u957f\u4e86\u751f\u547d\u5468\u671f\uff0c\u4f46\u662f\u65f6\u95f4\u662f\u53ef\u9884\u671f\u7684\uff0c\u4e00\u65e6 EventLoop \u6267\u884c\u4e86 clearDeferredDeleteList \u4efb\u52a1\u5c31\u4f1a\u7acb\u523b\u88ab\u56de\u6536\uff0c\u800c\u901a\u8fc7 shared_ptr \u7684\u65b9\u5f0f\u5176\u751f\u547d\u5468\u671f\u53d6\u51b3\u4e8e callback \u4f55\u65f6\u8fd0\u884c\uff0c\u800c callback \u4f55\u65f6\u8fd0\u884c\u8fd9\u4e2a\u662f\u6ca1\u529e\u6cd5\u4fdd\u8bc1\u7684\uff0c\u6bd4\u5982\u4e00\u4e2a\u7b49\u5f85 socket \u7684\u53ef\u8bfb\u4e8b\u4ef6\u8fdb\u884c\u56de\u8c03\uff0c\u5982\u679c\u5bf9\u7aef\u4e00\u76f4\u4e0d\u53d1\u9001\u6570\u636e\uff0c\u90a3\u4e48 callback \u5c31\u4e00\u76f4\u4e0d\u4f1a\u88ab\u8fd0\u884c\uff0c\u5bf9\u8c61\u5c31\u4e00\u76f4\u65e0\u6cd5\u88ab\u6790\u6784\uff0c\u957f\u65f6\u95f4\u7d2f\u79ef\u4f1a\u5bfc\u81f4\u5185\u5b58\u4f7f\u7528\u7387\u4e0a\u6da8\u3002\u7b2c\u4e8c\u5c31\u662f\u5728\u4f7f\u7528\u65b9\u5f0f\u4e0a\u4fb5\u5165\u6027\u8f83\u5f3a\uff0c\u9700\u8981\u5f3a\u5236\u4f7f\u7528 shared_ptr \u7684\u65b9\u5f0f\u521b\u5efa\u5bf9\u8c61\u3002","title":"DeferredDeletable"},{"location":"%E5%8D%9A%E5%AE%A2/doc/envoy/dispatcher/#_2","text":"Dispatcher \u603b\u7684\u6765\u8bf4\u5176\u5b9e\u73b0\u8fd8\u662f\u6bd4\u8f83\u7b80\u5355\u660e\u4e86\u7684\uff0c\u6bd4\u8f83\u5bb9\u6613\u9a8c\u8bc1\u5176\u6b63\u786e\u6027\uff0c\u540c\u6837\u529f\u80fd\u4e5f\u76f8\u5bf9\u8f83\u5f31\uff0c\u548cchromium\u7684 MessageLoop \u3001boost\u7684 asio \u90fd\u662f\u76f8\u4f3c\u7684\u7528\u9014\uff0c\u4f46\u662f\u529f\u80fd\u4e0a\u5dee\u5f97\u6bd4\u8f83\u591a\u3002\u597d\u5728\u8fd9\u662f\u4e13\u95e8\u7ed9Envoy\u8bbe\u8ba1\u7684\uff0c\u800c\u4e14Envoy\u7684\u573a\u666f\u4e5f\u6bd4\u8f83\u5355\u4e00\uff0c\u4e0d\u5fc5\u505a\u6210\u90a3\u4e48\u901a\u7528\u7684\u3002\u53e6\u5916\u4e00\u4e2a\u6211\u89c9\u5f97\u6bd4\u8f83\u5947\u602a\u7684\u662f\uff0c\u4e3a\u4ec0\u4e48\u5728 DeferredDeletable \u7684\u5b9e\u73b0\u4e2d\u8981\u7528 to_delete_1_ \u548c to_delete_2_ \u4e24\u4e2a\u961f\u5217\u4ea4\u66ff\u6765\u5b58\u653e\uff0c\u5176\u5b9e\u6309\u7167\u6211\u7684\u7406\u89e3\u4e00\u4e2a\u961f\u5217\u5373\u53ef\uff0c\u56e0\u4e3a clearDeferredDeleteList \u548c deferredDelete \u662f\u4fdd\u8bc1\u5728\u540c\u4e00\u4e2a\u7ebf\u7a0b\u4e2d\u6267\u884c\u7684\uff0c\u5c31\u548c Dispatcher \u7684\u4efb\u52a1\u961f\u5217\u4e00\u6837\uff0c\u7528\u4e00\u4e2a\u961f\u5217\u4fdd\u5b58\u6240\u6709\u8981\u6267\u884c\u7684\u4efb\u52a1\uff0c\u5faa\u73af\u7684\u6267\u884c\u5373\u53ef\u3002\u4f46\u662fEnvoy\u4e2d\u6ca1\u6709\u8fd9\u6837\u505a\uff0c\u6211\u7406\u89e3\u8fd9\u6837\u8bbe\u8ba1\u7684\u539f\u56e0\u53ef\u80fd\u662f\u56e0\u4e3a\u76f8\u6bd4\u4e8e\u4efb\u52a1\u961f\u5217\u6765\u8bf4\u5ef6\u8fdf\u6790\u6784\u7684\u91cd\u8981\u6027\u66f4\u4f4e\u4e00\u4e9b\uff0c\u5927\u91cf\u5bf9\u8c61\u7684\u6790\u6784\u5982\u679c\u4fdd\u5b58\u5728\u4e00\u4e2a\u961f\u5217\u4e2d\u5faa\u73af\u7684\u8fdb\u884c\u6790\u6784\u52bf\u5fc5\u4f1a\u5f71\u54cd\u5176\u4ed6\u5173\u952e\u4efb\u52a1\u7684\u6267\u884c\uff0c\u6240\u4ee5\u8fd9\u91cc\u62c6\u5206\u6210\u4e24\u4e2a\u961f\u5217\uff0c\u591a\u4e2a\u4efb\u52a1\u4ea4\u66ff\u7684\u6267\u884c\uff0c\u5c31\u597d\u6bd4\u628a\u4e00\u4e2a\u5927\u4efb\u52a1\u62c6\u5206\u6210\u4e86\u597d\u51e0\u4e2a\u5c0f\u4efb\u52a1\u987a\u5e8f\u6765\u6267\u884c\u3002","title":"\u603b\u7ed3"},{"location":"%E5%8D%9A%E5%AE%A2/doc/envoy/dispatcher/#_3","text":"Libevent\u72b6\u6001\u8f6c\u6362\u56fe","title":"\u9644\u5f55"},{"location":"%E5%8D%9A%E5%AE%A2/doc/envoy/thread_local/","text":"Envoy\u6e90\u7801\u5206\u6790\u4e4bThreadLocal ThreadLocal\u6574\u4f53\u7ed3\u6784 Envoy\u4e2d\u4e25\u91cd\u4f9d\u8d56 ThreadLocal \uff0c\u4e3a\u4e86\u907f\u514d\u52a0\u9501Envoy\u4f1a\u5c3d\u53ef\u80fd\u5728\u5355\u4e00\u7ebf\u7a0b\u4e2d\u5b8c\u6210\u6240\u6709\u7684\u4e8b\u4ef6\uff0c\u4f46\u662f\u591a\u4e2a\u7ebf\u7a0b\u4e4b\u95f4\u96be\u514d\u4f1a\u6709\u4e00\u4e9b\u6570\u636e\u9700\u8981\u5171\u4eab\uff0c\u8fd8\u6709\u53ef\u80fd\u9700\u8981\u8bfb\u5199\uff0c\u4e3a\u4e86\u907f\u514d\u52a0\u9501Envoy\u5c06\u4e00\u4e9b\u9700\u8981\u5728\u7ebf\u7a0b\u4e4b\u95f4\u5171\u4eab\u7684\u6570\u636e\u653e\u5728 ThreadLocal \u4e2d\uff0c\u5f53 ThreadLocal \u4e2d\u7684\u6570\u636e\u9700\u8981\u66f4\u65b0\u7684\u65f6\u5019\u5219\u4f1a\u901a\u8fc7\u4e3b\u7ebf\u7a0b\u5c06\u66f4\u65b0\u540e\u7684\u6570\u636ePost\u5230\u5404\u4e2a\u7ebf\u7a0b\u4e2d\uff0c\u4ea4\u7531\u5404\u4e2a\u7ebf\u7a0b\u6765\u66f4\u65b0\u81ea\u5df1\u7684 ThreadLocal \u3002Envoy\u5728C++11\u7684 thread_local \u7684\u57fa\u7840\u4e0a\u7ed3\u5408 Dispatcher \u5b9e\u73b0\u4e86\u4e00\u4e2a ThreadLocal \u5bf9\u8c61\u3002\u672c\u6587\u5219\u4f1a\u91cd\u70b9\u5206\u6790\u4e0b ThreadLocal \u7684\u8bbe\u8ba1\u4e0e\u5b9e\u73b0\u3002\u5148\u6765\u770b\u4e0b ThreadLocal \u7684\u6574\u4f53\u7ed3\u6784\uff0c\u4e0b\u6587\u4f1a\u9010\u4e00\u8fdb\u884c\u5206\u6790\u3002 ThreadLocal\u5b9e\u73b0 ThreadLocalObject \u662f\u4e00\u4e2a\u7a7a\u7684\u63a5\u53e3\u7c7b\uff0c\u8981\u6c42\u6240\u6709\u7684 ThreadLocal \u6570\u636e\u5bf9\u8c61\u90fd\u8981\u7ee7\u627f\u81ea\u8fd9\u4e2a\u7a7a\u63a5\u53e3\uff0c\u6bd4\u5982\u4e0b\u9762\u8fd9\u4e2a ThreadLocal \u5bf9\u8c61\u3002 1 2 3 4 5 6 7 8 9 10 class ThreadLocalObject { public : virtual ~ ThreadLocalObject () {} }; struct ThreadLocalCachedDate : public ThreadLocal :: ThreadLocalObject { ThreadLocalCachedDate ( const std :: string & date_string ) : date_string_ ( date_string ) {} const std :: string date_string_ ; }; \u6240\u6709\u7684 ThreadLocalObject \u5bf9\u8c61\u4f1a\u4fdd\u5b58\u5728 ThreadLocalData \u4e2d\uff0c\u8fd9\u662f\u4e00\u4e2a\u4f7f\u7528C++11\u7684 thread_local \u5173\u952e\u5b57\u58f0\u660e\u7684\u53d8\u91cf\uff0c\u662f\u771f\u6b63\u7684\u7ebf\u7a0b\u5c40\u90e8\u5b58\u50a8\u3002\u8fd9\u4e2a\u5bf9\u8c61\u5305\u542b\u4e86\u4e24\u4e2a\u6210\u5458\uff0c\u5176\u4e2d\u4e00\u4e2a\u662fvector\uff0c\u4fdd\u5b58\u4e86\u6240\u6709\u7684 ThreadLocalObject \uff0c\u53e6\u5916\u4e00\u4e2a\u4fdd\u5b58\u7684\u662f Dispatcher \uff0c\u6307\u5411\u5f53\u524d\u7ebf\u7a0b\u7684 Dispatcher \u5bf9\u8c61\u3002\u76f8\u5173\u4ee3\u7801\u5982\u4e0b: 1 2 3 4 struct ThreadLocalData { Event :: Dispatcher * dispatcher_ {}; std :: vector < ThreadLocalObjectSharedPtr > data_ ; }; \u5f53\u4f60\u8981\u4f7f\u7528 ThreadLocal \u5bf9\u8c61\u7684\u529f\u80fd\u65f6\uff0c\u4f60\u9700\u8981\u4e00\u4e2a SlotAllocator \u5206\u914d\u5668\uff0c\u4ece\u8fd9\u4e2a\u5206\u914d\u5668\u53ef\u4ee5\u5206\u914d\u4e00\u4e2a Slot \uff0c\u4e00\u4e2a Slot \u5305\u542b\u4e86\u4e00\u4e2a ThreadLocalObject \uff0c\u4ece\u8fd9\u4e2a Slot \u4e2d\u5c31\u53ef\u4ee5\u83b7\u53d6\u5230\u4fdd\u5b58\u5728\u7ebf\u7a0b\u5c40\u90e8\u5b58\u50a8\u4e2d\u7684 ThreadLocalObject \u5bf9\u8c61\u3002\u4e0b\u9762\u662f Slot \u5bf9\u8c61\u7684\u7ed3\u6784\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 class Slot { public : virtual ~ Slot () {} virtual ThreadLocalObjectSharedPtr get () PURE ; template < class T > T & getTyped () { return * std :: dynamic_pointer_cast < T > ( get ()); } virtual void runOnAllThreads ( Event :: PostCb cb ) PURE ; virtual void runOnAllThreads ( Event :: PostCb cb , Event :: PostCb all_threads_complete_cb ) PURE ; typedef std :: function < ThreadLocalObjectSharedPtr ( Event :: Dispatcher & dispatcher ) > InitializeCb ; virtual void set ( InitializeCb cb ) PURE ; }; Slot \u662f\u4e00\u4e2a\u63a5\u53e3\u7c7b\uff0c\u8fd9\u4e2a\u63a5\u53e3\u63d0\u4f9b\u4e86\u51e0\u4e2a\u5173\u952e\u529f\u80fd\uff0c\u4e00\u4e2a\u5c31\u662f\u83b7\u53d6\u5230\u5bf9\u5e94\u7684 ThreadLocalObjec \u5bf9\u8c61\uff0c\u53e6\u5916\u4e00\u4e2a\u5c31\u662f\u5728\u6240\u6709\u6ce8\u518c\u7684\u7ebf\u7a0b\u4e2d\u6267\u884c PostCb \u7c7b\u578b\u7684\u56de\u8c03\u65b9\u6cd5\u3002 Slot \u5bf9\u5e94\u7684\u5b9e\u73b0\u7c7b\u662f SlotImpl \u3002 1 2 3 4 5 6 7 8 struct SlotImpl : public Slot { SlotImpl ( InstanceImpl & parent , uint64_t index ) : parent_ ( parent ), index_ ( index ) {} ~ SlotImpl () { parent_ . removeSlot ( * this ); } ....... InstanceImpl & parent_ ; const uint64_t index_ ; }; SlotImpl \u4fdd\u5b58\u4e86\u5bf9 InstanceImpl \u7684\u5f15\u7528\uff0c\u8fd8\u6709\u4e00\u4e2a\u7d22\u5f15\u503c\uff0c\u8fd9\u4e2a\u503c\u662f SlotImpl \u5bf9\u5e94\u7684 ThreadLocalObject \u5bf9\u8c61\u5728 ThreadLocalData \u4e2d\u7684\u7d22\u5f15(\u4e0a\u6587\u4e2d\u8bf4\u5230\u4e86\uff0c\u6240\u6709\u7684 ThreadLocalObject \u5bf9\u8c61\u90fd\u5b58\u5728 ThreadLocalData \u4e2d\u7684\u4e00\u4e2avector\u6210\u5458\u4e2d\u3002)\u901a\u8fc7\u8fd9\u4e2a\u7d22\u5f15\u5c31\u53ef\u4ee5\u5feb\u901f\u627e\u5230\u8be5 SlotImpl \u5bf9\u5e94\u7684 ThreadLocalObject \u5bf9\u8c61\u4e86\u3002\u63a5\u4e0b\u6765\u518d\u770b\u4e0b SlotAllocator \uff0c SlotImpl \u5e76\u4e0d\u662f\u76f4\u63a5\u6784\u9020\u6765\u4f7f\u7528\u7684\uff0c\u800c\u662f\u901a\u8fc7 SlotAllocator \u5206\u914d\u7684\u3002 1 2 3 4 5 class SlotAllocator { public : virtual ~ SlotAllocator () {} virtual SlotPtr allocateSlot () PURE ; }; SlotAllocator \u662f\u4e00\u4e2a\u63a5\u53e3\uff0c\u53ea\u6709\u4e00\u4e2a\u65b9\u6cd5\u5c31\u662f allocateSlot \uff0c\u8fd9\u4e2a\u65b9\u6cd5\u7528\u4e8e\u5206\u914d\u4e00\u4e2a Slot \uff0c Instance \u63a5\u53e3\u7ee7\u627f\u81ea SlotAllocator \uff0c\u5bf9\u5176\u8fdb\u884c\u4e86\u6269\u5c55\uff0c\u662f\u6574\u4e2a ThreadLocal \u7684\u57fa\u7840\u63a5\u53e3\uff0c\u76f4\u63a5\u66b4\u9732\u7ed9\u7528\u6237\u4f7f\u7528\u7684\u3002\u5176\u63a5\u53e3\u5982\u4e0b\u3002 1 2 3 4 5 6 7 class Instance : public SlotAllocator { public : virtual void registerThread ( Event :: Dispatcher & dispatcher , bool main_thread ) PURE ; virtual void shutdownGlobalThreading () PURE ; virtual void shutdownThread () PURE ; virtual Event :: Dispatcher & dispatcher () PURE ; }; \u6240\u6709\u8981\u8fdb\u884c\u6570\u636e\u5171\u4eab\u7684\u7ebf\u7a0b\u90fd\u9700\u8981\u901a\u8fc7 registerThread \u63a5\u53e3\u8fdb\u884c\u6ce8\u518c\uff0c dispatcher \u63a5\u53e3\u5219\u662f\u7528\u6765\u8fd4\u56de\u5f53\u524d\u7ebf\u7a0b\u5bf9\u5e94\u7684 Dispatcher \u5bf9\u8c61\u3002 InstanceImpl \u5b9e\u73b0\u4e86 Instance \u63a5\u53e3\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class InstanceImpl : Logger :: Loggable < Logger :: Id :: main > , public Instance { public : InstanceImpl () : main_thread_id_ ( std :: this_thread :: get_id ()) {} ~ InstanceImpl (); // ThreadLocal::Instance ........ private : static void setThreadLocal ( uint32_t index , ThreadLocalObjectSharedPtr object ); static thread_local ThreadLocalData thread_local_data_ ; std :: vector < SlotImpl *> slots_ ; std :: list < std :: reference_wrapper < Event :: Dispatcher >> registered_threads_ ; std :: thread :: id main_thread_id_ ; Event :: Dispatcher * main_thread_dispatcher_ {}; std :: atomic < bool > shutdown_ {}; }; main_thread_dispatcher_ \u7528\u6765\u4fdd\u5b58\u4e3b\u7ebf\u7a0b\u7684 Dispatcher \u5bf9\u8c61\uff0c registered_threads_ \u7528\u6765\u4fdd\u5b58\u6240\u6709\u6ce8\u518c\u5230 ThreadLocal \u4e2d\u7684 Dispatcher \u5bf9\u8c61\u3002 slots_ \u5219\u4fdd\u5b58\u4e86\u6240\u6709\u5206\u914d\u51fa\u53bb\u7684 Slot \uff0c\u6bcf\u5206\u914d\u51fa\u4e00\u4e2a Slot \u5c31\u4f1anew\u4e00\u4e2a SlotImpl \u5bf9\u8c61\uff0c\u7136\u540e\u4fdd\u5b58\u5728 slots_ \u4e2d\uff0c\u4f7f\u7528\u8005\u901a\u8fc7\u5206\u914d\u7684 Slot \uff0c\u62ff\u5230\u5176\u5bf9\u5e94\u7684\u7d22\u5f15\u503c\uff0c\u7136\u540e\u901a\u8fc7 setThreadLocal \u9759\u6001\u65b9\u6cd5\u5c31\u53ef\u4ee5\u628a\u8981\u5171\u4eab\u7684\u6570\u636e\u653e\u5230\u7ebf\u7a0b\u5b58\u50a8\u4e2d\u4e86\u3002 1 2 3 4 5 6 7 void InstanceImpl::setThreadLocal ( uint32_t index , ThreadLocalObjectSharedPtr object ) { if ( thread_local_data_ . data_ . size () <= index ) { thread_local_data_ . data_ . resize ( index + 1 ); } thread_local_data_ . data_ [ index ] = object ; } \u7ebf\u7a0b\u6ce8\u518c\u7684\u8fc7\u7a0b\u4e5f\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u628a\u4f20\u9012\u8fdb\u6765\u7684 Dispatcher \u5bf9\u8c61\u653e\u5230 registered_threads_ \u4e2d\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\u8fd9\u91cc\u7528\u7684\u662f std::reference_wrapper<Event::Dispatcher> \uff0c\u4fdd\u5b58\u7684\u662f Dispatcher \u7684\u5f15\u7528\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 void InstanceImpl::registerThread ( Event :: Dispatcher & dispatcher , bool main_thread ) { ASSERT ( std :: this_thread :: get_id () == main_thread_id_ ); ASSERT ( ! shutdown_ ); if ( main_thread ) { main_thread_dispatcher_ = & dispatcher ; thread_local_data_ . dispatcher_ = & dispatcher ; } else { ASSERT ( ! containsReference ( registered_threads_ , dispatcher )); registered_threads_ . push_back ( dispatcher ); dispatcher . post ([ & dispatcher ] { thread_local_data_ . dispatcher_ = & dispatcher ; }); } } \u5982\u679c\u662f\u4e3b\u7ebf\u7a0b\u7684\u8bdd\uff0c\u8fd8\u4f1a\u989d\u5916\u8bbe\u7f6e\u4e0b main_thread_dispatcher_ \uff0c\u8ba9\u5176\u6307\u5411\u4e3b\u7ebf\u7a0b\u7684 Dispatcher \u3002\u5c06 Dispatcher \u5bf9\u8c61\u653e\u5230 registered_threads_ \u4e2d\u540e\uff0c\u9700\u8981\u66f4\u65b0\u5bf9\u5e94\u7ebf\u7a0b\u7684 thread_local_data_ \u5c40\u90e8\u5b58\u50a8\u4e2d\u7684 dispatcher_ \u6307\u9488\uff0c\u4f7f\u5176\u6307\u5411\u7ebf\u7a0b\u81ea\u5df1\u7684 Dispatcher \u5bf9\u8c61\u3002\u6240\u4ee5\u8fd9\u91cc\u662f\u901a\u8fc7 Dispatcher \u7684post\u65b9\u6cd5\u6765\u6267\u884c\u8fd9\u4e2acallback\u7684\uff0c\u56e0\u4e3apost\u4fdd\u8bc1callback\u4f1a\u548c Dispatcher \u5bf9\u8c61\u6240\u5728\u7ebf\u7a0b\u4e2d\u6267\u884c\u3002\u7ebf\u7a0b\u6ce8\u518c\u5b8c\u6210\u540e\u5c31\u53ef\u4ee5\u901a\u8fc7 allocateSlot \u63a5\u53e3\u6765\u5206\u914d Slot \u4e86\uff0c\u8fd9\u91cc\u5bf9\u4e8e Slot \u7684\u5206\u914d\u5176\u5b9e\u662f\u60f0\u6027\u7684\uff0c\u53ea\u6709\u5728\u9700\u8981\u7684\u65f6\u5019\u624d\u4f1a\u5206\u914d\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 SlotPtr InstanceImpl::allocateSlot () { ASSERT ( std :: this_thread :: get_id () == main_thread_id_ ); ASSERT ( ! shutdown_ ); for ( uint64_t i = 0 ; i < slots_ . size (); i ++ ) { if ( slots_ [ i ] == nullptr ) { std :: unique_ptr < SlotImpl > slot ( new SlotImpl ( * this , i )); slots_ [ i ] = slot . get (); return std :: move ( slot ); } } std :: unique_ptr < SlotImpl > slot ( new SlotImpl ( * this , slots_ . size ())); slots_ . push_back ( slot . get ()); return std :: move ( slot ); } \u904d\u5386\u6240\u6709\u7684 Slot \uff0c\u5982\u679c\u53d1\u73b0\u662f Slot \u662f\u7a7a\u7684\u5c31\u4f1a\u8fdb\u884c\u5206\u914d\uff0c\u5982\u679c\u90fd\u6ca1\u6709\u627e\u5230\u5c31\u76f4\u63a5\u91cd\u65b0\u5206\u914d\u4e00\u4e2a Slot \uff0c\u7136\u540e\u63d2\u5165\u5230 slots_ \u4e2d\uff0c\u6709\u4e86 Slot \u540e\u9700\u8981\u901a\u8fc7\u5176 set \u65b9\u6cd5\u5c06\u8981\u5b58\u50a8\u7684 ThreadLocalObject \u5bf9\u8c61\u653e\u5230\u7ebf\u7a0b\u5c40\u90e8\u5b58\u50a8\u4e2d\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 typedef std :: function < ThreadLocalObjectSharedPtr ( Event :: Dispatcher & dispatcher ) > InitializeCb ; void InstanceImpl::SlotImpl::set ( InitializeCb cb ) { ASSERT ( std :: this_thread :: get_id () == parent_ . main_thread_id_ ); ASSERT ( ! parent_ . shutdown_ ); for ( Event :: Dispatcher & dispatcher : parent_ . registered_threads_ ) { const uint32_t index = index_ ; dispatcher . post ([ index , cb , & dispatcher ]() -> void { setThreadLocal ( index , cb ( dispatcher )); }); } // Handle main thread. setThreadLocal ( index_ , cb ( * parent_ . main_thread_dispatcher_ )); } \u9996\u5148\u901a\u8fc7 InitializeCb \u62ff\u5230\u8981\u5b58\u50a8\u7684 ThreadLocalObject \uff0c\u7136\u540e\u5230\u6240\u6709\u7ebf\u7a0b\u4e2d\u8c03\u7528 setThreadLocal \u65b9\u6cd5\u6765\u66f4\u65b0 ThreadLocalObject \u5bf9\u8c61\u5230\u5bf9\u5e94\u7ebf\u7a0b\u7684\u5c40\u90e8\u5b58\u50a8\u4e2d\u3002\u8fd9\u4e2a\u65b9\u6cd5\u53ea\u80fd\u5728\u4e3b\u7ebf\u7a0b\u4e2d\u8c03\u7528\u3002\u8c03\u7528\u5b8c\u6210\u540e\uff0c\u6240\u6709\u7684\u7ebf\u7a0b\u901a\u8fc7 Slot \u5c31\u53ef\u4ee5\u8bbf\u95ee\u5230\u5b58\u50a8\u7684 ThreadLocalObject \u5bf9\u8c61\u4e86\u3002\u9664\u4e86\u5b58\u50a8\u6570\u636e\u5916\uff0c SlotImpl \u8fd8\u63d0\u4f9b\u4e86\u4e8c\u4e2a\u7528\u4e8e\u5728\u6240\u6709\u7ebf\u7a0b\u4e2d\u6267\u884c\u4efb\u52a1\u7684\u63a5\u53e3\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 void InstanceImpl::runOnAllThreads ( Event :: PostCb cb ) { ASSERT ( std :: this_thread :: get_id () == main_thread_id_ ); ASSERT ( ! shutdown_ ); for ( Event :: Dispatcher & dispatcher : registered_threads_ ) { dispatcher . post ( cb ); } cb (); } void InstanceImpl::runOnAllThreads ( Event :: PostCb cb , Event :: PostCb all_threads_complete_cb ) { ASSERT ( std :: this_thread :: get_id () == main_thread_id_ ); ASSERT ( ! shutdown_ ); cb (); std :: shared_ptr < std :: atomic < uint64_t >> worker_count = std :: make_shared < std :: atomic < uint64_t >> ( registered_threads_ . size ()); for ( Event :: Dispatcher & dispatcher : registered_threads_ ) { dispatcher . post ([ this , worker_count , cb , all_threads_complete_cb ]() -> void { cb (); if ( --* worker_count == 0 ) { main_thread_dispatcher_ -> post ( all_threads_complete_cb ); } }); } } \u56e0\u4e3a ThreadLocal \u4fdd\u5b58\u4e86\u6240\u6709\u6ce8\u518c\u8fdb\u6765\u7684 Dispatcher \u5bf9\u8c61\uff0c\u901a\u8fc7 Dispatcher \u7684 post \u65b9\u6cd5\u5c31\u53ef\u4ee5\u5411\u5bf9\u5e94\u7ebf\u7a0b\u6295\u9012\u4efb\u52a1\u6765\u6267\u884c\uff0c runOnAllThreads \u7684\u7b2c\u4e8c\u4e2a\u91cd\u8f7d\u5b9e\u73b0\u53ef\u4ee5\u5728\u6240\u6709\u7ebf\u7a0b\u90fd\u6267\u884c\u5b8c\u6bd5\u540e\uff0c\u56de\u8c03\u4e3b\u7ebf\u7a0b\u7684 all_threads_complete_cb \u65b9\u6cd5\uff0c\u5b9e\u73b0\u65b9\u5f0f\u4e5f\u662f\u6bd4\u8f83\u7b80\u5355\u6613\u61c2\u7684\uff0c\u5c31\u662f\u901a\u8fc7\u5c06\u4e00\u4e2a std::shared_ptr \u7684\u539f\u5b50\u8ba1\u6570\u5668\u62f7\u8d1d\u5230\u8981\u6267\u884c\u7684\u4efb\u52a1\u4e2d\uff0c\u4efb\u52a1\u6267\u884c\u5b8c\u5c31\u9012\u51cf\u8ba1\u6570\u5668\uff0c\u7b49\u5230\u8ba1\u6570\u5668\u4e3a0\u5c31\u56de\u8c03 all_threads_complete_cb \u3002\u5230\u6b64\u4e3a\u6b62 ThreadLocal \u7684\u4e24\u5927\u6838\u5fc3\u529f\u80fd\u5c31\u5206\u6790\u5b8c\u6bd5\u4e86\uff0c\u4e00\u4e2a\u662f\u901a\u8fc7 set \u65b9\u6cd5\u66f4\u65b0\u6240\u6709\u7ebf\u7a0b\u7684\u5c40\u90e8\u5b58\u50a8\uff0c\u53e6\u5916\u4e00\u4e2a\u5c31\u662f\u901a\u8fc7 runOnAllThreads \u5f80\u6240\u6709\u7684\u7ebf\u7a0b\u6295\u9012\u4efb\u52a1\u3002 \u6700\u540e\u6211\u4eec\u6765\u5206\u6790\u4e0b ThreadLocal \u7684 shutdown \u8fc7\u7a0b\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u6bd4\u8f83\u96be\u7406\u89e3\uff0c InstanceImpl \u63d0\u4f9b\u4e86\u4e24\u4e2a\u65b9\u6cd5\u7528\u4e8eshutdown\u3002 1 2 3 4 5 void InstanceImpl::shutdownGlobalThreading () { ASSERT ( std :: this_thread :: get_id () == main_thread_id_ ); ASSERT ( ! shutdown_ ); shutdown_ = true ; } shutdownGlobalThreading \u65b9\u6cd5\u53ea\u662f\u8bbe\u7f6e\u4e86\u4e00\u4e2a shutdown_ \u7684 flag \uff0c\u53ea\u80fd\u5728\u4e3b\u7ebf\u7a0b\u4e2d\u8c03\u7528\uff0c\u8fd9\u4e2a flag \u7684\u4f5c\u7528\u53ea\u662f\u7528\u4e8e\u5728 Slot \u6790\u6784\u7684\u65f6\u5019\u4e0d\u901a\u77e5\u6240\u6709\u7ebf\u7a0b\u5c06\u5bf9\u5e94 Slot \u4ece\u5176\u7ebf\u7a0b\u5b58\u50a8\u4e2d\u53bb\u9664\uff0c\u6b63\u5e38\u60c5\u51b5\u4e0b\u4e00\u4e2a Slot \u6790\u6784\u9700\u8981\u66f4\u65b0\u6240\u6709\u7ebf\u7a0b\u7684\u5c40\u90e8\u5b58\u50a8\uff0c\u4ece\u4e2d\u53bb\u6389 Slot \u5bf9\u5e94\u7684 ThreadLocalObject \u5bf9\u8c61\u3002\u800c\u5728Shutdown\u7684\u8fc7\u7a0b\u5219\u4e0d\u9700\u8981\uff0c\u56e0\u4e3a\u4e3b\u7ebf\u7a0b\u8fdb\u884cshutdown\u7684\u65f6\u5019\u8868\u660e\u5176\u4ed6\u7ebf\u7a0b\u5df2\u7ecfshutdown\u4e86\uff0c\u5176\u5173\u8054\u7684 Dispatcher \u5bf9\u8c61\u5df2\u7ecf\u4e0d\u5b58\u6d3b\u3002\u6240\u4ee5\u8fd9\u79cd\u60c5\u51b5\u4e0b Slot \u6790\u6784\u4ec0\u4e48\u4e5f\u4e0d\u505a\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 ~ SlotImpl () { parent_ . removeSlot ( * this ); } void InstanceImpl :: removeSlot ( SlotImpl & slot ) { ASSERT ( std :: this_thread :: get_id () == main_thread_id_ ); if ( shutdown_ ) { return ; } const uint64_t index = slot . index_ ; slots_ [ index ] = nullptr ; runOnAllThreads ([ index ]() -> void { if ( index < thread_local_data_ . data_ . size ()) { thread_local_data_ . data_ [ index ] = nullptr ; } }); } \u8fd8\u6709\u53e6\u5916\u4e00\u4e2ashutdown\u51fd\u6570\u5c31\u662f shutdownThread \uff0c\u8fd9\u4e2a\u51fd\u6570\u4f1a\u904d\u5386\u6240\u6709\u7684\u7ebf\u7a0b\u5b58\u50a8\u7684\u6570\u636e\uff0c\u7136\u540e\u8fdb\u884creset\u64cd\u4f5c\uff0c\u6700\u540e\u628a\u6574\u4e2a vector \u8fdb\u884cclear()\u3002\u6bcf\u4e00\u4e2aworker\u90fd\u6301\u6709 InstanceImpl \u5b9e\u4f8b\u7684\u5f15\u7528\uff0c\u5728\u6790\u6784\u7684\u65f6\u5019\u4f1a\u8c03\u7528 shutdownThread \u3002\u8fd9\u4e2a\u51fd\u6570\u7684\u5b9e\u73b0\u5982\u4e0b: 1 2 3 4 5 6 7 8 void InstanceImpl::shutdownThread () { ASSERT ( shutdown_ ); for ( auto it = thread_local_data_ . data_ . rbegin (); it != thread_local_data_ . data_ . rend (); ++ it ) { it -> reset (); } thread_local_data_ . data_ . clear (); } \u5f88\u5947\u602a\u7684\u662f\u8fd9\u91cc\u662f\u9006\u5e8f\u6765\u904d\u5386\u6240\u6709\u7684 ThreadLocalObject \u5bf9\u8c61\u6765\u8fdb\u884creset\u7684\uff0c\u8fd9\u662f\u56e0\u4e3a\u4e00\u4e9b\"\u6301\u4e45\"(\u6d3b\u7684\u6bd4\u8f83\u957f)\u7684\u5bf9\u8c61\u5982 cluster manager \u5f88\u65e9\u5c31\u4f1a\u521b\u5efa ThreadLocalObject \u5bf9\u8c61\uff0c\u4f46\u662f\u76f4\u5230shutdown\u7684\u65f6\u5019\u4e5f\u4e0d\u6790\u6784\uff0c\u800c\u5728\u6b64\u57fa\u7840\u4e0a\u4f9d\u8d56 cluster manager \u7684\u5bf9\u8c61\u7684\u5982 grpc client \u7b49\uff0c\u5219\u662f\u540e\u521b\u5efa ThreadLocalObject \u5bf9\u8c61\uff0c\u5982\u679c cluster manager \u521b\u5efa\u7684 ThreadLocalObject \u5bf9\u8c61\u5148\u6790\u6784\uff0c\u800cgrpc client\u76f8\u5173\u7684 ThreadLocalObject \u5bf9\u8c61\u540e\u6790\u6784\u5c31\u4f1a\u5bfc\u81f4shutdown\u95ee\u9898\u3002\u4e3a\u6b64\u8fd9\u91cc\u9009\u62e9\u9006\u5e8f\u6765\u8fdb\u884c reset \uff0c\u5148\u4ece\u4e00\u4e2a\u9ad8\u5c42\u7684\u5bf9\u8c61\u5f00\u59cb\uff0c\u6700\u540e\u624d\u5f00\u59cb\u5bf9\u4e00\u4e9b\u57fa\u7840\u7684\u5bf9\u8c61\u6240\u5173\u8054\u7684 ThreadLocalObject \u8fdb\u884c reset \u3002\u4f8b\u5982\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 struct ThreadLocalPool : public ThreadLocal :: ThreadLocalObject { ThreadLocalPool ( InstanceImpl & parent , Event :: Dispatcher & dispatcher , const std :: string & cluster_name ); ~ ThreadLocalPool (); PoolRequest * makeRequest ( const std :: string & hash_key , const RespValue & request , PoolCallbacks & callbacks ); void onHostsRemoved ( const std :: vector < Upstream :: HostSharedPtr >& hosts_removed ); InstanceImpl & parent_ ; Event :: Dispatcher & dispatcher_ ; Upstream :: ThreadLocalCluster * cluster_ ; std :: unordered_map < Upstream :: HostConstSharedPtr , ThreadLocalActiveClientPtr > client_map_ ; Envoy :: Common :: CallbackHandle * local_host_set_member_update_cb_handle_ ; }; redis_proxy \u4e2d\u5b9a\u4e49\u4e86\u4e00\u4e2a ThreadLocalPool \uff0c\u8fd9\u4e2a ThreadLocalPool \u53c8\u4f9d\u8d56\u8f83\u4e3a\u57fa\u7840\u7684 ThreadLocalCluster (\u662f ThreadLocalClusterManagerImpl \u7684\u6570\u636e\u6210\u5458\uff0c\u4e5f\u5c31\u662f Cluster manager \u6240\u5bf9\u5e94\u7684 ThreadLocalObject \u5bf9\u8c61)\uff0c\u5982\u679c shutdownThread \u6309\u7167\u987a\u5e8f\u7684\u65b9\u5f0f\u6790\u6784\u7684\u8bdd\uff0c\u90a3\u4e48 ThreadLocalPool \u4e2d\u4f7f\u7528\u7684 ThreadLocalCluster (\u5176\u5b9e\u662f ThreadLocalClusterManagerImpl \u4f1a\u5148\u6790\u6784)\u4f1a\u5148\u88ab\u6790\u6784\uff0c\u7136\u540e\u624d\u662f ThreadLocalPool \u7684\u6790\u6784\uff0c\u800c ThreadLocalPool \u6790\u6784\u7684\u65f6\u5019\u53c8\u4f1a\u4f7f\u7528\u5230 ThreadLocalCluster \uff0c\u4f46\u662f ThreadLocalCluster \u5df2\u7ecf\u6790\u6784\u4e86\uff0c\u8fd9\u4e2a\u65f6\u5019\u5c31\u4f1a\u51fa\u73b0\u91ce\u6307\u9488\u7684\u95ee\u9898\u4e86\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 InstanceImpl :: ThreadLocalPool :: ThreadLocalPool ( InstanceImpl & parent , Event :: Dispatcher & dispatcher , const std :: string & cluster_name ) : parent_ ( parent ), dispatcher_ ( dispatcher ), cluster_ ( parent_ . cm_ . get ( cluster_name )) { ..... local_host_set_member_update_cb_handle_ = cluster_ -> prioritySet (). addMemberUpdateCb ( [ this ]( uint32_t , const std :: vector < Upstream :: HostSharedPtr >& , const std :: vector < Upstream :: HostSharedPtr >& hosts_removed ) -> void { onHostsRemoved ( hosts_removed ); }); } InstanceImpl :: ThreadLocalPool ::~ ThreadLocalPool () { // local_host_set_member_update_cb_handle_\u662fThreadLocalCluster\u7684\u4e00\u90e8\u5206 // ThreadLocalCluster\u6790\u6784\u4f1a\u5bfc\u81f4local_host_set_member_update_cb_handle_\u53d8\u6210\u91ce\u6307\u9488 local_host_set_member_update_cb_handle_ -> remove (); while ( ! client_map_ . empty ()) { client_map_ . begin () -> second -> redis_client_ -> close (); } } \u603b\u7ed3 \u901a\u8fc7\u4e0a\u6587\u6211\u76f8\u4fe1\u6211\u4eec\u5e94\u8be5\u8db3\u4ee5\u9a7e\u9a6dEnvoy\u4e2d\u7684 ThreadLocal \uff0c\u4ece\u5176\u8bbe\u8ba1\u53ef\u4ee5\u770b\u51fa\u6709\u5176\u5de7\u5999\u4e4b\u5904\uff0c\u4e5f\u6709\u5176\u4e0d\u8db3\u7684\u5730\u65b9\uff0c\u6bd4\u5982\u5176\u62bd\u8c61\u51fa\u4e00\u4e2a Slot \u548c\u5bf9\u5e94\u7684\u7ebf\u7a0b\u5b58\u50a8\u8fdb\u884c\u4e86\u5173\u8054\uff0c Slot \u53ef\u4ee5\u4efb\u610f\u4f20\u9012\uff0c\u56e0\u4e3a\u4e0d\u5305\u542b\u5b9e\u9645\u7684\u6570\u636e\uff0c\u62f7\u8d1d\u7684\u5f00\u9500\u5f88\u4f4e\uff0c\u53ea\u5305\u542b\u4e86\u4e00\u4e2a\u7d22\u5f15\u503c\uff0c\u5177\u4f53\u5173\u8054\u7684\u7ebf\u7a0b\u5b58\u50a8\u6570\u636e\u662f\u4e0d\u77e5\u9053\u7684\uff0c\u907f\u514d\u76f4\u63a5\u66b4\u9732\u7ed9\u7528\u6237\u80cc\u540e\u7684\u6570\u636e\u3002\u800c InstanceImpl \u5bf9\u8c61\u5219\u7ba1\u7406\u7740\u6240\u6709 Slot \u7684\u5206\u914d\u548c\u79fb\u9664\u4ee5\u53ca\u6574\u4e2a ThreadLocal \u5bf9\u8c61\u7684 shutdown \u3002\u4e0d\u8db3\u7684\u5730\u65b9\u6211\u89c9\u5f97\u4e3b\u8981\u6709\u4e24\u70b9\uff0c \u5176\u4e2d\u4e00\u4e2a\u5c31\u662f Slot \u7684\u5206\u914d\u673a\u5236\u6548\u7387\u4e0d\u592a\u9ad8\uff0c\u5982\u679c Slot \u5728\u5927\u91cf\u8fdb\u884c\u4e86\u5206\u914d\u548c\u91ca\u653e\u540e\uff0c\u6574\u4e2a vector \u4e2d\u7684\u7a7a\u95f2\u7684 Slot \u5176\u5b9e\u5f88\u7a00\u758f\uff0c\u8fd9\u4e2a\u65f6\u5019\u5982\u679c\u4ece\u5934\u5f00\u59cb\u904d\u5386\u6765\u627e\u4e0b\u4e00\u4e2a\u53ef\u7528\u7684 Slot \u5219\u6548\u7387\u4e0d\u9ad8\uff0c\u800c\u4e14\u6839\u636e Slot \u5206\u914d\u7684\u7279\u70b9\u6765\u770b\uff0c\u8d8a\u9760\u524d\u7684 Slot \u8d8a\u6709\u53ef\u80fd\u6ca1\u91ca\u653e(\u8d8a\u57fa\u7840\u7684\u5bf9\u8c61\uff0c\u8d8a\u65e9\u521b\u5efa Slot \uff0c\u4f46\u662f\u6700\u540e\u624d\u91ca\u653e)\uff0c\u8fd9\u6837\u7684\u8bdd\uff0c\u6bcf\u6b21\u904d\u5386\u627e\u7a7a\u95f2\u7684 Slot \u7684\u65f6\u5019\uff0c\u5176\u5b9e\u524dN\u4e2a\u5f88\u5927\u6982\u7387\u90fd\u662f\u5728\u505a\u65e0\u7528\u529f\uff0c\u5f71\u54cd\u67e5\u627e\u7684\u6548\u7387\u3002\u53e6\u5916\u4e00\u4e2a\u6211\u89c9\u5f97\u4e0d\u592a\u597d\u7684\u5730\u65b9\u5c31\u662f shutdownThread \u7684\u5b9e\u73b0\uff0c\u8fd9\u4e2a\u5176\u5b9e\u6bd4\u8f83\u96be\u7406\u89e3\uff0c\u5bf9\u4f7f\u7528\u8005\u4e5f\u6ca1\u6709\u592a\u591a\u7684\u7ea6\u675f\uff0c\u5982\u679c\u4e24\u4e2a ThreadLocalObject \u4ea7\u751f\u4e86\u4f9d\u8d56(\u6bd4\u5982A\u4f9d\u8d56B)\uff0c\u4f46\u662fA\u662f\u5148\u5206\u914d Slot \u7684\uff0cB\u662f\u540e\u5206\u914d\u7684\uff0c\u90a3\u4e48\u8fd9\u79cd\u60c5\u51b5\u4e0b\u9006\u5e8f\u8fdb\u884c\u6790\u6784\u7684\u65f6\u5019\u4f1a\u5148\u628aB\u6790\u6784\uff0c\u7b49\u5230\u6790\u6784A\u7684\u65f6\u5019\uff0c\u5982\u679c\u5728\u5176\u6790\u6784\u51fd\u6570\u4e2d\u53c8\u4f7f\u7528\u4e86B\u5c31\u4f1a\u4ea7\u751f\u91ce\u6307\u9488\u7684\u95ee\u9898\uff0c\u800c\u4e14\u8fd9\u79cd\u60c5\u51b5\u4e5f\u6ca1\u6709\u68c0\u67e5\u673a\u5236\u5f88\u96be\u88ab\u53d1\u73b0\u3002","title":"Envoy\u6e90\u7801\u5206\u6790\u4e4bThreadLocal"},{"location":"%E5%8D%9A%E5%AE%A2/doc/envoy/thread_local/#envoythreadlocal","text":"","title":"Envoy\u6e90\u7801\u5206\u6790\u4e4bThreadLocal"},{"location":"%E5%8D%9A%E5%AE%A2/doc/envoy/thread_local/#threadlocal","text":"Envoy\u4e2d\u4e25\u91cd\u4f9d\u8d56 ThreadLocal \uff0c\u4e3a\u4e86\u907f\u514d\u52a0\u9501Envoy\u4f1a\u5c3d\u53ef\u80fd\u5728\u5355\u4e00\u7ebf\u7a0b\u4e2d\u5b8c\u6210\u6240\u6709\u7684\u4e8b\u4ef6\uff0c\u4f46\u662f\u591a\u4e2a\u7ebf\u7a0b\u4e4b\u95f4\u96be\u514d\u4f1a\u6709\u4e00\u4e9b\u6570\u636e\u9700\u8981\u5171\u4eab\uff0c\u8fd8\u6709\u53ef\u80fd\u9700\u8981\u8bfb\u5199\uff0c\u4e3a\u4e86\u907f\u514d\u52a0\u9501Envoy\u5c06\u4e00\u4e9b\u9700\u8981\u5728\u7ebf\u7a0b\u4e4b\u95f4\u5171\u4eab\u7684\u6570\u636e\u653e\u5728 ThreadLocal \u4e2d\uff0c\u5f53 ThreadLocal \u4e2d\u7684\u6570\u636e\u9700\u8981\u66f4\u65b0\u7684\u65f6\u5019\u5219\u4f1a\u901a\u8fc7\u4e3b\u7ebf\u7a0b\u5c06\u66f4\u65b0\u540e\u7684\u6570\u636ePost\u5230\u5404\u4e2a\u7ebf\u7a0b\u4e2d\uff0c\u4ea4\u7531\u5404\u4e2a\u7ebf\u7a0b\u6765\u66f4\u65b0\u81ea\u5df1\u7684 ThreadLocal \u3002Envoy\u5728C++11\u7684 thread_local \u7684\u57fa\u7840\u4e0a\u7ed3\u5408 Dispatcher \u5b9e\u73b0\u4e86\u4e00\u4e2a ThreadLocal \u5bf9\u8c61\u3002\u672c\u6587\u5219\u4f1a\u91cd\u70b9\u5206\u6790\u4e0b ThreadLocal \u7684\u8bbe\u8ba1\u4e0e\u5b9e\u73b0\u3002\u5148\u6765\u770b\u4e0b ThreadLocal \u7684\u6574\u4f53\u7ed3\u6784\uff0c\u4e0b\u6587\u4f1a\u9010\u4e00\u8fdb\u884c\u5206\u6790\u3002","title":"ThreadLocal\u6574\u4f53\u7ed3\u6784"},{"location":"%E5%8D%9A%E5%AE%A2/doc/envoy/thread_local/#threadlocal_1","text":"ThreadLocalObject \u662f\u4e00\u4e2a\u7a7a\u7684\u63a5\u53e3\u7c7b\uff0c\u8981\u6c42\u6240\u6709\u7684 ThreadLocal \u6570\u636e\u5bf9\u8c61\u90fd\u8981\u7ee7\u627f\u81ea\u8fd9\u4e2a\u7a7a\u63a5\u53e3\uff0c\u6bd4\u5982\u4e0b\u9762\u8fd9\u4e2a ThreadLocal \u5bf9\u8c61\u3002 1 2 3 4 5 6 7 8 9 10 class ThreadLocalObject { public : virtual ~ ThreadLocalObject () {} }; struct ThreadLocalCachedDate : public ThreadLocal :: ThreadLocalObject { ThreadLocalCachedDate ( const std :: string & date_string ) : date_string_ ( date_string ) {} const std :: string date_string_ ; }; \u6240\u6709\u7684 ThreadLocalObject \u5bf9\u8c61\u4f1a\u4fdd\u5b58\u5728 ThreadLocalData \u4e2d\uff0c\u8fd9\u662f\u4e00\u4e2a\u4f7f\u7528C++11\u7684 thread_local \u5173\u952e\u5b57\u58f0\u660e\u7684\u53d8\u91cf\uff0c\u662f\u771f\u6b63\u7684\u7ebf\u7a0b\u5c40\u90e8\u5b58\u50a8\u3002\u8fd9\u4e2a\u5bf9\u8c61\u5305\u542b\u4e86\u4e24\u4e2a\u6210\u5458\uff0c\u5176\u4e2d\u4e00\u4e2a\u662fvector\uff0c\u4fdd\u5b58\u4e86\u6240\u6709\u7684 ThreadLocalObject \uff0c\u53e6\u5916\u4e00\u4e2a\u4fdd\u5b58\u7684\u662f Dispatcher \uff0c\u6307\u5411\u5f53\u524d\u7ebf\u7a0b\u7684 Dispatcher \u5bf9\u8c61\u3002\u76f8\u5173\u4ee3\u7801\u5982\u4e0b: 1 2 3 4 struct ThreadLocalData { Event :: Dispatcher * dispatcher_ {}; std :: vector < ThreadLocalObjectSharedPtr > data_ ; }; \u5f53\u4f60\u8981\u4f7f\u7528 ThreadLocal \u5bf9\u8c61\u7684\u529f\u80fd\u65f6\uff0c\u4f60\u9700\u8981\u4e00\u4e2a SlotAllocator \u5206\u914d\u5668\uff0c\u4ece\u8fd9\u4e2a\u5206\u914d\u5668\u53ef\u4ee5\u5206\u914d\u4e00\u4e2a Slot \uff0c\u4e00\u4e2a Slot \u5305\u542b\u4e86\u4e00\u4e2a ThreadLocalObject \uff0c\u4ece\u8fd9\u4e2a Slot \u4e2d\u5c31\u53ef\u4ee5\u83b7\u53d6\u5230\u4fdd\u5b58\u5728\u7ebf\u7a0b\u5c40\u90e8\u5b58\u50a8\u4e2d\u7684 ThreadLocalObject \u5bf9\u8c61\u3002\u4e0b\u9762\u662f Slot \u5bf9\u8c61\u7684\u7ed3\u6784\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 class Slot { public : virtual ~ Slot () {} virtual ThreadLocalObjectSharedPtr get () PURE ; template < class T > T & getTyped () { return * std :: dynamic_pointer_cast < T > ( get ()); } virtual void runOnAllThreads ( Event :: PostCb cb ) PURE ; virtual void runOnAllThreads ( Event :: PostCb cb , Event :: PostCb all_threads_complete_cb ) PURE ; typedef std :: function < ThreadLocalObjectSharedPtr ( Event :: Dispatcher & dispatcher ) > InitializeCb ; virtual void set ( InitializeCb cb ) PURE ; }; Slot \u662f\u4e00\u4e2a\u63a5\u53e3\u7c7b\uff0c\u8fd9\u4e2a\u63a5\u53e3\u63d0\u4f9b\u4e86\u51e0\u4e2a\u5173\u952e\u529f\u80fd\uff0c\u4e00\u4e2a\u5c31\u662f\u83b7\u53d6\u5230\u5bf9\u5e94\u7684 ThreadLocalObjec \u5bf9\u8c61\uff0c\u53e6\u5916\u4e00\u4e2a\u5c31\u662f\u5728\u6240\u6709\u6ce8\u518c\u7684\u7ebf\u7a0b\u4e2d\u6267\u884c PostCb \u7c7b\u578b\u7684\u56de\u8c03\u65b9\u6cd5\u3002 Slot \u5bf9\u5e94\u7684\u5b9e\u73b0\u7c7b\u662f SlotImpl \u3002 1 2 3 4 5 6 7 8 struct SlotImpl : public Slot { SlotImpl ( InstanceImpl & parent , uint64_t index ) : parent_ ( parent ), index_ ( index ) {} ~ SlotImpl () { parent_ . removeSlot ( * this ); } ....... InstanceImpl & parent_ ; const uint64_t index_ ; }; SlotImpl \u4fdd\u5b58\u4e86\u5bf9 InstanceImpl \u7684\u5f15\u7528\uff0c\u8fd8\u6709\u4e00\u4e2a\u7d22\u5f15\u503c\uff0c\u8fd9\u4e2a\u503c\u662f SlotImpl \u5bf9\u5e94\u7684 ThreadLocalObject \u5bf9\u8c61\u5728 ThreadLocalData \u4e2d\u7684\u7d22\u5f15(\u4e0a\u6587\u4e2d\u8bf4\u5230\u4e86\uff0c\u6240\u6709\u7684 ThreadLocalObject \u5bf9\u8c61\u90fd\u5b58\u5728 ThreadLocalData \u4e2d\u7684\u4e00\u4e2avector\u6210\u5458\u4e2d\u3002)\u901a\u8fc7\u8fd9\u4e2a\u7d22\u5f15\u5c31\u53ef\u4ee5\u5feb\u901f\u627e\u5230\u8be5 SlotImpl \u5bf9\u5e94\u7684 ThreadLocalObject \u5bf9\u8c61\u4e86\u3002\u63a5\u4e0b\u6765\u518d\u770b\u4e0b SlotAllocator \uff0c SlotImpl \u5e76\u4e0d\u662f\u76f4\u63a5\u6784\u9020\u6765\u4f7f\u7528\u7684\uff0c\u800c\u662f\u901a\u8fc7 SlotAllocator \u5206\u914d\u7684\u3002 1 2 3 4 5 class SlotAllocator { public : virtual ~ SlotAllocator () {} virtual SlotPtr allocateSlot () PURE ; }; SlotAllocator \u662f\u4e00\u4e2a\u63a5\u53e3\uff0c\u53ea\u6709\u4e00\u4e2a\u65b9\u6cd5\u5c31\u662f allocateSlot \uff0c\u8fd9\u4e2a\u65b9\u6cd5\u7528\u4e8e\u5206\u914d\u4e00\u4e2a Slot \uff0c Instance \u63a5\u53e3\u7ee7\u627f\u81ea SlotAllocator \uff0c\u5bf9\u5176\u8fdb\u884c\u4e86\u6269\u5c55\uff0c\u662f\u6574\u4e2a ThreadLocal \u7684\u57fa\u7840\u63a5\u53e3\uff0c\u76f4\u63a5\u66b4\u9732\u7ed9\u7528\u6237\u4f7f\u7528\u7684\u3002\u5176\u63a5\u53e3\u5982\u4e0b\u3002 1 2 3 4 5 6 7 class Instance : public SlotAllocator { public : virtual void registerThread ( Event :: Dispatcher & dispatcher , bool main_thread ) PURE ; virtual void shutdownGlobalThreading () PURE ; virtual void shutdownThread () PURE ; virtual Event :: Dispatcher & dispatcher () PURE ; }; \u6240\u6709\u8981\u8fdb\u884c\u6570\u636e\u5171\u4eab\u7684\u7ebf\u7a0b\u90fd\u9700\u8981\u901a\u8fc7 registerThread \u63a5\u53e3\u8fdb\u884c\u6ce8\u518c\uff0c dispatcher \u63a5\u53e3\u5219\u662f\u7528\u6765\u8fd4\u56de\u5f53\u524d\u7ebf\u7a0b\u5bf9\u5e94\u7684 Dispatcher \u5bf9\u8c61\u3002 InstanceImpl \u5b9e\u73b0\u4e86 Instance \u63a5\u53e3\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class InstanceImpl : Logger :: Loggable < Logger :: Id :: main > , public Instance { public : InstanceImpl () : main_thread_id_ ( std :: this_thread :: get_id ()) {} ~ InstanceImpl (); // ThreadLocal::Instance ........ private : static void setThreadLocal ( uint32_t index , ThreadLocalObjectSharedPtr object ); static thread_local ThreadLocalData thread_local_data_ ; std :: vector < SlotImpl *> slots_ ; std :: list < std :: reference_wrapper < Event :: Dispatcher >> registered_threads_ ; std :: thread :: id main_thread_id_ ; Event :: Dispatcher * main_thread_dispatcher_ {}; std :: atomic < bool > shutdown_ {}; }; main_thread_dispatcher_ \u7528\u6765\u4fdd\u5b58\u4e3b\u7ebf\u7a0b\u7684 Dispatcher \u5bf9\u8c61\uff0c registered_threads_ \u7528\u6765\u4fdd\u5b58\u6240\u6709\u6ce8\u518c\u5230 ThreadLocal \u4e2d\u7684 Dispatcher \u5bf9\u8c61\u3002 slots_ \u5219\u4fdd\u5b58\u4e86\u6240\u6709\u5206\u914d\u51fa\u53bb\u7684 Slot \uff0c\u6bcf\u5206\u914d\u51fa\u4e00\u4e2a Slot \u5c31\u4f1anew\u4e00\u4e2a SlotImpl \u5bf9\u8c61\uff0c\u7136\u540e\u4fdd\u5b58\u5728 slots_ \u4e2d\uff0c\u4f7f\u7528\u8005\u901a\u8fc7\u5206\u914d\u7684 Slot \uff0c\u62ff\u5230\u5176\u5bf9\u5e94\u7684\u7d22\u5f15\u503c\uff0c\u7136\u540e\u901a\u8fc7 setThreadLocal \u9759\u6001\u65b9\u6cd5\u5c31\u53ef\u4ee5\u628a\u8981\u5171\u4eab\u7684\u6570\u636e\u653e\u5230\u7ebf\u7a0b\u5b58\u50a8\u4e2d\u4e86\u3002 1 2 3 4 5 6 7 void InstanceImpl::setThreadLocal ( uint32_t index , ThreadLocalObjectSharedPtr object ) { if ( thread_local_data_ . data_ . size () <= index ) { thread_local_data_ . data_ . resize ( index + 1 ); } thread_local_data_ . data_ [ index ] = object ; } \u7ebf\u7a0b\u6ce8\u518c\u7684\u8fc7\u7a0b\u4e5f\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u628a\u4f20\u9012\u8fdb\u6765\u7684 Dispatcher \u5bf9\u8c61\u653e\u5230 registered_threads_ \u4e2d\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\u8fd9\u91cc\u7528\u7684\u662f std::reference_wrapper<Event::Dispatcher> \uff0c\u4fdd\u5b58\u7684\u662f Dispatcher \u7684\u5f15\u7528\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 void InstanceImpl::registerThread ( Event :: Dispatcher & dispatcher , bool main_thread ) { ASSERT ( std :: this_thread :: get_id () == main_thread_id_ ); ASSERT ( ! shutdown_ ); if ( main_thread ) { main_thread_dispatcher_ = & dispatcher ; thread_local_data_ . dispatcher_ = & dispatcher ; } else { ASSERT ( ! containsReference ( registered_threads_ , dispatcher )); registered_threads_ . push_back ( dispatcher ); dispatcher . post ([ & dispatcher ] { thread_local_data_ . dispatcher_ = & dispatcher ; }); } } \u5982\u679c\u662f\u4e3b\u7ebf\u7a0b\u7684\u8bdd\uff0c\u8fd8\u4f1a\u989d\u5916\u8bbe\u7f6e\u4e0b main_thread_dispatcher_ \uff0c\u8ba9\u5176\u6307\u5411\u4e3b\u7ebf\u7a0b\u7684 Dispatcher \u3002\u5c06 Dispatcher \u5bf9\u8c61\u653e\u5230 registered_threads_ \u4e2d\u540e\uff0c\u9700\u8981\u66f4\u65b0\u5bf9\u5e94\u7ebf\u7a0b\u7684 thread_local_data_ \u5c40\u90e8\u5b58\u50a8\u4e2d\u7684 dispatcher_ \u6307\u9488\uff0c\u4f7f\u5176\u6307\u5411\u7ebf\u7a0b\u81ea\u5df1\u7684 Dispatcher \u5bf9\u8c61\u3002\u6240\u4ee5\u8fd9\u91cc\u662f\u901a\u8fc7 Dispatcher \u7684post\u65b9\u6cd5\u6765\u6267\u884c\u8fd9\u4e2acallback\u7684\uff0c\u56e0\u4e3apost\u4fdd\u8bc1callback\u4f1a\u548c Dispatcher \u5bf9\u8c61\u6240\u5728\u7ebf\u7a0b\u4e2d\u6267\u884c\u3002\u7ebf\u7a0b\u6ce8\u518c\u5b8c\u6210\u540e\u5c31\u53ef\u4ee5\u901a\u8fc7 allocateSlot \u63a5\u53e3\u6765\u5206\u914d Slot \u4e86\uff0c\u8fd9\u91cc\u5bf9\u4e8e Slot \u7684\u5206\u914d\u5176\u5b9e\u662f\u60f0\u6027\u7684\uff0c\u53ea\u6709\u5728\u9700\u8981\u7684\u65f6\u5019\u624d\u4f1a\u5206\u914d\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 SlotPtr InstanceImpl::allocateSlot () { ASSERT ( std :: this_thread :: get_id () == main_thread_id_ ); ASSERT ( ! shutdown_ ); for ( uint64_t i = 0 ; i < slots_ . size (); i ++ ) { if ( slots_ [ i ] == nullptr ) { std :: unique_ptr < SlotImpl > slot ( new SlotImpl ( * this , i )); slots_ [ i ] = slot . get (); return std :: move ( slot ); } } std :: unique_ptr < SlotImpl > slot ( new SlotImpl ( * this , slots_ . size ())); slots_ . push_back ( slot . get ()); return std :: move ( slot ); } \u904d\u5386\u6240\u6709\u7684 Slot \uff0c\u5982\u679c\u53d1\u73b0\u662f Slot \u662f\u7a7a\u7684\u5c31\u4f1a\u8fdb\u884c\u5206\u914d\uff0c\u5982\u679c\u90fd\u6ca1\u6709\u627e\u5230\u5c31\u76f4\u63a5\u91cd\u65b0\u5206\u914d\u4e00\u4e2a Slot \uff0c\u7136\u540e\u63d2\u5165\u5230 slots_ \u4e2d\uff0c\u6709\u4e86 Slot \u540e\u9700\u8981\u901a\u8fc7\u5176 set \u65b9\u6cd5\u5c06\u8981\u5b58\u50a8\u7684 ThreadLocalObject \u5bf9\u8c61\u653e\u5230\u7ebf\u7a0b\u5c40\u90e8\u5b58\u50a8\u4e2d\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 typedef std :: function < ThreadLocalObjectSharedPtr ( Event :: Dispatcher & dispatcher ) > InitializeCb ; void InstanceImpl::SlotImpl::set ( InitializeCb cb ) { ASSERT ( std :: this_thread :: get_id () == parent_ . main_thread_id_ ); ASSERT ( ! parent_ . shutdown_ ); for ( Event :: Dispatcher & dispatcher : parent_ . registered_threads_ ) { const uint32_t index = index_ ; dispatcher . post ([ index , cb , & dispatcher ]() -> void { setThreadLocal ( index , cb ( dispatcher )); }); } // Handle main thread. setThreadLocal ( index_ , cb ( * parent_ . main_thread_dispatcher_ )); } \u9996\u5148\u901a\u8fc7 InitializeCb \u62ff\u5230\u8981\u5b58\u50a8\u7684 ThreadLocalObject \uff0c\u7136\u540e\u5230\u6240\u6709\u7ebf\u7a0b\u4e2d\u8c03\u7528 setThreadLocal \u65b9\u6cd5\u6765\u66f4\u65b0 ThreadLocalObject \u5bf9\u8c61\u5230\u5bf9\u5e94\u7ebf\u7a0b\u7684\u5c40\u90e8\u5b58\u50a8\u4e2d\u3002\u8fd9\u4e2a\u65b9\u6cd5\u53ea\u80fd\u5728\u4e3b\u7ebf\u7a0b\u4e2d\u8c03\u7528\u3002\u8c03\u7528\u5b8c\u6210\u540e\uff0c\u6240\u6709\u7684\u7ebf\u7a0b\u901a\u8fc7 Slot \u5c31\u53ef\u4ee5\u8bbf\u95ee\u5230\u5b58\u50a8\u7684 ThreadLocalObject \u5bf9\u8c61\u4e86\u3002\u9664\u4e86\u5b58\u50a8\u6570\u636e\u5916\uff0c SlotImpl \u8fd8\u63d0\u4f9b\u4e86\u4e8c\u4e2a\u7528\u4e8e\u5728\u6240\u6709\u7ebf\u7a0b\u4e2d\u6267\u884c\u4efb\u52a1\u7684\u63a5\u53e3\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 void InstanceImpl::runOnAllThreads ( Event :: PostCb cb ) { ASSERT ( std :: this_thread :: get_id () == main_thread_id_ ); ASSERT ( ! shutdown_ ); for ( Event :: Dispatcher & dispatcher : registered_threads_ ) { dispatcher . post ( cb ); } cb (); } void InstanceImpl::runOnAllThreads ( Event :: PostCb cb , Event :: PostCb all_threads_complete_cb ) { ASSERT ( std :: this_thread :: get_id () == main_thread_id_ ); ASSERT ( ! shutdown_ ); cb (); std :: shared_ptr < std :: atomic < uint64_t >> worker_count = std :: make_shared < std :: atomic < uint64_t >> ( registered_threads_ . size ()); for ( Event :: Dispatcher & dispatcher : registered_threads_ ) { dispatcher . post ([ this , worker_count , cb , all_threads_complete_cb ]() -> void { cb (); if ( --* worker_count == 0 ) { main_thread_dispatcher_ -> post ( all_threads_complete_cb ); } }); } } \u56e0\u4e3a ThreadLocal \u4fdd\u5b58\u4e86\u6240\u6709\u6ce8\u518c\u8fdb\u6765\u7684 Dispatcher \u5bf9\u8c61\uff0c\u901a\u8fc7 Dispatcher \u7684 post \u65b9\u6cd5\u5c31\u53ef\u4ee5\u5411\u5bf9\u5e94\u7ebf\u7a0b\u6295\u9012\u4efb\u52a1\u6765\u6267\u884c\uff0c runOnAllThreads \u7684\u7b2c\u4e8c\u4e2a\u91cd\u8f7d\u5b9e\u73b0\u53ef\u4ee5\u5728\u6240\u6709\u7ebf\u7a0b\u90fd\u6267\u884c\u5b8c\u6bd5\u540e\uff0c\u56de\u8c03\u4e3b\u7ebf\u7a0b\u7684 all_threads_complete_cb \u65b9\u6cd5\uff0c\u5b9e\u73b0\u65b9\u5f0f\u4e5f\u662f\u6bd4\u8f83\u7b80\u5355\u6613\u61c2\u7684\uff0c\u5c31\u662f\u901a\u8fc7\u5c06\u4e00\u4e2a std::shared_ptr \u7684\u539f\u5b50\u8ba1\u6570\u5668\u62f7\u8d1d\u5230\u8981\u6267\u884c\u7684\u4efb\u52a1\u4e2d\uff0c\u4efb\u52a1\u6267\u884c\u5b8c\u5c31\u9012\u51cf\u8ba1\u6570\u5668\uff0c\u7b49\u5230\u8ba1\u6570\u5668\u4e3a0\u5c31\u56de\u8c03 all_threads_complete_cb \u3002\u5230\u6b64\u4e3a\u6b62 ThreadLocal \u7684\u4e24\u5927\u6838\u5fc3\u529f\u80fd\u5c31\u5206\u6790\u5b8c\u6bd5\u4e86\uff0c\u4e00\u4e2a\u662f\u901a\u8fc7 set \u65b9\u6cd5\u66f4\u65b0\u6240\u6709\u7ebf\u7a0b\u7684\u5c40\u90e8\u5b58\u50a8\uff0c\u53e6\u5916\u4e00\u4e2a\u5c31\u662f\u901a\u8fc7 runOnAllThreads \u5f80\u6240\u6709\u7684\u7ebf\u7a0b\u6295\u9012\u4efb\u52a1\u3002 \u6700\u540e\u6211\u4eec\u6765\u5206\u6790\u4e0b ThreadLocal \u7684 shutdown \u8fc7\u7a0b\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u6bd4\u8f83\u96be\u7406\u89e3\uff0c InstanceImpl \u63d0\u4f9b\u4e86\u4e24\u4e2a\u65b9\u6cd5\u7528\u4e8eshutdown\u3002 1 2 3 4 5 void InstanceImpl::shutdownGlobalThreading () { ASSERT ( std :: this_thread :: get_id () == main_thread_id_ ); ASSERT ( ! shutdown_ ); shutdown_ = true ; } shutdownGlobalThreading \u65b9\u6cd5\u53ea\u662f\u8bbe\u7f6e\u4e86\u4e00\u4e2a shutdown_ \u7684 flag \uff0c\u53ea\u80fd\u5728\u4e3b\u7ebf\u7a0b\u4e2d\u8c03\u7528\uff0c\u8fd9\u4e2a flag \u7684\u4f5c\u7528\u53ea\u662f\u7528\u4e8e\u5728 Slot \u6790\u6784\u7684\u65f6\u5019\u4e0d\u901a\u77e5\u6240\u6709\u7ebf\u7a0b\u5c06\u5bf9\u5e94 Slot \u4ece\u5176\u7ebf\u7a0b\u5b58\u50a8\u4e2d\u53bb\u9664\uff0c\u6b63\u5e38\u60c5\u51b5\u4e0b\u4e00\u4e2a Slot \u6790\u6784\u9700\u8981\u66f4\u65b0\u6240\u6709\u7ebf\u7a0b\u7684\u5c40\u90e8\u5b58\u50a8\uff0c\u4ece\u4e2d\u53bb\u6389 Slot \u5bf9\u5e94\u7684 ThreadLocalObject \u5bf9\u8c61\u3002\u800c\u5728Shutdown\u7684\u8fc7\u7a0b\u5219\u4e0d\u9700\u8981\uff0c\u56e0\u4e3a\u4e3b\u7ebf\u7a0b\u8fdb\u884cshutdown\u7684\u65f6\u5019\u8868\u660e\u5176\u4ed6\u7ebf\u7a0b\u5df2\u7ecfshutdown\u4e86\uff0c\u5176\u5173\u8054\u7684 Dispatcher \u5bf9\u8c61\u5df2\u7ecf\u4e0d\u5b58\u6d3b\u3002\u6240\u4ee5\u8fd9\u79cd\u60c5\u51b5\u4e0b Slot \u6790\u6784\u4ec0\u4e48\u4e5f\u4e0d\u505a\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 ~ SlotImpl () { parent_ . removeSlot ( * this ); } void InstanceImpl :: removeSlot ( SlotImpl & slot ) { ASSERT ( std :: this_thread :: get_id () == main_thread_id_ ); if ( shutdown_ ) { return ; } const uint64_t index = slot . index_ ; slots_ [ index ] = nullptr ; runOnAllThreads ([ index ]() -> void { if ( index < thread_local_data_ . data_ . size ()) { thread_local_data_ . data_ [ index ] = nullptr ; } }); } \u8fd8\u6709\u53e6\u5916\u4e00\u4e2ashutdown\u51fd\u6570\u5c31\u662f shutdownThread \uff0c\u8fd9\u4e2a\u51fd\u6570\u4f1a\u904d\u5386\u6240\u6709\u7684\u7ebf\u7a0b\u5b58\u50a8\u7684\u6570\u636e\uff0c\u7136\u540e\u8fdb\u884creset\u64cd\u4f5c\uff0c\u6700\u540e\u628a\u6574\u4e2a vector \u8fdb\u884cclear()\u3002\u6bcf\u4e00\u4e2aworker\u90fd\u6301\u6709 InstanceImpl \u5b9e\u4f8b\u7684\u5f15\u7528\uff0c\u5728\u6790\u6784\u7684\u65f6\u5019\u4f1a\u8c03\u7528 shutdownThread \u3002\u8fd9\u4e2a\u51fd\u6570\u7684\u5b9e\u73b0\u5982\u4e0b: 1 2 3 4 5 6 7 8 void InstanceImpl::shutdownThread () { ASSERT ( shutdown_ ); for ( auto it = thread_local_data_ . data_ . rbegin (); it != thread_local_data_ . data_ . rend (); ++ it ) { it -> reset (); } thread_local_data_ . data_ . clear (); } \u5f88\u5947\u602a\u7684\u662f\u8fd9\u91cc\u662f\u9006\u5e8f\u6765\u904d\u5386\u6240\u6709\u7684 ThreadLocalObject \u5bf9\u8c61\u6765\u8fdb\u884creset\u7684\uff0c\u8fd9\u662f\u56e0\u4e3a\u4e00\u4e9b\"\u6301\u4e45\"(\u6d3b\u7684\u6bd4\u8f83\u957f)\u7684\u5bf9\u8c61\u5982 cluster manager \u5f88\u65e9\u5c31\u4f1a\u521b\u5efa ThreadLocalObject \u5bf9\u8c61\uff0c\u4f46\u662f\u76f4\u5230shutdown\u7684\u65f6\u5019\u4e5f\u4e0d\u6790\u6784\uff0c\u800c\u5728\u6b64\u57fa\u7840\u4e0a\u4f9d\u8d56 cluster manager \u7684\u5bf9\u8c61\u7684\u5982 grpc client \u7b49\uff0c\u5219\u662f\u540e\u521b\u5efa ThreadLocalObject \u5bf9\u8c61\uff0c\u5982\u679c cluster manager \u521b\u5efa\u7684 ThreadLocalObject \u5bf9\u8c61\u5148\u6790\u6784\uff0c\u800cgrpc client\u76f8\u5173\u7684 ThreadLocalObject \u5bf9\u8c61\u540e\u6790\u6784\u5c31\u4f1a\u5bfc\u81f4shutdown\u95ee\u9898\u3002\u4e3a\u6b64\u8fd9\u91cc\u9009\u62e9\u9006\u5e8f\u6765\u8fdb\u884c reset \uff0c\u5148\u4ece\u4e00\u4e2a\u9ad8\u5c42\u7684\u5bf9\u8c61\u5f00\u59cb\uff0c\u6700\u540e\u624d\u5f00\u59cb\u5bf9\u4e00\u4e9b\u57fa\u7840\u7684\u5bf9\u8c61\u6240\u5173\u8054\u7684 ThreadLocalObject \u8fdb\u884c reset \u3002\u4f8b\u5982\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 struct ThreadLocalPool : public ThreadLocal :: ThreadLocalObject { ThreadLocalPool ( InstanceImpl & parent , Event :: Dispatcher & dispatcher , const std :: string & cluster_name ); ~ ThreadLocalPool (); PoolRequest * makeRequest ( const std :: string & hash_key , const RespValue & request , PoolCallbacks & callbacks ); void onHostsRemoved ( const std :: vector < Upstream :: HostSharedPtr >& hosts_removed ); InstanceImpl & parent_ ; Event :: Dispatcher & dispatcher_ ; Upstream :: ThreadLocalCluster * cluster_ ; std :: unordered_map < Upstream :: HostConstSharedPtr , ThreadLocalActiveClientPtr > client_map_ ; Envoy :: Common :: CallbackHandle * local_host_set_member_update_cb_handle_ ; }; redis_proxy \u4e2d\u5b9a\u4e49\u4e86\u4e00\u4e2a ThreadLocalPool \uff0c\u8fd9\u4e2a ThreadLocalPool \u53c8\u4f9d\u8d56\u8f83\u4e3a\u57fa\u7840\u7684 ThreadLocalCluster (\u662f ThreadLocalClusterManagerImpl \u7684\u6570\u636e\u6210\u5458\uff0c\u4e5f\u5c31\u662f Cluster manager \u6240\u5bf9\u5e94\u7684 ThreadLocalObject \u5bf9\u8c61)\uff0c\u5982\u679c shutdownThread \u6309\u7167\u987a\u5e8f\u7684\u65b9\u5f0f\u6790\u6784\u7684\u8bdd\uff0c\u90a3\u4e48 ThreadLocalPool \u4e2d\u4f7f\u7528\u7684 ThreadLocalCluster (\u5176\u5b9e\u662f ThreadLocalClusterManagerImpl \u4f1a\u5148\u6790\u6784)\u4f1a\u5148\u88ab\u6790\u6784\uff0c\u7136\u540e\u624d\u662f ThreadLocalPool \u7684\u6790\u6784\uff0c\u800c ThreadLocalPool \u6790\u6784\u7684\u65f6\u5019\u53c8\u4f1a\u4f7f\u7528\u5230 ThreadLocalCluster \uff0c\u4f46\u662f ThreadLocalCluster \u5df2\u7ecf\u6790\u6784\u4e86\uff0c\u8fd9\u4e2a\u65f6\u5019\u5c31\u4f1a\u51fa\u73b0\u91ce\u6307\u9488\u7684\u95ee\u9898\u4e86\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 InstanceImpl :: ThreadLocalPool :: ThreadLocalPool ( InstanceImpl & parent , Event :: Dispatcher & dispatcher , const std :: string & cluster_name ) : parent_ ( parent ), dispatcher_ ( dispatcher ), cluster_ ( parent_ . cm_ . get ( cluster_name )) { ..... local_host_set_member_update_cb_handle_ = cluster_ -> prioritySet (). addMemberUpdateCb ( [ this ]( uint32_t , const std :: vector < Upstream :: HostSharedPtr >& , const std :: vector < Upstream :: HostSharedPtr >& hosts_removed ) -> void { onHostsRemoved ( hosts_removed ); }); } InstanceImpl :: ThreadLocalPool ::~ ThreadLocalPool () { // local_host_set_member_update_cb_handle_\u662fThreadLocalCluster\u7684\u4e00\u90e8\u5206 // ThreadLocalCluster\u6790\u6784\u4f1a\u5bfc\u81f4local_host_set_member_update_cb_handle_\u53d8\u6210\u91ce\u6307\u9488 local_host_set_member_update_cb_handle_ -> remove (); while ( ! client_map_ . empty ()) { client_map_ . begin () -> second -> redis_client_ -> close (); } }","title":"ThreadLocal\u5b9e\u73b0"},{"location":"%E5%8D%9A%E5%AE%A2/doc/envoy/thread_local/#_1","text":"\u901a\u8fc7\u4e0a\u6587\u6211\u76f8\u4fe1\u6211\u4eec\u5e94\u8be5\u8db3\u4ee5\u9a7e\u9a6dEnvoy\u4e2d\u7684 ThreadLocal \uff0c\u4ece\u5176\u8bbe\u8ba1\u53ef\u4ee5\u770b\u51fa\u6709\u5176\u5de7\u5999\u4e4b\u5904\uff0c\u4e5f\u6709\u5176\u4e0d\u8db3\u7684\u5730\u65b9\uff0c\u6bd4\u5982\u5176\u62bd\u8c61\u51fa\u4e00\u4e2a Slot \u548c\u5bf9\u5e94\u7684\u7ebf\u7a0b\u5b58\u50a8\u8fdb\u884c\u4e86\u5173\u8054\uff0c Slot \u53ef\u4ee5\u4efb\u610f\u4f20\u9012\uff0c\u56e0\u4e3a\u4e0d\u5305\u542b\u5b9e\u9645\u7684\u6570\u636e\uff0c\u62f7\u8d1d\u7684\u5f00\u9500\u5f88\u4f4e\uff0c\u53ea\u5305\u542b\u4e86\u4e00\u4e2a\u7d22\u5f15\u503c\uff0c\u5177\u4f53\u5173\u8054\u7684\u7ebf\u7a0b\u5b58\u50a8\u6570\u636e\u662f\u4e0d\u77e5\u9053\u7684\uff0c\u907f\u514d\u76f4\u63a5\u66b4\u9732\u7ed9\u7528\u6237\u80cc\u540e\u7684\u6570\u636e\u3002\u800c InstanceImpl \u5bf9\u8c61\u5219\u7ba1\u7406\u7740\u6240\u6709 Slot \u7684\u5206\u914d\u548c\u79fb\u9664\u4ee5\u53ca\u6574\u4e2a ThreadLocal \u5bf9\u8c61\u7684 shutdown \u3002\u4e0d\u8db3\u7684\u5730\u65b9\u6211\u89c9\u5f97\u4e3b\u8981\u6709\u4e24\u70b9\uff0c \u5176\u4e2d\u4e00\u4e2a\u5c31\u662f Slot \u7684\u5206\u914d\u673a\u5236\u6548\u7387\u4e0d\u592a\u9ad8\uff0c\u5982\u679c Slot \u5728\u5927\u91cf\u8fdb\u884c\u4e86\u5206\u914d\u548c\u91ca\u653e\u540e\uff0c\u6574\u4e2a vector \u4e2d\u7684\u7a7a\u95f2\u7684 Slot \u5176\u5b9e\u5f88\u7a00\u758f\uff0c\u8fd9\u4e2a\u65f6\u5019\u5982\u679c\u4ece\u5934\u5f00\u59cb\u904d\u5386\u6765\u627e\u4e0b\u4e00\u4e2a\u53ef\u7528\u7684 Slot \u5219\u6548\u7387\u4e0d\u9ad8\uff0c\u800c\u4e14\u6839\u636e Slot \u5206\u914d\u7684\u7279\u70b9\u6765\u770b\uff0c\u8d8a\u9760\u524d\u7684 Slot \u8d8a\u6709\u53ef\u80fd\u6ca1\u91ca\u653e(\u8d8a\u57fa\u7840\u7684\u5bf9\u8c61\uff0c\u8d8a\u65e9\u521b\u5efa Slot \uff0c\u4f46\u662f\u6700\u540e\u624d\u91ca\u653e)\uff0c\u8fd9\u6837\u7684\u8bdd\uff0c\u6bcf\u6b21\u904d\u5386\u627e\u7a7a\u95f2\u7684 Slot \u7684\u65f6\u5019\uff0c\u5176\u5b9e\u524dN\u4e2a\u5f88\u5927\u6982\u7387\u90fd\u662f\u5728\u505a\u65e0\u7528\u529f\uff0c\u5f71\u54cd\u67e5\u627e\u7684\u6548\u7387\u3002\u53e6\u5916\u4e00\u4e2a\u6211\u89c9\u5f97\u4e0d\u592a\u597d\u7684\u5730\u65b9\u5c31\u662f shutdownThread \u7684\u5b9e\u73b0\uff0c\u8fd9\u4e2a\u5176\u5b9e\u6bd4\u8f83\u96be\u7406\u89e3\uff0c\u5bf9\u4f7f\u7528\u8005\u4e5f\u6ca1\u6709\u592a\u591a\u7684\u7ea6\u675f\uff0c\u5982\u679c\u4e24\u4e2a ThreadLocalObject \u4ea7\u751f\u4e86\u4f9d\u8d56(\u6bd4\u5982A\u4f9d\u8d56B)\uff0c\u4f46\u662fA\u662f\u5148\u5206\u914d Slot \u7684\uff0cB\u662f\u540e\u5206\u914d\u7684\uff0c\u90a3\u4e48\u8fd9\u79cd\u60c5\u51b5\u4e0b\u9006\u5e8f\u8fdb\u884c\u6790\u6784\u7684\u65f6\u5019\u4f1a\u5148\u628aB\u6790\u6784\uff0c\u7b49\u5230\u6790\u6784A\u7684\u65f6\u5019\uff0c\u5982\u679c\u5728\u5176\u6790\u6784\u51fd\u6570\u4e2d\u53c8\u4f7f\u7528\u4e86B\u5c31\u4f1a\u4ea7\u751f\u91ce\u6307\u9488\u7684\u95ee\u9898\uff0c\u800c\u4e14\u8fd9\u79cd\u60c5\u51b5\u4e5f\u6ca1\u6709\u68c0\u67e5\u673a\u5236\u5f88\u96be\u88ab\u53d1\u73b0\u3002","title":"\u603b\u7ed3"},{"location":"%E5%8D%9A%E5%AE%A2/doc/linux/Linux%E4%B8%AD%E7%9A%84%E5%8F%AF%E6%89%A7%E8%A1%8C%E7%A8%8B%E5%BA%8F%E6%9C%89%E4%BB%80%E4%B9%88%3F/","text":"Linux\u4e2d\u7684\u53ef\u6267\u884c\u7a0b\u5e8f\u6709\u4ec0\u4e48? \u81ea\u4ece\u5c0f\u7684\u65f6\u5019\u53d1\u73b0\u53ef\u6267\u884c\u6587\u4ef6\u4ec5\u4ec5\u53ea\u662f\u4e00\u4e2a\u6587\u4ef6\u7684\u65f6\u5019\uff0c\u53ef\u6267\u884c\u6587\u4ef6\u4fbf\u5f00\u59cb\u8ba9\u6211\u7740\u8ff7\u3002\u5982\u679c\u4f60\u5c06 .exe \u540e\u7f00\u91cd\u547d\u540d\u4e3a\u5176\u4ed6\u540d\u79f0\uff0c\u5219\u53ef\u4ee5\u5728\u8bb0\u4e8b\u672c\u4e2d\u6253\u5f00\u8fd9\u4e2a\u6587\u4ef6! \u800c\u4e14\uff0c\u5982\u679c\u5c06\u5176\u4ed6\u540e\u7f00\u7684\u6587\u4ef6\u91cd\u547d\u540d\u4e3a.exe\u540e\u7f00\uff0c\u5219\u4f1a\u51fa\u73b0\u4e00\u4e2a\u7b80\u6d01\u7684\u9519\u8bef\u6846\u3002 \u663e\u7136\u8fd9\u4e9b\u6587\u4ef6\u6709\u6240\u4e0d\u540c\u3002\u4ece\u8bb0\u4e8b\u672c\u4e2d\u53ef\u4ee5\u770b\u5230\uff0c\u5b83\u4eec\u5927\u591a\u662f\u4e71\u7801\uff0c\u4f46\u662f\u5728\u90a3\u79cd\u6df7\u4e71\u4e2d\u5fc5\u987b\u4fdd\u8bc1\u79e9\u5e8f\u300212\u5c81\u7684\u6211\u77e5\u9053\u4e86\u8fd9\u4e00\u70b9\u540e\uff0c\u5c3d\u7ba1\u6211\u8fd8\u4e0d\u592a\u4e86\u89e3\u5982\u4f55\u6216\u8005\u5728\u4f55\u5904\u624d\u80fd\u6df1\u5165\u6316\u6398\u8fd9\u4e00\u5207\u3002 \u56e0\u6b64\u672c\u7cfb\u5217\u662f\u5949\u732e\u7ed9\u8fc7\u4e8e\u7684\u6211\u3002\u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u5c06\u5c1d\u8bd5\u4e86\u89e3Linux\u53ef\u6267\u884c\u6587\u4ef6\u7684\u7ec4\u7ec7\u65b9\u5f0f\uff0c\u5982\u4f55\u6267\u884c\u5b83\u4eec\uff0c\u4ee5\u53ca\u5982\u4f55\u4f7f\u7a0b\u5e8f\u4ece\u94fe\u63a5\u5668\u4e2d\u91cd\u65b0\u83b7\u5f97\u53ef\u6267\u884c\u6587\u4ef6\u5e76\u5bf9\u5176\u8fdb\u884c\u538b\u7f29-\u6b63\u56e0\u4e3a\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u505a\u3002 \u7531\u4e8e\u6700\u540e\u4e00\u4e2a\u5927\u7cfb\u5217 \u5236\u4f5c\u81ea\u5df1\u7684ping \u5b8c\u5168\u662f\u5173\u4e8eWindows\u7684\uff0c\u56e0\u6b64\u672c\u7cfb\u5217\u5c06\u91cd\u70b9\u4ecb\u7ecd64\u4f4dLinux\u3002 \u4f46\u9996\u5148\uff0c\u8ba9\u6211\u7f16\u5199\u6c47\u7f16 \u5728\u672c\u7cfb\u5217\u7684\u6574\u4e2a\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u80af\u5b9a\u5e0c\u671b\u6700\u7ec8\u53ef\u4ee5\u6253\u5305\u51fa\u4e00\u4e2a\u81ea\u5df1\u7684\u53ef\u6267\u884c\u6587\u4ef6\u3002\u4f46\u662f\uff0c\u6b63\u5982\u6211\u4eec\u5728\u5904\u7406\u4ee5\u592a\u7f51\u3001IPv4\u548cICMP\u65f6\u6240\u505a\u7684\u4e00\u6837\uff0c\u6211\u4eec\u9996\u5148\u8981\u5229\u7528\u5404\u79cd\u5de5\u5177\uff0c\u5bf9\u4e00\u4e2a\u53ef\u4ee5\u6b63\u5e38\u5de5\u4f5c\u7684Linux\u53ef\u6267\u884c\u6587\u4ef6 \u8fdb\u884c\u6df1\u5ea6\u5206\u6790\u3002 Hot tip: ELF\u4ee3\u8868\u53ef\u6267\u884c\u548c\u53ef\u94fe\u63a5\u683c\u5f0f\u3002\u5b83\u4e8e1983\u5e74\u4f5c\u4e3a SysV 4 \u7684\u4e00\u90e8\u5206\u9996\u6b21\u53d1\u5e03\uff0c\u5c3d\u7ba1\u589e\u52a0\u4e86\u65b0\u7684\u90e8\u5206\uff0c\u4f46\u5b83\u4ecd\u5728\u4eca\u5929\u7684Linux\u4e0a\u4f7f\u7528 \u6211\u4e0d\u5f97\u4e0d\u56de\u8fc7\u5934\u6765\u53bb\u770b \u8270\u96be\u5730\u9605\u8bfb\u6587\u4ef6-\u7b2c2\u90e8\u5206 \uff0c\u4ee5\u5feb\u901f\u4e86\u89e3nasm(Netwide\u6c47\u7f16\u7a0b\u5e8f)\uff0c\u56e0\u6b64\uff0c\u5982\u679c\u60a8\u4e5f\u9700\u8981\u7684\u8bdd\uff0c\u6211\u4e5f\u4e0d\u4f1a\u602a\u60a8\u3002 \u65e0\u8bba\u5982\u4f55\uff0c\u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801\u662f\u4e00\u4e2a\u7b80\u77ed\u7684\u7248\u672c\uff1a\u7528\u4e8e\u5728\u6807\u51c6\u8f93\u51fa\u4e2d\u6253\u5370\"hi there\"\uff0c\u7136\u540e\u52a0\u4e0a\u6362\u884c\u7b26\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 ; in `hello.asm` global _start section .text _start: mov rdi , 1 ; stdout fd mov rsi , msg mov rdx , 9 ; 8 chars + newline mov rax , 1 ; write syscall syscall xor rdi , rdi ; return code 0 mov rax , 60 ; exit syscall syscall section .data msg: db \" hi there \" , 10 \u63d0\u9192\u4e00\u4e0b\uff0c Filippo\u7684Searchable Linux Syscall\u8868 \u975e\u5e38\u51fa\u8272\u3002 \u6211\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u6784\u5efa\u548c\u94fe\u63a5\u4e0a\u9762\u8fd9\u6bb5\u4ee3\u7801\u3002","title":"Linux\u4e2d\u7684\u53ef\u6267\u884c\u7a0b\u5e8f\u6709\u4ec0\u4e48?"},{"location":"%E5%8D%9A%E5%AE%A2/doc/linux/Linux%E4%B8%AD%E7%9A%84%E5%8F%AF%E6%89%A7%E8%A1%8C%E7%A8%8B%E5%BA%8F%E6%9C%89%E4%BB%80%E4%B9%88%3F/#linux","text":"\u81ea\u4ece\u5c0f\u7684\u65f6\u5019\u53d1\u73b0\u53ef\u6267\u884c\u6587\u4ef6\u4ec5\u4ec5\u53ea\u662f\u4e00\u4e2a\u6587\u4ef6\u7684\u65f6\u5019\uff0c\u53ef\u6267\u884c\u6587\u4ef6\u4fbf\u5f00\u59cb\u8ba9\u6211\u7740\u8ff7\u3002\u5982\u679c\u4f60\u5c06 .exe \u540e\u7f00\u91cd\u547d\u540d\u4e3a\u5176\u4ed6\u540d\u79f0\uff0c\u5219\u53ef\u4ee5\u5728\u8bb0\u4e8b\u672c\u4e2d\u6253\u5f00\u8fd9\u4e2a\u6587\u4ef6! \u800c\u4e14\uff0c\u5982\u679c\u5c06\u5176\u4ed6\u540e\u7f00\u7684\u6587\u4ef6\u91cd\u547d\u540d\u4e3a.exe\u540e\u7f00\uff0c\u5219\u4f1a\u51fa\u73b0\u4e00\u4e2a\u7b80\u6d01\u7684\u9519\u8bef\u6846\u3002 \u663e\u7136\u8fd9\u4e9b\u6587\u4ef6\u6709\u6240\u4e0d\u540c\u3002\u4ece\u8bb0\u4e8b\u672c\u4e2d\u53ef\u4ee5\u770b\u5230\uff0c\u5b83\u4eec\u5927\u591a\u662f\u4e71\u7801\uff0c\u4f46\u662f\u5728\u90a3\u79cd\u6df7\u4e71\u4e2d\u5fc5\u987b\u4fdd\u8bc1\u79e9\u5e8f\u300212\u5c81\u7684\u6211\u77e5\u9053\u4e86\u8fd9\u4e00\u70b9\u540e\uff0c\u5c3d\u7ba1\u6211\u8fd8\u4e0d\u592a\u4e86\u89e3\u5982\u4f55\u6216\u8005\u5728\u4f55\u5904\u624d\u80fd\u6df1\u5165\u6316\u6398\u8fd9\u4e00\u5207\u3002 \u56e0\u6b64\u672c\u7cfb\u5217\u662f\u5949\u732e\u7ed9\u8fc7\u4e8e\u7684\u6211\u3002\u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u5c06\u5c1d\u8bd5\u4e86\u89e3Linux\u53ef\u6267\u884c\u6587\u4ef6\u7684\u7ec4\u7ec7\u65b9\u5f0f\uff0c\u5982\u4f55\u6267\u884c\u5b83\u4eec\uff0c\u4ee5\u53ca\u5982\u4f55\u4f7f\u7a0b\u5e8f\u4ece\u94fe\u63a5\u5668\u4e2d\u91cd\u65b0\u83b7\u5f97\u53ef\u6267\u884c\u6587\u4ef6\u5e76\u5bf9\u5176\u8fdb\u884c\u538b\u7f29-\u6b63\u56e0\u4e3a\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u505a\u3002 \u7531\u4e8e\u6700\u540e\u4e00\u4e2a\u5927\u7cfb\u5217 \u5236\u4f5c\u81ea\u5df1\u7684ping \u5b8c\u5168\u662f\u5173\u4e8eWindows\u7684\uff0c\u56e0\u6b64\u672c\u7cfb\u5217\u5c06\u91cd\u70b9\u4ecb\u7ecd64\u4f4dLinux\u3002","title":"Linux\u4e2d\u7684\u53ef\u6267\u884c\u7a0b\u5e8f\u6709\u4ec0\u4e48?"},{"location":"%E5%8D%9A%E5%AE%A2/doc/linux/Linux%E4%B8%AD%E7%9A%84%E5%8F%AF%E6%89%A7%E8%A1%8C%E7%A8%8B%E5%BA%8F%E6%9C%89%E4%BB%80%E4%B9%88%3F/#_1","text":"\u5728\u672c\u7cfb\u5217\u7684\u6574\u4e2a\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u80af\u5b9a\u5e0c\u671b\u6700\u7ec8\u53ef\u4ee5\u6253\u5305\u51fa\u4e00\u4e2a\u81ea\u5df1\u7684\u53ef\u6267\u884c\u6587\u4ef6\u3002\u4f46\u662f\uff0c\u6b63\u5982\u6211\u4eec\u5728\u5904\u7406\u4ee5\u592a\u7f51\u3001IPv4\u548cICMP\u65f6\u6240\u505a\u7684\u4e00\u6837\uff0c\u6211\u4eec\u9996\u5148\u8981\u5229\u7528\u5404\u79cd\u5de5\u5177\uff0c\u5bf9\u4e00\u4e2a\u53ef\u4ee5\u6b63\u5e38\u5de5\u4f5c\u7684Linux\u53ef\u6267\u884c\u6587\u4ef6 \u8fdb\u884c\u6df1\u5ea6\u5206\u6790\u3002 Hot tip: ELF\u4ee3\u8868\u53ef\u6267\u884c\u548c\u53ef\u94fe\u63a5\u683c\u5f0f\u3002\u5b83\u4e8e1983\u5e74\u4f5c\u4e3a SysV 4 \u7684\u4e00\u90e8\u5206\u9996\u6b21\u53d1\u5e03\uff0c\u5c3d\u7ba1\u589e\u52a0\u4e86\u65b0\u7684\u90e8\u5206\uff0c\u4f46\u5b83\u4ecd\u5728\u4eca\u5929\u7684Linux\u4e0a\u4f7f\u7528 \u6211\u4e0d\u5f97\u4e0d\u56de\u8fc7\u5934\u6765\u53bb\u770b \u8270\u96be\u5730\u9605\u8bfb\u6587\u4ef6-\u7b2c2\u90e8\u5206 \uff0c\u4ee5\u5feb\u901f\u4e86\u89e3nasm(Netwide\u6c47\u7f16\u7a0b\u5e8f)\uff0c\u56e0\u6b64\uff0c\u5982\u679c\u60a8\u4e5f\u9700\u8981\u7684\u8bdd\uff0c\u6211\u4e5f\u4e0d\u4f1a\u602a\u60a8\u3002 \u65e0\u8bba\u5982\u4f55\uff0c\u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801\u662f\u4e00\u4e2a\u7b80\u77ed\u7684\u7248\u672c\uff1a\u7528\u4e8e\u5728\u6807\u51c6\u8f93\u51fa\u4e2d\u6253\u5370\"hi there\"\uff0c\u7136\u540e\u52a0\u4e0a\u6362\u884c\u7b26\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 ; in `hello.asm` global _start section .text _start: mov rdi , 1 ; stdout fd mov rsi , msg mov rdx , 9 ; 8 chars + newline mov rax , 1 ; write syscall syscall xor rdi , rdi ; return code 0 mov rax , 60 ; exit syscall syscall section .data msg: db \" hi there \" , 10 \u63d0\u9192\u4e00\u4e0b\uff0c Filippo\u7684Searchable Linux Syscall\u8868 \u975e\u5e38\u51fa\u8272\u3002 \u6211\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u6784\u5efa\u548c\u94fe\u63a5\u4e0a\u9762\u8fd9\u6bb5\u4ee3\u7801\u3002","title":"\u4f46\u9996\u5148\uff0c\u8ba9\u6211\u7f16\u5199\u6c47\u7f16"},{"location":"%E5%8D%9A%E5%AE%A2/doc/linux/Linux%E4%BF%A1%E5%8F%B7%E4%B8%93%E9%A2%98FAQ/","text":"Linux \u4fe1\u53f7FAQ \u53ef\u91cd\u5165\u3001\u7ebf\u7a0b\u5b89\u5168\u4ee5\u53ca\u5f02\u6b65\u4fe1\u53f7\u5b89\u5168\u7684\u533a\u522b? \u200b\u2003 \u2003\u53c2\u8003 \u53ef\u91cd\u5165\u3001\u7ebf\u7a0b\u5b89\u5168\u548c\u5f02\u6b65\u4fe1\u53f7\u5b89\u5168 \uff0c\u9700\u8981\u5f3a\u8c03\u7684\u662f\u5f02\u6b65\u4fe1\u53f7\u5b89\u5168\uff0c\u8fd9\u4e2a\u6982\u5ff5\u77e5\u9053\u7684\u4eba\u4e0d\u591a\uff0c\u5e73\u5e38\u5927\u5bb6\u5728\u7f16\u5199\u4ee3\u7801\u7684\u65f6\u5019\u4e5f\u5f88\u5c11\u8003\u8651\u8fd9\u4e2a\u56e0\u7d20\uff0c\u4e5f\u4e0d\u6e05\u695a\u54ea\u4e9b\u51fd\u6570\u662f\u5f02\u6b65\u4fe1\u53f7\u5b89\u5168\u7684\uff0c\u54ea\u4e9b\u4e0d\u662f\uff0c\u5178\u578b\u7684\u50cf printf \u5c31\u4e0d\u662f\u5f02\u6b65\u4fe1\u53f7\u5b89\u5168\u7684\uff0c\u5185\u90e8\u4f1a\u52a0\u9501\uff0c\u4f46\u662f\u5e73\u65f6\u5f88\u591a\u4eba\u90fd\u559c\u6b22\u5728\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u4e2d\u8c03\u7528\u3002\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u90fd\u4e0d\u4f1a\u51fa\u73b0\u95ee\u9898\u7684\uff0c\u6240\u4ee5\u8ba9\u4f7f\u7528\u8005\u9519\u8bef\u7684\u8ba4\u4e3a\u8fd9\u662f\u6b63\u786e\u7684\u5199\u6cd5\u3002\u7b2c\u4e8c\u4e2a\u9700\u8981\u6ce8\u610f\u7684\u662f\u53ef\u91cd\u5165\u7684\u6982\u5ff5\uff0cLinux\u6709\u5f88\u4e0d\u5c11\u7cfb\u7edf\u8c03\u7528\u7684\u5b9e\u73b0\u90fd\u662f\u4e0d\u53ef\u91cd\u5165\u7684\uff0c\u4f1a\u5c06\u7ed3\u679c\u4fdd\u5b58\u5728\u5185\u90e8\u7684\u9759\u6001\u6570\u636e\u5b58\u50a8\u4e2d\uff0c\u540c\u65f6\u8fd9\u7c7b\u7cfb\u7edf\u8c03\u7528\u4e5f\u63d0\u4f9b\u4e86\u53ef\u91cd\u5165\u7248\u672c\u7684\u5b9e\u73b0\uff0c\u5176\u51fd\u6570\u540d\u5c31\u662f\u5c3e\u90e8\u6dfb\u52a0 _r \u6765\u6807\u8bc6\u3002 \u4fe1\u53f7\u7684\u5185\u90e8\u5b9e\u73b0\u662f\u600e\u4e48\u6837\u7684? \u200b \u5982\u4e0a\u56fe\u6240\u793a\u4e00\u4e2a\u8fdb\u7a0b/\u7ebf\u7a0b\u5c31\u662f\u4e00\u4e2atask_struct\u7ed3\u6784\uff0c\u8be5\u7ed3\u6784\u5305\u542b\u4e86\u5c5e\u4e8e\u8fd9\u4e2a\u8fdb\u7a0b/\u7ebf\u7a0b\u7684\u963b\u585e\u4fe1\u53f7\u96c6\u3001pending\u7684\u4fe1\u53f7\u7b49\uff0c\u6240\u6709\u6295\u9012\u5230\u8be5\u8fdb\u7a0b/\u7ebf\u7a0b\u7684\u4fe1\u53f7\u90fd\u4f1a\u901a\u8fc7\u53cc\u5411\u94fe\u8868\u7ec4\u7ec7\u5728\u4e00\u8d77\uff0c\u94fe\u8868\u7684\u5143\u7d20\u662fsigqueue\uff0c\u6240\u6709\u7684\u4fe1\u53f7\u5bf9\u5e94\u7684\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u5b58\u653e\u5728sighand_struct\u4e2d\u7684\u4e00\u4e2a\u7c7b\u578b\u4e3ak_sigaction\u6570\u7ec4\uff0c\u6bcf\u6b21\u7a0b\u5e8f\u7531\u6838\u5fc3\u6001\u5207\u6362\u5230\u7528\u6237\u6001\u65f6\uff0c\u5185\u6838\u90fd\u4f1a\u53d1\u8d77\u4fe1\u53f7\u5904\u7406\uff0c\u6267\u884c\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u7684\u65f6\u5019\u4e3a\u4e86\u907f\u514d\u5bf9\u5185\u6838\u4ea7\u751f\u5f71\u54cd\uff0c\u6240\u4ee5\u4f7f\u7528\u7684\u662f\u7528\u6237\u6808\uff0c\u8fd8\u53ef\u4ee5\u81ea\u5b9a\u4e49\u4fe1\u53f7\u5904\u7406\u7684\u5907\u7528\u6808\u3002 \u200b \u4fe1\u53f7\u5904\u7406\u51fd\u6570\u662f\u6bcf\u6b21\u7a0b\u5e8f\u4ece\u6838\u5fc3\u6001\u5207\u6362\u5230\u7528\u6237\u6001\u7684\u65f6\u5019\uff0c\u5185\u6838\u624d\u4f1a\u8d1f\u8d23\u53d1\u8d77\u4fe1\u53f7\u5904\u7406\uff0c\u4e5f\u5c31\u662f\u8bf4\u4fe1\u53f7\u5904\u7406\u7684\u65f6\u673a\u6709\u4ee5\u4e0b\u4e24\u79cd: \u8fdb\u7a0b\u5728\u5f53\u524d\u65f6\u95f4\u7247\u7528\u5b8c\u540e\uff0c\u83b7\u5f97\u4e86\u65b0\u7684\u65f6\u95f4\u7247\u65f6(\u4f1a\u53d1\u751f\u5185\u6838\u6001\u5230\u7528\u6237\u6001\u7684\u5207\u6362) \u7cfb\u7edf\u8c03\u7528\u6267\u884c\u5b8c\u6210\u65f6(\u4fe1\u53f7\u7684\u4f20\u9012\u53ef\u80fd\u4f1a\u5f15\u8d77\u6b63\u5728\u963b\u585e\u7684\u7cfb\u7edf\u8c03\u7528\u8fc7\u65e9\u5b8c\u6210) \u5982\u4f55\u67e5\u770b\u4e00\u4e2a\u8fdb\u7a0b\u5f53\u524d\u7b49\u5f85\u7684\u3001\u963b\u585e\u7684\u3001\u5ffd\u7565\u7684\u3001\u6355\u83b7\u7684\u4fe1\u53f7? \u200b\u2003 \u2003\u901a\u8fc7\u67e5\u770b /proc/PID/status \u6587\u4ef6\uff0c\u8be5\u6587\u4ef6\u4e2d\u6709\u51e0\u4e2a\u5b57\u7aef\u7684\u503c\uff0c\u8fd9\u4e9b\u503c\u6309\u7167\u5341\u516d\u8fdb\u5236\u7684\u5f62\u5f0f\u663e\u793a\uff0c\u6700\u4f4e\u7684\u6709\u6548\u4f4d\u8868\u793a\u4fe1\u53f71\uff0c\u76f8\u90bb\u7684\u5de6\u8fb9\u4e00\u4f4d\u4ee3\u8868\u4fe1\u53f72\uff0c\u4f9d\u6b21\u7c7b\u63a8\uff0c\u4f8b\u5982\u4e0b\u9762\u8fd9\u51e0\u4e2a\u6570\u503c: 1 2 3 4 5 6 SigQ : 0 / 3872 0 \u662f\u5f53\u524d\u4fe1\u53f7\u961f\u5217\u4e2d\u7684\u4fe1\u53f7\u6570\uff0c 3872 \u662f\u4fe1\u53f7\u961f\u5217\u7684\u6700\u5927\u957f\u5ea6 SigPnd : 0000000000000000 \u5f53\u524d pending\u7684\u4fe1\u53f7 \uff0c\u4e5f\u5c31\u662f\u6ca1\u6709\u4fe1\u53f7\u6295\u9012\u7ed9\u7ebf\u7a0b ShdPnd : 0000000000000000 \u5f53\u524d pengding\u7684\u4fe1\u53f7 \uff0c\u4e5f\u5c31\u662f\u6ca1\u6709\u4fe1\u53f7\u6295\u9012\u7ed9\u8fdb\u7a0b SigBlk : 7 be3c0fe28014a03 \u5f53\u524d\u963b\u585e\u7684\u4fe1\u53f7 SigIgn : 0000000000001000 \u5f53\u524d\u88ab\u5ffd\u7565\u7684\u4fe1\u53f7 SigCgt : 00000001 800004 ec \u5f53\u524d\u88ab\u6355\u83b7\u7684\u4fe1\u53f7 \u4fe1\u53f7\u7684\u9ed8\u8ba4\u5904\u7406\u65b9\u5f0f\u6709\u54ea\u4e9b? \u200b\u2003 \u2003\u5f53\u4fe1\u53f7\u5230\u8fbe\u7684\u65f6\u5019\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4fe1\u53f7\u6709\u5982\u4e0b\u51e0\u79cd\u5904\u7406\u65b9\u5f0f: \u5ffd\u7565\u4fe1\u53f7\uff0c\u5185\u6838\u76f4\u63a5\u5c06\u4fe1\u53f7\u4e22\u5f03\uff0c\u4e0d\u5bf9\u8fdb\u7a0b\u4ea7\u751f\u4efb\u4f55\u5f71\u54cd \u7ec8\u6b62\u8fdb\u7a0b\uff0c\u662f\u4e00\u79cd\u5f02\u5e38\u7684\u7ec8\u6b62\u65b9\u5f0f\uff0c\u548c\u8c03\u7528exit\u800c\u53d1\u751f\u7684\u7ec8\u6b62\u4e0d\u540c \u4ea7\u751f\u6838\u5fc3\u5b58\u50a8\u6587\u4ef6\uff0c\u540c\u65f6\u8fdb\u7a0b\u7ec8\u6b62 \u505c\u6b62\u8fdb\u7a0b\uff0c\u6682\u505c\u8fdb\u7a0b\u7684\u8fd0\u884c \u6062\u590d\u4e4b\u524d\u6682\u505c\u7684\u8fdb\u7a0b \u6267\u884c\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u4fe1\u53f7\u5904\u7406\u5668 signal\u548csigaction\u533a\u522b? \u200b\u2003 \u2003\u8fd9\u4e24\u8005\u90fd\u53ef\u4ee5\u7528\u6765\u6539\u53d8\u4fe1\u53f7\u5904\u7f6e\uff0c signal \u5f88\u539f\u59cb\uff0c\u63d0\u4f9b\u7684\u63a5\u53e3\u4e5f\u6bd4\u8f83\u7b80\u5355\uff0c\u800c sigaction \u63d0\u4f9b\u4e86 signal \u6240\u4e0d\u5177\u5907\u7684\u529f\u80fd\u3002\u4e3a\u4e86\u517c\u5bb9\uff0c signal \u7cfb\u7edf\u8c03\u7528\u4ecd\u7136\u4fdd\u5b58\uff0c\u4f46\u662f glibc \u662f\u4f7f\u7528 sigaction \u5b9e\u73b0\u4e86 signal \u7684\u529f\u80fd\u3002 sigaction \u540c\u65f6\u652f\u6301\u4e24\u79cd\u5f62\u5f0f\u7684\u4fe1\u53f7\u5904\u7406\uff0c\u901a\u8fc7\u4e0d\u7528\u7684 flags \u533a\u5206\uff0c\u901a\u8fc7\u8bbe\u7f6e\u4e0d\u540c\u7684 flags \u53ef\u4ee5\u5f97\u5230\u4e0d\u540c\u7684\u529f\u80fd\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 struct sigaction { // \u4e24\u79cdhandler\uff0c\u517c\u5bb9\u8001\u7684signal\u5bf9\u5e94\u7684\u4fe1\u53f7\u5904\u7406\u51fd\u6570 void ( * sa_handler )( int ); void ( * sa_sigaction )( int , siginfo_t * , void * ); sigset_t sa_mask ; // \u8981\u5c4f\u853d\u7684\u4fe1\u53f7\u96c6 int sa_flags ; void ( * sa_restorer )( void ); // Not for application use }; sa_flags : 1. SA_NOCLDSTOP \u5f53\u63a5\u6536\u4e00\u4e2a\u4fe1\u53f7\u800c\u505c\u6b62\u6216\u6062\u590d\u67d0\u4e00\u4e2a\u5b50\u8fdb\u7a0b\u65f6\uff0c\u5c06\u4e0d\u4f1a\u4ea7\u751f SIGCHLD\u4fe1\u53f7 2. SA_NOCLDWAIT \u5b50\u8fdb\u7a0b\u7ec8\u6b62\u65f6\u4e0d\u4f1a\u5c06\u5176\u8f6c\u5316\u4e3a\u50f5\u5c38 3. SA_NODEFER \u6355\u83b7\u4fe1\u53f7\u540e\uff0c\u4e0d\u4f1a\u5728\u6267\u884c\u4fe1\u53f7\u5904\u7406\u5668\u7a0b\u5e8f\u7684\u65f6\u5019\u81ea\u52a8\u5c06\u8be5\u4fe1\u53f7\u6dfb\u52a0\u5230\u8fdb\u7a0b\u63a9\u7801\u4e2d\uff0c\u4e5f\u5c31\u662f\u4e0d\u4f1a\u88ab\u8fd9\u4e2a \u4fe1\u53f7\u518d\u6b21\u6253\u65ad\uff0c\u6210\u4e3a\u6b7b\u5faa\u73af\u3002 4. SA_ONSTACK \u5728\u6267\u884c\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u65f6\uff0c\u4f7f\u7528 sigaltstack\u5b89\u88c5\u7684\u5907\u9009\u6808 5. SA_RESETHAND \u6355\u83b7\u4fe1\u53f7\u540e\uff0c\u4f1a\u5728\u8c03\u7528\u5904\u7406\u5668\u51fd\u6570\u4e4b\u524d\u5c06\u4fe1\u53f7\u5904\u7f6e\u4e3a\u9ed8\u8ba4\u503c 6. SA_RESTART \u81ea\u52a8\u91cd\u542f\u7531\u4fe1\u53f7\u5904\u7406\u5668\u7a0b\u5e8f\u4e2d\u65ad\u7684\u7cfb\u7edf\u8c03\u7528 7. SA_SIGINFO \u8c03\u7528\u4fe1\u53f7\u5904\u7406\u5668\u7a0b\u5e8f\u65f6\uff0c\u643a\u5e26\u989d\u5916\u7684\u53c2\u6570\uff0c\u4e5f\u5c31\u662f\u4f7f\u7528 sa_sigaction\u7c7b\u578b\u7684\u4fe1\u53f7\u5904\u7406\u51fd\u6570 \u901a\u8fc7Kill\u6765\u68c0\u67e5\u8fdb\u7a0b\u662f\u5426\u5b58\u5728? \u200b\u2003 \u2003 kill \u7cfb\u7edf\u8c03\u7528\u53ef\u4ee5\u7528\u6765\u5411\u6307\u5b9a\u8fdb\u7a0b\u53d1\u9001\u4fe1\u53f7\uff0c\u5982\u679c\u6307\u5b9a\u7684\u4fe1\u53f7\u662f0\u7684\u65f6\u5019\uff0c kill \u4ec5\u4f1a\u8fdb\u884c\u9519\u8bef\u7684\u68c0\u67e5\uff0c\u67e5\u770b\u662f\u5426\u53ef\u4ee5\u60f3\u76ee\u6807\u8fdb\u7a0b\u53d1\u9001\u4fe1\u53f7\uff0c\u800c\u8fd9\u4e00\u7279\u70b9\u6070\u597d\u53ef\u4ee5\u7528\u6765\u68c0\u6d4b\u7279\u5b9a\u8fdb\u7a0bID\u6240\u5bf9\u5e94\u7684\u8fdb\u7a0b\u662f\u5426\u5b58\u5728\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u90a3\u4e48 kill \u8c03\u7528\u5931\u8d25\uff0c\u5e76\u4e14 errno \u8bbe\u7f6e\u4e3a ESRCH \u5982\u4f55\u6253\u5370\u4fe1\u53f7\u679a\u4e3e\u503c\u5bf9\u5e94\u7684\u4fe1\u53f7\u63cf\u8ff0? 1 2 3 4 5 6 7 8 9 #include <string.h> #include <signal.h> #include <stdio.h> int main () { printf ( \"signal: %s \\n \" , strsignal ( SIGKILL )); // \u548cstrerror\u7b49\u540c psignal ( SIGKILL , \"signal\" ); // \u548cperror\u7b49\u540c return 0 ; } \u4fe1\u53f7\u96c6\u7684\u5185\u90e8\u5b9e\u73b0\uff1f \u200b\u2003 \u2003\u4fe1\u53f7\u96c6\u662f\u4e00\u79cd\u7528\u6765\u8868\u793a\u4e00\u7cfb\u5217\u4fe1\u53f7\u96c6\u5408\u7684\u6570\u636e\u7ed3\u6784\uff0c\u4f7f\u7528 sigset_t \u6765\u8868\u793a\uff0c\u5b83\u7684\u5e95\u5c42\u5b58\u50a8\u7c7b\u578b\u5176\u5b9e\u53ea\u662f\u4e00\u4e2a unsigned long \u7c7b\u578b\uff0c\u5982\u4e0b: 1 typedef unsigned long sigset_t ; \u200b\u2003 \u2003 unsigned long \u4e00\u5171\u662f\u516b\u4e2a\u5b57\u8282\uff0c\u603b\u5171\u662f64\u4f4d\uff0c\u6bcf\u4e00\u4f4d\u8868\u793a\u4e00\u4e2a\u4fe1\u53f7\u7684\u8bdd\uff0c\u6700\u591a\u53ef\u4ee5\u8868\u793a64\u4e2a\u4fe1\u53f7\uff0c\u8fd9\u4e2a\u548c\u4fe1\u53f7\u7684\u6700\u5927\u503c\u662f\u543b\u5408\u7684\u3002\u4fe1\u53f7\u96c6\u4e5f\u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u7528\u6765\u64cd\u4f5c\u4fe1\u53f7\u96c6\u7684\u65b9\u6cd5\uff0c sigemptyset \u3001 sigfillset \u3001 sigaddset \u3001 sigdelset \u3001 sigismember \u3001 sigisemptyset \u7b49 \u5982\u4f55\u963b\u585e\u4fe1\u53f7\uff0c\u963b\u585e\u7684\u4fe1\u53f7\u5728\u89e3\u9664\u963b\u585e\u540e\u662f\u5426\u4f1a\u6295\u9012? \u200b\u2003 \u2003\u963b\u585e\u4fe1\u53f7\u7684\u5b9e\u73b0\u4e0d\u96be\uff0c\u901a\u8fc7\u4e0a\u6587\u4e2d\u5bf9\u4fe1\u53f7\u5185\u90e8\u5b9e\u73b0\u7684\u5206\u6790\u53ef\u77e5\uff0c\u901a\u8fc7\u5c06\u8981\u963b\u585e\u7684\u4fe1\u53f7\u653e\u5230 task_struct \u7ed3\u6784\u4e2d\u7684 blocked \u6210\u5458\u4e2d\uff0c\u90a3\u4e48\u5728\u4fe1\u53f7\u7684\u6295\u9012\u65f6\u4f1a\u5148\u67e5\u770b\u4e0b\u8981\u6295\u9012\u7684\u4fe1\u53f7\u662f\u5426\u5728\u963b\u585e\u4fe1\u53f7\u96c6\u4e2d\uff0c\u5982\u679c\u5728\u5c31\u505c\u6b62\u6295\u9012\uff0c\u5426\u5219\u5c31\u89e6\u53d1\u5bf9\u5e94\u7684\u4fe1\u53f7\u5904\u7406\uff0c\u901a\u8fc7sigprocmask\u53ef\u4ee5\u8bbe\u7f6e\u5f53\u524d\u8fdb\u7a0b\u7684\u963b\u585e\u4fe1\u53f7\u96c6\uff0c\u5bf9\u5e94\u5230\u5185\u6838\u7684\u5b9e\u73b0\u5982\u4e0b: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 int sigprocmask ( int how , sigset_t * set , sigset_t * oldset ) { struct task_struct * tsk = current ; sigset_t newset ; /* Lockless, only current can change ->blocked, never from irq */ if ( oldset ) * oldset = tsk -> blocked ; switch ( how ) { case SIG_BLOCK : sigorsets ( & newset , & tsk -> blocked , set ); break ; case SIG_UNBLOCK : sigandnsets ( & newset , & tsk -> blocked , set ); break ; case SIG_SETMASK : newset = * set ; break ; default : return - EINVAL ; } __set_current_blocked ( & newset ); return 0 ; } \u200b\u2003 \u2003\u901a\u8fc7 sigprocmask \u8bbe\u7f6e\u963b\u585e\u7684\u4fe1\u53f7\u96c6\u5b58\u5728\u4e00\u4e2a\u7ade\u6001\uff0c\u5982\u679c\u60f3\u5728\u8bbe\u7f6e\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u7684\u540c\u65f6\u518d\u8bbe\u7f6e\u963b\u585e\u7684\u4fe1\u53f7\u96c6\uff0c\u90a3\u4e48\u8fd9\u9700\u8981\u5148\u8c03\u7528 signal/sigaction \uff0c\u7136\u540e\u518d\u8c03\u7528 sigprocmask \uff0c\u5728\u8bbe\u7f6e\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u548c\u8c03\u7528 sigprocmask \u4e4b\u95f4\u5b58\u5728\u4e00\u4e2a\u95f4\u9699\uff0c\u5982\u679c\u5728\u8fd9\u4e2a\u95f4\u9699\u671f\u95f4\u540e\u4fe1\u53f7\u6295\u9012\uff0c\u90a3\u4e48\u5c31\u6ca1\u6709\u8d77\u5230\u963b\u585e\u4fe1\u53f7\u7684\u4f5c\u7528\u4e86\u3002\u4e3a\u6b64 sigaction \u7684 sa_mask \u6210\u5458\u53ef\u4ee5\u7528\u6765\u8bbe\u7f6e\u963b\u585e\u4fe1\u53f7\u96c6\uff0c\u8fd9\u4f7f\u5f97\u8bbe\u7f6e\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u7684\u540c\u65f6\u5c31\u53ef\u4ee5\u8bbe\u7f6e\u963b\u585e\u4fe1\u53f7\u96c6\u3002 \u200b\u2003 \u2003\u53e6\u5916\u4e00\u4e2a\u95ee\u9898\u5c31\u662f\u88ab\u963b\u585e\u7684\u4fe1\u53f7\u5728\u7b49\u5f85\u89e3\u9664\u963b\u585e\u540e\u662f\u5426\u4f1a\u6295\u9012\u5230\u8fdb\u7a0b\u8fdb\u884c\u5904\u7406\uff1f\u4fe1\u53f7\u88ab\u963b\u585e\u540e\u5c31\u4f1a\u53d8\u6210\u5f85\u51b3\u4fe1\u53f7\uff0c\u5e76\u901a\u8fc7\u94fe\u8868\u94fe\u63a5\u8d77\u6765\uff0c task_struct \u7ed3\u6784\u4e2d\u7684 pending \u6210\u5458\u5c31\u662f\u94fe\u8868\u5934\uff0c\u5982\u679c\u4e00\u4e2a\u4fe1\u53f7\u53d1\u9001\u591a\u6b21\uff0clinux\u662f\u4e0d\u4fdd\u8bc1\u6295\u9012\u76f8\u540c\u6b21\u6570\u7684\uff0c\u53ea\u4f1a\u4fdd\u5b58\u4e00\u6b21\uff0c\u4e5f\u5c31\u662f\u975e\u5b9e\u65f6\uff0c\u4e0d\u5bf9\u4fe1\u53f7\u6392\u961f\u3002\u5176\u4e2d SIGKILL \u548c SIGSTOP \u662f\u4e0d\u80fd\u88ab\u963b\u585e\u7684\u3002 \u5982\u4f55\u77e5\u9053\u5f53\u524d\u54ea\u4e9b\u4fe1\u53f7\u88ab\u963b\u585e\u4e86? \u200b\u2003 \u2003\u8bf4\u767d\u4e86\u8fd9\u91cc\u5c31\u662f\u53bb\u67e5\u8be2\u5f85\u51b3\u4fe1\u53f7\u7684\u94fe\u8868\u4e5f\u5c31\u662f task_struct \u7ed3\u6784\u4e2d\u7684 pending \u6210\u5458\uff0c\u5c06\u91cc\u9762\u7684\u4fe1\u53f7\u653e\u5230\u4fe1\u53f7\u96c6\u4e2d\u8fd4\u56de\u5373\u53ef\u3002\u5bf9\u5e94\u5230\u5185\u6838\u5b9e\u73b0\u5982\u4e0b: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 static int do_sigpending ( void * set , unsigned long sigsetsize ) { if ( sigsetsize > sizeof ( sigset_t )) return - EINVAL ; spin_lock_irq ( & current -> sighand -> siglock ); //\u52a0\u9501 sigorsets ( set , & current -> pending . signal , // \u5c06pengding\u548csignal->shared_pending\u4e2d\u7684\u4fe1\u53f7\u533a\u53d6\u5e76\u96c6 & current -> signal -> shared_pending . signal ); spin_unlock_irq ( & current -> sighand -> siglock ); /* Outside the lock because only this thread touches it. */ sigandsets ( set , & current -> blocked , set ); //\u6700\u540e\u5c06\u5f85\u51b3\u4fe1\u53f7\u548c\u963b\u585e\u7684\u4fe1\u53f7\u53d6\u4ea4\u96c6\uff0c\u56e0\u4e3a\u5f85\u51b3\u4fe1\u53f7\u5e76\u4e0d\u4e00\u5b9a\u662f\u963b\u585e\u7684\uff0c\u6709\u53ef\u80fd\u662f\u8fd8\u6ca1\u6765\u5f97\u53ca\u6295\u9012\u7684\uff0c\u6240\u4ee5\u8fd9\u91cc\u8981\u53d6\u4ea4\u96c6 return 0 ; } \u200b\u2003 \u2003\u5728\u7528\u6237\u6001\u901a\u8fc7 sigpending \u51fd\u6570\u5c31\u53ef\u4ee5\u67e5\u8be2\u5f53\u524d\u54ea\u4e9b\u88ab\u963b\u585e\u7684\u4fe1\u53f7\u662f\u672a\u51b3\u7684(\u4e5f\u5c31\u662f\u5df2\u7ecf\u6295\u9012\u5230\u8fdb\u7a0b\u4e86\uff0c\u4f46\u662f\u56e0\u4e3a\u88ab\u5c4f\u853d\u4e86\u8fd8\u6ca1\u6709\u88ab\u5904\u7406\uff0c\u4e5f\u5c31\u662f\u4fdd\u5b58\u5728\u8fdb\u7a0b\u7684 pending \u6210\u5458\u4e2d) \u4fe1\u53f7\u5904\u7406\u51fd\u6570\u8be5\u600e\u4e48\u8bbe\u8ba1\uff0c\u9700\u8981\u6ce8\u610f\u4ec0\u4e48? \u200b\u2003 \u2003\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u548c\u666e\u901a\u51fd\u6570\u662f\u6709\u4e00\u4e9b\u533a\u522b\u7684\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u51fd\u6570\u662f\u5f02\u6b65\u88ab\u6267\u884c\u7684\uff0c\u6240\u4ee5\u9700\u8981\u8003\u8651\u5f02\u6b65\u4fe1\u53f7\u5b89\u5168\u7684\u95ee\u9898\uff0c\u5728\u8fd9\u4e2a\u51fd\u6570\u4e2d\u6ca1\u529e\u6cd5\u4f7f\u7528\u4e00\u4e9b\u975e\u5f02\u6b65\u4fe1\u53f7\u5b89\u5168\u7684\u51fd\u6570\uff0c\u4e3a\u6b64\u7f16\u5199\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u4e00\u822c\u8981\u9075\u4ece\u4e00\u4e9b\u8bbe\u8ba1\uff0c\u4e24\u79cd\u5e38\u89c1\u7684\u8bbe\u8ba1\u5982\u4e0b: \u4fe1\u53f7\u5904\u7406\u51fd\u6570\u8bbe\u7f6e\u5168\u5c40\u6027\u53d8\u91cf\u5e76\u9000\u51fa\uff0c\u4e3b\u7a0b\u5e8f\u5468\u671f\u6027\u68c0\u67e5\uff0c\u4e00\u65e6\u7f6e\u4f4d\u5c31\u7acb\u5373\u91c7\u53d6\u52a8\u4f5c,\u6216\u8005\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u901a\u8fc7\u5fd8\u7ba1\u9053\u4e2d\u5199 \u5165\u4e00\u4e2a\u5b57\u8282\u6765\u901a\u77e5\u4e3b\u7a0b\u5e8f\u3002 \u4fe1\u53f7\u5904\u7406\u5668\u51fd\u6570\u6267\u884c\u67d0\u79cd\u7c7b\u578b\u7684\u6e05\u7406\u52a8\u4f5c\uff0c\u7136\u540e\u7ec8\u6b62\u8fdb\u7a0b\u6216\u8005\u6267\u884c\u975e\u672c\u5730\u8df3\u8f6c\uff0c\u5c06\u6808\u89e3\u5f00\u5e76\u5c06\u63a7\u5236\u6743\u8fd4\u56de\u5230\u4e3b\u7a0b\u5e8f\u7684\u9884\u5b9a\u4f4d\u7f6e\u3002 \u4fe1\u53f7\u5904\u7406\u51fd\u6570\u5728\u6267\u884c\u8fc7\u7a0b\u4e2d\u662f\u5426\u4f1a\u88ab\u4fe1\u53f7\u518d\u6b21\u6253\u65ad? \u200b\u2003 \u2003\u4e00\u4e2a\u4fe1\u53f7\u5230\u8fbe\u540e\u4f1a\u89e6\u53d1\u4fe1\u53f7\u5904\u7406\u51fd\u6570\uff0c\u5728\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u5982\u679c\u8be5\u4fe1\u53f7\u518d\u6b21\u4ea7\u751f\u662f\u4e0d\u4f1a\u6253\u65ad\u5f53\u524d\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u7684\uff0c\u4f46\u662f\u5982\u679c\u6709\u5176\u4ed6\u4fe1\u53f7\u8fdb\u884c\u4e86\u6295\u9012\u8fd9\u4e2a\u4f1a\u6253\u65ad\u5f53\u524d\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u7684\u3002 sigaction \u7684 sa_flags \u6210\u5458\u6709\u4e00\u4e2a\u503c\u5c31\u662f\u7528\u6765\u63a7\u5236\u8fd9\u4e2a\u884c\u4e3a\u7684\uff0c\u5982\u679c\u503c\u4e3a SA_NODEFER (\u53c2\u8003\u4e0a\u6587\u4e2d\u5bf9 sa_flags \u7684\u89e3\u91ca)\u8868\u660e\u5728\u6267\u884c\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u65f6\u662f\u53ef\u4ee5\u88ab\u76f8\u540c\u4fe1\u53f7\u6253\u65ad\u7684\u3002\u8fd9\u5f88\u5bb9\u6613\u9020\u6210\u9012\u5f52\u6b7b\u5faa\u73af\u3002 sig_atomic_t\u6570\u636e\u7c7b\u578b\u7684\u4f5c\u7528? \u200b\u2003 \u2003\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u4e00\u822c\u8981\u9075\u4ece\u4e0a\u6587\u4e2d\u63d0\u5230\u7684\u8bbe\u8ba1\uff0c\u5904\u7406\u51fd\u6570\u4e2d\u53ea\u5bf9\u4e00\u4e9b\u5168\u5c40\u53d8\u91cf\u8fdb\u884c\u5904\u7406\uff0c\u7136\u540e\u4e3b\u7a0b\u5e8f\u5468\u671f\u6027\u7684\u68c0\u67e5\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5168\u5c40\u53d8\u91cf\u7684\u7c7b\u578b\u9700\u8981\u8003\u91cf\u4e24\u70b9: \u7f16\u8bd1\u5668\u4e00\u822c\u4f1a\u5bf9\u53d8\u91cf\u7684\u8bfb\u5199\u8fdb\u884c\u7f13\u5b58\uff0c\u5c06\u521a\u5199\u5165\u7684\u53d8\u91cf\u503c\u653e\u5728\u5bc4\u5b58\u5668\u4e2d\uff0c\u4e0b\u6b21\u8bfb\u7684\u65f6\u5019\u76f4\u63a5\u4ece\u5bc4\u5b58\u5668\u4e2d\u8bfb\u53d6\uff0c\u8fd9\u4e2a\u8bbe\u8ba1\u9002\u7528\u4e8egcc\u53ef\u4ee5\u7406\u89e3\u4ee3\u7801\u7684\u4e0a\u4e0b\u6587\uff0c\u4f46\u662f\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u662f\u4efb\u4f55\u65f6\u5019\u90fd\u6709\u53ef\u80fd\u89e6\u53d1\u7684\uff0cgcc\u6ca1\u529e\u6cd5\u77e5\u9053\u4ec0\u4e48\u65f6\u5019\u89e6\u53d1\u4fe1\u53f7\u5904\u7406\u51fd\u6570\uff0c\u5982\u679c\u67d0\u4e00\u65f6\u523b\u4e3b\u7a0b\u5e8f\u5bf9\u5168\u5c40\u53d8\u91cf\u53d1\u751f\u4e86\u5199\u5165\uff0c\u4f46\u662f\u5199\u5165\u7684\u503c\u8fd8\u6ca1\u6765\u5f97\u53ca\u56de\u5199\u5185\u5b58\uff0c\u7136\u540e\u89e6\u53d1\u4fe1\u53f7\u5904\u7406\u51fd\u6570\uff0c\u7f16\u8bd1\u5668\u5e76\u4e0d\u77e5\u9053\u8981\u4ece\u5bc4\u5b58\u5668\u4e2d\u8bfb\u8be5\u5168\u5c40\u53d8\u91cf\u7684\u503c(\u56e0\u4e3a\u6ca1\u4e0a\u4e0b\u6587)\uff0c\u6240\u4ee5\u4f1a\u76f4\u63a5\u4ece\u5185\u5b58\u4e2d\u8bfb\uff0c\u8fd9\u6837\u8bfb\u5230\u7684\u503c\u5c31\u662f\u4e00\u4e2a\u810f\u503c\u4e86\u3002\u4e3a\u4e86\u907f\u514d\u8fd9\u4e2a\u4f18\u5316\uff0c\u5728\u5b9a\u4e49\u5168\u5c40\u53d8\u91cf\u7684\u65f6\u5019\u4f1a\u52a0\u4e0a volatile \u5173\u952e\u5b57\u3002 \u5168\u5c40\u53d8\u91cf\u7684\u8bfb\u5199\u53ef\u80fd\u4e0d\u6b62\u4e00\u6761\u673a\u5668\u6307\u4ee4\uff0c\u5982\u679c\u5728\u64cd\u4f5c\u5168\u5c40\u53d8\u91cf\u7684\u4e2d\u9014\u88ab\u6253\u65ad\uff0c\u90a3\u4e48\u5728\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u4e2d\u518d\u6b21\u64cd\u4f5c\u8fd9\u4e2a\u5168\u5c40\u53d8\u91cf\u5c31\u5f88\u6709\u53ef\u80fd\u9020\u6210\u8be5\u5168\u5c40\u53d8\u91cf\u6700\u7ec8\u503c\u662f\u4e00\u4e2a\u672a\u5b9a\u4e49\u7684\u503c\u3002\u6240\u4ee5 sig_atomic_t \u7684\u7c7b\u578b\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u539f\u5b50\u7c7b\u578b\uff0c\u901a\u8fc7\u9605\u8bfb\u6e90\u7801\uff0c\u53d1\u73b0\u8fd9\u4e2a\u6570\u636e\u7c7b\u578b\u5176\u5b9e\u5c31\u662f\u4e00\u4e2aint\u7c7b\u578b\uff0c\u4ee3\u7801\u5982\u4e0b\uff0c\u4e3b\u8981\u539f\u56e0\u662f\u56e0\u4e3a\u5728x86_64\u67b6\u6784\u7684CPU\u4e0b\uff0c\u5bf9\u4e8e8\u300116\u300132\u300164\u8fd9\u6837\u7684\u5bf9\u9f50\u5927\u5c0f\u5bf9\u9f50\u7684\u6570\u636e\u7c7b\u578b\uff0c\u5176\u53c2\u8003\u662f\u539f\u5b50\u7684\uff0c\u6240\u4ee5 sig_atomic_t \u5c31\u662f\u4e00\u4e2a\u5bf9int\u7c7b\u578b\u7684\u522b\u540d\u3002 1 2 typedef int __sig_atomic_t ; typedef __sig_atomic_t sig_atomic_t ; \u200b \u7ec8\u6b62\u4fe1\u53f7\u5904\u7406\u5668\u51fd\u6570\u7684\u65b9\u6cd5\u6709\u54ea\u4e9b? \u200b\u2003 \u2003\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u90fd\u662f\u5904\u7406\u5b8c\u4e00\u4e9b\u4e8b\u60c5\u540e\u5c31\u56de\u5230\u4e86\u4e3b\u7a0b\u5e8f\u7ee7\u7eed\u6267\u884c\uff0c\u6216\u8005\u662f\u505a\u4e00\u4e9b\u8d44\u6e90\u7684\u91ca\u653e\u548c\u6e05\u7406\uff0c\u63a5\u7740\u5c31\u9000\u51fa\u4e86\u7a0b\u5e8f\uff0c \u9664\u6b64\u4e4b\u5916\u5176\u5b9e\u8fd8\u6709\u66f4\u591a\u7684\u9009\u62e9\u3002 \u4f7f\u7528_exit\u7ec8\u6b62\u8fdb\u7a0b\uff0c\u5904\u7406\u5668\u51fd\u6570\u53ef\u4ee5\u4e8b\u5148\u505a\u4e00\u4e9b\u6e05\u7406\u5de5\u4f5c\uff0c\u4f46\u662f\u8fd9\u91cc\u6ce8\u610f\u4e0d\u80fd\u4f7f\u7528exit\u6765\u7ec8\u6b62\uff0c\u56e0\u4e3a\u5b83\u4e0d\u5728\u5f02\u6b65\u4fe1\u53f7\u5b89\u5168\u51fd\u6570\u7684\u5217\u8868\u4e2d\u3002 \u4f7f\u7528kill\u53d1\u9001\u4fe1\u53f7\u6765\u6740\u6389\u8fdb\u7a0b \u5728\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u4e2d\u6267\u884c\u975e\u672c\u5730\u8df3\u8f6c \u4f7f\u7528abort\u7ec8\u6b62\u8fdb\u7a0b\uff0c\u5e76\u4ea7\u751f\u6838\u5fc3\u8f6c\u50a8 \u200b\u2003 \u2003\u5bf9\u4e8e1\u30012\u30014\u6211\u89c9\u5f97\u90fd\u662f\u53ef\u4ee5\u7406\u89e3\u7684\uff0c\u95ee\u9898\u4e0d\u5927\uff0c\u91cd\u70b9\u662f\u7b2c\u4e09\u4e2a\uff0c\u975e\u672c\u5730\u8df3\u8f6c\uff0c\u8df3\u8f6c\u5230\u53e6\u5916\u4e00\u4e2a\u5730\u65b9\u540e\uff0c\u6808\u4f1a\u89e3\u65cb\u8f6c\uff0c\u4f46\u662f\u6709\u4e00\u4e9b\u70b9\u8fd8\u9700\u8981\u63a2\u8ba8\uff0c\u6bd4\u5982\u8bf4\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u5f53\u4e00\u4e2a\u4fe1\u53f7\u5f00\u59cb\u89e6\u53d1\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u65f6\uff0c\u9ed8\u8ba4\u4f1a\u8bb2\u8be5\u4fe1\u53f7\u52a0\u5165\u5230\u963b\u585e\u7684\u4fe1\u53f7\u96c6\u4e2d\uff0c\u8fd9\u6837\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u5c31\u4e0d\u4f1a\u88ab\u76f8\u540c\u4fe1\u53f7\u6253\u65ad\u4e86\uff0c\u5982\u679c\u4f7f\u7528\u975e\u672c\u5730\u8df3\u8f6c\u7684\u5316\uff0c\u5e26\u6765\u7684\u95ee\u9898\u5c31\u662f\u8fd9\u4e2a\u963b\u585e\u7684\u4fe1\u53f7\u96c6\u9700\u8981\u88ab\u6062\u590d\uff0c\u65e9\u671f\u7684 BSD \u5b9e\u73b0\u65f6\u4f1a\u5c06\u963b\u585e\u7684\u4fe1\u53f7\u6062\u590d\u7684\uff0c\u4f46\u662fLinux\u662f\u9075\u5faa System V \u7684\u5b9e\u73b0\uff0c\u662f\u4e0d\u4f1a\u5c06\u963b\u585e\u7684\u4fe1\u53f7\u8fdb\u884c\u6062\u590d\u7684\uff0c\u9274\u4e8e\u8fd9\u4e2a\u884c\u4e3a\u5728\u4e0d\u901a\u7684\u5e73\u53f0\u5176\u5b9e\u73b0\u4e0d\u540c\uff0c\u8fd9\u5c06\u6709\u635f\u4e8e\u53ef\u79fb\u690d\u6027\uff0c POSIX \u901a\u8fc7\u5b9a\u4e49\u4e86\u4e00\u5806\u65b0\u7684\u51fd\u6570\u6765\u89c4\u8303\u975e\u672c\u5730\u8df3\u8f6c\u7684\u884c\u4e3a\uff0c sigsetjmp \u548c siglongjmp \uff0c\u5176\u51fd\u6570\u539f\u578b\u5982\u4e0b: 1 2 3 #include <setjmp.h> int sigsetjmp ( sigjmp_buf env , int savesigs ); // savesigs\u975e0\u65f6\uff0c\u4f1a\u5c06\u5f53\u524d\u7684\u4fe1\u53f7\u63a9\u7801\u4fdd\u5b58 void siglongjmp ( sigjmp_buf env , int val ); // \u6062\u590dsigsetjmp\u4fdd\u5b58\u7684\u4fe1\u53f7\u63a9\u7801 \u4e3a\u4ec0\u4e48\u7cfb\u7edf\u8c03\u7528\u4f1a\u4e2d\u65ad\u548c\u91cd\u542f? \u200b\u2003 \u2003\u8fd9\u4e2a\u95ee\u9898\u53ef\u80fd\u5927\u591a\u6570\u4eba\u90fd\u53ea\u662f\u77e5\u9053\u8981\u600e\u4e48\u53bb\u5904\u7406\uff0c\u4f46\u662f\u5374\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u4f1a\u53d1\u751f\u4e2d\u65ad? \u5982\u679c\u4e00\u4e2a\u7cfb\u7edf\u8c03\u7528\u5728\u6267\u884c\u7684\u65f6\u5019\uff0c\u4e00\u4e2a\u4fe1\u53f7\u5230\u6765\uff0c\u8fd9\u4e2a\u65f6\u5019\u9700\u8981\u5207\u6362\u5230\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u4e2d\u6267\u884c\uff0c\u4f46\u662f\u7cfb\u7edf\u8c03\u7528\u662f\u5728\u5185\u6838\u6001\u4e2d\u6267\u884c\u7684\uff0c\u5982\u679c\u73b0\u5728\u6267\u884c\u4ee5\u5185\u6838\u6001\u6765\u8fd0\u884c\u7528\u6237\u6001\u7f16\u5199\u7684\u4fe1\u53f7\u5904\u7406\u51fd\u6570\uff0c\u8fd9\u4f1a\u7ed9\u5185\u6838\u5e26\u6765\u5b89\u5168\u98ce\u9669\uff0c\u6240\u4ee5\u7406\u8bba\u4e0a\u8fd9\u91cc\u5e94\u8be5\u8981\u5207\u6362\u8fd0\u884c\u6001\u5c9b\u7528\u6237\u6001\uff0c\u65e2\u7136\u8981\u5207\u6362\u90a3\u4e48\u4e45\u9700\u8981\u4fdd\u5b58\u5f53\u524d\u7684\u72b6\u6001\uff0c\u4f46\u662f\u8fd9\u5c31\u6d89\u53ca\u5230\u4e00\u4e2a\u95ee\u9898\u5c31\u662f\u4e2d\u95f4\u72b6\u6001\uff0c\u8fd9\u4e2a\u65f6\u5019\u6267\u884c\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u53ef\u80fd\u770b\u5230\u4e00\u4e2a\u4e2d\u95f4\u7684\u65e0\u6548\u72b6\u6001\uff0c\u5bfc\u81f4\u7a0b\u5e8f\u884c\u4e3a\u65f6\u672a\u5b9a\u4e49\u7684\uff0c\u8fd8\u6709\u9501\u7684\u95ee\u9898\uff0c\u8d44\u6e90\u5360\u7528\u7b49\u95ee\u9898\u3002\u6240\u4ee5\u8fd9\u79cd\u5207\u6362\u72b6\u6001\u7684\u65b9\u5f0f\u662f\u4e0d\u53ef\u884c\u7684\uff0clinux\u4f7f\u7528\u4e86\u4e00\u79cd\u66f4\u52a0\u7075\u6d3b\u7684\u65b9\u5f0f\u6765\u5904\u7406\uff0c\u5f53\u7cfb\u7edf\u8c03\u7528\u5728\u6267\u884c\u7684\u8fc7\u7a0b\u4e2d\u6709\u4fe1\u53f7\u5230\u6765\u5219\u4e2d\u65ad\u5f53\u524d\u7684\u7cfb\u7edf\u8c03\u7528\uff0c\u7136\u540e\u8fd4\u56de-1\uff0c\u5e76\u8bbe\u7f6e\u9519\u8bef\u7801\u4e3a EINTR \uff0c\u4ea4\u7ed9\u7528\u6237\u6765\u91cd\u65b0\u518d\u8fd0\u884c\u8be5\u7cfb\u7edf\u8c03\u7528\uff0c\u66f4\u591a\u7684\u7ec6\u8282\u89c1 Interruption of system calls when a signal is caught chromium \u7684\u57fa\u7840\u5e93\u4e2d\u5c31\u63d0\u4f9b\u4e86\u4e00\u79cd\u6bd4\u8f83\u65b9\u4fbf\u7684\u91cd\u542f\u7cfb\u7edf\u8c03\u7528\u7684\u5b8f\u3002 1 2 3 4 5 6 7 #define HANDLE_EINTR(x) ({ \\ decltype(x) eintr_wrapper_result; \\ do { \\ eintr_wrapper_result = (x); \\ } while (eintr_wrapper_result == -1 && errno == EINTR); \\ eintr_wrapper_result; \\ }) \u200b\u2003 \u2003\u9664\u4e86\u4e0a\u9762\u8fd9\u4e2a HANDLE_EINTR \u5916\uff0c GNU C \u5e93\u8fd8\u63d0\u4f9b\u4e86\u4e00\u4e2a\u975e\u6807\u51c6\u7684\u5b8f\uff0c TEMP_FAILURE_RETRY \uff0c\u9700\u8981\u5b9a\u4e49\u7279\u6027\u6d4b\u8bd5\u5b8f _GNU_SOURCE \uff0c\u5728 unistd \u5934\u6587\u4ef6\u4e2d\u8fd8\u6709\u53e6\u5916\u4e00\u4e2a\u5b8f\u53ef\u4ee5\u8d77\u5230\u76f8\u540c\u7684\u4f5c\u7528 NO_EINTR \uff0c\u6700\u540e\u4e00\u4e2a\u65b9\u6cd5\u5c31\u662f\u4f7f\u7528 sigaction \u4e2d\u7684 SA_RESTART \u6807\u5fd7\uff0c\u901a\u8fc7\u8bbe\u7f6e\u8be5\u6807\u5fd7\u540e\uff0c\u4f46\u662f\u5f88\u4e0d\u5e78\u7684\u662f\u8fd9\u4e2a\u6807\u5fd7\u5e76\u4e0d\u80fd\u5904\u7406\u6240\u6709\u7cfb\u7edf\u8c03\u7528\u7684\u81ea\u91cd\u542f\u7684\u95ee\u9898\u3002 \u4fe1\u53f7\u5907\u9009\u6808\u662f\u4ec0\u4e48\u3001\u5982\u4f55\u4f7f\u7528? \u200b\u2003 \u2003\u6211\u4eec\u90fd\u77e5\u9053\u8fdb\u7a0b\u7684\u6808\u7a7a\u95f4\u5927\u5c0f\u662f\u6709\u9650\u5236\u7684\uff0c\u5982\u679c\u67d0\u4e00\u65f6\u523b\u6808\u7a7a\u95f4\u589e\u957f\u5230\u6700\u5927\u503c\uff0c\u7136\u540e\u89e6\u53d1\u4e86\u4fe1\u53f7\u5904\u7406\u51fd\u6570\uff0c\u4f46\u662f\u6808\u5df2\u7ecf\u8fbe\u5230\u4e86\u6700\u5927\u503c\u4e86\uff0c\u65e0\u6cd5\u4e3a\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u521b\u5efa\u6808\u5e27\uff0c\u4e5f\u5c31\u6ca1\u6709\u529e\u6cd5\u8c03\u7528\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u4e86\uff0c\u4e3a\u6b64\u53ef\u4ee5\u501f\u52a9\u4fe1\u53f7\u5907\u9009\u6808\u6765\u521b\u5efa\u4e00\u4e2a\u989d\u5916\u7684\u5806\u6808\uff0c\u7528\u4e8e\u6267\u884c\u4fe1\u53f7\u5904\u7406\u51fd\u6570\uff0c\u4fe1\u53f7\u5907\u9009\u6808\u7684\u521b\u5efa\u8fc7\u7a0b\u5982\u4e0b \uff1a \u5206\u914d\u4e00\u5757\u88ab\u79f0\u4e3a \"\u5907\u9009\u4fe1\u53f7\u6808\" \u7684\u5185\u5b58\u533a\u57df\uff0c\u4f5c\u4e3a\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u7684\u6808\u5e27 \u8c03\u7528 sigaltstack \uff0c\u544a\u4e4b\u5185\u6838\u5907\u9009\u6808\u7684\u5b58\u5728(\u4e5f\u53ef\u4ee5\u5c06\u5df2\u521b\u5efa\u7684\u5907\u9009\u4fe1\u53f7\u6808\u7684\u76f8\u5173\u4fe1\u606f\u8fd4\u56de) \u5728\u521b\u5efa\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u65f6\u6307\u5b9aSA_ONSTACK\uff0c\u4e5f\u5c31\u662f\u901a\u77e5\u5185\u6838\u5728\u5907\u9009\u4fe1\u53f7\u6808\u4e0a\u4e3a\u5904\u7406\u5668\u51fd\u6570\u521b\u5efa\u6808\u5e27\u3002 1 2 3 4 5 6 7 8 #include <signal.h> int sigaltstack ( const stack_t * ss , stack_t * oss ); typedef struct { void * ss_sp ; /* Base address of stack */ int ss_flags ; /* Flags */ size_t ss_size ; /* Number of bytes in stack */ } stack_t ; \u200b\u2003 \u2003\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u8fd9\u4e2a\u4fe1\u53f7\u5907\u9009\u6808\u7684\u7528\u9014\u8fd8\u662f\u6bd4\u8f83\u6709\u9650\u7684\uff0c\u53ea\u8981\u91cd\u5ea6\u4f9d\u8d56\u4fe1\u53f7\u5904\u7406\u51fd\u6570\uff0c\u5bf9\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u7684\u6267\u884c\u6210\u529f\u4e0e\u5426\u6bd4\u8f83\u654f\u611f\u7684\u7a0b\u5e8f\u624d\u4f1a\u8003\u8651\u4f7f\u7528\u5907\u9009\u6808\uff0c\u6bd4\u5982\u8bf4 google \u7684 breakpad \uff0c\u91cd\u5ea6\u4f9d\u8d56\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u7684\uff0c\u5b83\u901a\u8fc7\u6ce8\u518c\u65b0\u53f7\u5904\u7406\u51fd\u6570\u7684\u65b9\u5f0f\u5c06\u8981\u7a0b\u5e8f\u7684 coredump \u884c\u4e3a\u6355\u83b7\uff0c\u7136\u540e\u4ea7\u751f minidump \uff0c\u4e3a\u4e86\u4fdd\u8bc1\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u6210\u529f\u88ab\u6267\u884c\uff0c breakpad \u5c31\u4f7f\u7528\u4e86\u4fe1\u53f7\u5907\u9009\u6808\u7684\u65b9\u5f0f\u6765\u6267\u884c\u3002\u4e0b\u9762\u901a\u8fc7\u6a21\u62df\u5806\u6808\u6ea2\u51fa\uff0c\u7136\u540e\u901a\u8fc7\u5907\u9009\u6808\u7684\u65b9\u5f0f\u987a\u5229\u6267\u884c\u4fe1\u53f7\u5904\u7406\u51fd\u6570\uff0c\u4ee3\u7801\u5982\u4e0b: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #include <signal.h> #include <unistd.h> void handler ( int sig ) { write ( 2 , \"stack overflow \\n \" , 15 ); _exit ( 1 ); } unsigned infinite_recursion ( unsigned x ) { return infinite_recursion ( x ) + 1 ; } int main () { static char stack [ SIGSTKSZ ]; stack_t ss = { . ss_size = SIGSTKSZ , . ss_sp = stack , }; struct sigaction sa = { . sa_handler = handler , . sa_flags = SA_ONSTACK }; sigaltstack ( & ss , 0 ); sigfillset ( & sa . sa_mask ); sigaction ( SIGSEGV , & sa , 0 ); infinite_recursion ( 0 ); } \u5982\u4f55\u901a\u8fc7\u4fe1\u53f7\u4f20\u9012\u66f4\u591a\u7684\u4fe1\u606f? \u200b\u2003 \u2003\u4f20\u7edf\u7684\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u53ea\u4f1a\u4f20\u9012\u4e00\u4e2a\u4fe1\u53f7\u503c\uff0c\u4e5f\u4e0d\u80fd\u81ea\u5b9a\u4e49\u4f20\u9012\u53c2\u6570\uff0c\u901a\u8fc7\u8bbe\u7f6e sigaction \u7684 sa_flags \u4e3a SA_SIGINFO \u5c31\u53ef\u4ee5\u83b7\u53d6\u5230\u4fe1\u53f7\u7684\u4e00\u4e9b\u9644\u52a0\u4fe1\u606f\uff0c\u8bbe\u7f6e\u4e86 SA_SIGINFO \u540e\uff0c\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u7684\u539f\u578b\u5c31\u53d8\u6210\u4e86\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 void ( * sa_sigaction )( int , siginfo_t * , void * ); siginfo_t { int si_signo ; /* Signal number */ int si_errno ; /* An errno value */ int si_code ; /* Signal code */ int si_trapno ; /* Trap number that caused hardware-generated signal (unused on most architectures) */ pid_t si_pid ; /* Sending process ID */ uid_t si_uid ; /* Real user ID of sending process */ int si_status ; /* Exit value or signal */ clock_t si_utime ; /* User time consumed */ clock_t si_stime ; /* System time consumed */ sigval_t si_value ; /* Signal value */ int si_int ; /* POSIX.1b signal */ void * si_ptr ; /* POSIX.1b signal */ int si_overrun ; /* Timer overrun count; POSIX.1b timers */ int si_timerid ; /* Timer ID; POSIX.1b timers */ void * si_addr ; /* Memory location which caused fault */ long si_band ; /* Band event (was int in glibc 2.3.2 and earlier) */ int si_fd ; /* File descriptor */ short si_addr_lsb ; /* Least significant bit of address (since Linux 2.6.32) */ } \u200b\u2003 \u2003\u4f7f\u7528\u4e86\u65b0\u7684\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u540e\uff0c\u5e26\u6765\u4e86\u51e0\u70b9\u53d8\u5316\uff0c\u7b2c\u4e00\u4e2a\u5c31\u662f\u53ef\u4ee5\u4f20\u9012\u4e00\u4e2a siginfo_t \u7684\u7ed3\u6784\uff0c\u8be5\u7ed3\u6784\u53ef\u4ee5\u643a\u5e26\u66f4\u591a\u7684\u4fe1\u606f\uff0c\u7b2c\u4e8c\u4e2a\u662f\u4e00\u4e2a void \u53c2\u6570\uff0c\u662f\u4e00\u4e2a\u6307\u5411 ucontext_t \u7c7b\u578b\u7684\u7ed3\u6784\uff0c\u8be5\u7ed3\u6784\u63d0\u4f9b\u4e86\u6240\u8c13\u7684\u4e0a\u4e0b\u6587\u4fe1\u606f\uff0c\u7528\u6765\u63cf\u8ff0\u8c03\u7528\u4fe1\u53f7\u5904\u7406\u5668\u51fd\u6570\u524d\u7684\u8fdb\u7a0b\u4e0a\u4e0b\u6587(\u53ef\u4ee5\u7528\u6765\u5b9e\u73b0\u534f\u7a0b\uff0c\u76ee\u524d\u5728\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u4e2d\u6ca1\u6709\u4f7f\u7528\uff0c\u5bf9\u5e94\u7684\u8bbe\u7f6e\u548c\u83b7\u53d6\u8fdb\u7a0b\u4e0a\u4e0b\u6587\u7684\u51fd\u6570 getcontext \u548c setcontext *\u56e0\u4e3a\u53ef\u79fb\u690d\u6027\u95ee\u9898\u5df2\u7ecf\u4ecePOSIX\u4e2d\u5e9f\u5f03) \u4fe1\u53f7\u548c\u6838\u5fc3\u8f6c\u50a8\u6587\u4ef6\u7684\u5173\u7cfb\uff1f \u200b\u2003 \u2003\u4e00\u4e9b\u4fe1\u53f7\u7684\u9ed8\u8ba4\u5904\u7406\u65b9\u5f0f\u5c31\u662f\u8ba9\u8fdb\u7a0b\u4ea7\u751f coredump \u6587\u4ef6\uff0c\u8be5\u6587\u4ef6\u5c31\u662f\u8fdb\u7a0b\u8fd0\u884c\u65f6\u7684\u5185\u5b58\u955c\u50cf\uff0c\u9664\u4e86\u53ef\u4ee5\u901a\u8fc7\u4fe1\u53f7\u6765\u4ea7\u751f\u5916\uff0c\u8fd8\u6709\u901a\u8fc7\u6267\u884c gcore \u547d\u4ee4\u4ea7\u751f\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4f1a\u5c06\u5168\u90e8\u7684\u5185\u5b58\u6620\u5c04\u533a\u57df\u90fd\u5199\u5165\u5230\u6838\u5fc3\u5b58\u50a8\u6587\u4ef6\u4e2d\uff0c\u901a\u8fc7 /proc/PID/coredump_filter \u53ef\u4ee5\u63a7\u5236\u5bf9\u54ea\u4e9b\u5185\u5b58\u6620\u5c04\u533a\u57df\u5199\u5165\uff0c\u66f4\u8be6\u7ec6\u7684\u5185\u5bb9\u53ef\u4ee5 man core \u6765\u67e5\u8be2\uff0c\u6700\u540e\u5c31\u662f\u6838\u5fc3\u5b58\u50a8\u6587\u4ef6\u4ea7\u751f\u7684\u6761\u4ef6\uff0c\u4e0b\u9762\u5217\u51fa\u4e86\u4e0d\u4f1a\u4ea7\u751f\u6838\u5fc3\u8f6c\u50a8\u6587\u4ef6\u7684\u60c5\u51b5\uff1a \u8fdb\u7a0b\u5bf9\u6838\u5fc3\u8f6c\u50a8\u6587\u4ef6\u6ca1\u6709\u5199\u6743\u9650 \u5b58\u5728\u4e00\u4e2a\u540c\u540d\u3001\u53ef\u5199\u7684\u666e\u901a\u6587\u4ef6\uff0c\u4f46\u662f\u6307\u5411\u8be5\u6587\u4ef6\u7684(\u786c)\u94fe\u63a5\u6570\u8d85\u8fc7\u4e00\u4e2a(\u4e5f\u5c31\u662f\u65e0\u6cd5\u5220\u9664) \u5c06\u8981\u521b\u5efa\u7684\u6838\u5fc3\u8f6c\u50a8\u6587\u4ef6\u6240\u5728\u76ee\u5f55\u5e76\u4e0d\u5b58\u5728 \u8fdb\u7a0b\u7684\u6838\u5fc3\u5b58\u50a8\u6587\u4ef6\u5927\u5c0f\u9650\u5236\u4e3a0 \u5bf9\u8fdb\u7a0b\u6b63\u5728\u6267\u884c\u7684\u4e8c\u8fdb\u5236\u53ef\u6267\u884c\u6587\u4ef6\u6ca1\u6709\u8bfb\u6743\u9650 \u78c1\u76d8\u7a7a\u95f4\u6ee1\u4e86\u3001inode\u8d44\u6e90\u8017\u5c3d\u4e86\u3001\u8fbe\u5230\u78c1\u76d8\u914d\u989d\u9650\u5236\u3001\u5f53\u524d\u76ee\u5f55\u662f\u53ea\u8bfb\u6302\u8f7d\u7684\u6587\u4ef6\u7cfb\u7edf Set-user-ID \u7a0b\u5e8f\u5728\u7531\u975e\u6587\u4ef6\u5c5e\u4e3b(\u6216\u5c5e\u7ec4)\u6267\u884c\u65f6\uff0c\u4e0d\u4f1a\u4ea7\u751f\u6838\u5fc3\u8f6c\u50a8\u6587\u4ef6(\u901a\u8fc7 prctl \u548c PR_SET_DUMPABLE \u53ef\u4ee5\u63a7\u5236\u8fd9\u4e2a\u884c\u4e3a\uff0c\u8fd8\u53ef\u4ee5\u901a\u8fc7 /proc/sys/fs/suid_dumpable \u8fdb\u884c\u7cfb\u7edf\u7ea7\u7684\u63a7\u5236) \u4ea7\u751f\u7684core\u6587\u4ef6\u5176\u540d\u79f0\u8fd8\u53ef\u4ee5\u901a\u8fc7 /proc/sys/kernel/core_pattern \u8fdb\u884c\u63a7\u5236\u3002 SIGKILL\u548cSIGSTOP\u4fe1\u53f7\u548c\u5176\u4ed6\u4fe1\u53f7\u4e0d\u540c\u7684\u5730\u65b9? \u200b\u2003 \u2003 SIGKILL \u53ef\u4ee5\u7528\u6765\u7ec8\u6b62\u4e00\u4e2a\u8fdb\u7a0b\uff0c SIGSTOP \u5219\u662f\u53ef\u4ee5\u505c\u6b62\u4e00\u4e2a\u8fdb\u7a0b\uff0c\u4e8c\u8005\u7684\u9ed8\u8ba4\u884c\u4e3a\u90fd\u662f\u65e0\u6cd5\u88ab\u6539\u53d8\u7684\uff0c\u4e00\u4e2a\u505c\u6b62\u7684\u8fdb\u7a0b\u901a\u8fc7\u53d1\u9001 SIGCONT \u53ef\u4ee5\u4f7f\u5f97\u8be5\u4fe1\u53f7\u6062\u590d\u6267\u884c\uff0c\u8fd9\u4e24\u4e2a\u4fe1\u53f7\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u90fd\u53ef\u4ee5\u7acb\u5373\u7ec8\u6b62\u4e00\u4e2a\u8fdb\u7a0b\u6216\u8005\u662f\u505c\u6b62\u4e00\u4e2a\u8fdb\u7a0b\uff0c\u4f46\u662f\u6709\u4e00\u79cd\u60c5\u51b5\u9664\u5916\uff0c\u5c31\u662f\u5185\u6838\u5904\u4e8e TASK_UNINTERRUPTIBLE \u72b6\u6001\u65f6\uff0c\u4e5f\u5c31\u662f\u7761\u7720\u72b6\u6001\uff0cLinux\u4e0a\u6709\u4e24\u7c7b\u7761\u7720\u72b6\u6001\uff0c\u4e00\u7c7b\u5c31\u662f TASK_INTERRUPTIBLE \uff0c\u8fd9\u4e2a\u72b6\u6001\u4e0b\u8fdb\u7a0b\u65f6\u53ef\u4ee5\u88ab\u4e2d\u65ad\u7684\uff0c\u5904\u4e8e\u8fd9\u4e2a\u72b6\u6001\u4e0b\u7684\u8fdb\u7a0b\u4e00\u822c\u65f6\u7b49\u5f85\u7ec8\u7aef\u8f93\u5165\u3001\u7b49\u5f85\u6570\u636e\u5199\u5165\u5f53\u524d\u7684\u7a7a\u7ba1\u9053\u7b49\uff0c\u901a\u8fc7PS\u67e5\u8be2\u7684\u65f6\u5019\uff0c\u663e\u793a\u4e3aS\u3002\u53e6\u5916\u4e00\u79cd\u5c31\u662f\u4e0a\u6587\u8bf4\u9053\u7684 TASK_UNINTERRUPTIBLE \uff0c\u4e0d\u53ef\u4e2d\u65ad\u7684\u7761\u7720\uff0c\u8fd9\u7c7b\u8fdb\u7a0b\u4e00\u822c\u90fd\u662f\u5728\u7b49\u5f85\u67d0\u4e9b\u7279\u5b9a\u7c7b\u578b\u7684\u4e8b\u4ef6\uff0c\u6bd4\u5982\u78c1\u76d8IO\u7684\u5b8c\u6210\uff0c\u5904\u4e8e\u8fd9\u7c7b\u72b6\u6001\u7684\u8fdb\u7a0b\u65f6\u65e0\u6cd5\u88ab\u4fe1\u53f7\u7ec8\u6b62\u7684\uff0c\u901a\u8fc7PS\u67e5\u8be2\u7684\u65f6\u5019\uff0c\u663e\u793a\u4e3aD\uff0c\u6781\u7aef\u60c5\u51b5\u4e0b\u8fd9\u7c7b\u8fdb\u7a0b\u53ef\u80fd\u4f1a\u56e0\u4e3a\u78c1\u76d8\u6545\u969c\u7b49\u539f\u56e0\uff0c\u6c38\u8fdc\u65e0\u6cd5\u88ab\u7ec8\u6b62\uff0c\u8fd9\u4e2a\u65f6\u5019\u5c31\u53ea\u80fd\u901a\u8fc7\u91cd\u542f\u673a\u5668\u6765\u6d88\u706d\u8fd9\u7c7b\u8fdb\u7a0b\u4e86\uff0c\u5728 linux 2.6.25 \u5f00\u59cbLinux\u52a0\u5165\u4e86\u7b2c\u4e09\u79cd\u72b6\u6001 TASK_KILLABLE \uff0c\u8fd9\u4e2a\u72b6\u6001\u548c TASK_UNINTERRUPTIBLE \u7c7b\u4f3c\uff0c\u4f46\u662f\u5374\u53ef\u4ee5\u88ab\u81f4\u547d\u4fe1\u53f7\u5524\u9192\u3002\u901a\u8fc7\u4f7f\u7528\u8be5\u72b6\u6001\u53ef\u4ee5\u907f\u514d\u56e0\u4e3a\u8fdb\u7a0b\u6302\u8d77\u5904\u4e8e TASK_UNINTERRUPTIBLE \u72b6\u6001\u800c\u91cd\u542f\u7cfb\u7edf\u7684\u60c5\u51b5\u3002 \u4fe1\u53f7\u7684\u4f20\u9012\u987a\u5e8f\u662f\u600e\u4e48\u6837\u7684? \u200b\u2003 \u2003\u5f53\u75db\u8fc7 sigprocmask \u963b\u585e\u4fe1\u53f7\u7684\u65f6\u5019\uff0c\u5728\u6b64\u671f\u95f4\u4ea7\u751f\u7684\u4fe1\u53f7\u90fd\u4f1a\u53d8\u6210\u5f85\u51b3\u4fe1\u53f7\uff0c\u4e00\u65e6\u963b\u585e\u4fe1\u53f7\u88ab\u6062\u590d\uff0c\u90a3\u4e48\u6240\u6709\u7684\u5f85\u51b3\u4fe1\u53f7\u90fd\u4f1a\u88ab\u6295\u9012\uff0c\u800c\u6295\u9012\u7684\u987a\u5e8f\u5219\u53d6\u51b3\u4e8e\u5177\u4f53\u7684\u5b9e\u73b0\u3002\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\u6f14\u793a\u4e86\u4fe1\u53f7\u7684\u6295\u9012\u987a\u5e8f\u3002 TODO 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 #include <signal.h> #include <unistd.h> #include <stdio.h> #include <stdlib.h> void handler ( int sig ) { printf ( \"signal: %d \\n \" , sig ); } int main () { sigset_t set ; sigemptyset ( & set ); sigaddset ( & set , 1 ); sigaddset ( & set , 2 ); sigaddset ( & set , 3 ); sigaddset ( & set , 4 ); struct sigaction sa = { 0 }; sa . sa_handler = handler ; sigaction ( 1 , & sa , NULL ); sigaction ( 2 , & sa , NULL ); sigaction ( 3 , & sa , NULL ); sigaction ( 4 , & sa , NULL ); sigprocmask ( SIG_BLOCK , & set , NULL ); sleep ( 60 ); printf ( \"remove block signal \\n \" ); sigprocmask ( SIG_UNBLOCK , & set , NULL ); sleep ( 10 ); return 0 ; } \u5f00\u542f\u53e6\u5916\u4e00\u4e2a\u7ec8\u7aef\uff0c\u4f7f\u7528 kill\u5411\u8be5\u8fdb\u7a0b\u53d1\u9001\u591a\u4e2a\u4fe1\u53f7 \uff0c \u5b9e\u65f6\u4fe1\u53f7\u548c\u6807\u51c6\u4fe1\u53f7\u7684\u533a\u522b? \u200b\u2003 \u2003\u5b9e\u65f6\u4fe1\u53f7\u662f\u4e3a\u4e86\u5f25\u8865\u6807\u51c6\u4fe1\u53f7\u7684\u6295\u9012\u987a\u5e8f\u672a\u5b9a\u4e49\u3001\u4fe1\u53f7\u4e0d\u6392\u961f\u4f1a\u4e22\u5931\u7b49\u95ee\u9898\u7684\uff0c\u76f8\u6bd4\u4e8e\u6807\u51c6\u4fe1\u53f7\uff0c\u5b9e\u65f6\u4fe1\u53f7\u5177\u5907\u5982\u4e0b\u4f18\u52bf\uff1a \u5b9e\u65f6\u4fe1\u53f7\u7684\u4fe1\u53f7\u8303\u56f4\u6709\u6240\u6269\u5927\uff0c\u53ef\u4f9b\u5e94\u7528\u7a0b\u5e8f\u81ea\u5b9a\u4e49\u7684\u76ee\u7684\uff0c\u800c\u6807\u51c6\u4fe1\u53f7\u4e2d\u7528\u4e8e\u81ea\u5b9a\u4e49\u7684\u53ea\u6709 SIGUSER1 \u548c SIGUSER2 \u3002 \u5b9e\u65f6\u4fe1\u53f7\u91c7\u53d6\u7684\u662f\u961f\u5217\u5316\u7ba1\u7406\uff0c\u5982\u679c\u67d0\u4e00\u4e2a\u4fe1\u53f7\u591a\u6b21\u53d1\u9001\u7ed9\u4e00\u4e2a\u8fdb\u7a0b\uff0c\u90a3\u4e48\u8be5\u8fdb\u7a0b\u4f1a\u591a\u6b21\u6536\u5230\u8fd9\u4e2a\u4fe1\u53f7\uff0c\u800c\u6807\u51c6\u4fe1\u53f7\u624d\u4f1a\u4e22\u5931\uff0c\u53ea\u4f1a\u63a5\u6536\u5230\u4e00\u6b21\u4fe1\u53f7(\u4e0d\u8fc7\u961f\u5217\u662f\u6709\u5927\u5c0f\u9650\u5236\u7684)\u3002 \u5f53\u53d1\u9001\u4e00\u4e2a\u5b9e\u65f6\u4fe1\u53f7\u65f6\uff0c\u53ef\u4e3a\u4fe1\u53f7\u6307\u5b9a\u4f34\u968f\u6570\u636e\uff0c\u4f9b\u63a5\u6536\u8fdb\u7a0b\u7684\u4fe1\u53f7\u5904\u7406\u5668\u4f7f\u7528(\u6807\u51c6\u4fe1\u53f7\u76ee\u524d\u4e5f\u662f\u53ef\u4ee5\u7684)\u3002 \u4e0d\u540c\u7684\u5b9e\u65f6\u4fe1\u53f7\u7684\u4f20\u9012\u987a\u5e8f\u662f\u6709\u4fdd\u969c\u7684\uff0c\u4fe1\u53f7\u7684\u7f16\u53f7\u8d8a\u5c0f\u4f18\u5148\u7ea7\u8d8a\u9ad8\uff0c\u800c\u6807\u51c6\u4fe1\u53f7\u8fd9\u4e2a\u884c\u4e3a\u662f\u672a\u5b9a\u4e49\u7684\uff0c\u53d6\u51b3\u4e8e\u5177\u4f53\u7684\u5b9e\u73b0\u3002 \u5bf9\u4e8e\u6392\u961f\u7684\u4fe1\u53f7\uff0c\u662f\u6709\u4e00\u4e2a\u4e0a\u9650\u7684\uff0c\u8fd9\u4e2a\u4e0a\u9650\u503c\u53ef\u4ee5\u901a\u8fc7\u67e5\u770bRLIMIT_SIGPENDING\u8d44\u6e90\u9650\u5236\u7684\u503c\uff0c\u81f3\u4e8e\u7b49\u5f85\u67d0\u4e00\u4e2a\u8fdb\u7a0b\u7684\u5b9e\u65f6\u4fe1\u53f7\u6570\u91cf\uff0c\u53ef\u4ee5\u4eceLinux\u4e13\u6709\u6587\u4ef6\u5939/proc/PID/status\u4e2d\u7684SigQ\u5b57\u6bb5\u8bfb\u53d6 \u901asigqueue\u53ef\u4ee5\u7ed9\u5b9e\u65f6\u4fe1\u53f7\u53d1\u9001\u4f34\u968f\u6570\u636e 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 // \u53d1\u9001\u7aef #include <signal.h> int main ( int argc , char * argv []) { union sigval sa ; sa . sival_int = std :: stoi ( argv [ 2 ]); sigqueue ( std :: stoi ( argv [ 1 ]), 34 , sa ); return 0 ; } // \u6d88\u8d39\u7aef #include <signal.h> #include <iostream> #include <unistd.h> void handler_real_signal ( int signum , siginfo_t * v , void * ucontext ) { std :: cout << v -> si_value . sival_int << std :: endl ; } int main () { struct sigaction sa ; sa . sa_sigaction = handler_real_signal ; sigemptyset ( & sa . sa_mask ); sa . sa_flags = SA_SIGINFO ; sigaction ( 34 , & sa , nullptr ); sleep ( 60 ); return 0 ; } \u200b\u2003 \u2003\u5b9e\u65f6\u4fe1\u53f7\u7684\u7f16\u53f7\u662f\u4ece32~63\uff0c RTSIG_MAX \u5e38\u91cf\u4ee3\u8868\u4e86\u5b9e\u65f6\u4fe1\u53f7\u7684\u6570\u91cf\uff0c SIGRTMIN \u548c SIGRTMAX \u5219\u8868\u793a\u7684\u662f\u5b9e\u65f6\u4fe1\u53f7\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u3002 \u5982\u4f55\u4e3b\u52a8\u7b49\u5f85\u4fe1\u53f7\u5230\u6765? \u200b\u2003 \u2003\u6211\u4eec\u90fd\u77e5\u9053\u4fe1\u53f7\u662f\u5f02\u6b65\u5230\u6765\u7684\uff0c\u7a0b\u5e8f\u5728\u8fd0\u884c\u7684\u8fc7\u7a0b\u4e2d\u65f6\u523b\u90fd\u6709\u53ef\u80fd\u88ab\u4fe1\u53f7\u6253\u65ad\uff0c\u5bf9\u4e8e\u4e00\u4e9b\u5728\u8fd0\u884c\u5173\u952e\u4efb\u52a1\u7684\u7a0b\u5e8f\u6765\u8bf4\u8fd9\u53ef\u80fd\u662f\u4e00\u4e2a\u5669\u68a6\uff0c\u901a\u8fc7 sigprocmask \u6216\u8005\u662f sigaction \u7684 sa_mask \u53ef\u4ee5\u5c4f\u853d\u4fe1\u53f7\u3002\u7b49\u5173\u952e\u4efb\u52a1\u6267\u884c\u5b8c\u6210\u540e\u53ef\u80fd\u9700\u8981\u7b49\u5f85\u4fe1\u53f7\u5230\u6765\uff0c\u7136\u540e\u5f00\u59cb\u5904\u7406\u4fe1\u53f7\uff0c\u5bf9\u4e8e\u8fd9\u6837\u7684\u573a\u666f\u53ef\u4ee5\u901a\u8fc7 sigprocmask \u89e3\u9664\u5c4f\u853d\u4fe1\u53f7\u540e\uff0c\u63a5\u7740\u8c03\u7528 pause \u6765\u7b49\u5f85\u4fe1\u53f7\u5230\u6765\u3002\u4ee3\u7801\u5982\u4e0b: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 #include <signal.h> #include <stdio.h> #include <stdlib.h> #include <unistd.h> void handler ( int signum ) { printf ( \"Hello World \\n \" ); } int main () { sigset_t prevMask , intMask ; struct sigaction sa ; sigemptyset ( & intMask ); sigaddset ( & intMask , SIGINT ); sigemptyset ( & sa . sa_mask ); sa . sa_flags = 0 ; sa . sa_handler = handler ; if ( sigaction ( SIGINT , & sa , nullptr ) == -1 ) { perror ( \"sigaction:\" ); exit ( EXIT_FAILURE ); } if ( sigprocmask ( SIG_BLOCK , & intMask , & prevMask ) == -1 ) { perror ( \"sigprocmask:\" ); exit ( EXIT_FAILURE ); } // deal with critical section if ( sigprocmask ( SIG_SETMASK , & prevMask , nullptr ) == -1 ) { perror ( \"sigprocmask:\" ); exit ( EXIT_FAILURE ); } // \u4fe1\u53f7\u5982\u679c\u5728\u6b64\u523b\u5230\u6765\uff0c\u8fd9\u5c31\u4f1a\u5bfc\u81f4bug pause (); return 0 ; } \u200b\u2003 \u2003\u5f88\u663e\u7136 sigprocmask \u89e3\u9664\u4fe1\u53f7\u5c4f\u853d\u548c pause \u7b49\u5f85\u4fe1\u53f7\u8fd9\u4e24\u6b65\u5e76\u4e0d\u662f\u539f\u5b50\u7684\uff0c\u6240\u4ee5\u53ef\u80fd\u4f1a\u5bfc\u81f4\u6f5c\u5728\u7684 bug \uff0c\u4fe1\u53f7\u53ef\u80fd\u5728 pause \u4e4b\u524d\u8fbe\u5230\uff0c\u5bfc\u81f4 pause \u4e00\u81f4\u5728\u7b49\u5f85\u4fe1\u53f7\u3002\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898Linux\u63d0\u4f9b\u4e86 sigsuspend \uff0c\u5c06\u89e3\u9664\u4fe1\u53f7\u5c4f\u853d\u548c\u7b49\u5f85\u4fe1\u53f7\u53d8\u6210\u4e86\u539f\u5b50\u7684\uff0c\u4ee3\u7801\u5982\u4e0b: 1 2 3 4 5 6 7 8 9 10 if ( sigprocmask ( SIG_SETMASK , & prevMask , nullptr ) == -1 ) { perror ( \"sigprocmask:\" ); exit ( EXIT_FAILURE ); } // \u4fe1\u53f7\u5982\u679c\u5728\u6b64\u523b\u5230\u6765\uff0c\u8fd9\u5c31\u4f1a\u5bfc\u81f4bug pause (); return 0 ; \u66ff\u6362\u6210\u5982\u4e0b : sigsuspend ( & prevMask ); \u200b\u2003 \u2003\u5230\u6b64\u4e3a\u6b62\u6211\u4ecb\u7ecd\u4e86\u4e24\u79cd\u7b49\u5f85\u4fe1\u53f7\u7684\u65b9\u5f0f\uff0c\u4e00\u79cd\u5c31\u662f pause \uff0c\u53e6\u5916\u4e00\u79cd\u5c31\u662f sigsuspend \uff0c\u4f46\u662f\u8fd9\u4e24\u79cd\u7b49\u5f85\u4fe1\u53f7\u7684\u65b9\u5f0f\u90fd\u5f88\u539f\u59cb\uff0c\u53ea\u662f\u77e5\u9053\u6709\u4fe1\u53f7\u5230\u6765\u4e86\uff0c\u5177\u4f53\u662f\u4ec0\u4e48\u4fe1\u53f7\u662f\u4e0d\u77e5\u9053\u7684\uff0c\u8fd8\u9700\u8981\u4f9d\u9760\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u53bb\u5904\u7406\u53d1\u751f\u7684\u4fe1\u53f7\u3002\u5982\u679c\u628a\u4fe1\u53f7\u6bd4\u505a\u4e00\u79cd\u6d88\u606f\u7684\u8bdd\uff0c\u6211\u5e0c\u671b\u53ef\u4ee5\u540c\u6b65\u7684\u7b49\u5f85\u63a5\u6536\u8fd9\u4e2a\u6d88\u606f\uff0c\u7136\u540e\u540c\u6b65\u7684\u53bb\u5904\u7406\u8fd9\u4e2a\u6d88\u606f\uff0c\u800c\u4e0d\u662f\u9760\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u6253\u65ad\u5f53\u524d\u6267\u884c\u6d41\u5f02\u6b65\u7684\u5904\u7406\u3002Linux\u63d0\u4f9b\u4e86 sigwaitinfo \u76f8\u5e94\u7684\u8fd8\u6709\u4e00\u4e2a sigtimedwait \uff0c\u524d\u8005\u662f\u6c38\u4e45\u7684\u7b49\u5f85\u4fe1\u53f7\uff0c\u540e\u8005\u662f\u5e26\u6709\u8d85\u65f6\u529f\u80fd\u7684\u7b49\u5f85\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #include <signal.h> #include <stdio.h> #include <stdlib.h> int main () { sigset_t set ; sigemptyset ( & set ); sigaddset ( & set , SIGINT ); sigprocmask ( SIG_BLOCK , & set , nullptr ); siginfo_t sv ; int signum = sigwaitinfo ( & set , & sv ); printf ( \"signal number:%d pid: %d, uid: %d \\n \" , signum , sv . si_pid , sv . si_uid ); return 0 ; } \u200b\u2003 \u2003\u901a\u8fc7 sigwaitinfo \u6765\u7b49\u5f85\u4fe1\u53f7\u5df2\u7ecf\u57fa\u672c\u7b97\u6ee1\u8db3\u4e86\u9700\u6c42\uff0c\u4f46\u662f\u5bf9\u4e8e\u4e00\u4e2a\u7f51\u7edc\u7a0b\u5e8f\u6765\u8bf4\uff0c\u4fe1\u53f7\u3001\u7f51\u7edcIO\u3001\u5b9a\u65f6\u5668\u7b49\u90fd\u5c5e\u4e8e\u4e8b\u4ef6\uff0c\u7406\u60f3\u60c5\u51b5\u4e0b\u5e94\u8be5\u5c06\u8fd9\u4e9b\u4e8b\u4ef6\u7edf\u4e00\u6765\u5904\u7406\uff0c\u4f7f\u7528fd\u6765\u7ba1\u7406\u8fd9\u4e9b\u4e8b\u4ef6\u8fd9\u4e2a\u5728Linux\u4e0b\u7b97\u662f\u4e00\u79cd\u5171\u8bc6\u4e86\uff0c\u7f51\u7edcIO\u81ea\u7136\u4e0d\u7528\u8bf4\uff0c\u5b9a\u65f6\u5668\u53ef\u4ee5\u901a\u8fc7 timerfd_create \u6765\u521b\u5efa\u4e00\u4e2afd\u7136\u540e\u548c\u4e00\u4e2a\u5b9a\u65f6\u5668\u5173\u8054\u5373\u53ef\u3002\u800c\u4fe1\u53f7\u7684\u5316\u65e9\u671f\u7684\u505a\u6cd5\u662f\u521b\u5efa\u4e00\u4e2a\u7ba1\u9053fd\uff0c\u7136\u540e\u5728\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u4e2d\u5f80\u8fd9\u4e2afd\u5199\u5165\u4fe1\u53f7\u503c\uff0c\u8fd9\u6837\u6240\u6709\u7684\u4e8b\u4ef6\u5c31\u90fd\u53ef\u4ee5\u4f7f\u7528fd\u6765\u7edf\u4e00\u7ba1\u7406\u4e86\uff0c\u5728Linux 2.6.27\u7684\u65f6\u5019\u63d0\u4f9b\u4e86\u4e00\u4e2a\u539f\u751f\u7684\u89e3\u51b3\u65b9\u6848\u5c31\u662f signalfd \uff0c\u4e0b\u9762\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u793a\u4f8b\u4ee3\u7801: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 #include <sys/signalfd.h> #include <signal.h> #include <unistd.h> #include <stdlib.h> #include <stdio.h> #define handle_error(msg) \\ do { perror(msg); exit(EXIT_FAILURE); } while (0) int main ( int argc , char * argv []) { sigset_t mask ; int sfd ; struct signalfd_siginfo fdsi ; ssize_t s ; sigemptyset ( & mask ); sigaddset ( & mask , SIGINT ); sigaddset ( & mask , SIGQUIT ); /* Block signals so that they aren't handled according to their default dispositions */ if ( sigprocmask ( SIG_BLOCK , & mask , NULL ) == -1 ) handle_error ( \"sigprocmask\" ); sfd = signalfd ( -1 , & mask , 0 ); if ( sfd == -1 ) handle_error ( \"signalfd\" ); for (;;) { s = read ( sfd , & fdsi , sizeof ( struct signalfd_siginfo )); if ( s != sizeof ( struct signalfd_siginfo )) handle_error ( \"read\" ); if ( fdsi . ssi_signo == SIGINT ) { printf ( \"Got SIGINT \\n \" ); } else if ( fdsi . ssi_signo == SIGQUIT ) { printf ( \"Got SIGQUIT \\n \" ); exit ( EXIT_SUCCESS ); } else { printf ( \"Read unexpected signal \\n \" ); } } }","title":"Linux \u4fe1\u53f7FAQ"},{"location":"%E5%8D%9A%E5%AE%A2/doc/linux/Linux%E4%BF%A1%E5%8F%B7%E4%B8%93%E9%A2%98FAQ/#linux-faq","text":"","title":"Linux \u4fe1\u53f7FAQ"},{"location":"%E5%8D%9A%E5%AE%A2/doc/linux/Linux%E4%BF%A1%E5%8F%B7%E4%B8%93%E9%A2%98FAQ/#_1","text":"\u200b\u2003 \u2003\u53c2\u8003 \u53ef\u91cd\u5165\u3001\u7ebf\u7a0b\u5b89\u5168\u548c\u5f02\u6b65\u4fe1\u53f7\u5b89\u5168 \uff0c\u9700\u8981\u5f3a\u8c03\u7684\u662f\u5f02\u6b65\u4fe1\u53f7\u5b89\u5168\uff0c\u8fd9\u4e2a\u6982\u5ff5\u77e5\u9053\u7684\u4eba\u4e0d\u591a\uff0c\u5e73\u5e38\u5927\u5bb6\u5728\u7f16\u5199\u4ee3\u7801\u7684\u65f6\u5019\u4e5f\u5f88\u5c11\u8003\u8651\u8fd9\u4e2a\u56e0\u7d20\uff0c\u4e5f\u4e0d\u6e05\u695a\u54ea\u4e9b\u51fd\u6570\u662f\u5f02\u6b65\u4fe1\u53f7\u5b89\u5168\u7684\uff0c\u54ea\u4e9b\u4e0d\u662f\uff0c\u5178\u578b\u7684\u50cf printf \u5c31\u4e0d\u662f\u5f02\u6b65\u4fe1\u53f7\u5b89\u5168\u7684\uff0c\u5185\u90e8\u4f1a\u52a0\u9501\uff0c\u4f46\u662f\u5e73\u65f6\u5f88\u591a\u4eba\u90fd\u559c\u6b22\u5728\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u4e2d\u8c03\u7528\u3002\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u90fd\u4e0d\u4f1a\u51fa\u73b0\u95ee\u9898\u7684\uff0c\u6240\u4ee5\u8ba9\u4f7f\u7528\u8005\u9519\u8bef\u7684\u8ba4\u4e3a\u8fd9\u662f\u6b63\u786e\u7684\u5199\u6cd5\u3002\u7b2c\u4e8c\u4e2a\u9700\u8981\u6ce8\u610f\u7684\u662f\u53ef\u91cd\u5165\u7684\u6982\u5ff5\uff0cLinux\u6709\u5f88\u4e0d\u5c11\u7cfb\u7edf\u8c03\u7528\u7684\u5b9e\u73b0\u90fd\u662f\u4e0d\u53ef\u91cd\u5165\u7684\uff0c\u4f1a\u5c06\u7ed3\u679c\u4fdd\u5b58\u5728\u5185\u90e8\u7684\u9759\u6001\u6570\u636e\u5b58\u50a8\u4e2d\uff0c\u540c\u65f6\u8fd9\u7c7b\u7cfb\u7edf\u8c03\u7528\u4e5f\u63d0\u4f9b\u4e86\u53ef\u91cd\u5165\u7248\u672c\u7684\u5b9e\u73b0\uff0c\u5176\u51fd\u6570\u540d\u5c31\u662f\u5c3e\u90e8\u6dfb\u52a0 _r \u6765\u6807\u8bc6\u3002","title":"\u53ef\u91cd\u5165\u3001\u7ebf\u7a0b\u5b89\u5168\u4ee5\u53ca\u5f02\u6b65\u4fe1\u53f7\u5b89\u5168\u7684\u533a\u522b?"},{"location":"%E5%8D%9A%E5%AE%A2/doc/linux/Linux%E4%BF%A1%E5%8F%B7%E4%B8%93%E9%A2%98FAQ/#_2","text":"\u200b \u5982\u4e0a\u56fe\u6240\u793a\u4e00\u4e2a\u8fdb\u7a0b/\u7ebf\u7a0b\u5c31\u662f\u4e00\u4e2atask_struct\u7ed3\u6784\uff0c\u8be5\u7ed3\u6784\u5305\u542b\u4e86\u5c5e\u4e8e\u8fd9\u4e2a\u8fdb\u7a0b/\u7ebf\u7a0b\u7684\u963b\u585e\u4fe1\u53f7\u96c6\u3001pending\u7684\u4fe1\u53f7\u7b49\uff0c\u6240\u6709\u6295\u9012\u5230\u8be5\u8fdb\u7a0b/\u7ebf\u7a0b\u7684\u4fe1\u53f7\u90fd\u4f1a\u901a\u8fc7\u53cc\u5411\u94fe\u8868\u7ec4\u7ec7\u5728\u4e00\u8d77\uff0c\u94fe\u8868\u7684\u5143\u7d20\u662fsigqueue\uff0c\u6240\u6709\u7684\u4fe1\u53f7\u5bf9\u5e94\u7684\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u5b58\u653e\u5728sighand_struct\u4e2d\u7684\u4e00\u4e2a\u7c7b\u578b\u4e3ak_sigaction\u6570\u7ec4\uff0c\u6bcf\u6b21\u7a0b\u5e8f\u7531\u6838\u5fc3\u6001\u5207\u6362\u5230\u7528\u6237\u6001\u65f6\uff0c\u5185\u6838\u90fd\u4f1a\u53d1\u8d77\u4fe1\u53f7\u5904\u7406\uff0c\u6267\u884c\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u7684\u65f6\u5019\u4e3a\u4e86\u907f\u514d\u5bf9\u5185\u6838\u4ea7\u751f\u5f71\u54cd\uff0c\u6240\u4ee5\u4f7f\u7528\u7684\u662f\u7528\u6237\u6808\uff0c\u8fd8\u53ef\u4ee5\u81ea\u5b9a\u4e49\u4fe1\u53f7\u5904\u7406\u7684\u5907\u7528\u6808\u3002 \u200b \u4fe1\u53f7\u5904\u7406\u51fd\u6570\u662f\u6bcf\u6b21\u7a0b\u5e8f\u4ece\u6838\u5fc3\u6001\u5207\u6362\u5230\u7528\u6237\u6001\u7684\u65f6\u5019\uff0c\u5185\u6838\u624d\u4f1a\u8d1f\u8d23\u53d1\u8d77\u4fe1\u53f7\u5904\u7406\uff0c\u4e5f\u5c31\u662f\u8bf4\u4fe1\u53f7\u5904\u7406\u7684\u65f6\u673a\u6709\u4ee5\u4e0b\u4e24\u79cd: \u8fdb\u7a0b\u5728\u5f53\u524d\u65f6\u95f4\u7247\u7528\u5b8c\u540e\uff0c\u83b7\u5f97\u4e86\u65b0\u7684\u65f6\u95f4\u7247\u65f6(\u4f1a\u53d1\u751f\u5185\u6838\u6001\u5230\u7528\u6237\u6001\u7684\u5207\u6362) \u7cfb\u7edf\u8c03\u7528\u6267\u884c\u5b8c\u6210\u65f6(\u4fe1\u53f7\u7684\u4f20\u9012\u53ef\u80fd\u4f1a\u5f15\u8d77\u6b63\u5728\u963b\u585e\u7684\u7cfb\u7edf\u8c03\u7528\u8fc7\u65e9\u5b8c\u6210)","title":"\u4fe1\u53f7\u7684\u5185\u90e8\u5b9e\u73b0\u662f\u600e\u4e48\u6837\u7684?"},{"location":"%E5%8D%9A%E5%AE%A2/doc/linux/Linux%E4%BF%A1%E5%8F%B7%E4%B8%93%E9%A2%98FAQ/#_3","text":"\u200b\u2003 \u2003\u901a\u8fc7\u67e5\u770b /proc/PID/status \u6587\u4ef6\uff0c\u8be5\u6587\u4ef6\u4e2d\u6709\u51e0\u4e2a\u5b57\u7aef\u7684\u503c\uff0c\u8fd9\u4e9b\u503c\u6309\u7167\u5341\u516d\u8fdb\u5236\u7684\u5f62\u5f0f\u663e\u793a\uff0c\u6700\u4f4e\u7684\u6709\u6548\u4f4d\u8868\u793a\u4fe1\u53f71\uff0c\u76f8\u90bb\u7684\u5de6\u8fb9\u4e00\u4f4d\u4ee3\u8868\u4fe1\u53f72\uff0c\u4f9d\u6b21\u7c7b\u63a8\uff0c\u4f8b\u5982\u4e0b\u9762\u8fd9\u51e0\u4e2a\u6570\u503c: 1 2 3 4 5 6 SigQ : 0 / 3872 0 \u662f\u5f53\u524d\u4fe1\u53f7\u961f\u5217\u4e2d\u7684\u4fe1\u53f7\u6570\uff0c 3872 \u662f\u4fe1\u53f7\u961f\u5217\u7684\u6700\u5927\u957f\u5ea6 SigPnd : 0000000000000000 \u5f53\u524d pending\u7684\u4fe1\u53f7 \uff0c\u4e5f\u5c31\u662f\u6ca1\u6709\u4fe1\u53f7\u6295\u9012\u7ed9\u7ebf\u7a0b ShdPnd : 0000000000000000 \u5f53\u524d pengding\u7684\u4fe1\u53f7 \uff0c\u4e5f\u5c31\u662f\u6ca1\u6709\u4fe1\u53f7\u6295\u9012\u7ed9\u8fdb\u7a0b SigBlk : 7 be3c0fe28014a03 \u5f53\u524d\u963b\u585e\u7684\u4fe1\u53f7 SigIgn : 0000000000001000 \u5f53\u524d\u88ab\u5ffd\u7565\u7684\u4fe1\u53f7 SigCgt : 00000001 800004 ec \u5f53\u524d\u88ab\u6355\u83b7\u7684\u4fe1\u53f7","title":"\u5982\u4f55\u67e5\u770b\u4e00\u4e2a\u8fdb\u7a0b\u5f53\u524d\u7b49\u5f85\u7684\u3001\u963b\u585e\u7684\u3001\u5ffd\u7565\u7684\u3001\u6355\u83b7\u7684\u4fe1\u53f7?"},{"location":"%E5%8D%9A%E5%AE%A2/doc/linux/Linux%E4%BF%A1%E5%8F%B7%E4%B8%93%E9%A2%98FAQ/#_4","text":"\u200b\u2003 \u2003\u5f53\u4fe1\u53f7\u5230\u8fbe\u7684\u65f6\u5019\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4fe1\u53f7\u6709\u5982\u4e0b\u51e0\u79cd\u5904\u7406\u65b9\u5f0f: \u5ffd\u7565\u4fe1\u53f7\uff0c\u5185\u6838\u76f4\u63a5\u5c06\u4fe1\u53f7\u4e22\u5f03\uff0c\u4e0d\u5bf9\u8fdb\u7a0b\u4ea7\u751f\u4efb\u4f55\u5f71\u54cd \u7ec8\u6b62\u8fdb\u7a0b\uff0c\u662f\u4e00\u79cd\u5f02\u5e38\u7684\u7ec8\u6b62\u65b9\u5f0f\uff0c\u548c\u8c03\u7528exit\u800c\u53d1\u751f\u7684\u7ec8\u6b62\u4e0d\u540c \u4ea7\u751f\u6838\u5fc3\u5b58\u50a8\u6587\u4ef6\uff0c\u540c\u65f6\u8fdb\u7a0b\u7ec8\u6b62 \u505c\u6b62\u8fdb\u7a0b\uff0c\u6682\u505c\u8fdb\u7a0b\u7684\u8fd0\u884c \u6062\u590d\u4e4b\u524d\u6682\u505c\u7684\u8fdb\u7a0b \u6267\u884c\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u4fe1\u53f7\u5904\u7406\u5668","title":"\u4fe1\u53f7\u7684\u9ed8\u8ba4\u5904\u7406\u65b9\u5f0f\u6709\u54ea\u4e9b?"},{"location":"%E5%8D%9A%E5%AE%A2/doc/linux/Linux%E4%BF%A1%E5%8F%B7%E4%B8%93%E9%A2%98FAQ/#signalsigaction","text":"\u200b\u2003 \u2003\u8fd9\u4e24\u8005\u90fd\u53ef\u4ee5\u7528\u6765\u6539\u53d8\u4fe1\u53f7\u5904\u7f6e\uff0c signal \u5f88\u539f\u59cb\uff0c\u63d0\u4f9b\u7684\u63a5\u53e3\u4e5f\u6bd4\u8f83\u7b80\u5355\uff0c\u800c sigaction \u63d0\u4f9b\u4e86 signal \u6240\u4e0d\u5177\u5907\u7684\u529f\u80fd\u3002\u4e3a\u4e86\u517c\u5bb9\uff0c signal \u7cfb\u7edf\u8c03\u7528\u4ecd\u7136\u4fdd\u5b58\uff0c\u4f46\u662f glibc \u662f\u4f7f\u7528 sigaction \u5b9e\u73b0\u4e86 signal \u7684\u529f\u80fd\u3002 sigaction \u540c\u65f6\u652f\u6301\u4e24\u79cd\u5f62\u5f0f\u7684\u4fe1\u53f7\u5904\u7406\uff0c\u901a\u8fc7\u4e0d\u7528\u7684 flags \u533a\u5206\uff0c\u901a\u8fc7\u8bbe\u7f6e\u4e0d\u540c\u7684 flags \u53ef\u4ee5\u5f97\u5230\u4e0d\u540c\u7684\u529f\u80fd\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 struct sigaction { // \u4e24\u79cdhandler\uff0c\u517c\u5bb9\u8001\u7684signal\u5bf9\u5e94\u7684\u4fe1\u53f7\u5904\u7406\u51fd\u6570 void ( * sa_handler )( int ); void ( * sa_sigaction )( int , siginfo_t * , void * ); sigset_t sa_mask ; // \u8981\u5c4f\u853d\u7684\u4fe1\u53f7\u96c6 int sa_flags ; void ( * sa_restorer )( void ); // Not for application use }; sa_flags : 1. SA_NOCLDSTOP \u5f53\u63a5\u6536\u4e00\u4e2a\u4fe1\u53f7\u800c\u505c\u6b62\u6216\u6062\u590d\u67d0\u4e00\u4e2a\u5b50\u8fdb\u7a0b\u65f6\uff0c\u5c06\u4e0d\u4f1a\u4ea7\u751f SIGCHLD\u4fe1\u53f7 2. SA_NOCLDWAIT \u5b50\u8fdb\u7a0b\u7ec8\u6b62\u65f6\u4e0d\u4f1a\u5c06\u5176\u8f6c\u5316\u4e3a\u50f5\u5c38 3. SA_NODEFER \u6355\u83b7\u4fe1\u53f7\u540e\uff0c\u4e0d\u4f1a\u5728\u6267\u884c\u4fe1\u53f7\u5904\u7406\u5668\u7a0b\u5e8f\u7684\u65f6\u5019\u81ea\u52a8\u5c06\u8be5\u4fe1\u53f7\u6dfb\u52a0\u5230\u8fdb\u7a0b\u63a9\u7801\u4e2d\uff0c\u4e5f\u5c31\u662f\u4e0d\u4f1a\u88ab\u8fd9\u4e2a \u4fe1\u53f7\u518d\u6b21\u6253\u65ad\uff0c\u6210\u4e3a\u6b7b\u5faa\u73af\u3002 4. SA_ONSTACK \u5728\u6267\u884c\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u65f6\uff0c\u4f7f\u7528 sigaltstack\u5b89\u88c5\u7684\u5907\u9009\u6808 5. SA_RESETHAND \u6355\u83b7\u4fe1\u53f7\u540e\uff0c\u4f1a\u5728\u8c03\u7528\u5904\u7406\u5668\u51fd\u6570\u4e4b\u524d\u5c06\u4fe1\u53f7\u5904\u7f6e\u4e3a\u9ed8\u8ba4\u503c 6. SA_RESTART \u81ea\u52a8\u91cd\u542f\u7531\u4fe1\u53f7\u5904\u7406\u5668\u7a0b\u5e8f\u4e2d\u65ad\u7684\u7cfb\u7edf\u8c03\u7528 7. SA_SIGINFO \u8c03\u7528\u4fe1\u53f7\u5904\u7406\u5668\u7a0b\u5e8f\u65f6\uff0c\u643a\u5e26\u989d\u5916\u7684\u53c2\u6570\uff0c\u4e5f\u5c31\u662f\u4f7f\u7528 sa_sigaction\u7c7b\u578b\u7684\u4fe1\u53f7\u5904\u7406\u51fd\u6570","title":"signal\u548csigaction\u533a\u522b?"},{"location":"%E5%8D%9A%E5%AE%A2/doc/linux/Linux%E4%BF%A1%E5%8F%B7%E4%B8%93%E9%A2%98FAQ/#kill","text":"\u200b\u2003 \u2003 kill \u7cfb\u7edf\u8c03\u7528\u53ef\u4ee5\u7528\u6765\u5411\u6307\u5b9a\u8fdb\u7a0b\u53d1\u9001\u4fe1\u53f7\uff0c\u5982\u679c\u6307\u5b9a\u7684\u4fe1\u53f7\u662f0\u7684\u65f6\u5019\uff0c kill \u4ec5\u4f1a\u8fdb\u884c\u9519\u8bef\u7684\u68c0\u67e5\uff0c\u67e5\u770b\u662f\u5426\u53ef\u4ee5\u60f3\u76ee\u6807\u8fdb\u7a0b\u53d1\u9001\u4fe1\u53f7\uff0c\u800c\u8fd9\u4e00\u7279\u70b9\u6070\u597d\u53ef\u4ee5\u7528\u6765\u68c0\u6d4b\u7279\u5b9a\u8fdb\u7a0bID\u6240\u5bf9\u5e94\u7684\u8fdb\u7a0b\u662f\u5426\u5b58\u5728\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u90a3\u4e48 kill \u8c03\u7528\u5931\u8d25\uff0c\u5e76\u4e14 errno \u8bbe\u7f6e\u4e3a ESRCH","title":"\u901a\u8fc7Kill\u6765\u68c0\u67e5\u8fdb\u7a0b\u662f\u5426\u5b58\u5728?"},{"location":"%E5%8D%9A%E5%AE%A2/doc/linux/Linux%E4%BF%A1%E5%8F%B7%E4%B8%93%E9%A2%98FAQ/#_5","text":"1 2 3 4 5 6 7 8 9 #include <string.h> #include <signal.h> #include <stdio.h> int main () { printf ( \"signal: %s \\n \" , strsignal ( SIGKILL )); // \u548cstrerror\u7b49\u540c psignal ( SIGKILL , \"signal\" ); // \u548cperror\u7b49\u540c return 0 ; }","title":"\u5982\u4f55\u6253\u5370\u4fe1\u53f7\u679a\u4e3e\u503c\u5bf9\u5e94\u7684\u4fe1\u53f7\u63cf\u8ff0?"},{"location":"%E5%8D%9A%E5%AE%A2/doc/linux/Linux%E4%BF%A1%E5%8F%B7%E4%B8%93%E9%A2%98FAQ/#_6","text":"\u200b\u2003 \u2003\u4fe1\u53f7\u96c6\u662f\u4e00\u79cd\u7528\u6765\u8868\u793a\u4e00\u7cfb\u5217\u4fe1\u53f7\u96c6\u5408\u7684\u6570\u636e\u7ed3\u6784\uff0c\u4f7f\u7528 sigset_t \u6765\u8868\u793a\uff0c\u5b83\u7684\u5e95\u5c42\u5b58\u50a8\u7c7b\u578b\u5176\u5b9e\u53ea\u662f\u4e00\u4e2a unsigned long \u7c7b\u578b\uff0c\u5982\u4e0b: 1 typedef unsigned long sigset_t ; \u200b\u2003 \u2003 unsigned long \u4e00\u5171\u662f\u516b\u4e2a\u5b57\u8282\uff0c\u603b\u5171\u662f64\u4f4d\uff0c\u6bcf\u4e00\u4f4d\u8868\u793a\u4e00\u4e2a\u4fe1\u53f7\u7684\u8bdd\uff0c\u6700\u591a\u53ef\u4ee5\u8868\u793a64\u4e2a\u4fe1\u53f7\uff0c\u8fd9\u4e2a\u548c\u4fe1\u53f7\u7684\u6700\u5927\u503c\u662f\u543b\u5408\u7684\u3002\u4fe1\u53f7\u96c6\u4e5f\u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u7528\u6765\u64cd\u4f5c\u4fe1\u53f7\u96c6\u7684\u65b9\u6cd5\uff0c sigemptyset \u3001 sigfillset \u3001 sigaddset \u3001 sigdelset \u3001 sigismember \u3001 sigisemptyset \u7b49","title":"\u4fe1\u53f7\u96c6\u7684\u5185\u90e8\u5b9e\u73b0\uff1f"},{"location":"%E5%8D%9A%E5%AE%A2/doc/linux/Linux%E4%BF%A1%E5%8F%B7%E4%B8%93%E9%A2%98FAQ/#_7","text":"\u200b\u2003 \u2003\u963b\u585e\u4fe1\u53f7\u7684\u5b9e\u73b0\u4e0d\u96be\uff0c\u901a\u8fc7\u4e0a\u6587\u4e2d\u5bf9\u4fe1\u53f7\u5185\u90e8\u5b9e\u73b0\u7684\u5206\u6790\u53ef\u77e5\uff0c\u901a\u8fc7\u5c06\u8981\u963b\u585e\u7684\u4fe1\u53f7\u653e\u5230 task_struct \u7ed3\u6784\u4e2d\u7684 blocked \u6210\u5458\u4e2d\uff0c\u90a3\u4e48\u5728\u4fe1\u53f7\u7684\u6295\u9012\u65f6\u4f1a\u5148\u67e5\u770b\u4e0b\u8981\u6295\u9012\u7684\u4fe1\u53f7\u662f\u5426\u5728\u963b\u585e\u4fe1\u53f7\u96c6\u4e2d\uff0c\u5982\u679c\u5728\u5c31\u505c\u6b62\u6295\u9012\uff0c\u5426\u5219\u5c31\u89e6\u53d1\u5bf9\u5e94\u7684\u4fe1\u53f7\u5904\u7406\uff0c\u901a\u8fc7sigprocmask\u53ef\u4ee5\u8bbe\u7f6e\u5f53\u524d\u8fdb\u7a0b\u7684\u963b\u585e\u4fe1\u53f7\u96c6\uff0c\u5bf9\u5e94\u5230\u5185\u6838\u7684\u5b9e\u73b0\u5982\u4e0b: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 int sigprocmask ( int how , sigset_t * set , sigset_t * oldset ) { struct task_struct * tsk = current ; sigset_t newset ; /* Lockless, only current can change ->blocked, never from irq */ if ( oldset ) * oldset = tsk -> blocked ; switch ( how ) { case SIG_BLOCK : sigorsets ( & newset , & tsk -> blocked , set ); break ; case SIG_UNBLOCK : sigandnsets ( & newset , & tsk -> blocked , set ); break ; case SIG_SETMASK : newset = * set ; break ; default : return - EINVAL ; } __set_current_blocked ( & newset ); return 0 ; } \u200b\u2003 \u2003\u901a\u8fc7 sigprocmask \u8bbe\u7f6e\u963b\u585e\u7684\u4fe1\u53f7\u96c6\u5b58\u5728\u4e00\u4e2a\u7ade\u6001\uff0c\u5982\u679c\u60f3\u5728\u8bbe\u7f6e\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u7684\u540c\u65f6\u518d\u8bbe\u7f6e\u963b\u585e\u7684\u4fe1\u53f7\u96c6\uff0c\u90a3\u4e48\u8fd9\u9700\u8981\u5148\u8c03\u7528 signal/sigaction \uff0c\u7136\u540e\u518d\u8c03\u7528 sigprocmask \uff0c\u5728\u8bbe\u7f6e\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u548c\u8c03\u7528 sigprocmask \u4e4b\u95f4\u5b58\u5728\u4e00\u4e2a\u95f4\u9699\uff0c\u5982\u679c\u5728\u8fd9\u4e2a\u95f4\u9699\u671f\u95f4\u540e\u4fe1\u53f7\u6295\u9012\uff0c\u90a3\u4e48\u5c31\u6ca1\u6709\u8d77\u5230\u963b\u585e\u4fe1\u53f7\u7684\u4f5c\u7528\u4e86\u3002\u4e3a\u6b64 sigaction \u7684 sa_mask \u6210\u5458\u53ef\u4ee5\u7528\u6765\u8bbe\u7f6e\u963b\u585e\u4fe1\u53f7\u96c6\uff0c\u8fd9\u4f7f\u5f97\u8bbe\u7f6e\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u7684\u540c\u65f6\u5c31\u53ef\u4ee5\u8bbe\u7f6e\u963b\u585e\u4fe1\u53f7\u96c6\u3002 \u200b\u2003 \u2003\u53e6\u5916\u4e00\u4e2a\u95ee\u9898\u5c31\u662f\u88ab\u963b\u585e\u7684\u4fe1\u53f7\u5728\u7b49\u5f85\u89e3\u9664\u963b\u585e\u540e\u662f\u5426\u4f1a\u6295\u9012\u5230\u8fdb\u7a0b\u8fdb\u884c\u5904\u7406\uff1f\u4fe1\u53f7\u88ab\u963b\u585e\u540e\u5c31\u4f1a\u53d8\u6210\u5f85\u51b3\u4fe1\u53f7\uff0c\u5e76\u901a\u8fc7\u94fe\u8868\u94fe\u63a5\u8d77\u6765\uff0c task_struct \u7ed3\u6784\u4e2d\u7684 pending \u6210\u5458\u5c31\u662f\u94fe\u8868\u5934\uff0c\u5982\u679c\u4e00\u4e2a\u4fe1\u53f7\u53d1\u9001\u591a\u6b21\uff0clinux\u662f\u4e0d\u4fdd\u8bc1\u6295\u9012\u76f8\u540c\u6b21\u6570\u7684\uff0c\u53ea\u4f1a\u4fdd\u5b58\u4e00\u6b21\uff0c\u4e5f\u5c31\u662f\u975e\u5b9e\u65f6\uff0c\u4e0d\u5bf9\u4fe1\u53f7\u6392\u961f\u3002\u5176\u4e2d SIGKILL \u548c SIGSTOP \u662f\u4e0d\u80fd\u88ab\u963b\u585e\u7684\u3002","title":"\u5982\u4f55\u963b\u585e\u4fe1\u53f7\uff0c\u963b\u585e\u7684\u4fe1\u53f7\u5728\u89e3\u9664\u963b\u585e\u540e\u662f\u5426\u4f1a\u6295\u9012?"},{"location":"%E5%8D%9A%E5%AE%A2/doc/linux/Linux%E4%BF%A1%E5%8F%B7%E4%B8%93%E9%A2%98FAQ/#_8","text":"\u200b\u2003 \u2003\u8bf4\u767d\u4e86\u8fd9\u91cc\u5c31\u662f\u53bb\u67e5\u8be2\u5f85\u51b3\u4fe1\u53f7\u7684\u94fe\u8868\u4e5f\u5c31\u662f task_struct \u7ed3\u6784\u4e2d\u7684 pending \u6210\u5458\uff0c\u5c06\u91cc\u9762\u7684\u4fe1\u53f7\u653e\u5230\u4fe1\u53f7\u96c6\u4e2d\u8fd4\u56de\u5373\u53ef\u3002\u5bf9\u5e94\u5230\u5185\u6838\u5b9e\u73b0\u5982\u4e0b: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 static int do_sigpending ( void * set , unsigned long sigsetsize ) { if ( sigsetsize > sizeof ( sigset_t )) return - EINVAL ; spin_lock_irq ( & current -> sighand -> siglock ); //\u52a0\u9501 sigorsets ( set , & current -> pending . signal , // \u5c06pengding\u548csignal->shared_pending\u4e2d\u7684\u4fe1\u53f7\u533a\u53d6\u5e76\u96c6 & current -> signal -> shared_pending . signal ); spin_unlock_irq ( & current -> sighand -> siglock ); /* Outside the lock because only this thread touches it. */ sigandsets ( set , & current -> blocked , set ); //\u6700\u540e\u5c06\u5f85\u51b3\u4fe1\u53f7\u548c\u963b\u585e\u7684\u4fe1\u53f7\u53d6\u4ea4\u96c6\uff0c\u56e0\u4e3a\u5f85\u51b3\u4fe1\u53f7\u5e76\u4e0d\u4e00\u5b9a\u662f\u963b\u585e\u7684\uff0c\u6709\u53ef\u80fd\u662f\u8fd8\u6ca1\u6765\u5f97\u53ca\u6295\u9012\u7684\uff0c\u6240\u4ee5\u8fd9\u91cc\u8981\u53d6\u4ea4\u96c6 return 0 ; } \u200b\u2003 \u2003\u5728\u7528\u6237\u6001\u901a\u8fc7 sigpending \u51fd\u6570\u5c31\u53ef\u4ee5\u67e5\u8be2\u5f53\u524d\u54ea\u4e9b\u88ab\u963b\u585e\u7684\u4fe1\u53f7\u662f\u672a\u51b3\u7684(\u4e5f\u5c31\u662f\u5df2\u7ecf\u6295\u9012\u5230\u8fdb\u7a0b\u4e86\uff0c\u4f46\u662f\u56e0\u4e3a\u88ab\u5c4f\u853d\u4e86\u8fd8\u6ca1\u6709\u88ab\u5904\u7406\uff0c\u4e5f\u5c31\u662f\u4fdd\u5b58\u5728\u8fdb\u7a0b\u7684 pending \u6210\u5458\u4e2d)","title":"\u5982\u4f55\u77e5\u9053\u5f53\u524d\u54ea\u4e9b\u4fe1\u53f7\u88ab\u963b\u585e\u4e86?"},{"location":"%E5%8D%9A%E5%AE%A2/doc/linux/Linux%E4%BF%A1%E5%8F%B7%E4%B8%93%E9%A2%98FAQ/#_9","text":"\u200b\u2003 \u2003\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u548c\u666e\u901a\u51fd\u6570\u662f\u6709\u4e00\u4e9b\u533a\u522b\u7684\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u51fd\u6570\u662f\u5f02\u6b65\u88ab\u6267\u884c\u7684\uff0c\u6240\u4ee5\u9700\u8981\u8003\u8651\u5f02\u6b65\u4fe1\u53f7\u5b89\u5168\u7684\u95ee\u9898\uff0c\u5728\u8fd9\u4e2a\u51fd\u6570\u4e2d\u6ca1\u529e\u6cd5\u4f7f\u7528\u4e00\u4e9b\u975e\u5f02\u6b65\u4fe1\u53f7\u5b89\u5168\u7684\u51fd\u6570\uff0c\u4e3a\u6b64\u7f16\u5199\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u4e00\u822c\u8981\u9075\u4ece\u4e00\u4e9b\u8bbe\u8ba1\uff0c\u4e24\u79cd\u5e38\u89c1\u7684\u8bbe\u8ba1\u5982\u4e0b: \u4fe1\u53f7\u5904\u7406\u51fd\u6570\u8bbe\u7f6e\u5168\u5c40\u6027\u53d8\u91cf\u5e76\u9000\u51fa\uff0c\u4e3b\u7a0b\u5e8f\u5468\u671f\u6027\u68c0\u67e5\uff0c\u4e00\u65e6\u7f6e\u4f4d\u5c31\u7acb\u5373\u91c7\u53d6\u52a8\u4f5c,\u6216\u8005\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u901a\u8fc7\u5fd8\u7ba1\u9053\u4e2d\u5199 \u5165\u4e00\u4e2a\u5b57\u8282\u6765\u901a\u77e5\u4e3b\u7a0b\u5e8f\u3002 \u4fe1\u53f7\u5904\u7406\u5668\u51fd\u6570\u6267\u884c\u67d0\u79cd\u7c7b\u578b\u7684\u6e05\u7406\u52a8\u4f5c\uff0c\u7136\u540e\u7ec8\u6b62\u8fdb\u7a0b\u6216\u8005\u6267\u884c\u975e\u672c\u5730\u8df3\u8f6c\uff0c\u5c06\u6808\u89e3\u5f00\u5e76\u5c06\u63a7\u5236\u6743\u8fd4\u56de\u5230\u4e3b\u7a0b\u5e8f\u7684\u9884\u5b9a\u4f4d\u7f6e\u3002","title":"\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u8be5\u600e\u4e48\u8bbe\u8ba1\uff0c\u9700\u8981\u6ce8\u610f\u4ec0\u4e48?"},{"location":"%E5%8D%9A%E5%AE%A2/doc/linux/Linux%E4%BF%A1%E5%8F%B7%E4%B8%93%E9%A2%98FAQ/#_10","text":"\u200b\u2003 \u2003\u4e00\u4e2a\u4fe1\u53f7\u5230\u8fbe\u540e\u4f1a\u89e6\u53d1\u4fe1\u53f7\u5904\u7406\u51fd\u6570\uff0c\u5728\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u5982\u679c\u8be5\u4fe1\u53f7\u518d\u6b21\u4ea7\u751f\u662f\u4e0d\u4f1a\u6253\u65ad\u5f53\u524d\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u7684\uff0c\u4f46\u662f\u5982\u679c\u6709\u5176\u4ed6\u4fe1\u53f7\u8fdb\u884c\u4e86\u6295\u9012\u8fd9\u4e2a\u4f1a\u6253\u65ad\u5f53\u524d\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u7684\u3002 sigaction \u7684 sa_flags \u6210\u5458\u6709\u4e00\u4e2a\u503c\u5c31\u662f\u7528\u6765\u63a7\u5236\u8fd9\u4e2a\u884c\u4e3a\u7684\uff0c\u5982\u679c\u503c\u4e3a SA_NODEFER (\u53c2\u8003\u4e0a\u6587\u4e2d\u5bf9 sa_flags \u7684\u89e3\u91ca)\u8868\u660e\u5728\u6267\u884c\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u65f6\u662f\u53ef\u4ee5\u88ab\u76f8\u540c\u4fe1\u53f7\u6253\u65ad\u7684\u3002\u8fd9\u5f88\u5bb9\u6613\u9020\u6210\u9012\u5f52\u6b7b\u5faa\u73af\u3002","title":"\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u5728\u6267\u884c\u8fc7\u7a0b\u4e2d\u662f\u5426\u4f1a\u88ab\u4fe1\u53f7\u518d\u6b21\u6253\u65ad?"},{"location":"%E5%8D%9A%E5%AE%A2/doc/linux/Linux%E4%BF%A1%E5%8F%B7%E4%B8%93%E9%A2%98FAQ/#sig_atomic_t","text":"\u200b\u2003 \u2003\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u4e00\u822c\u8981\u9075\u4ece\u4e0a\u6587\u4e2d\u63d0\u5230\u7684\u8bbe\u8ba1\uff0c\u5904\u7406\u51fd\u6570\u4e2d\u53ea\u5bf9\u4e00\u4e9b\u5168\u5c40\u53d8\u91cf\u8fdb\u884c\u5904\u7406\uff0c\u7136\u540e\u4e3b\u7a0b\u5e8f\u5468\u671f\u6027\u7684\u68c0\u67e5\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5168\u5c40\u53d8\u91cf\u7684\u7c7b\u578b\u9700\u8981\u8003\u91cf\u4e24\u70b9: \u7f16\u8bd1\u5668\u4e00\u822c\u4f1a\u5bf9\u53d8\u91cf\u7684\u8bfb\u5199\u8fdb\u884c\u7f13\u5b58\uff0c\u5c06\u521a\u5199\u5165\u7684\u53d8\u91cf\u503c\u653e\u5728\u5bc4\u5b58\u5668\u4e2d\uff0c\u4e0b\u6b21\u8bfb\u7684\u65f6\u5019\u76f4\u63a5\u4ece\u5bc4\u5b58\u5668\u4e2d\u8bfb\u53d6\uff0c\u8fd9\u4e2a\u8bbe\u8ba1\u9002\u7528\u4e8egcc\u53ef\u4ee5\u7406\u89e3\u4ee3\u7801\u7684\u4e0a\u4e0b\u6587\uff0c\u4f46\u662f\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u662f\u4efb\u4f55\u65f6\u5019\u90fd\u6709\u53ef\u80fd\u89e6\u53d1\u7684\uff0cgcc\u6ca1\u529e\u6cd5\u77e5\u9053\u4ec0\u4e48\u65f6\u5019\u89e6\u53d1\u4fe1\u53f7\u5904\u7406\u51fd\u6570\uff0c\u5982\u679c\u67d0\u4e00\u65f6\u523b\u4e3b\u7a0b\u5e8f\u5bf9\u5168\u5c40\u53d8\u91cf\u53d1\u751f\u4e86\u5199\u5165\uff0c\u4f46\u662f\u5199\u5165\u7684\u503c\u8fd8\u6ca1\u6765\u5f97\u53ca\u56de\u5199\u5185\u5b58\uff0c\u7136\u540e\u89e6\u53d1\u4fe1\u53f7\u5904\u7406\u51fd\u6570\uff0c\u7f16\u8bd1\u5668\u5e76\u4e0d\u77e5\u9053\u8981\u4ece\u5bc4\u5b58\u5668\u4e2d\u8bfb\u8be5\u5168\u5c40\u53d8\u91cf\u7684\u503c(\u56e0\u4e3a\u6ca1\u4e0a\u4e0b\u6587)\uff0c\u6240\u4ee5\u4f1a\u76f4\u63a5\u4ece\u5185\u5b58\u4e2d\u8bfb\uff0c\u8fd9\u6837\u8bfb\u5230\u7684\u503c\u5c31\u662f\u4e00\u4e2a\u810f\u503c\u4e86\u3002\u4e3a\u4e86\u907f\u514d\u8fd9\u4e2a\u4f18\u5316\uff0c\u5728\u5b9a\u4e49\u5168\u5c40\u53d8\u91cf\u7684\u65f6\u5019\u4f1a\u52a0\u4e0a volatile \u5173\u952e\u5b57\u3002 \u5168\u5c40\u53d8\u91cf\u7684\u8bfb\u5199\u53ef\u80fd\u4e0d\u6b62\u4e00\u6761\u673a\u5668\u6307\u4ee4\uff0c\u5982\u679c\u5728\u64cd\u4f5c\u5168\u5c40\u53d8\u91cf\u7684\u4e2d\u9014\u88ab\u6253\u65ad\uff0c\u90a3\u4e48\u5728\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u4e2d\u518d\u6b21\u64cd\u4f5c\u8fd9\u4e2a\u5168\u5c40\u53d8\u91cf\u5c31\u5f88\u6709\u53ef\u80fd\u9020\u6210\u8be5\u5168\u5c40\u53d8\u91cf\u6700\u7ec8\u503c\u662f\u4e00\u4e2a\u672a\u5b9a\u4e49\u7684\u503c\u3002\u6240\u4ee5 sig_atomic_t \u7684\u7c7b\u578b\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u539f\u5b50\u7c7b\u578b\uff0c\u901a\u8fc7\u9605\u8bfb\u6e90\u7801\uff0c\u53d1\u73b0\u8fd9\u4e2a\u6570\u636e\u7c7b\u578b\u5176\u5b9e\u5c31\u662f\u4e00\u4e2aint\u7c7b\u578b\uff0c\u4ee3\u7801\u5982\u4e0b\uff0c\u4e3b\u8981\u539f\u56e0\u662f\u56e0\u4e3a\u5728x86_64\u67b6\u6784\u7684CPU\u4e0b\uff0c\u5bf9\u4e8e8\u300116\u300132\u300164\u8fd9\u6837\u7684\u5bf9\u9f50\u5927\u5c0f\u5bf9\u9f50\u7684\u6570\u636e\u7c7b\u578b\uff0c\u5176\u53c2\u8003\u662f\u539f\u5b50\u7684\uff0c\u6240\u4ee5 sig_atomic_t \u5c31\u662f\u4e00\u4e2a\u5bf9int\u7c7b\u578b\u7684\u522b\u540d\u3002 1 2 typedef int __sig_atomic_t ; typedef __sig_atomic_t sig_atomic_t ; \u200b","title":"sig_atomic_t\u6570\u636e\u7c7b\u578b\u7684\u4f5c\u7528?"},{"location":"%E5%8D%9A%E5%AE%A2/doc/linux/Linux%E4%BF%A1%E5%8F%B7%E4%B8%93%E9%A2%98FAQ/#_11","text":"\u200b\u2003 \u2003\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u90fd\u662f\u5904\u7406\u5b8c\u4e00\u4e9b\u4e8b\u60c5\u540e\u5c31\u56de\u5230\u4e86\u4e3b\u7a0b\u5e8f\u7ee7\u7eed\u6267\u884c\uff0c\u6216\u8005\u662f\u505a\u4e00\u4e9b\u8d44\u6e90\u7684\u91ca\u653e\u548c\u6e05\u7406\uff0c\u63a5\u7740\u5c31\u9000\u51fa\u4e86\u7a0b\u5e8f\uff0c \u9664\u6b64\u4e4b\u5916\u5176\u5b9e\u8fd8\u6709\u66f4\u591a\u7684\u9009\u62e9\u3002 \u4f7f\u7528_exit\u7ec8\u6b62\u8fdb\u7a0b\uff0c\u5904\u7406\u5668\u51fd\u6570\u53ef\u4ee5\u4e8b\u5148\u505a\u4e00\u4e9b\u6e05\u7406\u5de5\u4f5c\uff0c\u4f46\u662f\u8fd9\u91cc\u6ce8\u610f\u4e0d\u80fd\u4f7f\u7528exit\u6765\u7ec8\u6b62\uff0c\u56e0\u4e3a\u5b83\u4e0d\u5728\u5f02\u6b65\u4fe1\u53f7\u5b89\u5168\u51fd\u6570\u7684\u5217\u8868\u4e2d\u3002 \u4f7f\u7528kill\u53d1\u9001\u4fe1\u53f7\u6765\u6740\u6389\u8fdb\u7a0b \u5728\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u4e2d\u6267\u884c\u975e\u672c\u5730\u8df3\u8f6c \u4f7f\u7528abort\u7ec8\u6b62\u8fdb\u7a0b\uff0c\u5e76\u4ea7\u751f\u6838\u5fc3\u8f6c\u50a8 \u200b\u2003 \u2003\u5bf9\u4e8e1\u30012\u30014\u6211\u89c9\u5f97\u90fd\u662f\u53ef\u4ee5\u7406\u89e3\u7684\uff0c\u95ee\u9898\u4e0d\u5927\uff0c\u91cd\u70b9\u662f\u7b2c\u4e09\u4e2a\uff0c\u975e\u672c\u5730\u8df3\u8f6c\uff0c\u8df3\u8f6c\u5230\u53e6\u5916\u4e00\u4e2a\u5730\u65b9\u540e\uff0c\u6808\u4f1a\u89e3\u65cb\u8f6c\uff0c\u4f46\u662f\u6709\u4e00\u4e9b\u70b9\u8fd8\u9700\u8981\u63a2\u8ba8\uff0c\u6bd4\u5982\u8bf4\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u5f53\u4e00\u4e2a\u4fe1\u53f7\u5f00\u59cb\u89e6\u53d1\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u65f6\uff0c\u9ed8\u8ba4\u4f1a\u8bb2\u8be5\u4fe1\u53f7\u52a0\u5165\u5230\u963b\u585e\u7684\u4fe1\u53f7\u96c6\u4e2d\uff0c\u8fd9\u6837\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u5c31\u4e0d\u4f1a\u88ab\u76f8\u540c\u4fe1\u53f7\u6253\u65ad\u4e86\uff0c\u5982\u679c\u4f7f\u7528\u975e\u672c\u5730\u8df3\u8f6c\u7684\u5316\uff0c\u5e26\u6765\u7684\u95ee\u9898\u5c31\u662f\u8fd9\u4e2a\u963b\u585e\u7684\u4fe1\u53f7\u96c6\u9700\u8981\u88ab\u6062\u590d\uff0c\u65e9\u671f\u7684 BSD \u5b9e\u73b0\u65f6\u4f1a\u5c06\u963b\u585e\u7684\u4fe1\u53f7\u6062\u590d\u7684\uff0c\u4f46\u662fLinux\u662f\u9075\u5faa System V \u7684\u5b9e\u73b0\uff0c\u662f\u4e0d\u4f1a\u5c06\u963b\u585e\u7684\u4fe1\u53f7\u8fdb\u884c\u6062\u590d\u7684\uff0c\u9274\u4e8e\u8fd9\u4e2a\u884c\u4e3a\u5728\u4e0d\u901a\u7684\u5e73\u53f0\u5176\u5b9e\u73b0\u4e0d\u540c\uff0c\u8fd9\u5c06\u6709\u635f\u4e8e\u53ef\u79fb\u690d\u6027\uff0c POSIX \u901a\u8fc7\u5b9a\u4e49\u4e86\u4e00\u5806\u65b0\u7684\u51fd\u6570\u6765\u89c4\u8303\u975e\u672c\u5730\u8df3\u8f6c\u7684\u884c\u4e3a\uff0c sigsetjmp \u548c siglongjmp \uff0c\u5176\u51fd\u6570\u539f\u578b\u5982\u4e0b: 1 2 3 #include <setjmp.h> int sigsetjmp ( sigjmp_buf env , int savesigs ); // savesigs\u975e0\u65f6\uff0c\u4f1a\u5c06\u5f53\u524d\u7684\u4fe1\u53f7\u63a9\u7801\u4fdd\u5b58 void siglongjmp ( sigjmp_buf env , int val ); // \u6062\u590dsigsetjmp\u4fdd\u5b58\u7684\u4fe1\u53f7\u63a9\u7801","title":"\u7ec8\u6b62\u4fe1\u53f7\u5904\u7406\u5668\u51fd\u6570\u7684\u65b9\u6cd5\u6709\u54ea\u4e9b?"},{"location":"%E5%8D%9A%E5%AE%A2/doc/linux/Linux%E4%BF%A1%E5%8F%B7%E4%B8%93%E9%A2%98FAQ/#_12","text":"\u200b\u2003 \u2003\u8fd9\u4e2a\u95ee\u9898\u53ef\u80fd\u5927\u591a\u6570\u4eba\u90fd\u53ea\u662f\u77e5\u9053\u8981\u600e\u4e48\u53bb\u5904\u7406\uff0c\u4f46\u662f\u5374\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u4f1a\u53d1\u751f\u4e2d\u65ad? \u5982\u679c\u4e00\u4e2a\u7cfb\u7edf\u8c03\u7528\u5728\u6267\u884c\u7684\u65f6\u5019\uff0c\u4e00\u4e2a\u4fe1\u53f7\u5230\u6765\uff0c\u8fd9\u4e2a\u65f6\u5019\u9700\u8981\u5207\u6362\u5230\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u4e2d\u6267\u884c\uff0c\u4f46\u662f\u7cfb\u7edf\u8c03\u7528\u662f\u5728\u5185\u6838\u6001\u4e2d\u6267\u884c\u7684\uff0c\u5982\u679c\u73b0\u5728\u6267\u884c\u4ee5\u5185\u6838\u6001\u6765\u8fd0\u884c\u7528\u6237\u6001\u7f16\u5199\u7684\u4fe1\u53f7\u5904\u7406\u51fd\u6570\uff0c\u8fd9\u4f1a\u7ed9\u5185\u6838\u5e26\u6765\u5b89\u5168\u98ce\u9669\uff0c\u6240\u4ee5\u7406\u8bba\u4e0a\u8fd9\u91cc\u5e94\u8be5\u8981\u5207\u6362\u8fd0\u884c\u6001\u5c9b\u7528\u6237\u6001\uff0c\u65e2\u7136\u8981\u5207\u6362\u90a3\u4e48\u4e45\u9700\u8981\u4fdd\u5b58\u5f53\u524d\u7684\u72b6\u6001\uff0c\u4f46\u662f\u8fd9\u5c31\u6d89\u53ca\u5230\u4e00\u4e2a\u95ee\u9898\u5c31\u662f\u4e2d\u95f4\u72b6\u6001\uff0c\u8fd9\u4e2a\u65f6\u5019\u6267\u884c\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u53ef\u80fd\u770b\u5230\u4e00\u4e2a\u4e2d\u95f4\u7684\u65e0\u6548\u72b6\u6001\uff0c\u5bfc\u81f4\u7a0b\u5e8f\u884c\u4e3a\u65f6\u672a\u5b9a\u4e49\u7684\uff0c\u8fd8\u6709\u9501\u7684\u95ee\u9898\uff0c\u8d44\u6e90\u5360\u7528\u7b49\u95ee\u9898\u3002\u6240\u4ee5\u8fd9\u79cd\u5207\u6362\u72b6\u6001\u7684\u65b9\u5f0f\u662f\u4e0d\u53ef\u884c\u7684\uff0clinux\u4f7f\u7528\u4e86\u4e00\u79cd\u66f4\u52a0\u7075\u6d3b\u7684\u65b9\u5f0f\u6765\u5904\u7406\uff0c\u5f53\u7cfb\u7edf\u8c03\u7528\u5728\u6267\u884c\u7684\u8fc7\u7a0b\u4e2d\u6709\u4fe1\u53f7\u5230\u6765\u5219\u4e2d\u65ad\u5f53\u524d\u7684\u7cfb\u7edf\u8c03\u7528\uff0c\u7136\u540e\u8fd4\u56de-1\uff0c\u5e76\u8bbe\u7f6e\u9519\u8bef\u7801\u4e3a EINTR \uff0c\u4ea4\u7ed9\u7528\u6237\u6765\u91cd\u65b0\u518d\u8fd0\u884c\u8be5\u7cfb\u7edf\u8c03\u7528\uff0c\u66f4\u591a\u7684\u7ec6\u8282\u89c1 Interruption of system calls when a signal is caught chromium \u7684\u57fa\u7840\u5e93\u4e2d\u5c31\u63d0\u4f9b\u4e86\u4e00\u79cd\u6bd4\u8f83\u65b9\u4fbf\u7684\u91cd\u542f\u7cfb\u7edf\u8c03\u7528\u7684\u5b8f\u3002 1 2 3 4 5 6 7 #define HANDLE_EINTR(x) ({ \\ decltype(x) eintr_wrapper_result; \\ do { \\ eintr_wrapper_result = (x); \\ } while (eintr_wrapper_result == -1 && errno == EINTR); \\ eintr_wrapper_result; \\ }) \u200b\u2003 \u2003\u9664\u4e86\u4e0a\u9762\u8fd9\u4e2a HANDLE_EINTR \u5916\uff0c GNU C \u5e93\u8fd8\u63d0\u4f9b\u4e86\u4e00\u4e2a\u975e\u6807\u51c6\u7684\u5b8f\uff0c TEMP_FAILURE_RETRY \uff0c\u9700\u8981\u5b9a\u4e49\u7279\u6027\u6d4b\u8bd5\u5b8f _GNU_SOURCE \uff0c\u5728 unistd \u5934\u6587\u4ef6\u4e2d\u8fd8\u6709\u53e6\u5916\u4e00\u4e2a\u5b8f\u53ef\u4ee5\u8d77\u5230\u76f8\u540c\u7684\u4f5c\u7528 NO_EINTR \uff0c\u6700\u540e\u4e00\u4e2a\u65b9\u6cd5\u5c31\u662f\u4f7f\u7528 sigaction \u4e2d\u7684 SA_RESTART \u6807\u5fd7\uff0c\u901a\u8fc7\u8bbe\u7f6e\u8be5\u6807\u5fd7\u540e\uff0c\u4f46\u662f\u5f88\u4e0d\u5e78\u7684\u662f\u8fd9\u4e2a\u6807\u5fd7\u5e76\u4e0d\u80fd\u5904\u7406\u6240\u6709\u7cfb\u7edf\u8c03\u7528\u7684\u81ea\u91cd\u542f\u7684\u95ee\u9898\u3002","title":"\u4e3a\u4ec0\u4e48\u7cfb\u7edf\u8c03\u7528\u4f1a\u4e2d\u65ad\u548c\u91cd\u542f?"},{"location":"%E5%8D%9A%E5%AE%A2/doc/linux/Linux%E4%BF%A1%E5%8F%B7%E4%B8%93%E9%A2%98FAQ/#_13","text":"\u200b\u2003 \u2003\u6211\u4eec\u90fd\u77e5\u9053\u8fdb\u7a0b\u7684\u6808\u7a7a\u95f4\u5927\u5c0f\u662f\u6709\u9650\u5236\u7684\uff0c\u5982\u679c\u67d0\u4e00\u65f6\u523b\u6808\u7a7a\u95f4\u589e\u957f\u5230\u6700\u5927\u503c\uff0c\u7136\u540e\u89e6\u53d1\u4e86\u4fe1\u53f7\u5904\u7406\u51fd\u6570\uff0c\u4f46\u662f\u6808\u5df2\u7ecf\u8fbe\u5230\u4e86\u6700\u5927\u503c\u4e86\uff0c\u65e0\u6cd5\u4e3a\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u521b\u5efa\u6808\u5e27\uff0c\u4e5f\u5c31\u6ca1\u6709\u529e\u6cd5\u8c03\u7528\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u4e86\uff0c\u4e3a\u6b64\u53ef\u4ee5\u501f\u52a9\u4fe1\u53f7\u5907\u9009\u6808\u6765\u521b\u5efa\u4e00\u4e2a\u989d\u5916\u7684\u5806\u6808\uff0c\u7528\u4e8e\u6267\u884c\u4fe1\u53f7\u5904\u7406\u51fd\u6570\uff0c\u4fe1\u53f7\u5907\u9009\u6808\u7684\u521b\u5efa\u8fc7\u7a0b\u5982\u4e0b \uff1a \u5206\u914d\u4e00\u5757\u88ab\u79f0\u4e3a \"\u5907\u9009\u4fe1\u53f7\u6808\" \u7684\u5185\u5b58\u533a\u57df\uff0c\u4f5c\u4e3a\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u7684\u6808\u5e27 \u8c03\u7528 sigaltstack \uff0c\u544a\u4e4b\u5185\u6838\u5907\u9009\u6808\u7684\u5b58\u5728(\u4e5f\u53ef\u4ee5\u5c06\u5df2\u521b\u5efa\u7684\u5907\u9009\u4fe1\u53f7\u6808\u7684\u76f8\u5173\u4fe1\u606f\u8fd4\u56de) \u5728\u521b\u5efa\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u65f6\u6307\u5b9aSA_ONSTACK\uff0c\u4e5f\u5c31\u662f\u901a\u77e5\u5185\u6838\u5728\u5907\u9009\u4fe1\u53f7\u6808\u4e0a\u4e3a\u5904\u7406\u5668\u51fd\u6570\u521b\u5efa\u6808\u5e27\u3002 1 2 3 4 5 6 7 8 #include <signal.h> int sigaltstack ( const stack_t * ss , stack_t * oss ); typedef struct { void * ss_sp ; /* Base address of stack */ int ss_flags ; /* Flags */ size_t ss_size ; /* Number of bytes in stack */ } stack_t ; \u200b\u2003 \u2003\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u8fd9\u4e2a\u4fe1\u53f7\u5907\u9009\u6808\u7684\u7528\u9014\u8fd8\u662f\u6bd4\u8f83\u6709\u9650\u7684\uff0c\u53ea\u8981\u91cd\u5ea6\u4f9d\u8d56\u4fe1\u53f7\u5904\u7406\u51fd\u6570\uff0c\u5bf9\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u7684\u6267\u884c\u6210\u529f\u4e0e\u5426\u6bd4\u8f83\u654f\u611f\u7684\u7a0b\u5e8f\u624d\u4f1a\u8003\u8651\u4f7f\u7528\u5907\u9009\u6808\uff0c\u6bd4\u5982\u8bf4 google \u7684 breakpad \uff0c\u91cd\u5ea6\u4f9d\u8d56\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u7684\uff0c\u5b83\u901a\u8fc7\u6ce8\u518c\u65b0\u53f7\u5904\u7406\u51fd\u6570\u7684\u65b9\u5f0f\u5c06\u8981\u7a0b\u5e8f\u7684 coredump \u884c\u4e3a\u6355\u83b7\uff0c\u7136\u540e\u4ea7\u751f minidump \uff0c\u4e3a\u4e86\u4fdd\u8bc1\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u6210\u529f\u88ab\u6267\u884c\uff0c breakpad \u5c31\u4f7f\u7528\u4e86\u4fe1\u53f7\u5907\u9009\u6808\u7684\u65b9\u5f0f\u6765\u6267\u884c\u3002\u4e0b\u9762\u901a\u8fc7\u6a21\u62df\u5806\u6808\u6ea2\u51fa\uff0c\u7136\u540e\u901a\u8fc7\u5907\u9009\u6808\u7684\u65b9\u5f0f\u987a\u5229\u6267\u884c\u4fe1\u53f7\u5904\u7406\u51fd\u6570\uff0c\u4ee3\u7801\u5982\u4e0b: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #include <signal.h> #include <unistd.h> void handler ( int sig ) { write ( 2 , \"stack overflow \\n \" , 15 ); _exit ( 1 ); } unsigned infinite_recursion ( unsigned x ) { return infinite_recursion ( x ) + 1 ; } int main () { static char stack [ SIGSTKSZ ]; stack_t ss = { . ss_size = SIGSTKSZ , . ss_sp = stack , }; struct sigaction sa = { . sa_handler = handler , . sa_flags = SA_ONSTACK }; sigaltstack ( & ss , 0 ); sigfillset ( & sa . sa_mask ); sigaction ( SIGSEGV , & sa , 0 ); infinite_recursion ( 0 ); }","title":"\u4fe1\u53f7\u5907\u9009\u6808\u662f\u4ec0\u4e48\u3001\u5982\u4f55\u4f7f\u7528?"},{"location":"%E5%8D%9A%E5%AE%A2/doc/linux/Linux%E4%BF%A1%E5%8F%B7%E4%B8%93%E9%A2%98FAQ/#_14","text":"\u200b\u2003 \u2003\u4f20\u7edf\u7684\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u53ea\u4f1a\u4f20\u9012\u4e00\u4e2a\u4fe1\u53f7\u503c\uff0c\u4e5f\u4e0d\u80fd\u81ea\u5b9a\u4e49\u4f20\u9012\u53c2\u6570\uff0c\u901a\u8fc7\u8bbe\u7f6e sigaction \u7684 sa_flags \u4e3a SA_SIGINFO \u5c31\u53ef\u4ee5\u83b7\u53d6\u5230\u4fe1\u53f7\u7684\u4e00\u4e9b\u9644\u52a0\u4fe1\u606f\uff0c\u8bbe\u7f6e\u4e86 SA_SIGINFO \u540e\uff0c\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u7684\u539f\u578b\u5c31\u53d8\u6210\u4e86\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 void ( * sa_sigaction )( int , siginfo_t * , void * ); siginfo_t { int si_signo ; /* Signal number */ int si_errno ; /* An errno value */ int si_code ; /* Signal code */ int si_trapno ; /* Trap number that caused hardware-generated signal (unused on most architectures) */ pid_t si_pid ; /* Sending process ID */ uid_t si_uid ; /* Real user ID of sending process */ int si_status ; /* Exit value or signal */ clock_t si_utime ; /* User time consumed */ clock_t si_stime ; /* System time consumed */ sigval_t si_value ; /* Signal value */ int si_int ; /* POSIX.1b signal */ void * si_ptr ; /* POSIX.1b signal */ int si_overrun ; /* Timer overrun count; POSIX.1b timers */ int si_timerid ; /* Timer ID; POSIX.1b timers */ void * si_addr ; /* Memory location which caused fault */ long si_band ; /* Band event (was int in glibc 2.3.2 and earlier) */ int si_fd ; /* File descriptor */ short si_addr_lsb ; /* Least significant bit of address (since Linux 2.6.32) */ } \u200b\u2003 \u2003\u4f7f\u7528\u4e86\u65b0\u7684\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u540e\uff0c\u5e26\u6765\u4e86\u51e0\u70b9\u53d8\u5316\uff0c\u7b2c\u4e00\u4e2a\u5c31\u662f\u53ef\u4ee5\u4f20\u9012\u4e00\u4e2a siginfo_t \u7684\u7ed3\u6784\uff0c\u8be5\u7ed3\u6784\u53ef\u4ee5\u643a\u5e26\u66f4\u591a\u7684\u4fe1\u606f\uff0c\u7b2c\u4e8c\u4e2a\u662f\u4e00\u4e2a void \u53c2\u6570\uff0c\u662f\u4e00\u4e2a\u6307\u5411 ucontext_t \u7c7b\u578b\u7684\u7ed3\u6784\uff0c\u8be5\u7ed3\u6784\u63d0\u4f9b\u4e86\u6240\u8c13\u7684\u4e0a\u4e0b\u6587\u4fe1\u606f\uff0c\u7528\u6765\u63cf\u8ff0\u8c03\u7528\u4fe1\u53f7\u5904\u7406\u5668\u51fd\u6570\u524d\u7684\u8fdb\u7a0b\u4e0a\u4e0b\u6587(\u53ef\u4ee5\u7528\u6765\u5b9e\u73b0\u534f\u7a0b\uff0c\u76ee\u524d\u5728\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u4e2d\u6ca1\u6709\u4f7f\u7528\uff0c\u5bf9\u5e94\u7684\u8bbe\u7f6e\u548c\u83b7\u53d6\u8fdb\u7a0b\u4e0a\u4e0b\u6587\u7684\u51fd\u6570 getcontext \u548c setcontext *\u56e0\u4e3a\u53ef\u79fb\u690d\u6027\u95ee\u9898\u5df2\u7ecf\u4ecePOSIX\u4e2d\u5e9f\u5f03)","title":"\u5982\u4f55\u901a\u8fc7\u4fe1\u53f7\u4f20\u9012\u66f4\u591a\u7684\u4fe1\u606f?"},{"location":"%E5%8D%9A%E5%AE%A2/doc/linux/Linux%E4%BF%A1%E5%8F%B7%E4%B8%93%E9%A2%98FAQ/#_15","text":"\u200b\u2003 \u2003\u4e00\u4e9b\u4fe1\u53f7\u7684\u9ed8\u8ba4\u5904\u7406\u65b9\u5f0f\u5c31\u662f\u8ba9\u8fdb\u7a0b\u4ea7\u751f coredump \u6587\u4ef6\uff0c\u8be5\u6587\u4ef6\u5c31\u662f\u8fdb\u7a0b\u8fd0\u884c\u65f6\u7684\u5185\u5b58\u955c\u50cf\uff0c\u9664\u4e86\u53ef\u4ee5\u901a\u8fc7\u4fe1\u53f7\u6765\u4ea7\u751f\u5916\uff0c\u8fd8\u6709\u901a\u8fc7\u6267\u884c gcore \u547d\u4ee4\u4ea7\u751f\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4f1a\u5c06\u5168\u90e8\u7684\u5185\u5b58\u6620\u5c04\u533a\u57df\u90fd\u5199\u5165\u5230\u6838\u5fc3\u5b58\u50a8\u6587\u4ef6\u4e2d\uff0c\u901a\u8fc7 /proc/PID/coredump_filter \u53ef\u4ee5\u63a7\u5236\u5bf9\u54ea\u4e9b\u5185\u5b58\u6620\u5c04\u533a\u57df\u5199\u5165\uff0c\u66f4\u8be6\u7ec6\u7684\u5185\u5bb9\u53ef\u4ee5 man core \u6765\u67e5\u8be2\uff0c\u6700\u540e\u5c31\u662f\u6838\u5fc3\u5b58\u50a8\u6587\u4ef6\u4ea7\u751f\u7684\u6761\u4ef6\uff0c\u4e0b\u9762\u5217\u51fa\u4e86\u4e0d\u4f1a\u4ea7\u751f\u6838\u5fc3\u8f6c\u50a8\u6587\u4ef6\u7684\u60c5\u51b5\uff1a \u8fdb\u7a0b\u5bf9\u6838\u5fc3\u8f6c\u50a8\u6587\u4ef6\u6ca1\u6709\u5199\u6743\u9650 \u5b58\u5728\u4e00\u4e2a\u540c\u540d\u3001\u53ef\u5199\u7684\u666e\u901a\u6587\u4ef6\uff0c\u4f46\u662f\u6307\u5411\u8be5\u6587\u4ef6\u7684(\u786c)\u94fe\u63a5\u6570\u8d85\u8fc7\u4e00\u4e2a(\u4e5f\u5c31\u662f\u65e0\u6cd5\u5220\u9664) \u5c06\u8981\u521b\u5efa\u7684\u6838\u5fc3\u8f6c\u50a8\u6587\u4ef6\u6240\u5728\u76ee\u5f55\u5e76\u4e0d\u5b58\u5728 \u8fdb\u7a0b\u7684\u6838\u5fc3\u5b58\u50a8\u6587\u4ef6\u5927\u5c0f\u9650\u5236\u4e3a0 \u5bf9\u8fdb\u7a0b\u6b63\u5728\u6267\u884c\u7684\u4e8c\u8fdb\u5236\u53ef\u6267\u884c\u6587\u4ef6\u6ca1\u6709\u8bfb\u6743\u9650 \u78c1\u76d8\u7a7a\u95f4\u6ee1\u4e86\u3001inode\u8d44\u6e90\u8017\u5c3d\u4e86\u3001\u8fbe\u5230\u78c1\u76d8\u914d\u989d\u9650\u5236\u3001\u5f53\u524d\u76ee\u5f55\u662f\u53ea\u8bfb\u6302\u8f7d\u7684\u6587\u4ef6\u7cfb\u7edf Set-user-ID \u7a0b\u5e8f\u5728\u7531\u975e\u6587\u4ef6\u5c5e\u4e3b(\u6216\u5c5e\u7ec4)\u6267\u884c\u65f6\uff0c\u4e0d\u4f1a\u4ea7\u751f\u6838\u5fc3\u8f6c\u50a8\u6587\u4ef6(\u901a\u8fc7 prctl \u548c PR_SET_DUMPABLE \u53ef\u4ee5\u63a7\u5236\u8fd9\u4e2a\u884c\u4e3a\uff0c\u8fd8\u53ef\u4ee5\u901a\u8fc7 /proc/sys/fs/suid_dumpable \u8fdb\u884c\u7cfb\u7edf\u7ea7\u7684\u63a7\u5236) \u4ea7\u751f\u7684core\u6587\u4ef6\u5176\u540d\u79f0\u8fd8\u53ef\u4ee5\u901a\u8fc7 /proc/sys/kernel/core_pattern \u8fdb\u884c\u63a7\u5236\u3002","title":"\u4fe1\u53f7\u548c\u6838\u5fc3\u8f6c\u50a8\u6587\u4ef6\u7684\u5173\u7cfb\uff1f"},{"location":"%E5%8D%9A%E5%AE%A2/doc/linux/Linux%E4%BF%A1%E5%8F%B7%E4%B8%93%E9%A2%98FAQ/#sigkillsigstop","text":"\u200b\u2003 \u2003 SIGKILL \u53ef\u4ee5\u7528\u6765\u7ec8\u6b62\u4e00\u4e2a\u8fdb\u7a0b\uff0c SIGSTOP \u5219\u662f\u53ef\u4ee5\u505c\u6b62\u4e00\u4e2a\u8fdb\u7a0b\uff0c\u4e8c\u8005\u7684\u9ed8\u8ba4\u884c\u4e3a\u90fd\u662f\u65e0\u6cd5\u88ab\u6539\u53d8\u7684\uff0c\u4e00\u4e2a\u505c\u6b62\u7684\u8fdb\u7a0b\u901a\u8fc7\u53d1\u9001 SIGCONT \u53ef\u4ee5\u4f7f\u5f97\u8be5\u4fe1\u53f7\u6062\u590d\u6267\u884c\uff0c\u8fd9\u4e24\u4e2a\u4fe1\u53f7\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u90fd\u53ef\u4ee5\u7acb\u5373\u7ec8\u6b62\u4e00\u4e2a\u8fdb\u7a0b\u6216\u8005\u662f\u505c\u6b62\u4e00\u4e2a\u8fdb\u7a0b\uff0c\u4f46\u662f\u6709\u4e00\u79cd\u60c5\u51b5\u9664\u5916\uff0c\u5c31\u662f\u5185\u6838\u5904\u4e8e TASK_UNINTERRUPTIBLE \u72b6\u6001\u65f6\uff0c\u4e5f\u5c31\u662f\u7761\u7720\u72b6\u6001\uff0cLinux\u4e0a\u6709\u4e24\u7c7b\u7761\u7720\u72b6\u6001\uff0c\u4e00\u7c7b\u5c31\u662f TASK_INTERRUPTIBLE \uff0c\u8fd9\u4e2a\u72b6\u6001\u4e0b\u8fdb\u7a0b\u65f6\u53ef\u4ee5\u88ab\u4e2d\u65ad\u7684\uff0c\u5904\u4e8e\u8fd9\u4e2a\u72b6\u6001\u4e0b\u7684\u8fdb\u7a0b\u4e00\u822c\u65f6\u7b49\u5f85\u7ec8\u7aef\u8f93\u5165\u3001\u7b49\u5f85\u6570\u636e\u5199\u5165\u5f53\u524d\u7684\u7a7a\u7ba1\u9053\u7b49\uff0c\u901a\u8fc7PS\u67e5\u8be2\u7684\u65f6\u5019\uff0c\u663e\u793a\u4e3aS\u3002\u53e6\u5916\u4e00\u79cd\u5c31\u662f\u4e0a\u6587\u8bf4\u9053\u7684 TASK_UNINTERRUPTIBLE \uff0c\u4e0d\u53ef\u4e2d\u65ad\u7684\u7761\u7720\uff0c\u8fd9\u7c7b\u8fdb\u7a0b\u4e00\u822c\u90fd\u662f\u5728\u7b49\u5f85\u67d0\u4e9b\u7279\u5b9a\u7c7b\u578b\u7684\u4e8b\u4ef6\uff0c\u6bd4\u5982\u78c1\u76d8IO\u7684\u5b8c\u6210\uff0c\u5904\u4e8e\u8fd9\u7c7b\u72b6\u6001\u7684\u8fdb\u7a0b\u65f6\u65e0\u6cd5\u88ab\u4fe1\u53f7\u7ec8\u6b62\u7684\uff0c\u901a\u8fc7PS\u67e5\u8be2\u7684\u65f6\u5019\uff0c\u663e\u793a\u4e3aD\uff0c\u6781\u7aef\u60c5\u51b5\u4e0b\u8fd9\u7c7b\u8fdb\u7a0b\u53ef\u80fd\u4f1a\u56e0\u4e3a\u78c1\u76d8\u6545\u969c\u7b49\u539f\u56e0\uff0c\u6c38\u8fdc\u65e0\u6cd5\u88ab\u7ec8\u6b62\uff0c\u8fd9\u4e2a\u65f6\u5019\u5c31\u53ea\u80fd\u901a\u8fc7\u91cd\u542f\u673a\u5668\u6765\u6d88\u706d\u8fd9\u7c7b\u8fdb\u7a0b\u4e86\uff0c\u5728 linux 2.6.25 \u5f00\u59cbLinux\u52a0\u5165\u4e86\u7b2c\u4e09\u79cd\u72b6\u6001 TASK_KILLABLE \uff0c\u8fd9\u4e2a\u72b6\u6001\u548c TASK_UNINTERRUPTIBLE \u7c7b\u4f3c\uff0c\u4f46\u662f\u5374\u53ef\u4ee5\u88ab\u81f4\u547d\u4fe1\u53f7\u5524\u9192\u3002\u901a\u8fc7\u4f7f\u7528\u8be5\u72b6\u6001\u53ef\u4ee5\u907f\u514d\u56e0\u4e3a\u8fdb\u7a0b\u6302\u8d77\u5904\u4e8e TASK_UNINTERRUPTIBLE \u72b6\u6001\u800c\u91cd\u542f\u7cfb\u7edf\u7684\u60c5\u51b5\u3002","title":"SIGKILL\u548cSIGSTOP\u4fe1\u53f7\u548c\u5176\u4ed6\u4fe1\u53f7\u4e0d\u540c\u7684\u5730\u65b9?"},{"location":"%E5%8D%9A%E5%AE%A2/doc/linux/Linux%E4%BF%A1%E5%8F%B7%E4%B8%93%E9%A2%98FAQ/#_16","text":"\u200b\u2003 \u2003\u5f53\u75db\u8fc7 sigprocmask \u963b\u585e\u4fe1\u53f7\u7684\u65f6\u5019\uff0c\u5728\u6b64\u671f\u95f4\u4ea7\u751f\u7684\u4fe1\u53f7\u90fd\u4f1a\u53d8\u6210\u5f85\u51b3\u4fe1\u53f7\uff0c\u4e00\u65e6\u963b\u585e\u4fe1\u53f7\u88ab\u6062\u590d\uff0c\u90a3\u4e48\u6240\u6709\u7684\u5f85\u51b3\u4fe1\u53f7\u90fd\u4f1a\u88ab\u6295\u9012\uff0c\u800c\u6295\u9012\u7684\u987a\u5e8f\u5219\u53d6\u51b3\u4e8e\u5177\u4f53\u7684\u5b9e\u73b0\u3002\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\u6f14\u793a\u4e86\u4fe1\u53f7\u7684\u6295\u9012\u987a\u5e8f\u3002 TODO 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 #include <signal.h> #include <unistd.h> #include <stdio.h> #include <stdlib.h> void handler ( int sig ) { printf ( \"signal: %d \\n \" , sig ); } int main () { sigset_t set ; sigemptyset ( & set ); sigaddset ( & set , 1 ); sigaddset ( & set , 2 ); sigaddset ( & set , 3 ); sigaddset ( & set , 4 ); struct sigaction sa = { 0 }; sa . sa_handler = handler ; sigaction ( 1 , & sa , NULL ); sigaction ( 2 , & sa , NULL ); sigaction ( 3 , & sa , NULL ); sigaction ( 4 , & sa , NULL ); sigprocmask ( SIG_BLOCK , & set , NULL ); sleep ( 60 ); printf ( \"remove block signal \\n \" ); sigprocmask ( SIG_UNBLOCK , & set , NULL ); sleep ( 10 ); return 0 ; } \u5f00\u542f\u53e6\u5916\u4e00\u4e2a\u7ec8\u7aef\uff0c\u4f7f\u7528 kill\u5411\u8be5\u8fdb\u7a0b\u53d1\u9001\u591a\u4e2a\u4fe1\u53f7 \uff0c","title":"\u4fe1\u53f7\u7684\u4f20\u9012\u987a\u5e8f\u662f\u600e\u4e48\u6837\u7684?"},{"location":"%E5%8D%9A%E5%AE%A2/doc/linux/Linux%E4%BF%A1%E5%8F%B7%E4%B8%93%E9%A2%98FAQ/#_17","text":"\u200b\u2003 \u2003\u5b9e\u65f6\u4fe1\u53f7\u662f\u4e3a\u4e86\u5f25\u8865\u6807\u51c6\u4fe1\u53f7\u7684\u6295\u9012\u987a\u5e8f\u672a\u5b9a\u4e49\u3001\u4fe1\u53f7\u4e0d\u6392\u961f\u4f1a\u4e22\u5931\u7b49\u95ee\u9898\u7684\uff0c\u76f8\u6bd4\u4e8e\u6807\u51c6\u4fe1\u53f7\uff0c\u5b9e\u65f6\u4fe1\u53f7\u5177\u5907\u5982\u4e0b\u4f18\u52bf\uff1a \u5b9e\u65f6\u4fe1\u53f7\u7684\u4fe1\u53f7\u8303\u56f4\u6709\u6240\u6269\u5927\uff0c\u53ef\u4f9b\u5e94\u7528\u7a0b\u5e8f\u81ea\u5b9a\u4e49\u7684\u76ee\u7684\uff0c\u800c\u6807\u51c6\u4fe1\u53f7\u4e2d\u7528\u4e8e\u81ea\u5b9a\u4e49\u7684\u53ea\u6709 SIGUSER1 \u548c SIGUSER2 \u3002 \u5b9e\u65f6\u4fe1\u53f7\u91c7\u53d6\u7684\u662f\u961f\u5217\u5316\u7ba1\u7406\uff0c\u5982\u679c\u67d0\u4e00\u4e2a\u4fe1\u53f7\u591a\u6b21\u53d1\u9001\u7ed9\u4e00\u4e2a\u8fdb\u7a0b\uff0c\u90a3\u4e48\u8be5\u8fdb\u7a0b\u4f1a\u591a\u6b21\u6536\u5230\u8fd9\u4e2a\u4fe1\u53f7\uff0c\u800c\u6807\u51c6\u4fe1\u53f7\u624d\u4f1a\u4e22\u5931\uff0c\u53ea\u4f1a\u63a5\u6536\u5230\u4e00\u6b21\u4fe1\u53f7(\u4e0d\u8fc7\u961f\u5217\u662f\u6709\u5927\u5c0f\u9650\u5236\u7684)\u3002 \u5f53\u53d1\u9001\u4e00\u4e2a\u5b9e\u65f6\u4fe1\u53f7\u65f6\uff0c\u53ef\u4e3a\u4fe1\u53f7\u6307\u5b9a\u4f34\u968f\u6570\u636e\uff0c\u4f9b\u63a5\u6536\u8fdb\u7a0b\u7684\u4fe1\u53f7\u5904\u7406\u5668\u4f7f\u7528(\u6807\u51c6\u4fe1\u53f7\u76ee\u524d\u4e5f\u662f\u53ef\u4ee5\u7684)\u3002 \u4e0d\u540c\u7684\u5b9e\u65f6\u4fe1\u53f7\u7684\u4f20\u9012\u987a\u5e8f\u662f\u6709\u4fdd\u969c\u7684\uff0c\u4fe1\u53f7\u7684\u7f16\u53f7\u8d8a\u5c0f\u4f18\u5148\u7ea7\u8d8a\u9ad8\uff0c\u800c\u6807\u51c6\u4fe1\u53f7\u8fd9\u4e2a\u884c\u4e3a\u662f\u672a\u5b9a\u4e49\u7684\uff0c\u53d6\u51b3\u4e8e\u5177\u4f53\u7684\u5b9e\u73b0\u3002 \u5bf9\u4e8e\u6392\u961f\u7684\u4fe1\u53f7\uff0c\u662f\u6709\u4e00\u4e2a\u4e0a\u9650\u7684\uff0c\u8fd9\u4e2a\u4e0a\u9650\u503c\u53ef\u4ee5\u901a\u8fc7\u67e5\u770bRLIMIT_SIGPENDING\u8d44\u6e90\u9650\u5236\u7684\u503c\uff0c\u81f3\u4e8e\u7b49\u5f85\u67d0\u4e00\u4e2a\u8fdb\u7a0b\u7684\u5b9e\u65f6\u4fe1\u53f7\u6570\u91cf\uff0c\u53ef\u4ee5\u4eceLinux\u4e13\u6709\u6587\u4ef6\u5939/proc/PID/status\u4e2d\u7684SigQ\u5b57\u6bb5\u8bfb\u53d6 \u901asigqueue\u53ef\u4ee5\u7ed9\u5b9e\u65f6\u4fe1\u53f7\u53d1\u9001\u4f34\u968f\u6570\u636e 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 // \u53d1\u9001\u7aef #include <signal.h> int main ( int argc , char * argv []) { union sigval sa ; sa . sival_int = std :: stoi ( argv [ 2 ]); sigqueue ( std :: stoi ( argv [ 1 ]), 34 , sa ); return 0 ; } // \u6d88\u8d39\u7aef #include <signal.h> #include <iostream> #include <unistd.h> void handler_real_signal ( int signum , siginfo_t * v , void * ucontext ) { std :: cout << v -> si_value . sival_int << std :: endl ; } int main () { struct sigaction sa ; sa . sa_sigaction = handler_real_signal ; sigemptyset ( & sa . sa_mask ); sa . sa_flags = SA_SIGINFO ; sigaction ( 34 , & sa , nullptr ); sleep ( 60 ); return 0 ; } \u200b\u2003 \u2003\u5b9e\u65f6\u4fe1\u53f7\u7684\u7f16\u53f7\u662f\u4ece32~63\uff0c RTSIG_MAX \u5e38\u91cf\u4ee3\u8868\u4e86\u5b9e\u65f6\u4fe1\u53f7\u7684\u6570\u91cf\uff0c SIGRTMIN \u548c SIGRTMAX \u5219\u8868\u793a\u7684\u662f\u5b9e\u65f6\u4fe1\u53f7\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u3002","title":"\u5b9e\u65f6\u4fe1\u53f7\u548c\u6807\u51c6\u4fe1\u53f7\u7684\u533a\u522b?"},{"location":"%E5%8D%9A%E5%AE%A2/doc/linux/Linux%E4%BF%A1%E5%8F%B7%E4%B8%93%E9%A2%98FAQ/#_18","text":"\u200b\u2003 \u2003\u6211\u4eec\u90fd\u77e5\u9053\u4fe1\u53f7\u662f\u5f02\u6b65\u5230\u6765\u7684\uff0c\u7a0b\u5e8f\u5728\u8fd0\u884c\u7684\u8fc7\u7a0b\u4e2d\u65f6\u523b\u90fd\u6709\u53ef\u80fd\u88ab\u4fe1\u53f7\u6253\u65ad\uff0c\u5bf9\u4e8e\u4e00\u4e9b\u5728\u8fd0\u884c\u5173\u952e\u4efb\u52a1\u7684\u7a0b\u5e8f\u6765\u8bf4\u8fd9\u53ef\u80fd\u662f\u4e00\u4e2a\u5669\u68a6\uff0c\u901a\u8fc7 sigprocmask \u6216\u8005\u662f sigaction \u7684 sa_mask \u53ef\u4ee5\u5c4f\u853d\u4fe1\u53f7\u3002\u7b49\u5173\u952e\u4efb\u52a1\u6267\u884c\u5b8c\u6210\u540e\u53ef\u80fd\u9700\u8981\u7b49\u5f85\u4fe1\u53f7\u5230\u6765\uff0c\u7136\u540e\u5f00\u59cb\u5904\u7406\u4fe1\u53f7\uff0c\u5bf9\u4e8e\u8fd9\u6837\u7684\u573a\u666f\u53ef\u4ee5\u901a\u8fc7 sigprocmask \u89e3\u9664\u5c4f\u853d\u4fe1\u53f7\u540e\uff0c\u63a5\u7740\u8c03\u7528 pause \u6765\u7b49\u5f85\u4fe1\u53f7\u5230\u6765\u3002\u4ee3\u7801\u5982\u4e0b: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 #include <signal.h> #include <stdio.h> #include <stdlib.h> #include <unistd.h> void handler ( int signum ) { printf ( \"Hello World \\n \" ); } int main () { sigset_t prevMask , intMask ; struct sigaction sa ; sigemptyset ( & intMask ); sigaddset ( & intMask , SIGINT ); sigemptyset ( & sa . sa_mask ); sa . sa_flags = 0 ; sa . sa_handler = handler ; if ( sigaction ( SIGINT , & sa , nullptr ) == -1 ) { perror ( \"sigaction:\" ); exit ( EXIT_FAILURE ); } if ( sigprocmask ( SIG_BLOCK , & intMask , & prevMask ) == -1 ) { perror ( \"sigprocmask:\" ); exit ( EXIT_FAILURE ); } // deal with critical section if ( sigprocmask ( SIG_SETMASK , & prevMask , nullptr ) == -1 ) { perror ( \"sigprocmask:\" ); exit ( EXIT_FAILURE ); } // \u4fe1\u53f7\u5982\u679c\u5728\u6b64\u523b\u5230\u6765\uff0c\u8fd9\u5c31\u4f1a\u5bfc\u81f4bug pause (); return 0 ; } \u200b\u2003 \u2003\u5f88\u663e\u7136 sigprocmask \u89e3\u9664\u4fe1\u53f7\u5c4f\u853d\u548c pause \u7b49\u5f85\u4fe1\u53f7\u8fd9\u4e24\u6b65\u5e76\u4e0d\u662f\u539f\u5b50\u7684\uff0c\u6240\u4ee5\u53ef\u80fd\u4f1a\u5bfc\u81f4\u6f5c\u5728\u7684 bug \uff0c\u4fe1\u53f7\u53ef\u80fd\u5728 pause \u4e4b\u524d\u8fbe\u5230\uff0c\u5bfc\u81f4 pause \u4e00\u81f4\u5728\u7b49\u5f85\u4fe1\u53f7\u3002\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898Linux\u63d0\u4f9b\u4e86 sigsuspend \uff0c\u5c06\u89e3\u9664\u4fe1\u53f7\u5c4f\u853d\u548c\u7b49\u5f85\u4fe1\u53f7\u53d8\u6210\u4e86\u539f\u5b50\u7684\uff0c\u4ee3\u7801\u5982\u4e0b: 1 2 3 4 5 6 7 8 9 10 if ( sigprocmask ( SIG_SETMASK , & prevMask , nullptr ) == -1 ) { perror ( \"sigprocmask:\" ); exit ( EXIT_FAILURE ); } // \u4fe1\u53f7\u5982\u679c\u5728\u6b64\u523b\u5230\u6765\uff0c\u8fd9\u5c31\u4f1a\u5bfc\u81f4bug pause (); return 0 ; \u66ff\u6362\u6210\u5982\u4e0b : sigsuspend ( & prevMask ); \u200b\u2003 \u2003\u5230\u6b64\u4e3a\u6b62\u6211\u4ecb\u7ecd\u4e86\u4e24\u79cd\u7b49\u5f85\u4fe1\u53f7\u7684\u65b9\u5f0f\uff0c\u4e00\u79cd\u5c31\u662f pause \uff0c\u53e6\u5916\u4e00\u79cd\u5c31\u662f sigsuspend \uff0c\u4f46\u662f\u8fd9\u4e24\u79cd\u7b49\u5f85\u4fe1\u53f7\u7684\u65b9\u5f0f\u90fd\u5f88\u539f\u59cb\uff0c\u53ea\u662f\u77e5\u9053\u6709\u4fe1\u53f7\u5230\u6765\u4e86\uff0c\u5177\u4f53\u662f\u4ec0\u4e48\u4fe1\u53f7\u662f\u4e0d\u77e5\u9053\u7684\uff0c\u8fd8\u9700\u8981\u4f9d\u9760\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u53bb\u5904\u7406\u53d1\u751f\u7684\u4fe1\u53f7\u3002\u5982\u679c\u628a\u4fe1\u53f7\u6bd4\u505a\u4e00\u79cd\u6d88\u606f\u7684\u8bdd\uff0c\u6211\u5e0c\u671b\u53ef\u4ee5\u540c\u6b65\u7684\u7b49\u5f85\u63a5\u6536\u8fd9\u4e2a\u6d88\u606f\uff0c\u7136\u540e\u540c\u6b65\u7684\u53bb\u5904\u7406\u8fd9\u4e2a\u6d88\u606f\uff0c\u800c\u4e0d\u662f\u9760\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u6253\u65ad\u5f53\u524d\u6267\u884c\u6d41\u5f02\u6b65\u7684\u5904\u7406\u3002Linux\u63d0\u4f9b\u4e86 sigwaitinfo \u76f8\u5e94\u7684\u8fd8\u6709\u4e00\u4e2a sigtimedwait \uff0c\u524d\u8005\u662f\u6c38\u4e45\u7684\u7b49\u5f85\u4fe1\u53f7\uff0c\u540e\u8005\u662f\u5e26\u6709\u8d85\u65f6\u529f\u80fd\u7684\u7b49\u5f85\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #include <signal.h> #include <stdio.h> #include <stdlib.h> int main () { sigset_t set ; sigemptyset ( & set ); sigaddset ( & set , SIGINT ); sigprocmask ( SIG_BLOCK , & set , nullptr ); siginfo_t sv ; int signum = sigwaitinfo ( & set , & sv ); printf ( \"signal number:%d pid: %d, uid: %d \\n \" , signum , sv . si_pid , sv . si_uid ); return 0 ; } \u200b\u2003 \u2003\u901a\u8fc7 sigwaitinfo \u6765\u7b49\u5f85\u4fe1\u53f7\u5df2\u7ecf\u57fa\u672c\u7b97\u6ee1\u8db3\u4e86\u9700\u6c42\uff0c\u4f46\u662f\u5bf9\u4e8e\u4e00\u4e2a\u7f51\u7edc\u7a0b\u5e8f\u6765\u8bf4\uff0c\u4fe1\u53f7\u3001\u7f51\u7edcIO\u3001\u5b9a\u65f6\u5668\u7b49\u90fd\u5c5e\u4e8e\u4e8b\u4ef6\uff0c\u7406\u60f3\u60c5\u51b5\u4e0b\u5e94\u8be5\u5c06\u8fd9\u4e9b\u4e8b\u4ef6\u7edf\u4e00\u6765\u5904\u7406\uff0c\u4f7f\u7528fd\u6765\u7ba1\u7406\u8fd9\u4e9b\u4e8b\u4ef6\u8fd9\u4e2a\u5728Linux\u4e0b\u7b97\u662f\u4e00\u79cd\u5171\u8bc6\u4e86\uff0c\u7f51\u7edcIO\u81ea\u7136\u4e0d\u7528\u8bf4\uff0c\u5b9a\u65f6\u5668\u53ef\u4ee5\u901a\u8fc7 timerfd_create \u6765\u521b\u5efa\u4e00\u4e2afd\u7136\u540e\u548c\u4e00\u4e2a\u5b9a\u65f6\u5668\u5173\u8054\u5373\u53ef\u3002\u800c\u4fe1\u53f7\u7684\u5316\u65e9\u671f\u7684\u505a\u6cd5\u662f\u521b\u5efa\u4e00\u4e2a\u7ba1\u9053fd\uff0c\u7136\u540e\u5728\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u4e2d\u5f80\u8fd9\u4e2afd\u5199\u5165\u4fe1\u53f7\u503c\uff0c\u8fd9\u6837\u6240\u6709\u7684\u4e8b\u4ef6\u5c31\u90fd\u53ef\u4ee5\u4f7f\u7528fd\u6765\u7edf\u4e00\u7ba1\u7406\u4e86\uff0c\u5728Linux 2.6.27\u7684\u65f6\u5019\u63d0\u4f9b\u4e86\u4e00\u4e2a\u539f\u751f\u7684\u89e3\u51b3\u65b9\u6848\u5c31\u662f signalfd \uff0c\u4e0b\u9762\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u793a\u4f8b\u4ee3\u7801: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 #include <sys/signalfd.h> #include <signal.h> #include <unistd.h> #include <stdlib.h> #include <stdio.h> #define handle_error(msg) \\ do { perror(msg); exit(EXIT_FAILURE); } while (0) int main ( int argc , char * argv []) { sigset_t mask ; int sfd ; struct signalfd_siginfo fdsi ; ssize_t s ; sigemptyset ( & mask ); sigaddset ( & mask , SIGINT ); sigaddset ( & mask , SIGQUIT ); /* Block signals so that they aren't handled according to their default dispositions */ if ( sigprocmask ( SIG_BLOCK , & mask , NULL ) == -1 ) handle_error ( \"sigprocmask\" ); sfd = signalfd ( -1 , & mask , 0 ); if ( sfd == -1 ) handle_error ( \"signalfd\" ); for (;;) { s = read ( sfd , & fdsi , sizeof ( struct signalfd_siginfo )); if ( s != sizeof ( struct signalfd_siginfo )) handle_error ( \"read\" ); if ( fdsi . ssi_signo == SIGINT ) { printf ( \"Got SIGINT \\n \" ); } else if ( fdsi . ssi_signo == SIGQUIT ) { printf ( \"Got SIGQUIT \\n \" ); exit ( EXIT_SUCCESS ); } else { printf ( \"Read unexpected signal \\n \" ); } } }","title":"\u5982\u4f55\u4e3b\u52a8\u7b49\u5f85\u4fe1\u53f7\u5230\u6765?"},{"location":"%E5%8D%9A%E5%AE%A2/doc/linux/%E5%85%B3%E4%BA%8E%E6%96%87%E4%BB%B6%E5%86%99%E5%85%A5%E7%9A%84%E5%8E%9F%E5%AD%90%E6%80%A7%E8%AE%A8%E8%AE%BA/","text":"\u200b\u2003 \u2003\u6587\u4ef6\u7684\u5199\u5165\u662f\u5426\u662f\u539f\u5b50\u7684\uff1f\u591a\u4e2a\u7ebf\u7a0b\u5199\u5165\u540c\u4e00\u4e2a\u6587\u4ef6\u662f\u5426\u4f1a\u5199\u9519\u4e71?\u591a\u4e2a\u8fdb\u7a0b\u5199\u5165\u540c\u4e00\u4e2a\u6587\u4ef6\u662f\u5426\u4f1a\u5199\u9519\u4e71\uff1f\u60f3\u5fc5\u8fd9\u4e9b\u95ee\u9898\u591a\u591a\u5c11\u5c11\u4f1a\u5bf9\u6211\u4eec\u4ea7\u751f\u4e00\u5b9a\u7684\u56f0\u6270\uff0c\u5373\u4f7f\u77e5\u9053\u7ed3\u679c\uff0c\u5f88\u591a\u65f6\u5019\u4e5f\u5f88\u96be\u5c06\u8fd9\u5176\u4e2d\u7684\u539f\u7406\u6e05\u6670\u7684\u8868\u8fbe\u7ed9\u63d0\u95ee\u8005\uff0c\u4faf\u6377\u66fe\u8bf4\u8fc7\uff0c \u6e90\u7801\u9762\u524d,\u4e86\u65e0\u79d8\u5bc6 \uff0c\u90a3\u4e48\u672c\u6587\u4e5f\u5e0c\u671b\u4ece\u6e90\u4ee3\u7801\u7684\u89d2\u5ea6\u5206\u6790\u4e0a\u8ff0\u95ee\u9898\u3002\u5728\u5f00\u59cb\u4e4b\u524d\u6211\u4eec\u9700\u8981\u8865\u5145\u4e00\u4e0bLinux \u6587\u4ef6\u76f8\u5173\u7684\u4e00\u4e9b\u57fa\u7840\u539f\u7406\uff0c\u4fbf\u4e8e\u66f4\u597d\u7684\u770b\u61c2Linux\u6e90\u4ee3\u7801\u3002 \u200b\u2003 \u2003\u5b66\u8fc7Linux\u7684\u8bfb\u8005\u60f3\u5fc5\u90fd\u5e94\u8be5\u77e5\u9053\u6587\u4ef6\u7684\u6570\u636e\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\uff0c\u4e00\u4e2a\u90e8\u5206\u5c31\u662f\u6587\u4ef6\u6570\u636e\u672c\u8eab\uff0c\u53e6\u5916\u4e00\u4e2a\u90e8\u5206\u5219\u662f\u6587\u4ef6\u7684\u5143\u6570\u636e\uff0c\u4e5f\u5c31\u662finode\u3001\u6743\u9650\u3001\u6269\u5c55\u5c5e\u6027\u3001mtime\u3001ctime\u3001atime\u7b49\u7b49\uff0cinode\u5bf9\u4e8e\u4e00\u4e2a\u6587\u4ef6\u6765\u8bf4\u53ca\u5176\u7684\u91cd\u8981\uff0c\u53ef\u4ee5\u552f\u4e00\u7684\u6807\u8bc6\u4e00\u4e2a\u6587\u4ef6(\u5b9e\u9645\u5e94\u8be5\u662finode + dev\u53f7\uff0c\u552f\u4e00\u6807\u8bc6\u4e00\u4e2a\u6587\u4ef6\uff0c\u66f4\u51c6\u786e\u6765\u8bf4\u5e94\u8be5\u662f\u5728\u540c\u4e00\u4e2a\u6587\u4ef6\u7cfb\u7edf\u7684\u524d\u63d0\u4e0b\u624d\u6210\u7acb\uff0c\u4e0d\u540c\u7684\u6587\u4ef6\u7cfb\u7edfinode\u662f\u4f1a\u91cd\u590d\u7684\uff0c\u4e0d\u8fc7\u8fd9\u4e0d\u662f\u91cd\u70b9\uff0c\u59d1\u4e14\u8fd9\u91cc\u4e0d\u4e25\u8c28\u7684\u8ba4\u4e3ainode\u5c31\u662f\u7528\u6765\u552f\u4e00\u6807\u8bc6\u4e00\u4e2a\u6587\u4ef6\u7684\u5427)\uff0c\u5185\u6838\u4e2d\u5c06inode\u53f7\u548c\u6587\u4ef6\u7684\u5143\u6570\u636e\u6784\u5efa\u4e3a\u4e00\u4e2a struct inode \u5bf9\u8c61\uff0c\u8be5\u5bf9\u8c61\u7ed3\u6784\u5982\u4e0b: 1 2 3 4 5 6 7 8 9 10 11 12 13 struct inode { umode_t i_mode ; uid_t i_uid ; gid_t i_gid ; unsigned long i_ino ; atomic_t i_count ; dev_t i_rdev ; loff_t i_size ; struct timespec i_atime ; struct timespec i_mtime ; struct timespec i_ctime ; ....... // \u7701\u7565 }; \u200b\u2003 \u2003\u901a\u8fc7\u8fd9\u4e2ainode\u5bf9\u8c61\u5c31\u53ef\u4ee5\u5173\u8054\u4e00\u4e2a\u6587\u4ef6\uff0c\u7136\u540e\u5bf9\u8fd9\u4e2a\u6587\u4ef6\u8fdb\u884c\u8bfb\u5199\u64cd\u4f5c\uff0cLinux\u5185\u6838\u5bf9\u4e8e\u6587\u4ef6\u540c\u6837\u4e5f\u6709\u4e00\u4e2a struct file \u5bf9\u8c61\u6765\u8868\u793a\uff0c\u8be5\u5bf9\u8c61\u7ed3\u6784\u5982\u4e0b: 1 2 3 4 5 6 7 struct file { ..... const struct file_operations * f_op ; loff_t f_pos ; struct address_space * f_mapping ; .... // \u7701\u7565 }; \u200b\u2003 \u2003\u6709\u51e0\u4e2a\u6210\u5458\u6bd4\u8f83\u5173\u952e\uff0c\u4e00\u4e2a\u662ff_op\uff0c\u6587\u4ef6\u64cd\u4f5c\u7684\u65b9\u6cd5\u96c6\u5408\uff0c\u6587\u4ef6\u64cd\u4f5c\u4e0d\u7528\u5173\u5fc3\u5176\u5e95\u5c42\u7684\u6587\u4ef6\u7cfb\u7edf\u662f\u4ec0\u4e48\uff0c\u76f4\u63a5\u901a\u8fc7f_op\u6210\u5458\u627e\u5230\u5bf9\u5e94\u7684\u65b9\u6cd5\u5373\u53ef\u3002\u53e6\u5916\u4e00\u4e2a\u5219\u662ff_pos\uff0c\u4e5f\u5c31\u662f\u8fd9\u4e2a\u6587\u4ef6\u8bfb\u5230\u54ea\u91cc\u4e86\uff0c\u6216\u8005\u8bf4\u662f\u5199\u5230\u54ea\u91cc\u4e86\uff0c\u662f\u4e00\u4e2a\u504f\u79fb\u91cf\u3002\u4e00\u4e2a\u8fdb\u7a0b\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u7684\u65f6\u5019\u5c31\u4f1a\u5728\u5185\u6838\u4e2d\u521b\u5efa\u4e00\u4e2a struct file \u5bf9\u8c61\uff0c\u8bfb\u53d6\u6587\u4ef6\u7684\u65f6\u5019\u5219\u5206\u4e3a\u4ee5\u4e0b\u51e0\u6b65: \u901a\u8fc7fd\u627e\u5230\u5bf9\u5e94\u5bf9\u5e94\u7684 struct file \u5bf9\u8c61 \u901a\u8fc7 struct file \u5bf9\u8c61\u83b7\u53d6\u5f53\u524d\u7684offset\uff0c\u4e5f\u5c31\u662f\u8bfb\u53d6f_pos\u6210\u5458 \u901a\u8fc7f_op\u627e\u5230\u5bf9\u5e94\u7684\u64cd\u4f5c\u65b9\u6cd5\uff0c\u5e76\u4f20\u5165\u8981\u8bfb\u53d6\u7684\u504f\u79fb\u91cf\u8fdb\u884c\u6570\u636e\u7684\u8bfb\u53d6 \u8bfb\u53d6\u5b8c\u6210\u540e\uff0c\u91cd\u65b0\u8bbe\u7f6e\u65b0\u7684offset \u4e00\u6b21\u8bfb\u6587\u4ef6\u7684\u8fc7\u7a0b\u4fbf\u662f\u5982\u6b64\uff0c\u5bf9\u5e94\u5230\u4ee3\u7801\u4e5f\u662f\u975e\u5e38\u7684\u6e05\u6670\uff0c\u5982\u4e0b: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 // vfs_read -> do_sync_read ssize_t do_sync_read ( struct file * filp , char __user * buf , size_t len , loff_t * ppos ) { struct iovec iov = { . iov_base = buf , . iov_len = len }; struct kiocb kiocb ; ssize_t ret ; // \u8bbe\u7f6e\u8981\u8bfb\u53d6\u7684\u957f\u5ea6\u548c\u5f00\u59cb\u7684\u504f\u79fb\u91cf init_sync_kiocb ( & kiocb , filp ); kiocb . ki_pos = * ppos ; kiocb . ki_left = len ; kiocb . ki_nbytes = len ; for (;;) { // \u5b9e\u9645\u5f00\u59cb\u8fdb\u884c\u8bfb\u53d6\u64cd\u4f5c ret = filp -> f_op -> aio_read ( & kiocb , & iov , 1 , kiocb . ki_pos ); if ( ret != - EIOCBRETRY ) break ; wait_on_retry_sync_kiocb ( & kiocb ); } if ( - EIOCBQUEUED == ret ) ret = wait_on_sync_kiocb ( & kiocb ); // \u8bfb\u5b8c\u540e\u66f4\u65b0\u6700\u540e\u7684offset * ppos = kiocb . ki_pos ; return ret ; } \u200b\u2003 \u2003\u6587\u4ef6\u7684\u5199\u5165\u4e5f\u662f\u5982\u6b64\uff0c\u62ff\u5230offet\uff0c\u8c03\u7528\u5b9e\u9645\u7684\u5199\u5165\u65b9\u6cd5\uff0c\u6700\u540e\u66f4\u65b0offset\u3002\u5230\u6b64\u4e3a\u6b62\u4e00\u4e2a\u6587\u4ef6\u7684\u8bfb\u548c\u5199\u7684\u5927\u4f53\u8fc7\u7a0b\u6211\u4eec\u662f\u6e05\u695a\u4e86\uff0c\u5f88\u663e\u7136\u4e0a\u8ff0\u7684\u8fc7\u7a0b\u5e76\u4e0d\u662f\u539f\u5b50\u7684\uff0c\u65e0\u8bba\u662f\u6587\u4ef6\u7684\u8bfb\u8fd8\u662f\u5199\uff0c\u90fd\u81f3\u5c11\u6709\u4e24\u4e2a\u6b65\u9aa4\uff0c\u4e00\u4e2a\u662f\u62ffoffset\uff0c\u53e6\u5916\u4e00\u4e2a\u5219\u662f\u5b9e\u9645\u7684\u8bfb\u548c\u5199\u3002\u5e76\u4e14\u5728\u6574\u4e2a\u8fc7\u7a0b\u4e2d\u5e76\u6ca1\u6709\u770b\u5230\u52a0\u9501\u7684\u52a8\u4f5c\uff0c\u90a3\u4e48\u7b2c\u4e00\u4e2a\u95ee\u9898\u5c31\u5f97\u5230\u4e86\u89e3\u51b3\u3002\u5bf9\u4e8e\u7b2c\u4e8c\u4e2a\u95ee\u9898\u6211\u4eec\u53ef\u4ee5\u7b80\u8981\u7684\u5206\u6790\u4e0b\uff0c\u5047\u5982\u6709\u4e24\u4e2a\u7ebf\u7a0b\uff0c\u7b2c\u4e00\u4e2a\u7ebf\u7a0b\u62ff\u5230offset\u662f1\uff0c\u7136\u540e\u5f00\u59cb\u5199\u5165\uff0c\u5728\u5199\u5165\u7684\u8fc7\u7a0b\u4e2d\uff0c\u7b2c\u4e8c\u4e2a\u7ebf\u7a0b\u4e5f\u53bb\u62ffoffset\uff0c\u56e0\u4e3a\u5bf9\u4e8e\u4e00\u4e2a\u6587\u4ef6\u6765\u8bf4\u591a\u4e2a\u7ebf\u7a0b\u662f\u5171\u4eab\u540c\u4e00\u4e2a struct file \u7ed3\u6784\uff0c\u56e0\u6b64\u62ff\u5230\u7684offset\u4ecd\u7136\u662f1\uff0c\u8fd9\u4e2a\u65f6\u5019\u7ebf\u7a0b1\u5199\u7ed3\u675f\uff0c\u66f4\u65b0offset\uff0c\u7136\u540e\u7ebf\u7a0b2\u5f00\u59cb\u5199\u3002\u6700\u540e\u7684\u7ed3\u679c\u663e\u800c\u6613\u89c1\uff0c\u7ebf\u7a0b2\u8986\u76d6\u4e86\u7ebf\u7a0b1\u7684\u6570\u636e\uff0c\u901a\u8fc7\u5206\u6790\u53ef\u77e5\uff0c\u591a\u7ebf\u7a0b\u5199\u6587\u4ef6\u4e0d\u662f\u539f\u5b50\u7684\uff0c\u4f1a\u4ea7\u751f\u6570\u636e\u8986\u76d6\u3002\u4f46\u662f\u5426\u4f1a\u4ea7\u751f\u6570\u636e\u9519\u4e71\uff0c\u4e5f\u5c31\u662f\u6570\u636e\u4ea4\u53c9\u5199\u5165\u4e86?\u5176\u5b9e\u8fd9\u79cd\u60c5\u51b5\u662f\u4e0d\u4f1a\u53d1\u751f\u7684\uff0c\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u8bf7\u770b\u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 ssize_t generic_file_aio_write ( struct kiocb * iocb , const struct iovec * iov , unsigned long nr_segs , loff_t pos ) { struct file * file = iocb -> ki_filp ; struct inode * inode = file -> f_mapping -> host ; struct blk_plug plug ; ssize_t ret ; BUG_ON ( iocb -> ki_pos != pos ); // \u6587\u4ef6\u7684\u5199\u5165\u5176\u5b9e\u662f\u52a0\u9501\u7684 mutex_lock ( & inode -> i_mutex ); blk_start_plug ( & plug ); ret = __generic_file_aio_write ( iocb , iov , nr_segs , & iocb -> ki_pos ); mutex_unlock ( & inode -> i_mutex ); if ( ret > 0 || ret == - EIOCBQUEUED ) { ssize_t err ; err = generic_write_sync ( file , pos , ret ); if ( err < 0 && ret > 0 ) ret = err ; } blk_finish_plug ( & plug ); return ret ; } EXPORT_SYMBOL ( generic_file_aio_write ); \u200b\u2003 \u2003\u6240\u4ee5\u5e76\u4e0d\u4f1a\u4ea7\u751f\u6570\u636e\u9519\u4e71\uff0c\u53ea\u4f1a\u5b58\u5728\u6570\u636e\u8986\u76d6\u7684\u95ee\u9898\uff0c\u65e2\u7136\u5982\u6b64\u6211\u4eec\u5728\u5b9e\u9645\u7684\u8fdb\u884c\u6587\u4ef6\u8bfb\u5199\u7684\u65f6\u5019\u662f\u5426\u9700\u8981\u8fdb\u884c\u52a0\u9501\u5462? \u52a0\u9501\u7684\u786e\u662f\u53ef\u4ee5\u89e3\u51b3\u95ee\u9898\u7684\uff0c\u4f46\u662f\u5728\u8fd9\u91cc\u672a\u514d\u6709\u70b9\u725b\u5200\u6740\u9e21\u7684\u611f\u89c9\uff0c\u597d\u5728OS\u7ed9\u6211\u4eec\u63d0\u4f9b\u4e86\u539f\u5b50\u5199\u5165\u7684\u65b9\u6cd5\uff0c\u7b2c\u4e00\u79cd\u5c31\u662f\u5728\u6253\u5f00\u6587\u4ef6\u7684\u65f6\u5019\u6dfb\u52a0 O_APPEND \u6807\u5fd7\uff0c\u901a\u8fc7 O_APPEND \u6807\u5fd7\u5c06\u83b7\u53d6\u6587\u4ef6\u7684offset\u548c\u6587\u4ef6\u5199\u5165\u653e\u5728\u4e00\u8d77\u7528\u9501\u8fdb\u884c\u4e86\u4fdd\u62a4\uff0c\u4f7f\u5f97\u8fd9\u4e24\u6b65\u662f\u539f\u5b50\u7684\uff0c\u5177\u4f53\u4ee3\u7801\u53ef\u4ee5\u770b\u4e0a\u9762\u4ee3\u7801\u4e2d\u7684 __generic_file_aio_write \u51fd\u6570\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 ssize_t __generic_file_aio_write ( struct kiocb * iocb , const struct iovec * iov , unsigned long nr_segs , loff_t * ppos ) { struct file * file = iocb -> ki_filp ; struct address_space * mapping = file -> f_mapping ; size_t ocount ; /* original count */ size_t count ; /* after file limit checks */ struct inode * inode = mapping -> host ; loff_t pos ; ssize_t written ; ssize_t err ; ocount = 0 ; err = generic_segment_checks ( iov , & nr_segs , & ocount , VERIFY_READ ); if ( err ) return err ; count = ocount ; pos = * ppos ; vfs_check_frozen ( inode -> i_sb , SB_FREEZE_WRITE ); /* We can write back this queue in page reclaim */ current -> backing_dev_info = mapping -> backing_dev_info ; written = 0 ; // \u91cd\u70b9\u5c31\u5728\u8fd9\u4e2a\u51fd\u6570 err = generic_write_checks ( file , & pos , & count , S_ISBLK ( inode -> i_mode )); if ( err ) goto out ; ...... // \u7701\u7565 } inline int generic_write_checks ( struct file * file , loff_t * pos , size_t * count , int isblk ) { struct inode * inode = file -> f_mapping -> host ; unsigned long limit = rlimit ( RLIMIT_FSIZE ); if ( unlikely ( * pos < 0 )) return - EINVAL ; if ( ! isblk ) { /* FIXME: this is for backwards compatibility with 2.4 */ // \u5982\u679c\u5e26\u6709O_APPEND\u6807\u5fd7\uff0c\u4f1a\u76f4\u63a5\u62ff\u5230\u6587\u4ef6\u7684\u5927\u5c0f\uff0c\u8bbe\u7f6e\u4e3a\u65b0\u7684offset if ( file -> f_flags & O_APPEND ) * pos = i_size_read ( inode ); if ( limit != RLIM_INFINITY ) { if ( * pos >= limit ) { send_sig ( SIGXFSZ , current , 0 ); return - EFBIG ; } if ( * count > limit - ( typeof ( limit )) * pos ) { * count = limit - ( typeof ( limit )) * pos ; } } } ...... // \u7701\u7565 } \u200b\u2003 \u2003\u901a\u8fc7\u4e0a\u9762\u7684\u4ee3\u7801\u53ef\u77e5\uff0c\u5982\u679c\u5e26\u6709 O_APPEND \u6807\u5fd7\u7684\u60c5\u51b5\uff0c\u5728\u6587\u4ef6\u771f\u6b63\u5199\u5165\u4e4b\u524d\u4f1a\u8c03\u7528 generic_write_checks \u8fdb\u884c\u4e00\u4e9b\u68c0\u67e5\uff0c\u5728\u68c0\u67e5\u7684\u65f6\u5019\u5982\u679c\u53d1\u73b0\u5e26\u6709 O_APPEND \u6807\u5fd7\u5c31\u5c06offset\u8bbe\u7f6e\u4e3a\u6587\u4ef6\u7684\u5927\u5c0f\u3002\u800c\u8fd9\u6574\u4e2a\u8fc7\u7a0b\u90fd\u662f\u5728\u52a0\u9501\u7684\u60c5\u51b5\u4e0b\u5b8c\u6210\u7684\uff0c\u6240\u4ee5\u5e26\u6709 O_APPEND \u6807\u5fd7\u7684\u60c5\u51b5\u4e0b\uff0c\u6587\u4ef6\u7684\u5199\u5165\u662f\u539f\u5b50\u7684\uff0c\u591a\u7ebf\u7a0b\u5199\u6587\u4ef6\u662f\u4e0d\u4f1a\u5bfc\u81f4\u6570\u636e\u9519\u4e71\u7684\u3002\u53e6\u5916\u4e00\u79cd\u60c5\u51b5\u5c31\u662f pwrite \u7cfb\u7edf\u8c03\u7528\uff0c pwrite \u7cfb\u7edf\u8c03\u7528\u901a\u8fc7\u8ba9\u7528\u6237\u6307\u5b9a\u5199\u5165\u7684offset\uff0c\u503c\u5f97\u6574\u4e2a\u5199\u5165\u7684\u8fc7\u7a0b\u5929\u7136\u7684\u53d8\u6210\u539f\u5b50\u7684\u4e86\uff0c\u5728\u4e0a\u6587\u8bf4\u5230\uff0c\u6574\u4e2a\u5199\u5165\u7684\u8fc7\u7a0b\u662f\u56e0\u4e3a\u83b7\u53d6offset\u548c\u6587\u4ef6\u5199\u5165\u662f\u4e24\u4e2a\u72ec\u7acb\u7684\u6b65\u9aa4\uff0c\u5e76\u6ca1\u6709\u52a0\u9501\uff0c\u901a\u8fc7pwrite\u7701\u53bb\u4e86\u83b7\u53d6offset\u8fd9\u4e00\u6b65\uff0c\u6700\u7ec8\u6574\u4e2a\u6587\u4ef6\u5199\u5165\u53ea\u6709\u4e00\u6b65\u52a0\u9501\u7684\u6587\u4ef6\u5199\u5165\u8fc7\u7a0b\u4e86\u3002pwrite\u7684\u4ee3\u7801\u5982\u4e0b: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 SYSCALL_DEFINE ( pwrite64 )( unsigned int fd , const char __user * buf , size_t count , loff_t pos ) { struct file * file ; ssize_t ret = - EBADF ; int fput_needed ; if ( pos < 0 ) return - EINVAL ; file = fget_light ( fd , & fput_needed ); if ( file ) { ret = - ESPIPE ; if ( file -> f_mode & FMODE_PWRITE ) // \u76f4\u63a5\u628aoffset\u4e5f\u5c31\u662fpos\u4f20\u9012\u8fdb\u53bb\uff0c\u800c\u666e\u901a\u7684write\u9700\u8981 // \u9700\u8981\u5148\u4ecestruct file\u4e2d\u62ff\u5230offset\uff0c\u7136\u540e\u4f20\u9012\u8fdb\u53bb ret = vfs_write ( file , buf , count , & pos ); fput_light ( file , fput_needed ); } return ret ; } SYSCALL_DEFINE3 ( write , unsigned int , fd , const char __user * , buf , size_t , count ) { struct file * file ; ssize_t ret = - EBADF ; int fput_needed ; file = fget_light ( fd , & fput_needed ); if ( file ) { // \u7b2c\u4e00\u6b65\u62ffoffset loff_t pos = file_pos_read ( file ); // \u7b2c\u4e8c\u6b65\u5b9e\u9645\u7684\u5199\u5165 ret = vfs_write ( file , buf , count , & pos ); // \u7b2c\u4e09\u6b65\u5199\u56deoffset file_pos_write ( file , pos ); fput_light ( file , fput_needed ); } return ret ; } \u200b\u2003 \u2003\u6700\u540e\u4e00\u4e2a\u95ee\u9898\u662f\u591a\u4e2a\u8fdb\u7a0b\u5199\u540c\u4e00\u4e2a\u6587\u4ef6\u662f\u5426\u4f1a\u9020\u6210\u6587\u4ef6\u5199\u9519\u4e71\uff0c\u76f4\u89c2\u6765\u8bf4\u662f\u591a\u8fdb\u7a0b\u5199\u6587\u4ef6\u4e0d\u662f\u539f\u5b50\u7684\uff0c\u8fd9\u662f\u5f88\u663e\u800c\u6613\u89c1\u7684\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u62e5\u6709\u4e00\u4e2a struct file \u5bf9\u8c61\uff0c\u662f\u72ec\u7acb\u7684\uff0c\u5e76\u4e14\u90fd\u62e5\u6709\u72ec\u7acb\u7684\u6587\u4ef6offset\uff0c\u6240\u4ee5\u5f88\u663e\u7136\u8fd9\u4f1a\u5bfc\u81f4\u4e0a\u6587\u4e2d\u8bf4\u5230\u7684\u6570\u636e\u8986\u76d6\u7684\u60c5\u51b5\uff0c\u4f46\u662f\u5426\u4f1a\u5bfc\u81f4\u6570\u636e\u9519\u4e71\u5462?\uff0c\u7b54\u6848\u662f\u4e0d\u4f1a\uff0c\u867d\u7136 struct file \u5bf9\u8c61\u662f\u72ec\u7acb\u7684\uff0c\u4f46\u662f struct inode \u662f\u5171\u4eab\u7684(\u76f8\u540c\u7684\u6587\u4ef6\u65e0\u8bba\u6253\u5f00\u591a\u5c11\u6b21\u90fd\u53ea\u6709\u4e00\u4e2a struct inode \u5bf9\u8c61)\uff0c\u6587\u4ef6\u7684\u6700\u540e\u5199\u5165\u5176\u5b9e\u662f\u5148\u8981\u5199\u5165\u5230\u9875\u7f13\u5b58\u4e2d\uff0c\u800c\u9875\u7f13\u5b58\u548c struct inode \u662f\u4e00\u4e00\u5bf9\u5e94\u7684\u5173\u7cfb\uff0c\u5728\u5b9e\u9645\u6587\u4ef6\u5199\u5165\u4e4b\u524d\u4f1a\u52a0\u9501\uff0c\u800c\u8fd9\u4e2a\u9501\u5c31\u662f\u5c5e\u4e8e struct inode \u5bf9\u8c61(\u89c1\u4e0a\u6587\u4e2d\u7684 mutex_lock(&inode->i_mutex) )\u7684\uff0c\u6240\u6709\u65e0\u8bba\u6709\u591a\u5c11\u4e2a\u8fdb\u7a0b\u6216\u8005\u7ebf\u7a0b\uff0c\u53ea\u8981\u662f\u5bf9\u540c\u4e00\u4e2a\u6587\u4ef6\u5199\u6570\u636e\uff0c\u62ff\u5230\u7684\u90fd\u662f\u540c\u4e00\u628a\u9501\uff0c\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\uff0c\u6240\u4ee5\u4e5f\u4e0d\u4f1a\u51fa\u73b0\u6570\u636e\u5199\u9519\u4e71\u7684\u60c5\u51b5\u3002","title":"\u5173\u4e8e\u6587\u4ef6\u5199\u5165\u7684\u539f\u5b50\u6027\u8ba8\u8bba"},{"location":"%E5%8D%9A%E5%AE%A2/doc/rust/lifetime-error-cases/","text":"\u5e38\u89c1\u7684\u751f\u547d\u5468\u671f\u9519\u8bef \u793a\u4f8b1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 struct S <' a > { x : & ' a i32 , y : & ' a i32 } fn main () { let x = 10 ; let r ; { let y = 20 ; { let s = S { x : & x , y : & y }; r = s . x ; } } println! ( \"{} {}\" , x , r ); } \u9519\u8bef\u5206\u6790 1 2 3 4 5 6 7 8 | 12 | let s = S { x : & x , y : & y }; | ^^ borrowed value does not live long enough .. . 15 | } | - ` y ` dropped here while still borrowed 16 | println! ( \"{} {}\" , x , r ); | - borrow later used here \u5b9e\u9645\u4e0a\uff0c\u4e0a\u9762\u8fd9\u6bb5\u4ee3\u7801\u9519\u8bef\u7684\u539f\u56e0\u662f S<'a> \u4e2d\u7684\u4e24\u4e2a\u5b57\u6bb5\u7684\u751f\u547d\u5468\u671f\u90fd\u662f 'a \uff0c\u8fd9\u5bfc\u81f4 let s = S { x: &x, y: &y }; \u548c r = s.x \u4e24\u4e2a\u8868\u8fbe\u5f0f\u5b58\u5728\u6b67\u4e49\uff0c\u524d\u8005\u8981\u6c42x\u7684\u751f\u547d\u5468\u671f\u548cy\u4e00\u81f4\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u901a\u8fc7\u534f\u53d8\u8fbe\u6210\u3002\u4f46\u662f\u540e\u8005\u8981\u6c42 s.x \u7684\u751f\u547d\u5468\u671f\u8981\u5927\u4e8ey\u3002 \u8fd9\u5c31\u5c34\u5c2c\u4e86\uff0c\u4f60\u662f\u6ca1\u529e\u6cd5\u627e\u51fa\u8fd9\u6837\u7684\u4e00\u4e2a\u751f\u547d\u5468\u671f\u5927\u4e8ey\u5e76\u4e14\u7b49\u4e8ey\u3002\u6240\u4ee5\u4e0a\u9762\u62a5\u9519\u4e86\u3002 \u89e3\u51b3\u65b9\u6848 \u53ea\u9700\u8981\u5c06 S \u7684\u4e24\u4e2a\u5b57\u6bb5\u7528\u4e0d\u540c\u7684\u751f\u547d\u5468\u671f\u6807\u6ce8\u5373\u53ef\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u6ee1\u8db3\u4e0a\u9762\u4ee3\u7801\u5bf9\u4e8e\u751f\u547d\u5468\u671f\u7684\u8981\u6c42\u3002 1 2 3 4 struct S <' a , ' b > { x : & ' a i32 , y : & ' b i32 } \u793a\u4f8b2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 struct ByteIter <' a > { remainder : & ' a [ u8 ] } impl <' a > ByteIter <' a > { fn next ( & mut self ) -> Option <& u8 > { if self . remainder . is_empty () { None } else { let byte = & self . remainder [ 0 ]; self . remainder = & self . remainder [ 1 .. ]; Some ( byte ) } } } fn main () { let mut bytes = ByteIter { remainder : b \"1\" }; let byte_1 = bytes . next (); let byte_2 = bytes . next (); if byte_1 == byte_2 { // do something } } \u9519\u8bef\u5206\u6790 1 2 3 4 5 6 7 8 9 error [ E0499 ] : cannot borrow ` bytes ` as mutable more than once at a time - -> src / main . rs : 20 : 18 | 19 | let byte_1 = bytes . next (); | ----- first mutable borrow occurs here 20 | let byte_2 = bytes . next (); | ^^^^^ second mutable borrow occurs here 21 | if byte_1 == byte_2 { | ------ first borrow later used here \u9519\u8bef\u7684\u539f\u56e0\u662f\u56e0\u4e3arust\u9ed8\u8ba4\u7ed9next\u6dfb\u52a0\u4e86\u751f\u547d\u5468\u671f\u6ce8\u89e3\uff0c\u5c55\u5f00\u540e\u5982\u4e0b: 1 fn next ( &' b mut self ) -> Option <&' b u8 > \u8fd9\u5bfc\u81f4\u7f16\u8bd1\u5668\u8ba4\u4e3a\u8fd4\u56de\u7684 Option<&'b u8> \u662f\u5bf9 &b mut self \u7684\u5f15\u7528\uff0c\u800c\u8fd9\u91cc\u662f\u4e00\u4e2a\u5178\u578b\u7684 &mut \u964d\u7ea7\u4e3a & \u7684\u573a\u666f\u3002\u5f53\u7b2c\u4e8c\u6b21\u518d\u8c03\u7528next\u65b9\u6cd5\u7684\u65f6\u5019\u4f1a\u518d\u6b21\u521b\u5efa &mut self \u5f15\u7528\u3002 \u6211\u4eec\u90fd\u77e5\u9053\u8fd9\u662f\u6ca1\u529e\u6cd5\u521b\u5efa\u7684\uff0c\u56e0\u4e3a &mut \u548c & \u4e0d\u80fd\u540c\u65f6\u51fa\u73b0\u3002 \u89e3\u51b3\u65b9\u6848 \u53ea\u9700\u8981\u5c06 Option<&u8> \u6539\u6210 Option<&'a u8> \u5373\u53ef\uff0c\u8ba9\u8fd4\u56de\u503c\u6307\u5411remainder\uff0c\u90a3\u4e48\u7f16\u8bd1\u5668\u5c31\u4e0d\u4f1a\u8ba4\u4e3a\u662f\u5bf9 &mut self \u7684\u5f15\u7528\uff0c\u4e5f\u81ea\u7136\u4e0d\u4f1a\u6709\u95ee\u9898\u4e86\u3002 \u793a\u4f8b3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #[derive(Debug)] struct NumRef <' a > ( &' a i32 ); impl <' a > NumRef <' a > { // \u6211\u5b9a\u4e49\u7684\u6cdb\u578b\u7ed3\u6784\u4f53\u4ee5 'a \u4e3a\u53c2\u6570\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4e5f\u9700\u8981\u7ed9\u65b9\u6cd5\u7684\u53c2\u6570 // \u6807\u6ce8\u4e3a 'a \u751f\u547d\u5468\u671f\uff0c\u5bf9\u5417\uff1f\uff08\u7b54\u6848\uff1a\u9519\uff09 fn some_method ( &' a mut self ) {} } fn main () { let mut num_ref = NumRef ( & 5 ); num_ref . some_method (); // \u53ef\u53d8\u501f\u7528 num_ref \u76f4\u81f3\u5176\u751f\u547d\u5468\u671f\u7ed3\u675f num_ref . some_method (); // \u7f16\u8bd1\u9519\u8bef println! ( \"{:?}\" , num_ref ); // \u540c\u6837\u7f16\u8bd1\u9519\u8bef } \u9519\u8bef\u5206\u6790 \u4e0a\u9762\u4ee3\u7801\u9519\u8bef\u7684\u539f\u56e0\u662f\u56e0\u4e3a some_method \u65b9\u6cd5\u88ab\u663e\u793a\u8bbe\u7f6e\u4e86\u751f\u547d\u6ce8\u89e3 'a \u5bfc\u81f4\u5728\u8c03\u7528some_method\u7684\u65f6\u5019\u8bef\u8ba4\u4e3a &'a mut self \u5f15\u7528\u4e86 num_ref \uff0c\u800c num_ref \u7684\u751f\u547d\u5468\u671f\u662f\u76f4\u5230\u7a0b\u5e8f\u7ed3\u675f\uff0c\u56e0\u6b64 some_method\u7684\u8c03\u7528\u5bfc\u81f4 &mut self \u4e00\u76f4\u88ab\u6301\u6709\u76f4\u5230\u7a0b\u5e8f\u7ed3\u675f\uff0c\u56e0\u6b64\u4e5f\u65e0\u6cd5\u518d\u8c03\u7528\u3002 1 2 3 4 5 6 7 8 9 10 error [ E0499 ] : cannot borrow ` num_ref ` as mutable more than once at a time - -> src / main . rs : 13 : 5 | 12 | num_ref . some_method (); // \u53ef\u53d8\u501f\u7528 num_ref \u76f4\u81f3\u5176\u751f\u547d\u5468\u671f\u7ed3\u675f | ------- first mutable borrow occurs here 13 | num_ref . some_method (); // \u7f16\u8bd1\u9519\u8bef | ^^^^^^^ | | | second mutable borrow occurs here | first borrow later used here \u89e3\u51b3\u65b9\u6848 \u628a &mut self \u548c num_ref \u7684\u5173\u7cfb\u89e3\u8026\uff0c\u4e0d\u8981\u7528\u76f8\u540c\u7684\u751f\u547d\u5468\u671f\uff0c\u4f7f\u7528\u7f16\u8bd1\u5668\u9ed8\u8ba4\u7ed9\u6211 some_method \u6dfb\u52a0\u7684\u751f\u547d\u5468\u671f\u5373\u53ef\u3002 1 2 3 impl <' a > NumRef <' a > { fn some_method ( & mut self ) {} } \u793a\u4f8b4 1 2 3 4 5 6 7 8 9 10 11 12 13 use std :: fmt :: Display ; fn dynamic_thread_print ( t : Box < dyn Display + Send > ) { std :: thread :: spawn ( move || { println! ( \"{}\" , t ); }). join (); } fn static_thread_print < T : Display + Send > ( t : T ) { std :: thread :: spawn ( move || { println! ( \"{}\" , t ); }). join (); } \u9519\u8bef\u5206\u6790 1 2 3 4 5 6 7 error [ E0310 ] : the parameter type ` T ` may not live long enough - -> src / main . rs : 10 : 5 | 9 | fn static_thread_print < T : Display + Send > ( t : T ) { | -- help : consider adding an explicit lifetime bound .. . : ` T : ' static + ` 10 | std :: thread :: spawn ( move || { | ^^^^^^^^^^^^^^^^^^ .. . so that the type ` [ closure @ src / main . rs : 10 : 24 : 12 : 6 ] ` will meet its required lifetime bounds \u8fd9\u662f\u56e0\u4e3a std::thread::spawn \u8981\u6c42\u5176\u5185\u90e8\u6355\u83b7\u7684\u7c7b\u578b\u9700\u8981\u6ee1\u8db3 'static \u7ea6\u675f\uff0c\u56e0\u6b64\u4f1a\u7f16\u8bd1\u51fa\u9519\uff0c\u8981\u6c42\u7ed9T\u6dfb\u52a0 'static \u7ea6\u675f\uff0c\u4f46\u662f\u4e3a\u4ec0\u4e48 dynamic_thread_print \u51fd\u6570\u4e2d\u6ca1\u6709\u8981\u6c42t\u6709 'static \u7684\u751f\u547d\u5468\u671f\u7ea6\u675f\u5462\uff1f \u8fd9\u662f\u56e0\u4e3a\u7f16\u8bd1\u5668\u7ed9\u6211\u4eec\u9ed8\u8ba4\u6dfb\u52a0\u4e86\u3002\u5bf9\u4e8e\u6240\u6709\u7684 trait \u5bf9\u8c61\u7f16\u8bd1\u5668\u6709\u7740\u4e00\u5957\u89c4\u5219\u6765\u7ed9\u5176\u6dfb\u52a0\u751f\u547d\u5468\u671f\u7ea6\u675f\uff0c\u4e0b\u9762\u662f\u5177\u4f53\u7684\u89c4\u5219\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 use std :: cell :: Ref ; trait Trait {} // \u5c55\u5f00\u524d type T1 = Box < dyn Trait > ; // \u5c55\u5f00\u540e\uff0cBox<T> \u6ca1\u6709\u5bf9 T \u7684\u751f\u547d\u5468\u671f\u7ea6\u675f\uff0c\u6240\u4ee5\u63a8\u5bfc\u4e3a 'static type T2 = Box < dyn Trait + ' static > ; // \u5c55\u5f00\u524d impl dyn Trait {} // \u5c55\u5f00\u540e impl dyn Trait + ' static {} // \u5c55\u5f00\u524d type T3 <' a > = &' a dyn Trait ; // \u5c55\u5f00\u540e\uff0c&'a T \u8981\u6c42 T: 'a, \u6240\u4ee5\u63a8\u5bfc\u4e3a 'a type T4 <' a > = &' a ( dyn Trait + ' a ); // \u5c55\u5f00\u524d type T5 <' a > = Ref <' a , dyn Trait > ; // \u5c55\u5f00\u540e\uff0cRef<'a, T> \u8981\u6c42 T: 'a, \u6240\u4ee5\u63a8\u5bfc\u4e3a 'a type T6 <' a > = Ref <' a , dyn Trait + ' a > ; trait GenericTrait <' a > : ' a {} // \u5c55\u5f00\u524d type T7 <' a > = Box < dyn GenericTrait <' a >> ; // \u5c55\u5f00\u540e type T8 <' a > = Box < dyn GenericTrait <' a > + ' a > ; // \u5c55\u5f00\u524d impl <' a > dyn GenericTrait <' a > {} // \u5c55\u5f00\u540e impl <' a > dyn GenericTrait <' a > + ' a {} \u89e3\u51b3\u65b9\u6848 \u6309\u7167\u7f16\u8bd1\u5668\u7ed9\u7684\u63d0\u793a\u7ed9 T \u6dfb\u52a0\u751f\u547d\u5468\u671f\u6ce8\u89e3\u5373\u53ef\u3002 \u793a\u4f8b5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 struct Has <' lifetime > { lifetime : & ' lifetime str , } fn main () { let long = String :: from ( \"long\" ); let mut has = Has { lifetime : & long }; assert_eq! ( has . lifetime , \"long\" ); // \u8fd9\u4e2a\u4ee3\u7801\u5757\u903b\u8f91\u4e0a\u6c38\u8fdc\u4e0d\u4f1a\u88ab\u6267\u884c if false { let short = String :: from ( \"short\" ); // \u201c\u8f6c\u6362\u5230\u201d \u77ed\u7684\u751f\u547d\u5468\u671f has . lifetime = & short ; assert_eq! ( has . lifetime , \"short\" ); // \u201c\u8f6c\u6362\u56de\u201d \u957f\u7684\u751f\u547d\u5468\u671f\uff08\u5b9e\u9645\u662f\u5e76\u4e0d\u662f\uff09 has . lifetime = & long ; assert_eq! ( has . lifetime , \"long\" ); // `short` \u53d8\u91cf\u5728\u8fd9\u91cc drop } // \u8fd8\u662f\u7f16\u8bd1\u5931\u8d25\uff0c `short` \u5728 drop \u540e\u4ecd\u65e7\u5904\u4e8e \u201c\u501f\u7528\u201d \u72b6\u6001 assert_eq! ( has . lifetime , \"long\" ); } \u9519\u8bef\u5206\u6790 1 2 3 4 5 6 7 8 9 10 11 error [ E0597 ] : ` short ` does not live long enough - -> src / main . rs : 14 : 24 | 14 | has . lifetime = & short ; | ^^^^^^ borrowed value does not live long enough .. . 21 | } | - ` short ` dropped here while still borrowed .. . 24 | assert_eq! ( has . lifetime , \"long\" ); | --------------------------------- borrow later used here \u9519\u8bef\u7684\u539f\u56e0\u662f\u56e0\u4e3aRust\u4e2d\u7684\u751f\u547d\u5468\u671f\u662f\u5728\u7f16\u8bd1\u65f6\u4e00\u65e6\u786e\u5b9a\u5c31\u65e0\u6cd5\u66f4\u6539\u7684\uff0c\u867d\u7136\u6211\u4eec\u53ef\u4ee5\u8ba9\u77ed\u7684\u751f\u547d\u5468\u671f\u6307\u5411\u957f\u7684\uff0c\u4f46\u662f\u8fd9\u4e00\u5207\u90fd\u662f\u5728\u7f16\u8bd1\u671f\u786e\u5b9a\u7684\uff0cRust\u7f16\u8bd1\u5668\u4f1a\u5206\u6790\u4ee3\u7801\u4e2d\u4efb\u4f55\u7684\u6267\u884c\u6d41\uff0c\u5e76\u9009\u62e9\u4e00\u4e2a\u6700\u77ed\u7684\u751f\u547d\u5468\u671f\u3002 \u4f8b\u5982\u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801\uff0cRust\u5728\u7f16\u8bd1\u65f6\u51b3\u5b9a\u4e86 lifetime \u7684\u751f\u547d\u5468\u671f\u548c short \u4e00\u6837\u957f\u3002 1 2 3 4 5 6 7 8 9 10 11 struct Has <' lifetime > { lifetime : & ' lifetime str , } fn main () { let short = String :: from ( \"short\" ); let mut has = Has { lifetime : & short }; assert_eq! ( has . lifetime , \"short\" ); has . lifetime = & \"long\" ; assert_eq! ( has . lifetime , \"long\" ); } Reference 2094-nll common-rust-lifetime-misconceptions hrtb","title":"\u5e38\u89c1\u7684\u751f\u547d\u5468\u671f\u9519\u8bef"},{"location":"%E5%8D%9A%E5%AE%A2/doc/rust/lifetime-error-cases/#_1","text":"\u793a\u4f8b1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 struct S <' a > { x : & ' a i32 , y : & ' a i32 } fn main () { let x = 10 ; let r ; { let y = 20 ; { let s = S { x : & x , y : & y }; r = s . x ; } } println! ( \"{} {}\" , x , r ); } \u9519\u8bef\u5206\u6790 1 2 3 4 5 6 7 8 | 12 | let s = S { x : & x , y : & y }; | ^^ borrowed value does not live long enough .. . 15 | } | - ` y ` dropped here while still borrowed 16 | println! ( \"{} {}\" , x , r ); | - borrow later used here \u5b9e\u9645\u4e0a\uff0c\u4e0a\u9762\u8fd9\u6bb5\u4ee3\u7801\u9519\u8bef\u7684\u539f\u56e0\u662f S<'a> \u4e2d\u7684\u4e24\u4e2a\u5b57\u6bb5\u7684\u751f\u547d\u5468\u671f\u90fd\u662f 'a \uff0c\u8fd9\u5bfc\u81f4 let s = S { x: &x, y: &y }; \u548c r = s.x \u4e24\u4e2a\u8868\u8fbe\u5f0f\u5b58\u5728\u6b67\u4e49\uff0c\u524d\u8005\u8981\u6c42x\u7684\u751f\u547d\u5468\u671f\u548cy\u4e00\u81f4\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u901a\u8fc7\u534f\u53d8\u8fbe\u6210\u3002\u4f46\u662f\u540e\u8005\u8981\u6c42 s.x \u7684\u751f\u547d\u5468\u671f\u8981\u5927\u4e8ey\u3002 \u8fd9\u5c31\u5c34\u5c2c\u4e86\uff0c\u4f60\u662f\u6ca1\u529e\u6cd5\u627e\u51fa\u8fd9\u6837\u7684\u4e00\u4e2a\u751f\u547d\u5468\u671f\u5927\u4e8ey\u5e76\u4e14\u7b49\u4e8ey\u3002\u6240\u4ee5\u4e0a\u9762\u62a5\u9519\u4e86\u3002 \u89e3\u51b3\u65b9\u6848 \u53ea\u9700\u8981\u5c06 S \u7684\u4e24\u4e2a\u5b57\u6bb5\u7528\u4e0d\u540c\u7684\u751f\u547d\u5468\u671f\u6807\u6ce8\u5373\u53ef\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u6ee1\u8db3\u4e0a\u9762\u4ee3\u7801\u5bf9\u4e8e\u751f\u547d\u5468\u671f\u7684\u8981\u6c42\u3002 1 2 3 4 struct S <' a , ' b > { x : & ' a i32 , y : & ' b i32 } \u793a\u4f8b2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 struct ByteIter <' a > { remainder : & ' a [ u8 ] } impl <' a > ByteIter <' a > { fn next ( & mut self ) -> Option <& u8 > { if self . remainder . is_empty () { None } else { let byte = & self . remainder [ 0 ]; self . remainder = & self . remainder [ 1 .. ]; Some ( byte ) } } } fn main () { let mut bytes = ByteIter { remainder : b \"1\" }; let byte_1 = bytes . next (); let byte_2 = bytes . next (); if byte_1 == byte_2 { // do something } } \u9519\u8bef\u5206\u6790 1 2 3 4 5 6 7 8 9 error [ E0499 ] : cannot borrow ` bytes ` as mutable more than once at a time - -> src / main . rs : 20 : 18 | 19 | let byte_1 = bytes . next (); | ----- first mutable borrow occurs here 20 | let byte_2 = bytes . next (); | ^^^^^ second mutable borrow occurs here 21 | if byte_1 == byte_2 { | ------ first borrow later used here \u9519\u8bef\u7684\u539f\u56e0\u662f\u56e0\u4e3arust\u9ed8\u8ba4\u7ed9next\u6dfb\u52a0\u4e86\u751f\u547d\u5468\u671f\u6ce8\u89e3\uff0c\u5c55\u5f00\u540e\u5982\u4e0b: 1 fn next ( &' b mut self ) -> Option <&' b u8 > \u8fd9\u5bfc\u81f4\u7f16\u8bd1\u5668\u8ba4\u4e3a\u8fd4\u56de\u7684 Option<&'b u8> \u662f\u5bf9 &b mut self \u7684\u5f15\u7528\uff0c\u800c\u8fd9\u91cc\u662f\u4e00\u4e2a\u5178\u578b\u7684 &mut \u964d\u7ea7\u4e3a & \u7684\u573a\u666f\u3002\u5f53\u7b2c\u4e8c\u6b21\u518d\u8c03\u7528next\u65b9\u6cd5\u7684\u65f6\u5019\u4f1a\u518d\u6b21\u521b\u5efa &mut self \u5f15\u7528\u3002 \u6211\u4eec\u90fd\u77e5\u9053\u8fd9\u662f\u6ca1\u529e\u6cd5\u521b\u5efa\u7684\uff0c\u56e0\u4e3a &mut \u548c & \u4e0d\u80fd\u540c\u65f6\u51fa\u73b0\u3002 \u89e3\u51b3\u65b9\u6848 \u53ea\u9700\u8981\u5c06 Option<&u8> \u6539\u6210 Option<&'a u8> \u5373\u53ef\uff0c\u8ba9\u8fd4\u56de\u503c\u6307\u5411remainder\uff0c\u90a3\u4e48\u7f16\u8bd1\u5668\u5c31\u4e0d\u4f1a\u8ba4\u4e3a\u662f\u5bf9 &mut self \u7684\u5f15\u7528\uff0c\u4e5f\u81ea\u7136\u4e0d\u4f1a\u6709\u95ee\u9898\u4e86\u3002 \u793a\u4f8b3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #[derive(Debug)] struct NumRef <' a > ( &' a i32 ); impl <' a > NumRef <' a > { // \u6211\u5b9a\u4e49\u7684\u6cdb\u578b\u7ed3\u6784\u4f53\u4ee5 'a \u4e3a\u53c2\u6570\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4e5f\u9700\u8981\u7ed9\u65b9\u6cd5\u7684\u53c2\u6570 // \u6807\u6ce8\u4e3a 'a \u751f\u547d\u5468\u671f\uff0c\u5bf9\u5417\uff1f\uff08\u7b54\u6848\uff1a\u9519\uff09 fn some_method ( &' a mut self ) {} } fn main () { let mut num_ref = NumRef ( & 5 ); num_ref . some_method (); // \u53ef\u53d8\u501f\u7528 num_ref \u76f4\u81f3\u5176\u751f\u547d\u5468\u671f\u7ed3\u675f num_ref . some_method (); // \u7f16\u8bd1\u9519\u8bef println! ( \"{:?}\" , num_ref ); // \u540c\u6837\u7f16\u8bd1\u9519\u8bef } \u9519\u8bef\u5206\u6790 \u4e0a\u9762\u4ee3\u7801\u9519\u8bef\u7684\u539f\u56e0\u662f\u56e0\u4e3a some_method \u65b9\u6cd5\u88ab\u663e\u793a\u8bbe\u7f6e\u4e86\u751f\u547d\u6ce8\u89e3 'a \u5bfc\u81f4\u5728\u8c03\u7528some_method\u7684\u65f6\u5019\u8bef\u8ba4\u4e3a &'a mut self \u5f15\u7528\u4e86 num_ref \uff0c\u800c num_ref \u7684\u751f\u547d\u5468\u671f\u662f\u76f4\u5230\u7a0b\u5e8f\u7ed3\u675f\uff0c\u56e0\u6b64 some_method\u7684\u8c03\u7528\u5bfc\u81f4 &mut self \u4e00\u76f4\u88ab\u6301\u6709\u76f4\u5230\u7a0b\u5e8f\u7ed3\u675f\uff0c\u56e0\u6b64\u4e5f\u65e0\u6cd5\u518d\u8c03\u7528\u3002 1 2 3 4 5 6 7 8 9 10 error [ E0499 ] : cannot borrow ` num_ref ` as mutable more than once at a time - -> src / main . rs : 13 : 5 | 12 | num_ref . some_method (); // \u53ef\u53d8\u501f\u7528 num_ref \u76f4\u81f3\u5176\u751f\u547d\u5468\u671f\u7ed3\u675f | ------- first mutable borrow occurs here 13 | num_ref . some_method (); // \u7f16\u8bd1\u9519\u8bef | ^^^^^^^ | | | second mutable borrow occurs here | first borrow later used here \u89e3\u51b3\u65b9\u6848 \u628a &mut self \u548c num_ref \u7684\u5173\u7cfb\u89e3\u8026\uff0c\u4e0d\u8981\u7528\u76f8\u540c\u7684\u751f\u547d\u5468\u671f\uff0c\u4f7f\u7528\u7f16\u8bd1\u5668\u9ed8\u8ba4\u7ed9\u6211 some_method \u6dfb\u52a0\u7684\u751f\u547d\u5468\u671f\u5373\u53ef\u3002 1 2 3 impl <' a > NumRef <' a > { fn some_method ( & mut self ) {} } \u793a\u4f8b4 1 2 3 4 5 6 7 8 9 10 11 12 13 use std :: fmt :: Display ; fn dynamic_thread_print ( t : Box < dyn Display + Send > ) { std :: thread :: spawn ( move || { println! ( \"{}\" , t ); }). join (); } fn static_thread_print < T : Display + Send > ( t : T ) { std :: thread :: spawn ( move || { println! ( \"{}\" , t ); }). join (); } \u9519\u8bef\u5206\u6790 1 2 3 4 5 6 7 error [ E0310 ] : the parameter type ` T ` may not live long enough - -> src / main . rs : 10 : 5 | 9 | fn static_thread_print < T : Display + Send > ( t : T ) { | -- help : consider adding an explicit lifetime bound .. . : ` T : ' static + ` 10 | std :: thread :: spawn ( move || { | ^^^^^^^^^^^^^^^^^^ .. . so that the type ` [ closure @ src / main . rs : 10 : 24 : 12 : 6 ] ` will meet its required lifetime bounds \u8fd9\u662f\u56e0\u4e3a std::thread::spawn \u8981\u6c42\u5176\u5185\u90e8\u6355\u83b7\u7684\u7c7b\u578b\u9700\u8981\u6ee1\u8db3 'static \u7ea6\u675f\uff0c\u56e0\u6b64\u4f1a\u7f16\u8bd1\u51fa\u9519\uff0c\u8981\u6c42\u7ed9T\u6dfb\u52a0 'static \u7ea6\u675f\uff0c\u4f46\u662f\u4e3a\u4ec0\u4e48 dynamic_thread_print \u51fd\u6570\u4e2d\u6ca1\u6709\u8981\u6c42t\u6709 'static \u7684\u751f\u547d\u5468\u671f\u7ea6\u675f\u5462\uff1f \u8fd9\u662f\u56e0\u4e3a\u7f16\u8bd1\u5668\u7ed9\u6211\u4eec\u9ed8\u8ba4\u6dfb\u52a0\u4e86\u3002\u5bf9\u4e8e\u6240\u6709\u7684 trait \u5bf9\u8c61\u7f16\u8bd1\u5668\u6709\u7740\u4e00\u5957\u89c4\u5219\u6765\u7ed9\u5176\u6dfb\u52a0\u751f\u547d\u5468\u671f\u7ea6\u675f\uff0c\u4e0b\u9762\u662f\u5177\u4f53\u7684\u89c4\u5219\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 use std :: cell :: Ref ; trait Trait {} // \u5c55\u5f00\u524d type T1 = Box < dyn Trait > ; // \u5c55\u5f00\u540e\uff0cBox<T> \u6ca1\u6709\u5bf9 T \u7684\u751f\u547d\u5468\u671f\u7ea6\u675f\uff0c\u6240\u4ee5\u63a8\u5bfc\u4e3a 'static type T2 = Box < dyn Trait + ' static > ; // \u5c55\u5f00\u524d impl dyn Trait {} // \u5c55\u5f00\u540e impl dyn Trait + ' static {} // \u5c55\u5f00\u524d type T3 <' a > = &' a dyn Trait ; // \u5c55\u5f00\u540e\uff0c&'a T \u8981\u6c42 T: 'a, \u6240\u4ee5\u63a8\u5bfc\u4e3a 'a type T4 <' a > = &' a ( dyn Trait + ' a ); // \u5c55\u5f00\u524d type T5 <' a > = Ref <' a , dyn Trait > ; // \u5c55\u5f00\u540e\uff0cRef<'a, T> \u8981\u6c42 T: 'a, \u6240\u4ee5\u63a8\u5bfc\u4e3a 'a type T6 <' a > = Ref <' a , dyn Trait + ' a > ; trait GenericTrait <' a > : ' a {} // \u5c55\u5f00\u524d type T7 <' a > = Box < dyn GenericTrait <' a >> ; // \u5c55\u5f00\u540e type T8 <' a > = Box < dyn GenericTrait <' a > + ' a > ; // \u5c55\u5f00\u524d impl <' a > dyn GenericTrait <' a > {} // \u5c55\u5f00\u540e impl <' a > dyn GenericTrait <' a > + ' a {} \u89e3\u51b3\u65b9\u6848 \u6309\u7167\u7f16\u8bd1\u5668\u7ed9\u7684\u63d0\u793a\u7ed9 T \u6dfb\u52a0\u751f\u547d\u5468\u671f\u6ce8\u89e3\u5373\u53ef\u3002 \u793a\u4f8b5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 struct Has <' lifetime > { lifetime : & ' lifetime str , } fn main () { let long = String :: from ( \"long\" ); let mut has = Has { lifetime : & long }; assert_eq! ( has . lifetime , \"long\" ); // \u8fd9\u4e2a\u4ee3\u7801\u5757\u903b\u8f91\u4e0a\u6c38\u8fdc\u4e0d\u4f1a\u88ab\u6267\u884c if false { let short = String :: from ( \"short\" ); // \u201c\u8f6c\u6362\u5230\u201d \u77ed\u7684\u751f\u547d\u5468\u671f has . lifetime = & short ; assert_eq! ( has . lifetime , \"short\" ); // \u201c\u8f6c\u6362\u56de\u201d \u957f\u7684\u751f\u547d\u5468\u671f\uff08\u5b9e\u9645\u662f\u5e76\u4e0d\u662f\uff09 has . lifetime = & long ; assert_eq! ( has . lifetime , \"long\" ); // `short` \u53d8\u91cf\u5728\u8fd9\u91cc drop } // \u8fd8\u662f\u7f16\u8bd1\u5931\u8d25\uff0c `short` \u5728 drop \u540e\u4ecd\u65e7\u5904\u4e8e \u201c\u501f\u7528\u201d \u72b6\u6001 assert_eq! ( has . lifetime , \"long\" ); } \u9519\u8bef\u5206\u6790 1 2 3 4 5 6 7 8 9 10 11 error [ E0597 ] : ` short ` does not live long enough - -> src / main . rs : 14 : 24 | 14 | has . lifetime = & short ; | ^^^^^^ borrowed value does not live long enough .. . 21 | } | - ` short ` dropped here while still borrowed .. . 24 | assert_eq! ( has . lifetime , \"long\" ); | --------------------------------- borrow later used here \u9519\u8bef\u7684\u539f\u56e0\u662f\u56e0\u4e3aRust\u4e2d\u7684\u751f\u547d\u5468\u671f\u662f\u5728\u7f16\u8bd1\u65f6\u4e00\u65e6\u786e\u5b9a\u5c31\u65e0\u6cd5\u66f4\u6539\u7684\uff0c\u867d\u7136\u6211\u4eec\u53ef\u4ee5\u8ba9\u77ed\u7684\u751f\u547d\u5468\u671f\u6307\u5411\u957f\u7684\uff0c\u4f46\u662f\u8fd9\u4e00\u5207\u90fd\u662f\u5728\u7f16\u8bd1\u671f\u786e\u5b9a\u7684\uff0cRust\u7f16\u8bd1\u5668\u4f1a\u5206\u6790\u4ee3\u7801\u4e2d\u4efb\u4f55\u7684\u6267\u884c\u6d41\uff0c\u5e76\u9009\u62e9\u4e00\u4e2a\u6700\u77ed\u7684\u751f\u547d\u5468\u671f\u3002 \u4f8b\u5982\u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801\uff0cRust\u5728\u7f16\u8bd1\u65f6\u51b3\u5b9a\u4e86 lifetime \u7684\u751f\u547d\u5468\u671f\u548c short \u4e00\u6837\u957f\u3002 1 2 3 4 5 6 7 8 9 10 11 struct Has <' lifetime > { lifetime : & ' lifetime str , } fn main () { let short = String :: from ( \"short\" ); let mut has = Has { lifetime : & short }; assert_eq! ( has . lifetime , \"short\" ); has . lifetime = & \"long\" ; assert_eq! ( has . lifetime , \"long\" ); }","title":"\u5e38\u89c1\u7684\u751f\u547d\u5468\u671f\u9519\u8bef"},{"location":"%E5%8D%9A%E5%AE%A2/doc/rust/lifetime-error-cases/#reference","text":"2094-nll common-rust-lifetime-misconceptions hrtb","title":"Reference"},{"location":"%E5%8D%9A%E5%AE%A2/doc/rust/macros/","text":"\u5b8f\u5165\u95e8 Rust\u4e2d\u7684\u5b8f\u662f\u4e00\u79cd\u8bed\u6cd5\u6269\u5c55\uff0c\u548cC/C++\u4e2d\u7684\u5b8f\u6709\u7740\u672c\u8d28\u533a\u522b\uff0cC/C++\u4e2d\u7684\u5b8f\u672c\u8d28\u4e0a\u5c31\u662f\u6587\u672c\u66ff\u6362\u3002 \u52a8\u624b\u5b9e\u73b0\u4e00\u4e2a\u5b8f \u5e38\u89c1\u7684\u5185\u7f6e\u5b8f \u8c03\u8bd5\u5b8f \u8fc7\u7a0b\u5b8f https://github.com/dtolnay/proc-macro-workshop#derive-macro-derivebuilder","title":"Macros"},{"location":"%E5%8D%9A%E5%AE%A2/doc/rust/macros/#_1","text":"Rust\u4e2d\u7684\u5b8f\u662f\u4e00\u79cd\u8bed\u6cd5\u6269\u5c55\uff0c\u548cC/C++\u4e2d\u7684\u5b8f\u6709\u7740\u672c\u8d28\u533a\u522b\uff0cC/C++\u4e2d\u7684\u5b8f\u672c\u8d28\u4e0a\u5c31\u662f\u6587\u672c\u66ff\u6362\u3002","title":"\u5b8f\u5165\u95e8"},{"location":"%E5%8D%9A%E5%AE%A2/doc/rust/macros/#_2","text":"","title":"\u52a8\u624b\u5b9e\u73b0\u4e00\u4e2a\u5b8f"},{"location":"%E5%8D%9A%E5%AE%A2/doc/rust/macros/#_3","text":"","title":"\u5e38\u89c1\u7684\u5185\u7f6e\u5b8f"},{"location":"%E5%8D%9A%E5%AE%A2/doc/rust/macros/#_4","text":"","title":"\u8c03\u8bd5\u5b8f"},{"location":"%E5%8D%9A%E5%AE%A2/doc/rust/macros/#_5","text":"https://github.com/dtolnay/proc-macro-workshop#derive-macro-derivebuilder","title":"\u8fc7\u7a0b\u5b8f"},{"location":"%E5%8D%9A%E5%AE%A2/doc/rust/match-pattern/","text":"\u6a21\u5f0f \u4f60\u53ef\u4ee5\u5728Rust\u4e2d\u5f88\u591a\u5730\u65b9\u770b\u5230\u6a21\u5f0f\u7684\u8eab\u5f71\uff0c\u6a21\u5f0f\u662fRust\u63d0\u4f9b\u7684\u4e00\u79cd\u7279\u6b8a\u8bed\u6cd5\uff0c \u5b83\u662f\u7528\u6765\u5339\u914d\u7c7b\u578b\u4e2d\u7684\u7ed3\u6784\uff0c\u65e0\u8bba\u7c7b\u578b\u662f\u7b80\u5355\u8fd8\u662f\u590d\u6742\u3002\u600e\u4e48\u7406\u89e3\u8fd9\u53e5\u8bdd\u5462? match 1 2 3 4 5 match VALUE { PATTERN => EXPRESSION, PATTERN => EXPRESSION, PATTERN => EXPRESSION, }","title":"Match pattern"},{"location":"%E5%8D%9A%E5%AE%A2/doc/rust/match-pattern/#_1","text":"\u4f60\u53ef\u4ee5\u5728Rust\u4e2d\u5f88\u591a\u5730\u65b9\u770b\u5230\u6a21\u5f0f\u7684\u8eab\u5f71\uff0c\u6a21\u5f0f\u662fRust\u63d0\u4f9b\u7684\u4e00\u79cd\u7279\u6b8a\u8bed\u6cd5\uff0c \u5b83\u662f\u7528\u6765\u5339\u914d\u7c7b\u578b\u4e2d\u7684\u7ed3\u6784\uff0c\u65e0\u8bba\u7c7b\u578b\u662f\u7b80\u5355\u8fd8\u662f\u590d\u6742\u3002\u600e\u4e48\u7406\u89e3\u8fd9\u53e5\u8bdd\u5462? match 1 2 3 4 5 match VALUE { PATTERN => EXPRESSION, PATTERN => EXPRESSION, PATTERN => EXPRESSION, }","title":"\u6a21\u5f0f"},{"location":"%E5%8D%9A%E5%AE%A2/doc/rust/rust-error-handle/","text":"Rust\u9519\u8bef\u5904\u7406\u6307\u5357 \u4f5c\u4e3a\u4e00\u540d C++er \u521d\u5b66Rust\u7684\u65f6\u5019\u88ab\u5b83\u7684\u9519\u8bef\u5904\u7406\u5f04\u7684\u6655\u5934\u8f6c\u5411\uff0c\u9519\u8bef\u7684\u5904\u7406\u65b9\u5f0f\u5f88\u591a\uff0c\u6709\u9488\u5bf9\u7684Option\u7c7b\u578b\u7684\uff0c\u8fd8\u6709\u9488\u5bf9Result\u7c7b\u578b\u7684\uff0c\u8fd8\u53ef\u4ee5\u81ea\u5b9a\u4e49\u9519\u8bef\u7c7b\u578b\uff0c \u4ee5\u53ca\u4f7f\u7528\u8bf8\u5982failure\u8fd9\u6837\u7684\u4e09\u65b9\u5e93\u6765\u8fdb\u884c\u9519\u8bef\u5904\u7406\u7b49\uff0c\u4e3a\u6b64\u6211\u8bd5\u56fe\u68b3\u7406\u672c\u6587\uff0c\u5c06\u5e38\u89c1\u7684\u9519\u8bef\u5904\u7406\u65b9\u5f0f\u8fdb\u884c\u603b\u7ed3\u3002 panic! \u7b2c\u4e00\u79cd\u9519\u8bef\u7684\u5904\u7406\u65b9\u5f0f\uff0c\u6700\u4e3a\u7b80\u5355\uff0c\u4e5f\u662f\u6700\u4e3a\u7c97\u66b4\u7684\uff0c\u76f4\u63a5\u7ed3\u675f\u7a0b\u5e8f\uff0c\u5178\u578b\u7684\u51e0\u4e2a\u4f7f\u7528\u573a\u666f\u5982\u4e0b: Out-of-bounds array access Integer division by zero Calling .unwrap() on an Option that happens to be None Assertion failure \u4e0b\u9762\u662f\u56e0\u4e3a\u96640\u5bfc\u81f4 panic \u7684\u4e00\u4e2a\u4f8b\u5b50: 1 2 3 4 5 6 7 8 fn pirate_share ( total : u64 , crew_size : usize ) -> u64 { let half = total / 2 ; half / crew_size as u64 } fn main () { pirate_share ( 100 , 0 ); } \u4e00\u4e0d\u5c0f\u5fc3\u4f20\u5165\u4e860\u540e\u4f1a\u5bfc\u81f4\u9664\u4ee50\uff0c\u89e6\u53d1 panic \uff0c panic \u7684\u8c03\u7528\u4f1a\u5bfc\u81f4\u6808\u89e3\u65cb(unwinding)\uff0c\u6700\u540e\u4f7f\u5f97\u8fdb\u7a0b\u9000\u51fa\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u5176\u5b9e\u7c7b\u4f3cC++\u7684\u5f02\u5e38\u6ca1\u6709\u6355\u83b7\u7684\u6548\u679c\u3002 \u4f46\u662f\u548cC++\u5f02\u5e38\u4e0d\u540c\u7684\u662f\uff0c panic \u53d1\u751f\u7684\u7ebf\u7a0b\u5982\u679c\u4e0d\u662f\u4e3b\u7ebf\u7a0b\u662f\u4e0d\u4f1a\u5bfc\u81f4\u7a0b\u5e8f\u9000\u51fa\u7684\u3002\u800cC++\u5f02\u5e38\u4f1a\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u5c0f\u7684\u4f8b\u5b50\uff1a \u6808\u89e3\u65cb\u4f1a\u5bf9\u8c03\u7528\u5bf9\u8c61\u7684\u81ea\u5b9a\u4e49\u7684drop\u65b9\u6cd5\u8fdb\u884c\u8d44\u6e90\u6e05\u7406\uff0c\u4ee5\u53ca\u91ca\u653e\u5185\u5b58\u3001\u5173\u95ed\u6587\u4ef6\u7b49 1 2 3 4 5 6 7 8 9 10 11 12 13 fn pirate_share ( total : u64 , crew_size : usize ) -> u64 { let half = total / 2 ; half / crew_size as u64 } fn main () { let handle = std :: thread :: spawn ( || { pirate_share ( 100 , 0 ); }); handle . join (). unwrap_or (()); println! ( \"exit success\" ); } \u5c06 panic! \u7684\u4ee3\u7801\u653e\u5165\u4e00\u4e2a\u5355\u72ec\u7684\u7ebf\u7a0b\u4e2d\u8fd0\u884c\uff0c\u7ebf\u7a0b panic! \u5e76\u6ca1\u6709\u5f71\u54cd\u4e3b\u7ebf\u7a0b\u4e2d\u8fd9\u6761\u8bed\u53e5\u7684\u6267\u884c println!(\"exit success\"); \u3002 \u5982\u679c\u5728 unwinding \u7684\u65f6\u5019\uff0c\u8c03\u7528\u5bf9\u8c61\u7684\u81ea\u5b9a\u4e49drop\u65b9\u6cd5\u65f6\u518d\u6b21\u89e6\u53d1 panic \u8fd9\u4f1a\u5bfc\u81f4\u5806\u6808\u89e3\u65cb\u7ed3\u675f\uff0c\u76f4\u63a5\u9000\u51fa\u7a0b\u5e8f\uff0c\u4f8b\u5982\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 struct Test { is_panic : bool , count : u64 , } impl Drop for Test { fn drop ( & mut self ) { if self . is_panic { panic! ( \"next panic\" ); } println! ( \"Dropping! {}\" , self . count ); } } fn pirate_share ( total : u64 , crew_size : usize ) -> u64 { let half = total / 2 ; half / crew_size as u64 } fn main () { let x0 = Test { count : 0 , is_panic : false , }; let x1 = Test { count : 1 , is_panic : false , // \u6539\u6210true\u540e\u4f1a\u5bfc\u81f4\u6ca1\u6709\u4efb\u4f55\u8f93\u51fa }; pirate_share ( 100 , 0 ); } \u4e0a\u9762\u7684\u4ee3\u7801\u8fd0\u884c\u540e\u8f93\u51fa: 1 2 Dropping! 1 Dropping! 0 \u8fd9\u662f\u56e0\u4e3a panic! \u89e6\u53d1\u4e86 unwinding \u5bfc\u81f4\u81ea\u5b9a\u4e49\u7684drop\u65b9\u6cd5\u7684\u8c03\u7528\uff0c\u6309\u7167\u9006\u5e8f(\u5148\u6784\u9020\u7684\u5bf9\u8c61\u540e\u8c03\u7528)\u8fdb\u884c\u4e86\u8f93\u51fa\uff0c\u6240\u4ee5\u7ed3\u679c\u5c31\u662f\u4e0a\u9762\u8fd9\u4e2a\u6837\u5b50\u4e86\u3002 \u5982\u679c\u5c06 x1 \u5bf9\u8c61\u7684 is_panic \u5c5e\u6027\u8bbe\u7f6e\u4e3atrue\uff0c\u4f1a\u89e6\u53d1\u7b2c\u4e8c\u6b21panic\uff0c\u8fd9\u4e2a\u65f6\u5019\u4f1a\u76f4\u63a5\u9000\u51fa\u6574\u4e2a\u8fdb\u7a0b\uff0c\u4e0d\u505a\u4efb\u4f55\u6e05\u7406\u52a8\u4f5c\uff0c\u6240\u4ee5\u4e0d\u4f1a\u6709\u4efb\u4f55\u8f93\u51fa\u3002 panic! \u7684\u8c03\u7528\u4f1a\u89e6\u53d1 unwinding \uff0c\u8fd9\u53ea\u662f\u9ed8\u8ba4\u884c\u4e3a\uff0c\u5e76\u4e0d\u4ee3\u8868\u4e00\u5b9a\u8981\u505aunwinding\uff0c\u4e5f\u53ef\u4ee5\u9009\u62e9\u76f4\u63a5\u9000\u51fa\u8fdb\u7a0b\uff0c\u4e0d\u505a\u4efb\u4f55\u6e05\u7406\u52a8\u4f5c\uff0c\u5e26\u6765\u7684\u597d\u5904\u5c31\u662f\u53ef\u4ee5\u51cf\u5c11\u4ee3\u7801\u7684\u5927\u5c0f\u3002 \u53ef\u4ee5\u901a\u8fc7\u7ed9rustc\u6dfb\u52a0 -C panic=abort \u9009\u9879\u6765\u5f00\u542f\uff0c \u5982\u679c\u662fcargo\u7684\u8bdd\uff0c\u53ef\u4ee5\u901a\u8fc7profile\u6765\u8bbe\u7f6e 1 2 3 4 5 [ profile . dev ] panic = \"abort\" [ profile . release ] panic = \"abort\" Option Rust\u4e2d\u9519\u8bef\u5904\u7406\u53ef\u4ee5\u4f7f\u7528Option\u6765\u5b9e\u73b0\uff0c\u5982\u679c\u6210\u529f\u5c31\u8fd4\u56de Some(value) \uff0c\u5982\u679c\u5931\u8d25\u5c31\u8fd4\u56de None match 1 2 3 4 5 6 7 fn main () { let file_name = \"footbar.rs\" ; match file_name . find ( '.' ) { None => println! ( \"No file extension found.\" ), Some ( i ) => println! ( \"File extension: {}\" , & file_name [ i + 1 .. ]), } } find\u65b9\u6cd5\u8fd4\u56de\u7684\u5c31\u662f Option<usize> \uff0c\u5982\u679c\u6210\u529f\u627e\u5230\u5c31\u8fd4\u56de\u5bf9\u5e94\u7684\u4f4d\u7f6e\uff0c\u5426\u5219\u5c31\u8fd4\u56de None \uff0c\u7c7b\u6bd4\u4e8e\u5176\u4ed6\u8bed\u8a00\u53ef\u80fd\u5c31\u662f\u901a\u8fc7\u8fd4\u56de\u4e00\u4e2a -1 \u6765\u8868\u793a\u6ca1\u6709\u627e\u5230\u3002 \u8fd9\u79cd\u901a\u8fc7match\u6a21\u5f0f\u5339\u914d\u7684\u65b9\u5f0f\u663e\u5f97\u4ee3\u7801\u975e\u5e38\u81c3\u80bf\uff0c\u6211\u4eec\u5e0c\u671b\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e9b\u7b80\u5355\u7684\u65b9\u6cd5\u6765\u5b9e\u73b0\u9519\u8bef\u5904\u7406\u3002 unwrap \u5176\u5b9e\u73b0\u5927\u81f4\u5982\u4e0b\uff0c\u901a\u8fc7match\u8fdb\u884c\u5339\u914d\uff0c\u5982\u679c\u662f None \u5c31 panic 1 2 3 4 5 6 7 8 9 10 11 12 13 14 enum Option < T > { None , Some ( T ), } impl < T > Option < T > { fn unwrap ( self ) -> T { match self { Option :: Some ( val ) => val , Option :: None => panic! ( \"called `Option::unwrap()` on a `None` value\" ), } } } map \u5982\u679c\u6267\u884c\u6210\u529f\uff0c\u90a3\u4e48\u63a5\u4e0b\u6765\u6211\u4eec\u53ef\u80fd\u4f1a\u5bf9\u5176\u8fd4\u56de\u503c\u8fdb\u884c\u8fdb\u4e00\u6b65\u7684\u5904\u7406\uff0c\u8fd9\u4e2a\u65f6\u5019\u53ef\u4ee5\u901a\u8fc7map\u7cfb\u5217\u65b9\u6cd5\u8fdb\u884c\u94fe\u5f0f\u5904\u7406\u3002 map\u7684\u5b9e\u73b0\u7c7b\u4f3c\u4e0b\u9762\u4ee3\u7801\uff0c\u5f53\u6210\u529f\u8fd4\u56de\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u5c06\u8fd4\u56de\u503c\u4f20\u9012\u5230\u4e00\u4e2acallback\u4e2d\u8fdb\u884c\u56de\u8c03\uff0c\u6700\u540e\u5c06callback\u7684\u8fd4\u56de\u503c\u5c01\u88c5\u6210Option\u7c7b\u578b\u3002 \u4ece\u800c\u5b9e\u73b0 Option<T> \u5230 Option<A> \u7684\u7c7b\u578b\u8f6c\u6362\u3002 1 2 3 4 5 6 fn map < F , T , A > ( option : Option < T > , f : F ) -> Option < A > where F : FnOnce ( T ) -> A { match option { None => None , Some ( value ) => Some ( f ( value )), } } \u9488\u5bf9\u4e0a\u9762\u7684\u4f8b\u5b50\uff0c\u901a\u8fc7map\u5bf9\u8fd4\u56de\u503c\u8fdb\u884c\u4e86\u4e8c\u6b21\u5904\u7406\u3002 1 2 3 4 5 6 7 8 9 10 fn main () { let file_name = \"footbar.rs\" ; match file_name . find ( '.' ). map ( | value | { // skip . return value + 1 ; }) { Some ( value ) => println! ( \"File extension: {}\" , & file_name [ value .. ]), None => println! ( \"No file extension found.\" ), } } map_or \u9700\u8981\u63d0\u4f9b\u4e00\u4e2a\u9ed8\u8ba4\u503c\uff0c\u5f53Option\u662fNone\u7684\u65f6\u5019\uff0c\u5c31\u4f1a\u8fd4\u56de\u8fd9\u4e2a\u9ed8\u8ba4\u503c\uff0c\u6b64\u5916\u8fd8\u9700\u8981\u63d0\u4f9b\u4e00\u4e2acallback\uff0c\u7528\u4e8e\u5f53Option\u662fSome\u7684\u65f6\u5019\u8fdb\u884c\u56de\u8c03\u5904\u7406 1 2 3 4 5 6 pub fn map_or < U , F : FnOnce ( T ) -> U > ( self , default : U , f : F ) -> U { match self { Some ( t ) => f ( t ), None => default , } } \u4e0b\u9762\u662f\u4e00\u4e2a\u4f7f\u7528\u7684\u4f8b\u5b50\uff0c\u901a\u8fc7 map_or \u63d0\u4f9b\u9ed8\u8ba4\u503c\uff0c\u6574\u4e2amap\u7cfb\u5217\u90fd\u662f\u5bf9\u7ed3\u679c\u7684\u4e8c\u6b21\u5904\u7406\uff0c\u6240\u4ee5\u53ef\u4ee5\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u7c7b\u578b\u3002 1 2 3 4 5 6 7 fn main () { let file_name = \"footbar.rs\" ; let extensions = file_name . find ( '.' ). map_or ( \"exe\" . to_owned (), | value | { return String :: from ( & file_name [ value + 1 .. ]); }); println! ( \"extensions: {}\" , extensions ); } map_or_else \u548c map_or \u7c7b\u4f3c\uff0c\u4e0d\u540c\u7684\u662f\uff0c map_or \u662f\u76f4\u63a5\u63d0\u4f9b\u9ed8\u8ba4\u503c\uff0c\u800c map_or_else \u5219\u662f\u901a\u8fc7callback\u7684\u65b9\u5f0f\u6765\u63d0\u4f9b\u9ed8\u8ba4\u503c\u3002 1 2 3 4 5 6 pub fn map_or_else < U , D : FnOnce () -> U , F : FnOnce ( T ) -> U > ( self , default : D , f : F ) -> U { match self { Some ( t ) => f ( t ), None => default (), } } unwrap_or unwrap \u5728\u7b49\u4e8e None \u7684\u65f6\u5019\u901a\u8fc7 panic \u6765\u7ed3\u675f\u7a0b\u5e8f\uff0c\u800c unwrap_or \u5219\u662f\u901a\u8fc7\u63d0\u4f9b\u9ed8\u8ba4\u503c\u7684\u65b9\u5f0f\u6765\u5904\u7406\u3002 1 2 3 4 5 fn main () { let file_name = \"footbar.rs\" ; let pos = file_name . find ( '.' ). unwrap_or ( 0 ); println! ( \"pos = {}, extensions: {}\" , pos , & file_name [ pos + 1 .. ]); } unwrap_or_else unwrap_or_else \u548c unwrap_or \u90fd\u662f\u9488\u5bf9 None \u6765\u5904\u7406\u7684\uff0c\u4f46\u662f\u524d\u8005\u662f\u901a\u8fc7callback\u7684\u65b9\u5f0f\u6765\u63d0\u4f9b\u9ed8\u8ba4\u503c\uff0c\u800c\u540e\u8005\u662f\u76f4\u63a5\u63d0\u4f9b\u9ed8\u8ba4\u503c\u3002 1 2 3 4 5 6 7 fn main () { let file_name = \"footbar.rs\" ; let pos = file_name . find ( '.' ). unwrap_or_else ( || { 0 }); println! ( \"pos = {}, extensions: {}\" , pos , & file_name [ pos + 1 .. ]); } and_then \u76f8\u6bd4\u4e0emap\uff0cand_then\u533a\u522b\u5e76\u4e0d\u5927\uff0c\u524d\u8005\u662f\u8fd4\u56devalue\uff0c\u7136\u540e\u88ab\u5305\u88c5\u6210\u4e00\u4e2aOption\uff0c\u540e\u8005\u662f\u76f4\u63a5\u8fd4\u56deOption\uff0c\u9664\u6b64\u4e4b\u5916\u5e76\u6ca1\u6709\u5176\u4ed6\u533a\u522b\u3002 1 2 3 4 5 6 7 fn and_then < F , T , A > ( option : Option < T > , f : F ) -> Option < A > where F : FnOnce ( T ) -> Option < A > { match option { None => None , Some ( value ) => f ( value ), } } Result Rust\u4e2d\u6ca1\u6709\u5f02\u5e38\uff0c\u9519\u8bef\u90fd\u662f\u901a\u8fc7\u8fd4\u56de\u503c\u6765\u8868\u793a\uff0c\u800c Option \u53ea\u80fd\u8868\u793a\u662f\u5426\u53d1\u751f\u4e86\u9519\u8bef\uff0c\u5982\u679c\u53d1\u751f\u4e86\u9519\u8bef\uff0c\u9519\u8bef\u7684\u5185\u5bb9\u662f\u4ec0\u4e48\uff0c\u5e76\u6ca1\u6709\u529e\u6cd5\u4f20\u9012\u51fa\u6765\uff0c\u800c Result \u53ef\u4ee5\uff0c\u5176\u5b9a\u4e49\u5982\u4e0b: 1 2 3 4 enum Result < T , E > { Ok ( T ), Err ( E ), } \u4e0b\u9762\u662f\u4e00\u4e2a\u7528 Result \u6765\u4f20\u9012\u9519\u8bef\u5185\u5bb9\u7684\u4f8b\u5b50: 1 fn get_weather ( location : LatLng ) -> Result < WeatherReport , io :: Error > \u9488\u5bf9\u8fd4\u56de\u7684Result\u7c7b\u578b\u6709\u51e0\u79cd\u5904\u7406\u65b9\u5f0f\uff0c\u7b2c\u4e00\u79cd\u6700\u4e3a\u5927\u5bb6\u719f\u6089\u7684\u5c31\u662f match \u8fdb\u884c\u6a21\u5f0f\u5339\u914d\u3002 match 1 2 3 4 5 6 7 8 9 match get_weather ( hometown ) { Ok ( report ) => { display_weather ( hometown , & report ); } Err ( err ) => { println! ( \"error querying the weather: {}\" , err ); schedule_weather_retry (); } } is_error and is_ok 1 2 3 4 5 6 7 8 use std :: fs :: File ; fn main () { let f = File :: open ( \"/tmp/test\" ); if f . is_err () { println! ( \"open file failure\" ); } } \u901a\u8fc7 is_error \u548c is_ok \u53ef\u4ee5\u77e5\u9053\u662f\u5426\u6210\u529f\u8fd8\u662f\u5931\u8d25\uff0c\u8981\u60f3\u62ff\u5230\u6210\u529f\u8fd4\u56de\u7684\u503c\u6216\u8005\u5931\u8d25\u8fd4\u56de\u7684\u9519\u8bef\u9700\u8981\u901a\u8fc7 ok() \u548c err() \u65b9\u6cd5\uff0c\u8fd9\u4e24\u4e2a\u65b9\u6cd5\u8fd4\u56de\u7684\u90fd\u662fOption\uff0c\u6240\u4ee5\u8fd8\u9700\u8981\u518d\u89e3\u4e00\u6b21Option 1 2 3 4 5 6 7 8 9 10 use std :: fs :: File ; fn main () { let f = File :: open ( \"/tmp/test\" ); if f . is_err () { println! ( \"open file failure {}\" , f . err (). unwrap ()); } else { println! ( \"open file success {:?}\" , f . ok (). unwrap ()); } } unwrap_or(fallback) \u4ec5\u5f53\u6210\u529f\u65f6\u5019\u76f4\u63a5\u8fd4\u56de\u6210\u529f\u7684\u503c\uff0c\u5982\u679c\u662f\u9519\u8bef\u5c31\u8fd4\u56de\u63d0\u4f9b\u7684\u9ed8\u8ba4\u503cfallback 1 2 3 4 5 6 7 8 9 10 11 12 13 fn test_error ( is_ok : bool ) -> Result < String , std :: io :: Error > { if is_ok { return Ok ( \"test\" . to_owned ()); } return Err ( std :: io :: Error :: from ( std :: io :: ErrorKind :: Other )) } fn main () { let default_result = test_error ( false ). unwrap_or ( \"default\" . to_owned ()); assert_eq! ( default_result , \"default\" . to_owned ()); let return_result = test_error ( true ). unwrap_or ( \"default\" . to_owned ()); assert_eq! ( return_result , \"test\" . to_owned ()) } unwrap_or_else(fallback_fn) \u548c unrwap_or \u7c7b\u4f3c\uff0c\u53ea\u4e0d\u8fc7\u662f\u901a\u8fc7callback\u7684\u65b9\u5f0f\u6765\u63d0\u4f9b\u9ed8\u8ba4\u503c\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u63d0\u4f9b\u9ed8\u8ba4\u503c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 fn test_error ( is_ok : bool ) -> Result < String , std :: io :: Error > { if is_ok { return Ok ( \"test\" . to_owned ()); } return Err ( std :: io :: Error :: from ( std :: io :: ErrorKind :: Other )) } fn main () { let default_result = test_error ( false ). unwrap_or_else ( | _err | { \"default\" . to_owned () }); assert_eq! ( default_result , \"default\" . to_owned ()); let return_result = test_error ( true ). unwrap_or_else ( | _err | { \"default\" . to_owned () }); assert_eq! ( return_result , \"test\" . to_owned ()) } ok_or \u76f8\u6bd4\u4e8e Option \uff0c Result \u63d0\u4f9b\u4e86\u9519\u8bef\u7c7b\u578b\uff0c\u901a\u8fc7 ok_or \u53ef\u4ee5\u5c06\u4e00\u4e2a Option \u8f6c\u6362\u4e3a Result 1 2 3 4 5 6 pub fn ok_or < E > ( self , err : E ) -> Result < T , E > { match self { Some ( v ) => Ok ( v ), None => Err ( err ), } } 1 2 3 4 5 6 7 8 9 10 11 12 fn test_option ( is_none : bool ) -> Option < String > { if is_none { None } else { \"test\" . to_owned () } } fn main () { // \u5c06option<String> \u8f6c\u6362\u4e3a Result<String, std::io::ErrorKind> let result = test_option ( false ). ok_or ( std :: io :: ErrorKind :: NotFound ); } map and map_err \u5f53\u8fd4\u56de\u6210\u529f\u7684\u65f6\u5019\uff0c\u901a\u8fc7map\u6765\u5904\u7406\u8fd4\u56de\u7684\u503c\uff0c\u800c\u5f53\u8fd4\u56de\u9519\u8bef\u7684\u65f6\u5019\uff0c\u901a\u8fc7 map_err \u6765\u5904\u7406\u9519\u8bef\u7684\u503c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 use std :: fs ; use std :: io :: Write ; fn main () { let file = fs :: File :: open ( \"/tmp/test\" ). as_mut (). map ( | file | { file . write ( & [ 1 , 2 , 4 ]); // \u53ef\u4ee5\u8fd4\u56de\u53e6\u5916\u4e00\u79cd\u7c7b\u578b\uff0c\u6700\u540e\u4f1a\u88ab\u81ea\u52a8\u6dfb\u52a0Ok(file) return file ; }). map_err ( | err | { println! ( \"Open error {}\" , err ); // \u53ef\u4ee5\u8fd4\u56de\u53e6\u5916\u4e00\u79cd\u9519\u8bef\u7c7b\u578b\uff0c\u540c\u6837\u4f1a\u81ea\u52a8\u6dfb\u52a0Err(std::io::ErrorKind::NotFound) return std :: io :: ErrorKind :: NotFound ; }); } and_then \u5c06 Result \u6210\u529f\u8fd4\u56de\u7684\u503c\u4f20\u9012\u7ed9callback\uff0c\u8fd9\u4e2acallback\u53ef\u4ee5\u8fd4\u56de\u53e6\u5916\u4e00\u79cd\u7c7b\u578b\u7684\u6210\u529f\u503c\uff0c\u8fdb\u800c\u5b9e\u73b0\u7c7b\u578b\u8f6c\u6362\uff0c\u548cmap\u4e0d\u540c\u7684\u662f\uff0c\u9700\u8981\u81ea\u5df1\u5305\u88c5\u4e0a Ok 1 2 3 4 5 6 7 fn main () { let number_string = \"125\" . to_owned (); // \u5c06Result<i32, ParseIntError> \u8f6c\u6362\u4e3aResult<String, ParseIntError> let number = number_string . parse :: < i32 > (). and_then ( | value | { Ok ( \"string_type\" . to_owned ()) }); } \u7ec4\u5408\u5904\u7406 Option \u548c Result \u4e0b\u9762\u662f\u4e00\u4e2a\u4ee3\u7801\u4e2d\u9700\u8981\u540c\u65f6\u5904\u7406 Option \u548c Result \u4e24\u79cd\u8fd4\u56de\u7c7b\u578b\uff0c\u901a\u8fc7\u6700\u7b80\u5355\u7684unwrap\u6765\u5904\u7406\u3002 1 2 3 4 5 6 7 8 9 10 use std :: env ; fn main () { let mut argv = env :: args (); // \u8fd4\u56de\u7684\u662fOption\u7c7b\u578b let arg : String = argv . nth ( 1 ). unwrap (); // error 1 // \u8fd4\u56de\u7684\u662fResult\u7c7b\u578b let n : i32 = arg . parse (). unwrap (); // error 2 println! ( \"{}\" , 2 * n ); } \u5982\u679c\u5c06 argv.nth \u548c arg.parse \u653e\u5230\u4e00\u4e2a\u51fd\u6570\u4e2d\uff0c\u5982\u4f55\u7edf\u4e00\u8fd4\u56de\u503c? \u6211\u4eec\u4e0d\u80fd\u518d\u7b80\u5355\u7684\u901a\u8fc7unwrap\u7ed3\u675f\u7a0b\u5e8f\u7684\u65b9\u5f0f\u6765\u5904\u7406\u4e86\u3002Option\u548cResult\u76f8\u4e92\u8f6c\u6362\u624d\u662f\u6700\u4f73\u89e3\u51b3\u65b9\u6848\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 use std :: env ; fn double_arg ( mut argv : env :: Args ) -> Result < i32 , String > { argv . nth ( 1 ) // \u901a\u8fc7ok_or\u8f6c\u6362\u4e3aResult . ok_or ( \"Please give at least one argument\" . to_owned ()) // \u901a\u8fc7and_then\u5c06Result<String, String>\uff0c\u8f6c\u6362\u4e3a<i32, String> // . and_then ( | arg | arg . parse :: < i32 > (). map_err ( | err | err . to_string ())) } fn main () { match double_arg ( env :: args ()) { Ok ( n ) => println! ( \"{}\" , n ), Err ( err ) => println! ( \"Error: {}\" , err ), } } \u63a5\u4e0b\u6765\u6211\u4eec\u770b\u4e00\u4e2a\u66f4\u590d\u6742\u7684\u4f8b\u5b50\uff0c\u8fd9\u4e2a\u4f8b\u5b50\u53ef\u80fd\u4f1a\u8fd4\u56de\u591a\u79cd\u9519\u8bef\uff0c\u6211\u4eec\u5148\u4f7f\u7528\u6700\u7b80\u5355\u7684unwrap\u7248\u672c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 use std :: fs :: File ; use std :: io :: Read ; use std :: path :: Path ; fn file_double < P : AsRef < Path >> ( file_path : P ) -> i32 { let mut file = File :: open ( file_path ). unwrap (); // error 1 let mut contents = String :: new (); file . read_to_string ( & mut contents ). unwrap (); // error 2 let n : i32 = contents . trim (). parse (). unwrap (); // error 3 2 * n } fn main () { let doubled = file_double ( \"foobar\" ); println! ( \"{}\" , doubled ); } \u63a5\u4e0b\u6765\u6211\u4eec\u5f00\u59cb\u6539\u9020\uff0c\u5c06\u9519\u8bef\u901a\u8fc7 Result \u8fd4\u56de\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 use std :: fs :: File ; use std :: io :: Read ; use std :: path :: Path ; fn file_double < P : AsRef < Path >> ( file_path : P ) -> Result < i32 , String > { File :: open ( file_path ) // \u5c06Result<File, Error> \u8f6c\u6362\u4e3aResult<File, String> . map_err ( | err | err . to_string ()) // \u63a5\u7740\u5c06Result<File, String> \u8f6c\u6362\u4e3aResult<String, String> . and_then ( | mut file | { let mut contents = String :: new (); file . read_to_string ( & mut contents ) . map_err ( | err | err . to_string ()) . map ( | _ | contents ) }) // \u5c06Result<String, String> \u8f6c\u6362\u4e3a <i32, String> . and_then ( | contents | { contents . trim (). parse :: < i32 > () . map_err ( | err | err . to_string ()) }) // \u5bf9\u6700\u540e\u7684\u7ed3\u679c\u8fdb\u884c\u4e86\u5904\u7406 . map ( | n | 2 * n ) } fn main () { match file_double ( \"foobar\" ) { Ok ( n ) => println! ( \"{}\" , n ), Err ( err ) => println! ( \"Error: {}\" , err ), } } \u901a\u8fc7 Option \u548c Result \u76f8\u4e92\u8f6c\u6362\uff0c\u53ef\u4ee5\u5c06\u51e0\u79cd\u9519\u8bef\u7c7b\u578b\u8f6c\u6362\u4e3a\u7edf\u4e00\u7684\u4e00\u79cd\uff0c\u4f46\u662f\u5982\u679c\u9519\u8bef\u7c7b\u578b\u6709\u5f88\u591a\u79cd\uff0c\u4f8b\u5982\u4e09\u79cd\uff0c\u901a\u8fc7\u7ec4\u5408 map \u3001 map_err \u3001 and_then \u4f1a\u4f7f\u5f97\u6574\u4e2a \u94fe\u5f0f\u8c03\u7528\u8d8a\u6765\u8d8a\u957f\u3002\u800c\u4e14\u5f88\u591a\u4eba\u5e76\u4e0d\u662f\u719f\u6089\u8fd9\u79cd\u901a\u8fc7\u7ec4\u5408\u5668\u6765\u5904\u7406\u9519\u8bef\u7684\u65b9\u5f0f\u3002\u5982\u679c\u5c06\u8fd9\u4e9b\u9519\u8bef\u5206\u5f00\u6765\u5904\u7406\uff0c\u9047\u5230\u9519\u8bef\u5c31return\uff0c\u4f1a\u4f7f\u5f97\u6574\u4e2a\u4ee3\u7801\u66f4\u6e05\u6670\uff0c\u4e5f\u66f4\u5bb9\u6613\u88ab\u5176\u4ed6\u4eba\u63a5\u53d7\u3002 \u4f8b\u5982\u901a\u8fc7early return\u7684\u65b9\u5f0f\u6539\u5199\u4e0a\u9762\u7684\u4ee3\u7801\uff0c\u5982\u4e0b: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 use std :: fs :: File ; use std :: io :: Read ; use std :: path :: Path ; fn file_double < P : AsRef < Path >> ( file_path : P ) -> Result < i32 , String > { let mut file = match File :: open ( file_path ) { Ok ( file ) => file , Err ( err ) => return Err ( err . to_string ()), }; let mut contents = String :: new (); if let Err ( err ) = file . read_to_string ( & mut contents ) { return Err ( err . to_string ()); } let n : i32 = match contents . trim (). parse () { Ok ( n ) => n , Err ( err ) => return Err ( err . to_string ()), }; Ok ( 2 * n ) } fn main () { match file_double ( \"foobar\" ) { Ok ( n ) => println! ( \"{}\" , n ), Err ( err ) => println! ( \"Error: {}\" , err ), } } \u6539\u6210early return\u7684\u65b9\u5f0f\u540e\uff0c\u4ee3\u7801\u53cd\u800c\u66f4\u5570\u55e6\u4e86\uff0c\u5145\u65a5\u4e86\u5927\u91cf\u7684match\u6a21\u5f0f\u5339\u914d\uff0c\u8fd9\u4e0d\u662f\u6211\u4eec\u5021\u5bfc\u7684\u7f16\u7a0b\u5b9e\u8df5\u3002\u6211\u4eec\u4ece\u4e00\u5f00\u59cb\u5c31\u8bd5\u56fe\u901a\u8fc7\u7ec4\u5408\u5668\u6765\u6d88\u9664match\u5339\u914d\u3002 \u901a\u8fc7 ? \u53ef\u4ee5\u4f7f\u5f97early return\u7684\u8fd9\u79cd\u65b9\u5f0f\u66f4\u6e05\u6670\uff0c\u907f\u514d\u5927\u91cf\u7684match\u6a21\u5f0f\u5339\u914d\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 use std :: fs :: File ; use std :: io :: Read ; use std :: path :: Path ; fn file_double < P : AsRef < Path >> ( file_path : P ) -> Result < i32 , String > { let mut file = File :: open ( file_path ). map_err ( | e | e . to_string ()) ? ; let mut contents = String :: new (); file . read_to_string ( & mut contents ). map_err ( | e | e . to_string ()) ? ; let n = contents . trim (). parse :: < i32 > (). map_err ( | e | e . to_string ()) ? ; Ok ( 2 * n ) } fn main () { match file_double ( \"foobar\" ) { Ok ( n ) => println! ( \"{}\" , n ), Err ( err ) => println! ( \"Error: {}\" , err ), } } \u5230\u6b64\u4e3a\u6b62\u6211\u4eec\u7684\u4ee3\u7801\uff0c\u770b\u8d77\u6765\u5df2\u7ecf\u6bd4\u8f83\u6e05\u6670\u4e86\uff0c\u4f46\u662f\u4ecd\u7136\u6709\u4e00\u4e9b map_err \u7684\u8c03\u7528\uff0c\u7528\u6765\u8fdb\u884c\u9519\u8bef\u7c7b\u578b\u7684\u8f6c\u6362\uff0c\u7edf\u4e00\u8f6c\u6362\u6210 String \u3002\u4f46\u662f\u8fd9\u79cd\u65b9\u5f0f\u662f\u6709\u7f3a\u70b9\u7684\u3002\u4f7f\u7528 String \u8868\u793a\u9519\u8bef\u4f1a\u4f7f\u5f97\u4ee3\u7801\u6df7\u4e71\uff0c \u6240\u6709\u7684\u9519\u8bef\u90fd\u662f String \u7c7b\u578b\uff0c\u5982\u679c\u662f\u9488\u5bf9\u6700\u7ec8\u7684\u7528\u6237\uff0c\u90a3\u4e48\u8fd4\u56de String \u7c7b\u578b\u662f\u5408\u7406\u7684\uff0c\u53ef\u4ee5\u544a\u8bc9\u7528\u6237\u53d1\u751f\u4e86\u4ec0\u4e48\u9519\u8bef\uff0c\u4f46\u662f\u5982\u679c\u662f\u5185\u90e8\u7684\u8c03\u7528\u5c31\u4e0d\u5408\u7406\u4e86\uff0c\u6ca1\u529e\u6cd5\u6839\u636e String \u7684\u5185\u5bb9\u8fdb\u884c\u9519\u8bef\u7c7b\u578b\u533a\u5206\u3002 \u5982\u679c\u6211\u4eec\u80fd\u5c06\u9047\u5230\u7684\u9519\u8bef\u7c7b\u578b\u81ea\u52a8\u8f6c\u6362\u4e3a\u4e00\u79cd\u7edf\u4e00\u7684\u7c7b\u578b\uff0c\u5e76\u4e14\u53ef\u4ee5\u533a\u5206\u662f\u4f55\u79cd\u9519\u8bef\uff0c \u90a3\u4e48\u5c31\u53ef\u4ee5\u7701\u7565\u6389\u8fd9\u4e9b map_err \u7684\u8c03\u7528\u4e86\u3002\u5e78\u8fd0\u7684\u662f\uff0c\u8fd9\u6709\u5f88\u591a\u79cd\u65b9\u5f0f\u6765\u5b9e\u73b0\u3002 \u81ea\u5b9a\u4e49\u9519\u8bef\u7c7b\u578b 1 2 3 4 5 6 7 8 9 10 use std :: io ; use std :: num ; // We derive `Debug` because all types should probably derive `Debug`. // This gives us a reasonable human readable description of `CliError` values. #[derive(Debug)] enum CliError { Io ( io :: Error ), Parse ( num :: ParseIntError ), } \u901a\u8fc7\u81ea\u5b9a\u4e49\u9519\u8bef\u7c7b\u578b\u53ef\u4ee5\u89e3\u51b3 String \u7c7b\u578b\u5e26\u6765\u7684\u7f3a\u70b9\uff0c\u4e0b\u9762\u4f7f\u7528 CliError \u6765\u66ff\u6362 String 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 use std :: fs :: File ; use std :: io :: Read ; use std :: path :: Path ; fn file_double < P : AsRef < Path >> ( file_path : P ) -> Result < i32 , CliError > { let mut file = File :: open ( file_path ). map_err ( CliError :: Io ) ? ; let mut contents = String :: new (); file . read_to_string ( & mut contents ). map_err ( CliError :: Io ) ? ; let n : i32 = contents . trim (). parse (). map_err ( CliError :: Parse ) ? ; Ok ( 2 * n ) } fn main () { match file_double ( \"foobar\" ) { Ok ( n ) => println! ( \"{}\" , n ), Err ( err ) => println! ( \"Error: {:?}\" , err ), } } \u901a\u8fc7\u81ea\u5b9a\u4e49\u9519\u8bef\u7c7b\u578b\uff0c\u5c31\u53ef\u4ee5\u77e5\u9053\u53d1\u751f\u7684\u9519\u8bef\u5230\u5e95\u662f\u54ea\u79cd\u7c7b\u578b\u7684\uff0c\u4f46\u8fd8\u662f\u6ca1\u6709\u7701\u7565\u6389\u5bf9 map_err \u7684\u8c03\u7528\uff0c\u8981\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5c31\u9700\u8981\u5f15\u5165 From traits \uff0c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 trait From < T > { fn from ( T ) -> Self ; } impl From < io :: Error > for CliError { fn from ( err : io :: Error ) -> CliError { CliError :: Io ( err ) } } impl From < num :: ParseIntError > for CliError { fn from ( err : num :: ParseIntError ) -> CliError { CliError :: Parse ( err ) } } \u901a\u8fc7\u5f15\u5165 From traits \uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u4e0d\u7528\u4f7f\u7528map_err\u4e86\uff0c\u53ef\u4ee5\u901a\u8fc7\u81ea\u52a8\u8c03\u7528 From traits \uff0c\u5c06\u4e00\u4e9b\u6807\u51c6\u9519\u8bef\u8f6c\u6362\u4e3a\u81ea\u5b9a\u4e49\u9519\u8bef\u4e86\uff0c\u8f6c\u6362\u540e\u7684\u4ee3\u7801\u5982\u4e0b: 1 2 3 4 5 6 7 fn file_double < P : AsRef < Path >> ( file_path : P ) -> Result < i32 , CliError > { let mut file = File :: open ( file_path ) ? ; let mut contents = String :: new (); file . read_to_string ( & mut contents ) ? ; let n : i32 = contents . trim (). parse () ? ; Ok ( 2 * n ) } \u4f46\u662f\u8fd9\u79cd\u6a21\u5f0f\u5b58\u5728\u4e00\u4e2a\u95ee\u9898\uff0c\u5c31\u662f\u6ca1\u529e\u6cd5\u5f88\u597d\u7684\u6269\u5c55\uff0c\u6211\u4eec\u9700\u8981\u7ed9 file_double \u51fd\u6570\u79cd\u8fd4\u56de\u7684\u6240\u6709\u53ef\u80fd\u7684\u9519\u8bef\u90fd\u6dfb\u52a0\u8f6c\u6362\u5230\u81ea\u5b9a\u4e49\u9519\u8bef\u7684 From traits \u3002 \u6211\u4eec\u662f\u5426\u6709\u66f4\u597d\u7684\u529e\u6cd5\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5462? Rust\u6807\u51c6\u5e93\u79cd\u5b9e\u73b0\u4e86\u4e0b\u9762\u8fd9\u7ec4 From traits 1 2 // \u6240\u6709\u7684Error\u90fd\u53ef\u4ee5\u81ea\u52a8\u901a\u8fc7From traits\u81ea\u52a8\u8f6c\u6362\u4e3aBox<Error> impl <' a , E : Error + ' a > From < E > for Box < Error + ' a > \u56e0\u4e3a\u6240\u6709\u7684\u6ee1\u8db3Error\u7279\u5f81\u7684\u7c7b\u578b\uff0c\u90fd\u53ef\u4ee5\u8f6c\u6362\u4e3a Box<Error> \uff0c\u56e0\u6b64\u6211\u4eec\u5176\u5b9e\u53ea\u8981\u5c06\u8fd4\u56de\u7c7b\u578b\u6539\u6210 Box<Error> \u5373\u53ef\uff0c\u8fd9\u6837\u65e0\u8bba file_double \u4e2d\u4f1a\u8fd4\u56de\u4f55\u79cd\u9519\u8bef\u7c7b\u578b\u90fd\u53ef\u4ee5\u81ea\u52a8\u8f6c\u6362\u4e3a Box<dyn Error> 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 use std :: error :: Error ; use std :: fs :: File ; use std :: io :: Read ; use std :: path :: Path ; fn file_double < P : AsRef < Path >> ( file_path : P ) -> Result < i32 , Box < dyn Error >> { let mut file = File :: open ( file_path ) ? ; let mut contents = String :: new (); file . read_to_string ( & mut contents ) ? ; let n = contents . trim (). parse :: < i32 > () ? ; Ok ( 2 * n ) } fn main () { let _res = file_double ( \"/tmp/test\" ); } \u90a3\u81ea\u5b9a\u4e49\u7684\u9519\u8bef\u662f\u5426\u4e5f\u53ef\u4ee5\u8f6c\u6362\u4e3a Error \u5462? 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 #[derive(Debug)] enum CliError { Io ( io :: Error ), Parse ( num :: ParseIntError ), } fn file_double < P : AsRef < Path >> ( file_path : P ) -> Result < i32 , Box < dyn std :: error :: Error >> { let mut contents = String :: new (); let n : i32 = contents . trim (). parse (). map_err ( CliError :: Parse ) ? ; Ok ( 2 * n ) } fn main () { match file_double ( \"foobar\" ) { Ok ( n ) => println! ( \"{}\" , n ), Err ( err ) => println! ( \"Error: {:?}\" , err ), } } // \u62a5\u9519\u5982\u4e0b: error [ E0277 ] : the trait bound ` CliError : std :: error :: Error ` is not satisfied - -> src / main . rs : 17 : 66 | 17 | let n : i32 = contents . trim (). parse (). map_err ( CliError :: Parse ) ? ; | ^ the trait ` std :: error :: Error ` is not implemented for ` CliError ` | = note : required because of the requirements on the impl of ` std :: convert :: From < CliError > ` for ` std :: boxed :: Box < dyn std :: error :: Error > ` = note : required by ` std :: convert :: From :: from ` \u81ea\u5b9a\u4e49\u7684\u9519\u8bef\u770b\u6765\u5e76\u6ca1\u6709\u5b9e\u73b0 std::error::Error \uff0c\u63a5\u4e0b\u6765\u4e3a\u6211\u4eec\u81ea\u5b9a\u4e49\u7684\u9519\u8bef\u5b9e\u73b0 std::error::Error \u7279\u5f81\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 impl fmt :: Display for CliError { fn fmt ( & self , f : & mut fmt :: Formatter ) -> fmt :: Result { match * self { // Both underlying errors already impl `Display`, so we defer to // their implementations. CliError :: Io ( ref err ) => write! ( f , \"IO error: {}\" , err ), CliError :: Parse ( ref err ) => write! ( f , \"Parse error: {}\" , err ), } } } impl error :: Error for CliError { fn description ( & self ) -> & str { // Both underlying errors already impl `Error`, so we defer to their // implementations. match * self { CliError :: Io ( ref err ) => err . description (), // Normally we can just write `err.description()`, but the error // type has a concrete method called `description`, which conflicts // with the trait method. For now, we must explicitly call // `description` through the `Error` trait. CliError :: Parse ( ref err ) => error :: Error :: description ( err ), } } fn cause ( & self ) -> Option <& error :: Error > { match * self { // N.B. Both of these implicitly cast `err` from their concrete // types (either `&io::Error` or `&num::ParseIntError`) // to a trait object `&Error`. This works because both error types // implement `Error`. CliError :: Io ( ref err ) => Some ( err ), CliError :: Parse ( ref err ) => Some ( err ), } } } \u5230\u6b64\u4e3a\u6b62\uff0c\u90a3\u4e48\u8fd9\u4e2a\u81ea\u5b9a\u4e49\u7684\u9519\u8bef\u5c31\u53ef\u4ee5\u81ea\u52a8\u8f6c\u6362\u4e3a std::error::Error \u4e86\u3002\u76f8\u6bd4\u4e8e\u901a\u8fc7 From traits \u6765\u5904\u7406\u9519\u8bef\u7684\u65b9\u6cd5\u6765\u8bf4\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u53ef\u6269\u5c55\u6027\u66f4\u4f73\uff0c \u4f46\u7f3a\u70b9\u5c31\u662f Box<dyn std::error::Error> \u65e0\u6cd5\u77e5\u9053\u5176\u5177\u4f53\u7684\u9519\u8bef\u7c7b\u578b\u3002\u9700\u8981\u81ea\u5df1\u901a\u8fc7 downcast_ref \u8fdb\u884c\u7c7b\u578b\u8f6c\u6362\uff0c\u9664\u6b64\u4e4b\u5916\u5c31\u53ea\u80fd\u901a\u8fc7 description \u548c cause \u65b9\u6cd5\u83b7\u53d6\u5230\u9519\u8bef\u63cf\u8ff0\u548c\u5bfc\u81f4\u9519\u8bef\u7684\u539f\u56e0\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 use std :: error :: Error ; use std :: fmt :: { self , Display , Formatter }; #[derive(Debug)] struct MyError { } impl Error for MyError { fn description ( & self ) -> & str { \"description\" } } impl Display for MyError { fn fmt ( & self , formatter : & mut Formatter ) -> Result < (), fmt :: Error > { write! ( formatter , \"description\" ) } } fn main () { let error : Box < Error > = Box :: new ( MyError {}); let downcasted = error . downcast_ref :: < MyError > (); println! ( \"{:?}\" , downcasted ); // OK: prints Some(MyError). } \u4f7f\u7528\u8d77\u6765\u8fd8\u662f\u7565\u663e\u9ebb\u70e6\uff0c\u9700\u8981\u505a\u4e00\u6b21\u8f6c\u578b\uff0c\u8fd8\u9700\u8981\u5224\u65ad\u662f\u5426\u8f6c\u578b\u6210\u529f\u7b49\uff0c\u90a3\u6211\u4eec\u662f\u5426\u6709\u66f4\u597d\u7684\u529e\u6cd5\u5462? Rust\u751f\u6001\u4e2d\uff0c\u6709\u5f88\u591a\u7528\u6765\u5904\u7406\u9519\u8bef\u7684 crate \uff0c\u63a5\u4e0b\u6765\u8ba9\u6211\u4eec\u770b\u770b\u8fd9\u4e9b crates \u662f\u5982\u4f55\u5904\u7406\u597d\u8fd9\u4e9b\u4e8b\u60c5\u7684\u3002 \u9519\u8bef\u5904\u7406crates error-chain \u603b\u7ed3 \u53c2\u8003\u6587\u732e error-handling-survey rust-error-handling","title":"Rust\u9519\u8bef\u5904\u7406\u6307\u5357"},{"location":"%E5%8D%9A%E5%AE%A2/doc/rust/rust-error-handle/#rust","text":"\u4f5c\u4e3a\u4e00\u540d C++er \u521d\u5b66Rust\u7684\u65f6\u5019\u88ab\u5b83\u7684\u9519\u8bef\u5904\u7406\u5f04\u7684\u6655\u5934\u8f6c\u5411\uff0c\u9519\u8bef\u7684\u5904\u7406\u65b9\u5f0f\u5f88\u591a\uff0c\u6709\u9488\u5bf9\u7684Option\u7c7b\u578b\u7684\uff0c\u8fd8\u6709\u9488\u5bf9Result\u7c7b\u578b\u7684\uff0c\u8fd8\u53ef\u4ee5\u81ea\u5b9a\u4e49\u9519\u8bef\u7c7b\u578b\uff0c \u4ee5\u53ca\u4f7f\u7528\u8bf8\u5982failure\u8fd9\u6837\u7684\u4e09\u65b9\u5e93\u6765\u8fdb\u884c\u9519\u8bef\u5904\u7406\u7b49\uff0c\u4e3a\u6b64\u6211\u8bd5\u56fe\u68b3\u7406\u672c\u6587\uff0c\u5c06\u5e38\u89c1\u7684\u9519\u8bef\u5904\u7406\u65b9\u5f0f\u8fdb\u884c\u603b\u7ed3\u3002","title":"Rust\u9519\u8bef\u5904\u7406\u6307\u5357"},{"location":"%E5%8D%9A%E5%AE%A2/doc/rust/rust-error-handle/#panic","text":"\u7b2c\u4e00\u79cd\u9519\u8bef\u7684\u5904\u7406\u65b9\u5f0f\uff0c\u6700\u4e3a\u7b80\u5355\uff0c\u4e5f\u662f\u6700\u4e3a\u7c97\u66b4\u7684\uff0c\u76f4\u63a5\u7ed3\u675f\u7a0b\u5e8f\uff0c\u5178\u578b\u7684\u51e0\u4e2a\u4f7f\u7528\u573a\u666f\u5982\u4e0b: Out-of-bounds array access Integer division by zero Calling .unwrap() on an Option that happens to be None Assertion failure \u4e0b\u9762\u662f\u56e0\u4e3a\u96640\u5bfc\u81f4 panic \u7684\u4e00\u4e2a\u4f8b\u5b50: 1 2 3 4 5 6 7 8 fn pirate_share ( total : u64 , crew_size : usize ) -> u64 { let half = total / 2 ; half / crew_size as u64 } fn main () { pirate_share ( 100 , 0 ); } \u4e00\u4e0d\u5c0f\u5fc3\u4f20\u5165\u4e860\u540e\u4f1a\u5bfc\u81f4\u9664\u4ee50\uff0c\u89e6\u53d1 panic \uff0c panic \u7684\u8c03\u7528\u4f1a\u5bfc\u81f4\u6808\u89e3\u65cb(unwinding)\uff0c\u6700\u540e\u4f7f\u5f97\u8fdb\u7a0b\u9000\u51fa\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u5176\u5b9e\u7c7b\u4f3cC++\u7684\u5f02\u5e38\u6ca1\u6709\u6355\u83b7\u7684\u6548\u679c\u3002 \u4f46\u662f\u548cC++\u5f02\u5e38\u4e0d\u540c\u7684\u662f\uff0c panic \u53d1\u751f\u7684\u7ebf\u7a0b\u5982\u679c\u4e0d\u662f\u4e3b\u7ebf\u7a0b\u662f\u4e0d\u4f1a\u5bfc\u81f4\u7a0b\u5e8f\u9000\u51fa\u7684\u3002\u800cC++\u5f02\u5e38\u4f1a\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u5c0f\u7684\u4f8b\u5b50\uff1a \u6808\u89e3\u65cb\u4f1a\u5bf9\u8c03\u7528\u5bf9\u8c61\u7684\u81ea\u5b9a\u4e49\u7684drop\u65b9\u6cd5\u8fdb\u884c\u8d44\u6e90\u6e05\u7406\uff0c\u4ee5\u53ca\u91ca\u653e\u5185\u5b58\u3001\u5173\u95ed\u6587\u4ef6\u7b49 1 2 3 4 5 6 7 8 9 10 11 12 13 fn pirate_share ( total : u64 , crew_size : usize ) -> u64 { let half = total / 2 ; half / crew_size as u64 } fn main () { let handle = std :: thread :: spawn ( || { pirate_share ( 100 , 0 ); }); handle . join (). unwrap_or (()); println! ( \"exit success\" ); } \u5c06 panic! \u7684\u4ee3\u7801\u653e\u5165\u4e00\u4e2a\u5355\u72ec\u7684\u7ebf\u7a0b\u4e2d\u8fd0\u884c\uff0c\u7ebf\u7a0b panic! \u5e76\u6ca1\u6709\u5f71\u54cd\u4e3b\u7ebf\u7a0b\u4e2d\u8fd9\u6761\u8bed\u53e5\u7684\u6267\u884c println!(\"exit success\"); \u3002 \u5982\u679c\u5728 unwinding \u7684\u65f6\u5019\uff0c\u8c03\u7528\u5bf9\u8c61\u7684\u81ea\u5b9a\u4e49drop\u65b9\u6cd5\u65f6\u518d\u6b21\u89e6\u53d1 panic \u8fd9\u4f1a\u5bfc\u81f4\u5806\u6808\u89e3\u65cb\u7ed3\u675f\uff0c\u76f4\u63a5\u9000\u51fa\u7a0b\u5e8f\uff0c\u4f8b\u5982\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 struct Test { is_panic : bool , count : u64 , } impl Drop for Test { fn drop ( & mut self ) { if self . is_panic { panic! ( \"next panic\" ); } println! ( \"Dropping! {}\" , self . count ); } } fn pirate_share ( total : u64 , crew_size : usize ) -> u64 { let half = total / 2 ; half / crew_size as u64 } fn main () { let x0 = Test { count : 0 , is_panic : false , }; let x1 = Test { count : 1 , is_panic : false , // \u6539\u6210true\u540e\u4f1a\u5bfc\u81f4\u6ca1\u6709\u4efb\u4f55\u8f93\u51fa }; pirate_share ( 100 , 0 ); } \u4e0a\u9762\u7684\u4ee3\u7801\u8fd0\u884c\u540e\u8f93\u51fa: 1 2 Dropping! 1 Dropping! 0 \u8fd9\u662f\u56e0\u4e3a panic! \u89e6\u53d1\u4e86 unwinding \u5bfc\u81f4\u81ea\u5b9a\u4e49\u7684drop\u65b9\u6cd5\u7684\u8c03\u7528\uff0c\u6309\u7167\u9006\u5e8f(\u5148\u6784\u9020\u7684\u5bf9\u8c61\u540e\u8c03\u7528)\u8fdb\u884c\u4e86\u8f93\u51fa\uff0c\u6240\u4ee5\u7ed3\u679c\u5c31\u662f\u4e0a\u9762\u8fd9\u4e2a\u6837\u5b50\u4e86\u3002 \u5982\u679c\u5c06 x1 \u5bf9\u8c61\u7684 is_panic \u5c5e\u6027\u8bbe\u7f6e\u4e3atrue\uff0c\u4f1a\u89e6\u53d1\u7b2c\u4e8c\u6b21panic\uff0c\u8fd9\u4e2a\u65f6\u5019\u4f1a\u76f4\u63a5\u9000\u51fa\u6574\u4e2a\u8fdb\u7a0b\uff0c\u4e0d\u505a\u4efb\u4f55\u6e05\u7406\u52a8\u4f5c\uff0c\u6240\u4ee5\u4e0d\u4f1a\u6709\u4efb\u4f55\u8f93\u51fa\u3002 panic! \u7684\u8c03\u7528\u4f1a\u89e6\u53d1 unwinding \uff0c\u8fd9\u53ea\u662f\u9ed8\u8ba4\u884c\u4e3a\uff0c\u5e76\u4e0d\u4ee3\u8868\u4e00\u5b9a\u8981\u505aunwinding\uff0c\u4e5f\u53ef\u4ee5\u9009\u62e9\u76f4\u63a5\u9000\u51fa\u8fdb\u7a0b\uff0c\u4e0d\u505a\u4efb\u4f55\u6e05\u7406\u52a8\u4f5c\uff0c\u5e26\u6765\u7684\u597d\u5904\u5c31\u662f\u53ef\u4ee5\u51cf\u5c11\u4ee3\u7801\u7684\u5927\u5c0f\u3002 \u53ef\u4ee5\u901a\u8fc7\u7ed9rustc\u6dfb\u52a0 -C panic=abort \u9009\u9879\u6765\u5f00\u542f\uff0c \u5982\u679c\u662fcargo\u7684\u8bdd\uff0c\u53ef\u4ee5\u901a\u8fc7profile\u6765\u8bbe\u7f6e 1 2 3 4 5 [ profile . dev ] panic = \"abort\" [ profile . release ] panic = \"abort\"","title":"panic!"},{"location":"%E5%8D%9A%E5%AE%A2/doc/rust/rust-error-handle/#option","text":"Rust\u4e2d\u9519\u8bef\u5904\u7406\u53ef\u4ee5\u4f7f\u7528Option\u6765\u5b9e\u73b0\uff0c\u5982\u679c\u6210\u529f\u5c31\u8fd4\u56de Some(value) \uff0c\u5982\u679c\u5931\u8d25\u5c31\u8fd4\u56de None match 1 2 3 4 5 6 7 fn main () { let file_name = \"footbar.rs\" ; match file_name . find ( '.' ) { None => println! ( \"No file extension found.\" ), Some ( i ) => println! ( \"File extension: {}\" , & file_name [ i + 1 .. ]), } } find\u65b9\u6cd5\u8fd4\u56de\u7684\u5c31\u662f Option<usize> \uff0c\u5982\u679c\u6210\u529f\u627e\u5230\u5c31\u8fd4\u56de\u5bf9\u5e94\u7684\u4f4d\u7f6e\uff0c\u5426\u5219\u5c31\u8fd4\u56de None \uff0c\u7c7b\u6bd4\u4e8e\u5176\u4ed6\u8bed\u8a00\u53ef\u80fd\u5c31\u662f\u901a\u8fc7\u8fd4\u56de\u4e00\u4e2a -1 \u6765\u8868\u793a\u6ca1\u6709\u627e\u5230\u3002 \u8fd9\u79cd\u901a\u8fc7match\u6a21\u5f0f\u5339\u914d\u7684\u65b9\u5f0f\u663e\u5f97\u4ee3\u7801\u975e\u5e38\u81c3\u80bf\uff0c\u6211\u4eec\u5e0c\u671b\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e9b\u7b80\u5355\u7684\u65b9\u6cd5\u6765\u5b9e\u73b0\u9519\u8bef\u5904\u7406\u3002 unwrap \u5176\u5b9e\u73b0\u5927\u81f4\u5982\u4e0b\uff0c\u901a\u8fc7match\u8fdb\u884c\u5339\u914d\uff0c\u5982\u679c\u662f None \u5c31 panic 1 2 3 4 5 6 7 8 9 10 11 12 13 14 enum Option < T > { None , Some ( T ), } impl < T > Option < T > { fn unwrap ( self ) -> T { match self { Option :: Some ( val ) => val , Option :: None => panic! ( \"called `Option::unwrap()` on a `None` value\" ), } } } map \u5982\u679c\u6267\u884c\u6210\u529f\uff0c\u90a3\u4e48\u63a5\u4e0b\u6765\u6211\u4eec\u53ef\u80fd\u4f1a\u5bf9\u5176\u8fd4\u56de\u503c\u8fdb\u884c\u8fdb\u4e00\u6b65\u7684\u5904\u7406\uff0c\u8fd9\u4e2a\u65f6\u5019\u53ef\u4ee5\u901a\u8fc7map\u7cfb\u5217\u65b9\u6cd5\u8fdb\u884c\u94fe\u5f0f\u5904\u7406\u3002 map\u7684\u5b9e\u73b0\u7c7b\u4f3c\u4e0b\u9762\u4ee3\u7801\uff0c\u5f53\u6210\u529f\u8fd4\u56de\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u5c06\u8fd4\u56de\u503c\u4f20\u9012\u5230\u4e00\u4e2acallback\u4e2d\u8fdb\u884c\u56de\u8c03\uff0c\u6700\u540e\u5c06callback\u7684\u8fd4\u56de\u503c\u5c01\u88c5\u6210Option\u7c7b\u578b\u3002 \u4ece\u800c\u5b9e\u73b0 Option<T> \u5230 Option<A> \u7684\u7c7b\u578b\u8f6c\u6362\u3002 1 2 3 4 5 6 fn map < F , T , A > ( option : Option < T > , f : F ) -> Option < A > where F : FnOnce ( T ) -> A { match option { None => None , Some ( value ) => Some ( f ( value )), } } \u9488\u5bf9\u4e0a\u9762\u7684\u4f8b\u5b50\uff0c\u901a\u8fc7map\u5bf9\u8fd4\u56de\u503c\u8fdb\u884c\u4e86\u4e8c\u6b21\u5904\u7406\u3002 1 2 3 4 5 6 7 8 9 10 fn main () { let file_name = \"footbar.rs\" ; match file_name . find ( '.' ). map ( | value | { // skip . return value + 1 ; }) { Some ( value ) => println! ( \"File extension: {}\" , & file_name [ value .. ]), None => println! ( \"No file extension found.\" ), } } map_or \u9700\u8981\u63d0\u4f9b\u4e00\u4e2a\u9ed8\u8ba4\u503c\uff0c\u5f53Option\u662fNone\u7684\u65f6\u5019\uff0c\u5c31\u4f1a\u8fd4\u56de\u8fd9\u4e2a\u9ed8\u8ba4\u503c\uff0c\u6b64\u5916\u8fd8\u9700\u8981\u63d0\u4f9b\u4e00\u4e2acallback\uff0c\u7528\u4e8e\u5f53Option\u662fSome\u7684\u65f6\u5019\u8fdb\u884c\u56de\u8c03\u5904\u7406 1 2 3 4 5 6 pub fn map_or < U , F : FnOnce ( T ) -> U > ( self , default : U , f : F ) -> U { match self { Some ( t ) => f ( t ), None => default , } } \u4e0b\u9762\u662f\u4e00\u4e2a\u4f7f\u7528\u7684\u4f8b\u5b50\uff0c\u901a\u8fc7 map_or \u63d0\u4f9b\u9ed8\u8ba4\u503c\uff0c\u6574\u4e2amap\u7cfb\u5217\u90fd\u662f\u5bf9\u7ed3\u679c\u7684\u4e8c\u6b21\u5904\u7406\uff0c\u6240\u4ee5\u53ef\u4ee5\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u7c7b\u578b\u3002 1 2 3 4 5 6 7 fn main () { let file_name = \"footbar.rs\" ; let extensions = file_name . find ( '.' ). map_or ( \"exe\" . to_owned (), | value | { return String :: from ( & file_name [ value + 1 .. ]); }); println! ( \"extensions: {}\" , extensions ); } map_or_else \u548c map_or \u7c7b\u4f3c\uff0c\u4e0d\u540c\u7684\u662f\uff0c map_or \u662f\u76f4\u63a5\u63d0\u4f9b\u9ed8\u8ba4\u503c\uff0c\u800c map_or_else \u5219\u662f\u901a\u8fc7callback\u7684\u65b9\u5f0f\u6765\u63d0\u4f9b\u9ed8\u8ba4\u503c\u3002 1 2 3 4 5 6 pub fn map_or_else < U , D : FnOnce () -> U , F : FnOnce ( T ) -> U > ( self , default : D , f : F ) -> U { match self { Some ( t ) => f ( t ), None => default (), } } unwrap_or unwrap \u5728\u7b49\u4e8e None \u7684\u65f6\u5019\u901a\u8fc7 panic \u6765\u7ed3\u675f\u7a0b\u5e8f\uff0c\u800c unwrap_or \u5219\u662f\u901a\u8fc7\u63d0\u4f9b\u9ed8\u8ba4\u503c\u7684\u65b9\u5f0f\u6765\u5904\u7406\u3002 1 2 3 4 5 fn main () { let file_name = \"footbar.rs\" ; let pos = file_name . find ( '.' ). unwrap_or ( 0 ); println! ( \"pos = {}, extensions: {}\" , pos , & file_name [ pos + 1 .. ]); } unwrap_or_else unwrap_or_else \u548c unwrap_or \u90fd\u662f\u9488\u5bf9 None \u6765\u5904\u7406\u7684\uff0c\u4f46\u662f\u524d\u8005\u662f\u901a\u8fc7callback\u7684\u65b9\u5f0f\u6765\u63d0\u4f9b\u9ed8\u8ba4\u503c\uff0c\u800c\u540e\u8005\u662f\u76f4\u63a5\u63d0\u4f9b\u9ed8\u8ba4\u503c\u3002 1 2 3 4 5 6 7 fn main () { let file_name = \"footbar.rs\" ; let pos = file_name . find ( '.' ). unwrap_or_else ( || { 0 }); println! ( \"pos = {}, extensions: {}\" , pos , & file_name [ pos + 1 .. ]); } and_then \u76f8\u6bd4\u4e0emap\uff0cand_then\u533a\u522b\u5e76\u4e0d\u5927\uff0c\u524d\u8005\u662f\u8fd4\u56devalue\uff0c\u7136\u540e\u88ab\u5305\u88c5\u6210\u4e00\u4e2aOption\uff0c\u540e\u8005\u662f\u76f4\u63a5\u8fd4\u56deOption\uff0c\u9664\u6b64\u4e4b\u5916\u5e76\u6ca1\u6709\u5176\u4ed6\u533a\u522b\u3002 1 2 3 4 5 6 7 fn and_then < F , T , A > ( option : Option < T > , f : F ) -> Option < A > where F : FnOnce ( T ) -> Option < A > { match option { None => None , Some ( value ) => f ( value ), } }","title":"Option"},{"location":"%E5%8D%9A%E5%AE%A2/doc/rust/rust-error-handle/#result","text":"Rust\u4e2d\u6ca1\u6709\u5f02\u5e38\uff0c\u9519\u8bef\u90fd\u662f\u901a\u8fc7\u8fd4\u56de\u503c\u6765\u8868\u793a\uff0c\u800c Option \u53ea\u80fd\u8868\u793a\u662f\u5426\u53d1\u751f\u4e86\u9519\u8bef\uff0c\u5982\u679c\u53d1\u751f\u4e86\u9519\u8bef\uff0c\u9519\u8bef\u7684\u5185\u5bb9\u662f\u4ec0\u4e48\uff0c\u5e76\u6ca1\u6709\u529e\u6cd5\u4f20\u9012\u51fa\u6765\uff0c\u800c Result \u53ef\u4ee5\uff0c\u5176\u5b9a\u4e49\u5982\u4e0b: 1 2 3 4 enum Result < T , E > { Ok ( T ), Err ( E ), } \u4e0b\u9762\u662f\u4e00\u4e2a\u7528 Result \u6765\u4f20\u9012\u9519\u8bef\u5185\u5bb9\u7684\u4f8b\u5b50: 1 fn get_weather ( location : LatLng ) -> Result < WeatherReport , io :: Error > \u9488\u5bf9\u8fd4\u56de\u7684Result\u7c7b\u578b\u6709\u51e0\u79cd\u5904\u7406\u65b9\u5f0f\uff0c\u7b2c\u4e00\u79cd\u6700\u4e3a\u5927\u5bb6\u719f\u6089\u7684\u5c31\u662f match \u8fdb\u884c\u6a21\u5f0f\u5339\u914d\u3002 match 1 2 3 4 5 6 7 8 9 match get_weather ( hometown ) { Ok ( report ) => { display_weather ( hometown , & report ); } Err ( err ) => { println! ( \"error querying the weather: {}\" , err ); schedule_weather_retry (); } } is_error and is_ok 1 2 3 4 5 6 7 8 use std :: fs :: File ; fn main () { let f = File :: open ( \"/tmp/test\" ); if f . is_err () { println! ( \"open file failure\" ); } } \u901a\u8fc7 is_error \u548c is_ok \u53ef\u4ee5\u77e5\u9053\u662f\u5426\u6210\u529f\u8fd8\u662f\u5931\u8d25\uff0c\u8981\u60f3\u62ff\u5230\u6210\u529f\u8fd4\u56de\u7684\u503c\u6216\u8005\u5931\u8d25\u8fd4\u56de\u7684\u9519\u8bef\u9700\u8981\u901a\u8fc7 ok() \u548c err() \u65b9\u6cd5\uff0c\u8fd9\u4e24\u4e2a\u65b9\u6cd5\u8fd4\u56de\u7684\u90fd\u662fOption\uff0c\u6240\u4ee5\u8fd8\u9700\u8981\u518d\u89e3\u4e00\u6b21Option 1 2 3 4 5 6 7 8 9 10 use std :: fs :: File ; fn main () { let f = File :: open ( \"/tmp/test\" ); if f . is_err () { println! ( \"open file failure {}\" , f . err (). unwrap ()); } else { println! ( \"open file success {:?}\" , f . ok (). unwrap ()); } } unwrap_or(fallback) \u4ec5\u5f53\u6210\u529f\u65f6\u5019\u76f4\u63a5\u8fd4\u56de\u6210\u529f\u7684\u503c\uff0c\u5982\u679c\u662f\u9519\u8bef\u5c31\u8fd4\u56de\u63d0\u4f9b\u7684\u9ed8\u8ba4\u503cfallback 1 2 3 4 5 6 7 8 9 10 11 12 13 fn test_error ( is_ok : bool ) -> Result < String , std :: io :: Error > { if is_ok { return Ok ( \"test\" . to_owned ()); } return Err ( std :: io :: Error :: from ( std :: io :: ErrorKind :: Other )) } fn main () { let default_result = test_error ( false ). unwrap_or ( \"default\" . to_owned ()); assert_eq! ( default_result , \"default\" . to_owned ()); let return_result = test_error ( true ). unwrap_or ( \"default\" . to_owned ()); assert_eq! ( return_result , \"test\" . to_owned ()) } unwrap_or_else(fallback_fn) \u548c unrwap_or \u7c7b\u4f3c\uff0c\u53ea\u4e0d\u8fc7\u662f\u901a\u8fc7callback\u7684\u65b9\u5f0f\u6765\u63d0\u4f9b\u9ed8\u8ba4\u503c\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u63d0\u4f9b\u9ed8\u8ba4\u503c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 fn test_error ( is_ok : bool ) -> Result < String , std :: io :: Error > { if is_ok { return Ok ( \"test\" . to_owned ()); } return Err ( std :: io :: Error :: from ( std :: io :: ErrorKind :: Other )) } fn main () { let default_result = test_error ( false ). unwrap_or_else ( | _err | { \"default\" . to_owned () }); assert_eq! ( default_result , \"default\" . to_owned ()); let return_result = test_error ( true ). unwrap_or_else ( | _err | { \"default\" . to_owned () }); assert_eq! ( return_result , \"test\" . to_owned ()) } ok_or \u76f8\u6bd4\u4e8e Option \uff0c Result \u63d0\u4f9b\u4e86\u9519\u8bef\u7c7b\u578b\uff0c\u901a\u8fc7 ok_or \u53ef\u4ee5\u5c06\u4e00\u4e2a Option \u8f6c\u6362\u4e3a Result 1 2 3 4 5 6 pub fn ok_or < E > ( self , err : E ) -> Result < T , E > { match self { Some ( v ) => Ok ( v ), None => Err ( err ), } } 1 2 3 4 5 6 7 8 9 10 11 12 fn test_option ( is_none : bool ) -> Option < String > { if is_none { None } else { \"test\" . to_owned () } } fn main () { // \u5c06option<String> \u8f6c\u6362\u4e3a Result<String, std::io::ErrorKind> let result = test_option ( false ). ok_or ( std :: io :: ErrorKind :: NotFound ); } map and map_err \u5f53\u8fd4\u56de\u6210\u529f\u7684\u65f6\u5019\uff0c\u901a\u8fc7map\u6765\u5904\u7406\u8fd4\u56de\u7684\u503c\uff0c\u800c\u5f53\u8fd4\u56de\u9519\u8bef\u7684\u65f6\u5019\uff0c\u901a\u8fc7 map_err \u6765\u5904\u7406\u9519\u8bef\u7684\u503c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 use std :: fs ; use std :: io :: Write ; fn main () { let file = fs :: File :: open ( \"/tmp/test\" ). as_mut (). map ( | file | { file . write ( & [ 1 , 2 , 4 ]); // \u53ef\u4ee5\u8fd4\u56de\u53e6\u5916\u4e00\u79cd\u7c7b\u578b\uff0c\u6700\u540e\u4f1a\u88ab\u81ea\u52a8\u6dfb\u52a0Ok(file) return file ; }). map_err ( | err | { println! ( \"Open error {}\" , err ); // \u53ef\u4ee5\u8fd4\u56de\u53e6\u5916\u4e00\u79cd\u9519\u8bef\u7c7b\u578b\uff0c\u540c\u6837\u4f1a\u81ea\u52a8\u6dfb\u52a0Err(std::io::ErrorKind::NotFound) return std :: io :: ErrorKind :: NotFound ; }); } and_then \u5c06 Result \u6210\u529f\u8fd4\u56de\u7684\u503c\u4f20\u9012\u7ed9callback\uff0c\u8fd9\u4e2acallback\u53ef\u4ee5\u8fd4\u56de\u53e6\u5916\u4e00\u79cd\u7c7b\u578b\u7684\u6210\u529f\u503c\uff0c\u8fdb\u800c\u5b9e\u73b0\u7c7b\u578b\u8f6c\u6362\uff0c\u548cmap\u4e0d\u540c\u7684\u662f\uff0c\u9700\u8981\u81ea\u5df1\u5305\u88c5\u4e0a Ok 1 2 3 4 5 6 7 fn main () { let number_string = \"125\" . to_owned (); // \u5c06Result<i32, ParseIntError> \u8f6c\u6362\u4e3aResult<String, ParseIntError> let number = number_string . parse :: < i32 > (). and_then ( | value | { Ok ( \"string_type\" . to_owned ()) }); }","title":"Result"},{"location":"%E5%8D%9A%E5%AE%A2/doc/rust/rust-error-handle/#optionresult","text":"\u4e0b\u9762\u662f\u4e00\u4e2a\u4ee3\u7801\u4e2d\u9700\u8981\u540c\u65f6\u5904\u7406 Option \u548c Result \u4e24\u79cd\u8fd4\u56de\u7c7b\u578b\uff0c\u901a\u8fc7\u6700\u7b80\u5355\u7684unwrap\u6765\u5904\u7406\u3002 1 2 3 4 5 6 7 8 9 10 use std :: env ; fn main () { let mut argv = env :: args (); // \u8fd4\u56de\u7684\u662fOption\u7c7b\u578b let arg : String = argv . nth ( 1 ). unwrap (); // error 1 // \u8fd4\u56de\u7684\u662fResult\u7c7b\u578b let n : i32 = arg . parse (). unwrap (); // error 2 println! ( \"{}\" , 2 * n ); } \u5982\u679c\u5c06 argv.nth \u548c arg.parse \u653e\u5230\u4e00\u4e2a\u51fd\u6570\u4e2d\uff0c\u5982\u4f55\u7edf\u4e00\u8fd4\u56de\u503c? \u6211\u4eec\u4e0d\u80fd\u518d\u7b80\u5355\u7684\u901a\u8fc7unwrap\u7ed3\u675f\u7a0b\u5e8f\u7684\u65b9\u5f0f\u6765\u5904\u7406\u4e86\u3002Option\u548cResult\u76f8\u4e92\u8f6c\u6362\u624d\u662f\u6700\u4f73\u89e3\u51b3\u65b9\u6848\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 use std :: env ; fn double_arg ( mut argv : env :: Args ) -> Result < i32 , String > { argv . nth ( 1 ) // \u901a\u8fc7ok_or\u8f6c\u6362\u4e3aResult . ok_or ( \"Please give at least one argument\" . to_owned ()) // \u901a\u8fc7and_then\u5c06Result<String, String>\uff0c\u8f6c\u6362\u4e3a<i32, String> // . and_then ( | arg | arg . parse :: < i32 > (). map_err ( | err | err . to_string ())) } fn main () { match double_arg ( env :: args ()) { Ok ( n ) => println! ( \"{}\" , n ), Err ( err ) => println! ( \"Error: {}\" , err ), } } \u63a5\u4e0b\u6765\u6211\u4eec\u770b\u4e00\u4e2a\u66f4\u590d\u6742\u7684\u4f8b\u5b50\uff0c\u8fd9\u4e2a\u4f8b\u5b50\u53ef\u80fd\u4f1a\u8fd4\u56de\u591a\u79cd\u9519\u8bef\uff0c\u6211\u4eec\u5148\u4f7f\u7528\u6700\u7b80\u5355\u7684unwrap\u7248\u672c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 use std :: fs :: File ; use std :: io :: Read ; use std :: path :: Path ; fn file_double < P : AsRef < Path >> ( file_path : P ) -> i32 { let mut file = File :: open ( file_path ). unwrap (); // error 1 let mut contents = String :: new (); file . read_to_string ( & mut contents ). unwrap (); // error 2 let n : i32 = contents . trim (). parse (). unwrap (); // error 3 2 * n } fn main () { let doubled = file_double ( \"foobar\" ); println! ( \"{}\" , doubled ); } \u63a5\u4e0b\u6765\u6211\u4eec\u5f00\u59cb\u6539\u9020\uff0c\u5c06\u9519\u8bef\u901a\u8fc7 Result \u8fd4\u56de\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 use std :: fs :: File ; use std :: io :: Read ; use std :: path :: Path ; fn file_double < P : AsRef < Path >> ( file_path : P ) -> Result < i32 , String > { File :: open ( file_path ) // \u5c06Result<File, Error> \u8f6c\u6362\u4e3aResult<File, String> . map_err ( | err | err . to_string ()) // \u63a5\u7740\u5c06Result<File, String> \u8f6c\u6362\u4e3aResult<String, String> . and_then ( | mut file | { let mut contents = String :: new (); file . read_to_string ( & mut contents ) . map_err ( | err | err . to_string ()) . map ( | _ | contents ) }) // \u5c06Result<String, String> \u8f6c\u6362\u4e3a <i32, String> . and_then ( | contents | { contents . trim (). parse :: < i32 > () . map_err ( | err | err . to_string ()) }) // \u5bf9\u6700\u540e\u7684\u7ed3\u679c\u8fdb\u884c\u4e86\u5904\u7406 . map ( | n | 2 * n ) } fn main () { match file_double ( \"foobar\" ) { Ok ( n ) => println! ( \"{}\" , n ), Err ( err ) => println! ( \"Error: {}\" , err ), } } \u901a\u8fc7 Option \u548c Result \u76f8\u4e92\u8f6c\u6362\uff0c\u53ef\u4ee5\u5c06\u51e0\u79cd\u9519\u8bef\u7c7b\u578b\u8f6c\u6362\u4e3a\u7edf\u4e00\u7684\u4e00\u79cd\uff0c\u4f46\u662f\u5982\u679c\u9519\u8bef\u7c7b\u578b\u6709\u5f88\u591a\u79cd\uff0c\u4f8b\u5982\u4e09\u79cd\uff0c\u901a\u8fc7\u7ec4\u5408 map \u3001 map_err \u3001 and_then \u4f1a\u4f7f\u5f97\u6574\u4e2a \u94fe\u5f0f\u8c03\u7528\u8d8a\u6765\u8d8a\u957f\u3002\u800c\u4e14\u5f88\u591a\u4eba\u5e76\u4e0d\u662f\u719f\u6089\u8fd9\u79cd\u901a\u8fc7\u7ec4\u5408\u5668\u6765\u5904\u7406\u9519\u8bef\u7684\u65b9\u5f0f\u3002\u5982\u679c\u5c06\u8fd9\u4e9b\u9519\u8bef\u5206\u5f00\u6765\u5904\u7406\uff0c\u9047\u5230\u9519\u8bef\u5c31return\uff0c\u4f1a\u4f7f\u5f97\u6574\u4e2a\u4ee3\u7801\u66f4\u6e05\u6670\uff0c\u4e5f\u66f4\u5bb9\u6613\u88ab\u5176\u4ed6\u4eba\u63a5\u53d7\u3002 \u4f8b\u5982\u901a\u8fc7early return\u7684\u65b9\u5f0f\u6539\u5199\u4e0a\u9762\u7684\u4ee3\u7801\uff0c\u5982\u4e0b: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 use std :: fs :: File ; use std :: io :: Read ; use std :: path :: Path ; fn file_double < P : AsRef < Path >> ( file_path : P ) -> Result < i32 , String > { let mut file = match File :: open ( file_path ) { Ok ( file ) => file , Err ( err ) => return Err ( err . to_string ()), }; let mut contents = String :: new (); if let Err ( err ) = file . read_to_string ( & mut contents ) { return Err ( err . to_string ()); } let n : i32 = match contents . trim (). parse () { Ok ( n ) => n , Err ( err ) => return Err ( err . to_string ()), }; Ok ( 2 * n ) } fn main () { match file_double ( \"foobar\" ) { Ok ( n ) => println! ( \"{}\" , n ), Err ( err ) => println! ( \"Error: {}\" , err ), } } \u6539\u6210early return\u7684\u65b9\u5f0f\u540e\uff0c\u4ee3\u7801\u53cd\u800c\u66f4\u5570\u55e6\u4e86\uff0c\u5145\u65a5\u4e86\u5927\u91cf\u7684match\u6a21\u5f0f\u5339\u914d\uff0c\u8fd9\u4e0d\u662f\u6211\u4eec\u5021\u5bfc\u7684\u7f16\u7a0b\u5b9e\u8df5\u3002\u6211\u4eec\u4ece\u4e00\u5f00\u59cb\u5c31\u8bd5\u56fe\u901a\u8fc7\u7ec4\u5408\u5668\u6765\u6d88\u9664match\u5339\u914d\u3002 \u901a\u8fc7 ? \u53ef\u4ee5\u4f7f\u5f97early return\u7684\u8fd9\u79cd\u65b9\u5f0f\u66f4\u6e05\u6670\uff0c\u907f\u514d\u5927\u91cf\u7684match\u6a21\u5f0f\u5339\u914d\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 use std :: fs :: File ; use std :: io :: Read ; use std :: path :: Path ; fn file_double < P : AsRef < Path >> ( file_path : P ) -> Result < i32 , String > { let mut file = File :: open ( file_path ). map_err ( | e | e . to_string ()) ? ; let mut contents = String :: new (); file . read_to_string ( & mut contents ). map_err ( | e | e . to_string ()) ? ; let n = contents . trim (). parse :: < i32 > (). map_err ( | e | e . to_string ()) ? ; Ok ( 2 * n ) } fn main () { match file_double ( \"foobar\" ) { Ok ( n ) => println! ( \"{}\" , n ), Err ( err ) => println! ( \"Error: {}\" , err ), } } \u5230\u6b64\u4e3a\u6b62\u6211\u4eec\u7684\u4ee3\u7801\uff0c\u770b\u8d77\u6765\u5df2\u7ecf\u6bd4\u8f83\u6e05\u6670\u4e86\uff0c\u4f46\u662f\u4ecd\u7136\u6709\u4e00\u4e9b map_err \u7684\u8c03\u7528\uff0c\u7528\u6765\u8fdb\u884c\u9519\u8bef\u7c7b\u578b\u7684\u8f6c\u6362\uff0c\u7edf\u4e00\u8f6c\u6362\u6210 String \u3002\u4f46\u662f\u8fd9\u79cd\u65b9\u5f0f\u662f\u6709\u7f3a\u70b9\u7684\u3002\u4f7f\u7528 String \u8868\u793a\u9519\u8bef\u4f1a\u4f7f\u5f97\u4ee3\u7801\u6df7\u4e71\uff0c \u6240\u6709\u7684\u9519\u8bef\u90fd\u662f String \u7c7b\u578b\uff0c\u5982\u679c\u662f\u9488\u5bf9\u6700\u7ec8\u7684\u7528\u6237\uff0c\u90a3\u4e48\u8fd4\u56de String \u7c7b\u578b\u662f\u5408\u7406\u7684\uff0c\u53ef\u4ee5\u544a\u8bc9\u7528\u6237\u53d1\u751f\u4e86\u4ec0\u4e48\u9519\u8bef\uff0c\u4f46\u662f\u5982\u679c\u662f\u5185\u90e8\u7684\u8c03\u7528\u5c31\u4e0d\u5408\u7406\u4e86\uff0c\u6ca1\u529e\u6cd5\u6839\u636e String \u7684\u5185\u5bb9\u8fdb\u884c\u9519\u8bef\u7c7b\u578b\u533a\u5206\u3002 \u5982\u679c\u6211\u4eec\u80fd\u5c06\u9047\u5230\u7684\u9519\u8bef\u7c7b\u578b\u81ea\u52a8\u8f6c\u6362\u4e3a\u4e00\u79cd\u7edf\u4e00\u7684\u7c7b\u578b\uff0c\u5e76\u4e14\u53ef\u4ee5\u533a\u5206\u662f\u4f55\u79cd\u9519\u8bef\uff0c \u90a3\u4e48\u5c31\u53ef\u4ee5\u7701\u7565\u6389\u8fd9\u4e9b map_err \u7684\u8c03\u7528\u4e86\u3002\u5e78\u8fd0\u7684\u662f\uff0c\u8fd9\u6709\u5f88\u591a\u79cd\u65b9\u5f0f\u6765\u5b9e\u73b0\u3002","title":"\u7ec4\u5408\u5904\u7406Option\u548cResult"},{"location":"%E5%8D%9A%E5%AE%A2/doc/rust/rust-error-handle/#_1","text":"1 2 3 4 5 6 7 8 9 10 use std :: io ; use std :: num ; // We derive `Debug` because all types should probably derive `Debug`. // This gives us a reasonable human readable description of `CliError` values. #[derive(Debug)] enum CliError { Io ( io :: Error ), Parse ( num :: ParseIntError ), } \u901a\u8fc7\u81ea\u5b9a\u4e49\u9519\u8bef\u7c7b\u578b\u53ef\u4ee5\u89e3\u51b3 String \u7c7b\u578b\u5e26\u6765\u7684\u7f3a\u70b9\uff0c\u4e0b\u9762\u4f7f\u7528 CliError \u6765\u66ff\u6362 String 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 use std :: fs :: File ; use std :: io :: Read ; use std :: path :: Path ; fn file_double < P : AsRef < Path >> ( file_path : P ) -> Result < i32 , CliError > { let mut file = File :: open ( file_path ). map_err ( CliError :: Io ) ? ; let mut contents = String :: new (); file . read_to_string ( & mut contents ). map_err ( CliError :: Io ) ? ; let n : i32 = contents . trim (). parse (). map_err ( CliError :: Parse ) ? ; Ok ( 2 * n ) } fn main () { match file_double ( \"foobar\" ) { Ok ( n ) => println! ( \"{}\" , n ), Err ( err ) => println! ( \"Error: {:?}\" , err ), } } \u901a\u8fc7\u81ea\u5b9a\u4e49\u9519\u8bef\u7c7b\u578b\uff0c\u5c31\u53ef\u4ee5\u77e5\u9053\u53d1\u751f\u7684\u9519\u8bef\u5230\u5e95\u662f\u54ea\u79cd\u7c7b\u578b\u7684\uff0c\u4f46\u8fd8\u662f\u6ca1\u6709\u7701\u7565\u6389\u5bf9 map_err \u7684\u8c03\u7528\uff0c\u8981\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5c31\u9700\u8981\u5f15\u5165 From traits \uff0c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 trait From < T > { fn from ( T ) -> Self ; } impl From < io :: Error > for CliError { fn from ( err : io :: Error ) -> CliError { CliError :: Io ( err ) } } impl From < num :: ParseIntError > for CliError { fn from ( err : num :: ParseIntError ) -> CliError { CliError :: Parse ( err ) } } \u901a\u8fc7\u5f15\u5165 From traits \uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u4e0d\u7528\u4f7f\u7528map_err\u4e86\uff0c\u53ef\u4ee5\u901a\u8fc7\u81ea\u52a8\u8c03\u7528 From traits \uff0c\u5c06\u4e00\u4e9b\u6807\u51c6\u9519\u8bef\u8f6c\u6362\u4e3a\u81ea\u5b9a\u4e49\u9519\u8bef\u4e86\uff0c\u8f6c\u6362\u540e\u7684\u4ee3\u7801\u5982\u4e0b: 1 2 3 4 5 6 7 fn file_double < P : AsRef < Path >> ( file_path : P ) -> Result < i32 , CliError > { let mut file = File :: open ( file_path ) ? ; let mut contents = String :: new (); file . read_to_string ( & mut contents ) ? ; let n : i32 = contents . trim (). parse () ? ; Ok ( 2 * n ) } \u4f46\u662f\u8fd9\u79cd\u6a21\u5f0f\u5b58\u5728\u4e00\u4e2a\u95ee\u9898\uff0c\u5c31\u662f\u6ca1\u529e\u6cd5\u5f88\u597d\u7684\u6269\u5c55\uff0c\u6211\u4eec\u9700\u8981\u7ed9 file_double \u51fd\u6570\u79cd\u8fd4\u56de\u7684\u6240\u6709\u53ef\u80fd\u7684\u9519\u8bef\u90fd\u6dfb\u52a0\u8f6c\u6362\u5230\u81ea\u5b9a\u4e49\u9519\u8bef\u7684 From traits \u3002 \u6211\u4eec\u662f\u5426\u6709\u66f4\u597d\u7684\u529e\u6cd5\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5462? Rust\u6807\u51c6\u5e93\u79cd\u5b9e\u73b0\u4e86\u4e0b\u9762\u8fd9\u7ec4 From traits 1 2 // \u6240\u6709\u7684Error\u90fd\u53ef\u4ee5\u81ea\u52a8\u901a\u8fc7From traits\u81ea\u52a8\u8f6c\u6362\u4e3aBox<Error> impl <' a , E : Error + ' a > From < E > for Box < Error + ' a > \u56e0\u4e3a\u6240\u6709\u7684\u6ee1\u8db3Error\u7279\u5f81\u7684\u7c7b\u578b\uff0c\u90fd\u53ef\u4ee5\u8f6c\u6362\u4e3a Box<Error> \uff0c\u56e0\u6b64\u6211\u4eec\u5176\u5b9e\u53ea\u8981\u5c06\u8fd4\u56de\u7c7b\u578b\u6539\u6210 Box<Error> \u5373\u53ef\uff0c\u8fd9\u6837\u65e0\u8bba file_double \u4e2d\u4f1a\u8fd4\u56de\u4f55\u79cd\u9519\u8bef\u7c7b\u578b\u90fd\u53ef\u4ee5\u81ea\u52a8\u8f6c\u6362\u4e3a Box<dyn Error> 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 use std :: error :: Error ; use std :: fs :: File ; use std :: io :: Read ; use std :: path :: Path ; fn file_double < P : AsRef < Path >> ( file_path : P ) -> Result < i32 , Box < dyn Error >> { let mut file = File :: open ( file_path ) ? ; let mut contents = String :: new (); file . read_to_string ( & mut contents ) ? ; let n = contents . trim (). parse :: < i32 > () ? ; Ok ( 2 * n ) } fn main () { let _res = file_double ( \"/tmp/test\" ); } \u90a3\u81ea\u5b9a\u4e49\u7684\u9519\u8bef\u662f\u5426\u4e5f\u53ef\u4ee5\u8f6c\u6362\u4e3a Error \u5462? 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 #[derive(Debug)] enum CliError { Io ( io :: Error ), Parse ( num :: ParseIntError ), } fn file_double < P : AsRef < Path >> ( file_path : P ) -> Result < i32 , Box < dyn std :: error :: Error >> { let mut contents = String :: new (); let n : i32 = contents . trim (). parse (). map_err ( CliError :: Parse ) ? ; Ok ( 2 * n ) } fn main () { match file_double ( \"foobar\" ) { Ok ( n ) => println! ( \"{}\" , n ), Err ( err ) => println! ( \"Error: {:?}\" , err ), } } // \u62a5\u9519\u5982\u4e0b: error [ E0277 ] : the trait bound ` CliError : std :: error :: Error ` is not satisfied - -> src / main . rs : 17 : 66 | 17 | let n : i32 = contents . trim (). parse (). map_err ( CliError :: Parse ) ? ; | ^ the trait ` std :: error :: Error ` is not implemented for ` CliError ` | = note : required because of the requirements on the impl of ` std :: convert :: From < CliError > ` for ` std :: boxed :: Box < dyn std :: error :: Error > ` = note : required by ` std :: convert :: From :: from ` \u81ea\u5b9a\u4e49\u7684\u9519\u8bef\u770b\u6765\u5e76\u6ca1\u6709\u5b9e\u73b0 std::error::Error \uff0c\u63a5\u4e0b\u6765\u4e3a\u6211\u4eec\u81ea\u5b9a\u4e49\u7684\u9519\u8bef\u5b9e\u73b0 std::error::Error \u7279\u5f81\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 impl fmt :: Display for CliError { fn fmt ( & self , f : & mut fmt :: Formatter ) -> fmt :: Result { match * self { // Both underlying errors already impl `Display`, so we defer to // their implementations. CliError :: Io ( ref err ) => write! ( f , \"IO error: {}\" , err ), CliError :: Parse ( ref err ) => write! ( f , \"Parse error: {}\" , err ), } } } impl error :: Error for CliError { fn description ( & self ) -> & str { // Both underlying errors already impl `Error`, so we defer to their // implementations. match * self { CliError :: Io ( ref err ) => err . description (), // Normally we can just write `err.description()`, but the error // type has a concrete method called `description`, which conflicts // with the trait method. For now, we must explicitly call // `description` through the `Error` trait. CliError :: Parse ( ref err ) => error :: Error :: description ( err ), } } fn cause ( & self ) -> Option <& error :: Error > { match * self { // N.B. Both of these implicitly cast `err` from their concrete // types (either `&io::Error` or `&num::ParseIntError`) // to a trait object `&Error`. This works because both error types // implement `Error`. CliError :: Io ( ref err ) => Some ( err ), CliError :: Parse ( ref err ) => Some ( err ), } } } \u5230\u6b64\u4e3a\u6b62\uff0c\u90a3\u4e48\u8fd9\u4e2a\u81ea\u5b9a\u4e49\u7684\u9519\u8bef\u5c31\u53ef\u4ee5\u81ea\u52a8\u8f6c\u6362\u4e3a std::error::Error \u4e86\u3002\u76f8\u6bd4\u4e8e\u901a\u8fc7 From traits \u6765\u5904\u7406\u9519\u8bef\u7684\u65b9\u6cd5\u6765\u8bf4\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u53ef\u6269\u5c55\u6027\u66f4\u4f73\uff0c \u4f46\u7f3a\u70b9\u5c31\u662f Box<dyn std::error::Error> \u65e0\u6cd5\u77e5\u9053\u5176\u5177\u4f53\u7684\u9519\u8bef\u7c7b\u578b\u3002\u9700\u8981\u81ea\u5df1\u901a\u8fc7 downcast_ref \u8fdb\u884c\u7c7b\u578b\u8f6c\u6362\uff0c\u9664\u6b64\u4e4b\u5916\u5c31\u53ea\u80fd\u901a\u8fc7 description \u548c cause \u65b9\u6cd5\u83b7\u53d6\u5230\u9519\u8bef\u63cf\u8ff0\u548c\u5bfc\u81f4\u9519\u8bef\u7684\u539f\u56e0\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 use std :: error :: Error ; use std :: fmt :: { self , Display , Formatter }; #[derive(Debug)] struct MyError { } impl Error for MyError { fn description ( & self ) -> & str { \"description\" } } impl Display for MyError { fn fmt ( & self , formatter : & mut Formatter ) -> Result < (), fmt :: Error > { write! ( formatter , \"description\" ) } } fn main () { let error : Box < Error > = Box :: new ( MyError {}); let downcasted = error . downcast_ref :: < MyError > (); println! ( \"{:?}\" , downcasted ); // OK: prints Some(MyError). } \u4f7f\u7528\u8d77\u6765\u8fd8\u662f\u7565\u663e\u9ebb\u70e6\uff0c\u9700\u8981\u505a\u4e00\u6b21\u8f6c\u578b\uff0c\u8fd8\u9700\u8981\u5224\u65ad\u662f\u5426\u8f6c\u578b\u6210\u529f\u7b49\uff0c\u90a3\u6211\u4eec\u662f\u5426\u6709\u66f4\u597d\u7684\u529e\u6cd5\u5462? Rust\u751f\u6001\u4e2d\uff0c\u6709\u5f88\u591a\u7528\u6765\u5904\u7406\u9519\u8bef\u7684 crate \uff0c\u63a5\u4e0b\u6765\u8ba9\u6211\u4eec\u770b\u770b\u8fd9\u4e9b crates \u662f\u5982\u4f55\u5904\u7406\u597d\u8fd9\u4e9b\u4e8b\u60c5\u7684\u3002","title":"\u81ea\u5b9a\u4e49\u9519\u8bef\u7c7b\u578b"},{"location":"%E5%8D%9A%E5%AE%A2/doc/rust/rust-error-handle/#crates","text":"error-chain","title":"\u9519\u8bef\u5904\u7406crates"},{"location":"%E5%8D%9A%E5%AE%A2/doc/rust/rust-error-handle/#_2","text":"","title":"\u603b\u7ed3"},{"location":"%E5%8D%9A%E5%AE%A2/doc/rust/rust-error-handle/#_3","text":"error-handling-survey rust-error-handling","title":"\u53c2\u8003\u6587\u732e"},{"location":"%E5%8D%9A%E5%AE%A2/doc/rust/rust-match/","text":"lifetime elision","title":"Rust match"},{"location":"%E5%8D%9A%E5%AE%A2/doc/rust/rust-match/#lifetime-elision","text":"","title":"lifetime elision"},{"location":"%E5%8D%9A%E5%AE%A2/doc/rust/rust-misconceptions/","text":"\u5e38\u89c1\u7684\u751f\u547d\u5468\u671f\u6982\u5ff5\u9519\u8bef T \u53ea\u5305\u542b owned types Type Variable T &T &mut T Examples i32 &i32 &mut i32 \u5b9e\u9645\u4e0a\u8fd9\u662f\u9519\u8bef\u7684\uff0c T \u5305\u542b\u4e86\u6240\u6709\u7684\u7c7b\u578b\u3001 &T \u5305\u542b\u4e86\u6240\u6709\u5f15\u7528\u7c7b\u578b\uff0c\u4f46\u662f\u4e0d\u5305\u542bowned types\u3001 &mut T \u5305\u542b\u4e86\u6240\u6709\u7684\u53ef\u53d8\u5f15\u7528\u7c7b\u578b\u3002 Type Variable T &T &mut T Examples i32 , &i32 , &mut i32 , &&i32 , &mut &mut i32 , ... &i32 , &&i32 , &&mut i32 , ... &mut i32 , &mut &mut i32 , &mut &i32 , ... \u53ef\u4ee5\u770b\u5230 T \u548c &T \u3001 &mut T \u4e4b\u95f4\u662f\u6709\u91cd\u53e0\u7684\uff0c\u4f46\u662f &T \u548c &mut T \u662f\u4e0d\u91cd\u53e0\u7684\u3002 1 2 3 4 5 6 7 trait Trait {} impl < T > Trait for T {} impl < T > Trait for & T {} // \u274c impl < T > Trait for & mut T {} // \u274c \u4e0a\u9762\u7684\u7a0b\u5e8f\u662f\u7f16\u8bd1\u62a5\u9519\u7684\uff0c\u56e0\u4e3a T \u548c &T \u3001 &mut T \u7c7b\u578b\u4e4b\u95f4\u662f\u6709\u91cd\u53e0\u7684\uff0c\u4e0d\u80fd\u5bf9\u76f8\u540c\u7684\u7c7b\u578b\u6709\u4e0d\u540c\u7684\u5b9e\u73b0\uff0c\u8fd9\u663e\u7136\u662f\u51b2\u7a81\u7684\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 error [ E0119 ] : conflicting implementations of trait ` Trait ` for type ` & _ ` : - -> src / lib . rs : 5 : 1 | 3 | impl < T > Trait for T {} | ------------------- first implementation here 4 | 5 | impl < T > Trait for & T {} | ^^^^^^^^^^^^^^^^^^^^ conflicting implementation for ` & _ ` error [ E0119 ] : conflicting implementations of trait ` Trait ` for type ` & mut _ ` : - -> src / lib . rs : 7 : 1 | 3 | impl < T > Trait for T {} | ------------------- first implementation here .. . 7 | impl < T > Trait for & mut T {} | ^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for ` & mut _ ` \u4f46\u662f\u4e0b\u9762\u8fd9\u6837\u662fOK\u7684\u3002 1 2 3 4 5 trait Trait {} impl < T > Trait for & T {} // \u2705 impl < T > Trait for & mut T {} // \u2705 \u56e0\u4e3a &T \u548c &mut T \u662f\u4e0d\u91cd\u53e0\u7684\u3002 Note T \u662f &T \u548c &mut T \u7684\u8d85\u96c6 &T \u548c &mut T \u662f\u4e0d\u51b2\u7a81\u7684 T: 'static \u6307\u7684\u662fT\u7684\u751f\u547d\u5468\u671f\u76f4\u5230\u7a0b\u5e8f\u9000\u51fa\u4e3a\u6b62 \u9519\u8bef\u7684\u6982\u5ff5: T: 'static \u5e94\u8be5\u8bfb\u4f5c T \u6709 'static \u751f\u547d\u5468\u671f &'static T \u548c T: 'static \u662f\u76f8\u540c\u7684\u4e8b\u60c5 T: 'static \u4e2d T \u5fc5\u987b\u662f\u4e0d\u53ef\u53d8 T: 'static \u4e2d T \u4ec5\u80fd\u521b\u5efa\u5728\u7f16\u8bd1\u65f6 \u53ef\u80fd\u6211\u4eec\u5927\u90e8\u5206\u4eba\u5bf9\u4e8e 'static \u7684\u8ba4\u8bc6\u53ef\u80fd\u662f\u4ece\u4e0b\u9762\u8fd9\u79cd\u4ee3\u7801\u5f00\u59cb\u7684\u3002 1 2 3 fn main () { let str_literal : & ' static str = \"str literal\" ; } \"str literal\" \u662fhardcode\u5728\u4e8c\u8fdb\u5236\u7a0b\u5e8f\u4e2d\u7684\u53ea\u8bfb\u533a\u57df\uff0c\u5176\u751f\u547d\u5468\u671f\u548c\u7a0b\u5e8f\u7684\u751f\u547d\u5468\u671f\u4e00\u81f4\uff0c\u9664\u4e86 'static str \u5916\uff0c\u8fd8\u6709 static \u53d8\u91cf\uff0c\u5176\u751f\u547d\u5468\u671f\u4e5f\u662f\u548c\u7a0b\u5e8f\u7684\u751f\u547d\u5468\u671f\u4e00\u81f4\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // Note: This example is purely for illustrative purposes. // Never use `static mut`. It's a footgun. There are // safe patterns for global mutable singletons in Rust but // those are outside the scope of this article. static BYTES : [ u8 ; 3 ] = [ 1 , 2 , 3 ]; static mut MUT_BYTES : [ u8 ; 3 ] = [ 1 , 2 , 3 ]; fn main () { MUT_BYTES [ 0 ] = 99 ; // \u274c - mutating static is unsafe unsafe { MUT_BYTES [ 0 ] = 99 ; assert_eq! ( 99 , MUT_BYTES [ 0 ]); } } static \u53d8\u91cf\u6709\u4e00\u4e9b\u7279\u70b9: 1.","title":"\u5e38\u89c1\u7684\u751f\u547d\u5468\u671f\u6982\u5ff5\u9519\u8bef"},{"location":"%E5%8D%9A%E5%AE%A2/doc/rust/rust-misconceptions/#_1","text":"","title":"\u5e38\u89c1\u7684\u751f\u547d\u5468\u671f\u6982\u5ff5\u9519\u8bef"},{"location":"%E5%8D%9A%E5%AE%A2/doc/rust/rust-misconceptions/#t-owned-types","text":"Type Variable T &T &mut T Examples i32 &i32 &mut i32 \u5b9e\u9645\u4e0a\u8fd9\u662f\u9519\u8bef\u7684\uff0c T \u5305\u542b\u4e86\u6240\u6709\u7684\u7c7b\u578b\u3001 &T \u5305\u542b\u4e86\u6240\u6709\u5f15\u7528\u7c7b\u578b\uff0c\u4f46\u662f\u4e0d\u5305\u542bowned types\u3001 &mut T \u5305\u542b\u4e86\u6240\u6709\u7684\u53ef\u53d8\u5f15\u7528\u7c7b\u578b\u3002 Type Variable T &T &mut T Examples i32 , &i32 , &mut i32 , &&i32 , &mut &mut i32 , ... &i32 , &&i32 , &&mut i32 , ... &mut i32 , &mut &mut i32 , &mut &i32 , ... \u53ef\u4ee5\u770b\u5230 T \u548c &T \u3001 &mut T \u4e4b\u95f4\u662f\u6709\u91cd\u53e0\u7684\uff0c\u4f46\u662f &T \u548c &mut T \u662f\u4e0d\u91cd\u53e0\u7684\u3002 1 2 3 4 5 6 7 trait Trait {} impl < T > Trait for T {} impl < T > Trait for & T {} // \u274c impl < T > Trait for & mut T {} // \u274c \u4e0a\u9762\u7684\u7a0b\u5e8f\u662f\u7f16\u8bd1\u62a5\u9519\u7684\uff0c\u56e0\u4e3a T \u548c &T \u3001 &mut T \u7c7b\u578b\u4e4b\u95f4\u662f\u6709\u91cd\u53e0\u7684\uff0c\u4e0d\u80fd\u5bf9\u76f8\u540c\u7684\u7c7b\u578b\u6709\u4e0d\u540c\u7684\u5b9e\u73b0\uff0c\u8fd9\u663e\u7136\u662f\u51b2\u7a81\u7684\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 error [ E0119 ] : conflicting implementations of trait ` Trait ` for type ` & _ ` : - -> src / lib . rs : 5 : 1 | 3 | impl < T > Trait for T {} | ------------------- first implementation here 4 | 5 | impl < T > Trait for & T {} | ^^^^^^^^^^^^^^^^^^^^ conflicting implementation for ` & _ ` error [ E0119 ] : conflicting implementations of trait ` Trait ` for type ` & mut _ ` : - -> src / lib . rs : 7 : 1 | 3 | impl < T > Trait for T {} | ------------------- first implementation here .. . 7 | impl < T > Trait for & mut T {} | ^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for ` & mut _ ` \u4f46\u662f\u4e0b\u9762\u8fd9\u6837\u662fOK\u7684\u3002 1 2 3 4 5 trait Trait {} impl < T > Trait for & T {} // \u2705 impl < T > Trait for & mut T {} // \u2705 \u56e0\u4e3a &T \u548c &mut T \u662f\u4e0d\u91cd\u53e0\u7684\u3002 Note T \u662f &T \u548c &mut T \u7684\u8d85\u96c6 &T \u548c &mut T \u662f\u4e0d\u51b2\u7a81\u7684","title":"T \u53ea\u5305\u542b owned types"},{"location":"%E5%8D%9A%E5%AE%A2/doc/rust/rust-misconceptions/#t-static-t","text":"\u9519\u8bef\u7684\u6982\u5ff5: T: 'static \u5e94\u8be5\u8bfb\u4f5c T \u6709 'static \u751f\u547d\u5468\u671f &'static T \u548c T: 'static \u662f\u76f8\u540c\u7684\u4e8b\u60c5 T: 'static \u4e2d T \u5fc5\u987b\u662f\u4e0d\u53ef\u53d8 T: 'static \u4e2d T \u4ec5\u80fd\u521b\u5efa\u5728\u7f16\u8bd1\u65f6 \u53ef\u80fd\u6211\u4eec\u5927\u90e8\u5206\u4eba\u5bf9\u4e8e 'static \u7684\u8ba4\u8bc6\u53ef\u80fd\u662f\u4ece\u4e0b\u9762\u8fd9\u79cd\u4ee3\u7801\u5f00\u59cb\u7684\u3002 1 2 3 fn main () { let str_literal : & ' static str = \"str literal\" ; } \"str literal\" \u662fhardcode\u5728\u4e8c\u8fdb\u5236\u7a0b\u5e8f\u4e2d\u7684\u53ea\u8bfb\u533a\u57df\uff0c\u5176\u751f\u547d\u5468\u671f\u548c\u7a0b\u5e8f\u7684\u751f\u547d\u5468\u671f\u4e00\u81f4\uff0c\u9664\u4e86 'static str \u5916\uff0c\u8fd8\u6709 static \u53d8\u91cf\uff0c\u5176\u751f\u547d\u5468\u671f\u4e5f\u662f\u548c\u7a0b\u5e8f\u7684\u751f\u547d\u5468\u671f\u4e00\u81f4\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // Note: This example is purely for illustrative purposes. // Never use `static mut`. It's a footgun. There are // safe patterns for global mutable singletons in Rust but // those are outside the scope of this article. static BYTES : [ u8 ; 3 ] = [ 1 , 2 , 3 ]; static mut MUT_BYTES : [ u8 ; 3 ] = [ 1 , 2 , 3 ]; fn main () { MUT_BYTES [ 0 ] = 99 ; // \u274c - mutating static is unsafe unsafe { MUT_BYTES [ 0 ] = 99 ; assert_eq! ( 99 , MUT_BYTES [ 0 ]); } } static \u53d8\u91cf\u6709\u4e00\u4e9b\u7279\u70b9: 1.","title":"T: 'static \u6307\u7684\u662fT\u7684\u751f\u547d\u5468\u671f\u76f4\u5230\u7a0b\u5e8f\u9000\u51fa\u4e3a\u6b62"},{"location":"%E5%8D%9A%E5%AE%A2/doc/rust/rust-module/","text":"","title":"Rust module"},{"location":"%E5%8D%9A%E5%AE%A2/doc/rust/rust-variance/","text":"Variance \"\u578b\u53d8\"\u6216\u8005\u79f0\u4e4b\u4e3a\"\u53d8\u578b\"\uff0c\u5728\u8bb8\u591a\u7f16\u7a0b\u8bed\u8a00\u4e2d\u90fd\u5b58\u5728\uff0c\u578b\u53d8\u6307\u7684\u662f\u4e24\u4e2a\u901a\u8fc7\"\u7c7b\u578b\u6784\u9020\u5668\"\u6784\u9020\u7684\u590d\u6742\u7c7b\u578b\u548c\u5176\"\u7ec4\u4ef6\u7c7b\u578b\"\u4e4b\u95f4\u7684\u76f8\u5173\u6027\uff0c\u8fd9\u53e5\u8bdd\u770b\u8d77\u6765\u5f88\u590d\u6742\uff0c\u8ba9\u6211\u4eec\u4e00\u70b9\u70b9\u6765\u89e3\u6790\u8fd9\u53e5\u8bdd\u3002 \u9996\u5148\u6765\u770b\u4e0b\u4ec0\u4e48\u662f\u7c7b\u578b\u6784\u9020\u5668\uff0c\u4f8b\u5982C++\u4e2d\u7684 std::vector<T> \uff0c\u8fd9\u5c31\u662f\u4e00\u4e2a\u7c7b\u578b\u6784\u9020\u5668\uff0c\u53c8\u6bd4\u5982Rust\u4e2d\u7684 Box<T> \u3001 Vec<T> \u7b49(\u53ef\u4ee5\u7b80\u5355\u7684\u628a\u7c7b\u578b\u6784\u9020\u5668\u7406\u89e3\u6210\u6cdb\u578b\uff0c\u9664\u4e86\u6cdb\u578b\u5916\u8fd8\u6709\u5176\u4ed6\u7684\u7c7b\u578b\u6784\u9020\u5668)\u3002 \u901a\u8fc7\u8fd9\u4e9b\u6784\u9020\u6784\u9020\u5668\u7ec4\u5408\u4e00\u4e2a\u53e6\u5916\u7684\"\u7ec4\u4ef6\u7c7b\u578b\"\uff0c\u5f62\u6210\u4e86\u4e00\u4e2a\u65b0\u7684\u7c7b\u578b\u3002\u800c\u578b\u53d8\u6307\u7684\u5c31\u662f\u901a\u8fc7\u7c7b\u578b\u6784\u9020\u5668\u521b\u5efa\u7684\u590d\u6742\u7c7b\u578b\u548c\u5176\u5bf9\u5e94\u7684\u7ec4\u4ef6\u7c7b\u578b\u4e4b\u95f4\u7684\u7c7b\u578b\u76f8\u5173\u6027\u3002\u6bd4\u5982T\u662fU\u7684\u5b50\u7c7b\u578b\uff0cT\u53ef\u4ee5\u8f6c\u6362\u4e3aU\uff0c \u90a3\u4e48 std::vector<T> \u548c std::vector<U> \u662f\u4ec0\u4e48\u5173\u7cfb\u5462? \u5982\u679c\u6784\u9020\u7684\u590d\u6742\u7c7b\u578b\u548c\u5176\u7ec4\u4ef6\u7c7b\u578b\u7684\u5173\u7cfb\u4e00\u81f4\u90a3\u4e48\u5c31\u662f\u534f\u53d8\uff0c\u5982\u679c\u5173\u7cfb\u53cd\u8f6c\u4e86\u5c31\u662f\u9006\u53d8\uff0c\u5982\u679c\u6ca1\u6709\u4efb\u4f55\u7c7b\u578b\u5173\u7cfb\u5c31\u662f\u4e0d\u53d8\u3002 \u5047\u5b9a F<T> \u4e2dF\u662f\u7c7b\u578b\u6784\u9020\u5668\uff0cT\u662f\u7ec4\u4ef6\u7c7b\u578b\uff0c\u90a3\u4e48\u578b\u53d8\u901a\u5e38\u5305\u542b\u4e09\u7c7b\u5173\u7cfb\uff0c\u5982\u4e0b: F<Sub> \u662f F<Super> \u7684\u5b50\u7c7b\u578b\uff0c\u8fd9\u79cd\u5173\u7cfb\u6211\u4eec\u79f0\u4e4b\u4e3a\u534f\u53d8 F<Super> \u662f F<Sub> \u7684\u5b50\u7c7b\u578b\uff0c\u8fd9\u79cd\u5173\u7cfb\u6211\u4eec\u79f0\u4e4b\u4e3a\u9006\u53d8 F<Super \u548c F<Sub \u6ca1\u6709\u4efb\u4f55\u5173\u7cfb\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u4e0d\u53d8 Tips \u7c7b\u578b\u6784\u9020\u5668\u7684\u7ec4\u4ef6\u7c7b\u578b\u53ef\u4ee5\u6709\u591a\u4e2a\u6bd4\u5982 F<T, U> \uff0c\u5728\u5224\u65ad\u578b\u53d8\u5173\u7cfb\u7684\u65f6\u5019\u9700\u8981\u975e\u522b\u5bf9\u5404\u4e2a\u7ec4\u4ef6\u7c7b\u578b\u6765\u8ba8\u8bba\uff0c\u6bd4\u5982\u5bf9\u4e8eT\u662f\u534f\u53d8\u3001\u5bf9\u4e8eU\u662f\u4e0d\u53d8\u7b49\u3002 Note \u901a\u8fc7\u4e0a\u9762\u5bf9Variance\u7684\u5b9a\u4e49\u53ef\u4ee5\u770b\u51fa\uff0c\u578b\u53d8\u7684\u524d\u63d0\u662f\u7c7b\u578b\u4e4b\u95f4\u5b58\u5728\u5173\u7cfb\uff0c\u800c\u8fd9\u4e2a\u5173\u7cfb\u901a\u5e38\u6765\u8bf4\u6307\u7684\u5c31\u662f\u5b50\u7c7b\u578b\u5173\u7cfb(\u4e5f\u53ef\u4ee5\u662f\u5176\u4ed6\u5173\u7cfb)\uff0c\u4e00\u4e2a\u7c7b\u578b\u662f\u53e6\u5916\u4e00\u4e2a\u7c7b\u578b\u7684\u5b50\u7c7b\u578b\uff0c\u4e00\u822c\u6765\u8bf4\u8fd9\u662f\u901a\u8fc7\u7ee7\u627f\u6765\u5b9e\u73b0\u7684\u3002 \u8fd9\u79cd\u5173\u7cfb\u5e76\u975e\u53ea\u6709\u5b50\u7c7b\u578b\uff0c\u5728\u63a5\u4e0b\u6765\u7684\u6587\u7ae0\u4e2d\u6211\u4eec\u4f1a\u770b\u5230Rust\u4e2d\u7684\u751f\u547d\u5468\u671f\u4e5f\u662f\u4e00\u79cd\u7c7b\u4f3c\u5b50\u7c7b\u578b\u7684\u5173\u7cfb\u3002 Rust Variance Rust\u4e2d\u7684\u7c7b\u578b\u4e0d\u5b58\u5b50\u7c7b\u578b\u7684\u5173\u7cfb\uff0c\u56e0\u4e3a\u4ed6\u6ca1\u6709\u7c7b\u578b\u7684\u7ee7\u627f\uff0c\u81ea\u7136\u4e5f\u5c31\u6ca1\u6709\u6240\u8c13\u7684\u5b50\u7c7b\u578b\u5173\u7cfb\u4e86\u3002\u4f46\u662fRust\u4e5f\u662f\u6709\u578b\u53d8\u7684\uff0c\u5b83\u7684\u578b\u53d8\u6307\u7684\u662f\u751f\u547d\u5468\u671f\u7684\u578b\u53d8\uff0c\u867d\u7136\u4ed6\u7684\u7c7b\u578b\u4e4b\u95f4\u6ca1\u6709\u5173\u7cfb\uff0c\u4f46\u662f\u4ed6\u7684\u751f\u547d\u5468\u671f\u5b58\u5728\u5b50\u7c7b\u578b\u5173\u7cfb\u3002 \u4e5f\u5c31\u662f\u5927\u7684\u751f\u547d\u5468\u671f\u662f\u5c0f\u751f\u547d\u5468\u671f\u7684\u5b50\u7c7b\u578b\u3002\u4e5f\u5c31\u662f\u8bf4\u6211\u53ef\u4ee5\u7528\u4e00\u4e2a\u5c0f\u751f\u547d\u5468\u671f\u7684\u53d8\u91cf\u6307\u5411\u4e00\u4e2a\u66f4\u5927\u7684\u751f\u547d\u5468\u671f\u53d8\u91cf\u3002 Note 'static \u662f\u6240\u6709\u751f\u547d\u5468\u671f\u7684\u5b50\u7c7b\u578b \u5728Variance\u7684\u5b9a\u4e49\u4e2d\u6211\u4eec\u66fe\u7ecf\u63d0\u5230\u7c7b\u578b\u6784\u9020\u5668\uff0c\u5728Rust\u4e2d\u6709\u6cdb\u578b\u3001\u8fd8\u6709 & \u3001 &mut \u7b49\uff0c\u8fd9\u4e9b\u90fd\u662f\u7c7b\u578b\u6784\u9020\u5668\uff0c\u4e0b\u9762\u8fd9\u5f20\u8868\u683c\u662fRust\u4e2d\u5404\u79cd\u7c7b\u578b\u6784\u9020\u5668\u7ed3\u5408\u751f\u547d\u5468\u671f\u540e\u4ea7\u751f\u7684\u5173\u7cfb\uff1a 'a T U * &'a T covariant covariant * &'a mut T covariant invariant * Box<T> covariant Vec<T> covariant * UnsafeCell<T> invariant Cell<T> invariant * fn(T) -> U contra variant covariant *const T covariant *mut T invariant Tips \u5e26 * \u53f7\u7684\u662f\u91cd\u70b9\u5173\u6ce8\u7684\u7c7b\u578b\uff0c\u4e5f\u662f\u6700\u57fa\u672c\u7684\u7c7b\u578b\uff0c\u6240\u6709\u5176\u4ed6\u7684\u7c7b\u578b\u90fd\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e9b\u57fa\u672c\u7c7b\u578b\u63a8\u5bfc\u6765\u7406\u89e3\u3002 \u5bf9\u4e8e &'a T \u6765\u8bf4\uff0c\u5bf9\u4e8e 'a \u6765\u8bf4\u662f\u534f\u53d8\u3001\u5bf9\u4e8e T \u4e5f\u662f\u534f\u53d8\u3002\u63a5\u7740\u6211\u4eec\u770b\u4e00\u4e9b\u4f8b\u5b50\u6765\u7406\u89e3Rust\u4e2d\u7684\u578b\u53d8\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 fn evil_feeder ( pet : & mut Animal ) { let spike : Dog = .. .; // `pet` is an Animal, and Dog is a subtype of Animal, // so this should be fine, right..? * pet = spike ; } fn main () { let mut mr_snuggles : Cat = .. .; evil_feeder ( & mut mr_snuggles ); // Replaces mr_snuggles with a Dog mr_snuggles . meow (); // OH NO, MEOWING DOG! } \u4e0a\u9762\u7684\u8fd9\u4e2a\u4f8b\u5b50\u662f\u65e0\u6cd5\u7f16\u8bd1\u7684\uff0c\u56e0\u4e3a &mut Animal \u5bf9\u4e8eT\u6765\u8bf4\u662f\u4e0d\u53d8\u7684(\u53c2\u8003\u4e0a\u9762\u7684\u8868\u683c)\u3002\u63a5\u7740\u6211\u4eec\u770b\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50: 1 2 3 4 5 6 7 8 9 10 11 12 13 fn evil_feeder < T > ( input : & mut T , val : T ) { * input = val ; } fn main () { let mut mr_snuggles : & ' static str = \"meow! :3\" ; // mr. snuggles forever!! { let spike = String :: from ( \"bark! >:V\" ); let spike_str : & str = & spike ; // Only lives for the block evil_feeder ( & mut mr_snuggles , spike_str ); // EVIL! } println! ( \"{}\" , mr_snuggles ); // Use after free? } evil_feeder \u4e2d\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f &mut T \uff0c\u5bf9\u4e8eT\u6765\u8bf4\u662f\u4e0d\u53d8\u7684\uff0c\u5f53\u4f20\u5165 &mut mr_snuggles \u65f6\uff0c\u4e5f\u5c31\u662f\u8bf4T\u4e3a &'static str \uff0c\u56e0\u4e3a\u7b2c\u4e8c\u4e2a\u53c2\u6570\u7684\u7c7b\u578b\u4e5f\u662fT\uff0c\u56e0\u6b64 \u7b2c\u4e8c\u4e2a\u53c2\u6570\u5b9e\u9645\u4e0a\u4e5f\u662f &'static str \u7c7b\u578b\uff0c\u8fd9\u662f\u9488\u5bf9 'static \u7684\u534f\u53d8\uff0c\u4f46\u662f 'static \u662f\u4efb\u4f55\u7c7b\u578b\u7684\u5b50\u7c7b\u578b\uff0c\u53ea\u6709 'static \u624d\u662f 'static \u7684\u5b50\u7c7b\u578b\uff0c\u5f53\u6211\u4eec\u4f20\u5165\u975e 'static \u751f\u547d\u5468\u671f\u53c2\u6570\u7684\u65f6\u5019\u603b\u662f\u65e0\u6cd5\u6ee1\u8db3\u5b50\u7c7b\u578b\u7684\u9700\u6c42\uff0c\u56e0\u6b64\u7f16\u8bd1\u4f1a\u51fa\u9519\u3002 rust 6 | let mut mr_snuggles: &'static str = \"meow! :3\"; // mr. snuggles forever!! | ------------ type annotation requires that `spike` is borrowed for `'static` ... 9 | let spike_str: &str = &spike; // Only lives for the block | ^^^^^^ borrowed value does not live long enough 10 | evil_feeder(& mut mr_snuggles, spike_str); // EVIL! 11 | } | - `spike` dropped here while still borrowed \u5982\u679c\u4e00\u4e2a\u7ed3\u6784\u4f53\u6709\u591a\u4e2a\u5b57\u6bb5\uff0c\u591a\u4e2a\u5b57\u6bb5 1 2 3 4 5 6 7 8 9 10 11 struct Owner <' a : ' c , ' b : ' c , ' c > { pub dog : & ' a & ' c str , pub cat : & ' b mut &' c str , } fn main () { let mut mr_snuggles : & ' static str = \"meow! :3\" ; let spike = String :: from ( \"bark! >:V\" ); let spike_str : & str = & spike ; let alice = Owner { dog : & spike_str , cat : & mut mr_snuggles }; } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 use std :: cell :: Cell ; struct MyType <' a , ' b , A : ' a , B : ' b , C , D , E , F , G , H , In , Out , Mixed > { a : & ' a A , // covariant over 'a and A b : & ' b mut B , // covariant over 'b and invariant over B c : * const C , // covariant over C d : * mut D , // invariant over D e : E , // covariant over E f : Vec < F > , // covariant over F g : Cell < G > , // invariant over G h1 : H , // would also be variant over H except... h2 : Cell < H > , // invariant over H, because invariance wins all conflicts i : fn ( In ) -> Out , // contravariant over In, covariant over Out k1 : fn ( Mixed ) -> usize , // would be contravariant over Mixed except.. k2 : Mixed , // invariant over Mixed, because invariance wins all conflicts } https://www.cnblogs.com/praying/p/14243566.html https://zhuanlan.zhihu.com/p/41814387 https://learnku.com/docs/nomicon/2018/38-subtypes-and-variability/4719 https://github.com/rust-lang/reference/blob/master/src/subtyping.md","title":"Rust variance"},{"location":"%E5%8D%9A%E5%AE%A2/doc/rust/rust-variance/#variance","text":"\"\u578b\u53d8\"\u6216\u8005\u79f0\u4e4b\u4e3a\"\u53d8\u578b\"\uff0c\u5728\u8bb8\u591a\u7f16\u7a0b\u8bed\u8a00\u4e2d\u90fd\u5b58\u5728\uff0c\u578b\u53d8\u6307\u7684\u662f\u4e24\u4e2a\u901a\u8fc7\"\u7c7b\u578b\u6784\u9020\u5668\"\u6784\u9020\u7684\u590d\u6742\u7c7b\u578b\u548c\u5176\"\u7ec4\u4ef6\u7c7b\u578b\"\u4e4b\u95f4\u7684\u76f8\u5173\u6027\uff0c\u8fd9\u53e5\u8bdd\u770b\u8d77\u6765\u5f88\u590d\u6742\uff0c\u8ba9\u6211\u4eec\u4e00\u70b9\u70b9\u6765\u89e3\u6790\u8fd9\u53e5\u8bdd\u3002 \u9996\u5148\u6765\u770b\u4e0b\u4ec0\u4e48\u662f\u7c7b\u578b\u6784\u9020\u5668\uff0c\u4f8b\u5982C++\u4e2d\u7684 std::vector<T> \uff0c\u8fd9\u5c31\u662f\u4e00\u4e2a\u7c7b\u578b\u6784\u9020\u5668\uff0c\u53c8\u6bd4\u5982Rust\u4e2d\u7684 Box<T> \u3001 Vec<T> \u7b49(\u53ef\u4ee5\u7b80\u5355\u7684\u628a\u7c7b\u578b\u6784\u9020\u5668\u7406\u89e3\u6210\u6cdb\u578b\uff0c\u9664\u4e86\u6cdb\u578b\u5916\u8fd8\u6709\u5176\u4ed6\u7684\u7c7b\u578b\u6784\u9020\u5668)\u3002 \u901a\u8fc7\u8fd9\u4e9b\u6784\u9020\u6784\u9020\u5668\u7ec4\u5408\u4e00\u4e2a\u53e6\u5916\u7684\"\u7ec4\u4ef6\u7c7b\u578b\"\uff0c\u5f62\u6210\u4e86\u4e00\u4e2a\u65b0\u7684\u7c7b\u578b\u3002\u800c\u578b\u53d8\u6307\u7684\u5c31\u662f\u901a\u8fc7\u7c7b\u578b\u6784\u9020\u5668\u521b\u5efa\u7684\u590d\u6742\u7c7b\u578b\u548c\u5176\u5bf9\u5e94\u7684\u7ec4\u4ef6\u7c7b\u578b\u4e4b\u95f4\u7684\u7c7b\u578b\u76f8\u5173\u6027\u3002\u6bd4\u5982T\u662fU\u7684\u5b50\u7c7b\u578b\uff0cT\u53ef\u4ee5\u8f6c\u6362\u4e3aU\uff0c \u90a3\u4e48 std::vector<T> \u548c std::vector<U> \u662f\u4ec0\u4e48\u5173\u7cfb\u5462? \u5982\u679c\u6784\u9020\u7684\u590d\u6742\u7c7b\u578b\u548c\u5176\u7ec4\u4ef6\u7c7b\u578b\u7684\u5173\u7cfb\u4e00\u81f4\u90a3\u4e48\u5c31\u662f\u534f\u53d8\uff0c\u5982\u679c\u5173\u7cfb\u53cd\u8f6c\u4e86\u5c31\u662f\u9006\u53d8\uff0c\u5982\u679c\u6ca1\u6709\u4efb\u4f55\u7c7b\u578b\u5173\u7cfb\u5c31\u662f\u4e0d\u53d8\u3002 \u5047\u5b9a F<T> \u4e2dF\u662f\u7c7b\u578b\u6784\u9020\u5668\uff0cT\u662f\u7ec4\u4ef6\u7c7b\u578b\uff0c\u90a3\u4e48\u578b\u53d8\u901a\u5e38\u5305\u542b\u4e09\u7c7b\u5173\u7cfb\uff0c\u5982\u4e0b: F<Sub> \u662f F<Super> \u7684\u5b50\u7c7b\u578b\uff0c\u8fd9\u79cd\u5173\u7cfb\u6211\u4eec\u79f0\u4e4b\u4e3a\u534f\u53d8 F<Super> \u662f F<Sub> \u7684\u5b50\u7c7b\u578b\uff0c\u8fd9\u79cd\u5173\u7cfb\u6211\u4eec\u79f0\u4e4b\u4e3a\u9006\u53d8 F<Super \u548c F<Sub \u6ca1\u6709\u4efb\u4f55\u5173\u7cfb\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u4e0d\u53d8 Tips \u7c7b\u578b\u6784\u9020\u5668\u7684\u7ec4\u4ef6\u7c7b\u578b\u53ef\u4ee5\u6709\u591a\u4e2a\u6bd4\u5982 F<T, U> \uff0c\u5728\u5224\u65ad\u578b\u53d8\u5173\u7cfb\u7684\u65f6\u5019\u9700\u8981\u975e\u522b\u5bf9\u5404\u4e2a\u7ec4\u4ef6\u7c7b\u578b\u6765\u8ba8\u8bba\uff0c\u6bd4\u5982\u5bf9\u4e8eT\u662f\u534f\u53d8\u3001\u5bf9\u4e8eU\u662f\u4e0d\u53d8\u7b49\u3002 Note \u901a\u8fc7\u4e0a\u9762\u5bf9Variance\u7684\u5b9a\u4e49\u53ef\u4ee5\u770b\u51fa\uff0c\u578b\u53d8\u7684\u524d\u63d0\u662f\u7c7b\u578b\u4e4b\u95f4\u5b58\u5728\u5173\u7cfb\uff0c\u800c\u8fd9\u4e2a\u5173\u7cfb\u901a\u5e38\u6765\u8bf4\u6307\u7684\u5c31\u662f\u5b50\u7c7b\u578b\u5173\u7cfb(\u4e5f\u53ef\u4ee5\u662f\u5176\u4ed6\u5173\u7cfb)\uff0c\u4e00\u4e2a\u7c7b\u578b\u662f\u53e6\u5916\u4e00\u4e2a\u7c7b\u578b\u7684\u5b50\u7c7b\u578b\uff0c\u4e00\u822c\u6765\u8bf4\u8fd9\u662f\u901a\u8fc7\u7ee7\u627f\u6765\u5b9e\u73b0\u7684\u3002 \u8fd9\u79cd\u5173\u7cfb\u5e76\u975e\u53ea\u6709\u5b50\u7c7b\u578b\uff0c\u5728\u63a5\u4e0b\u6765\u7684\u6587\u7ae0\u4e2d\u6211\u4eec\u4f1a\u770b\u5230Rust\u4e2d\u7684\u751f\u547d\u5468\u671f\u4e5f\u662f\u4e00\u79cd\u7c7b\u4f3c\u5b50\u7c7b\u578b\u7684\u5173\u7cfb\u3002","title":"Variance"},{"location":"%E5%8D%9A%E5%AE%A2/doc/rust/rust-variance/#rust-variance","text":"Rust\u4e2d\u7684\u7c7b\u578b\u4e0d\u5b58\u5b50\u7c7b\u578b\u7684\u5173\u7cfb\uff0c\u56e0\u4e3a\u4ed6\u6ca1\u6709\u7c7b\u578b\u7684\u7ee7\u627f\uff0c\u81ea\u7136\u4e5f\u5c31\u6ca1\u6709\u6240\u8c13\u7684\u5b50\u7c7b\u578b\u5173\u7cfb\u4e86\u3002\u4f46\u662fRust\u4e5f\u662f\u6709\u578b\u53d8\u7684\uff0c\u5b83\u7684\u578b\u53d8\u6307\u7684\u662f\u751f\u547d\u5468\u671f\u7684\u578b\u53d8\uff0c\u867d\u7136\u4ed6\u7684\u7c7b\u578b\u4e4b\u95f4\u6ca1\u6709\u5173\u7cfb\uff0c\u4f46\u662f\u4ed6\u7684\u751f\u547d\u5468\u671f\u5b58\u5728\u5b50\u7c7b\u578b\u5173\u7cfb\u3002 \u4e5f\u5c31\u662f\u5927\u7684\u751f\u547d\u5468\u671f\u662f\u5c0f\u751f\u547d\u5468\u671f\u7684\u5b50\u7c7b\u578b\u3002\u4e5f\u5c31\u662f\u8bf4\u6211\u53ef\u4ee5\u7528\u4e00\u4e2a\u5c0f\u751f\u547d\u5468\u671f\u7684\u53d8\u91cf\u6307\u5411\u4e00\u4e2a\u66f4\u5927\u7684\u751f\u547d\u5468\u671f\u53d8\u91cf\u3002 Note 'static \u662f\u6240\u6709\u751f\u547d\u5468\u671f\u7684\u5b50\u7c7b\u578b \u5728Variance\u7684\u5b9a\u4e49\u4e2d\u6211\u4eec\u66fe\u7ecf\u63d0\u5230\u7c7b\u578b\u6784\u9020\u5668\uff0c\u5728Rust\u4e2d\u6709\u6cdb\u578b\u3001\u8fd8\u6709 & \u3001 &mut \u7b49\uff0c\u8fd9\u4e9b\u90fd\u662f\u7c7b\u578b\u6784\u9020\u5668\uff0c\u4e0b\u9762\u8fd9\u5f20\u8868\u683c\u662fRust\u4e2d\u5404\u79cd\u7c7b\u578b\u6784\u9020\u5668\u7ed3\u5408\u751f\u547d\u5468\u671f\u540e\u4ea7\u751f\u7684\u5173\u7cfb\uff1a 'a T U * &'a T covariant covariant * &'a mut T covariant invariant * Box<T> covariant Vec<T> covariant * UnsafeCell<T> invariant Cell<T> invariant * fn(T) -> U contra variant covariant *const T covariant *mut T invariant Tips \u5e26 * \u53f7\u7684\u662f\u91cd\u70b9\u5173\u6ce8\u7684\u7c7b\u578b\uff0c\u4e5f\u662f\u6700\u57fa\u672c\u7684\u7c7b\u578b\uff0c\u6240\u6709\u5176\u4ed6\u7684\u7c7b\u578b\u90fd\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e9b\u57fa\u672c\u7c7b\u578b\u63a8\u5bfc\u6765\u7406\u89e3\u3002 \u5bf9\u4e8e &'a T \u6765\u8bf4\uff0c\u5bf9\u4e8e 'a \u6765\u8bf4\u662f\u534f\u53d8\u3001\u5bf9\u4e8e T \u4e5f\u662f\u534f\u53d8\u3002\u63a5\u7740\u6211\u4eec\u770b\u4e00\u4e9b\u4f8b\u5b50\u6765\u7406\u89e3Rust\u4e2d\u7684\u578b\u53d8\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 fn evil_feeder ( pet : & mut Animal ) { let spike : Dog = .. .; // `pet` is an Animal, and Dog is a subtype of Animal, // so this should be fine, right..? * pet = spike ; } fn main () { let mut mr_snuggles : Cat = .. .; evil_feeder ( & mut mr_snuggles ); // Replaces mr_snuggles with a Dog mr_snuggles . meow (); // OH NO, MEOWING DOG! } \u4e0a\u9762\u7684\u8fd9\u4e2a\u4f8b\u5b50\u662f\u65e0\u6cd5\u7f16\u8bd1\u7684\uff0c\u56e0\u4e3a &mut Animal \u5bf9\u4e8eT\u6765\u8bf4\u662f\u4e0d\u53d8\u7684(\u53c2\u8003\u4e0a\u9762\u7684\u8868\u683c)\u3002\u63a5\u7740\u6211\u4eec\u770b\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50: 1 2 3 4 5 6 7 8 9 10 11 12 13 fn evil_feeder < T > ( input : & mut T , val : T ) { * input = val ; } fn main () { let mut mr_snuggles : & ' static str = \"meow! :3\" ; // mr. snuggles forever!! { let spike = String :: from ( \"bark! >:V\" ); let spike_str : & str = & spike ; // Only lives for the block evil_feeder ( & mut mr_snuggles , spike_str ); // EVIL! } println! ( \"{}\" , mr_snuggles ); // Use after free? } evil_feeder \u4e2d\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f &mut T \uff0c\u5bf9\u4e8eT\u6765\u8bf4\u662f\u4e0d\u53d8\u7684\uff0c\u5f53\u4f20\u5165 &mut mr_snuggles \u65f6\uff0c\u4e5f\u5c31\u662f\u8bf4T\u4e3a &'static str \uff0c\u56e0\u4e3a\u7b2c\u4e8c\u4e2a\u53c2\u6570\u7684\u7c7b\u578b\u4e5f\u662fT\uff0c\u56e0\u6b64 \u7b2c\u4e8c\u4e2a\u53c2\u6570\u5b9e\u9645\u4e0a\u4e5f\u662f &'static str \u7c7b\u578b\uff0c\u8fd9\u662f\u9488\u5bf9 'static \u7684\u534f\u53d8\uff0c\u4f46\u662f 'static \u662f\u4efb\u4f55\u7c7b\u578b\u7684\u5b50\u7c7b\u578b\uff0c\u53ea\u6709 'static \u624d\u662f 'static \u7684\u5b50\u7c7b\u578b\uff0c\u5f53\u6211\u4eec\u4f20\u5165\u975e 'static \u751f\u547d\u5468\u671f\u53c2\u6570\u7684\u65f6\u5019\u603b\u662f\u65e0\u6cd5\u6ee1\u8db3\u5b50\u7c7b\u578b\u7684\u9700\u6c42\uff0c\u56e0\u6b64\u7f16\u8bd1\u4f1a\u51fa\u9519\u3002 rust 6 | let mut mr_snuggles: &'static str = \"meow! :3\"; // mr. snuggles forever!! | ------------ type annotation requires that `spike` is borrowed for `'static` ... 9 | let spike_str: &str = &spike; // Only lives for the block | ^^^^^^ borrowed value does not live long enough 10 | evil_feeder(& mut mr_snuggles, spike_str); // EVIL! 11 | } | - `spike` dropped here while still borrowed \u5982\u679c\u4e00\u4e2a\u7ed3\u6784\u4f53\u6709\u591a\u4e2a\u5b57\u6bb5\uff0c\u591a\u4e2a\u5b57\u6bb5 1 2 3 4 5 6 7 8 9 10 11 struct Owner <' a : ' c , ' b : ' c , ' c > { pub dog : & ' a & ' c str , pub cat : & ' b mut &' c str , } fn main () { let mut mr_snuggles : & ' static str = \"meow! :3\" ; let spike = String :: from ( \"bark! >:V\" ); let spike_str : & str = & spike ; let alice = Owner { dog : & spike_str , cat : & mut mr_snuggles }; } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 use std :: cell :: Cell ; struct MyType <' a , ' b , A : ' a , B : ' b , C , D , E , F , G , H , In , Out , Mixed > { a : & ' a A , // covariant over 'a and A b : & ' b mut B , // covariant over 'b and invariant over B c : * const C , // covariant over C d : * mut D , // invariant over D e : E , // covariant over E f : Vec < F > , // covariant over F g : Cell < G > , // invariant over G h1 : H , // would also be variant over H except... h2 : Cell < H > , // invariant over H, because invariance wins all conflicts i : fn ( In ) -> Out , // contravariant over In, covariant over Out k1 : fn ( Mixed ) -> usize , // would be contravariant over Mixed except.. k2 : Mixed , // invariant over Mixed, because invariance wins all conflicts } https://www.cnblogs.com/praying/p/14243566.html https://zhuanlan.zhihu.com/p/41814387 https://learnku.com/docs/nomicon/2018/38-subtypes-and-variability/4719 https://github.com/rust-lang/reference/blob/master/src/subtyping.md","title":"Rust Variance"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/blog/","text":"Can Reordering of Release/Acquire Operations Introduce Deadlock? read-acquire 1 int b = B . load ( std :: memory_order_acquire ); \u4efb\u4f55\u5728\u8fd9\u6761\u8bed\u53e5\u540e\u7684\u8bfb\u5199\u64cd\u4f5c\u90fd\u4e0d\u80fd\u8fdb\u884c\u91cd\u6392\u5e8f A read-acquire operation cannot be reordered, either by the compiler or the CPU, with any read or write operation that follows it in program order write-release 1 B . store ( 1 , std :: memory_order_release ); \u4efb\u4f55\u5728\u8fd9\u6761\u8bed\u53e5\u524d\u7684\u8bfb\u5199\u64cd\u4f5c\u90fd\u4e0d\u80fd\u8fdb\u884c\u91cd\u6392\u5e8f A write-release operation cannot be reordered with any read or write operation that precedes it in program order. \u603b\u7ed3: \u8bfb\u540e(acquire\u540e\u7684\u64cd\u4f5c\u65e0\u6cd5\u91cd\u6392\u5e8f)\u3001\u5199\u524d(release\u524d\u7684\u64cd\u4f5c\u65e0\u6cd5\u91cd\u6392\u5e8f) \u4f46\u662f\u5982\u679c\u662f\u4e0b\u9762\u8fd9\u79cd\u5f62\u5f0f\uff0c\u5219\u4e0d\u4fdd\u8bc1\u662f\u5426\u8981\u8fdb\u884c\u91cd\u6392\u5e8f: 1 2 3 4 5 6 7 A . store ( 1 , std :: memory_order_release ); int b = B . load ( std :: memory_order_acquire ); // \u53ef\u80fd\u4f1a\u53d1\u751f\u91cd\u6392\u5e8f\uff0c\u91cd\u6392\u5e8f\u540e\u7684\u7ed3\u679c\u5982\u4e0b\uff0c int b = B . load ( std :: memory_order_acquire ); A . store ( 1 , std :: memory_order_release ); \u5047\u8bbe\u6709\u8fd9\u6837\u7684case: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 // Thread 1 int expected = 0 ; while ( ! A . compare_exchange_weak ( expected , 1 , std :: memory_order_acquire )) { expected = 0 ; } // \u8fd9\u6761\u8bed\u53e5\u53ef\u80fd\u4f1a\u91cd\u6392\u5e8f\u5230B.compare_exchange_weak\u4e4b\u540e // Unlock A A . store ( 0 , std :: memory_order_release ); // Lock B while ( ! B . compare_exchange_weak ( expected , 1 , std :: memory_order_acquire )) { expected = 0 ; } // A.store(0, std::memory_order_release); \u88ab\u91cd\u6392\u5e8f\u5230\u8fd9 // Unlock B B . store ( 0 , std :: memory_order_release ); // Thread 2 // Lock B int expected = 0 ; while ( ! B . compare_exchange_weak ( expected , 1 , std :: memory_order_acquire )) { expected = 0 ; } // Lock A while ( ! A . compare_exchange_weak ( expected , 1 , std :: memory_order_acquire )) { expected = 0 ; } // Unlock A A . store ( 0 , std :: memory_order_release ); // Unlock B B . store ( 0 , std :: memory_order_release ); \u5982\u679c Thread1 \u4e2d\u53d1\u751f\u4e86\u91cd\u6392\u5e8f\u5c31\u4f1a\u548c Thread2 \u53d1\u751f\u6b7b\u9501\uff0c C++\u6807\u51c6\u4e2d\u76844.7.2:18\u4e2d\u63d0\u5230 : 1 2 An implementation should ensure that the last value (in modification order) assigned by an atomic or synchronization operation will become visible to all other threads in a finite period of time. 1 2 3 4 5 6 7 // Unlock A A . store ( 0 , std :: memory_order_release ); // Lock B while ( ! B . compare_exchange_weak ( expected , 1 , std :: memory_order_acquire )) { expected = 0 ; } \u9488\u5bf9\u4e0a\u9762\u7684\u573a\u666f\u6765\u770b\uff0c\u5f53\u6211\u4eec\u6267\u884c\u5230while\u5faa\u73af\u7684\u65f6\u5019\uff0cA\u5df2\u7ecf\u88ab\u8d4b\u503c\u4e3a0\uff0cC++\u6807\u51c6\u4e2d\u8bf4\u5230\u6700\u540e\u88ab\u4fee\u6539\u7684\u503c\u5e94\u8be5\u5728\u4e00\u4e2a\u6709\u9650\u7684\u65f6\u95f4\u5185 \u88ab\u5176\u4ed6\u7ebf\u7a0b\u770b\u5230\uff0c\u4f46\u662f\u8fd9\u91cc\u7684while loop\u5982\u679c\u662f\u65e0\u9650\u5faa\u73af\u5462? \u7f16\u8bd1\u5668\u65e0\u6cd5\u6392\u9664\u8fd9\u79cd\u60c5\u51b5\uff0c\u56e0\u6b64\uff0c\u5982\u679c\u7f16\u8bd1\u5668\u4e0d\u80fd\u6392\u9664while\u5faa\u73af\u662f\u65e0\u9650\u7684\uff0c \u90a3\u4e48\u5b83\u5c31\u4e0d\u80fd\u628a A.store \u8fdb\u884c\u91cd\u6392\u5e8f\u5230while\u5faa\u73af\u4e4b\u540e\u3002\u5982\u679c\u8fdb\u884c\u4e86\u91cd\u6392\u5e8f\u5c31\u8fdd\u53cd\u4e86C++\u6807\u51c6\u3002 \u56e0\u6b64\u5bf9\u4e8e\u4e0a\u8ff0\u7684\u8fd9\u79cd\u60c5\u51b5\u662f\u4e0d\u4f1a\u53d1\u751f\u6b7b\u9501\u7684\uff0c\u501f\u52a9\u4e8e Matt Godbolt\u2019s Compiler Explorer \u53ef\u4ee5\u9a8c\u8bc1\u4e0a\u8ff0\u4ee3\u7801\u5728\u4e0d\u540c\u7f16\u8bd1\u5668 \u7684\u4f18\u5316\u7f16\u8bd1\u573a\u666f\u4e0b\u662f\u5426\u53d1\u751f\u4e86\u91cd\u6392\u5e8f\u3002\u4e8b\u5b9e\u4e0a\u4e3b\u6d41\u7684C++\u7f16\u8bd1\u5668\u90fd\u6ca1\u6709\u53d1\u751f\u91cd\u6392\u5e8f\u3002 Can Reordering of Release/Acquire Operations Introduce Deadlock?","title":"Can Reordering of Release/Acquire Operations Introduce Deadlock?"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/blog/#can-reordering-of-releaseacquire-operations-introduce-deadlock","text":"read-acquire 1 int b = B . load ( std :: memory_order_acquire ); \u4efb\u4f55\u5728\u8fd9\u6761\u8bed\u53e5\u540e\u7684\u8bfb\u5199\u64cd\u4f5c\u90fd\u4e0d\u80fd\u8fdb\u884c\u91cd\u6392\u5e8f A read-acquire operation cannot be reordered, either by the compiler or the CPU, with any read or write operation that follows it in program order write-release 1 B . store ( 1 , std :: memory_order_release ); \u4efb\u4f55\u5728\u8fd9\u6761\u8bed\u53e5\u524d\u7684\u8bfb\u5199\u64cd\u4f5c\u90fd\u4e0d\u80fd\u8fdb\u884c\u91cd\u6392\u5e8f A write-release operation cannot be reordered with any read or write operation that precedes it in program order. \u603b\u7ed3: \u8bfb\u540e(acquire\u540e\u7684\u64cd\u4f5c\u65e0\u6cd5\u91cd\u6392\u5e8f)\u3001\u5199\u524d(release\u524d\u7684\u64cd\u4f5c\u65e0\u6cd5\u91cd\u6392\u5e8f) \u4f46\u662f\u5982\u679c\u662f\u4e0b\u9762\u8fd9\u79cd\u5f62\u5f0f\uff0c\u5219\u4e0d\u4fdd\u8bc1\u662f\u5426\u8981\u8fdb\u884c\u91cd\u6392\u5e8f: 1 2 3 4 5 6 7 A . store ( 1 , std :: memory_order_release ); int b = B . load ( std :: memory_order_acquire ); // \u53ef\u80fd\u4f1a\u53d1\u751f\u91cd\u6392\u5e8f\uff0c\u91cd\u6392\u5e8f\u540e\u7684\u7ed3\u679c\u5982\u4e0b\uff0c int b = B . load ( std :: memory_order_acquire ); A . store ( 1 , std :: memory_order_release ); \u5047\u8bbe\u6709\u8fd9\u6837\u7684case: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 // Thread 1 int expected = 0 ; while ( ! A . compare_exchange_weak ( expected , 1 , std :: memory_order_acquire )) { expected = 0 ; } // \u8fd9\u6761\u8bed\u53e5\u53ef\u80fd\u4f1a\u91cd\u6392\u5e8f\u5230B.compare_exchange_weak\u4e4b\u540e // Unlock A A . store ( 0 , std :: memory_order_release ); // Lock B while ( ! B . compare_exchange_weak ( expected , 1 , std :: memory_order_acquire )) { expected = 0 ; } // A.store(0, std::memory_order_release); \u88ab\u91cd\u6392\u5e8f\u5230\u8fd9 // Unlock B B . store ( 0 , std :: memory_order_release ); // Thread 2 // Lock B int expected = 0 ; while ( ! B . compare_exchange_weak ( expected , 1 , std :: memory_order_acquire )) { expected = 0 ; } // Lock A while ( ! A . compare_exchange_weak ( expected , 1 , std :: memory_order_acquire )) { expected = 0 ; } // Unlock A A . store ( 0 , std :: memory_order_release ); // Unlock B B . store ( 0 , std :: memory_order_release ); \u5982\u679c Thread1 \u4e2d\u53d1\u751f\u4e86\u91cd\u6392\u5e8f\u5c31\u4f1a\u548c Thread2 \u53d1\u751f\u6b7b\u9501\uff0c C++\u6807\u51c6\u4e2d\u76844.7.2:18\u4e2d\u63d0\u5230 : 1 2 An implementation should ensure that the last value (in modification order) assigned by an atomic or synchronization operation will become visible to all other threads in a finite period of time. 1 2 3 4 5 6 7 // Unlock A A . store ( 0 , std :: memory_order_release ); // Lock B while ( ! B . compare_exchange_weak ( expected , 1 , std :: memory_order_acquire )) { expected = 0 ; } \u9488\u5bf9\u4e0a\u9762\u7684\u573a\u666f\u6765\u770b\uff0c\u5f53\u6211\u4eec\u6267\u884c\u5230while\u5faa\u73af\u7684\u65f6\u5019\uff0cA\u5df2\u7ecf\u88ab\u8d4b\u503c\u4e3a0\uff0cC++\u6807\u51c6\u4e2d\u8bf4\u5230\u6700\u540e\u88ab\u4fee\u6539\u7684\u503c\u5e94\u8be5\u5728\u4e00\u4e2a\u6709\u9650\u7684\u65f6\u95f4\u5185 \u88ab\u5176\u4ed6\u7ebf\u7a0b\u770b\u5230\uff0c\u4f46\u662f\u8fd9\u91cc\u7684while loop\u5982\u679c\u662f\u65e0\u9650\u5faa\u73af\u5462? \u7f16\u8bd1\u5668\u65e0\u6cd5\u6392\u9664\u8fd9\u79cd\u60c5\u51b5\uff0c\u56e0\u6b64\uff0c\u5982\u679c\u7f16\u8bd1\u5668\u4e0d\u80fd\u6392\u9664while\u5faa\u73af\u662f\u65e0\u9650\u7684\uff0c \u90a3\u4e48\u5b83\u5c31\u4e0d\u80fd\u628a A.store \u8fdb\u884c\u91cd\u6392\u5e8f\u5230while\u5faa\u73af\u4e4b\u540e\u3002\u5982\u679c\u8fdb\u884c\u4e86\u91cd\u6392\u5e8f\u5c31\u8fdd\u53cd\u4e86C++\u6807\u51c6\u3002 \u56e0\u6b64\u5bf9\u4e8e\u4e0a\u8ff0\u7684\u8fd9\u79cd\u60c5\u51b5\u662f\u4e0d\u4f1a\u53d1\u751f\u6b7b\u9501\u7684\uff0c\u501f\u52a9\u4e8e Matt Godbolt\u2019s Compiler Explorer \u53ef\u4ee5\u9a8c\u8bc1\u4e0a\u8ff0\u4ee3\u7801\u5728\u4e0d\u540c\u7f16\u8bd1\u5668 \u7684\u4f18\u5316\u7f16\u8bd1\u573a\u666f\u4e0b\u662f\u5426\u53d1\u751f\u4e86\u91cd\u6392\u5e8f\u3002\u4e8b\u5b9e\u4e0a\u4e3b\u6d41\u7684C++\u7f16\u8bd1\u5668\u90fd\u6ca1\u6709\u53d1\u751f\u91cd\u6392\u5e8f\u3002 Can Reordering of Release/Acquire Operations Introduce Deadlock?","title":"Can Reordering of Release/Acquire Operations Introduce Deadlock?"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/blog/readling_list/","text":"\u5f85\u9605\u8bfb\u5217\u8868 https://fasterthanli.me/articles/pin-and-suffering (Done)","title":"\u5f85\u9605\u8bfb\u5217\u8868"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/blog/readling_list/#_1","text":"https://fasterthanli.me/articles/pin-and-suffering (Done)","title":"\u5f85\u9605\u8bfb\u5217\u8868"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/book/%20PracticalSystemProgrammingForRust/","text":"Practical System Programing For Rust Chapter1 rustup 1 2 3 4 5 6 7 $ rustup toolchain install nightly # \u5b89\u88c5nightly Rust $ rustup default nightly # \u5168\u5c40\u7ea7\u522b\u542f\u7528nightly Rust $ rustup override set nightly # \u76ee\u5f55\u7ea7\u522b\u542f\u7528nighly Rust $ rustup run nightly rustc --version # \u83b7\u53d6nightly Rust \u7248\u672c $ rustup default stable # \u4f7f\u7528Rust stable \u7248\u672c $ rustup show # \u663e\u793a\u5f53\u524d\u4f7f\u7528\u5f53Rust\u7248\u672c $ rustup update # \u66f4\u65b0\u6700\u65b0\u7684Rust\u7684\u7248\u672c Cargo 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 [ package ] name = \"demo\" version = \"0.1.0\" authors = [\"tianqian.zyf\"] edition = \"2018\" # See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html [[bin]] name = \"chapter3\" path = \"src/bin/chapter3.rs\" [[bin]] name = \"chapter4\" path = \"src/bin/chapter3.rs\" [[lib]] [[example]] # \u96c6\u6210\u6d4b\u8bd5target\uff0c\u5728tests\u76ee\u5f55\uff0c\u6bcf\u4e00\u4e2atest target\u90fd\u53ef\u4ee5\u7f16\u8bd1\u6210\u4e00\u4e2a\u4e8c\u8fdb\u5236 [[test]] name = \"integration\" path = \"tests/lib.rs\" # benchmark target\uff0c\u6bcf\u4e00\u4e2atarget\u90fd\u53ef\u4ee5\u72ec\u7acb\u7f16\u8bd1\u6210\u4e8c\u8fdb\u5236 [[bench]] [dependencies] regex = \"1.3.9\" # # chrono = { git = \"https://github.com/chronotope/chrono\" ,branch = \"master\" } # cratename = { version = \"2.1\", registry = \"alternate-registry-name\" } # # # \u7ed9examples\u3001tests\u3001benchmarks\u7b49\u63d0\u4f9b\u76f8\u5173\u4f9d\u8d56 [dev-dependencies] # \u7ed9build scripts\u63d0\u4f9b\u76f8\u5173\u4f9d\u8d56 [build-dependencies] # \u8de8\u5e73\u53f0\u7f16\u8bd1\u76f8\u5173\u7684target [target] # \u56db\u79cd\u7c7b\u578b\u7684profiles\uff0c\u53ef\u4ee5\u5206\u914d [profile.dev] [profile.release] # cargo test \u4f7f\u7528\u8fd9\u4e2aprofile [profile.test] # cargo bench \u4f7f\u7528\u8fd9\u4e2aprofile [profile.bench] # \u6307\u5b9aworkspace\uff0c\u786e\u5b9a\u90a3\u4e2apackage\u662fworkspace\uff0c\u54ea\u4e9b\u662f\u5b50package [workspace] \u4e00\u4e2aProject\u5305\u542b\u4e00\u4e2aWorkspace(Workspace\u672c\u8eab\u5305\u542b\u4e00\u4e2acargo.toml)\u3001\u4e00\u4e2aWorkspace\u5305\u542b\u591a\u4e2aPackage(\u6bcf\u4e00\u4e2aPackage\u5305\u542b\u4e00\u4e2acargo.toml)\u3001\u6bcf\u4e00\u4e2aPackage\u53ef\u4ee5\u662f\u4e00\u4e2alibray\uff0c\u6216\u8005\u662f\u591a\u4e2abinary\uff0c \u4f46\u662f\u65e0\u8bba\u5982\u4f55\u81f3\u5c11\u4f1a\u5305\u542b\u4e00\u4e2aCrate\u3001\u4e00\u4e2a Crate\u4f1a\u5305\u542b\u591a\u4e2amodules\u3001\u6bcf\u4e00\u4e2aModule\u5219\u4f1a\u5305\u542b\u591a\u4e2a\u6587\u4ef6\uff0c\u6bcf\u4e00\u4e2a\u6587\u4ef6\u4f1a\u5305\u542b\u591a\u4e2afunction\u7b49\u3002 1 2 3 4 5 6 7 8 9 10 $ cargo build $ cargo run $ cargo run --bin xxx # \u6307\u5b9a\u67d0\u4e2abin target\u6587\u4ef6\u6267\u884c $ rustc --print sysroot # \u6253\u5370LD_LIBRARY_PATH $ cargo test --test integration # \u4ec5\u4ec5\u8fd0\u884cintegration target test $ cargo test --test integration -- --test-threads = 1 # \u5355\u7ebf\u7a0b\u8fd0\u884c\u96c6\u6210\u6d4b\u8bd5 $ cargo build --release/dev # \u6307\u5b9aprofile\u7f16\u8bd1 $ cargo check # \u68c0\u67e5\u8bed\u6cd5\u9519\u8bef $ cargo test --no-run # \u7f16\u8bd1\u4f46\u662f\u4e0d\u8fd0\u884ctest $ cargo test \u2014- --ignored # \u8fd0\u884c\u88ab\u5ffd\u7565\u7684test Documentation \u4ee3\u7801\u6ce8\u91ca: // \u5355\u884c\u6ce8\u91ca /* */ \u591a\u884c\u6ce8\u91ca \u6587\u6863\u6ce8\u91ca: /// \u53ef\u4ee5\u4f7f\u7528markdown\uff0c\u5c5e\u4e8eitem\u7ea7\u522b\u7684\u6587\u6863 //! crate\u7ea7\u522b\u7684\u6ce8\u91ca 1 2 3 $ cargo doc -open # \u751f\u6210\u6587\u6863\u6ce8\u91ca\u5bf9\u5e94\u7684HTML\u6587\u6863 $ rustdoc doc/itest.md # \u5c06\u72ec\u7acb\u7684markdown\u6587\u4ef6\uff0c\u751f\u6210HTML\u6587\u6863 $ cargo test --doc # \u8fd0\u884c\u6587\u6863\u4e2d\u7684example\u4ee3\u7801 Chapter2 std::any::Any This can be used when the type of the value passed to a function is not known at compile time. Runtime reflection is used to check the type and perform suitable processing. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 use std :: fmt :: Debug ; use std :: any :: Any ; fn log < T : Any + Debug > ( value : & T ) { let value_any = value as & dyn Any ; match value_any . downcast_ref :: < String > () { Some ( as_string ) => { println! ( \"String ({}): {}\" , as_string . len (), as_string ); } None => { println! ( \"{:?}\" , value ) } } } fn do_work < T : Any + Debug > ( value : & T ) { log ( value ); // ... do some other work } fn main () { let my_string = \"Hello World\" . to_string (); do_work ( & my_string ); let my_i8 : i8 = 100 ; do_work ( & my_i8 ); } pin ptr *const i32 *mut i32","title":"Practical System Programing For Rust"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/book/%20PracticalSystemProgrammingForRust/#practical-system-programing-for-rust","text":"","title":"Practical System Programing For Rust"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/book/%20PracticalSystemProgrammingForRust/#chapter1","text":"","title":"Chapter1"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/book/%20PracticalSystemProgrammingForRust/#rustup","text":"1 2 3 4 5 6 7 $ rustup toolchain install nightly # \u5b89\u88c5nightly Rust $ rustup default nightly # \u5168\u5c40\u7ea7\u522b\u542f\u7528nightly Rust $ rustup override set nightly # \u76ee\u5f55\u7ea7\u522b\u542f\u7528nighly Rust $ rustup run nightly rustc --version # \u83b7\u53d6nightly Rust \u7248\u672c $ rustup default stable # \u4f7f\u7528Rust stable \u7248\u672c $ rustup show # \u663e\u793a\u5f53\u524d\u4f7f\u7528\u5f53Rust\u7248\u672c $ rustup update # \u66f4\u65b0\u6700\u65b0\u7684Rust\u7684\u7248\u672c","title":"rustup"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/book/%20PracticalSystemProgrammingForRust/#cargo","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 [ package ] name = \"demo\" version = \"0.1.0\" authors = [\"tianqian.zyf\"] edition = \"2018\" # See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html [[bin]] name = \"chapter3\" path = \"src/bin/chapter3.rs\" [[bin]] name = \"chapter4\" path = \"src/bin/chapter3.rs\" [[lib]] [[example]] # \u96c6\u6210\u6d4b\u8bd5target\uff0c\u5728tests\u76ee\u5f55\uff0c\u6bcf\u4e00\u4e2atest target\u90fd\u53ef\u4ee5\u7f16\u8bd1\u6210\u4e00\u4e2a\u4e8c\u8fdb\u5236 [[test]] name = \"integration\" path = \"tests/lib.rs\" # benchmark target\uff0c\u6bcf\u4e00\u4e2atarget\u90fd\u53ef\u4ee5\u72ec\u7acb\u7f16\u8bd1\u6210\u4e8c\u8fdb\u5236 [[bench]] [dependencies] regex = \"1.3.9\" # # chrono = { git = \"https://github.com/chronotope/chrono\" ,branch = \"master\" } # cratename = { version = \"2.1\", registry = \"alternate-registry-name\" } # # # \u7ed9examples\u3001tests\u3001benchmarks\u7b49\u63d0\u4f9b\u76f8\u5173\u4f9d\u8d56 [dev-dependencies] # \u7ed9build scripts\u63d0\u4f9b\u76f8\u5173\u4f9d\u8d56 [build-dependencies] # \u8de8\u5e73\u53f0\u7f16\u8bd1\u76f8\u5173\u7684target [target] # \u56db\u79cd\u7c7b\u578b\u7684profiles\uff0c\u53ef\u4ee5\u5206\u914d [profile.dev] [profile.release] # cargo test \u4f7f\u7528\u8fd9\u4e2aprofile [profile.test] # cargo bench \u4f7f\u7528\u8fd9\u4e2aprofile [profile.bench] # \u6307\u5b9aworkspace\uff0c\u786e\u5b9a\u90a3\u4e2apackage\u662fworkspace\uff0c\u54ea\u4e9b\u662f\u5b50package [workspace] \u4e00\u4e2aProject\u5305\u542b\u4e00\u4e2aWorkspace(Workspace\u672c\u8eab\u5305\u542b\u4e00\u4e2acargo.toml)\u3001\u4e00\u4e2aWorkspace\u5305\u542b\u591a\u4e2aPackage(\u6bcf\u4e00\u4e2aPackage\u5305\u542b\u4e00\u4e2acargo.toml)\u3001\u6bcf\u4e00\u4e2aPackage\u53ef\u4ee5\u662f\u4e00\u4e2alibray\uff0c\u6216\u8005\u662f\u591a\u4e2abinary\uff0c \u4f46\u662f\u65e0\u8bba\u5982\u4f55\u81f3\u5c11\u4f1a\u5305\u542b\u4e00\u4e2aCrate\u3001\u4e00\u4e2a Crate\u4f1a\u5305\u542b\u591a\u4e2amodules\u3001\u6bcf\u4e00\u4e2aModule\u5219\u4f1a\u5305\u542b\u591a\u4e2a\u6587\u4ef6\uff0c\u6bcf\u4e00\u4e2a\u6587\u4ef6\u4f1a\u5305\u542b\u591a\u4e2afunction\u7b49\u3002 1 2 3 4 5 6 7 8 9 10 $ cargo build $ cargo run $ cargo run --bin xxx # \u6307\u5b9a\u67d0\u4e2abin target\u6587\u4ef6\u6267\u884c $ rustc --print sysroot # \u6253\u5370LD_LIBRARY_PATH $ cargo test --test integration # \u4ec5\u4ec5\u8fd0\u884cintegration target test $ cargo test --test integration -- --test-threads = 1 # \u5355\u7ebf\u7a0b\u8fd0\u884c\u96c6\u6210\u6d4b\u8bd5 $ cargo build --release/dev # \u6307\u5b9aprofile\u7f16\u8bd1 $ cargo check # \u68c0\u67e5\u8bed\u6cd5\u9519\u8bef $ cargo test --no-run # \u7f16\u8bd1\u4f46\u662f\u4e0d\u8fd0\u884ctest $ cargo test \u2014- --ignored # \u8fd0\u884c\u88ab\u5ffd\u7565\u7684test","title":"Cargo"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/book/%20PracticalSystemProgrammingForRust/#documentation","text":"\u4ee3\u7801\u6ce8\u91ca: // \u5355\u884c\u6ce8\u91ca /* */ \u591a\u884c\u6ce8\u91ca \u6587\u6863\u6ce8\u91ca: /// \u53ef\u4ee5\u4f7f\u7528markdown\uff0c\u5c5e\u4e8eitem\u7ea7\u522b\u7684\u6587\u6863 //! crate\u7ea7\u522b\u7684\u6ce8\u91ca 1 2 3 $ cargo doc -open # \u751f\u6210\u6587\u6863\u6ce8\u91ca\u5bf9\u5e94\u7684HTML\u6587\u6863 $ rustdoc doc/itest.md # \u5c06\u72ec\u7acb\u7684markdown\u6587\u4ef6\uff0c\u751f\u6210HTML\u6587\u6863 $ cargo test --doc # \u8fd0\u884c\u6587\u6863\u4e2d\u7684example\u4ee3\u7801","title":"Documentation"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/book/%20PracticalSystemProgrammingForRust/#chapter2","text":"std::any::Any This can be used when the type of the value passed to a function is not known at compile time. Runtime reflection is used to check the type and perform suitable processing. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 use std :: fmt :: Debug ; use std :: any :: Any ; fn log < T : Any + Debug > ( value : & T ) { let value_any = value as & dyn Any ; match value_any . downcast_ref :: < String > () { Some ( as_string ) => { println! ( \"String ({}): {}\" , as_string . len (), as_string ); } None => { println! ( \"{:?}\" , value ) } } } fn do_work < T : Any + Debug > ( value : & T ) { log ( value ); // ... do some other work } fn main () { let my_string = \"Hello World\" . to_string (); do_work ( & my_string ); let my_i8 : i8 = 100 ; do_work ( & my_i8 ); } pin ptr *const i32 *mut i32","title":"Chapter2"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/book/ConcurrencyModernCpp/","text":"Concurrency Modern C++ what is a memory model? The C++ memory model defines a contract, this contract is between the programmer and the system The system consists of the compiler that generates machine code, the processor that executes the machine code and includes the different caches that store the state of the program. Each of the participants wants to optimise its part with the strong memory model I refer to sequential consistency, and with the weak memory model I refer to relaxed semantic. \u5185\u5b58\u6a21\u578b\u5b9a\u4e49\u4e86\u7a0b\u5e8f\u5458\u548c\u7cfb\u7edf(\u5305\u542b\u7f16\u8bd1\u5668\u3001\u5904\u7406\u5668\u3001Cache)\u7684\u7ea6\u5b9a\uff0c\u6709\u4e86\u8fd9\u4e9b\u7ea6\u5b9a\uff0c\u7cfb\u7edf\u624d\u53ef\u4ee5\u5c3d\u53ef\u80fd\u7684\u505a\u5404\u79cd\u4f18\u5316\u3002 \u5f3a\u5185\u5b58\u6a21\u578b\u5bf9\u5e94\u987a\u5e8f\u4e00\u81f4\u6027\u3001\u5f31\u5185\u5b58\u6a21\u578b\u6cfd\u5bf9\u5e94\u677e\u6563\u8bed\u4e49 Sequential consistency provides two guarantees: \u2022 The instructions of a program are executed in source code order. \u2022 There is a global order of all operations on all threads. \u987a\u5e8f\u4e00\u81f4\u6027\u63d0\u4f9b\u4e86\u4e24\u4e2a\u4fdd\u8bc1: \u7a0b\u5e8f\u7684\u6307\u4ee4\u6267\u884c\u662f\u6309\u7167\u4ee3\u7801\u4e2d\u7684\u987a\u5e8f\u6765\u7684 \u6240\u6709\u7684\u64cd\u4f5c\u5728\u6240\u6709\u7684\u7ebf\u7a0b\u4e2d\u7684\u90fd\u662f\u5168\u5c40\u6709\u5e8f\u7684\u3002 std::atomic_flag has two outstanding properties. std::atomic_flag is \u2022 the only lock-free atomic. A non-blocking algorithm is lock-free if there is guaranteed system- wide progress. \u2022 the building block for higher level thread abstractions. The only lock-free atomic? The remaining more powerful atomics can provide their functionality by using a mutex internally according to the C++ standard. These remaining atomics have a method called is_lock_free to check if the atomic uses a mutex internally. On the popular microprocessor architectures, I always get the answer true. You should be aware of this and check it on your target system if you want to program lock-free. std::atomic_flag != std::atomic<bool> Condition variables may be victim to two phenomena: spurious wakeup: the receiver of the message wakes up, although no notification happened lost wakeup: the sender sends its notification before the receiver gets to a wait state. There are three different kinds of operations: \u2022 Readoperation:memory_order_acquire and memory_order_consume \u2022 Write operation: memory_order_release \u2022 Read-modify-write operation:memory_order_acq_rel and memory_order_seq_cst memory_order_relaxed defines no synchronisation and ordering constraints. It does not fit in this taxonomy. The default for atomic operations is std::memory_order_seq_cst \u516d\u79cd\u539f\u5b50\u64cd\u4f5c\u7684memory model\uff0c\u53ef\u4ee5\u5206\u4e3a\u4e09\u7c7b\uff0c\u4e0d\u80fd\u968f\u4fbf\u7528\uff0c\u5426\u5219\u610f\u4e49\u4e0d\u5927\uff0c\u6bd4\u5982 load \u5c5e\u4e8eread\uff0c\u4f46\u662f\u5982\u679c\u7ed9\u4ed6\u6dfb\u52a0memory_order_release\u5219\u6ca1\u6709\u4efb\u4f55\u610f\u4e49\uff0c\u7b49\u540c\u4e8ememory_order_relaxed\uff0c\u5982\u679c\u6dfb\u52a0\u7684\u662fmemory_order_acq_rel\uff0c\u5b83\u662f\u5c5e\u4e8e Read-modify-write\u7c7b\u578b\uff0c\u6240\u4ee5writer\u90e8\u5206\u5c31\u6ca1\u6709\u6548\u679c\u4e86\u3002\u7b49\u540c\u4e8ememory_order_acquire\u3002 \u603b\u4f53\u4e0a\u5206\u4e3a\u4e09\u7c7b: \u2022 Sequential consistency: memory_order_seq_cst \u2022 Acquire-release: memory_order_consume, memory_order_acquire, memory_order_release, and memory_order_acq_rel \u2022 Relaxed:memory_order_relaxed While the sequential consistency establishes a global order between threads, the acquire-release semantic establishes an ordering between reading and writing operations on the same atomic variable with different threads. The relaxed semantic only guarantees the modification order of some atomic m. Modification order means that all modifications on a particular atomic m occur in some particular total order.Consequently, reads of an atomic object by a particular thread never see \u201colder\u201d values than those the thread has already observed. \u987a\u5e8f\u4e00\u81f4\u6027\u4fdd\u8bc1\u4e86\u5728\u7ebf\u7a0b\u95f4\u662f\u5168\u5c40\u6709\u5e8f\u7684\uff0cacquire-release\u8bed\u4e49\u5219\u5efa\u7acb\u5bf9\u4e8e\u76f8\u540c\u7684\u539f\u5b50\u53d8\u91cf\u7684\u7684\u4e0d\u540c\u7ebf\u7a0b\u4e4b\u95f4\u7684read\u548cwrite\u64cd\u4f5c\u662f\u6709\u5e8f\u7684\u3002relaxed\u8bed\u4e49\u53ea\u4fdd\u8bc1\u67d0\u4e9b\u539f\u5b50m\u7684\u4fee\u6539\u987a\u5e8f\u3002 \u4fee\u6539\u987a\u5e8f\u610f\u5473\u7740\u5bf9\u7279\u5b9a\u539f\u5b50m\u7684\u6240\u6709\u4fee\u6539\u90fd\u4ee5\u7279\u5b9a\u7684\u603b\u987a\u5e8f\u53d1\u751f\u3002\u56e0\u6b64\uff0c\u7279\u5b9a\u7ebf\u7a0b\u5bf9\u539f\u5b50\u5bf9\u8c61\u7684\u8bfb\u53d6\u6c38\u8fdc\u770b\u4e0d\u5230\u8fd9\u4e2a\u7ebf\u7a0b\u5df2\u7ecf\u89c2\u5bdf\u5230\u7684\u201c\u65e7\u201d\u503c\u3002 compare_exchange_strong and compare_exchange_weak The reason the operation compare_exchange_strong is called strong is apparent. There is also a method compare_exchange_weak. The weak version can fail spuriously. That means, although *atomicValue == expected holds, atomicValue was not set to desired and the function call returns false, so you have to check the condition in a loop: while (!atomicValue.compare_exchange_weak(expected, desired)). The weak form exists be- cause some processor doesn\u2019t support an atomic compare-exchange instruction. When called in a loop the weak form should be preferred. On some platforms, the weak form can run faster. weak\u7248\u672c\u5728\u8fd4\u56de\u7684\u65f6\u5019\uff0c\u5e76\u4e0d\u4fdd\u8bc1\u4e00\u5b9a\u8bbe\u7f6e\u6210\u529f\uff0c\u6240\u4ee5\u9700\u8981while\u5faa\u73af\u6765\u91cd\u590d\u8c03\u7528\u3002\u63d0\u4f9bweak\u7248\u672c\u7684\u76ee\u7684\u662f\u56e0\u4e3a\u5728\u4e00\u4e9b\u4e0d\u652f\u6301\u539f\u5b50\u7684compare-exchange\u6307\u4ee4\u7684\u5e73\u53f0\u4e0a\u6027\u80fd\u66f4\u597d\u3002 CAS\u7684ABA\u95ee\u9898 CAS operations are open for the so-called ABA problem. This means you read a value twice and each time it returns the same value A; therefore you conclude that nothing changed in between. However, you overlooked that the value may have changed to B in between readings. wait-free \u548c lock-free\u7684\u533a\u522b lock-free\u6570\u636e\u7ed3\u6784\u4e0d\u91c7\u7528\u4e92\u65a5\u9501\uff0c\u591a\u4e2a\u7ebf\u7a0b\u53ef\u4ee5\u540c\u65f6\u8bbf\u95ee\u6570\u636e\u7ed3\u6784\u800c\u4e0d\u7ba1\u53d1\u751f\u4e86\u4f55\u79cd\u4e8b\u4ef6\u3002\u4e00\u822c\u91c7\u7528compare_and_swap\u539f\u8bed\uff0c\u76f4\u5230\u67d0\u4e2a\u6761\u4ef6\u89e6\u53d1\u3002 \u4e00\u76f4while\u5faa\u73af\u7b49\u5f85\u6761\u4ef6\u53d1\u751f\u3002\u4f46\u662f\uff0c\u7406\u8bba\u4e0a\u5b58\u5728\u67d0\u4e2a\u7ebf\u7a0b\u4e00\u76f4\u5728\u8be5\u6761\u4ef6\u4e0a\u9762\u65e0\u9650\u5faa\u73af\u4e0b\u53bb\u3002 wait-free\u6570\u636e\u7ed3\u6784\u9996\u5148\u662f\u4e00\u4e2alock-free\u6570\u636e\u7ed3\u6784\uff0c\u4f46\u662f\u589e\u52a0\u4e86\u5982\u4e0b\u7684\u5c5e\u6027\uff1a\u6bcf\u4e00\u4e2a\u8bbf\u95ee\u6570\u636e\u7ed3\u6784\u7684\u7ebf\u7a0b\u5728\u6709\u9650\u6b65\u5185\u53ef\u4ee5\u5b8c\u6210\u76f8\u5e94\u7684\u5de5\u4f5c\uff0c\u800c\u4e0d\u7ba1\u5176\u4ed6\u7ebf\u7a0b\u7684\u884c\u4e3a\u3002 \u4e00\u822c\u91c7\u7528atomic_fetch_add\u539f\u8bed spin lock\u7b49\u91c7\u7528busy-wait\u6a21\u5f0f\u7684\u7b97\u6cd5\u90fd\u4e0d\u662flock free\u7684\uff0c\u56e0\u4e3a\u5982\u679c\u4e00\u4e2a\u7ebf\u7a0b\u83b7\u5f97\u9501\u4f46\u662f\u88ab\u6302\u8d77\uff0c\u5219\u5176\u4ed6\u7ebf\u7a0b\u65e0\u6cd5\u7ee7\u7eed\u8fdb\u884c\u5de5\u4f5c\u3002 \u5bf9\u4e8elock-free\u7b97\u6cd5\uff0c\u5982\u679c\u4efb\u4f55\u65f6\u523b\u4e00\u4e2a\u64cd\u4f5c\u8be5\u6570\u636e\u7ed3\u6784\u7684\u7ebf\u7a0b\u88ab\u6302\u8d77\uff0c\u5176\u4ed6\u7ebf\u7a0b\u4ecd\u7136\u53ef\u4ee5\u8bbf\u95ee\u6570\u636e\u7ed3\u6784\u5e76\u5b8c\u6210\u76f8\u5e94\u5de5\u4f5c\u3002 wait-free\u9996\u5148\u662f\u4e00\u4e2alock-free\u7b97\u6cd5\uff0c\u4f46\u662f\u8fdb\u884c\u4e86\u52a0\u5f3a\uff0c\u7ebf\u7a0b\u5728\u6709\u9650\u6b65\u5185\u9700\u8981\u5b8c\u6210\u76f8\u5e94\u5de5\u4f5c\u3002 \u5c0f\u5fc3map\u7684[]\u7d22\u5f15\u8bbf\u95ee\uff0c\u5f53key\u4e0d\u5b58\u7684\u65f6\u5019\uff0c\u5b9e\u9645\u4e0a\u4f1a\u521b\u5efa\u4e00\u4e2a\u9ed8\u8ba4\u7684\u503c\uff0c\u8fd9\u662f\u4e00\u4e2a\u5199\u64cd\u4f5c\u3002\u5c0f\u5fc3\u4f1a\u4ea7\u751fdata race Atomic Smart Pointers (C++20\u5f00\u59cb\u652f\u6301) \u4fdd\u8bc1\u5bf9\u76f8\u540c\u7684shared_ptr\u53d8\u91cf\u7684\u8bfb\u5199\u662f\u539f\u5b50\u7684\uff0c\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\uff0c\u9ed8\u8ba4\u7684shared_ptr\u4e0d\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\u3002 sequenced-before\u3001happens-before\u3001synchronizes-with(=inter-thread happens-before)\u3001release-sequence\u3001Carries dependency happens-before\u8868\u793a\u8de8\u7ebf\u7a0b\u4e4b\u95f4\u7684\u64cd\u4f5c\u5148\u540e\u987a\u5e8f\uff0c\u5982\u679c\u4e00\u4e2a\u64cd\u4f5chappens-before\u53e6\u4e00\u4e2a\u64cd\u4f5c\uff0c\u90a3\u4e48\u610f\u5473\u7740\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u7684\u7ed3\u679c\u5bf9\u7b2c\u4e8c\u4e2a\u64cd\u4f5c\u53ef\u89c1\uff0c\u800c\u4e14\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u7684\u6267\u884c\u987a\u5e8f\u5c06\u6392\u5728\u7b2c\u4e8c\u4e2a\u64cd\u4f5c\u7684\u524d\u9762\u3002 \u4e24\u4e2a\u64cd\u4f5c\u4e4b\u95f4\u5b58\u5728happens-before\u5173\u7cfb\uff0c sequenced-before \u6307\u7684\u540c\u4e00\u7ebf\u7a0b\u4e0b\uff0c\u4ee3\u7801\u4e0a\u7684\u987a\u5e8f\u5173\u7cfb\uff0c\u987a\u5e8f\u4e00\u81f4\u6027\u6a21\u578b\u4e0b\uff0csequenced-before\u7b49\u4e8ehappend-before\uff0c\u8fd9\u662f\u8fd9\u79cd\u5185\u5b58\u6a21\u578b\u53ef\u4ee5\u4fdd\u8bc1\u7684\u3002 synchronizes-with\u5219\u662f\u8de8\u7ebf\u7a0b\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u88ab\u79f0\u4e4b\u4e3a\u7ebf\u7a0b\u5185\u7684happens-before\u5173\u7cfb\u3002\u4f46\u662fhappens-before\u800c\u8a00\uff0csynchronizes-with\u5b58\u5728\u540c\u6b65\u7684\u8bed\u4e49\uff0c Carries dependency \u540c\u4e00\u4e2a\u7ebf\u7a0b\u5185\u8868\u8fbe\u5f0fA sequenced-before\u8868\u8fbe\u5f0fB\uff0c\u5e76\u4e14\u8868\u8fbe\u5f0fB\u7684\u503c\u662f\u53d7\u8868\u8fbe\u5f0fA\u7684\u5f71\u54cd\u7684\u4e00\u79cd\u5173\u7cfb\uff0c\u79f0\u4e4b\u4e3aCarries depenndency\u3002 happends-before\u5177\u5907\u4f20\u9012\u6027 std::memory_order_consume \u6bd4\u8f83\u590d\u6742\u96be\u61c2\uff0c\u6ca1\u6709\u7f16\u8bd1\u5668\u652f\u6301\uff0c\u9ed8\u8ba4\u7b49\u4e8e std::memory_order_acquire std::memory_order_consume deals with data dependencies on atomics. Data dependencies exist in two ways. First, let us look at carries-a-dependency-to in a thread and dependency-ordered before between two threads. Both dependencies introduce a happens-before relation. These are the kind of relations we are looking for. What does carries-a-dependency-to and dependency-order-before mean? \u2022 carries-a-dependency-to: if the result of operation A is used as an operand in operation B, then: A carries-a-dependency-to B. \u2022 dependency-ordered-before: a store operation (with std::memory_order_release, std::memory_- order_acq_rel, or std::memory_order_seq_cst) is dependency-ordered-before a load operation B (with std::memory_order_consume) if the result of load operation B is used in a further operation C in the same thread. It is important to note that operations B and C have to be in the same thread. Acquire/Release\u8bed\u4e49 There is no global synchronisation between threads in the acquire-release semantic; there is only synchronisation between atomic operations on the same atomic variable. A write operation on one thread synchronises with a read operation on another thread on the same atomic variable. The acquire-release semantic is based on one fundamental idea: a release operation synchronises with an acquire operation on the same atomic and establishes an ordering constraint. This means all read and write operations cannot be moved after a release operation, and all read and write operations cannot be moved before an acquire operation. \u7b80\u5355\u6765\u8bf4\u5c31\u662fAcquire/Release\u8bed\u4e49\u5728\u5bf9\u76f8\u540c\u7684\u539f\u5b50\u53d8\u91cf\u7684Release\u548cAcquire\u4e24\u4e2a\u64cd\u4f5c\u4e4b\u95f4\u5efa\u7acb\u4e86\u987a\u5e8f\u9650\u5236\uff0c\u6240\u6709\u5728Release\u64cd\u4f5c\u4e4b\u524d\u7684\u8bfb\u5199\u64cd\u4f5c\u90fd\u65e0\u6cd5\u79fb\u52a8\u5230Release\u4e4b\u540e\uff0c\u6240\u6709\u5728Acquire\u4e4b\u540e\u7684 \u8bfb\u5199\u64cd\u4f5c\u90fd\u65e0\u6cd5\u79fb\u52a8\u5230Acquire\u4e4b\u524d\u3002 memory_order_relaxed \u6ca1\u6709\u4efb\u4f55\u540c\u6b65\u548c\u987a\u5e8f\u9650\u5236\uff0c\u5178\u578b\u7684\u4f7f\u7528\u573a\u666f\u5c31\u662f\u5bf9\u4e8e\u987a\u5e8f\u65e0\u5173\u7684\u4e00\u4e9b\u64cd\u7eb5\uff0c\u4f8b\u5982\u8ba1\u6570\u5668\u3001\u6bd4\u5982shared_ptr\u91cc\u9762\u7684\u5f15\u7528\u8ba1\u6570\u3002\u53ea\u9700\u8981\u5173\u6ce8\u539f\u5b50\u6027 \u4e0d\u5173\u6ce8\u8ba1\u6570\u7684\u987a\u5e8f\u3002 Fence The fundamental idea of std::atomic_thread_fence is to establish synchronisation and ordering constraints between threads without an atomic operation. C++ support two kind of fences: a std::atomic_thread_fence and a std::atomic_signal_fence. \u2022 std::atomic_thread_fence: synchronises memory accesses between threads. \u2022 std::atomic_signal_fence: synchronises between a signal handler and code running on the same thread. \u4ec0\u4e48\u662fLoadLoad\u3001LoadStore\u3001StoreLoad\u3001StoreStore? The expression if(resultRead) return result is a load, followed by a store operation. Fence\u5206\u4e3a\u4e09\u7c7b: Full fence: std::atomic_thread_fence \u53ef\u4ee5\u963b\u6b62\u4efb\u610f\u64cd\u4f5c\u7684\u91cd\u6392\u5e8f\uff0c\u4f46\u662f\u6ca1\u529e\u6cd5\u5bf9StoreLoad\u7c7b\u578b\u7684\u64cd\u4f5c\u963b\u6b62\u5176\u91cd\u6392\u5e8f Acquire fence: std::atomic_thread_fence(std::memory_order_acquire) \uff0c\u53ef\u4ee5\u963b\u6b62acquire\u524d\u7684read\u64cd\u4f5c\uff0c\u91cd\u6392\u5e8f\u5230acquire\u4e4b\u540e Release fence: std::atomic_thread_fence(std::memory_order_release) \uff0c\u53ef\u4ee5\u963b\u6b62release\u524d\u7684write\u64cd\u4f5c\uff0c\u91cd\u6392\u5e8f\u5230release\u4e4b\u524d Thread-safe Initialisation \u5e38\u91cf\u8868\u8fbe\u5f0f \u7ed3\u5408 std::call_once \u3001 std::once_flag static\u53d8\u91cf\u7ed3\u5408block scope Fire and Forget Fire and forget futures look very promising but have a big drawback. A future that is created by std::async waits on its destructor, until its promise is done. In this context, waiting is not very different from blocking. The future blocks the progress of the program in its destructor. This becomes more evident, when you use fire and forget futures. What seems to be concurrent actually runs sequentially. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #include <chrono> #include <future> #include <iostream> #include <thread> int main (){ std :: cout << std :: endl ; std :: async ( std :: launch :: async , []{ std :: this_thread :: sleep_for ( std :: chrono :: seconds ( 2 )); std :: cout << \"first thread\" << std :: endl ; }); // \u8fd4\u56de\u7684future\u6790\u6784\u4f1a\u7b49\u5230\u7ebf\u7a0b\u6267\u884c\u5b8c\u6bd5\u518d\u7ee7\u7eed\u5f80\u4e0b\u6267\u884c std :: async ( std :: launch :: async , []{ std :: this_thread :: sleep_for ( std :: chrono :: seconds ( 1 )); std :: cout << \"second thread\" << std :: endl ;} ); std :: cout << \"main thread\" << std :: endl ; std :: cout << std :: endl ; } std::current_exception() \u83b7\u53d6\u5f53\u524d\u5f02\u5e38\u4fe1\u606f std::make_exception_ptr(std::runtime_error(\"error msg\")) \u521b\u5efa\u5f02\u5e38 ThreadSanitizer -fsanitize=thread Lock free: Hazard Pointers RCU fast latching","title":"Concurrency Modern C++"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/book/ConcurrencyModernCpp/#concurrency-modern-c","text":"","title":"Concurrency Modern C++"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/book/ConcurrencyModernCpp/#what-is-a-memory-model","text":"The C++ memory model defines a contract, this contract is between the programmer and the system The system consists of the compiler that generates machine code, the processor that executes the machine code and includes the different caches that store the state of the program. Each of the participants wants to optimise its part with the strong memory model I refer to sequential consistency, and with the weak memory model I refer to relaxed semantic. \u5185\u5b58\u6a21\u578b\u5b9a\u4e49\u4e86\u7a0b\u5e8f\u5458\u548c\u7cfb\u7edf(\u5305\u542b\u7f16\u8bd1\u5668\u3001\u5904\u7406\u5668\u3001Cache)\u7684\u7ea6\u5b9a\uff0c\u6709\u4e86\u8fd9\u4e9b\u7ea6\u5b9a\uff0c\u7cfb\u7edf\u624d\u53ef\u4ee5\u5c3d\u53ef\u80fd\u7684\u505a\u5404\u79cd\u4f18\u5316\u3002 \u5f3a\u5185\u5b58\u6a21\u578b\u5bf9\u5e94\u987a\u5e8f\u4e00\u81f4\u6027\u3001\u5f31\u5185\u5b58\u6a21\u578b\u6cfd\u5bf9\u5e94\u677e\u6563\u8bed\u4e49 Sequential consistency provides two guarantees: \u2022 The instructions of a program are executed in source code order. \u2022 There is a global order of all operations on all threads. \u987a\u5e8f\u4e00\u81f4\u6027\u63d0\u4f9b\u4e86\u4e24\u4e2a\u4fdd\u8bc1: \u7a0b\u5e8f\u7684\u6307\u4ee4\u6267\u884c\u662f\u6309\u7167\u4ee3\u7801\u4e2d\u7684\u987a\u5e8f\u6765\u7684 \u6240\u6709\u7684\u64cd\u4f5c\u5728\u6240\u6709\u7684\u7ebf\u7a0b\u4e2d\u7684\u90fd\u662f\u5168\u5c40\u6709\u5e8f\u7684\u3002 std::atomic_flag has two outstanding properties. std::atomic_flag is \u2022 the only lock-free atomic. A non-blocking algorithm is lock-free if there is guaranteed system- wide progress. \u2022 the building block for higher level thread abstractions. The only lock-free atomic? The remaining more powerful atomics can provide their functionality by using a mutex internally according to the C++ standard. These remaining atomics have a method called is_lock_free to check if the atomic uses a mutex internally. On the popular microprocessor architectures, I always get the answer true. You should be aware of this and check it on your target system if you want to program lock-free. std::atomic_flag != std::atomic<bool> Condition variables may be victim to two phenomena: spurious wakeup: the receiver of the message wakes up, although no notification happened lost wakeup: the sender sends its notification before the receiver gets to a wait state. There are three different kinds of operations: \u2022 Readoperation:memory_order_acquire and memory_order_consume \u2022 Write operation: memory_order_release \u2022 Read-modify-write operation:memory_order_acq_rel and memory_order_seq_cst memory_order_relaxed defines no synchronisation and ordering constraints. It does not fit in this taxonomy. The default for atomic operations is std::memory_order_seq_cst \u516d\u79cd\u539f\u5b50\u64cd\u4f5c\u7684memory model\uff0c\u53ef\u4ee5\u5206\u4e3a\u4e09\u7c7b\uff0c\u4e0d\u80fd\u968f\u4fbf\u7528\uff0c\u5426\u5219\u610f\u4e49\u4e0d\u5927\uff0c\u6bd4\u5982 load \u5c5e\u4e8eread\uff0c\u4f46\u662f\u5982\u679c\u7ed9\u4ed6\u6dfb\u52a0memory_order_release\u5219\u6ca1\u6709\u4efb\u4f55\u610f\u4e49\uff0c\u7b49\u540c\u4e8ememory_order_relaxed\uff0c\u5982\u679c\u6dfb\u52a0\u7684\u662fmemory_order_acq_rel\uff0c\u5b83\u662f\u5c5e\u4e8e Read-modify-write\u7c7b\u578b\uff0c\u6240\u4ee5writer\u90e8\u5206\u5c31\u6ca1\u6709\u6548\u679c\u4e86\u3002\u7b49\u540c\u4e8ememory_order_acquire\u3002 \u603b\u4f53\u4e0a\u5206\u4e3a\u4e09\u7c7b: \u2022 Sequential consistency: memory_order_seq_cst \u2022 Acquire-release: memory_order_consume, memory_order_acquire, memory_order_release, and memory_order_acq_rel \u2022 Relaxed:memory_order_relaxed While the sequential consistency establishes a global order between threads, the acquire-release semantic establishes an ordering between reading and writing operations on the same atomic variable with different threads. The relaxed semantic only guarantees the modification order of some atomic m. Modification order means that all modifications on a particular atomic m occur in some particular total order.Consequently, reads of an atomic object by a particular thread never see \u201colder\u201d values than those the thread has already observed. \u987a\u5e8f\u4e00\u81f4\u6027\u4fdd\u8bc1\u4e86\u5728\u7ebf\u7a0b\u95f4\u662f\u5168\u5c40\u6709\u5e8f\u7684\uff0cacquire-release\u8bed\u4e49\u5219\u5efa\u7acb\u5bf9\u4e8e\u76f8\u540c\u7684\u539f\u5b50\u53d8\u91cf\u7684\u7684\u4e0d\u540c\u7ebf\u7a0b\u4e4b\u95f4\u7684read\u548cwrite\u64cd\u4f5c\u662f\u6709\u5e8f\u7684\u3002relaxed\u8bed\u4e49\u53ea\u4fdd\u8bc1\u67d0\u4e9b\u539f\u5b50m\u7684\u4fee\u6539\u987a\u5e8f\u3002 \u4fee\u6539\u987a\u5e8f\u610f\u5473\u7740\u5bf9\u7279\u5b9a\u539f\u5b50m\u7684\u6240\u6709\u4fee\u6539\u90fd\u4ee5\u7279\u5b9a\u7684\u603b\u987a\u5e8f\u53d1\u751f\u3002\u56e0\u6b64\uff0c\u7279\u5b9a\u7ebf\u7a0b\u5bf9\u539f\u5b50\u5bf9\u8c61\u7684\u8bfb\u53d6\u6c38\u8fdc\u770b\u4e0d\u5230\u8fd9\u4e2a\u7ebf\u7a0b\u5df2\u7ecf\u89c2\u5bdf\u5230\u7684\u201c\u65e7\u201d\u503c\u3002 compare_exchange_strong and compare_exchange_weak The reason the operation compare_exchange_strong is called strong is apparent. There is also a method compare_exchange_weak. The weak version can fail spuriously. That means, although *atomicValue == expected holds, atomicValue was not set to desired and the function call returns false, so you have to check the condition in a loop: while (!atomicValue.compare_exchange_weak(expected, desired)). The weak form exists be- cause some processor doesn\u2019t support an atomic compare-exchange instruction. When called in a loop the weak form should be preferred. On some platforms, the weak form can run faster. weak\u7248\u672c\u5728\u8fd4\u56de\u7684\u65f6\u5019\uff0c\u5e76\u4e0d\u4fdd\u8bc1\u4e00\u5b9a\u8bbe\u7f6e\u6210\u529f\uff0c\u6240\u4ee5\u9700\u8981while\u5faa\u73af\u6765\u91cd\u590d\u8c03\u7528\u3002\u63d0\u4f9bweak\u7248\u672c\u7684\u76ee\u7684\u662f\u56e0\u4e3a\u5728\u4e00\u4e9b\u4e0d\u652f\u6301\u539f\u5b50\u7684compare-exchange\u6307\u4ee4\u7684\u5e73\u53f0\u4e0a\u6027\u80fd\u66f4\u597d\u3002 CAS\u7684ABA\u95ee\u9898 CAS operations are open for the so-called ABA problem. This means you read a value twice and each time it returns the same value A; therefore you conclude that nothing changed in between. However, you overlooked that the value may have changed to B in between readings. wait-free \u548c lock-free\u7684\u533a\u522b lock-free\u6570\u636e\u7ed3\u6784\u4e0d\u91c7\u7528\u4e92\u65a5\u9501\uff0c\u591a\u4e2a\u7ebf\u7a0b\u53ef\u4ee5\u540c\u65f6\u8bbf\u95ee\u6570\u636e\u7ed3\u6784\u800c\u4e0d\u7ba1\u53d1\u751f\u4e86\u4f55\u79cd\u4e8b\u4ef6\u3002\u4e00\u822c\u91c7\u7528compare_and_swap\u539f\u8bed\uff0c\u76f4\u5230\u67d0\u4e2a\u6761\u4ef6\u89e6\u53d1\u3002 \u4e00\u76f4while\u5faa\u73af\u7b49\u5f85\u6761\u4ef6\u53d1\u751f\u3002\u4f46\u662f\uff0c\u7406\u8bba\u4e0a\u5b58\u5728\u67d0\u4e2a\u7ebf\u7a0b\u4e00\u76f4\u5728\u8be5\u6761\u4ef6\u4e0a\u9762\u65e0\u9650\u5faa\u73af\u4e0b\u53bb\u3002 wait-free\u6570\u636e\u7ed3\u6784\u9996\u5148\u662f\u4e00\u4e2alock-free\u6570\u636e\u7ed3\u6784\uff0c\u4f46\u662f\u589e\u52a0\u4e86\u5982\u4e0b\u7684\u5c5e\u6027\uff1a\u6bcf\u4e00\u4e2a\u8bbf\u95ee\u6570\u636e\u7ed3\u6784\u7684\u7ebf\u7a0b\u5728\u6709\u9650\u6b65\u5185\u53ef\u4ee5\u5b8c\u6210\u76f8\u5e94\u7684\u5de5\u4f5c\uff0c\u800c\u4e0d\u7ba1\u5176\u4ed6\u7ebf\u7a0b\u7684\u884c\u4e3a\u3002 \u4e00\u822c\u91c7\u7528atomic_fetch_add\u539f\u8bed spin lock\u7b49\u91c7\u7528busy-wait\u6a21\u5f0f\u7684\u7b97\u6cd5\u90fd\u4e0d\u662flock free\u7684\uff0c\u56e0\u4e3a\u5982\u679c\u4e00\u4e2a\u7ebf\u7a0b\u83b7\u5f97\u9501\u4f46\u662f\u88ab\u6302\u8d77\uff0c\u5219\u5176\u4ed6\u7ebf\u7a0b\u65e0\u6cd5\u7ee7\u7eed\u8fdb\u884c\u5de5\u4f5c\u3002 \u5bf9\u4e8elock-free\u7b97\u6cd5\uff0c\u5982\u679c\u4efb\u4f55\u65f6\u523b\u4e00\u4e2a\u64cd\u4f5c\u8be5\u6570\u636e\u7ed3\u6784\u7684\u7ebf\u7a0b\u88ab\u6302\u8d77\uff0c\u5176\u4ed6\u7ebf\u7a0b\u4ecd\u7136\u53ef\u4ee5\u8bbf\u95ee\u6570\u636e\u7ed3\u6784\u5e76\u5b8c\u6210\u76f8\u5e94\u5de5\u4f5c\u3002 wait-free\u9996\u5148\u662f\u4e00\u4e2alock-free\u7b97\u6cd5\uff0c\u4f46\u662f\u8fdb\u884c\u4e86\u52a0\u5f3a\uff0c\u7ebf\u7a0b\u5728\u6709\u9650\u6b65\u5185\u9700\u8981\u5b8c\u6210\u76f8\u5e94\u5de5\u4f5c\u3002 \u5c0f\u5fc3map\u7684[]\u7d22\u5f15\u8bbf\u95ee\uff0c\u5f53key\u4e0d\u5b58\u7684\u65f6\u5019\uff0c\u5b9e\u9645\u4e0a\u4f1a\u521b\u5efa\u4e00\u4e2a\u9ed8\u8ba4\u7684\u503c\uff0c\u8fd9\u662f\u4e00\u4e2a\u5199\u64cd\u4f5c\u3002\u5c0f\u5fc3\u4f1a\u4ea7\u751fdata race Atomic Smart Pointers (C++20\u5f00\u59cb\u652f\u6301) \u4fdd\u8bc1\u5bf9\u76f8\u540c\u7684shared_ptr\u53d8\u91cf\u7684\u8bfb\u5199\u662f\u539f\u5b50\u7684\uff0c\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\uff0c\u9ed8\u8ba4\u7684shared_ptr\u4e0d\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\u3002 sequenced-before\u3001happens-before\u3001synchronizes-with(=inter-thread happens-before)\u3001release-sequence\u3001Carries dependency happens-before\u8868\u793a\u8de8\u7ebf\u7a0b\u4e4b\u95f4\u7684\u64cd\u4f5c\u5148\u540e\u987a\u5e8f\uff0c\u5982\u679c\u4e00\u4e2a\u64cd\u4f5chappens-before\u53e6\u4e00\u4e2a\u64cd\u4f5c\uff0c\u90a3\u4e48\u610f\u5473\u7740\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u7684\u7ed3\u679c\u5bf9\u7b2c\u4e8c\u4e2a\u64cd\u4f5c\u53ef\u89c1\uff0c\u800c\u4e14\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u7684\u6267\u884c\u987a\u5e8f\u5c06\u6392\u5728\u7b2c\u4e8c\u4e2a\u64cd\u4f5c\u7684\u524d\u9762\u3002 \u4e24\u4e2a\u64cd\u4f5c\u4e4b\u95f4\u5b58\u5728happens-before\u5173\u7cfb\uff0c sequenced-before \u6307\u7684\u540c\u4e00\u7ebf\u7a0b\u4e0b\uff0c\u4ee3\u7801\u4e0a\u7684\u987a\u5e8f\u5173\u7cfb\uff0c\u987a\u5e8f\u4e00\u81f4\u6027\u6a21\u578b\u4e0b\uff0csequenced-before\u7b49\u4e8ehappend-before\uff0c\u8fd9\u662f\u8fd9\u79cd\u5185\u5b58\u6a21\u578b\u53ef\u4ee5\u4fdd\u8bc1\u7684\u3002 synchronizes-with\u5219\u662f\u8de8\u7ebf\u7a0b\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u88ab\u79f0\u4e4b\u4e3a\u7ebf\u7a0b\u5185\u7684happens-before\u5173\u7cfb\u3002\u4f46\u662fhappens-before\u800c\u8a00\uff0csynchronizes-with\u5b58\u5728\u540c\u6b65\u7684\u8bed\u4e49\uff0c Carries dependency \u540c\u4e00\u4e2a\u7ebf\u7a0b\u5185\u8868\u8fbe\u5f0fA sequenced-before\u8868\u8fbe\u5f0fB\uff0c\u5e76\u4e14\u8868\u8fbe\u5f0fB\u7684\u503c\u662f\u53d7\u8868\u8fbe\u5f0fA\u7684\u5f71\u54cd\u7684\u4e00\u79cd\u5173\u7cfb\uff0c\u79f0\u4e4b\u4e3aCarries depenndency\u3002 happends-before\u5177\u5907\u4f20\u9012\u6027 std::memory_order_consume \u6bd4\u8f83\u590d\u6742\u96be\u61c2\uff0c\u6ca1\u6709\u7f16\u8bd1\u5668\u652f\u6301\uff0c\u9ed8\u8ba4\u7b49\u4e8e std::memory_order_acquire std::memory_order_consume deals with data dependencies on atomics. Data dependencies exist in two ways. First, let us look at carries-a-dependency-to in a thread and dependency-ordered before between two threads. Both dependencies introduce a happens-before relation. These are the kind of relations we are looking for. What does carries-a-dependency-to and dependency-order-before mean? \u2022 carries-a-dependency-to: if the result of operation A is used as an operand in operation B, then: A carries-a-dependency-to B. \u2022 dependency-ordered-before: a store operation (with std::memory_order_release, std::memory_- order_acq_rel, or std::memory_order_seq_cst) is dependency-ordered-before a load operation B (with std::memory_order_consume) if the result of load operation B is used in a further operation C in the same thread. It is important to note that operations B and C have to be in the same thread. Acquire/Release\u8bed\u4e49 There is no global synchronisation between threads in the acquire-release semantic; there is only synchronisation between atomic operations on the same atomic variable. A write operation on one thread synchronises with a read operation on another thread on the same atomic variable. The acquire-release semantic is based on one fundamental idea: a release operation synchronises with an acquire operation on the same atomic and establishes an ordering constraint. This means all read and write operations cannot be moved after a release operation, and all read and write operations cannot be moved before an acquire operation. \u7b80\u5355\u6765\u8bf4\u5c31\u662fAcquire/Release\u8bed\u4e49\u5728\u5bf9\u76f8\u540c\u7684\u539f\u5b50\u53d8\u91cf\u7684Release\u548cAcquire\u4e24\u4e2a\u64cd\u4f5c\u4e4b\u95f4\u5efa\u7acb\u4e86\u987a\u5e8f\u9650\u5236\uff0c\u6240\u6709\u5728Release\u64cd\u4f5c\u4e4b\u524d\u7684\u8bfb\u5199\u64cd\u4f5c\u90fd\u65e0\u6cd5\u79fb\u52a8\u5230Release\u4e4b\u540e\uff0c\u6240\u6709\u5728Acquire\u4e4b\u540e\u7684 \u8bfb\u5199\u64cd\u4f5c\u90fd\u65e0\u6cd5\u79fb\u52a8\u5230Acquire\u4e4b\u524d\u3002 memory_order_relaxed \u6ca1\u6709\u4efb\u4f55\u540c\u6b65\u548c\u987a\u5e8f\u9650\u5236\uff0c\u5178\u578b\u7684\u4f7f\u7528\u573a\u666f\u5c31\u662f\u5bf9\u4e8e\u987a\u5e8f\u65e0\u5173\u7684\u4e00\u4e9b\u64cd\u7eb5\uff0c\u4f8b\u5982\u8ba1\u6570\u5668\u3001\u6bd4\u5982shared_ptr\u91cc\u9762\u7684\u5f15\u7528\u8ba1\u6570\u3002\u53ea\u9700\u8981\u5173\u6ce8\u539f\u5b50\u6027 \u4e0d\u5173\u6ce8\u8ba1\u6570\u7684\u987a\u5e8f\u3002 Fence The fundamental idea of std::atomic_thread_fence is to establish synchronisation and ordering constraints between threads without an atomic operation. C++ support two kind of fences: a std::atomic_thread_fence and a std::atomic_signal_fence. \u2022 std::atomic_thread_fence: synchronises memory accesses between threads. \u2022 std::atomic_signal_fence: synchronises between a signal handler and code running on the same thread. \u4ec0\u4e48\u662fLoadLoad\u3001LoadStore\u3001StoreLoad\u3001StoreStore? The expression if(resultRead) return result is a load, followed by a store operation. Fence\u5206\u4e3a\u4e09\u7c7b: Full fence: std::atomic_thread_fence \u53ef\u4ee5\u963b\u6b62\u4efb\u610f\u64cd\u4f5c\u7684\u91cd\u6392\u5e8f\uff0c\u4f46\u662f\u6ca1\u529e\u6cd5\u5bf9StoreLoad\u7c7b\u578b\u7684\u64cd\u4f5c\u963b\u6b62\u5176\u91cd\u6392\u5e8f Acquire fence: std::atomic_thread_fence(std::memory_order_acquire) \uff0c\u53ef\u4ee5\u963b\u6b62acquire\u524d\u7684read\u64cd\u4f5c\uff0c\u91cd\u6392\u5e8f\u5230acquire\u4e4b\u540e Release fence: std::atomic_thread_fence(std::memory_order_release) \uff0c\u53ef\u4ee5\u963b\u6b62release\u524d\u7684write\u64cd\u4f5c\uff0c\u91cd\u6392\u5e8f\u5230release\u4e4b\u524d Thread-safe Initialisation \u5e38\u91cf\u8868\u8fbe\u5f0f \u7ed3\u5408 std::call_once \u3001 std::once_flag static\u53d8\u91cf\u7ed3\u5408block scope Fire and Forget Fire and forget futures look very promising but have a big drawback. A future that is created by std::async waits on its destructor, until its promise is done. In this context, waiting is not very different from blocking. The future blocks the progress of the program in its destructor. This becomes more evident, when you use fire and forget futures. What seems to be concurrent actually runs sequentially. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #include <chrono> #include <future> #include <iostream> #include <thread> int main (){ std :: cout << std :: endl ; std :: async ( std :: launch :: async , []{ std :: this_thread :: sleep_for ( std :: chrono :: seconds ( 2 )); std :: cout << \"first thread\" << std :: endl ; }); // \u8fd4\u56de\u7684future\u6790\u6784\u4f1a\u7b49\u5230\u7ebf\u7a0b\u6267\u884c\u5b8c\u6bd5\u518d\u7ee7\u7eed\u5f80\u4e0b\u6267\u884c std :: async ( std :: launch :: async , []{ std :: this_thread :: sleep_for ( std :: chrono :: seconds ( 1 )); std :: cout << \"second thread\" << std :: endl ;} ); std :: cout << \"main thread\" << std :: endl ; std :: cout << std :: endl ; } std::current_exception() \u83b7\u53d6\u5f53\u524d\u5f02\u5e38\u4fe1\u606f std::make_exception_ptr(std::runtime_error(\"error msg\")) \u521b\u5efa\u5f02\u5e38 ThreadSanitizer -fsanitize=thread Lock free: Hazard Pointers RCU fast latching","title":"what is a memory model?"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/book/CppTemplate/","text":"C++ Templates auto \u7c7b\u578b\u63a8\u5bfc\u4f1a\u5ffd\u7565\u6389\u5f15\u7528\u548cCV\u9650\u5236\u7b26( const \u3001 voliate \u7b49) 1 2 3 int i = 42 ; int const & ir = i ; auto a = ir ; // a \u662fint\u7c7b\u578b std::decltype \u63a8\u5bfc\u51fa\u6765\u7684\u7c7b\u578b\u4f1a\u5305\u542bCV\u9650\u5236\u7b26\u548c\u5f15\u7528\uff0c\u901a\u8fc7 std::decay \u53ef\u4ee5\u53bb\u6389\u8fd9\u4e9bCV\u9650\u5236\u7b26\u548c\u5f15\u7528 std::common_type \u53ef\u4ee5\u5f97\u5230\u591a\u4e2a\u7c7b\u578b\u7684common type \u53ef\u4ee5\u901a\u8fc7 std::decltype \u7ed3\u5408 ? \u53f7\u64cd\u4f5c\u7b26\u5b9e\u73b0 std::common_type \u7684\u6548\u679c 1 2 3 4 5 template < typename T1 , typename T2 , typename RT = std :: decay_t < std :: decltype ( true ? T1 () : t2 ()) >> RT max ( T1 a , T2 a ) { return b < a ? a : b ; } \u4f46\u662f\u5b58\u5728\u4e00\u4e2a\u95ee\u9898\u5c31\u662fT1\u548cT2\u9700\u8981\u6709\u6784\u9020\u542b\u7cca Two-Phase Translation \u6a21\u7248\u5b9a\u4e49\u65f6\u68c0\u67e5(\u4e0d\u68c0\u67e5\u548c\u6a21\u7248\u53c2\u6570\u76f8\u5173\u7684) \u8bed\u6cd5\u9519\u8bef \u4f7f\u7528\u4e86\u672a\u77e5\u7684\u7c7b\u578b\u3001\u51fd\u6570\u540d\u3001\u53d8\u91cf\u540d\u7b49 \u9759\u6001\u65ad\u8a00 \u6a21\u7248\u5b9e\u4f8b\u5316(\u548c\u6a21\u7248\u53c2\u6570\u76f8\u5173\u7684\u90fd\u8981\u68c0\u67e5) \u6240\u6709\u4f9d\u8d56\u6a21\u7248\u53c2\u6570\u7684\u5730\u65b9\u90fd\u4f1a\u8fdb\u884c\u68c0\u67e5 examples: 1 2 3 4 5 6 7 8 9 10 template<typename T> void foo(T t) { undeclared(); // first-phase compile-time error if undeclared() unknown undeclared(t); // second-phase compile-time error if undeclared(T) unknown static_assert(sizeof(int) > 10, // always fails if sizeof(int)<=10 \"int too small\"); static_assert(sizeof(T) > 10, //fails if instantiated for T with size <=10 \"T too small\"); } the type trait std::decay<> is used, which returns the resulting type in a member type the C++ standard library provides a means to specify choosing \u201cthe more general type.\u201d std::common_type<>::type yields the \u201ccommon type\u201d of two (or more) different types passed as template arguments. \u51fd\u6570\u6a21\u7248\u3001\u548c\u666e\u901a\u51fd\u6570\u53ef\u4ee5\u5171\u540c\u6784\u6210\u51fd\u6570\u91cd\u8f7d\uff0c\u51b3\u7b56\u7684\u65f6\u5019\uff0c\u666e\u901a\u51fd\u6570\u6709\u9650\u5339\u914d\u3002\u9664\u975e\u51fd\u6570\u6a21\u7248\u53ef\u4ee5\u5b9e\u4f8b\u5316\u51fa\u6700\u4f73\u5339\u914d\u3002 XXX<> \u6a21\u7248\u7684\u53c2\u6570\u53ef\u4ee5\u662f\u7a7a\uff0c\u8868\u660e\u5f3a\u5236\u4f7f\u7528\u51fd\u6570\u6a21\u7248\uff0c\u5176\u6a21\u7248\u7c7b\u578b\u901a\u8fc7\u53c2\u6570\u6765\u63a8\u5bfc\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 template<typename T1, typename T2> auto max (T1 a, T2 b) { return b < a ? a : b; } template<typename RT, typename T1, typename T2> RT max (T1 a, T2 b) { std::cout << \"test\" << std::endl; return b < a ? a : b; } int main() { auto a = ::max(4, 7.2); // \u8c03\u7528\u7b2c\u4e00\u4e2a\u6a21\u7248 auto b = ::max<long double>(7.2, 4); // \u8c03\u7528\u7684\u662f\u7b2c\u4e8c\u4e2a\u6a21\u7248 auto c = ::max<int>(4, 7.2); // \u4e24\u4e2a\u90fd\u5339\u914d\uff0c\u5b58\u5728\u95ee\u9898 return 0; } \u663e\u793a\u521d\u59cb\u5316\u7684\u6a21\u7248\uff0c\u5176\u5b9a\u4e49\u53ef\u4ee5\u4e0d\u7528\u653e\u5728\u5934\u6587\u4ef6\u4e2d 1 2 3 4 5 6 7 // print_string.h template < class T > void print_string ( const T * str ); // print_string.cpp #include \"print_string.h\" template void print_string ( const char * ); \u51fd\u6570\u6a21\u7248\u4e0d\u80fd\u90e8\u5206\u7279\u5316\uff0c\u53ea\u80fd\u5168\u7279\u5316 FAQ \u4f20\u503c\u8fd8\u662f\u4f20\u5f15\u7528? \u901a\u5e38\u610f\u4e49\u6765\u8bf4\uff0c\u4f20\u5f15\u7528\u8981\u6bd4\u4f20\u503c\u6548\u7387\u8981\u9ad8\uff0c\u53ef\u4ee5\u907f\u514d\u4e0d\u5fc5\u8981\u7684\u5185\u5b58\u62f7\u8d1d\u3002\u7136\u540e\u4f20\u503c\u901a\u5e38\u4f1a\u66f4\u597d\uff0c\u51fa\u4e8e\u4ee5\u4e0b\u51e0\u4e2a\u539f\u56e0: \u8bed\u6cd5\u66f4\u7b80\u5355 \u7f16\u8bd1\u65f6\u4f18\u5316\u66f4\u597d \u79fb\u52a8\u8bed\u4e49\u901a\u5e38\u6bd4\u62f7\u8d1d\u66f4\u597d \u67d0\u4e9b\u60c5\u51b5\u662f\u6ca1\u6709\u62f7\u8d1d\u548c\u79fb\u52a8\u7684 \u6b64\u5916\u5bf9\u4e8e\u6a21\u7248\u6765\u8bf4\uff0c\u8fd8\u6709\u53e6\u5916\u4e00\u4e9b\u539f\u56e0: \u4e00\u4e2a\u6a21\u7248\u53ef\u4ee5\u9002\u914d\u7b80\u5355\u7c7b\u578b\u548c\u8d1f\u8d23\u7c7b\u578b\uff0c\u56e0\u6b64\u9009\u62e9\u9002\u5408\u8d1f\u8d23\u7c7b\u578b\u7684\u4f20\u53c2\u65b9\u5f0f\uff0c\u5bf9\u4e8e\u7b80\u5355\u7c7b\u578b\u6765\u8bf4\u53cd\u800c\u9002\u5f97\u5176\u53cd \u4f5c\u4e3a\u8c03\u7528\u8005\u53ef\u4ee5\u4ecd\u7136\u53ef\u4ee5\u53ef\u4ee5\u901a\u8fc7 std::ref \u548c std::cref \u81ea\u4e3b\u9009\u62e9\u662f\u4f20\u503c\u8fd8\u662f\u4f20\u5f15\u7528 \u4f20\u9012\u5e38\u91cf\u5b57\u7b26\u4e32\u4f1a\u6210\u4e3a\u5927\u95ee\u9898\uff0c\u4f46\u662f\u901a\u8fc7\u5f15\u7528\u6765\u4f20\u9012\u88ab\u8ba4\u4e3a\u4f1a\u9020\u6210\u66f4\u5927\u7684\u95ee\u9898 \u4e3a\u4ec0\u4e48\u4e0d inline ? \u901a\u5e38\u6765\u8bf4\u51fd\u6570\u6a21\u7248\u4e0d\u9700\u8981\u58f0\u660e\u4e3ainline\uff0c\u56e0\u4e3a\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49noinline\u7684\u51fd\u6570\u6a21\u7248\u5728\u4e00\u4e2a\u5934\u6587\u4ef6\u4e2d\uff0c\u7136\u540e\u53ef\u4ee5\u5728\u591a\u4e2a\u7f16\u8bd1\u5355\u5143\u4e2d\u5305\u542b\u8fd9\u4e2a\u5934\u6587\u4ef6\u3002 inline\u672c\u8eab\u7684\u76ee\u7684\u5c31\u662f\u5728\u591a\u4e2a\u5730\u65b9\u8fdb\u884c\u5c55\u5f00\uff0c\u907f\u514d\u51fd\u6570\u8c03\u7528\u7684\u8fdb\u6808\u548c\u5165\u6808\u7684\u5f00\u9500\uff0c\u4f46\u662f\u5bf9\u4e8e\u5168\u7279\u5316\u7684\u6a21\u7248\u6765\u8bf4\u4e0d\u9002\u7528\u8fd9\u4e2a\u89c4\u5219\u3002 \u4e3a\u4ec0\u4e48\u4e0d constexpr ? TODO","title":"C++ Templates"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/book/CppTemplate/#c-templates","text":"auto \u7c7b\u578b\u63a8\u5bfc\u4f1a\u5ffd\u7565\u6389\u5f15\u7528\u548cCV\u9650\u5236\u7b26( const \u3001 voliate \u7b49) 1 2 3 int i = 42 ; int const & ir = i ; auto a = ir ; // a \u662fint\u7c7b\u578b std::decltype \u63a8\u5bfc\u51fa\u6765\u7684\u7c7b\u578b\u4f1a\u5305\u542bCV\u9650\u5236\u7b26\u548c\u5f15\u7528\uff0c\u901a\u8fc7 std::decay \u53ef\u4ee5\u53bb\u6389\u8fd9\u4e9bCV\u9650\u5236\u7b26\u548c\u5f15\u7528 std::common_type \u53ef\u4ee5\u5f97\u5230\u591a\u4e2a\u7c7b\u578b\u7684common type \u53ef\u4ee5\u901a\u8fc7 std::decltype \u7ed3\u5408 ? \u53f7\u64cd\u4f5c\u7b26\u5b9e\u73b0 std::common_type \u7684\u6548\u679c 1 2 3 4 5 template < typename T1 , typename T2 , typename RT = std :: decay_t < std :: decltype ( true ? T1 () : t2 ()) >> RT max ( T1 a , T2 a ) { return b < a ? a : b ; } \u4f46\u662f\u5b58\u5728\u4e00\u4e2a\u95ee\u9898\u5c31\u662fT1\u548cT2\u9700\u8981\u6709\u6784\u9020\u542b\u7cca","title":"C++ Templates"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/book/CppTemplate/#two-phase-translation","text":"\u6a21\u7248\u5b9a\u4e49\u65f6\u68c0\u67e5(\u4e0d\u68c0\u67e5\u548c\u6a21\u7248\u53c2\u6570\u76f8\u5173\u7684) \u8bed\u6cd5\u9519\u8bef \u4f7f\u7528\u4e86\u672a\u77e5\u7684\u7c7b\u578b\u3001\u51fd\u6570\u540d\u3001\u53d8\u91cf\u540d\u7b49 \u9759\u6001\u65ad\u8a00 \u6a21\u7248\u5b9e\u4f8b\u5316(\u548c\u6a21\u7248\u53c2\u6570\u76f8\u5173\u7684\u90fd\u8981\u68c0\u67e5) \u6240\u6709\u4f9d\u8d56\u6a21\u7248\u53c2\u6570\u7684\u5730\u65b9\u90fd\u4f1a\u8fdb\u884c\u68c0\u67e5 examples: 1 2 3 4 5 6 7 8 9 10 template<typename T> void foo(T t) { undeclared(); // first-phase compile-time error if undeclared() unknown undeclared(t); // second-phase compile-time error if undeclared(T) unknown static_assert(sizeof(int) > 10, // always fails if sizeof(int)<=10 \"int too small\"); static_assert(sizeof(T) > 10, //fails if instantiated for T with size <=10 \"T too small\"); } the type trait std::decay<> is used, which returns the resulting type in a member type the C++ standard library provides a means to specify choosing \u201cthe more general type.\u201d std::common_type<>::type yields the \u201ccommon type\u201d of two (or more) different types passed as template arguments. \u51fd\u6570\u6a21\u7248\u3001\u548c\u666e\u901a\u51fd\u6570\u53ef\u4ee5\u5171\u540c\u6784\u6210\u51fd\u6570\u91cd\u8f7d\uff0c\u51b3\u7b56\u7684\u65f6\u5019\uff0c\u666e\u901a\u51fd\u6570\u6709\u9650\u5339\u914d\u3002\u9664\u975e\u51fd\u6570\u6a21\u7248\u53ef\u4ee5\u5b9e\u4f8b\u5316\u51fa\u6700\u4f73\u5339\u914d\u3002 XXX<> \u6a21\u7248\u7684\u53c2\u6570\u53ef\u4ee5\u662f\u7a7a\uff0c\u8868\u660e\u5f3a\u5236\u4f7f\u7528\u51fd\u6570\u6a21\u7248\uff0c\u5176\u6a21\u7248\u7c7b\u578b\u901a\u8fc7\u53c2\u6570\u6765\u63a8\u5bfc\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 template<typename T1, typename T2> auto max (T1 a, T2 b) { return b < a ? a : b; } template<typename RT, typename T1, typename T2> RT max (T1 a, T2 b) { std::cout << \"test\" << std::endl; return b < a ? a : b; } int main() { auto a = ::max(4, 7.2); // \u8c03\u7528\u7b2c\u4e00\u4e2a\u6a21\u7248 auto b = ::max<long double>(7.2, 4); // \u8c03\u7528\u7684\u662f\u7b2c\u4e8c\u4e2a\u6a21\u7248 auto c = ::max<int>(4, 7.2); // \u4e24\u4e2a\u90fd\u5339\u914d\uff0c\u5b58\u5728\u95ee\u9898 return 0; }","title":"Two-Phase Translation"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/book/CppTemplate/#_1","text":"1 2 3 4 5 6 7 // print_string.h template < class T > void print_string ( const T * str ); // print_string.cpp #include \"print_string.h\" template void print_string ( const char * );","title":"\u663e\u793a\u521d\u59cb\u5316\u7684\u6a21\u7248\uff0c\u5176\u5b9a\u4e49\u53ef\u4ee5\u4e0d\u7528\u653e\u5728\u5934\u6587\u4ef6\u4e2d"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/book/CppTemplate/#_2","text":"","title":"\u51fd\u6570\u6a21\u7248\u4e0d\u80fd\u90e8\u5206\u7279\u5316\uff0c\u53ea\u80fd\u5168\u7279\u5316"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/book/CppTemplate/#faq","text":"\u4f20\u503c\u8fd8\u662f\u4f20\u5f15\u7528? \u901a\u5e38\u610f\u4e49\u6765\u8bf4\uff0c\u4f20\u5f15\u7528\u8981\u6bd4\u4f20\u503c\u6548\u7387\u8981\u9ad8\uff0c\u53ef\u4ee5\u907f\u514d\u4e0d\u5fc5\u8981\u7684\u5185\u5b58\u62f7\u8d1d\u3002\u7136\u540e\u4f20\u503c\u901a\u5e38\u4f1a\u66f4\u597d\uff0c\u51fa\u4e8e\u4ee5\u4e0b\u51e0\u4e2a\u539f\u56e0: \u8bed\u6cd5\u66f4\u7b80\u5355 \u7f16\u8bd1\u65f6\u4f18\u5316\u66f4\u597d \u79fb\u52a8\u8bed\u4e49\u901a\u5e38\u6bd4\u62f7\u8d1d\u66f4\u597d \u67d0\u4e9b\u60c5\u51b5\u662f\u6ca1\u6709\u62f7\u8d1d\u548c\u79fb\u52a8\u7684 \u6b64\u5916\u5bf9\u4e8e\u6a21\u7248\u6765\u8bf4\uff0c\u8fd8\u6709\u53e6\u5916\u4e00\u4e9b\u539f\u56e0: \u4e00\u4e2a\u6a21\u7248\u53ef\u4ee5\u9002\u914d\u7b80\u5355\u7c7b\u578b\u548c\u8d1f\u8d23\u7c7b\u578b\uff0c\u56e0\u6b64\u9009\u62e9\u9002\u5408\u8d1f\u8d23\u7c7b\u578b\u7684\u4f20\u53c2\u65b9\u5f0f\uff0c\u5bf9\u4e8e\u7b80\u5355\u7c7b\u578b\u6765\u8bf4\u53cd\u800c\u9002\u5f97\u5176\u53cd \u4f5c\u4e3a\u8c03\u7528\u8005\u53ef\u4ee5\u4ecd\u7136\u53ef\u4ee5\u53ef\u4ee5\u901a\u8fc7 std::ref \u548c std::cref \u81ea\u4e3b\u9009\u62e9\u662f\u4f20\u503c\u8fd8\u662f\u4f20\u5f15\u7528 \u4f20\u9012\u5e38\u91cf\u5b57\u7b26\u4e32\u4f1a\u6210\u4e3a\u5927\u95ee\u9898\uff0c\u4f46\u662f\u901a\u8fc7\u5f15\u7528\u6765\u4f20\u9012\u88ab\u8ba4\u4e3a\u4f1a\u9020\u6210\u66f4\u5927\u7684\u95ee\u9898 \u4e3a\u4ec0\u4e48\u4e0d inline ? \u901a\u5e38\u6765\u8bf4\u51fd\u6570\u6a21\u7248\u4e0d\u9700\u8981\u58f0\u660e\u4e3ainline\uff0c\u56e0\u4e3a\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49noinline\u7684\u51fd\u6570\u6a21\u7248\u5728\u4e00\u4e2a\u5934\u6587\u4ef6\u4e2d\uff0c\u7136\u540e\u53ef\u4ee5\u5728\u591a\u4e2a\u7f16\u8bd1\u5355\u5143\u4e2d\u5305\u542b\u8fd9\u4e2a\u5934\u6587\u4ef6\u3002 inline\u672c\u8eab\u7684\u76ee\u7684\u5c31\u662f\u5728\u591a\u4e2a\u5730\u65b9\u8fdb\u884c\u5c55\u5f00\uff0c\u907f\u514d\u51fd\u6570\u8c03\u7528\u7684\u8fdb\u6808\u548c\u5165\u6808\u7684\u5f00\u9500\uff0c\u4f46\u662f\u5bf9\u4e8e\u5168\u7279\u5316\u7684\u6a21\u7248\u6765\u8bf4\u4e0d\u9002\u7528\u8fd9\u4e2a\u89c4\u5219\u3002 \u4e3a\u4ec0\u4e48\u4e0d constexpr ? TODO","title":"FAQ"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/book/KubernetesPrograming/","text":"Programming Kubernetes Chapter1. Introduction Kubernetes Native Application \u4f55\u4e3aKubernetes-native\u7684Application\uff0c\u611f\u77e5\u662f\u8dd1\u5728Kubernetes\u4e0a\uff0c\u5e76\u4f9d\u9760Kubernetes\u63d0\u4f9b\u7684API(\u6307\u7684\u662f\u4e0eAPI Server\u76f4\u63a5\u4ea4\u4e92\u6765\u67e5\u8be2\u8d44\u6e90\u7684\u72b6\u6001\u6216\u8005\u66f4\u65b0\u8fd9\u4e9b\u8d44\u6e90\u7684\u72b6\u6001)\u6765\u8fdb\u884c\u7f16\u7a0b\u7684Application\uff0c\u88ab\u79f0\u4e4b\u4e3aKubernetes Native Application\u3002 Kubernetest \u6269\u5c55\u7cfb\u7edf kubernetest\u63d0\u4f9b\u4e86\u5f88\u5f3a\u5927\u7684\u6269\u5c55\u7cfb\u7edf\uff0c\u901a\u5e38\u6765\u8bf4\u6709\u591a\u79cd\u65b9\u5f0f\u6765\u5b9e\u73b0\u6269\u5c55\uff0c\u4e0b\u9762\u662f\u4e00\u4e9b\u5e38\u89c1\u7684Kubernetes\u7684\u6269\u5c55\u70b9\uff0c\u66f4\u591a\u7ec6\u8282\u53ef\u4ee5\u770b extending-kubernetes-101 : cloud-controller-manager \u5bf9\u63a5\u5404\u4e2a\u4e91\u5382\u5546\u63d0\u4f9b\u7684\u80fd\u529b\uff0c\u6bd4\u5982Load Balancer\u3001VM\u7b49 Binary kubectl plug-ins \u901a\u8fc7\u4e8c\u8fdb\u5236\u6269\u5c55kubelet\u5b50\u547d\u4ee4 Binary kubelet plug-ins \u901a\u8fc7\u4e8c\u8fdb\u5236\u6269\u5c55\u7f51\u7edc\u3001\u5b58\u50a8\u3001\u5bb9\u5668\u8fd0\u884c\u65f6\u7b49 Access extensions in the API server \u6bd4\u5982dynamic admission control with webhooks Custom resources \u548c custom controllers Custom API servers Scheduler externsions\uff0c\u901a\u8fc7webhook\u6765\u5b9e\u73b0\u81ea\u5df1\u7684\u8c03\u5ea6\u5668 Authentication with webhooks Controll Loop Kubernetest\u7684controller\u7684\u5b9e\u73b0\u672c\u8d28\u4e0a\u662f\u4e00\u4e2acontrol loop\uff0c\u901a\u8fc7API server\u6765watch\u67d0\u79cd\u8d44\u6e90\u7684\u72b6\u6001\uff0c\u7136\u540e\u6839\u636e\u5f53\u524d\u72b6\u6001\u5411\u7740\u7ec8\u6001\u8d70\u3002 a controller implements a control loop, watching the shared state of the cluster through the API server and making changes in an attempt to move the current state toward the desired state Kubernetes\u5e76\u4e0d\u4f1a\u6839\u636e\u5f53\u524d\u7684\u72b6\u6001\u548c\u9884\u671f\u7684\u72b6\u6001\u6765\u8ba1\u7b97\u8fbe\u5230\u9884\u671f\u72b6\u6001\u6240\u9700\u8981\u7684\u547d\u4ee4\u5e8f\u5217\uff0c\u4ece\u800c\u6765\u5b9e\u73b0\u6240\u8c13\u7684\u58f0\u660e\u5f0f\u7cfb\u7edf\uff0c\u76f8\u53cdKubernetes\u4ec5\u4ec5\u4f1a\u6839\u636e\u5f53\u524d\u7684\u72b6\u6001\u8ba1\u7b97\u51fa\u4e0b\u4e00\u4e2a\u547d\u4ee4\uff0c\u5982\u679c\u6ca1\u6709\u53ef\u7528\u7684\u547d\u4ee4\uff0c\u5219Kubernetes\u5c31\u8fbe\u5230\u7a33\u6001\u4e86 \u5178\u578b\u7684Control loop\u7684\u6d41\u7a0b\u5982\u4e0b: 1 2 3 4 1. \u8bfb\u53d6\u8d44\u6e90\u7684\u72b6\u6001(\u66f4\u53ef\u53d6\u7684\u65b9\u5f0f\u662f\u901a\u8fc7\u4e8b\u4ef6\u9a71\u52a8\u7684\u65b9\u5f0f\u6765\u8bfb\u53d6) 2. \u6539\u53d8\u96c6\u7fa4\u4e2d\u5bf9\u8c61\u7684\u72b6\u6001\uff0c\u6bd4\u5982\u542f\u52a8\u4e00\u4e2aPOD\u3001\u521b\u5efa\u4e00\u4e2a\u7f51\u7edc\u7aef\u70b9\u3001\u67e5\u8be2\u4e00\u4e2acloud API\u7b49 3. \u901a\u8fc7API server\u6765\u66f4\u65b0Setp1\u4e2d\u7684\u8d44\u6e90\u72b6\u6001(Optimistic Concurrency)mak 4. \u5faa\u73af\u91cd\u590d\uff0c\u8fd4\u56de\u5230Setp1 Controller \u6838\u5fc3\u6570\u636e\u7ed3\u6784: 1. informers \u63d0\u4f9b\u4e00\u79cd\u6269\u5c55\u3001\u53ef\u6301\u7eed\u7684\u65b9\u5f0f\u6765\u67e5\u770b\u8d44\u6e90\u7684\u72b6\u6001\uff0c\u5e76\u5b9e\u73b0\u4e86resync\u673a\u5236(\u5f3a\u5236\u6267\u884c\u5b9a\u671f\u5bf9\u5e10\uff0c\u901a\u5e38\u7528\u4e8e\u786e\u4fdd\u7fa4\u96c6\u72b6\u6001\u548c\u7f13\u5b58\u5728\u5185\u5b58\u4e2d\u7684\u5047\u5b9a\u72b6\u6001\u4e0d\u4f1a\u6f02\u79fb) 2. Work queues \u7528\u4e8e\u5c06\u72b6\u6001\u53d8\u5316\u7684\u4e8b\u4ef6\u8fdb\u884c\u6392\u961f\u5904\u7406\uff0c\u4fbf\u4e8e\u53bb\u5b9e\u73b0\u91cd\u8bd5(\u53d1\u751f\u9519\u8bef\u7684\u65f6\u5019\uff0c\u91cd\u65b0\u6295\u5165\u5230\u961f\u5217\u4e2d) Events Kubernetes\u4e2d\u5927\u91cf\u4f7f\u7528\u4e8b\u4ef6\u548c\u4e00\u4e9b\u677e\u8026\u5408\u7684\u7ec4\u4ef6\u3002\u5176\u4ed6\u7684\u4e00\u4e9b\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e3b\u8981\u662fRPC\u6765\u89e6\u53d1\u884c\u4e3a\uff0c\u4f46\u662fKubernetes\u6ca1\u6709\u8fd9\u4e48\u505a\u3002 Kubernetes\u63a7\u5236\u5668\u901a\u8fc7\u76d1\u63a7Kubernetes\u5bf9\u8c61\u5728API server\u4e2d\u7684\u6539\u53d8(\u6dfb\u52a0\u3001\u5220\u9664\u3001\u66f4\u65b0)\u7b49\u3002\u5f53\u8fd9\u4e9b\u4e8b\u4ef6\u53d1\u751f\uff0cKubernetes\u63a7\u5236\u5668\u6267\u884c\u5bf9\u5e94\u7684\u4e1a\u52a1\u903b\u8f91\u3002 \u4e0b\u9762\u662f\u4e00\u4e2aPOD\u521b\u5efa\u7684\u8fc7\u7a0b: deployment\u63a7\u5236\u5668(\u5c5e\u4e8econtroller-manager\u7ec4\u4ef6)\u901a\u8fc7deployment informer\u53d1\u73b0\u4e86\u4e00\u4e2adeployment\u521b\u5efa\u7684\u4e8b\u4ef6\uff0c\u4e8e\u662f\u5f00\u59cb\u521b\u5efa\u4e00\u4e2areplica set replica set\u63a7\u5236\u5668(\u5c5e\u4e8econtroller-manager\u7ec4\u4ef6)\u901a\u8fc7replica set informer\u53d1\u73b0\u4e00\u4e2a\u65b0\u7684replica set\u521b\u5efa\uff0c\u4e8e\u662f\u5f00\u59cb\u521b\u5efa\u4e00\u4e2aPOD\u5bf9\u8c61 scheduler(\u5c5e\u4e8ekube-scheduler\u7ec4\u4ef6)\uff0c\u4ed6\u4e5f\u662f\u4e00\u4e2a\u63a7\u5236\u5668\uff0c\u901a\u8fc7pod informer\u53d1\u73b0\u4e86\u4e00\u4e2aPOD\u5bf9\u8c61\u7684\u521b\u5efa\uff0c\u5e76\u4e14spec.nodeName\u662f\u7a7a\uff0c\u4e8e\u662f\u5c31\u5c06\u5176\u653e\u5230\u4e86scheduling\u7684\u961f\u5217\u4e2d kubelet(\u4e5f\u662f\u4e00\u4e2a\u63a7\u5236\u5668)\u540c\u6837\u4e5f\u53d1\u73b0\u4e86\u4e00\u4e2a\u65b0\u7684POD\u5bf9\u8c61\u7684\u521b\u5efa\uff0c\u4f46\u662fspec.nodeName\u662f\u7a7a\uff0c\u548c\u81ea\u5df1\u7684node name\u5e76\u4e0d\u4e00\u81f4\uff0c\u56e0\u6b64\u5c31\u5ffd\u7565\u4e86\u8fd9\u4e2a\u4e8b\u4ef6\uff0c\u7ee7\u7eedsleep scheduler\u4ece\u961f\u5217\u4e2d\u83b7\u53d6\u4e00\u4e2aPOD\uff0c\u5e76\u66f4\u65b0spec.nodeName\u5b57\u6bb5\uff0c\u586b\u5165\u8981\u8c03\u5ea6\u5230\u7684nodeName\uff0c\u5199\u5165\u5230API server kubelect\u7ec4\u4ef6\u56e0\u4e3aPOD\u72b6\u6001\u53d1\u751f\u4e86\u6539\u53d8\u88ab\u5524\u9192\uff0c\u901a\u8fc7\u6bd4\u8f83spec.nodeName\u548c\u81ea\u5df1\u7684nodeName\uff0c\u5982\u679c\u5339\u914d\u5230\u4e86\uff0c\u5c31\u6839\u636ePOD\u5bf9\u8c61\u521b\u5efa\u5bf9\u5e94\u7684\u5bb9\u5668\u3002\u5e76\u6839\u636e\u5bb9\u5668\u5f15\u64ce\u7684\u6267\u884c\u60c5\u51b5\u6765\u66f4\u65b0POD\u72b6\u6001 replica set\u63a7\u5236\u5668\u53d1\u73b0POD\u53d8\u5316\u4e86\u989d\uff0c\u4f46\u662f\u4ec0\u4e48\u4e5f\u6ca1\u505a \u6700\u7ec8POD terminates\uff0ckubelet\u4f1a\u6536\u5230\u901a\u77e5\uff0c\u5e76\u83b7\u53d6POD\u5bf9\u8c61\uff0c\u66f4\u65b0\u5176\u72b6\u6001\u4e3aterminated\u3002 replica set\u63a7\u5236\u5668\u53d1\u73b0POD\u7684\u72b6\u6001\u4e3aterminated\uff0c\u4e8e\u662f\u5220\u9664POD\u5bf9\u8c61\uff0c\u91cd\u65b0\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 \u5230\u6b64\u7ed3\u675f \u901a\u8fc7\u4e0a\u9762POD\u521b\u5efa\u7684\u8fc7\u7a0b\u53ef\u4ee5\u770b\u51fa\uff0c\u6574\u4e2a\u8fc7\u7a0b\u4e2d\u6709\u5f88\u591a\u72ec\u7acb\u7684Controller\uff0c\u6bcf\u4e00\u4e2aController\u5c31\u662f\u4e00\u4e2acontrol loop\u3002 \u4ed6\u4eec\u4e4b\u95f4\u901a\u8fc7informer\u63a5\u6536\u5230\u4e8b\u4ef6\u6765\u89e6\u53d1\u5bf9\u5e94\u7684\u903b\u8f91\u3002\u8fd9\u4e9b\u4e8b\u4ef6\u662fAPI Server\u53d1\u9001\u7ed9informer\u7684\u3002informer\u5185\u90e8\u901a\u8fc7watche\u7684\u65b9\u5f0f\u5f97\u5230\u901a\u77e5\u3002 \u8fd9\u91cc\u8bf4\u7684Event\u4e8b\u4ef6\u548cKubernetes\u4e2d\u7684Event\u5bf9\u8c61\u662f\u4e24\u56de\u4e8b\uff0cEvent\u5bf9\u8c61\u4e3b\u8981\u662f\u7ed9\u7528\u6237\u63d0\u4f9b\u4e00\u79cdlogging\u673a\u5236\uff0c\u7528\u6237\u7f16\u5199\u7684Controller\u53ef\u4ee5\u521b\u5efaEvent\u5bf9\u8c61\u6765\u8bb0\u5f55\u4e00\u4e9b\u5185\u90e8\u4e8b\u4ef6 \u6bd4\u5982kubelet\u4f1a\u901a\u8fc7Event\u5bf9\u8c61\u66b4\u9732\u5185\u90e8\u7684\u751f\u547d\u5468\u671f\u4e8b\u4ef6\u3002\u8fd9\u4e9bEvent\u5bf9\u8c61\u53ef\u4ee5\u50cf\u5176\u4ed6\u7684kubernetes\u5bf9\u8c61(Pod\u3001Deployment\u7b49)\u4e00\u6837\u8fdb\u884c\u67e5\u8be2\u3002\u8fd9\u4e9b\u4e8b\u4ef6\u5bf9\u8c61\u9ed8\u8ba4\u53ea\u5b58\u653e 1\u4e2a\u5c0f\u65f6\u30021\u4e2a\u5c0f\u65f6\u5019\u540e\u4fbf\u4f1a\u4eceetcd\u4e2d\u5220\u9664\u3002 Level triger vs Edge triger Kubernetes\u4e2d\u5927\u91cf\u4f9d\u8d56\u4e8b\u4ef6\u6765\u89e3\u8026\u5404\u4e2a\u7ec4\u4ef6\uff0c\u4e8b\u4ef6\u7684\u9ad8\u6548\u901a\u77e5\u5bf9\u4e8eKubernetes\u6765\u8bf4\u81f3\u5173\u91cd\u8981\uff0c\u5178\u578b\u7684\u4e8c\u79cd\u5b9e\u73b0\u4e8b\u4ef6\u901a\u77e5\u7684\u673a\u5236\u5982\u4e0b: 1 2 3 4 5 * Edge-driven triggers At the point in time the state change occurs, a handler is triggered\u2014for example, from no pod to pod running. * Level-driven triggers The state is checked at regular intervals and if certain conditions are met (for example, pod running), then a handler is triggered. \u6c34\u5e73\u89e6\u53d1\u4e0d\u5177\u5907\u53ef\u6269\u5c55\u6027\uff0c\u672c\u8d28\u4e0a\u662fpolling\u3001polling\u7684\u95f4\u9694\u4f1a\u5f71\u54cdcontroller\u7684\u5b9e\u65f6\u6027\uff0c\u8fb9\u7f18\u89e6\u53d1\u66f4\u52a0\u9ad8\u6548\uff0c\u4f46\u662f\u5982\u679c\u67d0\u4e2aController\u5b58\u5728bug\u5c31\u4f1a\u5bfc\u81f4\u4e8b\u4ef6\u4e22\u5931\uff0c\u8fd9\u5bf9\u4e8e \u8fb9\u7f18\u89e6\u53d1\u6765\u8bf4\u662f\u65e0\u6cd5\u63a5\u53d7\u7684\uff0c\u800c\u6c34\u5e73\u89e6\u53d1\u5374\u4e0d\u4f1a\u5b58\u5728\u8fd9\u4e2a\u95ee\u9898\uff0c\u56e0\u4e3a\u603b\u662f\u80fd\u591f\u901a\u8fc7polling\u7684\u65b9\u5f0f\u83b7\u53d6\u5230\u6700\u7ec8\u7684\u72b6\u6001\u3002\u4e24\u8005\u7ed3\u5408\u4e00\u4e0b\uff0c\u4e8b\u4ef6\u901a\u8fc7\u8fb9\u7f18\u89e6\u53d1\u6765\u901a\u77e5\uff0c\u6bcf\u6b21\u6536\u5230\u4e8b\u4ef6\u540e\u901a\u8fc7pooling\u7684\u65b9\u5f0f \u83b7\u53d6\u5230\u8d44\u6e90\u7684\u6700\u7ec8\u72b6\u6001\uff0c\u90a3\u4e48\u5373\u4f7f\u4e2d\u95f4\u4e22\u5931\u4e86\u4e00\u4e2a\u4e8b\u4ef6\u4e5f\u65e0\u6240\u8c13\uff0c\u6bd4\u5982replica set\u63a7\u5236\u5668\u4e2d\uff0c\u9884\u671f\u8981\u521b\u5efa3\u4e2aPOD\uff0c\u56e0\u6b64\u6bcf\u6b21POD\u521b\u5efa\u90fd\u4f1a\u4ea7\u751f\u4e00\u4e2a\u4e8b\u4ef6\uff0creplica set\u901a\u8fc7\u4e8b\u4ef6\u5c31\u53ef\u4ee5\u77e5\u9053\u5f53\u524d\u72b6\u6001 \u548c\u9884\u671f\u7684\u72b6\u6001\u8fd8\u5dee\u591a\u5c11\uff0c\u7136\u540e\u7ee7\u7eed\u521b\u5efaPOD\uff0c\u5982\u679c\u56e0\u4e3a\u7f51\u7edc\u95ee\u9898\u5bfc\u81f4\u4e2d\u95f4\u4e22\u5931\u4e86\u4e00\u4e2a\u4e8b\u4ef6\uff0c\u90a3\u4e48\u8fd9\u5c31\u4f1a\u5bfc\u81f4\u521b\u5efa\u7684POD\u548c\u9884\u671f\u7684\u4e0d\u7b26\uff0c\u8fd9\u4e2a\u65f6\u5019\u5982\u679c\u7ed3\u5408\u6c34\u5e73\u89e6\u53d1\uff0c\u5728\u4e0b\u4e00\u6b21\u4e8b\u4ef6\u5230\u6765\u7684\u65f6\u5019\u4e3b\u52a8\u67e5\u4e00\u4e0b \u5f53\u524d\u7684\u72b6\u6001\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u907f\u514d\u4e86\u4e2d\u95f4\u4e8b\u4ef6\u4e22\u5931\u5bfc\u81f4\u72b6\u6001\u4e0d\u5bf9\u7684\u95ee\u9898\uff0c\u540c\u65f6\u4e5f\u501f\u52a9\u4e86\u8fb9\u7f18\u89e6\u53d1\u8fbe\u5230\u4e86\u9ad8\u6548\u7684\u4e8b\u4ef6\u901a\u77e5\u3002\u4f46\u662f\u8fd9\u6837\u4ecd\u7136\u5b58\u5728\u95ee\u9898\u3002\u5982\u679c\u6b63\u597d\u662f\u6700\u540e\u4e00\u4e2a\u4e8b\u4ef6\u4e22\u5931\u4e86\u5462? \u8fd9\u6837\u5c31\u6ca1\u6709\u673a\u4f1a\u53bb\u67e5\u8be2\u5f53\u524d \u72b6\u6001\u4e86\u3002\u5982\u679c\u80fd\u591f\u518d\u7ed3\u5408\u5b9a\u65f6\u67e5\u8be2\u5c31\u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u4e86\uff0c\u8fd9\u4e2a\u5b9a\u65f6\u67e5\u8be2\u5728Kubernetes\u4e2d\u79f0\u4e4b\u4e3aresync\u3002\u603b\u7ed3\u4e0b\uff0c\u6709\u4e09\u79cd\u4e8b\u4ef6\u901a\u77e5\u7b56\u7565\uff1a Edge driven trigger \u6ca1\u6709\u5904\u7406\u4e8b\u4ef6\u4e22\u5931\u7684\u95ee\u9898 Edge driven trigger + Level-driven triggers\uff0c\u603b\u662f\u53bb\u83b7\u53d6\u6700\u65b0\u7684\u72b6\u6001(\u5f53\u6709\u4e8b\u4ef6\u6765\u7684\u65f6\u5019)\uff0c\u56e0\u6b64\u5373\u4f7f\u4e22\u5931\u4e00\u4e2a\u4e8b\u4ef6\uff0c\u4ecd\u7136\u53ef\u4ee5\u901a\u8fc7\u83b7\u53d6\u6700\u65b0\u7684\u72b6\u6001\u6765\u8fdb\u884c\u4e1a\u52a1\u903b\u8f91 Edge driven trigger + Level-driven triggers + resync \u5982\u679c\u6700\u540e\u4e00\u4e2a\u4e8b\u4ef6\u4e22\u5931\u4e86\uff0c\u540e\u9762\u6ca1\u6709\u4e8b\u4ef6\u6765\u4e86\uff0c\u6240\u4ee5\u4e5f\u4e0d\u4f1a\u53bb\u89e6\u53d1(Level-driven triggers)\uff0c\u8fd9\u4e2a\u65f6\u5019\u9700\u8981\u501f\u52a9resync\u6765\u5f97\u5230\u6700\u65b0\u7684\u72b6\u6001\u3002 \u4e0a\u9762\u7684\u8fd9\u4e09\u79cd\u7b56\u7565\u5bf9\u5e94\u5982\u4e0b\u56fe: kubernetes\u5b9e\u73b0\u4e86\u4e0a\u9762\u7684\u7b2c\u4e09\u79cd\u7b56\u7565\uff0c\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u6765\u5b9e\u73b0\u9ad8\u6548\u7684\u4e8b\u4ef6\u901a\u77e5\uff0c\u5982\u679c\u4f60\u60f3\u77e5\u9053\u66f4\u591a\u5173\u4e8e\u6c34\u5e73\u89e6\u53d1\u4ee5\u53careconcile\u8bf7\u53c2\u8003 level-triggering-and-reconciliation-in-kubernetes Optimistic Concurrency \u5728Controller\u7684Control loop\u4e2d\u4f1a\u6539\u53d8\u96c6\u7fa4\u4e2d\u5bf9\u8c61\u7684\u72b6\u6001(\u6bd4\u5982\u521b\u5efa\u4e00\u4e2aPOD)\uff0c\u7136\u540e\u5c06\u7ed3\u679c\u5199\u5230\u8d44\u6e90\u4e2d\u7684status\u4e2d\u3002\u5b9e\u9645\u4e2dController\u901a\u5e38\u4f1a\u90e8\u7f72\u591a\u4e2a\uff0c\u56e0\u6b64\u8fd9\u91cc\u66f4\u65b0\u8d44\u6e90\u7684status\u5b57\u6bb5\u662f\u4f1a\u5b58\u5728\u5e76\u53d1\u5199\u7684\u3002 \u4e0b\u56fe\u4e2d\u63cf\u8ff0\u4e86\u4e00\u79cd\u89e3\u51b3\u65b9\u6848\uff1a \u8fd9\u4e2a\u89e3\u51b3\u65b9\u6848\u662f\u57fa\u4e8e\u5171\u4eab\u72b6\u6001\u6784\u5efa\u7684\u65b0\u7684\u5e76\u884c\u8c03\u5ea6\u5668\u4f53\u7cfb\u7ed3\u6784\uff0c\u4f7f\u7528\u65e0\u9501\u4e50\u89c2\u5e76\u53d1\u63a7\u5236\uff0c\u4ee5\u5b9e\u73b0\u53ef\u6269\u5c55\u6027\u548c\u6027\u80fd\u53ef\u4f38\u7f29\u6027\u3002\u8fd9\u79cd\u67b6\u6784\u6b63\u5728\u8c37\u6b4c\u7684\u4e0b\u4e00\u4ee3\u96c6\u7fa4\u7ba1\u7406\u7cfb\u7edfOmega\u4e2d\u4f7f\u7528 Kubernetes\u5927\u91cf\u53c2\u8003\u4e86Omega\u3002\u4e3a\u4e86\u505a\u4e86\u65e0\u9501\u5e76\u53d1\u5199\uff0cKubernetes\u4e5f\u91c7\u7528\u4e86\u4e50\u89c2\u5e76\u53d1\u3002\u8fd9\u610f\u5473\u7740\u5f53API Server\u63a2\u6d4b\u5230\u5e76\u53d1\u5199(\u901a\u8fc7resource version\u6765\u5224\u65ad)\uff0c \u5b83\u4f1a\u62d2\u7edd\u6389\u540e\u7eed\u7684\u5199\u64cd\u4f5c\u3002\u7136\u540e\u4ea4\u7531Controller\u81ea\u5df1\u6765\u5904\u7406\u5199\u5165\u51b2\u7a81\u7684\u95ee\u9898\u3002\u53ef\u4ee5\u7b80\u5355\u7684\u7528\u4e0b\u9762\u7684\u4ee3\u7801\u6765\u8868\u793a\u8fd9\u4e2a\u8fc7\u7a0b\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 var err error for retries := 0 ; retries < 10 ; retries ++ { foo , err = client . Get ( \"foo\" , metav1 . GetOptions {}) if err != nil { break } < update - the - world - and - foo > _ , err = client . Update ( foo ) // \u901a\u8fc7\u8d44\u6e90\u7248\u672c(ObjectMeta\u5b57\u6bb5\u4e2d\u7684resource version)\u6765\u5224\u65ad\u5f53\u524d\u662f\u5426\u6709\u4eba\u5728\u5199\u5165\uff0c\u662f\u5426\u4f1a\u4ea7\u751f\u5e76\u53d1\u5199\u7684\u51b2\u7a81 if err != nil && errors . IsConflict ( err ) { continue } else if err != nil { break } } \u4e50\u89c2\u5e76\u53d1\u5f88\u9002\u5408Kubernetest\u4e2dController\u7684Controll Loop\uff0cControll Loop\u4e2d\u7684\u6c34\u5e73\u89e6\u53d1\u603b\u662f\u83b7\u53d6\u5230\u6700\u65b0\u7684\u72b6\u6001\uff0c\u8fd9\u4e2a\u548c\u4e50\u89c2\u5e76\u53d1\u5728\u5931\u8d25\u540e\u603b\u662f\u57fa\u4e8e\u6700\u65b0\u72b6\u6001 \u518d\u6b21\u53d1\u751f\u5199\u5165\u7684\u601d\u60f3\u4e0d\u8c0b\u800c\u5408\u3002 \u5199\u51b2\u7a81\u9519\u8bef\u5728Controller\u4e2d\u662f\u5b8c\u5168\u6b63\u5e38\u7684\u3002\u6211\u4eec\u5e94\u8be5\u603b\u662f\u9884\u671f\u5b83\u4eec\u4f1a\u51fa\u73b0\uff0c\u5e76\u4f18\u96c5\u5730\u5904\u7406\u5b83\u4eec\u3002 client.Get\u8fd4\u56de\u7684\u5bf9\u8c61foo\uff0c\u5305\u542b\u4e86ObjectMeta\u5b57\u6bb5\uff0c\u8fd9\u4e2a\u5b57\u6bb5\u4e2d\u5305\u542b\u4e86resource version\uff0cAPI Server\u501f\u52a9\u8fd9\u4e2a\u5b57\u6bb5\u6765\u63a2\u6d4b\u5e76\u53d1\u5199\u3002 \u8fb9\u7f18\u89e6\u53d1 + \u6c34\u5e73\u89e6\u53d1 + resync + optimistic concurrency \u662fKubernetes \u4e8b\u4ef6\u9a71\u52a8\u67b6\u6784\u7684\u6838\u5fc3 Operators \u4e00\u4e2aSRE\u662f\u4e00\u4eba\uff0c\u4ed6\u6765\u64cd\u4f5c\u5176\u4ed6\u5f00\u53d1\u5de5\u7a0b\u5e08\u5199\u7684\u8f6f\u4ef6\uff0c\u8fd9\u4e2a\u8f6f\u4ef6\u662f\u5177\u6709\u9886\u57df\u77e5\u8bc6\u7684\uff0c\u56e0\u6b64\u8981\u8fd0\u7ef4\u9700\u8981\u638c\u63e1\u8fd9\u4e2a\u8f6f\u4ef6\u7684\u9886\u57df\u77e5\u8bc6\u624d\u80fd\u8fd0\u7ef4\u597d\u3002\u800c\u8fd9\u4e9b\u8fd0\u7ef4\u6240\u9700\u8981\u7684\u9886\u57df\u77e5\u8bc6\u79f0\u4e4b\u4e3aOperator\u3002 \u4e00\u4e2aOperator\u5c31\u662f\u4e00\u4e2a\u5177\u6709\u9886\u57df\u77e5\u8bc6\u7684\u7528\u4e8e\u8fd0\u7ef4\u7684controller\uff0c\u501f\u52a9\u4e86Kubernetes API\u8fdb\u884c\u6269\u5c55\u7684Controller\uff0c\u501f\u52a9\u8fd9\u4e2aController\u5c31\u53ef\u4ee5\u5b9e\u73b0\u7b80\u5355\u7684\u914d\u7f6e\u5c31\u8fbe\u5230\u8fd0\u7ef4\u590d\u6742\u7684\u5e26\u6709\u72b6\u6001\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\u6548\u679c\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u8fd9\u4e2aController\u901a\u8fc7\u4e00\u7ec4\u5177\u6709\u9886\u57df\u77e5\u8bc6\u7684schema\u7ec4\u6210\u7684crd\u6765\u5b9e\u73b0\u81ea\u52a8\u5316\u8fd0\u7ef4\u3002 *Reference extending-kubernetes-101 The Mechanics of Kubernetes A deep dive into Kubernetes controllers \u6df1\u5165\u6d45\u51faEvent Sourcing\u548cCQRS Events, the DNA of Kubernetes QoS, \"Node allocatable\" and the Kubernetes Scheduler level-triggering-and-reconciliation-in-kubernetes introducing-operators Chapter2. Kubernetes API Basics API Server API Server\u5728Kubernetes\u4e2d\u662f\u4e00\u4e2a\u6838\u5fc3\u7ec4\u4ef6\uff0c\u96c6\u7fa4\u4e2d\u6240\u6709\u7684\u7ec4\u4ef6\u90fd\u662f\u901a\u8fc7API Server\u6765\u548c\u5e95\u5c42\u7684\u5206\u5e03\u5f0f\u5b58\u50a8etcd\u8fdb\u884c\u4ea4\u4e92\u7684\u3002API Server\u7684\u4e3b\u8981\u6307\u8d23\u6709\u51e0\u4e0b\u51e0\u70b9: \u6240\u6709\u7684\u7ec4\u4ef6\u901a\u8fc7API Server\u6765\u89e3\u8026\uff0c\u901a\u8fc7API Server\u6765\u4ea7\u751f\u4e8b\u4ef6\u548c\u6d88\u8d39\u4e8b\u4ef6\u3002 \u8d1f\u8d23\u5bf9\u8c61\u7684\u5b58\u50a8\u548c\u8bfb\u53d6\uff0cAPI Server\u6700\u7ec8\u8fd8\u4f1a\u548c\u5e95\u5c42\u7684etcd\u4ea4\u4e92\uff0c\u5c06Kubernetes\u4e2d\u7684\u5bf9\u8c61\u5b58\u50a8\u5728etcd\u4e2d\u3002 API Server\u8d1f\u8d23\u7ed9\u96c6\u7fa4\u5185\u90e8\u7684\u7ec4\u4ef6\u505a\u4ee3\u7406\uff0c\u4f8b\u5982\u5bf9Kubernetes dashboard\u3001strea logs\u3001service ports\u3001\u4ee5\u53cakubectl exec\u7b49 API Server\u63d0\u4f9b\u4e86\u7b26\u5408RESTful\u7c7b\u578b\u7684\u63a5\u53e3\uff0c\u4e3b\u8981\u662f\u7528\u4e8e\u5904\u7406HTTP\u8bf7\u6c42\u53bb\u67e5\u8be2\u548c\u64cd\u4f5cKubernetes\u7684\u8d44\u6e90\uff0c\u4e0d\u540c\u7684HTTP method\u6240\u4ee3\u8868\u7684\u8bed\u4e49\u4e0d\u540c: Get \u83b7\u53d6\u5230\u6307\u5b9a\u7c7b\u578b\u7684\u8d44\u6e90\uff0c\u6bd4\u5982POD\u3001\u6216\u8005\u662f\u83b7\u53d6\u4e00\u4e2a\u8d44\u6e90list\uff0c\u4f8b\u5982\u4e00\u4e2anamespace\u4e0b\u7684\u6240\u6709POD POST \u521b\u5efa\u4e00\u4e2a\u8d44\u6e90\uff0c\u6bd4\u5982service\u3001deployment\u7b49 PUT \u66f4\u65b0\u4e00\u4e2a\u5df2\u7ecf\u5b58\u5728\u7684\u8d44\u6e90\uff0c\u6bd4\u5982\u6539\u53d8\u4e00\u4e2aPOD\u4e2d\u7684\u5bb9\u5668\u955c\u50cf PATCH \u90e8\u5206\u66f4\u65b0\u5b58\u5728\u7684\u8d44\u6e90\uff0c\u66f4\u591a\u7ec6\u8282\u89c1: Use a JSON merge patch to update a Deployment DELETE \u9500\u6bc1\u4e00\u4e2a\u8d44\u6e90 kubectl -n THENAMESPACE get pods \u7b49\u540c\u4e8e HTTP GET /api/v1/namespaces/THENAMESPACE/pods\u7684\u7ed3\u679c\u3002 API Terminology Kind : \u8868\u793a\u5b9e\u4f53\u7684\u7c7b\u578b\uff0c\u6bcf\u4e00\u4e2a\u5bf9\u8c61\u90fd\u6709\u4e00\u4e2aKind\u5b57\u6bb5\uff0ckind\u4e3b\u8981\u6709\u4e09\u7c7b\u3002 1 2 3 1. \u8868\u793a\u4e00\u4e2a\u6301\u4e45\u5316\u7684\u5b9e\u4f53\u5bf9\u8c61\uff0c\u6bd4\u5982Pod\u3001Endpoints\u7b49 2. \u4e00\u4e2a\u6216\u591a\u4e2akind\u5b9e\u4f53\uff0c\u6bd4\u5982PodList\u3001NodeLists\u7b49 3. \u7279\u6b8a\u76ee\u7684\uff0c\u6bd4\u5982binding\u3001scale API Group : \u4e00\u5806Kind\u7684\u903b\u8f91\u4e0a\u6240\u5c5e\u96c6\u5408 Version : API group\u6216\u8005\u662f\u5bf9\u8c61\u7684\u7248\u672c\uff0c\u4e00\u4e2agroup\u6216\u5bf9\u8c61\u53ef\u4ee5\u5b58\u5728\u591a\u4e2a\u7248\u672c\u3002 Resource : \u901a\u5e38\u5c0f\u5199\u3001\u590d\u6570\u5f62\u5f0f(pods) \u7528\u6765\u8bc6\u522b\u4e00\u7cfb\u5217\u7684HTTP endpoints\u8def\u5f84\uff0c\u7528\u6765\u66b4\u9732\u5bf9\u8c61\u7684CRUD\u8bed\u4e49\uff0c\u4f8b\u5982: .../pods/nginx \u67e5\u770b\u540d\u4e3anginx\u7684pod \u6240\u6709\u7684Resource\u90fd\u662f\u5177\u6709CRUD\u8bed\u4e49\u7684\uff0c\u4f46\u662f\u4e5f\u5b58\u5728\u4e00\u4e9bResource\u53ef\u4ee5\u652f\u6301\u66f4\u591a\u7684action\uff0c\u6bd4\u5982 .../pod/nginx/port-forward \uff0c\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u79f0\u4e4b\u4e3a Subresources \u3002\u8fd9\u9700\u8981\u901a\u8fc7\u81ea\u5b9a\u4e49\u534f\u8bae\u6765\u66ff\u4ee3RESET\u3002\u4f8b\u5982exec\u662f\u901a\u8fc7 WebSockets \u6765\u5b9e\u73b0\u7684\u3002 \u5728Kubernetes\u4e2d\uff0c\u6bcf\u4e00\u4e2aKind\u662f\u76f4\u63a5\u6620\u5c04\u5230\u4e00\u4e2aGolang\u7c7b\u578b\u7684\u3002 Resources\u548cKind\u662f\u76f8\u4e92\u7684\uff0cResources\u6307\u5b9aHTTP endpoints\uff0c\u800cKind\u662f\u8fd9\u4e2aendpoints\u8fd4\u56de\u5bf9\u8c61\u7684\u7c7b\u578b\uff0c\u4e5f\u662fetcd\u4e2d\u6301\u4e45\u5316\u7684\u5bf9\u8c61\u3002 \u6bcf\u4e00\u4e2a\u5bf9\u8c61\u90fd\u53ef\u4ee5\u6309\u7167version v1\u6765\u8868\u793a\uff0c\u4e5f\u53ef\u4ee5\u6309\u7167v1beta1\u6765\u8868\u793a\uff0c\u53ef\u4ee5\u8fd4\u56de\u4e0d\u540c\u7684\u7248\u672c Resources \u662fAPI group\u548cversion\u7684\u4e00\u90e8\u5206\uff0c\u4e09\u8005\u88ab\u79f0\u4e4b\u4e3aGVR(GroupVersionResource)\uff0c\u4e00\u4e2a GVR \u552f\u4e00\u6807\u793a\u4e00\u4e2aHTTP path\u3002\u4f8b\u5982: /apis/batch/v1/namespaces/default/jobs \u901a\u8fc7 GVR \u53ef\u4ee5\u83b7\u53d6\u5230\u7c7b\u578b\u4e3akind\u7684\u5bf9\u8c61\uff0c\u540c\u7406\u8fd9\u4e2a\u5bf9\u8c61\u4e5f\u662f\u5c5e\u4e8e\u8fd9\u4e2aversion\u548cGroup\u7684\u3002\u56e0\u6b64\u79f0\u4e4b\u4e3a GVK (GroupVersionKind) \u6838\u5fc3\u7ec4zai /api/v1\uff0c\u547d\u540d\u7ec4zai /apis/$name/$version\uff0c\uff0c\u4e3a\u4ec0\u4e48\u6838\u5fc3\u7ec4\u4e0d\u662f/apis/core/v1\u5462? \u8fd9\u662f\u56e0\u4e3a\u5386\u53f2\u539f\u56e0\u5bfc\u81f4\u7684\uff0cAPI Group\u662f\u6838\u5fc3\u7ec4\u4e4b\u540e\u5f15\u5165\u7684\u3002 \u4f8b\u5982\u4e0b\u9762\u8fd9\u4e2ahttp paths\uff0c\u5c31\u53ef\u4ee5\u6620\u5c04\u5230\u4e00\u4e2a GVR \uff0c\u901a\u8fc7 GVR \u53ef\u4ee5\u83b7\u53d6\u5230\u7c7b\u578b\u4e3aKind\u7684\u5bf9\u8c61\uff0c\u4e5f\u5c31\u95f4\u63a5\u7684\u6620\u5c04\u5230\u4e86\u4e00\u4e2a GVK \u3002 GVK\u5230GVR\u7684\u6620\u5c04\u5728Kubernetes\u4e2d\u88ab\u79f0\u4e4b\u4e3a REST Mapping \u3002 \u9664\u4e86GVR\u63cf\u8ff0\u7684HTTP path\u5916\uff0c\u8fd8\u5b58\u5728\u53e6\u5916\u4e00\u79cd\u7c7b\u578b\u7684HTTP path\uff0c\u6bd4\u5982 /metrics \u3001 logs \u3001 healthz \u7b49 \u901a\u8fc7\u5728HTTP path\u540e\u9762\u6dfb\u52a0 ?watch=true \u5c31\u53ef\u4ee5watch\u5230\u8bf7\u6c42\u7684\u8d44\u6e90\uff0c\u5177\u4f53\u7ec6\u8282\u89c1: watch modus \u77e5\u9053\u4e86HTTP path\u5c31\u53ef\u4ee5\u901a\u8fc7curl\u8bbf\u95eeAPI Server\u83b7\u53d6\u5230\u8d44\u6e90\uff0c\u5e73\u65f6\u6211\u4eec\u901a\u8fc7kubectl\u547d\u4ee4\u83b7\u53d6\u8d44\u6e90\u7684\u65b9\u5f0f\u5185\u90e8\u5176\u5b9e\u4e5f\u662f\u901a\u8fc7\u8bbf\u95eeHTTP path\u7684\u65b9\u5f0f\u6765\u83b7\u53d6\u7684\uff0c\u4e0b\u9762\u5217\u4e3e\u4e86\u4e24\u79cd\u901a\u8fc7HTTP path\u83b7\u53d6\u8d44\u6e90\u7684\u65b9\u5f0f\u3002 1 2 3 4 5 6 kubectl proxy --port = 8080 curl http://127.0.0.1:8080/apis/batch/v1 \u6216 kubectl get --raw /apis/batch/v1 API Server\u5982\u4f55\u5904\u7406\u8bf7\u6c42 \u9996\u5148HTTP request\u4f1a\u88ab DefaultBuildHandlerChain \u6ce8\u518c\u7684filters chain\u6765\u5904\u7406(\u9274\u6743\u3001admission\u3001validation\u7b49) \u63a5\u7740\u6839\u636eHTTP path\u8d70\u5230\u5206\u53d1\u5668\uff0c\u901a\u8fc7\u5206\u53d1\u5668\u6765\u8def\u7531\u5230\u6700\u7ec8\u7684handler \u6bcf\u4e00\u4e2agvr\u90fd\u4f1a\u6ce8\u518c\u4e00\u4e2ahandler *Reference Use a JSON merge patch to update a Deployment watch modus Chapter3. Basics of client-go client-go \u3001 api \u3001 apimachinery \u4e09\u4e2a\u91cd\u8981\u7684\u4ed3\u5e93 client-go \u3001 api \u3001 apimachinery \u662fKubernetes client\u4e2d\u6700\u6838\u5fc3\u7684\u4e09\u4e2a\u4ed3\u5e93\u3002 client-go \u4ed3\u5e93\u662f\u7528\u6765\u8bbf\u95eekubernetes\u7684client\u7684\u63a5\u53e3\u3002 Pod\u3001Deployment\u7b49\u5bf9\u8c61\u5219\u662f\u653e\u5728 api \u7684\u4ed3\u5e93\u4e2d\uff0c\u4f8b\u5982Pod\u5bf9\u8c61\uff0c\u5b83\u5c5e\u4e8ecore group\uff0c\u5bf9\u4e8ev1\u7248\u672c\u6765\u8bf4\uff0c\u5b83\u7684\u4f4d\u7f6e\u5c31\u5728 api/core/v1 \u76ee\u5f55\u4e0b\u3002 Pod\u7684\u7c7b\u578b\u5b9a\u4e49\u5c31\u5728 types.go \u6587\u4ef6\u4e2d\u3002\u8fd9\u4e2a\u76ee\u5f55\u4e0b\u8fd8\u5305\u542b\u4e86\u4e00\u4e9b\u5176\u4ed6\u6587\u4ef6\uff0c\u90e8\u5206\u6587\u4ef6\u90fd\u662f\u901a\u8fc7\u4ee3\u7801\u751f\u6210\u5668\u81ea\u52a8\u751f\u6210\u7684\u3002 \u6700\u540e\u4e00\u4e2a\u4ed3\u5e93\u662f apimachinery \uff0c\u5305\u542b\u4e86\u6240\u6709\u901a\u7528\u7684\u7528\u6765\u6784\u5efa\u7c7b\u4f3cKubernetes\u98ce\u683cAPI\u7684\u6a21\u5757\u3002 Creating and Using a Client 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 package main import ( \"fmt\" \"os\" \"path/filepath\" \"time\" \"k8s.io/apimachinery/pkg/util/wait\" \"k8s.io/client-go/informers\" \"k8s.io/client-go/rest\" \"k8s.io/client-go/kubernetes\" \"k8s.io/client-go/tools/cache\" \"k8s.io/client-go/tools/clientcmd\" ) func main() { // \u5148\u4ece\u96c6\u7fa4Pod\u4e2d/var/run/secrets/kubernetes.io/serviceaccount\u83b7\u53d6\u5230service account\u8f6c\u6362\u4e3arest.Config config, err := rest.InClusterConfig() if err != nil { // \u83b7\u53d6service account\u5931\u8d25\uff0c\u76f4\u63a5\u53bb\u8bfb\u53d6kubeconfig\u6587\u4ef6 kubeconfig := filepath.Join(\"~\", \".kube\", \"config\") // \u6216\u8005\u662f\u4ece\u73af\u5883\u53d8\u91cf\u4e2d\u83b7\u53d6\u5230kubeconfig\u7684\u4f4d\u7f6e if envvar := os.Getenv(\"KUBECONFIG\"); len(envvar) > 0 { kubeconfig = envvar } // \u901a\u8fc7kubeconfig\u6587\u4ef6\u6784\u5efarest.Config config, err = clientcmd.BuildConfigFromFlags(\"\", kubeconfig) if err != nil { fmt.Printf(\"The kubeconfig cannot be loaded: %v\\n\", err) os.Exit(1) } // \u8fd4\u56de\u7684config\u53ef\u4ee5\u505a\u4e00\u4e9b\u81ea\u5b9a\u4e49\u64cd\u4f5c\uff0c\u6bd4\u5982\u81ea\u5b9a\u4e49UserAgent\u3001\u81ea\u5b9a\u4e49AcceptContentTypes\u3001\u8d85\u65f6\u5b9e\u9645\u3001\u9650\u6d41\u7b49 // config.UserAgent = fmt.Sprintf(\"Go %s\", runtime.GOOS); // config.AcceptContentTypes = \"application/vnd.kubernetes.protobuf,application/json\" } // \u7528reset.Config\u6784\u5efakubernetes client clientset, err := kubernetes.NewForConfig(config) // \u8bfb\u53d6book namespace\u4e0b\u7684\u540d\u4e3aexample\u7684Pod\u5bf9\u8c61 pod, err = \u201cclientset.CoreV1().Pods(\"book\").Get(\"example\", metav1.GetOptions{}) } Versioning\u548cCompatibillity Kubernetes API\u662f\u5e26\u6709\u7248\u672c\u7684\uff0c\u6bcf\u4e2a\u5bf9\u8c61\u90fd\u6709\u4e0d\u540c\u7684\u7248\u672c\uff0c\u6211\u4eec\u53ef\u4ee5\u5728api\u4ed3\u5e93\u4e2d\u7684 apps \u76ee\u5f55\u4e0b\u53ef\u4ee5\u770b\u5230\u5404\u4e2a\u7248\u672c\u7684\u5bf9\u8c61\u5b58\u5728\uff0c\u540c\u6837\u7684\uff0c\u5bf9\u4e8eclient-go\u6765\u8bf4\uff0c\u9488\u5bf9\u4e0d\u540c\u7684\u5bf9\u8c61\u4e5f\u5b58\u5728\u4e0d\u540c\u7684\u7248\u672c\u7684\u63a5\u53e3\u3002\u6211\u4eec\u53ef\u4ee5\u5728 client-go\u4ed3\u5e93\u4e0b\u7684 kubernestes/typed/apps \u76ee\u5f55\u4e0b\u627e\u5230\u5bf9\u5e94\u7248\u672c\u5bf9\u8c61\u7684\u63a5\u53e3\u3002Kubernestes\u548c client-go \u662f\u5171\u7528\u76f8\u540c\u7684api\u4ed3\u5e93\u7684\uff0c\u56e0\u6b64client-go\u7684\u7248\u672c\u9700\u8981\u548ckubernetes\u5177\u6709\u517c\u5bb9\u7684\u7248\u672c\u624d\u80fd\u53d1\u6325\u4f5c\u7528\uff0c \u5426\u5219Api Server\u4f1a\u62d2\u7edd\u6389 client-go \u53d1\u51fa\u6765\u7684\u8bf7\u6c42\u3002\u5982\u679cclient-go\u7684\u7248\u672c\u6bd4kubernertes\u7684\u8981\u65b0\uff0c\u90a3\u4e48\u5f53\u643a\u5e26\u67d0\u4e9b\u65b0\u589e\u5b57\u6bb5\u7684\u65f6\u5019\uff0ckubernetes\u53ef\u80fd\u4f1a\u62d2\u7edd\u6389\uff0c\u4e5f\u6709\u53ef\u80fd\u4f1a\u5ffd\u7565\u6389\uff0c\u8fd9\u4e2a\u8981\u770b\u5177\u4f53\u7684\u5b57\u6bb5\u7684\u884c\u4e3a\u3002 kubernetes\u4e3a\u4e86\u89e3\u51b3\u5bf9\u8c61\u7248\u672c\u517c\u5bb9\u95ee\u9898\uff0c\u5728\u5b9e\u9645\u5c06\u5bf9\u8c61\u5b58\u50a8\u5728etcd\u4e2d\u65f6\u4f1a\u6309\u7167\u4e00\u4e2a\u79f0\u4e4b\u4e3a\u5185\u90e8\u7248\u672c\u7684\u5bf9\u8c61\u5b58\u50a8\u8fdb\u53bb\uff0c\u4e0d\u540c\u7248\u672c\u7684API\u8bf7\u6c42\u8fc7\u6765\u7684\u65f6\u5019\uff0c\u901a\u8fc7\u9884\u5b9a\u4e49\u7684\u8f6c\u6362\u5668\u8fdb\u884c\u8f6c\u6362\u6765\u5b9e\u73b0\u7248\u672c\u4e4b\u95f4\u7684\u517c\u5bb9\u3002 Kubernetes Objects in Go Kubernetes\u4e2d\u7684\u8d44\u6e90\uff0c\u51c6\u786e\u6765\u8bf4\u5bf9\u5e94\u5230Go\u4e2d\u5c31\u662f\u4e00\u4e2a\u5bf9\u8c61\uff0c\u8d44\u6e90\u7684\u7c7b\u578b\u5bf9\u5e94\u5230yaml\u4e2d\u7684Kind\u5b57\u6bb5\uff0c\u6bd4\u5982\u4e0b\u9762\u8fd9\u4e2aPod\u8d44\u6e90\u3002\u5176yaml\u4e2d\u7684Kind\u5b57\u6bb5\u5c31\u662fPod\u3002 \u5728Kubernetest\u4e2d\u4f1a\u901a\u8fc7\u4e00\u4e2a struct \u6765\u8868\u793a\u8fd9\u4e2aPod\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u53d1\u73b0\u7684Kubernetes\u4e2d\u6240\u6709\u7684\u8d44\u6e90\u90fd\u4f1a\u6709\u4e00\u4e9b\u516c\u5171\u7684\u5b57\u6bb5\uff0c\u6bd4\u5982apiVersion\u3001Kind\u3001metadata\u3001spec\u7b49\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 apiVersion : v1 kind : Pod metadata : name : pod-demo namespace : default labels : app : myapp tier : fronted spec : containers : - name : myapp image : ikubernetes/myapp:v1 - name : busybox image : busybox:latest command : - \"bin/sh\" - \"-c\" - \"echo $(date) >> /tmp/txt; sleep 5\" Kubernetes\u4e2d\u8d44\u6e90\u6240\u5bf9\u5e94\u7684\u5bf9\u8c61\u90fd\u9ed8\u8ba4\u5b9e\u73b0\u4e86 runtime.Object \u63a5\u53e3\uff0c\u8fd9\u4e2a\u63a5\u53e3\u5f88\u7b80\u5355\uff0c\u5b9a\u4e49\u5982\u4e0b\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 // Object interface must be supported by all API types registered with Scheme. Since objects in a scheme are // expected to be serialized to the wire, the interface an Object must provide to the Scheme allows // serializers to set the kind, version, and group the object is represented as. An Object may choose // to return a no-op ObjectKindAccessor in cases where it is not expected to be serialized. type Object interface { GetObjectKind() schema.ObjectKind DeepCopyObject() Object } // All objects that are serialized from a Scheme encode their type information. This interface is used // by serialization to set type information from the Scheme onto the serialized version of an object. // For objects that cannot be serialized or have unique requirements, this interface may be a no-op. type ObjectKind interface { // SetGroupVersionKind sets or clears the intended serialized kind of an object. Passing kind nil // should clear the current setting. SetGroupVersionKind(kind GroupVersionKind) // GroupVersionKind returns the stored group, version, and kind of an object, or nil if the object does // not expose or provide these fields. GroupVersionKind() GroupVersionKind } \u6bcf\u4e00\u4e2a\u5bf9\u8c61\u90fd\u8981\u6ee1\u8db3Object\u63a5\u53e3\u7684\u7ea6\u675f\uff0c\u53ef\u4ee5\u770b\u51fa\u901a\u8fc7\u8fd9\u4e9b\u63a5\u53e3\u53ef\u4ee5\u8bbe\u7f6e\u548c\u83b7\u53d6\u5bf9\u8c61\u7684GVK\uff0c\u4ee5\u53ca\u8fdb\u884c\u6df1\u5ea6\u62f7\u8d1d\u3002 \u6bcf\u4e00\u4e2aKubernetes\u5bf9\u8c61\u90fd\u4f1a\u5d4c\u5165\u4e00\u4e2a metav1.TypeMeta struct \u3002\u8fd8\u6709\u4e00\u4e2a metav1.ObjectMeta 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 // TypeMeta describes an individual object in an API response or request // with strings representing the type of the object and its API schema version. // Structures that are versioned or persisted should inline TypeMeta. // // +k8s:deepcopy-gen=false type TypeMeta struct { // Kind is a string value representing the REST resource this object represents. // Servers may infer this from the endpoint the client submits requests to. // Cannot be updated. // In CamelCase. // More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds // +optional Kind string `json:\"kind,omitempty\" protobuf:\"bytes,1,opt,name=kind\"` // APIVersion defines the versioned schema of this representation of an object. // Servers should convert recognized schemas to the latest internal value, and // may reject unrecognized values. // More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources // +optional APIVersion string `json:\"apiVersion,omitempty\" protobuf:\"bytes,2,opt,name=apiVersion\"` } type ObjectMeta struct { Name string `json:\"name,omitempty\"` Namespace string `json:\"namespace,omitempty\"` UID types.UID `json:\"uid,omitempty\"` ResourceVersion string `json:\"resourceVersion,omitempty\"` CreationTimestamp Time `json:\"creationTimestamp,omitempty\"` DeletionTimestamp *Time `json:\"deletionTimestamp,omitempty\"` Labels map[string]string `json:\"labels,omitempty\"` Annotations map[string]string `json:\"annotations,omitempty\"` ... } \u6bcf\u4e00\u4e2a\u5bf9\u8c61\u90fd\u4f1a\u5305\u542b\u4e00\u4e2a metav1.TypeMeta struct \u5b57\u6bb5\u548c\u4e00\u4e2a metav1.ObjectMeta \u5b57\u6bb5 \u524d\u8005\u7528\u6765\u63cf\u8ff0\u4e00\u4e2a\u5bf9\u8c61\uff0c\u6bd4\u5982\u662f\u4ec0\u4e48kind\uff0c\u4ec0\u4e48APIVersion\uff0c\u540e\u8005\u5219\u662f\u4e00\u4e9b\u5143\u4fe1\u606f\uff0c\u6bd4\u5982label\u3001\u6ce8\u89e3\u3001\u5176\u4e2dResourceVersion\u5c31\u662f\u7528\u6765\u5b9e\u73b0\u4e50\u89c2\u5e76\u53d1(optimistic-concurrency)\u7b49 \u4f8b\u5982\u4e00\u4e2aPOD\u5bf9\u8c61\u5982\u4e0b: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 // Pod is a collection of containers that can run on a host. This resource is created // by clients and scheduled onto hosts. type Pod struct { metav1.TypeMeta `json:\",inline\"` // Standard object's metadata. // More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata // +optional metav1.ObjectMeta `json:\"metadata,omitempty\" protobuf:\"bytes,1,opt,name=metadata\"` // Specification of the desired behavior of the pod. // More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status // +optional Spec PodSpec `json:\"spec,omitempty\" protobuf:\"bytes,2,opt,name=spec\"` // Most recently observed status of the pod. // This data may not be up to date. // Populated by the system. // Read-only. // More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status // +optional Status PodStatus `json:\"status,omitempty\" protobuf:\"bytes,3,opt,name=status\"` } \u6bcf\u4e00\u4e2a\u5bf9\u8c61\u90fd\u6709\u81ea\u5df1\u72ec\u7acb\u7684Spec\u548cStatus\uff0c\u901a\u5e38Spec\u8868\u793a\u7528\u6237\u7684\u671f\u671b\uff0cStatus\u5219\u662f\u671f\u671b\u7684\u7684\u7ed3\u679c\uff0c\u662fController\u548cOperator\u6765\u8d1f\u8d23\u586b\u5145\u3002\u4e5f\u5b58\u5728\u4e00\u4e9b\u5f02\u5e38\u60c5\u51b5\uff0c\u6bd4\u5982endpoints\u548cRBAC \u8bf7\u6c42\u5206\u4e3a\u957f\u8bf7\u6c42\u548c\u77ed\u8bf7\u6c42\uff0c\u5bf9\u4e8e\u957f\u8bf7\u6c42\u4e00\u822c\u6765\u8bf4\u662f\u8bf8\u5982watch\u3001\u4e00\u4e9bSubresources(exec\u3001sport-forward)\u7b49\uff0c\u5bf9\u4e8e\u77ed\u8bf7\u6c42\u5219\u4f1a\u670960s\u7684\u8d85\u65f6\u65f6\u95f4\uff0c\u5f53API server\u4e0b\u7ebf\u7684\u65f6\u5019\u4f1a\u7b49\u5f8560s\u76f4\u5230\u670d\u52a1\u5b8c\u8fd9\u4e9b\u77ed\u8bf7\u6c42 \u5bf9\u4e8e\u957f\u8bf7\u6c42\u5219\u76f4\u63a5\u65ad\u6389\u3002\u4ece\u800c\u5b9e\u73b0\u6240\u8c13\u7684\u4f18\u96c5\u5173\u95ed\u3002 Client Sets \u5728\u4e0a\u9762\u7684example\u4e2d\uff0c\u901a\u8fc7 kubernetes.NewForConfig(config) \u521b\u5efa\u4e86\u4e00\u4e2a Clientset \uff0c\u4e00\u4e2a Clientset \u662f\u53ef\u4ee5\u7528\u6765\u8bbf\u95ee\u591a\u4e2a API Group \u548c\u8d44\u6e90\u7684\u63a5\u53e3\uff0c\u5176\u5b9a\u4e49\u5982\u4e0b\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 // Clientset contains the clients for groups. Each group has exactly one // version included in a Clientset. type Clientset struct { * discovery . DiscoveryClient admissionregistrationV1 * admissionregistrationv1 . AdmissionregistrationV1Client admissionregistrationV1beta1 * admissionregistrationv1beta1 . AdmissionregistrationV1beta1Client appsV1 * appsv1 . AppsV1Client appsV1beta1 * appsv1beta1 . AppsV1beta1Client appsV1beta2 * appsv1beta2 . AppsV1beta2Client auditregistrationV1alpha1 * auditregistrationv1alpha1 . AuditregistrationV1alpha1Client authenticationV1 * authenticationv1 . AuthenticationV1Client authenticationV1beta1 * authenticationv1beta1 . AuthenticationV1beta1Client authorizationV1 * authorizationv1 . AuthorizationV1Client authorizationV1beta1 * authorizationv1beta1 . AuthorizationV1beta1Client autoscalingV1 * autoscalingv1 . AutoscalingV1Client autoscalingV2beta1 * autoscalingv2beta1 . AutoscalingV2beta1Client autoscalingV2beta2 * autoscalingv2beta2 . AutoscalingV2beta2Client batchV1 * batchv1 . BatchV1Client batchV1beta1 * batchv1beta1 . BatchV1beta1Client batchV2alpha1 * batchv2alpha1 . BatchV2alpha1Client certificatesV1beta1 * certificatesv1beta1 . CertificatesV1beta1Client coordinationV1beta1 * coordinationv1beta1 . CoordinationV1beta1Client coordinationV1 * coordinationv1 . CoordinationV1Client coreV1 * corev1 . CoreV1Client discoveryV1alpha1 * discoveryv1alpha1 . DiscoveryV1alpha1Client discoveryV1beta1 * discoveryv1beta1 . DiscoveryV1beta1Client eventsV1beta1 * eventsv1beta1 . EventsV1beta1Client extensionsV1beta1 * extensionsv1beta1 . ExtensionsV1beta1Client flowcontrolV1alpha1 * flowcontrolv1alpha1 . FlowcontrolV1alpha1Client networkingV1 * networkingv1 . NetworkingV1Client networkingV1beta1 * networkingv1beta1 . NetworkingV1beta1Client nodeV1alpha1 * nodev1alpha1 . NodeV1alpha1Client nodeV1beta1 * nodev1beta1 . NodeV1beta1Client policyV1beta1 * policyv1beta1 . PolicyV1beta1Client rbacV1 * rbacv1 . RbacV1Client rbacV1beta1 * rbacv1beta1 . RbacV1beta1Client rbacV1alpha1 * rbacv1alpha1 . RbacV1alpha1Client schedulingV1alpha1 * schedulingv1alpha1 . SchedulingV1alpha1Client schedulingV1beta1 * schedulingv1beta1 . SchedulingV1beta1Client schedulingV1 * schedulingv1 . SchedulingV1Client settingsV1alpha1 * settingsv1alpha1 . SettingsV1alpha1Client storageV1beta1 * storagev1beta1 . StorageV1beta1Client storageV1 * storagev1 . StorageV1Client storageV1alpha1 * storagev1alpha1 . StorageV1alpha1Client } \u6bd4\u5982\u901a\u8fc7 Clientset \u7684appsV1\u63a5\u53e3\uff0c\u5c31\u53ef\u4ee5\u8bbf\u95eeapps\u7ec4\uff0cv1 version\u4e0b\u7684\u6240\u6709\u8d44\u6e90\uff0c\u5728\u8fd9\u4e2a\u7ec4\u4e0b\u6709DaemonSet\u3001ControllerRevision\u3001Deployment\u3001ReplcaSets\u3001StatefulSet\u7b49\u8d44\u6e90\uff0cappsV1\u5b9a\u4e49\u5982\u4e0b: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 // DeploymentsGetter has a method to return a DeploymentInterface. // A group's client should implement this interface. type DeploymentsGetter interface { Deployments ( namespace string ) DeploymentInterface } type AppsV1Interface interface { RESTClient () rest . Interface ControllerRevisionsGetter DaemonSetsGetter DeploymentsGetter ReplicaSetsGetter StatefulSetsGetter } // AppsV1Client is used to interact with features provided by the apps group. type AppsV1Client struct { restClient rest . Interface } // DeploymentInterface has methods to work with Deployment resources. type DeploymentInterface interface { Create ( * v1 . Deployment ) ( * v1 . Deployment , error ) Update ( * v1 . Deployment ) ( * v1 . Deployment , error ) UpdateStatus ( * v1 . Deployment ) ( * v1 . Deployment , error ) Delete ( name string , options * metav1 . DeleteOptions ) error DeleteCollection ( options * metav1 . DeleteOptions , listOptions metav1 . ListOptions ) error Get ( name string , options metav1 . GetOptions ) ( * v1 . Deployment , error ) List ( opts metav1 . ListOptions ) ( * v1 . DeploymentList , error ) Watch ( opts metav1 . ListOptions ) ( watch . Interface , error ) Patch ( name string , pt types . PatchType , data [] byte , subresources ... string ) ( result * v1 . Deployment , err error ) GetScale ( deploymentName string , options metav1 . GetOptions ) ( * autoscalingv1 . Scale , error ) UpdateScale ( deploymentName string , scale * autoscalingv1 . Scale ) ( * autoscalingv1 . Scale , error ) DeploymentExpansion } // Get takes name of the deployment, and returns the corresponding deployment object, and an error if there is any. func ( c * deployments ) Get ( name string , options metav1 . GetOptions ) ( result * v1 . Deployment , err error ) { result = & v1 . Deployment {} err = c . client . Get (). Namespace ( c . ns ). Resource ( \"deployments\" ). Name ( name ). VersionedParams ( & options , scheme . ParameterCodec ). Do (). Into ( result ) return } AppsV1Client\u5b9e\u73b0\u4e86AppsV1Interface\u63a5\u53e3\uff0c\u901a\u8fc7\u8fd9\u4e2a\u63a5\u53e3\u53ef\u4ee5\u8bbf\u95ee\u8fd9\u4e2a\u7ec4\u4e0b\u7684\u6240\u6709\u8d44\u6e90\uff0c\u901a\u8fc7\u5176\u5b9a\u4e49\u53ef\u4ee5\u770b\u51fa\uff0c\u6700\u7ec8\u90fd\u662f\u901a\u8fc7rest\u63a5\u53e3\u6765\u8bbf\u95ee\u7684\u3002 \u6ce8\u610f\u89c2\u5bdf\u4f60\u4f1a\u53d1\u73b0\u4e0a\u9762\u7684\u63a5\u53e3\u4e2d\u90fd\u5e26\u6709\u4e00\u4e2aOptions\uff0c\u6bd4\u5982ListOptions\u3001DeleteOptions\u3001GetOptions\u7b49\uff0c\u901a\u8fc7\u8fd9\u4e9bOptions\u53ef\u4ee5\u81ea\u5b9a\u4e49\u4e00\u4e9b\u8fc7\u6ee4\u6761\u4ef6\uff0c\u6bd4\u5982ListOptions\u4e2d\u53ef\u4ee5\u6307\u5b9alabel selector\u8fdb\u884c\u8fc7\u6ee4\u3002 \u53e6\u5916\u4e0a\u9762\u7684\u63a5\u53e3\u4e2d\u8fd8\u6709\u4e00\u4e2aWatch\u63a5\u53e3\uff0c\u8fd9\u4e2a\u63a5\u53e3\u662f\u7528\u6765\u76d1\u542c\u5bf9\u8c61\u7684\u6240\u6709\u6539\u53d8(\u6dfb\u52a0\u3001\u5220\u9664\u3001\u66f4\u65b0)\uff0c\u8fd4\u56de\u7684watche.Interface\u5176\u5b9a\u4e49\u5982\u4e0b\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 // Interface can be implemented by anything that knows how to watch and report changes. type Interface interface { // Stops watching. Will close the channel returned by ResultChan(). Releases // any resources used by the watch. Stop () // Returns a chan which will receive all the events. If an error occurs // or Stop() is called, this channel will be closed, in which case the // watch should be completely cleaned up. ResultChan () <- chan Event } // EventType defines the possible types of events. type EventType string const ( Added EventType = \"ADDED\" Modified EventType = \"MODIFIED\" Deleted EventType = \"DELETED\" Bookmark EventType = \"BOOKMARK\" Error EventType = \"ERROR\" DefaultChanSize int32 = 100 ) // Event represents a single event to a watched resource. // +k8s:deepcopy-gen=true type Event struct { Type EventType // Object is: // * If Type is Added or Modified: the new state of the object. // * If Type is Deleted: the state of the object immediately before deletion. // * If Type is Bookmark: the object (instance of a type being watched) where // only ResourceVersion field is set. On successful restart of watch from a // bookmark resourceVersion, client is guaranteed to not get repeat event // nor miss any events. // * If Type is Error: *api.Status is recommended; other types may make sense // depending on context. Object runtime . Object } \u4e0d\u9f13\u52b1\u76f4\u63a5\u4f7f\u7528watch\u63a5\u53e3\uff0c\u5e94\u8be5\u4f7f\u7528\u5c01\u88c5\u597d\u7684Informes\u3002 Informers and Caching Informers\u901a\u8fc7watch\u63a5\u53e3\u5b9e\u73b0Cachae\u548c\u589e\u91cf\u66f4\u65b0\u3002\u5e76\u80fd\u591f\u5f88\u597d\u7684\u5904\u7406\u7f51\u7edc\u6296\u52a8\uff0c\u65ad\u7f51\u7b49\u573a\u666f\u3002\u5c3d\u53ef\u80fd\u7684\u6bcf\u4e00\u79cd\u8d44\u6e90\u7c7b\u578b\u53ea\u521b\u5efa\u4e00\u4e2aInformers\uff0c\u5426\u5219\u4f1a\u5bfc\u81f4\u8d44\u6e90\u7684\u6d6a\u8d39\uff0c\u4e3a\u6b64\u53ef\u4ee5\u901a\u8fc7 InformerFactory \u6765\u521b\u5efaInformer\u3002 \u4ed6\u5185\u90e8\u5bf9\u4e8e\u540c\u4e00\u4e2a\u8d44\u6e90\u7c7b\u578b\u53ea\u4f1a\u521b\u5efa\u4e00\u4e2ainformer\u5b9e\u4f8b\u3002 It is very important to remember that any object passed from the listers to the event handlers is owned by the informers. If you mutate it in any way, you risk introducing hard-to-debug cache coherency issues into your application. Always do a deep copy (see \u201cKubernetes Objects in Go\u201d) before changing an object. \u6211\u4eec\u5728informers\u7684event\u56de\u8c03\u4e2d\u5207\u8bb0\u4e0d\u8981\u4fee\u6539\u5bf9\u8c61\uff0c\u5426\u5219\u4f1a\u5bfc\u81f4\u5f88\u96be\u6392\u67e5\u7684\u7f13\u5b58\u4e00\u81f4\u6027\u95ee\u9898\uff0c\u5982\u679c\u8981\u4fee\u6539\u7684\u8bdd\uff0c\u8bf7\u5148\u6df1\u62f7\u8d1d\uff0c\u7136\u540e\u4fee\u6539\u3002 1 2 3 4 5 6 7 8 9 10 informerFactory := informers . NewSharedInformerFactory ( clientset , time . Second * 30 ) podInformer := informerFactory . Core (). V1 (). Pods () podInformer . Informer (). AddEventHandler ( cache . ResourceEventHandlerFuncs { AddFunc : func ( new interface {}) { fmt . Println ( \"Create a pod\" ) }, UpdateFunc : func ( old , new interface {}) { fmt . Println ( \"Update a pod\" ) }, DeleteFunc : func ( obj interface {}) { fmt . Println ( \"Delete a pod\" ) }, }) informerFactory . Start ( wait . NeverStop ) informerFactory . WaitForCacheSync ( wait . NeverStop ) pod , _ := podInformer . Lister (). Pods ( \"default\" ). Get ( \"details-v1-5974b67c8-n7vdw\" ) \u9ed8\u8ba4informer\u4f1a\u76d1\u542c\u6240\u6709namespace\u4e0b\u7684\u6307\u5b9a\u8d44\u6e90\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7 NewSharedInformerFactoryWithOptions \u6765\u8fdb\u884c\u8fc7\u6ee4 1 informerFactory := informers . NewSharedInformerFactoryWithOptions ( clientset , time . Second * 30 , informers . WithNamespace ( \"default\" )) Object Owner \u901a\u5e38\u6765\u8bf4\uff0c\u5728\u4fee\u6539\u4e00\u4e2a\u5bf9\u8c61\u4e4b\u524d\uff0c\u6211\u4eec\u603b\u662f\u4f1a\u95ee\u81ea\u5df1\uff0c\u8fd9\u4e2a\u5bf9\u8c61\u88ab\u8c01\u62e5\u6709\uff0c\u6216\u8005\u662f\u5728\u54ea\u4e2a\u6570\u636e\u7ed3\u6784\u4e2d? \u4e00\u822c\u6765\u6765\u8bf4\u539f\u5219\u5982\u4e0b: Informers and listers\u62e5\u6709\u4ed6\u4eec\u8fd4\u56de\u7684\u5bf9\u8c61\uff0c\u8981\u4fee\u6539\u8fd9\u4e2a\u5bf9\u8c61\u7684\u65f6\u5019\uff0c\u9700\u8981\u8fdb\u884c\u6df1\u62f7\u8d1d Clients\u8fd4\u56de\u7684\u65b0\u5bf9\u8c61\u8fd9\u4e2a\u5c5e\u4e8e\u8c03\u7528\u8005 Conversions\u8fd4\u56de\u7684\u5171\u4eab\u5bf9\u8c61\uff0c\u5982\u679c\u8c03\u7528\u8005\u62e5\u6709\u8f93\u5165\u7684\u5bf9\u8c61\uff0c\u90a3\u4e48\u5b83\u4e0d\u62e5\u6709\u8f93\u51fa\u7684\u5171\u4eab\u5bf9\u8c61\u3002 API Machinery in Depth API Machinery\u4ed3\u5e93\u5b9e\u73b0\u4e86\u57fa\u672c\u7684Kubernetes\u7c7b\u578b\u7cfb\u7edf\uff0c\u4f46\u662f\u7c7b\u578b\u7cfb\u7edf\u662f\u4ec0\u4e48\u5462? \u7c7b\u578b\u8fd9\u4e2a\u672f\u8bed\u5e76\u4e0d\u5728API Machinery\u4ed3\u5e93\u4e2d\u5b58\u5728\u3002 \u5728API Machinery\u7c7b\u578b\u5bf9\u5e94\u5230\u7684\u662fKinds\u3002 Kinds \u5728kubernetes\u4e2d\uff0c\u6bcf\u4e00\u4e2aGVK\u5bf9\u5e94\u5230\u4e00\u4e2a\u5177\u4f53\u7684Go\u7c7b\u578b\uff0c\u76f8\u53cd\uff0c\u4e00\u4e2aGo\u7c7b\u578b\u53ef\u4ee5\u5bf9\u5e94\u5230\u591a\u4e2aGVK Kind\u5e76\u4e0d\u4f1a\u4e00\u5bf9\u4e00\u548cHTTP paths mapping\uff0c\u53ef\u80fd\u591a\u4e2akind\u5bf9\u5e94\u4e00\u4e2aHTTP path\uff0c\u4e5f\u6709\u53ef\u80fd\u4e00\u4e2a\u4e5f\u4e0d\u5bf9\u5e94\u3002 \u4f8b\u5982: admission.k8s.io/v1beta1.AdmissionReview\u4e0d\u5bf9\u5e94\u4efb\u4f55HTTP path \u4f8b\u5982: meta.k8s.io/v1.Status \u5bf9\u5e94\u5f88\u591aHTTP path \u6309\u7167\u7ea6\u5b9akind\u7684\u547d\u540d\u6309\u7167\u9a7c\u5cf0\u547d\u540d\uff0c\u5e76\u4e14\u4f7f\u7528\u5355\u6570\uff0c\u800c\u4e14\u5bf9\u4e8eCustomResourceDefinition\u7c7b\u578b\u7684\u8d44\u6e90\uff0c\u5176kind\u5fc5\u987b\u662f\u7b26\u5408DNS path label(REF 1035) Resources \u4ee3\u8868\u4e00\u7c7b\u8d44\u6e90\uff0c\u8fd9\u4e2a\u8d44\u6e90\u662f\u5c5e\u4e8e\u4e00\u4e2agroup\uff0c\u5e76\u4e14\u662f\u6709\u7248\u672c\u7684\uff0c\u6240\u4ee5\u5c31\u6709\u4e86GVR(GroupVersionResource)\uff0c\u6bcf\u4e00\u4e2aGVR\u90fd\u4f1a\u5bf9\u5e94\u5230\u4e00\u4e2aHTTP path\u3002 \u901a\u8fc7GVR\u6765\u5e94\u8bc6\u522b\u51fa\u4e00\u4e2aKubernetes\u7684 REST API endpoint\uff0c\u4f8b\u5982GVR apps/v1.deloyment\u4f1a\u6620\u5c04\u5230/apis/apps/v1/namespace/NAMESPACE/deployments \u5ba2\u6237\u7aef\u5c31\u662f\u901a\u8fc7\u8fd9\u79cd\u6620\u5c04\u5173\u7cfb\u6765\u6784\u5efaHTTP path\u7684\u3002 \u4e00\u4e2aGVR\u662f\u5426\u662fnamespaced\uff0c\u6216\u8005\u662f\u96c6\u7fa4\u7ea7\u522b\u7684\uff0c\u8fd9\u662f\u9700\u8981\u77e5\u9053\u7684\uff0c\u5426\u5219\u65e0\u6cd5\u6784\u5efaHTTP Path\uff0c\u6309\u7167\u7ea6\u5b9a\uff0c\u5c0f\u5199\uff0c\u5e76\u4e14\u662f\u590d\u6570\u7c7b\u578b\u7684kind\uff0c\u5e76\u4e14\u9075\u4eceDNS path label format \u90a3\u4e48\u8fd9\u4e2aGVR\u5bf9\u5e94\u7684\u5c31\u662f\u4e00\u4e2a\u96c6\u7fa4\u7ea7\u522b\u7684\u3002\u76f4\u63a5\u7528kind\u6765\u6620\u5c04\u5230HTTP path\u3002 \u4f8b\u5982: rbac.authorization.k8s.io/v1.clusterroles\uff0c\u6620\u5c04\u5230HTTP path\u5c31\u662fapis/rbac.authorization.k8s.io/v1/clusterroles. Scheme \u867d\u7136\u6bcf\u4e00\u4e2aObject\u90fd\u4f1a\u5305\u542b TypeMeta \uff0c\u91cc\u9762\u5305\u542b\u4e86Kind\u548cAPIVersion\u4f46\u662f\u5b9e\u9645\u4e0a\uff0c\u6211\u4eec\u53bb\u8bbf\u95ee\u7684\u65f6\u5019\uff0c\u5e76\u4e0d\u4f1a\u62ff\u5230\u5bf9\u5e94\u7684\u4fe1\u606f\uff0c\u8fd9\u4e9b\u4fe1\u606f\u90fd\u662f\u7a7a\u7684\uff0c\u76f8\u53cd\u6211\u4eec\u9700\u8981\u901a\u8fc7scheme\u6765\u83b7\u53d6\u5bf9\u8c61\u7684Kind 1 func ( s * Scheme ) ObjectKinds ( obj Object ) ([] schema . GroupVersionKind , bool , error ) \u901a\u8fc7Scheme\u6765\u8fde\u63a5GVK\u548cGolang\u7c7b\u578b\uff0cScheme\u5bf9\u4e24\u8005\u505a\u4e86\u6620\u5c04\uff0cScheme\u4f1a\u9884\u5148\u5bf9\u5927\u91cf\u5185\u7f6e\u7c7b\u578b\u505a\u6620\u5c04\u3002 1 scheme . AddKnownTypes ( schema . GroupVersionKind { \"\" , \"v1\" , \"Pod\" }, & Pod {}) \u6700\u7ec8\u4e00\u4e2aGolang\u7c7b\u578b\uff0c\u901a\u8fc7shceme\u6620\u5c04\u5230GVK\uff0c\u7136\u540eGVK\u901a\u8fc7RESTMapper\u6620\u5c04\u5230GVR\uff0c\u6700\u7ec8\u901a\u8fc7GVR\u62fc\u63a5\u51faHTTP path\u3002 1 2 3 4 5 6 7 8 9 10 11 12 // RESTMapping contains the information needed to deal with objects of a specific // resource and kind in a RESTful manner. type RESTMapping struct { // Resource is the GroupVersionResource (location) for this endpoint Resource schema.GroupVersionResource // GroupVersionKind is the GroupVersionKind (data format) to submit to this endpoint GroupVersionKind schema.GroupVersionKind // Scope contains the information needed to deal with REST Resources that are in a resource hierarchy Scope RESTScope } Chapter4. Using Custom Resources CRD\u672c\u8eab\u662f\u4e00\u4e2aKubernetes\u7684\u8d44\u6e90\uff0c\u5b83\u63cf\u8ff0\u4e86\u5728\u96c6\u7fa4\u4e2d\u53ef\u7528\u7684\u8d44\u6e90\uff0c\u5178\u578b\u7684\u4e00\u4e2aCRD\u5b9a\u4e49\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 apiVersion : apiextensions.k8s.io/v1beta1 kind : CustomResourceDefinition metadata : name : ats.cnat.programming-kubernetes.info spec : group : cnat.programming-kubernetes.info names : kind : At listKind : AtList plural : ats singular : at scope : Namespaced subresources : status : {} version : v1alpha1 versions : - name : v1alpha1 served : true storage : true \u6ce8\u610f\uff0c\u8fd9\u4e2aCRD\u7684\u540d\u5b57\u9700\u8981\u8d44\u6e90\u540d\u7684\u590d\u6570\u5f62\u5f0f\uff0c\u7136\u540e\u8ddf\u4e0aAPI group name\uff0c\u4e0a\u9762\u7684CRD\u4e2d\u8d44\u6e90\u540d\u4e3aat\uff0cAPI Group\u7684\u540d\u5b57\u5c31\u662f cnat.programming-kubernetes.info \u5b9a\u4e49\u5b8c\u8fd9\u4e2aCRD\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2aat\u8d44\u6e90\u4e86\u3002\u7136\u540e\u901a\u8fc7 kubectl get ats \u5c31\u53ef\u4ee5\u5217\u51fa\u6240\u6709\u521b\u5efa\u7684at\u8d44\u6e90\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 apiVersion : cnat.programming-kubernetes.info/v1alpha1 kind : At metadata : name : example-at spec : schedule : \"2020-12-02T00:30:00Z\" containers : - name : shell image : centos:7 command : - \"bin/bash\" - \"-c\" - echo \"Kubernetes native rocks!\" status : phase : \"pending\" kubectl\u662f\u5982\u4f55\u627e\u5230 ats \u8d44\u6e90\u5462? \u5982\u4f55\u627e\u5230\u81ea\u5b9a\u4e49\u8d44\u6e90 \u901a\u8fc7/apis\u8be2\u95eeApi server\u6240\u6709\u7684 API group \u901a\u8fc7/apis/group/version \u67e5\u770b\u6240\u6709\u7684group\u5b58\u5728\u7684\u8d44\u6e90\uff0c\u627e\u5230\u5bf9\u5e94\u8d44\u6e90\u6240\u5728\u7684Group\u3001VersionheResources Subresources Subresources\u5c31\u662f\u4e00\u4e2a\u7279\u6b8a\u7684HTTP endpoints\uff0c\u4e00\u822c\u662f\u5728\u6b63\u5e38resource\u540e\u9762\u6dfb\u52a0\u7684\u4e00\u4e2a\u540e\u7f00\u6765\u8868\u793a\uff0c\u6bd4\u5982\uff0c\u5bf9\u4e8epod\u8d44\u6e90\u6765\u8bf4\uff0c\u6b63\u5e38\u7684HTTP Path\u662f /api/v1/namespace/namespace/pods/name \uff0c\u4ed6\u53ef\u4ee5\u6709\u591a\u4e2aSubresources\uff0c\u6bd4\u5982 /logs \u3001 /portforward \u3001 /exec \u3001 status \u3002 Subresources\u6240\u4f7f\u7528\u7684\u534f\u8bae\u662f\u548c\u4e3b\u8d44\u6e90\u4e0d\u4e00\u6837\u7684\uff0c\u76ee\u524d\u4e3a\u6b62\u81ea\u5b9a\u4e49\u8d44\u6e90\u652f\u6301/scale\u548c/status\u4e24\u79cd\u5b50\u8d44\u6e90\u3002 /status\u5b50\u8d44\u6e90\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u548c\u5c06spec\u548cstatus\u8fdb\u884c\u5206\u79bb\uff0c CustomResourceDefinition \u6bcf\u4e00\u4e2a\u81ea\u5b9a\u4e49\u8d44\u6e90\u90fd\u53ef\u4ee5\u6709subresourcs\uff0c\u9ed8\u8ba4\u652f\u6301scale\u3001status\u4e24\u7c7b\u5b50\u8d44\u6e90 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 KIND : CustomResourceDefinition VERSION : apiextensions.k8s.io/v1beta1 RESOURCE : subresources <Object> DESCRIPTION : Subresources describes the subresources for CustomResource Optional, the global subresources for all versions. Top-level and per-version subresources are mutually exclusive. CustomResourceSubresources defines the status and scale subresources for CustomResources. FIELDS : scale <Object> Scale denotes the scale subresource for CustomResources status <map[string]> Status denotes the status subresource for CustomResources \u81ea\u5b9a\u4e49\u8d44\u6e90\u53ef\u4ee5\u901a\u8fc7\u51e0\u79cd\u65b9\u5f0f\u6765\u8bbf\u95ee: \u4f7f\u7528client-go dynamic client(\u81ea\u5b9a\u4e49\u7c7b\u578b\u901a\u8fc7Unstructured\u6765\u8868\u793a) 1 2 3 4 5 6 7 schema.GroupVersionResource{ Group: \"apps\", Version: \"v1\", Resource: \"deployments\", } client, err := NewForConfig(cfg) client.Resource(gvr).Namespace(namespace).Get(\"foo\", metav1.GetOptions{}) \u8f93\u5165\u548c\u8f93\u51fa\u90fd\u662f unstructured.Unstructured \uff0c\u672c\u8d28\u4e0a\u662f\u4e00\u4e2a json.Unmarshal \u540e\u7684\u7ed3\u6784\uff0c\u7528\u6765\u4fdd\u5b58\u5bf9\u8c61\u3002 Object\u901a\u8fc7map[string]interface{}\u6765\u8868\u793a \u6570\u7ec4\u901a\u8fc7[]intreface{}\u6765\u6807\u5fd7 string\u3001bool\u3001float64\u3001int64\u662f\u57fa\u672c\u7c7b\u578b \u4f8b\u5982NestedString\u6765\u83b7\u53d6\u4e00\u4e2a\u5bf9\u8c61\u4e2d\u7684\u67d0\u4e2a\u5b57\u6bb5\uff0c\u5176\u5b9e\u5c31\u662f\u904d\u5386\u5bf9\u8c61map\uff0c\u627e\u5230\u5bf9\u5e94key\u7684value\uff0c\u7136\u540e\u505a\u7c7b\u578b\u65ad\u8a00\uff0c\u5982\u679c\u627e\u5230\u4e86\u5c31\u8fd4\u56de\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 type Unstructured struct { // Object is a JSON compatible map with string, float, int, bool, []interface{}, or // map[string]interface{} // children. Object map[string]interface{} } // NestedFieldNoCopy returns a reference to a nested field. // Returns false if value is not found and an error if unable // to traverse obj. func NestedFieldNoCopy(obj map[string]interface{}, fields ...string) (interface{}, bool, error) { var val interface{} = obj for i, field := range fields { if m, ok := val.(map[string]interface{}); ok { val, ok = m[field] if !ok { return nil, false, nil } } else { return nil, false, fmt.Errorf(\"%v accessor error: %v is of the type %T, expected map[string]interface{}\", jsonPath(fields[:i+1]), val, val) } } return val, true, nil } // NestedString returns the string value of a nested field. // Returns false if value is not found and an error if not a string. func NestedString(obj map[string]interface{}, fields ...string) (string, bool, error) { val, found, err := NestedFieldNoCopy(obj, fields...) if !found || err != nil { return \"\", found, err } s, ok := val.(string) if !ok { return \"\", false, fmt.Errorf(\"%v accessor error: %v is of the type %T, expected string\", jsonPath(fields), val, val) } return s, true, nil } \u4f7f\u7528typed client: kubernetes-sigs/controller-runtime \u548c kubebuilder \u901a\u8fc7client-gen\u6765\u751f\u6210 typed client\u4e0d\u4f7f\u7528\u7c7b\u4f3c\u4e8e map [string] interface {} \u7684\u901a\u7528\u6570\u636e\u7ed3\u6784\uff0c\u800c\u662f\u4f7f\u7528\u5b9e\u9645\u7684Golang\u7c7b\u578b\uff0c\u8fd9\u4e9b\u7c7b\u578b\u5bf9\u4e8e\u6bcf\u4e2aGVK\u90fd\u662f\u4e0d\u540c\u7684\u548c\u7279\u5b9a\u7684 \u901a\u8fc7 scheme.AddKnownTypes \u8fdb\u884c\u7c7b\u578b\u7684\u6ce8\u518c\uff0c\u672c\u8d28\u4e0a\u662f\u6784\u5efa\u4e86\u4e00\u4e2agvk\u5230\u5bf9\u5e94\u7c7b\u578b\u7684\u6620\u5c04\uff0c\u4ee5\u53catype\u5230gvk\u7684\u6620\u5c04\u8868\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 var ( // TODO: move SchemeBuilder with zz_generated.deepcopy.go to k8s.io/api. // localSchemeBuilder and AddToScheme will stay in k8s.io/kubernetes. SchemeBuilder = runtime.NewSchemeBuilder(addKnownTypes) localSchemeBuilder = &SchemeBuilder AddToScheme = localSchemeBuilder.AddToScheme ) // Adds the list of known types to the given scheme. func addKnownTypes(scheme *runtime.Scheme) error { scheme.AddKnownTypes(SchemeGroupVersion, &Deployment{}, &DeploymentList{}, &StatefulSet{}, &StatefulSetList{}, &DaemonSet{}, &DaemonSetList{}, &ReplicaSet{}, &ReplicaSetList{}, &ControllerRevision{}, &ControllerRevisionList{}, ) metav1.AddToGroupVersion(scheme, SchemeGroupVersion) return nil } // AddKnownTypes registers all types passed in 'types' as being members of version 'version'. // All objects passed to types should be pointers to structs. The name that go reports for // the struct becomes the \"kind\" field when encoding. Version may not be empty - use the // APIVersionInternal constant if you have a type that does not have a formal version. func (s *Scheme) AddKnownTypes(gv schema.GroupVersion, types ...Object) { s.addObservedVersion(gv) for _, obj := range types { t := reflect.TypeOf(obj) if t.Kind() != reflect.Ptr { panic(\"All types must be pointers to structs.\") } t = t.Elem() s.AddKnownTypeWithName(gv.WithKind(t.Name()), obj) } } // AddKnownTypeWithName is like AddKnownTypes, but it lets you specify what this type should // be encoded as. Useful for testing when you don't want to make multiple packages to define // your structs. Version may not be empty - use the APIVersionInternal constant if you have a // type that does not have a formal version. func (s *Scheme) AddKnownTypeWithName(gvk schema.GroupVersionKind, obj Object) { s.addObservedVersion(gvk.GroupVersion()) t := reflect.TypeOf(obj) if len(gvk.Version) == 0 { panic(fmt.Sprintf(\"version is required on all types: %s %v\", gvk, t)) } if t.Kind() != reflect.Ptr { panic(\"All types must be pointers to structs.\") } t = t.Elem() if t.Kind() != reflect.Struct { panic(\"All types must be pointers to structs.\") } if oldT, found := s.gvkToType[gvk]; found && oldT != t { panic(fmt.Sprintf(\"Double registration of different types for %v: old=%v.%v, new=%v.%v in scheme %q\", gvk, oldT.PkgPath(), oldT.Name(), t.PkgPath(), t.Name(), s.schemeName)) } s.gvkToType[gvk] = t for _, existingGvk := range s.typeToGVK[t] { if existingGvk == gvk { return } } s.typeToGVK[t] = append(s.typeToGVK[t], gvk) } Automating Code Generation Golang\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u8bed\u8a00\uff0c\u7f3a\u4e4f\u7c7b\u4f3c\u4e8e\u5143\u7f16\u7a0b\u7684\u673a\u5236\u6765\u7ed9\u4e0d\u540c\u7684\u7c7b\u578b\u5b9e\u73b0\u7b97\u6cd5\uff0c\u56e0\u6b64go\u9009\u62e9\u4f7f\u7528\u4ee3\u7801\u751f\u6210\u7684\u65b9\u5f0f\u6765\u5b9e\u73b0\u3002 Kubernetest\u901a\u8fc7\u4ee3\u7801\u7ed9\u6bcf\u4e00\u7c7b\u8d44\u6e90\u751f\u6210\u4e00\u4e9b\u65b9\u6cd5\u3002\u4e3b\u8981\u6709\u56db\u79cd\u6807\u51c6\u7684\u4ee3\u7801\u751f\u6210\u3002 deepcopy-gen \u751f\u6210 func (t *T) DeepCopy() *T \u548c func (t* T)DeepCopyInto(*T) \u4e24\u4e2a\u65b9\u6cd5 client-gen \u521b\u5efa\u5e26\u7c7b\u578b\u7684client sets informer-gen lister-gen \u901a\u8fc7\u4e0a\u9762\u56db\u79cd\u4ee3\u7801\u751f\u6210\u5668\u53ef\u4ee5\u6784\u5efa\u4e00\u4e2a\u5f3a\u5927\u7684\u63a7\u5236\u5668\uff0c\u9664\u6b64\u4e4b\u5916\u8fd8\u6709 conversion-gen \u548c defaulter-gen \u4e24\u4e2a\u751f\u6210\u5668\u7ed9\u7f16\u5199 aggregated API server \u63d0\u4f9b\u4fbf\u5229\u3002 k8s.io/code-generator \u4ee3\u7801\u751f\u6210\u5668\u4ed3\u5e93\uff0c\u901a\u8fc7 generate-groups.sh \u6765\u89e6\u53d1\u4ee3\u7801\u751f\u6210\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 set -o pipefail # \u786e\u4fddk8s.io/code-generator\u5df2\u7ecf\u5728vendor\u4e2d\u4e86 SCRIPT_ROOT = $( dirname \" ${ BASH_SOURCE [0] } \" ) /.. CODEGEN_PKG = ${ CODEGEN_PKG :-$( cd \" ${ SCRIPT_ROOT } \" ; ls -d -1 ./vendor/k8s.io/code-generator 2 >/dev/null || echo ../code-generator ) } # generate the code with: # --output-base because this script should also be able to run inside the vendor dir of # k8s.io/kubernetes. The output-base is needed for the generators to output into the vendor dir # instead of the $GOPATH directly. For normal projects this can be dropped. # \u8c03\u7528k8s.io/code-generator\u4e2d\u7684generate-groups.sh\u811a\u672c\u5e76\u6307\u5b9a\u53c2\u6570 # 1. \u6307\u5b9a\u751f\u6210\u5668\u7684\u7c7b\u578b # 2. \u751f\u6210\u7684\u4ee3\u7801\u6240\u5c5e\u4e8e\u7684package name(client\u3001informer\u3001lister) # 3. API group\u7684package name # 4. \u8981\u751f\u6210\u7684 API group\u548cVersion\uff0c\u53ef\u4ee5\u6709\u591a\u4e2a\uff0cgroup:version\u683c\u5f0f\u3002 # --output-base \u5b9a\u4e8e\u751f\u6210\u7684\u4ee3\u7801\u7684\u57fa\u76ee\u5f55 # --go-header-file \u751f\u6210\u7684\u6587\u4ef6\u662f\u5426\u653e\u5165copyright\u5185\u5bb9 # deepcoy-gen\u751f\u6210\u5668\u662f\u76f4\u63a5\u5728API group package\u4e2d\u751f\u6210\u7684\u3002\u9ed8\u8ba4\u751f\u6210\u7684\u6587\u4ef6\u662fzz_generated\u524d\u7f00\u3002 bash \" ${ CODEGEN_PKG } \" /generate-groups.sh \"deepcopy,client,informer,lister\" \\ k8s.io/sample-controller/pkg/generated k8s.io/sample-controller/pkg/apis \\ samplecontroller:v1alpha1 \\ --output-base \" $( dirname \" ${ BASH_SOURCE [0] } \" ) /../../..\" \\ --go-header-file \" ${ SCRIPT_ROOT } \" /hack/boilerplate.go.txt # To use your own boilerplate text append: # --go-header-file \"${SCRIPT_ROOT}\"/hack/custom-boilerplate.go.txt \u8fd9\u4e9b\u751f\u6210\u5668\u5982\u4f55\u751f\u6210\u4ee3\u7801\u662f\u53ef\u4ee5\u901a\u8fc7\u547d\u4ee4\u884c\u53c2\u6570\u6765\u63a7\u5236\uff0c\u4e5f\u53ef\u4ee5\u7ec6\u7c92\u5ea6\u901a\u8fc7\u5728\u4ee3\u7801\u4e2d\u6253tag\u7684\u65b9\u5f0f\u6765\u63a7\u5236\uff0c\u4e3b\u8981\u6709\u4e24\u7c7btag global tags\uff0c\u901a\u5e38\u5728\u4e00\u4e2apakcage\u4e2d\u7684doc.go\u6587\u4ef6\u4e2d\u3002 1 2 +k8s:deepcopy-gen=package // \u7ed9\u6574\u4e2apakcgae\u4e2d\u7684\u7c7b\u578b\u90fd\u8fdb\u884cdeepcopy\u7c7b\u578b\u7684\u4ee3\u7801\u751f\u6210 +groupName=samplecontroller.k8s.io // \u6307\u5b9aAPI group name\u7684\u5168\u79f0\uff0c\u9ed8\u8ba4\u7528\u7684\u662fparent\u7684package name local tags\uff0c\u901a\u5e38\u5728\u4e00\u4e2astruct\u7c7b\u578b\u5b9a\u4e49\u4e0a\u3002 1 2 // +genclient // +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object // \u4e0d\u4ec5\u4ec5\u751f\u6210DeepCopy\u548cDeepCopyInto\u65b9\u6cd5\uff0c\u8fd8\u8981\u751f\u6210k8s.io/apimachinery/pkg/runtime.Object\u63a5\u53e3\u3002 Solutions for Writing OPerators Controller\u7f16\u7a0b\u57fa\u7840 ownerReference\uff0c\u4e00\u4e2a\u5c5e\u4e3b\u5177\u6709\u591a\u4e2a\u9644\u5c5e\u5bf9\u8c61\uff0c\u6bcf\u4e00\u4e2a\u9644\u5c5e\u5bf9\u8c61\u5177\u6709ownerReference\u6307\u5411\u5176\u5c5e\u4e3b\u5bf9\u8c61\u3002 \u6839\u636e\u8bbe\u8ba1\uff0ckubernetes \u4e0d\u5141\u8bb8\u8de8\u547d\u540d\u7a7a\u95f4\u6307\u5b9a\u5c5e\u4e3b\u3002\u8fd9\u610f\u5473\u7740\uff1a 1\uff09\u547d\u540d\u7a7a\u95f4\u8303\u56f4\u7684\u9644\u5c5e\u53ea\u80fd\u6307\u5b9a\u540c\u4e00\u7684\u547d\u540d\u7a7a\u95f4\u4e2d\u7684\u6216\u8005\u96c6\u7fa4\u8303\u56f4\u7684\u5c5e\u4e3b\u3002 2\uff09\u96c6\u7fa4\u8303\u56f4\u7684\u9644\u5c5e\u53ea\u80fd\u6307\u5b9a\u96c6\u7fa4\u8303\u56f4\u7684\u5c5e\u4e3b\uff0c\u4e0d\u80fd\u6307\u5b9a\u547d\u540d\u7a7a\u95f4\u8303\u56f4\u7684\u5c5e\u4e3b\u3002 \u5f53\u4f60\u5220\u9664\u5bf9\u8c61\u65f6\uff0c\u53ef\u4ee5\u6307\u5b9a\u8be5\u5bf9\u8c61\u7684\u9644\u5c5e\u662f\u5426\u4e5f\u81ea\u52a8\u5220\u9664\u3002 \u81ea\u52a8\u5220\u9664\u9644\u5c5e\u7684\u884c\u4e3a\u4e5f\u79f0\u4e3a \u7ea7\u8054\u5220\u9664\uff08Cascading Deletion\uff09\u3002 Kubernetes \u4e2d\u6709\u4e24\u79cd \u7ea7\u8054\u5220\u9664 \u6a21\u5f0f\uff1a\u540e\u53f0\uff08Background\uff09 \u6a21\u5f0f\u548c \u524d\u53f0\uff08Foreground\uff09 \u6a21\u5f0f\u3002\u8fd9\u4e2a\u5220\u9664\u7b56\u7565\u662f\u53ef\u4ee5\u901a\u8fc7 \u5c5e\u4e3b\u5bf9\u8c61\u7684 deleteOptions.propagationPolicy \u6765\u63a7\u5236\u7684\u3002 \u53ef\u80fd\u7684\u53d6\u503c\u5305\u62ec\uff1a Orphan \u3001 Foreground \u6216\u8005 Background \u3002 \u5728 \u540e\u53f0\u7ea7\u8054\u5220\u9664 \u6a21\u5f0f\u4e0b\uff0cKubernetes \u4f1a\u7acb\u5373\u5220\u9664\u5c5e\u4e3b\u5bf9\u8c61\uff0c\u4e4b\u540e\u5783\u573e\u6536\u96c6\u5668 \u4f1a\u5728\u540e\u53f0\u5220\u9664\u5176\u9644\u5c5e\u5bf9\u8c61\u3002 \u5728 \u524d\u53f0\u7ea7\u8054\u5220\u9664 \u6a21\u5f0f\u4e0b\uff0c\u6839\u5bf9\u8c61\u9996\u5148\u8fdb\u5165 deletion in progress \u72b6\u6001\u3002 \u5728 deletion in progress \u72b6\u6001\uff0c\u4f1a\u6709\u5982\u4e0b\u7684\u60c5\u51b5\uff1a \u5bf9\u8c61\u4ecd\u7136\u53ef\u4ee5\u901a\u8fc7 REST API \u53ef\u89c1\u3002 \u5bf9\u8c61\u7684 deletionTimestamp \u5b57\u6bb5\u88ab\u8bbe\u7f6e\u3002 \u5bf9\u8c61\u7684 metadata.finalizers \u5b57\u6bb5\u5305\u542b\u503c foregroundDeletion \u4e00\u65e6\u5bf9\u8c61\u88ab\u8bbe\u7f6e\u4e3a deletion in progress \u72b6\u6001\uff0c\u5783\u573e\u6536\u96c6\u5668\u4f1a\u5220\u9664\u5bf9\u8c61\u7684\u6240\u6709\u9644\u5c5e\u3002 \u5783\u573e\u6536\u96c6\u5668\u5728\u5220\u9664\u4e86\u6240\u6709\u6709\u963b\u585e\u80fd\u529b\u7684\u9644\u5c5e\uff08\u5bf9\u8c61\u7684 ownerReference.blockOwnerDeletion=true\uff09 \u4e4b\u540e\uff0c\u5220\u9664\u5c5e\u4e3b\u5bf9\u8c61\u3002 \u5982\u679c\u4e00\u4e2a\u5bf9\u8c61\u7684 ownerReferences \u5b57\u6bb5\u88ab\u4e00\u4e2a\u63a7\u5236\u5668\uff08\u4f8b\u5982 Deployment \u6216 ReplicaSet\uff09\u8bbe\u7f6e\uff0c blockOwnerDeletion \u4e5f\u4f1a\u88ab\u81ea\u52a8\u8bbe\u7f6e\uff0c\u4f60\u4e0d\u9700\u8981\u624b\u52a8\u4fee\u6539\u8fd9\u4e2a\u5b57\u6bb5\u3002 \u5982\u679c\u5220\u9664\u5bf9\u8c61\u65f6\uff0c\u4e0d\u81ea\u52a8\u5220\u9664\u5b83\u7684\u9644\u5c5e\uff0c\u8fd9\u4e9b\u9644\u5c5e\u88ab\u79f0\u4f5c \u5b64\u7acb\u5bf9\u8c61\uff08Orphaned\uff09 \u3002 \u9ed8\u8ba4\u662f\u7ea7\u8054\u5220\u9664\uff0c\u901a\u8fc7--cascade\u53ef\u4ee5\u63a7\u5236\u8fd9\u4e2a\u884c\u4e3a kubectl delete replicaset my-repset --cascade=false \u8fd9\u6837my-repset\u5176\u9644\u5c5e\u7ba1\u7406\u7684pod\u5bf9\u8c61\u5c31\u4e0d\u4f1a\u88ab\u5220\u9664\u4e86\u3002 \u4e0b\u9762\u7684\u4ee3\u7801\u5728\u521b\u5efa\u4e86Pod\u540e\uff0c\u5c06\u8fd9\u4e2apod\u8bbe\u7f6eController\u7684\u9644\u5c5e\u5bf9\u8c61 1 2 3 4 pod := newPodForCR(instance) // Set At instance as the owner and controller owner := metav1.NewControllerRef(instance, cnatv1alpha1.SchemeGroupVersion.WithKind(\"At\")) pod.ObjectMeta.OwnerReferences = append(pod.ObjectMeta.OwnerReferences, *owner) Create Controller 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 import ( \"flag\" \"os\" \"path/filepath\" \"time\" \"k8s.io/apimachinery/pkg/util/wait\" kubeinformers \"k8s.io/client-go/informers\" \"k8s.io/client-go/kubernetes\" \"k8s.io/client-go/rest\" \"k8s.io/client-go/tools/clientcmd\" \"k8s.io/klog\" clientset \"github.com/programming-kubernetes/cnat/cnat-client-go/pkg/generated/clientset/versioned\" informers \"github.com/programming-kubernetes/cnat/cnat-client-go/pkg/generated/informers/externalversions\" ) var ( masterURL string kubeconfig string ) func main() { flag.StringVar(&kubeconfig, \"kubeconfig\", defaultKubeconfig(), \"Path to a kubeconfig. Only required if out-of-cluster.\") flag.StringVar(&masterURL, \"master\", \"\", \"The address of the Kubernetes API server. Overrides any value in kubeconfig. Only required if out-of-cluster.\") klog.InitFlags(nil) flag.Parse() // \u5148\u63a2\u6d4b\u96c6\u7fa4\u5185\u7684\u914d\u7f6e\uff0c\u5982\u679c\u5b58\u5728\u5c31\u4f7f\u7528\u8fd9\u4e2a\u914d\u7f6e\u3002\u5426\u5219\u5c31\u4f7f\u7528\u9ed8\u8ba4\u7684kubeconfig. cfg, err := rest.InClusterConfig() if err != nil { cfg, err = clientcmd.BuildConfigFromFlags(masterURL, kubeconfig) if err != nil { klog.Fatalf(\"Error building kubeconfig: %s\", err.Error()) } } // \u901a\u8fc7\u914d\u7f6e\u6784\u5efakube client kubeClient, err := kubernetes.NewForConfig(cfg) if err != nil { klog.Fatalf(\"Error building kubernetes clientset: %s\", err.Error()) } // \u521b\u5efa\u81ea\u5b9a\u4e49\u8d44\u6e90\u7684client cnatClient, err := clientset.NewForConfig(cfg) if err != nil { klog.Fatalf(\"Error building cnat clientset: %s\", err.Error()) } // \u521b\u5efakubeInfomerFactory kubeInformerFactory := kubeinformers.NewSharedInformerFactory(kubeClient, time.Minute*10) // \u521b\u5efa\u81ea\u5b9a\u4e49\u8d44\u6e90\u7684InfomerFactory cnatInformerFactory := informers.NewSharedInformerFactory(cnatClient, time.Minute*10) // \u521b\u5efaController controller := NewController(kubeClient, cnatClient, cnatInformerFactory.Cnat().V1alpha1().Ats(), kubeInformerFactory.Core().V1().Pods()) // \u542f\u52a8infomer // notice that there is no need to run Start methods in a separate goroutine. (i.e. go kubeInformerFactory.Start(stopCh)) // Start method is non-blocking and runs all registered informers in a dedicated goroutine. kubeInformerFactory.Start(wait.NeverStop) cnatInformerFactory.Start(wait.NeverStop) if err = controller.Run(2, wait.NeverStop); err != nil { klog.Fatalf(\"Error running controller: %s\", err.Error()) } } func defaultKubeconfig() string { fname := os.Getenv(\"KUBECONFIG\") if fname != \"\" { return fname } home, err := os.UserHomeDir() if err != nil { klog.Warningf(\"failed to get home directory: %v\", err) return \"\" } return filepath.Join(home, \".kube\", \"config\") } Event broadcaster Event\u4e8b\u4ef6\u7ba1\u7406\u673a\u5236\u4e3b\u8981\u6709\u4e09\u90e8\u5206\u7ec4\u6210\uff1a 1 2 3 * EventRecorder\uff1a\u662f\u4e8b\u4ef6\u751f\u6210\u8005\uff0ck8s\u7ec4\u4ef6\u901a\u8fc7\u8c03\u7528\u5b83\u7684\u65b9\u6cd5\u6765\u751f\u6210\u4e8b\u4ef6\uff1b * EventBroadcaster\uff1a\u4e8b\u4ef6\u5e7f\u64ad\u5668\uff0c\u8d1f\u8d23\u6d88\u8d39EventRecorder\u4ea7\u751f\u7684\u4e8b\u4ef6\uff0c\u7136\u540e\u5206\u53d1\u7ed9broadcasterWatcher\uff1b * broadcasterWatcher\uff1a\u7528\u4e8e\u5b9a\u4e49\u4e8b\u4ef6\u7684\u5904\u7406\u65b9\u5f0f\uff0c\u5982\u4e0a\u62a5apiserver\uff1b 1 2 3 4 5 6 7 8 9 10 11 12 13 14 import utilruntime \"k8s.io/apimachinery/pkg/util/runtime\" // \u5c06\u81ea\u5b9a\u4e49\u8d44\u6e90\u7684scheme\u6dfb\u52a0\u5230kubernetes\u7684scheme\u4e2d\u7528\u4e8elogged events utilruntime.Must(cnatscheme.AddToScheme(scheme.Scheme)) klog.V(4).Info(\"Creating event broadcaster\") // \u521b\u5efa\u4e8b\u4ef6\u5e7f\u64ad\u5668 eventBroadcaster := record.NewBroadcaster() // \u5c06\u6536\u5230\u7684\u4e8b\u4ef6\u901a\u8fc7\u6307\u5b9a\u7684log\u51fd\u6570\u8bb0\u5f55 eventBroadcaster.StartLogging(klog.Infof) // \u5c06\u6536\u5230\u7684\u4e8b\u4ef6\u901a\u8fc7\u6307\u5b9a\u7684Event Sink\u5b58\u50a8\uff0c\u76f8\u5f53\u4e8e\u662fbroadcasterWatcher\uff0c\u8fd9\u91cc\u5c06\u6536\u5230\u7684\u4e8b\u4ef6\u521b\u5efa\u6210Events\u4e0a\u62a5\u7ed9API Server eventBroadcaster.StartRecordingToSink(&typedcorev1.EventSinkImpl{Interface: kubeClientset.CoreV1().Events(\"\")}) // \u521b\u5efa\u4e8b\u4ef6\u751f\u4ea7\u8005 recorder := eventBroadcaster.NewRecorder(scheme.Scheme, corev1.EventSource{Component: controllerAgentName}) // \u4ee3\u7801\u4e2d\u5c31\u53ef\u4ee5\u901a\u8fc7recorder\u6765\u8bb0\u5f55\u4e8b\u4ef6\u4e86 WorkQueue WorkQueue\u79f0\u4e3a\u5de5\u4f5c\u961f\u5217\uff0cKubernetes\u7684WorkQueue\u961f\u5217\u4e0e\u666e\u901aFIFO\uff08\u5148\u8fdb\u5148\u51fa\uff0cFirst-In, First-Out\uff09\u961f\u5217\u76f8\u6bd4\uff0c\u5b9e\u73b0\u7565\u663e\u590d\u6742\uff0c\u5b83\u7684\u4e3b\u8981\u529f\u80fd\u5728\u4e8e\u6807\u8bb0\u548c\u53bb\u91cd\uff0c\u5e76\u652f\u6301\u5982\u4e0b\u7279\u6027\u3002 1 2 3 4 5 6 7 8 * \u6709\u5e8f\uff1a\u6309\u7167\u6dfb\u52a0\u987a\u5e8f\u5904\u7406\u5143\u7d20\uff08item\uff09\u3002 * \u53bb\u91cd\uff1a\u76f8\u540c\u5143\u7d20\u5728\u540c\u4e00\u65f6\u95f4\u4e0d\u4f1a\u88ab\u91cd\u590d\u5904\u7406\uff0c\u4f8b\u5982\u4e00\u4e2a\u5143\u7d20\u5728\u5904\u7406\u4e4b\u524d\u88ab\u6dfb\u52a0\u4e86\u591a\u6b21\uff0c\u5b83\u53ea\u4f1a\u88ab\u5904\u7406\u4e00\u6b21\u3002 * \u5e76\u53d1\u6027\uff1a\u591a\u751f\u4ea7\u8005\u548c\u591a\u6d88\u8d39\u8005\u3002 * \u6807\u8bb0\u673a\u5236\uff1a\u652f\u6301\u6807\u8bb0\u529f\u80fd\uff0c\u6807\u8bb0\u4e00\u4e2a\u5143\u7d20\u662f\u5426\u88ab\u5904\u7406\uff0c\u4e5f\u5141\u8bb8\u5143\u7d20\u5728\u5904\u7406\u65f6\u91cd\u65b0\u6392\u961f\u3002 * \u901a\u77e5\u673a\u5236\uff1aShutDown\u65b9\u6cd5\u901a\u8fc7\u4fe1\u53f7\u91cf\u901a\u77e5\u961f\u5217\u4e0d\u518d\u63a5\u6536\u65b0\u7684\u5143\u7d20\uff0c\u5e76\u901a\u77e5metric goroutine\u9000\u51fa\u3002 * \u5ef6\u8fdf\uff1a\u652f\u6301\u5ef6\u8fdf\u961f\u5217\uff0c\u5ef6\u8fdf\u4e00\u6bb5\u65f6\u95f4\u540e\u518d\u5c06\u5143\u7d20\u5b58\u5165\u961f\u5217\u3002 * \u9650\u901f\uff1a\u652f\u6301\u9650\u901f\u961f\u5217\uff0c\u5143\u7d20\u5b58\u5165\u961f\u5217\u65f6\u8fdb\u884c\u901f\u7387\u9650\u5236\u3002\u9650\u5236\u4e00\u4e2a\u5143\u7d20\u88ab\u91cd\u65b0\u6392\u961f\uff08Reenqueued\uff09\u7684\u6b21\u6570\u3002 * Metric\uff1a\u652f\u6301metric\u76d1\u63a7\u6307\u6807\uff0c\u53ef\u7528\u4e8ePrometheus\u76d1\u63a7\u3002 WorkQueue\u652f\u63013\u79cd\u961f\u5217\uff0c\u5e76\u63d0\u4f9b\u4e863\u79cd\u63a5\u53e3\uff0c\u4e0d\u540c\u961f\u5217\u5b9e\u73b0\u53ef\u5e94\u5bf9\u4e0d\u540c\u7684\u4f7f\u7528\u573a\u666f\uff0c\u5206\u522b\u4ecb\u7ecd\u5982\u4e0b\u3002 1 2 3 * Interface\uff1aFIFO\u961f\u5217\u63a5\u53e3\uff0c\u5148\u8fdb\u5148\u51fa\u961f\u5217\uff0c\u5e76\u652f\u6301\u53bb\u91cd\u673a\u5236\u3002 * DelayingInterface\uff1a\u5ef6\u8fdf\u961f\u5217\u63a5\u53e3\uff0c\u57fa\u4e8eInterface\u63a5\u53e3\u5c01\u88c5\uff0c\u5ef6\u8fdf\u4e00\u6bb5\u65f6\u95f4\u540e\u518d\u5c06\u5143\u7d20\u5b58\u5165\u961f\u5217\u3002 * RateLimitingInterface\uff1a\u9650\u901f\u961f\u5217\u63a5\u53e3\uff0c\u57fa\u4e8eDelayingInterface\u63a5\u53e3\u5c01\u88c5\uff0c\u652f\u6301\u5143\u7d20\u5b58\u5165\u961f\u5217\u65f6\u8fdb\u884c\u901f\u7387\u9650\u5236\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 import \"k8s.io/client-go/util/workqueue\" // k8s.io/client-go/util/workqueue/queue.go type Interface interface { Add(item interface{}) Len() int Get() (item interface{}, shutdown bool) Done(item interface{}) ShutDown() ShuttingDown() bool } /* Add\uff1a\u7ed9\u961f\u5217\u6dfb\u52a0\u5143\u7d20\uff08item\uff09\uff0c\u53ef\u4ee5\u662f\u4efb\u610f\u7c7b\u578b\u5143\u7d20\u3002 Len\uff1a\u8fd4\u56de\u5f53\u524d\u961f\u5217\u7684\u957f\u5ea6\u3002 Get\uff1a\u83b7\u53d6\u961f\u5217\u5934\u90e8\u7684\u4e00\u4e2a\u5143\u7d20\u3002 Done\uff1a\u6807\u8bb0\u961f\u5217\u4e2d\u8be5\u5143\u7d20\u5df2\u88ab\u5904\u7406\u3002 ShutDown\uff1a\u5173\u95ed\u961f\u5217\u3002 ShuttingDown\uff1a\u67e5\u8be2\u961f\u5217\u662f\u5426\u6b63\u5728\u5173\u95ed\u3002 */ // k8s.io/client-go/util/workqueue/rate_limiting_queue.go // RateLimitingInterface is an interface that rate limits items being added to the queue. type RateLimitingInterface interface { DelayingInterface // AddRateLimited adds an item to the workqueue after the rate limiter says it's ok AddRateLimited(item interface{}) // Forget indicates that an item is finished being retried. Doesn't matter whether it's for perm failing // or for success, we'll stop the rate limiter from tracking it. This only clears the `rateLimiter`, you // still have to call `Done` on the queue. Forget(item interface{}) // NumRequeues returns back how many times the item was requeued NumRequeues(item interface{}) int } /* AddRateLimited: \u5c06\u5143\u7d20\u91cd\u65b0\u653e\u56de\u961f\u5217\u5e76\u8fdb\u884c\u9650\u901f Forget\uff1a\u91ca\u653e\u6307\u5b9a\u5143\u7d20\uff0c\u6e05\u7a7a\u8be5\u5143\u7d20\u7684\u6392\u961f\u6570\u3002 NumRequeues\uff1a\u83b7\u53d6\u6307\u5b9a\u5143\u7d20\u7684\u6392\u961f\u6570\u3002 */ Scheme 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 import \"k8s.io/apimachinery/pkg/runtime/schema\" import metav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\" // SchemeGroupVersion is group version used to register these objects var SchemeGroupVersion = schema.GroupVersion{Group: GroupName, Version: \"v1alpha1\"} // Adds the list of known types to Scheme. // AddKnownTypes\u65b9\u6cd5\u4e2d\u4f1a\u901a\u8fc7\u53cd\u5c04\u83b7\u53d6\u5230\u8d44\u6e90\u5bf9\u8c61\u7684\u540d\u5b57\uff0c\u7136\u540e\u548cGroupVersion\u7ec4\u5408\u6210GVK\uff0c\u6700\u540e\u7528GVK\u548c\u5bf9\u8c61\u5efa\u7acb\u6620\u5c04\u5173\u7cfb\u3002 func addKnownTypes(scheme *runtime.Scheme) error { scheme.AddKnownTypes(SchemeGroupVersion, &At{}, &AtList{}, ) // \u6784\u5efaScheme\u7ba1\u7406\u591aversion metav1.AddToGroupVersion(scheme, SchemeGroupVersion) return nil } func (s *Scheme) AddKnownTypes(gv schema.GroupVersion, types ...Object) { s.addObservedVersion(gv) for _, obj := range types { t := reflect.TypeOf(obj) if t.Kind() != reflect.Ptr { panic(\"All types must be pointers to structs.\") } t = t.Elem() s.AddKnownTypeWithName(gv.WithKind(t.Name()), obj) } } Finalizers Finalizers \u5b57\u6bb5\u5c5e\u4e8e Kubernetes GC \u5783\u573e\u6536\u96c6\u5668\uff0c\u662f\u4e00\u79cd\u5220\u9664\u62e6\u622a\u673a\u5236\uff0c\u80fd\u591f\u8ba9\u63a7\u5236\u5668\u5b9e\u73b0\u5f02\u6b65\u7684\u5220\u9664\u524d\uff08Pre-delete\uff09\u56de\u8c03\u3002 \u5176\u5b58\u5728\u4e8e\u4efb\u4f55\u4e00\u4e2a\u8d44\u6e90\u5bf9\u8c61\u7684 Meta \u4e2d\uff0c\u5728 k8s \u6e90\u7801\u4e2d\u58f0\u660e\u4e3a []string\uff0c\u8be5 Slice \u7684\u5185\u5bb9\u4e3a\u9700\u8981\u6267\u884c\u7684\u62e6\u622a\u5668\u540d\u79f0\u3002 The key point to note is that a finalizer causes \u201cdelete\u201d on the object to become an \u201cupdate\u201d to set deletion timestamp. finalizer\u4f1a\u5bfc\u81f4\u5bf9\u8c61\u7684\u5220\u9664\u53d8\u6210\u5bf9\u8c61\u7684deletion timestamp\u5b57\u6bb5\u7684\u66f4\u65b0\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 unc (r *CronJobReconciler) Reconcile(req ctrl.Request) (ctrl.Result, error) { ctx := context.Background() log := r.Log.WithValues(\"cronjob\", req.NamespacedName) var cronJob *batchv1.CronJob if err := r.Get(ctx, req.NamespacedName, cronJob); err != nil { log.Error(err, \"unable to fetch CronJob\") // we'll ignore not-found errors, since they can't be fixed by an immediate // requeue (we'll need to wait for a new notification), and we can get them // on deleted requests. return ctrl.Result{}, client.IgnoreNotFound(err) } // name of our custom finalizer myFinalizerName := \"storage.finalizers.tutorial.kubebuilder.io\" // examine DeletionTimestamp to determine if object is under deletion if cronJob.ObjectMeta.DeletionTimestamp.IsZero() { // The object is not being deleted, so if it does not have our finalizer, // then lets add the finalizer and update the object. This is equivalent // registering our finalizer. // \u6ce8\u518cfinalizer if !containsString(cronJob.ObjectMeta.Finalizers, myFinalizerName) { cronJob.ObjectMeta.Finalizers = append(cronJob.ObjectMeta.Finalizers, myFinalizerName) if err := r.Update(context.Background(), cronJob); err != nil { return ctrl.Result{}, err } } } else { // The object is being deleted if containsString(cronJob.ObjectMeta.Finalizers, myFinalizerName) { // our finalizer is present, so lets handle any external dependency if err := r.deleteExternalResources(cronJob); err != nil { // if fail to delete the external dependency here, return with error // so that it can be retried return ctrl.Result{}, err } // remove our finalizer from the list and update it. cronJob.ObjectMeta.Finalizers = removeString(cronJob.ObjectMeta.Finalizers, myFinalizerName) if err := r.Update(context.Background(), cronJob); err != nil { return ctrl.Result{}, err } } // Stop reconciliation as the item is being deleted return ctrl.Result{}, nil } // Your reconcile logic return ctrl.Result{}, nil } func (r *Reconciler) deleteExternalResources(cronJob *batch.CronJob) error { // // delete any external resources associated with the cronJob // // Ensure that delete implementation is idempotent and safe to invoke // multiple types for same object. } // Helper functions to check and remove string from a slice of strings. func containsString(slice []string, s string) bool { for _, item := range slice { if item == s { return true } } return false } func removeString(slice []string, s string) (result []string) { for _, item := range slice { if item == s { continue } result = append(result, item) } return } Ref: 1. https://kubernetes.io/zh/docs/concepts/workloads/controllers/garbage-collection/ 2. https://www.kubernetes.org.cn/6839.html 3. https://www.cnblogs.com/luozhiyun/p/13799901.html 4. https://xie.infoq.cn/article/63258ead84821bc3e276de1f7 Kubebuilder Install 1 2 3 4 5 6 7 8 9 10 11 12 13 os = $( go env GOOS ) arch = $( go env GOARCH ) # download kubebuilder and extract it to tmp curl -L https://go.kubebuilder.io/dl/2.3.1/ ${ os } / ${ arch } | tar -xz -C /tmp/ # move to a long-term location and put it on your path # (you'll need to set the KUBEBUILDER_ASSETS env var if you put it somewhere else) sudo mv /tmp/kubebuilder_2.3.1_ ${ os } _ ${ arch } /usr/local/kubebuilder export PATH = $PATH :/usr/local/kubebuilder/bin # Also, you can install a master snapshot from https://go.kubebuilder.io/dl/latest/ ${ os } / ${ arch } . Create a Project 1 kubebuilder init --domain programming-kubernetes.info --license apache2 --owner \"Programming Kubernetes authors\u201d Create API 1 kubebuilder create api --group cnat --version v1alpha1 --kind At API Interface 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 // AtReconciler reconciles a At object type AtReconciler struct { client.Client Log logr.Logger Scheme *runtime.Scheme } // +kubebuilder:rbac:groups = cnat.programming-kubernetes.info,resources = ats,verbs = get ; list ; watch ; create ; update ; patch ; delete // +kubebuilder:rbac:groups = cnat.programming-kubernetes.info,resources = ats/status,verbs = get ; update ; patch // \u6838\u5fc3\u7684Reconciler\u63a5\u53e3\uff0c\u901a\u8fc7client.Client\u53ef\u4ee5\u8bbf\u95ee\u81ea\u5b9a\u4e49\u8d44\u6e90\u548ck8s\u57fa\u672c\u8d44\u6e90 func ( r *AtReconciler ) Reconcile ( req ctrl.Request ) ( ctrl.Result, error ) { _ = context.Background () _ = r.Log.WithValues ( \"at\" , req.NamespacedName ) // your logic here return ctrl.Result {} , nil } Operator-SDK \u7b49\u540c\u4e8ekubebuilder Shipping Controller and Operator Packageing \u901a\u8fc7helm\u6765\u6e32\u67d3YAML\u6587\u4ef6\uff0c\u89e3\u51b3YAML\u6587\u4ef6\u53ea\u80fd\u662f\u9759\u6001\u7684\u95ee\u9898\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u52a8\u6001\u63a7\u5236YAML\u6587\u4ef6\u4e86\u3002 \u8fd8\u53ef\u4ee5\u901a\u8fc7kustomize never use the default service account in a namespace Custom API Server CRD\u7684\u4e00\u4e9b\u9650\u5236: \u9650\u5236\u53ea\u80fd\u4f7f\u7528etcd\u4f5c\u4e3a\u5b58\u50a8 \u4e0d\u652f\u6301protobuf\uff0c\u53ea\u80fd\u662fJSON \u53ea\u652f\u6301/status\u548c/scale\u4e24\u79cd\u5b50\u8d44\u6e90 \u4e0d\u652f\u6301graceful deletetion\u3001\u5c3d\u7ba1\u53ef\u4ee5\u901a\u8fc7Finalizer\u6765\u6a21\u62df\uff0c\u4f46\u662f\u4e0d\u652f\u6301\u6307\u5b9agraceful deletion time \u5bf9API Server\u7684\u8d1f\u8f7d\u5f71\u54cd\u6bd4\u8f83\u5927\uff0c\u56e0\u4e3a\u9700\u8981\u7528\u901a\u7528\u7684\u65b9\u5f0f\u6765\u5b9e\u73b0\u6240\u6709\u6b63\u5e38\u8d44\u6e90\u9700\u8981\u8d70\u7684\u903b\u8f91\u548c\u7b97\u6cd5 \u53ea\u80fd\u5b9e\u73b0CRUD\u57fa\u672c\u8bed\u4e49 \u4e0d\u652f\u6301\u540c\u7c7b\u8d44\u6e90\u7684\u5b58\u50a8\u5171\u4eab(\u6bd4\u5982\u4e0d\u540cAPI Group\u7684\u76f8\u540c\u8d44\u6e90\u5e95\u5c42\u4e0d\u652f\u6301\u4f7f\u7528\u76f8\u540c\u7684\u5b58\u50a8) \u76f8\u53cd\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684API Server\u6ca1\u6709\u4e0a\u9762\u7684\u9650\u5236\u3002 \u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u5b58\u50a8\uff0c\u4f8b\u5982metrics API Server\u53ef\u4ee5\u5b58\u50a8\u6570\u636e\u5728\u5185\u5b58\u4e2d \u53ef\u4ee5\u63d0\u4f9bprotobuf\u652f\u6301 \u53ef\u4ee5\u63d0\u4f9b\u4efb\u610f\u7684\u5b50\u8d44\u6e90 \u53ef\u4ee5\u5b9e\u73b0graceful deletion \u53ef\u4ee5\u5b9e\u73b0\u6240\u6709\u7684\u64cd\u4f5c \u53ef\u4ee5\u5b9e\u73b0\u81ea\u5b9a\u4e49\u8bed\u4e49\uff0c\u6bd4\u5982\u539f\u5b50\u7684\u5206\u914dip\uff0c\u5982\u679c\u4f7f\u7528webbook\u7684\u65b9\u5f0f\u53ef\u80fd\u4f1a\u56e0\u4e3a\u540e\u7eed\u7684pipeline\u5bfc\u81f4\u8bf7\u6c42\u5931\u8d25\uff0c\u8fd9\u4e2a\u65f6\u5019\u5206\u914d\u7684ip\u9700\u8981\u53d6\u6d88\uff0c\u4f46\u662fwebhook\u662f\u6ca1\u529e\u6cd5\u505a\u64a4\u9500\u7684\uff0c\u9700\u8981\u7ed3\u5408\u63a7\u5236\u5668\u6765\u5b8c\u6210\u3002\u8fd9\u5c31\u662f\u56e0\u4e3a webhook\u53ef\u80fd\u4f1a\u4ea7\u751f\u526f\u4f5c\u7528\u3002 \u53ef\u4ee5\u5bf9\u5e95\u5c42\u7c7b\u578b\u76f8\u540c\u7684\u8d44\u6e90\uff0c\u8fdb\u884c\u5171\u4eab\u5b58\u50a8\u3002 \u81ea\u5b9a\u4e49API Server\u5de5\u4f5c\u6d41\u7a0b: 1. K8s API server\u63a5\u6536\u5230\u8bf7\u6c42 2. \u8bf7\u6c42\u4f20\u9012\u4e86handler chanin\uff0c\u8fd9\u91cc\u9762\u5305\u542b\u4e86\u9274\u6743\u3001\u65e5\u5fd7\u5ba1\u8ba1\u7b49 3. \u8bf7\u6c42\u4f1a\u8d70\u5230kube-aggregator\u7ec4\u4ef6\uff0c\u8fd9\u4e2a\u7ec4\u4ef6\u77e5\u9053\u54ea\u4e9bAPI \u8bf7\u6c42\u662f\u9700\u8981\u8d70\u81ea\u5b9a\u4e49API Server\u7684\uff0c\u90a3\u4e9bGroup\u8d70API server\u8fd9\u662fAPI Service\u5b9a\u4e49\u7684 4. \u8f6c\u53d1\u8bf7\u6c42\u7ed9\u81ea\u5b9a\u4e49API Server \u81ea\u5b9a\u4e49API Server\u7684\u9274\u6743\u53ef\u4ee5delegated\u7ed9k8s\u7684 API Server\uff0c\u901a\u8fc7SubjectAccessReview\u6765\u5b9e\u73b0 1 // \u5b9a\u4e49\u54ea\u4e9bgroup\u3001version\u7684\u8d44\u6e90\u8981\u8d70\u81ea\u5b9a\u4e49Api Server 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 apiVersion : apiregistration.k8s.io/v1beta1 kind : APIService metadata : name : name spec : group : API-group-name version : API-group-version service : namespace : custom-API-server-service-namespace name : -API-server-service caBundle : base64-caBundle insecureSkipTLSVerify : bool // \u76f8\u540c\u7684group\u9ad8\u4f18\u5148\u7ea7\u8986\u76d6\u4f4e\u4f18\u5148\u7ea7 groupPriorityMinimum : 2000 // \u76f8\u540cgroup\u7684\u4e0d\u540cversion\u901a\u8fc7\u4f18\u5148\u7ea7\u6765\u9009\u62e9 versionPriority : 20 Every API server serves a number of resources and versions Some resources have multiple versions. To make multiple versions of a resource possible, the API server converts between versions. To avoid quadratic growth of necessary conversions between versions, API servers use an internal version when implementing the actual API logic. The internal version is also often called hub version because it is a kind of hub that every other version is converted to and from API Server\u5728\u5185\u90e8\u7ed9\u6bcf\u4e00\u4e2a\u8d44\u6e90\u90fd\u7ef4\u62a4\u4e86\u4e00\u4e2a\u5185\u90e8\u7248\u672c\uff0c\u6240\u6709\u7684\u7248\u672c\u90fd\u4f1a\u8f6c\u6362\u6210\u8fd9\u4e2a\u5185\u90e8\u7248\u672c\u518d\u53bb\u64cd\u4f5c\u3002 \u7528\u6237\u53d1\u9001\u6307\u5b9a\u7248\u672c\u7684\u8bf7\u6c42\u7ed9API server(\u6bd4\u5982v1) API server\u89e3\u7801\u8bf7\u6c42\uff0c\u7136\u540e\u8f6c\u6362\u4e3a\u5185\u90e8\u7248\u672c API server\u4f20\u9012\u5185\u90e8\u7248\u672c\u7ed9admission \u548c validation API server\u5728registry\u4e2d\u5b9e\u73b0\u7684\u903b\u8f91\u662f\u6839\u636e\u5185\u90e8\u7248\u672c\u6765\u5b9e\u73b0\u7684 etcd\u8bfb\u548c\u5199\u5e26\u6709\u7248\u672c\u7684\u5bf9\u8c61(\u4f8b\u5982v2\uff0c\u5b58\u50a8\u7248\u672c)\uff0c\u4ed6\u5c06\u4ece\u5185\u90e8\u7248\u672c\u8fdb\u884c\u8f6c\u6362\u3002 \u6700\u7ec8\u7ed3\u679c\u4f1a\u5c06\u8f6c\u6362\u4e3a\u8bf7\u6c42\u7684\u7248\u672c\uff0c\u6bd4\u5982\u8fd9\u91cc\u5c31\u662fv1 Default\u548cConversion\u9700\u8981\u7ed9\u5185\u90e8\u7248\u672c\u548c\u5916\u90e8\u7248\u672c\u63d0\u4f9bConversion\u65b9\u6cd5\u548c\u9ed8\u8ba4\u503c\u3002 This trick of using a pointer works for primitive types like strings. For maps and arrays, it is often hard to reach roundtrippability without identifying nil maps/arrays and empty maps/arrays. Most defaulters for maps and arrays in Kubernetes therefore apply the default in both cases, working around encoding and decoding bugs. \u5bf9\u4e8e\u57fa\u672c\u7c7b\u578b\u5982\u4f55\u533a\u5206\u9ed8\u8ba4\u7684\u96f6\u503c\u662f\u8bbe\u7f6e\u4e86\u8fd8\u662f\u6ca1\u6709\u8bbe\u7f6e\uff0c\u6bd4\u5982bool\u9ed8\u8ba4\u662ffalse\uff0c\u90a3\u7528\u6237\u5230\u5e95\u662f\u8bbe\u7f6e\u4e86false\u3001\u8fd8\u662f\u6ca1\u6709\u8bbe\u7f6e\u5bfc\u81f4\u9ed8\u8ba4\u503c\u7528\u4e86false\u5462? k8s\u901a\u8fc7\u6307\u9488\u6765\u89e3\u51b3\uff0c\u5982\u679c\u6709\u8bbe\u7f6e\u90a3\u4e48\u6307\u9488\u4e0d\u4e3a\u7a7a\uff0c\u5426\u5219\u5c31\u662f\u6ca1\u6709\u8bbe\u7f6e\u3002 TODO(tianqian.zyf): \u5b9e\u73b0\u4e00\u4e2aCustom API Server Advanced Custom Resources versioning\u3001coversion\u3001admission controllers \u901a\u8fc7versioning\u673a\u5236\u53ef\u4ee5\u4fdd\u8bc1API\u7684\u6f14\u8fdb\uff0c\u540c\u65f6\u4e5f\u53ef\u4ee5\u5411\u540e\u517c\u5bb9\uff0cversiong\u673a\u5236\u7684\u6838\u5fc3\u5728\u4e8eConversion\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 apiVersion : apiextensions.k8s.io/v1beta1 kind : CustomResourceDefinition metadata : name : pizzas.restaurant.programming-kubernetes.info spec : group : restaurant.programming-kubernetes.info names : kind : Pizza listKind : PizzaList plural : pizzas singular : pizza scope : Namespaced version : v1alpha1 versions : // \u5b9a\u4e49v1alpha1\u4e3a\u5b58\u50a8\u7248\u672c\uff0c - name : v1alpha1 served : true storage : true schema : ... - name : v1beta1 served : true storage : false schema : ... The client (e.g., our kubectl get pizza margherita) requests a version. etcd has stored the object in some version. If the versions do not match, the storage object is sent to the webhook server for conversion. The webhook returns a response with the converted object. The converted object is sent back to the client. 1 2 3 4 5 type ConversionReview struct { metav1 . TypeMeta `json:\",inline\"` Request * ConversionRequest Response * ConversionResponse }","title":"Programming Kubernetes"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/book/KubernetesPrograming/#programming-kubernetes","text":"","title":"Programming Kubernetes"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/book/KubernetesPrograming/#chapter1-introduction","text":"Kubernetes Native Application \u4f55\u4e3aKubernetes-native\u7684Application\uff0c\u611f\u77e5\u662f\u8dd1\u5728Kubernetes\u4e0a\uff0c\u5e76\u4f9d\u9760Kubernetes\u63d0\u4f9b\u7684API(\u6307\u7684\u662f\u4e0eAPI Server\u76f4\u63a5\u4ea4\u4e92\u6765\u67e5\u8be2\u8d44\u6e90\u7684\u72b6\u6001\u6216\u8005\u66f4\u65b0\u8fd9\u4e9b\u8d44\u6e90\u7684\u72b6\u6001)\u6765\u8fdb\u884c\u7f16\u7a0b\u7684Application\uff0c\u88ab\u79f0\u4e4b\u4e3aKubernetes Native Application\u3002 Kubernetest \u6269\u5c55\u7cfb\u7edf kubernetest\u63d0\u4f9b\u4e86\u5f88\u5f3a\u5927\u7684\u6269\u5c55\u7cfb\u7edf\uff0c\u901a\u5e38\u6765\u8bf4\u6709\u591a\u79cd\u65b9\u5f0f\u6765\u5b9e\u73b0\u6269\u5c55\uff0c\u4e0b\u9762\u662f\u4e00\u4e9b\u5e38\u89c1\u7684Kubernetes\u7684\u6269\u5c55\u70b9\uff0c\u66f4\u591a\u7ec6\u8282\u53ef\u4ee5\u770b extending-kubernetes-101 : cloud-controller-manager \u5bf9\u63a5\u5404\u4e2a\u4e91\u5382\u5546\u63d0\u4f9b\u7684\u80fd\u529b\uff0c\u6bd4\u5982Load Balancer\u3001VM\u7b49 Binary kubectl plug-ins \u901a\u8fc7\u4e8c\u8fdb\u5236\u6269\u5c55kubelet\u5b50\u547d\u4ee4 Binary kubelet plug-ins \u901a\u8fc7\u4e8c\u8fdb\u5236\u6269\u5c55\u7f51\u7edc\u3001\u5b58\u50a8\u3001\u5bb9\u5668\u8fd0\u884c\u65f6\u7b49 Access extensions in the API server \u6bd4\u5982dynamic admission control with webhooks Custom resources \u548c custom controllers Custom API servers Scheduler externsions\uff0c\u901a\u8fc7webhook\u6765\u5b9e\u73b0\u81ea\u5df1\u7684\u8c03\u5ea6\u5668 Authentication with webhooks Controll Loop Kubernetest\u7684controller\u7684\u5b9e\u73b0\u672c\u8d28\u4e0a\u662f\u4e00\u4e2acontrol loop\uff0c\u901a\u8fc7API server\u6765watch\u67d0\u79cd\u8d44\u6e90\u7684\u72b6\u6001\uff0c\u7136\u540e\u6839\u636e\u5f53\u524d\u72b6\u6001\u5411\u7740\u7ec8\u6001\u8d70\u3002 a controller implements a control loop, watching the shared state of the cluster through the API server and making changes in an attempt to move the current state toward the desired state Kubernetes\u5e76\u4e0d\u4f1a\u6839\u636e\u5f53\u524d\u7684\u72b6\u6001\u548c\u9884\u671f\u7684\u72b6\u6001\u6765\u8ba1\u7b97\u8fbe\u5230\u9884\u671f\u72b6\u6001\u6240\u9700\u8981\u7684\u547d\u4ee4\u5e8f\u5217\uff0c\u4ece\u800c\u6765\u5b9e\u73b0\u6240\u8c13\u7684\u58f0\u660e\u5f0f\u7cfb\u7edf\uff0c\u76f8\u53cdKubernetes\u4ec5\u4ec5\u4f1a\u6839\u636e\u5f53\u524d\u7684\u72b6\u6001\u8ba1\u7b97\u51fa\u4e0b\u4e00\u4e2a\u547d\u4ee4\uff0c\u5982\u679c\u6ca1\u6709\u53ef\u7528\u7684\u547d\u4ee4\uff0c\u5219Kubernetes\u5c31\u8fbe\u5230\u7a33\u6001\u4e86 \u5178\u578b\u7684Control loop\u7684\u6d41\u7a0b\u5982\u4e0b: 1 2 3 4 1. \u8bfb\u53d6\u8d44\u6e90\u7684\u72b6\u6001(\u66f4\u53ef\u53d6\u7684\u65b9\u5f0f\u662f\u901a\u8fc7\u4e8b\u4ef6\u9a71\u52a8\u7684\u65b9\u5f0f\u6765\u8bfb\u53d6) 2. \u6539\u53d8\u96c6\u7fa4\u4e2d\u5bf9\u8c61\u7684\u72b6\u6001\uff0c\u6bd4\u5982\u542f\u52a8\u4e00\u4e2aPOD\u3001\u521b\u5efa\u4e00\u4e2a\u7f51\u7edc\u7aef\u70b9\u3001\u67e5\u8be2\u4e00\u4e2acloud API\u7b49 3. \u901a\u8fc7API server\u6765\u66f4\u65b0Setp1\u4e2d\u7684\u8d44\u6e90\u72b6\u6001(Optimistic Concurrency)mak 4. \u5faa\u73af\u91cd\u590d\uff0c\u8fd4\u56de\u5230Setp1 Controller \u6838\u5fc3\u6570\u636e\u7ed3\u6784: 1. informers \u63d0\u4f9b\u4e00\u79cd\u6269\u5c55\u3001\u53ef\u6301\u7eed\u7684\u65b9\u5f0f\u6765\u67e5\u770b\u8d44\u6e90\u7684\u72b6\u6001\uff0c\u5e76\u5b9e\u73b0\u4e86resync\u673a\u5236(\u5f3a\u5236\u6267\u884c\u5b9a\u671f\u5bf9\u5e10\uff0c\u901a\u5e38\u7528\u4e8e\u786e\u4fdd\u7fa4\u96c6\u72b6\u6001\u548c\u7f13\u5b58\u5728\u5185\u5b58\u4e2d\u7684\u5047\u5b9a\u72b6\u6001\u4e0d\u4f1a\u6f02\u79fb) 2. Work queues \u7528\u4e8e\u5c06\u72b6\u6001\u53d8\u5316\u7684\u4e8b\u4ef6\u8fdb\u884c\u6392\u961f\u5904\u7406\uff0c\u4fbf\u4e8e\u53bb\u5b9e\u73b0\u91cd\u8bd5(\u53d1\u751f\u9519\u8bef\u7684\u65f6\u5019\uff0c\u91cd\u65b0\u6295\u5165\u5230\u961f\u5217\u4e2d) Events Kubernetes\u4e2d\u5927\u91cf\u4f7f\u7528\u4e8b\u4ef6\u548c\u4e00\u4e9b\u677e\u8026\u5408\u7684\u7ec4\u4ef6\u3002\u5176\u4ed6\u7684\u4e00\u4e9b\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e3b\u8981\u662fRPC\u6765\u89e6\u53d1\u884c\u4e3a\uff0c\u4f46\u662fKubernetes\u6ca1\u6709\u8fd9\u4e48\u505a\u3002 Kubernetes\u63a7\u5236\u5668\u901a\u8fc7\u76d1\u63a7Kubernetes\u5bf9\u8c61\u5728API server\u4e2d\u7684\u6539\u53d8(\u6dfb\u52a0\u3001\u5220\u9664\u3001\u66f4\u65b0)\u7b49\u3002\u5f53\u8fd9\u4e9b\u4e8b\u4ef6\u53d1\u751f\uff0cKubernetes\u63a7\u5236\u5668\u6267\u884c\u5bf9\u5e94\u7684\u4e1a\u52a1\u903b\u8f91\u3002 \u4e0b\u9762\u662f\u4e00\u4e2aPOD\u521b\u5efa\u7684\u8fc7\u7a0b: deployment\u63a7\u5236\u5668(\u5c5e\u4e8econtroller-manager\u7ec4\u4ef6)\u901a\u8fc7deployment informer\u53d1\u73b0\u4e86\u4e00\u4e2adeployment\u521b\u5efa\u7684\u4e8b\u4ef6\uff0c\u4e8e\u662f\u5f00\u59cb\u521b\u5efa\u4e00\u4e2areplica set replica set\u63a7\u5236\u5668(\u5c5e\u4e8econtroller-manager\u7ec4\u4ef6)\u901a\u8fc7replica set informer\u53d1\u73b0\u4e00\u4e2a\u65b0\u7684replica set\u521b\u5efa\uff0c\u4e8e\u662f\u5f00\u59cb\u521b\u5efa\u4e00\u4e2aPOD\u5bf9\u8c61 scheduler(\u5c5e\u4e8ekube-scheduler\u7ec4\u4ef6)\uff0c\u4ed6\u4e5f\u662f\u4e00\u4e2a\u63a7\u5236\u5668\uff0c\u901a\u8fc7pod informer\u53d1\u73b0\u4e86\u4e00\u4e2aPOD\u5bf9\u8c61\u7684\u521b\u5efa\uff0c\u5e76\u4e14spec.nodeName\u662f\u7a7a\uff0c\u4e8e\u662f\u5c31\u5c06\u5176\u653e\u5230\u4e86scheduling\u7684\u961f\u5217\u4e2d kubelet(\u4e5f\u662f\u4e00\u4e2a\u63a7\u5236\u5668)\u540c\u6837\u4e5f\u53d1\u73b0\u4e86\u4e00\u4e2a\u65b0\u7684POD\u5bf9\u8c61\u7684\u521b\u5efa\uff0c\u4f46\u662fspec.nodeName\u662f\u7a7a\uff0c\u548c\u81ea\u5df1\u7684node name\u5e76\u4e0d\u4e00\u81f4\uff0c\u56e0\u6b64\u5c31\u5ffd\u7565\u4e86\u8fd9\u4e2a\u4e8b\u4ef6\uff0c\u7ee7\u7eedsleep scheduler\u4ece\u961f\u5217\u4e2d\u83b7\u53d6\u4e00\u4e2aPOD\uff0c\u5e76\u66f4\u65b0spec.nodeName\u5b57\u6bb5\uff0c\u586b\u5165\u8981\u8c03\u5ea6\u5230\u7684nodeName\uff0c\u5199\u5165\u5230API server kubelect\u7ec4\u4ef6\u56e0\u4e3aPOD\u72b6\u6001\u53d1\u751f\u4e86\u6539\u53d8\u88ab\u5524\u9192\uff0c\u901a\u8fc7\u6bd4\u8f83spec.nodeName\u548c\u81ea\u5df1\u7684nodeName\uff0c\u5982\u679c\u5339\u914d\u5230\u4e86\uff0c\u5c31\u6839\u636ePOD\u5bf9\u8c61\u521b\u5efa\u5bf9\u5e94\u7684\u5bb9\u5668\u3002\u5e76\u6839\u636e\u5bb9\u5668\u5f15\u64ce\u7684\u6267\u884c\u60c5\u51b5\u6765\u66f4\u65b0POD\u72b6\u6001 replica set\u63a7\u5236\u5668\u53d1\u73b0POD\u53d8\u5316\u4e86\u989d\uff0c\u4f46\u662f\u4ec0\u4e48\u4e5f\u6ca1\u505a \u6700\u7ec8POD terminates\uff0ckubelet\u4f1a\u6536\u5230\u901a\u77e5\uff0c\u5e76\u83b7\u53d6POD\u5bf9\u8c61\uff0c\u66f4\u65b0\u5176\u72b6\u6001\u4e3aterminated\u3002 replica set\u63a7\u5236\u5668\u53d1\u73b0POD\u7684\u72b6\u6001\u4e3aterminated\uff0c\u4e8e\u662f\u5220\u9664POD\u5bf9\u8c61\uff0c\u91cd\u65b0\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 \u5230\u6b64\u7ed3\u675f \u901a\u8fc7\u4e0a\u9762POD\u521b\u5efa\u7684\u8fc7\u7a0b\u53ef\u4ee5\u770b\u51fa\uff0c\u6574\u4e2a\u8fc7\u7a0b\u4e2d\u6709\u5f88\u591a\u72ec\u7acb\u7684Controller\uff0c\u6bcf\u4e00\u4e2aController\u5c31\u662f\u4e00\u4e2acontrol loop\u3002 \u4ed6\u4eec\u4e4b\u95f4\u901a\u8fc7informer\u63a5\u6536\u5230\u4e8b\u4ef6\u6765\u89e6\u53d1\u5bf9\u5e94\u7684\u903b\u8f91\u3002\u8fd9\u4e9b\u4e8b\u4ef6\u662fAPI Server\u53d1\u9001\u7ed9informer\u7684\u3002informer\u5185\u90e8\u901a\u8fc7watche\u7684\u65b9\u5f0f\u5f97\u5230\u901a\u77e5\u3002 \u8fd9\u91cc\u8bf4\u7684Event\u4e8b\u4ef6\u548cKubernetes\u4e2d\u7684Event\u5bf9\u8c61\u662f\u4e24\u56de\u4e8b\uff0cEvent\u5bf9\u8c61\u4e3b\u8981\u662f\u7ed9\u7528\u6237\u63d0\u4f9b\u4e00\u79cdlogging\u673a\u5236\uff0c\u7528\u6237\u7f16\u5199\u7684Controller\u53ef\u4ee5\u521b\u5efaEvent\u5bf9\u8c61\u6765\u8bb0\u5f55\u4e00\u4e9b\u5185\u90e8\u4e8b\u4ef6 \u6bd4\u5982kubelet\u4f1a\u901a\u8fc7Event\u5bf9\u8c61\u66b4\u9732\u5185\u90e8\u7684\u751f\u547d\u5468\u671f\u4e8b\u4ef6\u3002\u8fd9\u4e9bEvent\u5bf9\u8c61\u53ef\u4ee5\u50cf\u5176\u4ed6\u7684kubernetes\u5bf9\u8c61(Pod\u3001Deployment\u7b49)\u4e00\u6837\u8fdb\u884c\u67e5\u8be2\u3002\u8fd9\u4e9b\u4e8b\u4ef6\u5bf9\u8c61\u9ed8\u8ba4\u53ea\u5b58\u653e 1\u4e2a\u5c0f\u65f6\u30021\u4e2a\u5c0f\u65f6\u5019\u540e\u4fbf\u4f1a\u4eceetcd\u4e2d\u5220\u9664\u3002 Level triger vs Edge triger Kubernetes\u4e2d\u5927\u91cf\u4f9d\u8d56\u4e8b\u4ef6\u6765\u89e3\u8026\u5404\u4e2a\u7ec4\u4ef6\uff0c\u4e8b\u4ef6\u7684\u9ad8\u6548\u901a\u77e5\u5bf9\u4e8eKubernetes\u6765\u8bf4\u81f3\u5173\u91cd\u8981\uff0c\u5178\u578b\u7684\u4e8c\u79cd\u5b9e\u73b0\u4e8b\u4ef6\u901a\u77e5\u7684\u673a\u5236\u5982\u4e0b: 1 2 3 4 5 * Edge-driven triggers At the point in time the state change occurs, a handler is triggered\u2014for example, from no pod to pod running. * Level-driven triggers The state is checked at regular intervals and if certain conditions are met (for example, pod running), then a handler is triggered. \u6c34\u5e73\u89e6\u53d1\u4e0d\u5177\u5907\u53ef\u6269\u5c55\u6027\uff0c\u672c\u8d28\u4e0a\u662fpolling\u3001polling\u7684\u95f4\u9694\u4f1a\u5f71\u54cdcontroller\u7684\u5b9e\u65f6\u6027\uff0c\u8fb9\u7f18\u89e6\u53d1\u66f4\u52a0\u9ad8\u6548\uff0c\u4f46\u662f\u5982\u679c\u67d0\u4e2aController\u5b58\u5728bug\u5c31\u4f1a\u5bfc\u81f4\u4e8b\u4ef6\u4e22\u5931\uff0c\u8fd9\u5bf9\u4e8e \u8fb9\u7f18\u89e6\u53d1\u6765\u8bf4\u662f\u65e0\u6cd5\u63a5\u53d7\u7684\uff0c\u800c\u6c34\u5e73\u89e6\u53d1\u5374\u4e0d\u4f1a\u5b58\u5728\u8fd9\u4e2a\u95ee\u9898\uff0c\u56e0\u4e3a\u603b\u662f\u80fd\u591f\u901a\u8fc7polling\u7684\u65b9\u5f0f\u83b7\u53d6\u5230\u6700\u7ec8\u7684\u72b6\u6001\u3002\u4e24\u8005\u7ed3\u5408\u4e00\u4e0b\uff0c\u4e8b\u4ef6\u901a\u8fc7\u8fb9\u7f18\u89e6\u53d1\u6765\u901a\u77e5\uff0c\u6bcf\u6b21\u6536\u5230\u4e8b\u4ef6\u540e\u901a\u8fc7pooling\u7684\u65b9\u5f0f \u83b7\u53d6\u5230\u8d44\u6e90\u7684\u6700\u7ec8\u72b6\u6001\uff0c\u90a3\u4e48\u5373\u4f7f\u4e2d\u95f4\u4e22\u5931\u4e86\u4e00\u4e2a\u4e8b\u4ef6\u4e5f\u65e0\u6240\u8c13\uff0c\u6bd4\u5982replica set\u63a7\u5236\u5668\u4e2d\uff0c\u9884\u671f\u8981\u521b\u5efa3\u4e2aPOD\uff0c\u56e0\u6b64\u6bcf\u6b21POD\u521b\u5efa\u90fd\u4f1a\u4ea7\u751f\u4e00\u4e2a\u4e8b\u4ef6\uff0creplica set\u901a\u8fc7\u4e8b\u4ef6\u5c31\u53ef\u4ee5\u77e5\u9053\u5f53\u524d\u72b6\u6001 \u548c\u9884\u671f\u7684\u72b6\u6001\u8fd8\u5dee\u591a\u5c11\uff0c\u7136\u540e\u7ee7\u7eed\u521b\u5efaPOD\uff0c\u5982\u679c\u56e0\u4e3a\u7f51\u7edc\u95ee\u9898\u5bfc\u81f4\u4e2d\u95f4\u4e22\u5931\u4e86\u4e00\u4e2a\u4e8b\u4ef6\uff0c\u90a3\u4e48\u8fd9\u5c31\u4f1a\u5bfc\u81f4\u521b\u5efa\u7684POD\u548c\u9884\u671f\u7684\u4e0d\u7b26\uff0c\u8fd9\u4e2a\u65f6\u5019\u5982\u679c\u7ed3\u5408\u6c34\u5e73\u89e6\u53d1\uff0c\u5728\u4e0b\u4e00\u6b21\u4e8b\u4ef6\u5230\u6765\u7684\u65f6\u5019\u4e3b\u52a8\u67e5\u4e00\u4e0b \u5f53\u524d\u7684\u72b6\u6001\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u907f\u514d\u4e86\u4e2d\u95f4\u4e8b\u4ef6\u4e22\u5931\u5bfc\u81f4\u72b6\u6001\u4e0d\u5bf9\u7684\u95ee\u9898\uff0c\u540c\u65f6\u4e5f\u501f\u52a9\u4e86\u8fb9\u7f18\u89e6\u53d1\u8fbe\u5230\u4e86\u9ad8\u6548\u7684\u4e8b\u4ef6\u901a\u77e5\u3002\u4f46\u662f\u8fd9\u6837\u4ecd\u7136\u5b58\u5728\u95ee\u9898\u3002\u5982\u679c\u6b63\u597d\u662f\u6700\u540e\u4e00\u4e2a\u4e8b\u4ef6\u4e22\u5931\u4e86\u5462? \u8fd9\u6837\u5c31\u6ca1\u6709\u673a\u4f1a\u53bb\u67e5\u8be2\u5f53\u524d \u72b6\u6001\u4e86\u3002\u5982\u679c\u80fd\u591f\u518d\u7ed3\u5408\u5b9a\u65f6\u67e5\u8be2\u5c31\u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u4e86\uff0c\u8fd9\u4e2a\u5b9a\u65f6\u67e5\u8be2\u5728Kubernetes\u4e2d\u79f0\u4e4b\u4e3aresync\u3002\u603b\u7ed3\u4e0b\uff0c\u6709\u4e09\u79cd\u4e8b\u4ef6\u901a\u77e5\u7b56\u7565\uff1a Edge driven trigger \u6ca1\u6709\u5904\u7406\u4e8b\u4ef6\u4e22\u5931\u7684\u95ee\u9898 Edge driven trigger + Level-driven triggers\uff0c\u603b\u662f\u53bb\u83b7\u53d6\u6700\u65b0\u7684\u72b6\u6001(\u5f53\u6709\u4e8b\u4ef6\u6765\u7684\u65f6\u5019)\uff0c\u56e0\u6b64\u5373\u4f7f\u4e22\u5931\u4e00\u4e2a\u4e8b\u4ef6\uff0c\u4ecd\u7136\u53ef\u4ee5\u901a\u8fc7\u83b7\u53d6\u6700\u65b0\u7684\u72b6\u6001\u6765\u8fdb\u884c\u4e1a\u52a1\u903b\u8f91 Edge driven trigger + Level-driven triggers + resync \u5982\u679c\u6700\u540e\u4e00\u4e2a\u4e8b\u4ef6\u4e22\u5931\u4e86\uff0c\u540e\u9762\u6ca1\u6709\u4e8b\u4ef6\u6765\u4e86\uff0c\u6240\u4ee5\u4e5f\u4e0d\u4f1a\u53bb\u89e6\u53d1(Level-driven triggers)\uff0c\u8fd9\u4e2a\u65f6\u5019\u9700\u8981\u501f\u52a9resync\u6765\u5f97\u5230\u6700\u65b0\u7684\u72b6\u6001\u3002 \u4e0a\u9762\u7684\u8fd9\u4e09\u79cd\u7b56\u7565\u5bf9\u5e94\u5982\u4e0b\u56fe: kubernetes\u5b9e\u73b0\u4e86\u4e0a\u9762\u7684\u7b2c\u4e09\u79cd\u7b56\u7565\uff0c\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u6765\u5b9e\u73b0\u9ad8\u6548\u7684\u4e8b\u4ef6\u901a\u77e5\uff0c\u5982\u679c\u4f60\u60f3\u77e5\u9053\u66f4\u591a\u5173\u4e8e\u6c34\u5e73\u89e6\u53d1\u4ee5\u53careconcile\u8bf7\u53c2\u8003 level-triggering-and-reconciliation-in-kubernetes Optimistic Concurrency \u5728Controller\u7684Control loop\u4e2d\u4f1a\u6539\u53d8\u96c6\u7fa4\u4e2d\u5bf9\u8c61\u7684\u72b6\u6001(\u6bd4\u5982\u521b\u5efa\u4e00\u4e2aPOD)\uff0c\u7136\u540e\u5c06\u7ed3\u679c\u5199\u5230\u8d44\u6e90\u4e2d\u7684status\u4e2d\u3002\u5b9e\u9645\u4e2dController\u901a\u5e38\u4f1a\u90e8\u7f72\u591a\u4e2a\uff0c\u56e0\u6b64\u8fd9\u91cc\u66f4\u65b0\u8d44\u6e90\u7684status\u5b57\u6bb5\u662f\u4f1a\u5b58\u5728\u5e76\u53d1\u5199\u7684\u3002 \u4e0b\u56fe\u4e2d\u63cf\u8ff0\u4e86\u4e00\u79cd\u89e3\u51b3\u65b9\u6848\uff1a \u8fd9\u4e2a\u89e3\u51b3\u65b9\u6848\u662f\u57fa\u4e8e\u5171\u4eab\u72b6\u6001\u6784\u5efa\u7684\u65b0\u7684\u5e76\u884c\u8c03\u5ea6\u5668\u4f53\u7cfb\u7ed3\u6784\uff0c\u4f7f\u7528\u65e0\u9501\u4e50\u89c2\u5e76\u53d1\u63a7\u5236\uff0c\u4ee5\u5b9e\u73b0\u53ef\u6269\u5c55\u6027\u548c\u6027\u80fd\u53ef\u4f38\u7f29\u6027\u3002\u8fd9\u79cd\u67b6\u6784\u6b63\u5728\u8c37\u6b4c\u7684\u4e0b\u4e00\u4ee3\u96c6\u7fa4\u7ba1\u7406\u7cfb\u7edfOmega\u4e2d\u4f7f\u7528 Kubernetes\u5927\u91cf\u53c2\u8003\u4e86Omega\u3002\u4e3a\u4e86\u505a\u4e86\u65e0\u9501\u5e76\u53d1\u5199\uff0cKubernetes\u4e5f\u91c7\u7528\u4e86\u4e50\u89c2\u5e76\u53d1\u3002\u8fd9\u610f\u5473\u7740\u5f53API Server\u63a2\u6d4b\u5230\u5e76\u53d1\u5199(\u901a\u8fc7resource version\u6765\u5224\u65ad)\uff0c \u5b83\u4f1a\u62d2\u7edd\u6389\u540e\u7eed\u7684\u5199\u64cd\u4f5c\u3002\u7136\u540e\u4ea4\u7531Controller\u81ea\u5df1\u6765\u5904\u7406\u5199\u5165\u51b2\u7a81\u7684\u95ee\u9898\u3002\u53ef\u4ee5\u7b80\u5355\u7684\u7528\u4e0b\u9762\u7684\u4ee3\u7801\u6765\u8868\u793a\u8fd9\u4e2a\u8fc7\u7a0b\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 var err error for retries := 0 ; retries < 10 ; retries ++ { foo , err = client . Get ( \"foo\" , metav1 . GetOptions {}) if err != nil { break } < update - the - world - and - foo > _ , err = client . Update ( foo ) // \u901a\u8fc7\u8d44\u6e90\u7248\u672c(ObjectMeta\u5b57\u6bb5\u4e2d\u7684resource version)\u6765\u5224\u65ad\u5f53\u524d\u662f\u5426\u6709\u4eba\u5728\u5199\u5165\uff0c\u662f\u5426\u4f1a\u4ea7\u751f\u5e76\u53d1\u5199\u7684\u51b2\u7a81 if err != nil && errors . IsConflict ( err ) { continue } else if err != nil { break } } \u4e50\u89c2\u5e76\u53d1\u5f88\u9002\u5408Kubernetest\u4e2dController\u7684Controll Loop\uff0cControll Loop\u4e2d\u7684\u6c34\u5e73\u89e6\u53d1\u603b\u662f\u83b7\u53d6\u5230\u6700\u65b0\u7684\u72b6\u6001\uff0c\u8fd9\u4e2a\u548c\u4e50\u89c2\u5e76\u53d1\u5728\u5931\u8d25\u540e\u603b\u662f\u57fa\u4e8e\u6700\u65b0\u72b6\u6001 \u518d\u6b21\u53d1\u751f\u5199\u5165\u7684\u601d\u60f3\u4e0d\u8c0b\u800c\u5408\u3002 \u5199\u51b2\u7a81\u9519\u8bef\u5728Controller\u4e2d\u662f\u5b8c\u5168\u6b63\u5e38\u7684\u3002\u6211\u4eec\u5e94\u8be5\u603b\u662f\u9884\u671f\u5b83\u4eec\u4f1a\u51fa\u73b0\uff0c\u5e76\u4f18\u96c5\u5730\u5904\u7406\u5b83\u4eec\u3002 client.Get\u8fd4\u56de\u7684\u5bf9\u8c61foo\uff0c\u5305\u542b\u4e86ObjectMeta\u5b57\u6bb5\uff0c\u8fd9\u4e2a\u5b57\u6bb5\u4e2d\u5305\u542b\u4e86resource version\uff0cAPI Server\u501f\u52a9\u8fd9\u4e2a\u5b57\u6bb5\u6765\u63a2\u6d4b\u5e76\u53d1\u5199\u3002 \u8fb9\u7f18\u89e6\u53d1 + \u6c34\u5e73\u89e6\u53d1 + resync + optimistic concurrency \u662fKubernetes \u4e8b\u4ef6\u9a71\u52a8\u67b6\u6784\u7684\u6838\u5fc3 Operators \u4e00\u4e2aSRE\u662f\u4e00\u4eba\uff0c\u4ed6\u6765\u64cd\u4f5c\u5176\u4ed6\u5f00\u53d1\u5de5\u7a0b\u5e08\u5199\u7684\u8f6f\u4ef6\uff0c\u8fd9\u4e2a\u8f6f\u4ef6\u662f\u5177\u6709\u9886\u57df\u77e5\u8bc6\u7684\uff0c\u56e0\u6b64\u8981\u8fd0\u7ef4\u9700\u8981\u638c\u63e1\u8fd9\u4e2a\u8f6f\u4ef6\u7684\u9886\u57df\u77e5\u8bc6\u624d\u80fd\u8fd0\u7ef4\u597d\u3002\u800c\u8fd9\u4e9b\u8fd0\u7ef4\u6240\u9700\u8981\u7684\u9886\u57df\u77e5\u8bc6\u79f0\u4e4b\u4e3aOperator\u3002 \u4e00\u4e2aOperator\u5c31\u662f\u4e00\u4e2a\u5177\u6709\u9886\u57df\u77e5\u8bc6\u7684\u7528\u4e8e\u8fd0\u7ef4\u7684controller\uff0c\u501f\u52a9\u4e86Kubernetes API\u8fdb\u884c\u6269\u5c55\u7684Controller\uff0c\u501f\u52a9\u8fd9\u4e2aController\u5c31\u53ef\u4ee5\u5b9e\u73b0\u7b80\u5355\u7684\u914d\u7f6e\u5c31\u8fbe\u5230\u8fd0\u7ef4\u590d\u6742\u7684\u5e26\u6709\u72b6\u6001\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\u6548\u679c\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u8fd9\u4e2aController\u901a\u8fc7\u4e00\u7ec4\u5177\u6709\u9886\u57df\u77e5\u8bc6\u7684schema\u7ec4\u6210\u7684crd\u6765\u5b9e\u73b0\u81ea\u52a8\u5316\u8fd0\u7ef4\u3002 *Reference extending-kubernetes-101 The Mechanics of Kubernetes A deep dive into Kubernetes controllers \u6df1\u5165\u6d45\u51faEvent Sourcing\u548cCQRS Events, the DNA of Kubernetes QoS, \"Node allocatable\" and the Kubernetes Scheduler level-triggering-and-reconciliation-in-kubernetes introducing-operators","title":"Chapter1. Introduction"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/book/KubernetesPrograming/#chapter2-kubernetes-api-basics","text":"API Server API Server\u5728Kubernetes\u4e2d\u662f\u4e00\u4e2a\u6838\u5fc3\u7ec4\u4ef6\uff0c\u96c6\u7fa4\u4e2d\u6240\u6709\u7684\u7ec4\u4ef6\u90fd\u662f\u901a\u8fc7API Server\u6765\u548c\u5e95\u5c42\u7684\u5206\u5e03\u5f0f\u5b58\u50a8etcd\u8fdb\u884c\u4ea4\u4e92\u7684\u3002API Server\u7684\u4e3b\u8981\u6307\u8d23\u6709\u51e0\u4e0b\u51e0\u70b9: \u6240\u6709\u7684\u7ec4\u4ef6\u901a\u8fc7API Server\u6765\u89e3\u8026\uff0c\u901a\u8fc7API Server\u6765\u4ea7\u751f\u4e8b\u4ef6\u548c\u6d88\u8d39\u4e8b\u4ef6\u3002 \u8d1f\u8d23\u5bf9\u8c61\u7684\u5b58\u50a8\u548c\u8bfb\u53d6\uff0cAPI Server\u6700\u7ec8\u8fd8\u4f1a\u548c\u5e95\u5c42\u7684etcd\u4ea4\u4e92\uff0c\u5c06Kubernetes\u4e2d\u7684\u5bf9\u8c61\u5b58\u50a8\u5728etcd\u4e2d\u3002 API Server\u8d1f\u8d23\u7ed9\u96c6\u7fa4\u5185\u90e8\u7684\u7ec4\u4ef6\u505a\u4ee3\u7406\uff0c\u4f8b\u5982\u5bf9Kubernetes dashboard\u3001strea logs\u3001service ports\u3001\u4ee5\u53cakubectl exec\u7b49 API Server\u63d0\u4f9b\u4e86\u7b26\u5408RESTful\u7c7b\u578b\u7684\u63a5\u53e3\uff0c\u4e3b\u8981\u662f\u7528\u4e8e\u5904\u7406HTTP\u8bf7\u6c42\u53bb\u67e5\u8be2\u548c\u64cd\u4f5cKubernetes\u7684\u8d44\u6e90\uff0c\u4e0d\u540c\u7684HTTP method\u6240\u4ee3\u8868\u7684\u8bed\u4e49\u4e0d\u540c: Get \u83b7\u53d6\u5230\u6307\u5b9a\u7c7b\u578b\u7684\u8d44\u6e90\uff0c\u6bd4\u5982POD\u3001\u6216\u8005\u662f\u83b7\u53d6\u4e00\u4e2a\u8d44\u6e90list\uff0c\u4f8b\u5982\u4e00\u4e2anamespace\u4e0b\u7684\u6240\u6709POD POST \u521b\u5efa\u4e00\u4e2a\u8d44\u6e90\uff0c\u6bd4\u5982service\u3001deployment\u7b49 PUT \u66f4\u65b0\u4e00\u4e2a\u5df2\u7ecf\u5b58\u5728\u7684\u8d44\u6e90\uff0c\u6bd4\u5982\u6539\u53d8\u4e00\u4e2aPOD\u4e2d\u7684\u5bb9\u5668\u955c\u50cf PATCH \u90e8\u5206\u66f4\u65b0\u5b58\u5728\u7684\u8d44\u6e90\uff0c\u66f4\u591a\u7ec6\u8282\u89c1: Use a JSON merge patch to update a Deployment DELETE \u9500\u6bc1\u4e00\u4e2a\u8d44\u6e90 kubectl -n THENAMESPACE get pods \u7b49\u540c\u4e8e HTTP GET /api/v1/namespaces/THENAMESPACE/pods\u7684\u7ed3\u679c\u3002 API Terminology Kind : \u8868\u793a\u5b9e\u4f53\u7684\u7c7b\u578b\uff0c\u6bcf\u4e00\u4e2a\u5bf9\u8c61\u90fd\u6709\u4e00\u4e2aKind\u5b57\u6bb5\uff0ckind\u4e3b\u8981\u6709\u4e09\u7c7b\u3002 1 2 3 1. \u8868\u793a\u4e00\u4e2a\u6301\u4e45\u5316\u7684\u5b9e\u4f53\u5bf9\u8c61\uff0c\u6bd4\u5982Pod\u3001Endpoints\u7b49 2. \u4e00\u4e2a\u6216\u591a\u4e2akind\u5b9e\u4f53\uff0c\u6bd4\u5982PodList\u3001NodeLists\u7b49 3. \u7279\u6b8a\u76ee\u7684\uff0c\u6bd4\u5982binding\u3001scale API Group : \u4e00\u5806Kind\u7684\u903b\u8f91\u4e0a\u6240\u5c5e\u96c6\u5408 Version : API group\u6216\u8005\u662f\u5bf9\u8c61\u7684\u7248\u672c\uff0c\u4e00\u4e2agroup\u6216\u5bf9\u8c61\u53ef\u4ee5\u5b58\u5728\u591a\u4e2a\u7248\u672c\u3002 Resource : \u901a\u5e38\u5c0f\u5199\u3001\u590d\u6570\u5f62\u5f0f(pods) \u7528\u6765\u8bc6\u522b\u4e00\u7cfb\u5217\u7684HTTP endpoints\u8def\u5f84\uff0c\u7528\u6765\u66b4\u9732\u5bf9\u8c61\u7684CRUD\u8bed\u4e49\uff0c\u4f8b\u5982: .../pods/nginx \u67e5\u770b\u540d\u4e3anginx\u7684pod \u6240\u6709\u7684Resource\u90fd\u662f\u5177\u6709CRUD\u8bed\u4e49\u7684\uff0c\u4f46\u662f\u4e5f\u5b58\u5728\u4e00\u4e9bResource\u53ef\u4ee5\u652f\u6301\u66f4\u591a\u7684action\uff0c\u6bd4\u5982 .../pod/nginx/port-forward \uff0c\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u79f0\u4e4b\u4e3a Subresources \u3002\u8fd9\u9700\u8981\u901a\u8fc7\u81ea\u5b9a\u4e49\u534f\u8bae\u6765\u66ff\u4ee3RESET\u3002\u4f8b\u5982exec\u662f\u901a\u8fc7 WebSockets \u6765\u5b9e\u73b0\u7684\u3002 \u5728Kubernetes\u4e2d\uff0c\u6bcf\u4e00\u4e2aKind\u662f\u76f4\u63a5\u6620\u5c04\u5230\u4e00\u4e2aGolang\u7c7b\u578b\u7684\u3002 Resources\u548cKind\u662f\u76f8\u4e92\u7684\uff0cResources\u6307\u5b9aHTTP endpoints\uff0c\u800cKind\u662f\u8fd9\u4e2aendpoints\u8fd4\u56de\u5bf9\u8c61\u7684\u7c7b\u578b\uff0c\u4e5f\u662fetcd\u4e2d\u6301\u4e45\u5316\u7684\u5bf9\u8c61\u3002 \u6bcf\u4e00\u4e2a\u5bf9\u8c61\u90fd\u53ef\u4ee5\u6309\u7167version v1\u6765\u8868\u793a\uff0c\u4e5f\u53ef\u4ee5\u6309\u7167v1beta1\u6765\u8868\u793a\uff0c\u53ef\u4ee5\u8fd4\u56de\u4e0d\u540c\u7684\u7248\u672c Resources \u662fAPI group\u548cversion\u7684\u4e00\u90e8\u5206\uff0c\u4e09\u8005\u88ab\u79f0\u4e4b\u4e3aGVR(GroupVersionResource)\uff0c\u4e00\u4e2a GVR \u552f\u4e00\u6807\u793a\u4e00\u4e2aHTTP path\u3002\u4f8b\u5982: /apis/batch/v1/namespaces/default/jobs \u901a\u8fc7 GVR \u53ef\u4ee5\u83b7\u53d6\u5230\u7c7b\u578b\u4e3akind\u7684\u5bf9\u8c61\uff0c\u540c\u7406\u8fd9\u4e2a\u5bf9\u8c61\u4e5f\u662f\u5c5e\u4e8e\u8fd9\u4e2aversion\u548cGroup\u7684\u3002\u56e0\u6b64\u79f0\u4e4b\u4e3a GVK (GroupVersionKind) \u6838\u5fc3\u7ec4zai /api/v1\uff0c\u547d\u540d\u7ec4zai /apis/$name/$version\uff0c\uff0c\u4e3a\u4ec0\u4e48\u6838\u5fc3\u7ec4\u4e0d\u662f/apis/core/v1\u5462? \u8fd9\u662f\u56e0\u4e3a\u5386\u53f2\u539f\u56e0\u5bfc\u81f4\u7684\uff0cAPI Group\u662f\u6838\u5fc3\u7ec4\u4e4b\u540e\u5f15\u5165\u7684\u3002 \u4f8b\u5982\u4e0b\u9762\u8fd9\u4e2ahttp paths\uff0c\u5c31\u53ef\u4ee5\u6620\u5c04\u5230\u4e00\u4e2a GVR \uff0c\u901a\u8fc7 GVR \u53ef\u4ee5\u83b7\u53d6\u5230\u7c7b\u578b\u4e3aKind\u7684\u5bf9\u8c61\uff0c\u4e5f\u5c31\u95f4\u63a5\u7684\u6620\u5c04\u5230\u4e86\u4e00\u4e2a GVK \u3002 GVK\u5230GVR\u7684\u6620\u5c04\u5728Kubernetes\u4e2d\u88ab\u79f0\u4e4b\u4e3a REST Mapping \u3002 \u9664\u4e86GVR\u63cf\u8ff0\u7684HTTP path\u5916\uff0c\u8fd8\u5b58\u5728\u53e6\u5916\u4e00\u79cd\u7c7b\u578b\u7684HTTP path\uff0c\u6bd4\u5982 /metrics \u3001 logs \u3001 healthz \u7b49 \u901a\u8fc7\u5728HTTP path\u540e\u9762\u6dfb\u52a0 ?watch=true \u5c31\u53ef\u4ee5watch\u5230\u8bf7\u6c42\u7684\u8d44\u6e90\uff0c\u5177\u4f53\u7ec6\u8282\u89c1: watch modus \u77e5\u9053\u4e86HTTP path\u5c31\u53ef\u4ee5\u901a\u8fc7curl\u8bbf\u95eeAPI Server\u83b7\u53d6\u5230\u8d44\u6e90\uff0c\u5e73\u65f6\u6211\u4eec\u901a\u8fc7kubectl\u547d\u4ee4\u83b7\u53d6\u8d44\u6e90\u7684\u65b9\u5f0f\u5185\u90e8\u5176\u5b9e\u4e5f\u662f\u901a\u8fc7\u8bbf\u95eeHTTP path\u7684\u65b9\u5f0f\u6765\u83b7\u53d6\u7684\uff0c\u4e0b\u9762\u5217\u4e3e\u4e86\u4e24\u79cd\u901a\u8fc7HTTP path\u83b7\u53d6\u8d44\u6e90\u7684\u65b9\u5f0f\u3002 1 2 3 4 5 6 kubectl proxy --port = 8080 curl http://127.0.0.1:8080/apis/batch/v1 \u6216 kubectl get --raw /apis/batch/v1 API Server\u5982\u4f55\u5904\u7406\u8bf7\u6c42 \u9996\u5148HTTP request\u4f1a\u88ab DefaultBuildHandlerChain \u6ce8\u518c\u7684filters chain\u6765\u5904\u7406(\u9274\u6743\u3001admission\u3001validation\u7b49) \u63a5\u7740\u6839\u636eHTTP path\u8d70\u5230\u5206\u53d1\u5668\uff0c\u901a\u8fc7\u5206\u53d1\u5668\u6765\u8def\u7531\u5230\u6700\u7ec8\u7684handler \u6bcf\u4e00\u4e2agvr\u90fd\u4f1a\u6ce8\u518c\u4e00\u4e2ahandler *Reference Use a JSON merge patch to update a Deployment watch modus","title":"Chapter2. Kubernetes API Basics"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/book/KubernetesPrograming/#chapter3-basics-of-client-go","text":"","title":"Chapter3. Basics of client-go"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/book/KubernetesPrograming/#client-goapiapimachinery","text":"client-go \u3001 api \u3001 apimachinery \u662fKubernetes client\u4e2d\u6700\u6838\u5fc3\u7684\u4e09\u4e2a\u4ed3\u5e93\u3002 client-go \u4ed3\u5e93\u662f\u7528\u6765\u8bbf\u95eekubernetes\u7684client\u7684\u63a5\u53e3\u3002 Pod\u3001Deployment\u7b49\u5bf9\u8c61\u5219\u662f\u653e\u5728 api \u7684\u4ed3\u5e93\u4e2d\uff0c\u4f8b\u5982Pod\u5bf9\u8c61\uff0c\u5b83\u5c5e\u4e8ecore group\uff0c\u5bf9\u4e8ev1\u7248\u672c\u6765\u8bf4\uff0c\u5b83\u7684\u4f4d\u7f6e\u5c31\u5728 api/core/v1 \u76ee\u5f55\u4e0b\u3002 Pod\u7684\u7c7b\u578b\u5b9a\u4e49\u5c31\u5728 types.go \u6587\u4ef6\u4e2d\u3002\u8fd9\u4e2a\u76ee\u5f55\u4e0b\u8fd8\u5305\u542b\u4e86\u4e00\u4e9b\u5176\u4ed6\u6587\u4ef6\uff0c\u90e8\u5206\u6587\u4ef6\u90fd\u662f\u901a\u8fc7\u4ee3\u7801\u751f\u6210\u5668\u81ea\u52a8\u751f\u6210\u7684\u3002 \u6700\u540e\u4e00\u4e2a\u4ed3\u5e93\u662f apimachinery \uff0c\u5305\u542b\u4e86\u6240\u6709\u901a\u7528\u7684\u7528\u6765\u6784\u5efa\u7c7b\u4f3cKubernetes\u98ce\u683cAPI\u7684\u6a21\u5757\u3002","title":"client-go\u3001api\u3001apimachinery\u4e09\u4e2a\u91cd\u8981\u7684\u4ed3\u5e93"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/book/KubernetesPrograming/#creating-and-using-a-client","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 package main import ( \"fmt\" \"os\" \"path/filepath\" \"time\" \"k8s.io/apimachinery/pkg/util/wait\" \"k8s.io/client-go/informers\" \"k8s.io/client-go/rest\" \"k8s.io/client-go/kubernetes\" \"k8s.io/client-go/tools/cache\" \"k8s.io/client-go/tools/clientcmd\" ) func main() { // \u5148\u4ece\u96c6\u7fa4Pod\u4e2d/var/run/secrets/kubernetes.io/serviceaccount\u83b7\u53d6\u5230service account\u8f6c\u6362\u4e3arest.Config config, err := rest.InClusterConfig() if err != nil { // \u83b7\u53d6service account\u5931\u8d25\uff0c\u76f4\u63a5\u53bb\u8bfb\u53d6kubeconfig\u6587\u4ef6 kubeconfig := filepath.Join(\"~\", \".kube\", \"config\") // \u6216\u8005\u662f\u4ece\u73af\u5883\u53d8\u91cf\u4e2d\u83b7\u53d6\u5230kubeconfig\u7684\u4f4d\u7f6e if envvar := os.Getenv(\"KUBECONFIG\"); len(envvar) > 0 { kubeconfig = envvar } // \u901a\u8fc7kubeconfig\u6587\u4ef6\u6784\u5efarest.Config config, err = clientcmd.BuildConfigFromFlags(\"\", kubeconfig) if err != nil { fmt.Printf(\"The kubeconfig cannot be loaded: %v\\n\", err) os.Exit(1) } // \u8fd4\u56de\u7684config\u53ef\u4ee5\u505a\u4e00\u4e9b\u81ea\u5b9a\u4e49\u64cd\u4f5c\uff0c\u6bd4\u5982\u81ea\u5b9a\u4e49UserAgent\u3001\u81ea\u5b9a\u4e49AcceptContentTypes\u3001\u8d85\u65f6\u5b9e\u9645\u3001\u9650\u6d41\u7b49 // config.UserAgent = fmt.Sprintf(\"Go %s\", runtime.GOOS); // config.AcceptContentTypes = \"application/vnd.kubernetes.protobuf,application/json\" } // \u7528reset.Config\u6784\u5efakubernetes client clientset, err := kubernetes.NewForConfig(config) // \u8bfb\u53d6book namespace\u4e0b\u7684\u540d\u4e3aexample\u7684Pod\u5bf9\u8c61 pod, err = \u201cclientset.CoreV1().Pods(\"book\").Get(\"example\", metav1.GetOptions{}) }","title":"Creating and Using a Client"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/book/KubernetesPrograming/#versioningcompatibillity","text":"Kubernetes API\u662f\u5e26\u6709\u7248\u672c\u7684\uff0c\u6bcf\u4e2a\u5bf9\u8c61\u90fd\u6709\u4e0d\u540c\u7684\u7248\u672c\uff0c\u6211\u4eec\u53ef\u4ee5\u5728api\u4ed3\u5e93\u4e2d\u7684 apps \u76ee\u5f55\u4e0b\u53ef\u4ee5\u770b\u5230\u5404\u4e2a\u7248\u672c\u7684\u5bf9\u8c61\u5b58\u5728\uff0c\u540c\u6837\u7684\uff0c\u5bf9\u4e8eclient-go\u6765\u8bf4\uff0c\u9488\u5bf9\u4e0d\u540c\u7684\u5bf9\u8c61\u4e5f\u5b58\u5728\u4e0d\u540c\u7684\u7248\u672c\u7684\u63a5\u53e3\u3002\u6211\u4eec\u53ef\u4ee5\u5728 client-go\u4ed3\u5e93\u4e0b\u7684 kubernestes/typed/apps \u76ee\u5f55\u4e0b\u627e\u5230\u5bf9\u5e94\u7248\u672c\u5bf9\u8c61\u7684\u63a5\u53e3\u3002Kubernestes\u548c client-go \u662f\u5171\u7528\u76f8\u540c\u7684api\u4ed3\u5e93\u7684\uff0c\u56e0\u6b64client-go\u7684\u7248\u672c\u9700\u8981\u548ckubernetes\u5177\u6709\u517c\u5bb9\u7684\u7248\u672c\u624d\u80fd\u53d1\u6325\u4f5c\u7528\uff0c \u5426\u5219Api Server\u4f1a\u62d2\u7edd\u6389 client-go \u53d1\u51fa\u6765\u7684\u8bf7\u6c42\u3002\u5982\u679cclient-go\u7684\u7248\u672c\u6bd4kubernertes\u7684\u8981\u65b0\uff0c\u90a3\u4e48\u5f53\u643a\u5e26\u67d0\u4e9b\u65b0\u589e\u5b57\u6bb5\u7684\u65f6\u5019\uff0ckubernetes\u53ef\u80fd\u4f1a\u62d2\u7edd\u6389\uff0c\u4e5f\u6709\u53ef\u80fd\u4f1a\u5ffd\u7565\u6389\uff0c\u8fd9\u4e2a\u8981\u770b\u5177\u4f53\u7684\u5b57\u6bb5\u7684\u884c\u4e3a\u3002 kubernetes\u4e3a\u4e86\u89e3\u51b3\u5bf9\u8c61\u7248\u672c\u517c\u5bb9\u95ee\u9898\uff0c\u5728\u5b9e\u9645\u5c06\u5bf9\u8c61\u5b58\u50a8\u5728etcd\u4e2d\u65f6\u4f1a\u6309\u7167\u4e00\u4e2a\u79f0\u4e4b\u4e3a\u5185\u90e8\u7248\u672c\u7684\u5bf9\u8c61\u5b58\u50a8\u8fdb\u53bb\uff0c\u4e0d\u540c\u7248\u672c\u7684API\u8bf7\u6c42\u8fc7\u6765\u7684\u65f6\u5019\uff0c\u901a\u8fc7\u9884\u5b9a\u4e49\u7684\u8f6c\u6362\u5668\u8fdb\u884c\u8f6c\u6362\u6765\u5b9e\u73b0\u7248\u672c\u4e4b\u95f4\u7684\u517c\u5bb9\u3002","title":"Versioning\u548cCompatibillity"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/book/KubernetesPrograming/#kubernetes-objects-in-go","text":"Kubernetes\u4e2d\u7684\u8d44\u6e90\uff0c\u51c6\u786e\u6765\u8bf4\u5bf9\u5e94\u5230Go\u4e2d\u5c31\u662f\u4e00\u4e2a\u5bf9\u8c61\uff0c\u8d44\u6e90\u7684\u7c7b\u578b\u5bf9\u5e94\u5230yaml\u4e2d\u7684Kind\u5b57\u6bb5\uff0c\u6bd4\u5982\u4e0b\u9762\u8fd9\u4e2aPod\u8d44\u6e90\u3002\u5176yaml\u4e2d\u7684Kind\u5b57\u6bb5\u5c31\u662fPod\u3002 \u5728Kubernetest\u4e2d\u4f1a\u901a\u8fc7\u4e00\u4e2a struct \u6765\u8868\u793a\u8fd9\u4e2aPod\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u53d1\u73b0\u7684Kubernetes\u4e2d\u6240\u6709\u7684\u8d44\u6e90\u90fd\u4f1a\u6709\u4e00\u4e9b\u516c\u5171\u7684\u5b57\u6bb5\uff0c\u6bd4\u5982apiVersion\u3001Kind\u3001metadata\u3001spec\u7b49\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 apiVersion : v1 kind : Pod metadata : name : pod-demo namespace : default labels : app : myapp tier : fronted spec : containers : - name : myapp image : ikubernetes/myapp:v1 - name : busybox image : busybox:latest command : - \"bin/sh\" - \"-c\" - \"echo $(date) >> /tmp/txt; sleep 5\" Kubernetes\u4e2d\u8d44\u6e90\u6240\u5bf9\u5e94\u7684\u5bf9\u8c61\u90fd\u9ed8\u8ba4\u5b9e\u73b0\u4e86 runtime.Object \u63a5\u53e3\uff0c\u8fd9\u4e2a\u63a5\u53e3\u5f88\u7b80\u5355\uff0c\u5b9a\u4e49\u5982\u4e0b\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 // Object interface must be supported by all API types registered with Scheme. Since objects in a scheme are // expected to be serialized to the wire, the interface an Object must provide to the Scheme allows // serializers to set the kind, version, and group the object is represented as. An Object may choose // to return a no-op ObjectKindAccessor in cases where it is not expected to be serialized. type Object interface { GetObjectKind() schema.ObjectKind DeepCopyObject() Object } // All objects that are serialized from a Scheme encode their type information. This interface is used // by serialization to set type information from the Scheme onto the serialized version of an object. // For objects that cannot be serialized or have unique requirements, this interface may be a no-op. type ObjectKind interface { // SetGroupVersionKind sets or clears the intended serialized kind of an object. Passing kind nil // should clear the current setting. SetGroupVersionKind(kind GroupVersionKind) // GroupVersionKind returns the stored group, version, and kind of an object, or nil if the object does // not expose or provide these fields. GroupVersionKind() GroupVersionKind } \u6bcf\u4e00\u4e2a\u5bf9\u8c61\u90fd\u8981\u6ee1\u8db3Object\u63a5\u53e3\u7684\u7ea6\u675f\uff0c\u53ef\u4ee5\u770b\u51fa\u901a\u8fc7\u8fd9\u4e9b\u63a5\u53e3\u53ef\u4ee5\u8bbe\u7f6e\u548c\u83b7\u53d6\u5bf9\u8c61\u7684GVK\uff0c\u4ee5\u53ca\u8fdb\u884c\u6df1\u5ea6\u62f7\u8d1d\u3002 \u6bcf\u4e00\u4e2aKubernetes\u5bf9\u8c61\u90fd\u4f1a\u5d4c\u5165\u4e00\u4e2a metav1.TypeMeta struct \u3002\u8fd8\u6709\u4e00\u4e2a metav1.ObjectMeta 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 // TypeMeta describes an individual object in an API response or request // with strings representing the type of the object and its API schema version. // Structures that are versioned or persisted should inline TypeMeta. // // +k8s:deepcopy-gen=false type TypeMeta struct { // Kind is a string value representing the REST resource this object represents. // Servers may infer this from the endpoint the client submits requests to. // Cannot be updated. // In CamelCase. // More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds // +optional Kind string `json:\"kind,omitempty\" protobuf:\"bytes,1,opt,name=kind\"` // APIVersion defines the versioned schema of this representation of an object. // Servers should convert recognized schemas to the latest internal value, and // may reject unrecognized values. // More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources // +optional APIVersion string `json:\"apiVersion,omitempty\" protobuf:\"bytes,2,opt,name=apiVersion\"` } type ObjectMeta struct { Name string `json:\"name,omitempty\"` Namespace string `json:\"namespace,omitempty\"` UID types.UID `json:\"uid,omitempty\"` ResourceVersion string `json:\"resourceVersion,omitempty\"` CreationTimestamp Time `json:\"creationTimestamp,omitempty\"` DeletionTimestamp *Time `json:\"deletionTimestamp,omitempty\"` Labels map[string]string `json:\"labels,omitempty\"` Annotations map[string]string `json:\"annotations,omitempty\"` ... } \u6bcf\u4e00\u4e2a\u5bf9\u8c61\u90fd\u4f1a\u5305\u542b\u4e00\u4e2a metav1.TypeMeta struct \u5b57\u6bb5\u548c\u4e00\u4e2a metav1.ObjectMeta \u5b57\u6bb5 \u524d\u8005\u7528\u6765\u63cf\u8ff0\u4e00\u4e2a\u5bf9\u8c61\uff0c\u6bd4\u5982\u662f\u4ec0\u4e48kind\uff0c\u4ec0\u4e48APIVersion\uff0c\u540e\u8005\u5219\u662f\u4e00\u4e9b\u5143\u4fe1\u606f\uff0c\u6bd4\u5982label\u3001\u6ce8\u89e3\u3001\u5176\u4e2dResourceVersion\u5c31\u662f\u7528\u6765\u5b9e\u73b0\u4e50\u89c2\u5e76\u53d1(optimistic-concurrency)\u7b49 \u4f8b\u5982\u4e00\u4e2aPOD\u5bf9\u8c61\u5982\u4e0b: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 // Pod is a collection of containers that can run on a host. This resource is created // by clients and scheduled onto hosts. type Pod struct { metav1.TypeMeta `json:\",inline\"` // Standard object's metadata. // More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata // +optional metav1.ObjectMeta `json:\"metadata,omitempty\" protobuf:\"bytes,1,opt,name=metadata\"` // Specification of the desired behavior of the pod. // More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status // +optional Spec PodSpec `json:\"spec,omitempty\" protobuf:\"bytes,2,opt,name=spec\"` // Most recently observed status of the pod. // This data may not be up to date. // Populated by the system. // Read-only. // More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status // +optional Status PodStatus `json:\"status,omitempty\" protobuf:\"bytes,3,opt,name=status\"` } \u6bcf\u4e00\u4e2a\u5bf9\u8c61\u90fd\u6709\u81ea\u5df1\u72ec\u7acb\u7684Spec\u548cStatus\uff0c\u901a\u5e38Spec\u8868\u793a\u7528\u6237\u7684\u671f\u671b\uff0cStatus\u5219\u662f\u671f\u671b\u7684\u7684\u7ed3\u679c\uff0c\u662fController\u548cOperator\u6765\u8d1f\u8d23\u586b\u5145\u3002\u4e5f\u5b58\u5728\u4e00\u4e9b\u5f02\u5e38\u60c5\u51b5\uff0c\u6bd4\u5982endpoints\u548cRBAC \u8bf7\u6c42\u5206\u4e3a\u957f\u8bf7\u6c42\u548c\u77ed\u8bf7\u6c42\uff0c\u5bf9\u4e8e\u957f\u8bf7\u6c42\u4e00\u822c\u6765\u8bf4\u662f\u8bf8\u5982watch\u3001\u4e00\u4e9bSubresources(exec\u3001sport-forward)\u7b49\uff0c\u5bf9\u4e8e\u77ed\u8bf7\u6c42\u5219\u4f1a\u670960s\u7684\u8d85\u65f6\u65f6\u95f4\uff0c\u5f53API server\u4e0b\u7ebf\u7684\u65f6\u5019\u4f1a\u7b49\u5f8560s\u76f4\u5230\u670d\u52a1\u5b8c\u8fd9\u4e9b\u77ed\u8bf7\u6c42 \u5bf9\u4e8e\u957f\u8bf7\u6c42\u5219\u76f4\u63a5\u65ad\u6389\u3002\u4ece\u800c\u5b9e\u73b0\u6240\u8c13\u7684\u4f18\u96c5\u5173\u95ed\u3002","title":"Kubernetes Objects in Go"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/book/KubernetesPrograming/#client-sets","text":"\u5728\u4e0a\u9762\u7684example\u4e2d\uff0c\u901a\u8fc7 kubernetes.NewForConfig(config) \u521b\u5efa\u4e86\u4e00\u4e2a Clientset \uff0c\u4e00\u4e2a Clientset \u662f\u53ef\u4ee5\u7528\u6765\u8bbf\u95ee\u591a\u4e2a API Group \u548c\u8d44\u6e90\u7684\u63a5\u53e3\uff0c\u5176\u5b9a\u4e49\u5982\u4e0b\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 // Clientset contains the clients for groups. Each group has exactly one // version included in a Clientset. type Clientset struct { * discovery . DiscoveryClient admissionregistrationV1 * admissionregistrationv1 . AdmissionregistrationV1Client admissionregistrationV1beta1 * admissionregistrationv1beta1 . AdmissionregistrationV1beta1Client appsV1 * appsv1 . AppsV1Client appsV1beta1 * appsv1beta1 . AppsV1beta1Client appsV1beta2 * appsv1beta2 . AppsV1beta2Client auditregistrationV1alpha1 * auditregistrationv1alpha1 . AuditregistrationV1alpha1Client authenticationV1 * authenticationv1 . AuthenticationV1Client authenticationV1beta1 * authenticationv1beta1 . AuthenticationV1beta1Client authorizationV1 * authorizationv1 . AuthorizationV1Client authorizationV1beta1 * authorizationv1beta1 . AuthorizationV1beta1Client autoscalingV1 * autoscalingv1 . AutoscalingV1Client autoscalingV2beta1 * autoscalingv2beta1 . AutoscalingV2beta1Client autoscalingV2beta2 * autoscalingv2beta2 . AutoscalingV2beta2Client batchV1 * batchv1 . BatchV1Client batchV1beta1 * batchv1beta1 . BatchV1beta1Client batchV2alpha1 * batchv2alpha1 . BatchV2alpha1Client certificatesV1beta1 * certificatesv1beta1 . CertificatesV1beta1Client coordinationV1beta1 * coordinationv1beta1 . CoordinationV1beta1Client coordinationV1 * coordinationv1 . CoordinationV1Client coreV1 * corev1 . CoreV1Client discoveryV1alpha1 * discoveryv1alpha1 . DiscoveryV1alpha1Client discoveryV1beta1 * discoveryv1beta1 . DiscoveryV1beta1Client eventsV1beta1 * eventsv1beta1 . EventsV1beta1Client extensionsV1beta1 * extensionsv1beta1 . ExtensionsV1beta1Client flowcontrolV1alpha1 * flowcontrolv1alpha1 . FlowcontrolV1alpha1Client networkingV1 * networkingv1 . NetworkingV1Client networkingV1beta1 * networkingv1beta1 . NetworkingV1beta1Client nodeV1alpha1 * nodev1alpha1 . NodeV1alpha1Client nodeV1beta1 * nodev1beta1 . NodeV1beta1Client policyV1beta1 * policyv1beta1 . PolicyV1beta1Client rbacV1 * rbacv1 . RbacV1Client rbacV1beta1 * rbacv1beta1 . RbacV1beta1Client rbacV1alpha1 * rbacv1alpha1 . RbacV1alpha1Client schedulingV1alpha1 * schedulingv1alpha1 . SchedulingV1alpha1Client schedulingV1beta1 * schedulingv1beta1 . SchedulingV1beta1Client schedulingV1 * schedulingv1 . SchedulingV1Client settingsV1alpha1 * settingsv1alpha1 . SettingsV1alpha1Client storageV1beta1 * storagev1beta1 . StorageV1beta1Client storageV1 * storagev1 . StorageV1Client storageV1alpha1 * storagev1alpha1 . StorageV1alpha1Client } \u6bd4\u5982\u901a\u8fc7 Clientset \u7684appsV1\u63a5\u53e3\uff0c\u5c31\u53ef\u4ee5\u8bbf\u95eeapps\u7ec4\uff0cv1 version\u4e0b\u7684\u6240\u6709\u8d44\u6e90\uff0c\u5728\u8fd9\u4e2a\u7ec4\u4e0b\u6709DaemonSet\u3001ControllerRevision\u3001Deployment\u3001ReplcaSets\u3001StatefulSet\u7b49\u8d44\u6e90\uff0cappsV1\u5b9a\u4e49\u5982\u4e0b: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 // DeploymentsGetter has a method to return a DeploymentInterface. // A group's client should implement this interface. type DeploymentsGetter interface { Deployments ( namespace string ) DeploymentInterface } type AppsV1Interface interface { RESTClient () rest . Interface ControllerRevisionsGetter DaemonSetsGetter DeploymentsGetter ReplicaSetsGetter StatefulSetsGetter } // AppsV1Client is used to interact with features provided by the apps group. type AppsV1Client struct { restClient rest . Interface } // DeploymentInterface has methods to work with Deployment resources. type DeploymentInterface interface { Create ( * v1 . Deployment ) ( * v1 . Deployment , error ) Update ( * v1 . Deployment ) ( * v1 . Deployment , error ) UpdateStatus ( * v1 . Deployment ) ( * v1 . Deployment , error ) Delete ( name string , options * metav1 . DeleteOptions ) error DeleteCollection ( options * metav1 . DeleteOptions , listOptions metav1 . ListOptions ) error Get ( name string , options metav1 . GetOptions ) ( * v1 . Deployment , error ) List ( opts metav1 . ListOptions ) ( * v1 . DeploymentList , error ) Watch ( opts metav1 . ListOptions ) ( watch . Interface , error ) Patch ( name string , pt types . PatchType , data [] byte , subresources ... string ) ( result * v1 . Deployment , err error ) GetScale ( deploymentName string , options metav1 . GetOptions ) ( * autoscalingv1 . Scale , error ) UpdateScale ( deploymentName string , scale * autoscalingv1 . Scale ) ( * autoscalingv1 . Scale , error ) DeploymentExpansion } // Get takes name of the deployment, and returns the corresponding deployment object, and an error if there is any. func ( c * deployments ) Get ( name string , options metav1 . GetOptions ) ( result * v1 . Deployment , err error ) { result = & v1 . Deployment {} err = c . client . Get (). Namespace ( c . ns ). Resource ( \"deployments\" ). Name ( name ). VersionedParams ( & options , scheme . ParameterCodec ). Do (). Into ( result ) return } AppsV1Client\u5b9e\u73b0\u4e86AppsV1Interface\u63a5\u53e3\uff0c\u901a\u8fc7\u8fd9\u4e2a\u63a5\u53e3\u53ef\u4ee5\u8bbf\u95ee\u8fd9\u4e2a\u7ec4\u4e0b\u7684\u6240\u6709\u8d44\u6e90\uff0c\u901a\u8fc7\u5176\u5b9a\u4e49\u53ef\u4ee5\u770b\u51fa\uff0c\u6700\u7ec8\u90fd\u662f\u901a\u8fc7rest\u63a5\u53e3\u6765\u8bbf\u95ee\u7684\u3002 \u6ce8\u610f\u89c2\u5bdf\u4f60\u4f1a\u53d1\u73b0\u4e0a\u9762\u7684\u63a5\u53e3\u4e2d\u90fd\u5e26\u6709\u4e00\u4e2aOptions\uff0c\u6bd4\u5982ListOptions\u3001DeleteOptions\u3001GetOptions\u7b49\uff0c\u901a\u8fc7\u8fd9\u4e9bOptions\u53ef\u4ee5\u81ea\u5b9a\u4e49\u4e00\u4e9b\u8fc7\u6ee4\u6761\u4ef6\uff0c\u6bd4\u5982ListOptions\u4e2d\u53ef\u4ee5\u6307\u5b9alabel selector\u8fdb\u884c\u8fc7\u6ee4\u3002 \u53e6\u5916\u4e0a\u9762\u7684\u63a5\u53e3\u4e2d\u8fd8\u6709\u4e00\u4e2aWatch\u63a5\u53e3\uff0c\u8fd9\u4e2a\u63a5\u53e3\u662f\u7528\u6765\u76d1\u542c\u5bf9\u8c61\u7684\u6240\u6709\u6539\u53d8(\u6dfb\u52a0\u3001\u5220\u9664\u3001\u66f4\u65b0)\uff0c\u8fd4\u56de\u7684watche.Interface\u5176\u5b9a\u4e49\u5982\u4e0b\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 // Interface can be implemented by anything that knows how to watch and report changes. type Interface interface { // Stops watching. Will close the channel returned by ResultChan(). Releases // any resources used by the watch. Stop () // Returns a chan which will receive all the events. If an error occurs // or Stop() is called, this channel will be closed, in which case the // watch should be completely cleaned up. ResultChan () <- chan Event } // EventType defines the possible types of events. type EventType string const ( Added EventType = \"ADDED\" Modified EventType = \"MODIFIED\" Deleted EventType = \"DELETED\" Bookmark EventType = \"BOOKMARK\" Error EventType = \"ERROR\" DefaultChanSize int32 = 100 ) // Event represents a single event to a watched resource. // +k8s:deepcopy-gen=true type Event struct { Type EventType // Object is: // * If Type is Added or Modified: the new state of the object. // * If Type is Deleted: the state of the object immediately before deletion. // * If Type is Bookmark: the object (instance of a type being watched) where // only ResourceVersion field is set. On successful restart of watch from a // bookmark resourceVersion, client is guaranteed to not get repeat event // nor miss any events. // * If Type is Error: *api.Status is recommended; other types may make sense // depending on context. Object runtime . Object } \u4e0d\u9f13\u52b1\u76f4\u63a5\u4f7f\u7528watch\u63a5\u53e3\uff0c\u5e94\u8be5\u4f7f\u7528\u5c01\u88c5\u597d\u7684Informes\u3002","title":"Client Sets"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/book/KubernetesPrograming/#informers-and-caching","text":"Informers\u901a\u8fc7watch\u63a5\u53e3\u5b9e\u73b0Cachae\u548c\u589e\u91cf\u66f4\u65b0\u3002\u5e76\u80fd\u591f\u5f88\u597d\u7684\u5904\u7406\u7f51\u7edc\u6296\u52a8\uff0c\u65ad\u7f51\u7b49\u573a\u666f\u3002\u5c3d\u53ef\u80fd\u7684\u6bcf\u4e00\u79cd\u8d44\u6e90\u7c7b\u578b\u53ea\u521b\u5efa\u4e00\u4e2aInformers\uff0c\u5426\u5219\u4f1a\u5bfc\u81f4\u8d44\u6e90\u7684\u6d6a\u8d39\uff0c\u4e3a\u6b64\u53ef\u4ee5\u901a\u8fc7 InformerFactory \u6765\u521b\u5efaInformer\u3002 \u4ed6\u5185\u90e8\u5bf9\u4e8e\u540c\u4e00\u4e2a\u8d44\u6e90\u7c7b\u578b\u53ea\u4f1a\u521b\u5efa\u4e00\u4e2ainformer\u5b9e\u4f8b\u3002 It is very important to remember that any object passed from the listers to the event handlers is owned by the informers. If you mutate it in any way, you risk introducing hard-to-debug cache coherency issues into your application. Always do a deep copy (see \u201cKubernetes Objects in Go\u201d) before changing an object. \u6211\u4eec\u5728informers\u7684event\u56de\u8c03\u4e2d\u5207\u8bb0\u4e0d\u8981\u4fee\u6539\u5bf9\u8c61\uff0c\u5426\u5219\u4f1a\u5bfc\u81f4\u5f88\u96be\u6392\u67e5\u7684\u7f13\u5b58\u4e00\u81f4\u6027\u95ee\u9898\uff0c\u5982\u679c\u8981\u4fee\u6539\u7684\u8bdd\uff0c\u8bf7\u5148\u6df1\u62f7\u8d1d\uff0c\u7136\u540e\u4fee\u6539\u3002 1 2 3 4 5 6 7 8 9 10 informerFactory := informers . NewSharedInformerFactory ( clientset , time . Second * 30 ) podInformer := informerFactory . Core (). V1 (). Pods () podInformer . Informer (). AddEventHandler ( cache . ResourceEventHandlerFuncs { AddFunc : func ( new interface {}) { fmt . Println ( \"Create a pod\" ) }, UpdateFunc : func ( old , new interface {}) { fmt . Println ( \"Update a pod\" ) }, DeleteFunc : func ( obj interface {}) { fmt . Println ( \"Delete a pod\" ) }, }) informerFactory . Start ( wait . NeverStop ) informerFactory . WaitForCacheSync ( wait . NeverStop ) pod , _ := podInformer . Lister (). Pods ( \"default\" ). Get ( \"details-v1-5974b67c8-n7vdw\" ) \u9ed8\u8ba4informer\u4f1a\u76d1\u542c\u6240\u6709namespace\u4e0b\u7684\u6307\u5b9a\u8d44\u6e90\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7 NewSharedInformerFactoryWithOptions \u6765\u8fdb\u884c\u8fc7\u6ee4 1 informerFactory := informers . NewSharedInformerFactoryWithOptions ( clientset , time . Second * 30 , informers . WithNamespace ( \"default\" ))","title":"Informers and Caching"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/book/KubernetesPrograming/#object-owner","text":"\u901a\u5e38\u6765\u8bf4\uff0c\u5728\u4fee\u6539\u4e00\u4e2a\u5bf9\u8c61\u4e4b\u524d\uff0c\u6211\u4eec\u603b\u662f\u4f1a\u95ee\u81ea\u5df1\uff0c\u8fd9\u4e2a\u5bf9\u8c61\u88ab\u8c01\u62e5\u6709\uff0c\u6216\u8005\u662f\u5728\u54ea\u4e2a\u6570\u636e\u7ed3\u6784\u4e2d? \u4e00\u822c\u6765\u6765\u8bf4\u539f\u5219\u5982\u4e0b: Informers and listers\u62e5\u6709\u4ed6\u4eec\u8fd4\u56de\u7684\u5bf9\u8c61\uff0c\u8981\u4fee\u6539\u8fd9\u4e2a\u5bf9\u8c61\u7684\u65f6\u5019\uff0c\u9700\u8981\u8fdb\u884c\u6df1\u62f7\u8d1d Clients\u8fd4\u56de\u7684\u65b0\u5bf9\u8c61\u8fd9\u4e2a\u5c5e\u4e8e\u8c03\u7528\u8005 Conversions\u8fd4\u56de\u7684\u5171\u4eab\u5bf9\u8c61\uff0c\u5982\u679c\u8c03\u7528\u8005\u62e5\u6709\u8f93\u5165\u7684\u5bf9\u8c61\uff0c\u90a3\u4e48\u5b83\u4e0d\u62e5\u6709\u8f93\u51fa\u7684\u5171\u4eab\u5bf9\u8c61\u3002","title":"Object Owner"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/book/KubernetesPrograming/#api-machinery-in-depth","text":"API Machinery\u4ed3\u5e93\u5b9e\u73b0\u4e86\u57fa\u672c\u7684Kubernetes\u7c7b\u578b\u7cfb\u7edf\uff0c\u4f46\u662f\u7c7b\u578b\u7cfb\u7edf\u662f\u4ec0\u4e48\u5462? \u7c7b\u578b\u8fd9\u4e2a\u672f\u8bed\u5e76\u4e0d\u5728API Machinery\u4ed3\u5e93\u4e2d\u5b58\u5728\u3002 \u5728API Machinery\u7c7b\u578b\u5bf9\u5e94\u5230\u7684\u662fKinds\u3002 Kinds \u5728kubernetes\u4e2d\uff0c\u6bcf\u4e00\u4e2aGVK\u5bf9\u5e94\u5230\u4e00\u4e2a\u5177\u4f53\u7684Go\u7c7b\u578b\uff0c\u76f8\u53cd\uff0c\u4e00\u4e2aGo\u7c7b\u578b\u53ef\u4ee5\u5bf9\u5e94\u5230\u591a\u4e2aGVK Kind\u5e76\u4e0d\u4f1a\u4e00\u5bf9\u4e00\u548cHTTP paths mapping\uff0c\u53ef\u80fd\u591a\u4e2akind\u5bf9\u5e94\u4e00\u4e2aHTTP path\uff0c\u4e5f\u6709\u53ef\u80fd\u4e00\u4e2a\u4e5f\u4e0d\u5bf9\u5e94\u3002 \u4f8b\u5982: admission.k8s.io/v1beta1.AdmissionReview\u4e0d\u5bf9\u5e94\u4efb\u4f55HTTP path \u4f8b\u5982: meta.k8s.io/v1.Status \u5bf9\u5e94\u5f88\u591aHTTP path \u6309\u7167\u7ea6\u5b9akind\u7684\u547d\u540d\u6309\u7167\u9a7c\u5cf0\u547d\u540d\uff0c\u5e76\u4e14\u4f7f\u7528\u5355\u6570\uff0c\u800c\u4e14\u5bf9\u4e8eCustomResourceDefinition\u7c7b\u578b\u7684\u8d44\u6e90\uff0c\u5176kind\u5fc5\u987b\u662f\u7b26\u5408DNS path label(REF 1035) Resources \u4ee3\u8868\u4e00\u7c7b\u8d44\u6e90\uff0c\u8fd9\u4e2a\u8d44\u6e90\u662f\u5c5e\u4e8e\u4e00\u4e2agroup\uff0c\u5e76\u4e14\u662f\u6709\u7248\u672c\u7684\uff0c\u6240\u4ee5\u5c31\u6709\u4e86GVR(GroupVersionResource)\uff0c\u6bcf\u4e00\u4e2aGVR\u90fd\u4f1a\u5bf9\u5e94\u5230\u4e00\u4e2aHTTP path\u3002 \u901a\u8fc7GVR\u6765\u5e94\u8bc6\u522b\u51fa\u4e00\u4e2aKubernetes\u7684 REST API endpoint\uff0c\u4f8b\u5982GVR apps/v1.deloyment\u4f1a\u6620\u5c04\u5230/apis/apps/v1/namespace/NAMESPACE/deployments \u5ba2\u6237\u7aef\u5c31\u662f\u901a\u8fc7\u8fd9\u79cd\u6620\u5c04\u5173\u7cfb\u6765\u6784\u5efaHTTP path\u7684\u3002 \u4e00\u4e2aGVR\u662f\u5426\u662fnamespaced\uff0c\u6216\u8005\u662f\u96c6\u7fa4\u7ea7\u522b\u7684\uff0c\u8fd9\u662f\u9700\u8981\u77e5\u9053\u7684\uff0c\u5426\u5219\u65e0\u6cd5\u6784\u5efaHTTP Path\uff0c\u6309\u7167\u7ea6\u5b9a\uff0c\u5c0f\u5199\uff0c\u5e76\u4e14\u662f\u590d\u6570\u7c7b\u578b\u7684kind\uff0c\u5e76\u4e14\u9075\u4eceDNS path label format \u90a3\u4e48\u8fd9\u4e2aGVR\u5bf9\u5e94\u7684\u5c31\u662f\u4e00\u4e2a\u96c6\u7fa4\u7ea7\u522b\u7684\u3002\u76f4\u63a5\u7528kind\u6765\u6620\u5c04\u5230HTTP path\u3002 \u4f8b\u5982: rbac.authorization.k8s.io/v1.clusterroles\uff0c\u6620\u5c04\u5230HTTP path\u5c31\u662fapis/rbac.authorization.k8s.io/v1/clusterroles.","title":"API Machinery in Depth"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/book/KubernetesPrograming/#scheme","text":"\u867d\u7136\u6bcf\u4e00\u4e2aObject\u90fd\u4f1a\u5305\u542b TypeMeta \uff0c\u91cc\u9762\u5305\u542b\u4e86Kind\u548cAPIVersion\u4f46\u662f\u5b9e\u9645\u4e0a\uff0c\u6211\u4eec\u53bb\u8bbf\u95ee\u7684\u65f6\u5019\uff0c\u5e76\u4e0d\u4f1a\u62ff\u5230\u5bf9\u5e94\u7684\u4fe1\u606f\uff0c\u8fd9\u4e9b\u4fe1\u606f\u90fd\u662f\u7a7a\u7684\uff0c\u76f8\u53cd\u6211\u4eec\u9700\u8981\u901a\u8fc7scheme\u6765\u83b7\u53d6\u5bf9\u8c61\u7684Kind 1 func ( s * Scheme ) ObjectKinds ( obj Object ) ([] schema . GroupVersionKind , bool , error ) \u901a\u8fc7Scheme\u6765\u8fde\u63a5GVK\u548cGolang\u7c7b\u578b\uff0cScheme\u5bf9\u4e24\u8005\u505a\u4e86\u6620\u5c04\uff0cScheme\u4f1a\u9884\u5148\u5bf9\u5927\u91cf\u5185\u7f6e\u7c7b\u578b\u505a\u6620\u5c04\u3002 1 scheme . AddKnownTypes ( schema . GroupVersionKind { \"\" , \"v1\" , \"Pod\" }, & Pod {}) \u6700\u7ec8\u4e00\u4e2aGolang\u7c7b\u578b\uff0c\u901a\u8fc7shceme\u6620\u5c04\u5230GVK\uff0c\u7136\u540eGVK\u901a\u8fc7RESTMapper\u6620\u5c04\u5230GVR\uff0c\u6700\u7ec8\u901a\u8fc7GVR\u62fc\u63a5\u51faHTTP path\u3002 1 2 3 4 5 6 7 8 9 10 11 12 // RESTMapping contains the information needed to deal with objects of a specific // resource and kind in a RESTful manner. type RESTMapping struct { // Resource is the GroupVersionResource (location) for this endpoint Resource schema.GroupVersionResource // GroupVersionKind is the GroupVersionKind (data format) to submit to this endpoint GroupVersionKind schema.GroupVersionKind // Scope contains the information needed to deal with REST Resources that are in a resource hierarchy Scope RESTScope }","title":"Scheme"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/book/KubernetesPrograming/#chapter4-using-custom-resources","text":"CRD\u672c\u8eab\u662f\u4e00\u4e2aKubernetes\u7684\u8d44\u6e90\uff0c\u5b83\u63cf\u8ff0\u4e86\u5728\u96c6\u7fa4\u4e2d\u53ef\u7528\u7684\u8d44\u6e90\uff0c\u5178\u578b\u7684\u4e00\u4e2aCRD\u5b9a\u4e49\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 apiVersion : apiextensions.k8s.io/v1beta1 kind : CustomResourceDefinition metadata : name : ats.cnat.programming-kubernetes.info spec : group : cnat.programming-kubernetes.info names : kind : At listKind : AtList plural : ats singular : at scope : Namespaced subresources : status : {} version : v1alpha1 versions : - name : v1alpha1 served : true storage : true \u6ce8\u610f\uff0c\u8fd9\u4e2aCRD\u7684\u540d\u5b57\u9700\u8981\u8d44\u6e90\u540d\u7684\u590d\u6570\u5f62\u5f0f\uff0c\u7136\u540e\u8ddf\u4e0aAPI group name\uff0c\u4e0a\u9762\u7684CRD\u4e2d\u8d44\u6e90\u540d\u4e3aat\uff0cAPI Group\u7684\u540d\u5b57\u5c31\u662f cnat.programming-kubernetes.info \u5b9a\u4e49\u5b8c\u8fd9\u4e2aCRD\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2aat\u8d44\u6e90\u4e86\u3002\u7136\u540e\u901a\u8fc7 kubectl get ats \u5c31\u53ef\u4ee5\u5217\u51fa\u6240\u6709\u521b\u5efa\u7684at\u8d44\u6e90\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 apiVersion : cnat.programming-kubernetes.info/v1alpha1 kind : At metadata : name : example-at spec : schedule : \"2020-12-02T00:30:00Z\" containers : - name : shell image : centos:7 command : - \"bin/bash\" - \"-c\" - echo \"Kubernetes native rocks!\" status : phase : \"pending\" kubectl\u662f\u5982\u4f55\u627e\u5230 ats \u8d44\u6e90\u5462? \u5982\u4f55\u627e\u5230\u81ea\u5b9a\u4e49\u8d44\u6e90 \u901a\u8fc7/apis\u8be2\u95eeApi server\u6240\u6709\u7684 API group \u901a\u8fc7/apis/group/version \u67e5\u770b\u6240\u6709\u7684group\u5b58\u5728\u7684\u8d44\u6e90\uff0c\u627e\u5230\u5bf9\u5e94\u8d44\u6e90\u6240\u5728\u7684Group\u3001VersionheResources","title":"Chapter4. Using Custom Resources"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/book/KubernetesPrograming/#subresources","text":"Subresources\u5c31\u662f\u4e00\u4e2a\u7279\u6b8a\u7684HTTP endpoints\uff0c\u4e00\u822c\u662f\u5728\u6b63\u5e38resource\u540e\u9762\u6dfb\u52a0\u7684\u4e00\u4e2a\u540e\u7f00\u6765\u8868\u793a\uff0c\u6bd4\u5982\uff0c\u5bf9\u4e8epod\u8d44\u6e90\u6765\u8bf4\uff0c\u6b63\u5e38\u7684HTTP Path\u662f /api/v1/namespace/namespace/pods/name \uff0c\u4ed6\u53ef\u4ee5\u6709\u591a\u4e2aSubresources\uff0c\u6bd4\u5982 /logs \u3001 /portforward \u3001 /exec \u3001 status \u3002 Subresources\u6240\u4f7f\u7528\u7684\u534f\u8bae\u662f\u548c\u4e3b\u8d44\u6e90\u4e0d\u4e00\u6837\u7684\uff0c\u76ee\u524d\u4e3a\u6b62\u81ea\u5b9a\u4e49\u8d44\u6e90\u652f\u6301/scale\u548c/status\u4e24\u79cd\u5b50\u8d44\u6e90\u3002 /status\u5b50\u8d44\u6e90\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u548c\u5c06spec\u548cstatus\u8fdb\u884c\u5206\u79bb\uff0c","title":"Subresources"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/book/KubernetesPrograming/#customresourcedefinition","text":"\u6bcf\u4e00\u4e2a\u81ea\u5b9a\u4e49\u8d44\u6e90\u90fd\u53ef\u4ee5\u6709subresourcs\uff0c\u9ed8\u8ba4\u652f\u6301scale\u3001status\u4e24\u7c7b\u5b50\u8d44\u6e90 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 KIND : CustomResourceDefinition VERSION : apiextensions.k8s.io/v1beta1 RESOURCE : subresources <Object> DESCRIPTION : Subresources describes the subresources for CustomResource Optional, the global subresources for all versions. Top-level and per-version subresources are mutually exclusive. CustomResourceSubresources defines the status and scale subresources for CustomResources. FIELDS : scale <Object> Scale denotes the scale subresource for CustomResources status <map[string]> Status denotes the status subresource for CustomResources \u81ea\u5b9a\u4e49\u8d44\u6e90\u53ef\u4ee5\u901a\u8fc7\u51e0\u79cd\u65b9\u5f0f\u6765\u8bbf\u95ee: \u4f7f\u7528client-go dynamic client(\u81ea\u5b9a\u4e49\u7c7b\u578b\u901a\u8fc7Unstructured\u6765\u8868\u793a) 1 2 3 4 5 6 7 schema.GroupVersionResource{ Group: \"apps\", Version: \"v1\", Resource: \"deployments\", } client, err := NewForConfig(cfg) client.Resource(gvr).Namespace(namespace).Get(\"foo\", metav1.GetOptions{}) \u8f93\u5165\u548c\u8f93\u51fa\u90fd\u662f unstructured.Unstructured \uff0c\u672c\u8d28\u4e0a\u662f\u4e00\u4e2a json.Unmarshal \u540e\u7684\u7ed3\u6784\uff0c\u7528\u6765\u4fdd\u5b58\u5bf9\u8c61\u3002 Object\u901a\u8fc7map[string]interface{}\u6765\u8868\u793a \u6570\u7ec4\u901a\u8fc7[]intreface{}\u6765\u6807\u5fd7 string\u3001bool\u3001float64\u3001int64\u662f\u57fa\u672c\u7c7b\u578b \u4f8b\u5982NestedString\u6765\u83b7\u53d6\u4e00\u4e2a\u5bf9\u8c61\u4e2d\u7684\u67d0\u4e2a\u5b57\u6bb5\uff0c\u5176\u5b9e\u5c31\u662f\u904d\u5386\u5bf9\u8c61map\uff0c\u627e\u5230\u5bf9\u5e94key\u7684value\uff0c\u7136\u540e\u505a\u7c7b\u578b\u65ad\u8a00\uff0c\u5982\u679c\u627e\u5230\u4e86\u5c31\u8fd4\u56de\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 type Unstructured struct { // Object is a JSON compatible map with string, float, int, bool, []interface{}, or // map[string]interface{} // children. Object map[string]interface{} } // NestedFieldNoCopy returns a reference to a nested field. // Returns false if value is not found and an error if unable // to traverse obj. func NestedFieldNoCopy(obj map[string]interface{}, fields ...string) (interface{}, bool, error) { var val interface{} = obj for i, field := range fields { if m, ok := val.(map[string]interface{}); ok { val, ok = m[field] if !ok { return nil, false, nil } } else { return nil, false, fmt.Errorf(\"%v accessor error: %v is of the type %T, expected map[string]interface{}\", jsonPath(fields[:i+1]), val, val) } } return val, true, nil } // NestedString returns the string value of a nested field. // Returns false if value is not found and an error if not a string. func NestedString(obj map[string]interface{}, fields ...string) (string, bool, error) { val, found, err := NestedFieldNoCopy(obj, fields...) if !found || err != nil { return \"\", found, err } s, ok := val.(string) if !ok { return \"\", false, fmt.Errorf(\"%v accessor error: %v is of the type %T, expected string\", jsonPath(fields), val, val) } return s, true, nil } \u4f7f\u7528typed client: kubernetes-sigs/controller-runtime \u548c kubebuilder \u901a\u8fc7client-gen\u6765\u751f\u6210 typed client\u4e0d\u4f7f\u7528\u7c7b\u4f3c\u4e8e map [string] interface {} \u7684\u901a\u7528\u6570\u636e\u7ed3\u6784\uff0c\u800c\u662f\u4f7f\u7528\u5b9e\u9645\u7684Golang\u7c7b\u578b\uff0c\u8fd9\u4e9b\u7c7b\u578b\u5bf9\u4e8e\u6bcf\u4e2aGVK\u90fd\u662f\u4e0d\u540c\u7684\u548c\u7279\u5b9a\u7684 \u901a\u8fc7 scheme.AddKnownTypes \u8fdb\u884c\u7c7b\u578b\u7684\u6ce8\u518c\uff0c\u672c\u8d28\u4e0a\u662f\u6784\u5efa\u4e86\u4e00\u4e2agvk\u5230\u5bf9\u5e94\u7c7b\u578b\u7684\u6620\u5c04\uff0c\u4ee5\u53catype\u5230gvk\u7684\u6620\u5c04\u8868\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 var ( // TODO: move SchemeBuilder with zz_generated.deepcopy.go to k8s.io/api. // localSchemeBuilder and AddToScheme will stay in k8s.io/kubernetes. SchemeBuilder = runtime.NewSchemeBuilder(addKnownTypes) localSchemeBuilder = &SchemeBuilder AddToScheme = localSchemeBuilder.AddToScheme ) // Adds the list of known types to the given scheme. func addKnownTypes(scheme *runtime.Scheme) error { scheme.AddKnownTypes(SchemeGroupVersion, &Deployment{}, &DeploymentList{}, &StatefulSet{}, &StatefulSetList{}, &DaemonSet{}, &DaemonSetList{}, &ReplicaSet{}, &ReplicaSetList{}, &ControllerRevision{}, &ControllerRevisionList{}, ) metav1.AddToGroupVersion(scheme, SchemeGroupVersion) return nil } // AddKnownTypes registers all types passed in 'types' as being members of version 'version'. // All objects passed to types should be pointers to structs. The name that go reports for // the struct becomes the \"kind\" field when encoding. Version may not be empty - use the // APIVersionInternal constant if you have a type that does not have a formal version. func (s *Scheme) AddKnownTypes(gv schema.GroupVersion, types ...Object) { s.addObservedVersion(gv) for _, obj := range types { t := reflect.TypeOf(obj) if t.Kind() != reflect.Ptr { panic(\"All types must be pointers to structs.\") } t = t.Elem() s.AddKnownTypeWithName(gv.WithKind(t.Name()), obj) } } // AddKnownTypeWithName is like AddKnownTypes, but it lets you specify what this type should // be encoded as. Useful for testing when you don't want to make multiple packages to define // your structs. Version may not be empty - use the APIVersionInternal constant if you have a // type that does not have a formal version. func (s *Scheme) AddKnownTypeWithName(gvk schema.GroupVersionKind, obj Object) { s.addObservedVersion(gvk.GroupVersion()) t := reflect.TypeOf(obj) if len(gvk.Version) == 0 { panic(fmt.Sprintf(\"version is required on all types: %s %v\", gvk, t)) } if t.Kind() != reflect.Ptr { panic(\"All types must be pointers to structs.\") } t = t.Elem() if t.Kind() != reflect.Struct { panic(\"All types must be pointers to structs.\") } if oldT, found := s.gvkToType[gvk]; found && oldT != t { panic(fmt.Sprintf(\"Double registration of different types for %v: old=%v.%v, new=%v.%v in scheme %q\", gvk, oldT.PkgPath(), oldT.Name(), t.PkgPath(), t.Name(), s.schemeName)) } s.gvkToType[gvk] = t for _, existingGvk := range s.typeToGVK[t] { if existingGvk == gvk { return } } s.typeToGVK[t] = append(s.typeToGVK[t], gvk) }","title":"CustomResourceDefinition"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/book/KubernetesPrograming/#automating-code-generation","text":"Golang\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u8bed\u8a00\uff0c\u7f3a\u4e4f\u7c7b\u4f3c\u4e8e\u5143\u7f16\u7a0b\u7684\u673a\u5236\u6765\u7ed9\u4e0d\u540c\u7684\u7c7b\u578b\u5b9e\u73b0\u7b97\u6cd5\uff0c\u56e0\u6b64go\u9009\u62e9\u4f7f\u7528\u4ee3\u7801\u751f\u6210\u7684\u65b9\u5f0f\u6765\u5b9e\u73b0\u3002 Kubernetest\u901a\u8fc7\u4ee3\u7801\u7ed9\u6bcf\u4e00\u7c7b\u8d44\u6e90\u751f\u6210\u4e00\u4e9b\u65b9\u6cd5\u3002\u4e3b\u8981\u6709\u56db\u79cd\u6807\u51c6\u7684\u4ee3\u7801\u751f\u6210\u3002 deepcopy-gen \u751f\u6210 func (t *T) DeepCopy() *T \u548c func (t* T)DeepCopyInto(*T) \u4e24\u4e2a\u65b9\u6cd5 client-gen \u521b\u5efa\u5e26\u7c7b\u578b\u7684client sets informer-gen lister-gen \u901a\u8fc7\u4e0a\u9762\u56db\u79cd\u4ee3\u7801\u751f\u6210\u5668\u53ef\u4ee5\u6784\u5efa\u4e00\u4e2a\u5f3a\u5927\u7684\u63a7\u5236\u5668\uff0c\u9664\u6b64\u4e4b\u5916\u8fd8\u6709 conversion-gen \u548c defaulter-gen \u4e24\u4e2a\u751f\u6210\u5668\u7ed9\u7f16\u5199 aggregated API server \u63d0\u4f9b\u4fbf\u5229\u3002 k8s.io/code-generator \u4ee3\u7801\u751f\u6210\u5668\u4ed3\u5e93\uff0c\u901a\u8fc7 generate-groups.sh \u6765\u89e6\u53d1\u4ee3\u7801\u751f\u6210\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 set -o pipefail # \u786e\u4fddk8s.io/code-generator\u5df2\u7ecf\u5728vendor\u4e2d\u4e86 SCRIPT_ROOT = $( dirname \" ${ BASH_SOURCE [0] } \" ) /.. CODEGEN_PKG = ${ CODEGEN_PKG :-$( cd \" ${ SCRIPT_ROOT } \" ; ls -d -1 ./vendor/k8s.io/code-generator 2 >/dev/null || echo ../code-generator ) } # generate the code with: # --output-base because this script should also be able to run inside the vendor dir of # k8s.io/kubernetes. The output-base is needed for the generators to output into the vendor dir # instead of the $GOPATH directly. For normal projects this can be dropped. # \u8c03\u7528k8s.io/code-generator\u4e2d\u7684generate-groups.sh\u811a\u672c\u5e76\u6307\u5b9a\u53c2\u6570 # 1. \u6307\u5b9a\u751f\u6210\u5668\u7684\u7c7b\u578b # 2. \u751f\u6210\u7684\u4ee3\u7801\u6240\u5c5e\u4e8e\u7684package name(client\u3001informer\u3001lister) # 3. API group\u7684package name # 4. \u8981\u751f\u6210\u7684 API group\u548cVersion\uff0c\u53ef\u4ee5\u6709\u591a\u4e2a\uff0cgroup:version\u683c\u5f0f\u3002 # --output-base \u5b9a\u4e8e\u751f\u6210\u7684\u4ee3\u7801\u7684\u57fa\u76ee\u5f55 # --go-header-file \u751f\u6210\u7684\u6587\u4ef6\u662f\u5426\u653e\u5165copyright\u5185\u5bb9 # deepcoy-gen\u751f\u6210\u5668\u662f\u76f4\u63a5\u5728API group package\u4e2d\u751f\u6210\u7684\u3002\u9ed8\u8ba4\u751f\u6210\u7684\u6587\u4ef6\u662fzz_generated\u524d\u7f00\u3002 bash \" ${ CODEGEN_PKG } \" /generate-groups.sh \"deepcopy,client,informer,lister\" \\ k8s.io/sample-controller/pkg/generated k8s.io/sample-controller/pkg/apis \\ samplecontroller:v1alpha1 \\ --output-base \" $( dirname \" ${ BASH_SOURCE [0] } \" ) /../../..\" \\ --go-header-file \" ${ SCRIPT_ROOT } \" /hack/boilerplate.go.txt # To use your own boilerplate text append: # --go-header-file \"${SCRIPT_ROOT}\"/hack/custom-boilerplate.go.txt \u8fd9\u4e9b\u751f\u6210\u5668\u5982\u4f55\u751f\u6210\u4ee3\u7801\u662f\u53ef\u4ee5\u901a\u8fc7\u547d\u4ee4\u884c\u53c2\u6570\u6765\u63a7\u5236\uff0c\u4e5f\u53ef\u4ee5\u7ec6\u7c92\u5ea6\u901a\u8fc7\u5728\u4ee3\u7801\u4e2d\u6253tag\u7684\u65b9\u5f0f\u6765\u63a7\u5236\uff0c\u4e3b\u8981\u6709\u4e24\u7c7btag global tags\uff0c\u901a\u5e38\u5728\u4e00\u4e2apakcage\u4e2d\u7684doc.go\u6587\u4ef6\u4e2d\u3002 1 2 +k8s:deepcopy-gen=package // \u7ed9\u6574\u4e2apakcgae\u4e2d\u7684\u7c7b\u578b\u90fd\u8fdb\u884cdeepcopy\u7c7b\u578b\u7684\u4ee3\u7801\u751f\u6210 +groupName=samplecontroller.k8s.io // \u6307\u5b9aAPI group name\u7684\u5168\u79f0\uff0c\u9ed8\u8ba4\u7528\u7684\u662fparent\u7684package name local tags\uff0c\u901a\u5e38\u5728\u4e00\u4e2astruct\u7c7b\u578b\u5b9a\u4e49\u4e0a\u3002 1 2 // +genclient // +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object // \u4e0d\u4ec5\u4ec5\u751f\u6210DeepCopy\u548cDeepCopyInto\u65b9\u6cd5\uff0c\u8fd8\u8981\u751f\u6210k8s.io/apimachinery/pkg/runtime.Object\u63a5\u53e3\u3002","title":"Automating Code Generation"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/book/KubernetesPrograming/#solutions-for-writing-operators","text":"","title":"Solutions for Writing OPerators"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/book/KubernetesPrograming/#controller","text":"ownerReference\uff0c\u4e00\u4e2a\u5c5e\u4e3b\u5177\u6709\u591a\u4e2a\u9644\u5c5e\u5bf9\u8c61\uff0c\u6bcf\u4e00\u4e2a\u9644\u5c5e\u5bf9\u8c61\u5177\u6709ownerReference\u6307\u5411\u5176\u5c5e\u4e3b\u5bf9\u8c61\u3002 \u6839\u636e\u8bbe\u8ba1\uff0ckubernetes \u4e0d\u5141\u8bb8\u8de8\u547d\u540d\u7a7a\u95f4\u6307\u5b9a\u5c5e\u4e3b\u3002\u8fd9\u610f\u5473\u7740\uff1a 1\uff09\u547d\u540d\u7a7a\u95f4\u8303\u56f4\u7684\u9644\u5c5e\u53ea\u80fd\u6307\u5b9a\u540c\u4e00\u7684\u547d\u540d\u7a7a\u95f4\u4e2d\u7684\u6216\u8005\u96c6\u7fa4\u8303\u56f4\u7684\u5c5e\u4e3b\u3002 2\uff09\u96c6\u7fa4\u8303\u56f4\u7684\u9644\u5c5e\u53ea\u80fd\u6307\u5b9a\u96c6\u7fa4\u8303\u56f4\u7684\u5c5e\u4e3b\uff0c\u4e0d\u80fd\u6307\u5b9a\u547d\u540d\u7a7a\u95f4\u8303\u56f4\u7684\u5c5e\u4e3b\u3002 \u5f53\u4f60\u5220\u9664\u5bf9\u8c61\u65f6\uff0c\u53ef\u4ee5\u6307\u5b9a\u8be5\u5bf9\u8c61\u7684\u9644\u5c5e\u662f\u5426\u4e5f\u81ea\u52a8\u5220\u9664\u3002 \u81ea\u52a8\u5220\u9664\u9644\u5c5e\u7684\u884c\u4e3a\u4e5f\u79f0\u4e3a \u7ea7\u8054\u5220\u9664\uff08Cascading Deletion\uff09\u3002 Kubernetes \u4e2d\u6709\u4e24\u79cd \u7ea7\u8054\u5220\u9664 \u6a21\u5f0f\uff1a\u540e\u53f0\uff08Background\uff09 \u6a21\u5f0f\u548c \u524d\u53f0\uff08Foreground\uff09 \u6a21\u5f0f\u3002\u8fd9\u4e2a\u5220\u9664\u7b56\u7565\u662f\u53ef\u4ee5\u901a\u8fc7 \u5c5e\u4e3b\u5bf9\u8c61\u7684 deleteOptions.propagationPolicy \u6765\u63a7\u5236\u7684\u3002 \u53ef\u80fd\u7684\u53d6\u503c\u5305\u62ec\uff1a Orphan \u3001 Foreground \u6216\u8005 Background \u3002 \u5728 \u540e\u53f0\u7ea7\u8054\u5220\u9664 \u6a21\u5f0f\u4e0b\uff0cKubernetes \u4f1a\u7acb\u5373\u5220\u9664\u5c5e\u4e3b\u5bf9\u8c61\uff0c\u4e4b\u540e\u5783\u573e\u6536\u96c6\u5668 \u4f1a\u5728\u540e\u53f0\u5220\u9664\u5176\u9644\u5c5e\u5bf9\u8c61\u3002 \u5728 \u524d\u53f0\u7ea7\u8054\u5220\u9664 \u6a21\u5f0f\u4e0b\uff0c\u6839\u5bf9\u8c61\u9996\u5148\u8fdb\u5165 deletion in progress \u72b6\u6001\u3002 \u5728 deletion in progress \u72b6\u6001\uff0c\u4f1a\u6709\u5982\u4e0b\u7684\u60c5\u51b5\uff1a \u5bf9\u8c61\u4ecd\u7136\u53ef\u4ee5\u901a\u8fc7 REST API \u53ef\u89c1\u3002 \u5bf9\u8c61\u7684 deletionTimestamp \u5b57\u6bb5\u88ab\u8bbe\u7f6e\u3002 \u5bf9\u8c61\u7684 metadata.finalizers \u5b57\u6bb5\u5305\u542b\u503c foregroundDeletion \u4e00\u65e6\u5bf9\u8c61\u88ab\u8bbe\u7f6e\u4e3a deletion in progress \u72b6\u6001\uff0c\u5783\u573e\u6536\u96c6\u5668\u4f1a\u5220\u9664\u5bf9\u8c61\u7684\u6240\u6709\u9644\u5c5e\u3002 \u5783\u573e\u6536\u96c6\u5668\u5728\u5220\u9664\u4e86\u6240\u6709\u6709\u963b\u585e\u80fd\u529b\u7684\u9644\u5c5e\uff08\u5bf9\u8c61\u7684 ownerReference.blockOwnerDeletion=true\uff09 \u4e4b\u540e\uff0c\u5220\u9664\u5c5e\u4e3b\u5bf9\u8c61\u3002 \u5982\u679c\u4e00\u4e2a\u5bf9\u8c61\u7684 ownerReferences \u5b57\u6bb5\u88ab\u4e00\u4e2a\u63a7\u5236\u5668\uff08\u4f8b\u5982 Deployment \u6216 ReplicaSet\uff09\u8bbe\u7f6e\uff0c blockOwnerDeletion \u4e5f\u4f1a\u88ab\u81ea\u52a8\u8bbe\u7f6e\uff0c\u4f60\u4e0d\u9700\u8981\u624b\u52a8\u4fee\u6539\u8fd9\u4e2a\u5b57\u6bb5\u3002 \u5982\u679c\u5220\u9664\u5bf9\u8c61\u65f6\uff0c\u4e0d\u81ea\u52a8\u5220\u9664\u5b83\u7684\u9644\u5c5e\uff0c\u8fd9\u4e9b\u9644\u5c5e\u88ab\u79f0\u4f5c \u5b64\u7acb\u5bf9\u8c61\uff08Orphaned\uff09 \u3002 \u9ed8\u8ba4\u662f\u7ea7\u8054\u5220\u9664\uff0c\u901a\u8fc7--cascade\u53ef\u4ee5\u63a7\u5236\u8fd9\u4e2a\u884c\u4e3a kubectl delete replicaset my-repset --cascade=false \u8fd9\u6837my-repset\u5176\u9644\u5c5e\u7ba1\u7406\u7684pod\u5bf9\u8c61\u5c31\u4e0d\u4f1a\u88ab\u5220\u9664\u4e86\u3002 \u4e0b\u9762\u7684\u4ee3\u7801\u5728\u521b\u5efa\u4e86Pod\u540e\uff0c\u5c06\u8fd9\u4e2apod\u8bbe\u7f6eController\u7684\u9644\u5c5e\u5bf9\u8c61 1 2 3 4 pod := newPodForCR(instance) // Set At instance as the owner and controller owner := metav1.NewControllerRef(instance, cnatv1alpha1.SchemeGroupVersion.WithKind(\"At\")) pod.ObjectMeta.OwnerReferences = append(pod.ObjectMeta.OwnerReferences, *owner) Create Controller 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 import ( \"flag\" \"os\" \"path/filepath\" \"time\" \"k8s.io/apimachinery/pkg/util/wait\" kubeinformers \"k8s.io/client-go/informers\" \"k8s.io/client-go/kubernetes\" \"k8s.io/client-go/rest\" \"k8s.io/client-go/tools/clientcmd\" \"k8s.io/klog\" clientset \"github.com/programming-kubernetes/cnat/cnat-client-go/pkg/generated/clientset/versioned\" informers \"github.com/programming-kubernetes/cnat/cnat-client-go/pkg/generated/informers/externalversions\" ) var ( masterURL string kubeconfig string ) func main() { flag.StringVar(&kubeconfig, \"kubeconfig\", defaultKubeconfig(), \"Path to a kubeconfig. Only required if out-of-cluster.\") flag.StringVar(&masterURL, \"master\", \"\", \"The address of the Kubernetes API server. Overrides any value in kubeconfig. Only required if out-of-cluster.\") klog.InitFlags(nil) flag.Parse() // \u5148\u63a2\u6d4b\u96c6\u7fa4\u5185\u7684\u914d\u7f6e\uff0c\u5982\u679c\u5b58\u5728\u5c31\u4f7f\u7528\u8fd9\u4e2a\u914d\u7f6e\u3002\u5426\u5219\u5c31\u4f7f\u7528\u9ed8\u8ba4\u7684kubeconfig. cfg, err := rest.InClusterConfig() if err != nil { cfg, err = clientcmd.BuildConfigFromFlags(masterURL, kubeconfig) if err != nil { klog.Fatalf(\"Error building kubeconfig: %s\", err.Error()) } } // \u901a\u8fc7\u914d\u7f6e\u6784\u5efakube client kubeClient, err := kubernetes.NewForConfig(cfg) if err != nil { klog.Fatalf(\"Error building kubernetes clientset: %s\", err.Error()) } // \u521b\u5efa\u81ea\u5b9a\u4e49\u8d44\u6e90\u7684client cnatClient, err := clientset.NewForConfig(cfg) if err != nil { klog.Fatalf(\"Error building cnat clientset: %s\", err.Error()) } // \u521b\u5efakubeInfomerFactory kubeInformerFactory := kubeinformers.NewSharedInformerFactory(kubeClient, time.Minute*10) // \u521b\u5efa\u81ea\u5b9a\u4e49\u8d44\u6e90\u7684InfomerFactory cnatInformerFactory := informers.NewSharedInformerFactory(cnatClient, time.Minute*10) // \u521b\u5efaController controller := NewController(kubeClient, cnatClient, cnatInformerFactory.Cnat().V1alpha1().Ats(), kubeInformerFactory.Core().V1().Pods()) // \u542f\u52a8infomer // notice that there is no need to run Start methods in a separate goroutine. (i.e. go kubeInformerFactory.Start(stopCh)) // Start method is non-blocking and runs all registered informers in a dedicated goroutine. kubeInformerFactory.Start(wait.NeverStop) cnatInformerFactory.Start(wait.NeverStop) if err = controller.Run(2, wait.NeverStop); err != nil { klog.Fatalf(\"Error running controller: %s\", err.Error()) } } func defaultKubeconfig() string { fname := os.Getenv(\"KUBECONFIG\") if fname != \"\" { return fname } home, err := os.UserHomeDir() if err != nil { klog.Warningf(\"failed to get home directory: %v\", err) return \"\" } return filepath.Join(home, \".kube\", \"config\") } Event broadcaster Event\u4e8b\u4ef6\u7ba1\u7406\u673a\u5236\u4e3b\u8981\u6709\u4e09\u90e8\u5206\u7ec4\u6210\uff1a 1 2 3 * EventRecorder\uff1a\u662f\u4e8b\u4ef6\u751f\u6210\u8005\uff0ck8s\u7ec4\u4ef6\u901a\u8fc7\u8c03\u7528\u5b83\u7684\u65b9\u6cd5\u6765\u751f\u6210\u4e8b\u4ef6\uff1b * EventBroadcaster\uff1a\u4e8b\u4ef6\u5e7f\u64ad\u5668\uff0c\u8d1f\u8d23\u6d88\u8d39EventRecorder\u4ea7\u751f\u7684\u4e8b\u4ef6\uff0c\u7136\u540e\u5206\u53d1\u7ed9broadcasterWatcher\uff1b * broadcasterWatcher\uff1a\u7528\u4e8e\u5b9a\u4e49\u4e8b\u4ef6\u7684\u5904\u7406\u65b9\u5f0f\uff0c\u5982\u4e0a\u62a5apiserver\uff1b 1 2 3 4 5 6 7 8 9 10 11 12 13 14 import utilruntime \"k8s.io/apimachinery/pkg/util/runtime\" // \u5c06\u81ea\u5b9a\u4e49\u8d44\u6e90\u7684scheme\u6dfb\u52a0\u5230kubernetes\u7684scheme\u4e2d\u7528\u4e8elogged events utilruntime.Must(cnatscheme.AddToScheme(scheme.Scheme)) klog.V(4).Info(\"Creating event broadcaster\") // \u521b\u5efa\u4e8b\u4ef6\u5e7f\u64ad\u5668 eventBroadcaster := record.NewBroadcaster() // \u5c06\u6536\u5230\u7684\u4e8b\u4ef6\u901a\u8fc7\u6307\u5b9a\u7684log\u51fd\u6570\u8bb0\u5f55 eventBroadcaster.StartLogging(klog.Infof) // \u5c06\u6536\u5230\u7684\u4e8b\u4ef6\u901a\u8fc7\u6307\u5b9a\u7684Event Sink\u5b58\u50a8\uff0c\u76f8\u5f53\u4e8e\u662fbroadcasterWatcher\uff0c\u8fd9\u91cc\u5c06\u6536\u5230\u7684\u4e8b\u4ef6\u521b\u5efa\u6210Events\u4e0a\u62a5\u7ed9API Server eventBroadcaster.StartRecordingToSink(&typedcorev1.EventSinkImpl{Interface: kubeClientset.CoreV1().Events(\"\")}) // \u521b\u5efa\u4e8b\u4ef6\u751f\u4ea7\u8005 recorder := eventBroadcaster.NewRecorder(scheme.Scheme, corev1.EventSource{Component: controllerAgentName}) // \u4ee3\u7801\u4e2d\u5c31\u53ef\u4ee5\u901a\u8fc7recorder\u6765\u8bb0\u5f55\u4e8b\u4ef6\u4e86 WorkQueue WorkQueue\u79f0\u4e3a\u5de5\u4f5c\u961f\u5217\uff0cKubernetes\u7684WorkQueue\u961f\u5217\u4e0e\u666e\u901aFIFO\uff08\u5148\u8fdb\u5148\u51fa\uff0cFirst-In, First-Out\uff09\u961f\u5217\u76f8\u6bd4\uff0c\u5b9e\u73b0\u7565\u663e\u590d\u6742\uff0c\u5b83\u7684\u4e3b\u8981\u529f\u80fd\u5728\u4e8e\u6807\u8bb0\u548c\u53bb\u91cd\uff0c\u5e76\u652f\u6301\u5982\u4e0b\u7279\u6027\u3002 1 2 3 4 5 6 7 8 * \u6709\u5e8f\uff1a\u6309\u7167\u6dfb\u52a0\u987a\u5e8f\u5904\u7406\u5143\u7d20\uff08item\uff09\u3002 * \u53bb\u91cd\uff1a\u76f8\u540c\u5143\u7d20\u5728\u540c\u4e00\u65f6\u95f4\u4e0d\u4f1a\u88ab\u91cd\u590d\u5904\u7406\uff0c\u4f8b\u5982\u4e00\u4e2a\u5143\u7d20\u5728\u5904\u7406\u4e4b\u524d\u88ab\u6dfb\u52a0\u4e86\u591a\u6b21\uff0c\u5b83\u53ea\u4f1a\u88ab\u5904\u7406\u4e00\u6b21\u3002 * \u5e76\u53d1\u6027\uff1a\u591a\u751f\u4ea7\u8005\u548c\u591a\u6d88\u8d39\u8005\u3002 * \u6807\u8bb0\u673a\u5236\uff1a\u652f\u6301\u6807\u8bb0\u529f\u80fd\uff0c\u6807\u8bb0\u4e00\u4e2a\u5143\u7d20\u662f\u5426\u88ab\u5904\u7406\uff0c\u4e5f\u5141\u8bb8\u5143\u7d20\u5728\u5904\u7406\u65f6\u91cd\u65b0\u6392\u961f\u3002 * \u901a\u77e5\u673a\u5236\uff1aShutDown\u65b9\u6cd5\u901a\u8fc7\u4fe1\u53f7\u91cf\u901a\u77e5\u961f\u5217\u4e0d\u518d\u63a5\u6536\u65b0\u7684\u5143\u7d20\uff0c\u5e76\u901a\u77e5metric goroutine\u9000\u51fa\u3002 * \u5ef6\u8fdf\uff1a\u652f\u6301\u5ef6\u8fdf\u961f\u5217\uff0c\u5ef6\u8fdf\u4e00\u6bb5\u65f6\u95f4\u540e\u518d\u5c06\u5143\u7d20\u5b58\u5165\u961f\u5217\u3002 * \u9650\u901f\uff1a\u652f\u6301\u9650\u901f\u961f\u5217\uff0c\u5143\u7d20\u5b58\u5165\u961f\u5217\u65f6\u8fdb\u884c\u901f\u7387\u9650\u5236\u3002\u9650\u5236\u4e00\u4e2a\u5143\u7d20\u88ab\u91cd\u65b0\u6392\u961f\uff08Reenqueued\uff09\u7684\u6b21\u6570\u3002 * Metric\uff1a\u652f\u6301metric\u76d1\u63a7\u6307\u6807\uff0c\u53ef\u7528\u4e8ePrometheus\u76d1\u63a7\u3002 WorkQueue\u652f\u63013\u79cd\u961f\u5217\uff0c\u5e76\u63d0\u4f9b\u4e863\u79cd\u63a5\u53e3\uff0c\u4e0d\u540c\u961f\u5217\u5b9e\u73b0\u53ef\u5e94\u5bf9\u4e0d\u540c\u7684\u4f7f\u7528\u573a\u666f\uff0c\u5206\u522b\u4ecb\u7ecd\u5982\u4e0b\u3002 1 2 3 * Interface\uff1aFIFO\u961f\u5217\u63a5\u53e3\uff0c\u5148\u8fdb\u5148\u51fa\u961f\u5217\uff0c\u5e76\u652f\u6301\u53bb\u91cd\u673a\u5236\u3002 * DelayingInterface\uff1a\u5ef6\u8fdf\u961f\u5217\u63a5\u53e3\uff0c\u57fa\u4e8eInterface\u63a5\u53e3\u5c01\u88c5\uff0c\u5ef6\u8fdf\u4e00\u6bb5\u65f6\u95f4\u540e\u518d\u5c06\u5143\u7d20\u5b58\u5165\u961f\u5217\u3002 * RateLimitingInterface\uff1a\u9650\u901f\u961f\u5217\u63a5\u53e3\uff0c\u57fa\u4e8eDelayingInterface\u63a5\u53e3\u5c01\u88c5\uff0c\u652f\u6301\u5143\u7d20\u5b58\u5165\u961f\u5217\u65f6\u8fdb\u884c\u901f\u7387\u9650\u5236\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 import \"k8s.io/client-go/util/workqueue\" // k8s.io/client-go/util/workqueue/queue.go type Interface interface { Add(item interface{}) Len() int Get() (item interface{}, shutdown bool) Done(item interface{}) ShutDown() ShuttingDown() bool } /* Add\uff1a\u7ed9\u961f\u5217\u6dfb\u52a0\u5143\u7d20\uff08item\uff09\uff0c\u53ef\u4ee5\u662f\u4efb\u610f\u7c7b\u578b\u5143\u7d20\u3002 Len\uff1a\u8fd4\u56de\u5f53\u524d\u961f\u5217\u7684\u957f\u5ea6\u3002 Get\uff1a\u83b7\u53d6\u961f\u5217\u5934\u90e8\u7684\u4e00\u4e2a\u5143\u7d20\u3002 Done\uff1a\u6807\u8bb0\u961f\u5217\u4e2d\u8be5\u5143\u7d20\u5df2\u88ab\u5904\u7406\u3002 ShutDown\uff1a\u5173\u95ed\u961f\u5217\u3002 ShuttingDown\uff1a\u67e5\u8be2\u961f\u5217\u662f\u5426\u6b63\u5728\u5173\u95ed\u3002 */ // k8s.io/client-go/util/workqueue/rate_limiting_queue.go // RateLimitingInterface is an interface that rate limits items being added to the queue. type RateLimitingInterface interface { DelayingInterface // AddRateLimited adds an item to the workqueue after the rate limiter says it's ok AddRateLimited(item interface{}) // Forget indicates that an item is finished being retried. Doesn't matter whether it's for perm failing // or for success, we'll stop the rate limiter from tracking it. This only clears the `rateLimiter`, you // still have to call `Done` on the queue. Forget(item interface{}) // NumRequeues returns back how many times the item was requeued NumRequeues(item interface{}) int } /* AddRateLimited: \u5c06\u5143\u7d20\u91cd\u65b0\u653e\u56de\u961f\u5217\u5e76\u8fdb\u884c\u9650\u901f Forget\uff1a\u91ca\u653e\u6307\u5b9a\u5143\u7d20\uff0c\u6e05\u7a7a\u8be5\u5143\u7d20\u7684\u6392\u961f\u6570\u3002 NumRequeues\uff1a\u83b7\u53d6\u6307\u5b9a\u5143\u7d20\u7684\u6392\u961f\u6570\u3002 */ Scheme 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 import \"k8s.io/apimachinery/pkg/runtime/schema\" import metav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\" // SchemeGroupVersion is group version used to register these objects var SchemeGroupVersion = schema.GroupVersion{Group: GroupName, Version: \"v1alpha1\"} // Adds the list of known types to Scheme. // AddKnownTypes\u65b9\u6cd5\u4e2d\u4f1a\u901a\u8fc7\u53cd\u5c04\u83b7\u53d6\u5230\u8d44\u6e90\u5bf9\u8c61\u7684\u540d\u5b57\uff0c\u7136\u540e\u548cGroupVersion\u7ec4\u5408\u6210GVK\uff0c\u6700\u540e\u7528GVK\u548c\u5bf9\u8c61\u5efa\u7acb\u6620\u5c04\u5173\u7cfb\u3002 func addKnownTypes(scheme *runtime.Scheme) error { scheme.AddKnownTypes(SchemeGroupVersion, &At{}, &AtList{}, ) // \u6784\u5efaScheme\u7ba1\u7406\u591aversion metav1.AddToGroupVersion(scheme, SchemeGroupVersion) return nil } func (s *Scheme) AddKnownTypes(gv schema.GroupVersion, types ...Object) { s.addObservedVersion(gv) for _, obj := range types { t := reflect.TypeOf(obj) if t.Kind() != reflect.Ptr { panic(\"All types must be pointers to structs.\") } t = t.Elem() s.AddKnownTypeWithName(gv.WithKind(t.Name()), obj) } } Finalizers Finalizers \u5b57\u6bb5\u5c5e\u4e8e Kubernetes GC \u5783\u573e\u6536\u96c6\u5668\uff0c\u662f\u4e00\u79cd\u5220\u9664\u62e6\u622a\u673a\u5236\uff0c\u80fd\u591f\u8ba9\u63a7\u5236\u5668\u5b9e\u73b0\u5f02\u6b65\u7684\u5220\u9664\u524d\uff08Pre-delete\uff09\u56de\u8c03\u3002 \u5176\u5b58\u5728\u4e8e\u4efb\u4f55\u4e00\u4e2a\u8d44\u6e90\u5bf9\u8c61\u7684 Meta \u4e2d\uff0c\u5728 k8s \u6e90\u7801\u4e2d\u58f0\u660e\u4e3a []string\uff0c\u8be5 Slice \u7684\u5185\u5bb9\u4e3a\u9700\u8981\u6267\u884c\u7684\u62e6\u622a\u5668\u540d\u79f0\u3002 The key point to note is that a finalizer causes \u201cdelete\u201d on the object to become an \u201cupdate\u201d to set deletion timestamp. finalizer\u4f1a\u5bfc\u81f4\u5bf9\u8c61\u7684\u5220\u9664\u53d8\u6210\u5bf9\u8c61\u7684deletion timestamp\u5b57\u6bb5\u7684\u66f4\u65b0\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 unc (r *CronJobReconciler) Reconcile(req ctrl.Request) (ctrl.Result, error) { ctx := context.Background() log := r.Log.WithValues(\"cronjob\", req.NamespacedName) var cronJob *batchv1.CronJob if err := r.Get(ctx, req.NamespacedName, cronJob); err != nil { log.Error(err, \"unable to fetch CronJob\") // we'll ignore not-found errors, since they can't be fixed by an immediate // requeue (we'll need to wait for a new notification), and we can get them // on deleted requests. return ctrl.Result{}, client.IgnoreNotFound(err) } // name of our custom finalizer myFinalizerName := \"storage.finalizers.tutorial.kubebuilder.io\" // examine DeletionTimestamp to determine if object is under deletion if cronJob.ObjectMeta.DeletionTimestamp.IsZero() { // The object is not being deleted, so if it does not have our finalizer, // then lets add the finalizer and update the object. This is equivalent // registering our finalizer. // \u6ce8\u518cfinalizer if !containsString(cronJob.ObjectMeta.Finalizers, myFinalizerName) { cronJob.ObjectMeta.Finalizers = append(cronJob.ObjectMeta.Finalizers, myFinalizerName) if err := r.Update(context.Background(), cronJob); err != nil { return ctrl.Result{}, err } } } else { // The object is being deleted if containsString(cronJob.ObjectMeta.Finalizers, myFinalizerName) { // our finalizer is present, so lets handle any external dependency if err := r.deleteExternalResources(cronJob); err != nil { // if fail to delete the external dependency here, return with error // so that it can be retried return ctrl.Result{}, err } // remove our finalizer from the list and update it. cronJob.ObjectMeta.Finalizers = removeString(cronJob.ObjectMeta.Finalizers, myFinalizerName) if err := r.Update(context.Background(), cronJob); err != nil { return ctrl.Result{}, err } } // Stop reconciliation as the item is being deleted return ctrl.Result{}, nil } // Your reconcile logic return ctrl.Result{}, nil } func (r *Reconciler) deleteExternalResources(cronJob *batch.CronJob) error { // // delete any external resources associated with the cronJob // // Ensure that delete implementation is idempotent and safe to invoke // multiple types for same object. } // Helper functions to check and remove string from a slice of strings. func containsString(slice []string, s string) bool { for _, item := range slice { if item == s { return true } } return false } func removeString(slice []string, s string) (result []string) { for _, item := range slice { if item == s { continue } result = append(result, item) } return } Ref: 1. https://kubernetes.io/zh/docs/concepts/workloads/controllers/garbage-collection/ 2. https://www.kubernetes.org.cn/6839.html 3. https://www.cnblogs.com/luozhiyun/p/13799901.html 4. https://xie.infoq.cn/article/63258ead84821bc3e276de1f7","title":"Controller\u7f16\u7a0b\u57fa\u7840"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/book/KubernetesPrograming/#kubebuilder","text":"Install 1 2 3 4 5 6 7 8 9 10 11 12 13 os = $( go env GOOS ) arch = $( go env GOARCH ) # download kubebuilder and extract it to tmp curl -L https://go.kubebuilder.io/dl/2.3.1/ ${ os } / ${ arch } | tar -xz -C /tmp/ # move to a long-term location and put it on your path # (you'll need to set the KUBEBUILDER_ASSETS env var if you put it somewhere else) sudo mv /tmp/kubebuilder_2.3.1_ ${ os } _ ${ arch } /usr/local/kubebuilder export PATH = $PATH :/usr/local/kubebuilder/bin # Also, you can install a master snapshot from https://go.kubebuilder.io/dl/latest/ ${ os } / ${ arch } . Create a Project 1 kubebuilder init --domain programming-kubernetes.info --license apache2 --owner \"Programming Kubernetes authors\u201d Create API 1 kubebuilder create api --group cnat --version v1alpha1 --kind At API Interface 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 // AtReconciler reconciles a At object type AtReconciler struct { client.Client Log logr.Logger Scheme *runtime.Scheme } // +kubebuilder:rbac:groups = cnat.programming-kubernetes.info,resources = ats,verbs = get ; list ; watch ; create ; update ; patch ; delete // +kubebuilder:rbac:groups = cnat.programming-kubernetes.info,resources = ats/status,verbs = get ; update ; patch // \u6838\u5fc3\u7684Reconciler\u63a5\u53e3\uff0c\u901a\u8fc7client.Client\u53ef\u4ee5\u8bbf\u95ee\u81ea\u5b9a\u4e49\u8d44\u6e90\u548ck8s\u57fa\u672c\u8d44\u6e90 func ( r *AtReconciler ) Reconcile ( req ctrl.Request ) ( ctrl.Result, error ) { _ = context.Background () _ = r.Log.WithValues ( \"at\" , req.NamespacedName ) // your logic here return ctrl.Result {} , nil }","title":"Kubebuilder"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/book/KubernetesPrograming/#operator-sdk","text":"\u7b49\u540c\u4e8ekubebuilder","title":"Operator-SDK"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/book/KubernetesPrograming/#shipping-controller-and-operator","text":"","title":"Shipping Controller and Operator"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/book/KubernetesPrograming/#packageing","text":"\u901a\u8fc7helm\u6765\u6e32\u67d3YAML\u6587\u4ef6\uff0c\u89e3\u51b3YAML\u6587\u4ef6\u53ea\u80fd\u662f\u9759\u6001\u7684\u95ee\u9898\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u52a8\u6001\u63a7\u5236YAML\u6587\u4ef6\u4e86\u3002 \u8fd8\u53ef\u4ee5\u901a\u8fc7kustomize never use the default service account in a namespace","title":"Packageing"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/book/KubernetesPrograming/#custom-api-server","text":"CRD\u7684\u4e00\u4e9b\u9650\u5236: \u9650\u5236\u53ea\u80fd\u4f7f\u7528etcd\u4f5c\u4e3a\u5b58\u50a8 \u4e0d\u652f\u6301protobuf\uff0c\u53ea\u80fd\u662fJSON \u53ea\u652f\u6301/status\u548c/scale\u4e24\u79cd\u5b50\u8d44\u6e90 \u4e0d\u652f\u6301graceful deletetion\u3001\u5c3d\u7ba1\u53ef\u4ee5\u901a\u8fc7Finalizer\u6765\u6a21\u62df\uff0c\u4f46\u662f\u4e0d\u652f\u6301\u6307\u5b9agraceful deletion time \u5bf9API Server\u7684\u8d1f\u8f7d\u5f71\u54cd\u6bd4\u8f83\u5927\uff0c\u56e0\u4e3a\u9700\u8981\u7528\u901a\u7528\u7684\u65b9\u5f0f\u6765\u5b9e\u73b0\u6240\u6709\u6b63\u5e38\u8d44\u6e90\u9700\u8981\u8d70\u7684\u903b\u8f91\u548c\u7b97\u6cd5 \u53ea\u80fd\u5b9e\u73b0CRUD\u57fa\u672c\u8bed\u4e49 \u4e0d\u652f\u6301\u540c\u7c7b\u8d44\u6e90\u7684\u5b58\u50a8\u5171\u4eab(\u6bd4\u5982\u4e0d\u540cAPI Group\u7684\u76f8\u540c\u8d44\u6e90\u5e95\u5c42\u4e0d\u652f\u6301\u4f7f\u7528\u76f8\u540c\u7684\u5b58\u50a8) \u76f8\u53cd\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684API Server\u6ca1\u6709\u4e0a\u9762\u7684\u9650\u5236\u3002 \u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u5b58\u50a8\uff0c\u4f8b\u5982metrics API Server\u53ef\u4ee5\u5b58\u50a8\u6570\u636e\u5728\u5185\u5b58\u4e2d \u53ef\u4ee5\u63d0\u4f9bprotobuf\u652f\u6301 \u53ef\u4ee5\u63d0\u4f9b\u4efb\u610f\u7684\u5b50\u8d44\u6e90 \u53ef\u4ee5\u5b9e\u73b0graceful deletion \u53ef\u4ee5\u5b9e\u73b0\u6240\u6709\u7684\u64cd\u4f5c \u53ef\u4ee5\u5b9e\u73b0\u81ea\u5b9a\u4e49\u8bed\u4e49\uff0c\u6bd4\u5982\u539f\u5b50\u7684\u5206\u914dip\uff0c\u5982\u679c\u4f7f\u7528webbook\u7684\u65b9\u5f0f\u53ef\u80fd\u4f1a\u56e0\u4e3a\u540e\u7eed\u7684pipeline\u5bfc\u81f4\u8bf7\u6c42\u5931\u8d25\uff0c\u8fd9\u4e2a\u65f6\u5019\u5206\u914d\u7684ip\u9700\u8981\u53d6\u6d88\uff0c\u4f46\u662fwebhook\u662f\u6ca1\u529e\u6cd5\u505a\u64a4\u9500\u7684\uff0c\u9700\u8981\u7ed3\u5408\u63a7\u5236\u5668\u6765\u5b8c\u6210\u3002\u8fd9\u5c31\u662f\u56e0\u4e3a webhook\u53ef\u80fd\u4f1a\u4ea7\u751f\u526f\u4f5c\u7528\u3002 \u53ef\u4ee5\u5bf9\u5e95\u5c42\u7c7b\u578b\u76f8\u540c\u7684\u8d44\u6e90\uff0c\u8fdb\u884c\u5171\u4eab\u5b58\u50a8\u3002 \u81ea\u5b9a\u4e49API Server\u5de5\u4f5c\u6d41\u7a0b: 1. K8s API server\u63a5\u6536\u5230\u8bf7\u6c42 2. \u8bf7\u6c42\u4f20\u9012\u4e86handler chanin\uff0c\u8fd9\u91cc\u9762\u5305\u542b\u4e86\u9274\u6743\u3001\u65e5\u5fd7\u5ba1\u8ba1\u7b49 3. \u8bf7\u6c42\u4f1a\u8d70\u5230kube-aggregator\u7ec4\u4ef6\uff0c\u8fd9\u4e2a\u7ec4\u4ef6\u77e5\u9053\u54ea\u4e9bAPI \u8bf7\u6c42\u662f\u9700\u8981\u8d70\u81ea\u5b9a\u4e49API Server\u7684\uff0c\u90a3\u4e9bGroup\u8d70API server\u8fd9\u662fAPI Service\u5b9a\u4e49\u7684 4. \u8f6c\u53d1\u8bf7\u6c42\u7ed9\u81ea\u5b9a\u4e49API Server \u81ea\u5b9a\u4e49API Server\u7684\u9274\u6743\u53ef\u4ee5delegated\u7ed9k8s\u7684 API Server\uff0c\u901a\u8fc7SubjectAccessReview\u6765\u5b9e\u73b0 1 // \u5b9a\u4e49\u54ea\u4e9bgroup\u3001version\u7684\u8d44\u6e90\u8981\u8d70\u81ea\u5b9a\u4e49Api Server 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 apiVersion : apiregistration.k8s.io/v1beta1 kind : APIService metadata : name : name spec : group : API-group-name version : API-group-version service : namespace : custom-API-server-service-namespace name : -API-server-service caBundle : base64-caBundle insecureSkipTLSVerify : bool // \u76f8\u540c\u7684group\u9ad8\u4f18\u5148\u7ea7\u8986\u76d6\u4f4e\u4f18\u5148\u7ea7 groupPriorityMinimum : 2000 // \u76f8\u540cgroup\u7684\u4e0d\u540cversion\u901a\u8fc7\u4f18\u5148\u7ea7\u6765\u9009\u62e9 versionPriority : 20 Every API server serves a number of resources and versions Some resources have multiple versions. To make multiple versions of a resource possible, the API server converts between versions. To avoid quadratic growth of necessary conversions between versions, API servers use an internal version when implementing the actual API logic. The internal version is also often called hub version because it is a kind of hub that every other version is converted to and from API Server\u5728\u5185\u90e8\u7ed9\u6bcf\u4e00\u4e2a\u8d44\u6e90\u90fd\u7ef4\u62a4\u4e86\u4e00\u4e2a\u5185\u90e8\u7248\u672c\uff0c\u6240\u6709\u7684\u7248\u672c\u90fd\u4f1a\u8f6c\u6362\u6210\u8fd9\u4e2a\u5185\u90e8\u7248\u672c\u518d\u53bb\u64cd\u4f5c\u3002 \u7528\u6237\u53d1\u9001\u6307\u5b9a\u7248\u672c\u7684\u8bf7\u6c42\u7ed9API server(\u6bd4\u5982v1) API server\u89e3\u7801\u8bf7\u6c42\uff0c\u7136\u540e\u8f6c\u6362\u4e3a\u5185\u90e8\u7248\u672c API server\u4f20\u9012\u5185\u90e8\u7248\u672c\u7ed9admission \u548c validation API server\u5728registry\u4e2d\u5b9e\u73b0\u7684\u903b\u8f91\u662f\u6839\u636e\u5185\u90e8\u7248\u672c\u6765\u5b9e\u73b0\u7684 etcd\u8bfb\u548c\u5199\u5e26\u6709\u7248\u672c\u7684\u5bf9\u8c61(\u4f8b\u5982v2\uff0c\u5b58\u50a8\u7248\u672c)\uff0c\u4ed6\u5c06\u4ece\u5185\u90e8\u7248\u672c\u8fdb\u884c\u8f6c\u6362\u3002 \u6700\u7ec8\u7ed3\u679c\u4f1a\u5c06\u8f6c\u6362\u4e3a\u8bf7\u6c42\u7684\u7248\u672c\uff0c\u6bd4\u5982\u8fd9\u91cc\u5c31\u662fv1 Default\u548cConversion\u9700\u8981\u7ed9\u5185\u90e8\u7248\u672c\u548c\u5916\u90e8\u7248\u672c\u63d0\u4f9bConversion\u65b9\u6cd5\u548c\u9ed8\u8ba4\u503c\u3002 This trick of using a pointer works for primitive types like strings. For maps and arrays, it is often hard to reach roundtrippability without identifying nil maps/arrays and empty maps/arrays. Most defaulters for maps and arrays in Kubernetes therefore apply the default in both cases, working around encoding and decoding bugs. \u5bf9\u4e8e\u57fa\u672c\u7c7b\u578b\u5982\u4f55\u533a\u5206\u9ed8\u8ba4\u7684\u96f6\u503c\u662f\u8bbe\u7f6e\u4e86\u8fd8\u662f\u6ca1\u6709\u8bbe\u7f6e\uff0c\u6bd4\u5982bool\u9ed8\u8ba4\u662ffalse\uff0c\u90a3\u7528\u6237\u5230\u5e95\u662f\u8bbe\u7f6e\u4e86false\u3001\u8fd8\u662f\u6ca1\u6709\u8bbe\u7f6e\u5bfc\u81f4\u9ed8\u8ba4\u503c\u7528\u4e86false\u5462? k8s\u901a\u8fc7\u6307\u9488\u6765\u89e3\u51b3\uff0c\u5982\u679c\u6709\u8bbe\u7f6e\u90a3\u4e48\u6307\u9488\u4e0d\u4e3a\u7a7a\uff0c\u5426\u5219\u5c31\u662f\u6ca1\u6709\u8bbe\u7f6e\u3002 TODO(tianqian.zyf): \u5b9e\u73b0\u4e00\u4e2aCustom API Server","title":"Custom API Server"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/book/KubernetesPrograming/#advanced-custom-resources","text":"versioning\u3001coversion\u3001admission controllers \u901a\u8fc7versioning\u673a\u5236\u53ef\u4ee5\u4fdd\u8bc1API\u7684\u6f14\u8fdb\uff0c\u540c\u65f6\u4e5f\u53ef\u4ee5\u5411\u540e\u517c\u5bb9\uff0cversiong\u673a\u5236\u7684\u6838\u5fc3\u5728\u4e8eConversion\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 apiVersion : apiextensions.k8s.io/v1beta1 kind : CustomResourceDefinition metadata : name : pizzas.restaurant.programming-kubernetes.info spec : group : restaurant.programming-kubernetes.info names : kind : Pizza listKind : PizzaList plural : pizzas singular : pizza scope : Namespaced version : v1alpha1 versions : // \u5b9a\u4e49v1alpha1\u4e3a\u5b58\u50a8\u7248\u672c\uff0c - name : v1alpha1 served : true storage : true schema : ... - name : v1beta1 served : true storage : false schema : ... The client (e.g., our kubectl get pizza margherita) requests a version. etcd has stored the object in some version. If the versions do not match, the storage object is sent to the webhook server for conversion. The webhook returns a response with the converted object. The converted object is sent back to the client. 1 2 3 4 5 type ConversionReview struct { metav1 . TypeMeta `json:\",inline\"` Request * ConversionRequest Response * ConversionResponse }","title":"Advanced Custom Resources"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/book/LuaPrograming/","text":"Lua Programing UserData \u901a\u8fc7lua\u7684UserData\u53ef\u4ee5\u5b58\u50a8C\u4e2d\u521b\u5efa\u7684\u81ea\u5b9a\u4e49\u7c7b\u578b\uff0c\u9996\u5148\u901a\u8fc7 lua_newuserdata \u521b\u5efa\u4e00\u5757\u5185\u5b58\uff0c\u7136\u540e\u7528\u81ea\u5b9a\u4e49\u7c7b\u578b\u7684\u6307\u9488\u6307\u5411\u8fd9\u5757\u5185\u5b58\uff0c \u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u5728C\u4e2d\u64cd\u4f5c\u81ea\u5b9a\u4e49\u7c7b\u578b\u4e86\u3002 upvalues \u5176\u4ed6 luaL_error 1 2 3 4 5 6 7 8 9 static int luaL_error ( lua_State * L , const char * fmt ,...){ va_list argp ; va_start ( argp , fmt ); luaL_where ( L , 1 ); lua_pushvfstring ( L , fmt , argp ); va_end ( argp ); lua_concat ( L , 2 ); return lua_error ( L ); } \u5f15\u7528 \u6211\u4eec\u6ca1\u529e\u6cd5\u4f7f\u7528C\u6307\u9488\u6765\u6307\u5411\u4e00\u4e2alua\u5bf9\u8c61\uff0c\u56e0\u6b64\u5982\u679c\u60f3\u5728C\u4ee3\u7801\u4e2d\u4f20\u9012lua\u5bf9\u8c61\u5c31\u53ea\u80fd\u4f7f\u7528lua\u7ed9\u6211\u4eec\u63d0\u4f9b\u7684\u5f15\u7528\u7cfb\u7edf\u3002\u56e0\u6b64\u5f53\u6211\u4eec\u5728C\u4ee3\u7801\u4e2d\u9700\u8981\u6307\u5411\u4e00\u4e2alua\u5bf9\u8c61\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u5148\u7ed9 \u8fd9\u4e2alua\u5bf9\u8c61\u521b\u5efa\u4e00\u4e2a\u5f15\u7528\uff0c\u7136\u540e\u5728C\u4ee3\u7801\u4e2d\u4fdd\u5b58\u8fd9\u4e2a\u5f15\u7528\u5c31\u53ef\u4ee5\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u901a\u8fc7\u4f20\u9012\u5f15\u7528\u7684\u65b9\u5f0f\u6765\u4ee3\u66ff\u4f20\u9012lua\u5bf9\u8c61\u3002lua\u4e2d\u7684\u5f15\u7528\u672c\u8d28\u4e0a\u5176\u5b9e\u5c31\u662f\u6ce8\u518c\u8868\u4e2d\u4ee5\u6570\u503c\u4e3akey\uff0c\u4ee5lua\u5bf9\u8c61 \u4e3avalue\u7684\u5b57\u6bb5\u3002 int luaL_ref (lua_State *L, int t); \u5728t\u6240\u5728table\u4e2d\uff0c\u521b\u5efa\u4e00\u4e2a\u5f15\u7528\uff0c\u5e76\u5c06\u6808\u9876\u7684\u5143\u7d20\u8fdb\u884c\u5f15\u7528\u5173\u8054\uff0c\u6700\u7ec8\u8fd4\u56de\u4e00\u4e2a\u552f\u4e00\u7684\u6570\u503c\u3002\u63a5\u4e0b\u6765\u901a\u8fc7\u8fd9\u4e2a\u6570\u503c\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7 lua_rawgeti \u83b7\u53d6\u5230\u5f15\u7528\u7684\u5bf9\u8c61\u4e86\u3002 1 2 3 4 5 // \u7ed9global\u5168\u5c40\u53d8\u91cf\u521b\u5efa\u5f15\u7528 lua_getglobal ( L , global ); int ref = luaL_ref ( L , LUA_REGISTRYINDEX ); // \u901a\u8fc7\u8fd9\u4e2a\u5f15\u7528\u8bbf\u95ee\u5168\u5c40\u53d8\u91cf lua_rawgeti ( L , LUA_REGISTRYINDEX , ref ); \u5168\u5c40\u53d8\u91cf\u548c\u73af\u5883 Lua5.3\u4e2d\u6ca1\u6709\u5168\u5c40\u53d8\u91cf\uff0c\u4f46\u662f\u4f1a\u901a\u8fc7\u5168\u5c40\u73af\u5883(global environment\uff0c\u4e00\u4e2a\u666e\u901a\u7684\u8868)\u6765\u8fdb\u884c\u6a21\u62df\uff0cLua\u52a0\u8f7d\u4ee3\u7801\u8fd0\u884c\u7684\u65f6\u5019\uff0c\u4f1a\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a_ENV\u7684upvale\uff0c\u8fd9\u662f\u4e00\u4e2a\u666e\u901a\u7684\u8868 \u662f\u5728Lua\u865a\u62df\u673a\u521d\u59cb\u5316\u7684\u65f6\u5019\u5c31\u88ab\u521b\u5efa\u4e86\uff0c\u91cc\u9762\u5305\u542b\u4e86\u5404\u79cd\u6807\u51c6\u5e93\u51fd\u6570\u3002\u5728\u6211\u4eec\u8bbf\u95ee\u5168\u5c40\u53d8\u91cf\u7684\u65f6\u5019, \u5b9e\u9645\u4e0a\u662f\u5728\u8bbf\u95ee\u4e0a\u503c _ENV \u4e2d\u7684\u952e\u503c\uff0clua\u7f16\u8bd1\u5668\u5728\u7f16\u8bd1\u7684\u65f6\u5019\uff0c\u5176\u5b9e\u5c31\u4f1a\u7ed9 \u6240\u6709\u7684\u5168\u5c40\u53d8\u91cf\u90fd\u4f1a\u88ab\u91cd\u5199\u6210\u5bf9_ENV\u8868\u7684\u5b57\u6bb5\u8bbf\u95ee\u3002G\u5176\u5b9e\u5c31\u662f_ENV\u4e2d\u7684\u4e00\u4e2a\u5b57\u6bb5\u3002_G\u5b9e\u9645\u6307\u5411\u4e86_ENV\u3002 1 2 3 4 print ( _ENV . _G == _ENV ) -- => Output: true print ( _G == _ENV ) -- => Output: true print ( _G . _G == _ENV ) -- => Output: true print ( _G . _G == _G ) -- => Output: true \u51fd\u6570 lua_call lua_pcall \u534f\u7a0b\u548c\u7ebf\u7a0b lua_State *lua_newthread (lua_State *L); \u521b\u5efa\u4e00\u4e2a\u7ebf\u7a0b\uff0c\u7136\u540e\u653e\u5230\u6808\u9876\uff0c\u5e76\u4e14\u8fd4\u56delua_State\u6765\u8868\u793a\u8fd9\u4e2a\u65b0\u7684\u7ebf\u7a0b\u3002\u8fd9\u4e2a\u8fd4\u56de\u7684\u65b0lua_State\u548c\u539f\u6765\u7684lua_State\u5171\u4eab\u6240\u6709\u7684\u5168\u5c40\u5bf9\u8c61\uff0c\u4f46\u662f\u6709\u81ea\u5df1\u72ec\u7acb\u7684\u6267\u884c\u6808\u3002 int lua_resume (lua_State *L, int narg); \u542f\u52a8\u6216\u8005\u6062\u590d\u6307\u5b9a\u534f\u7a0b\uff0c\u9700\u8981\u5c06\u8981\u8fd0\u884c\u7684funcion\u3001\u4ee5\u53ca\u53c2\u6570\u90fd\u653e\u5230\u5806\u6808\u4e2d\u3002\u5982\u679c\u8fd9\u4e2a\u534f\u7a0b\u8fd0\u884c\u7ed3\u675f\u6ca1\u6709\u4efb\u4f55\u9519\u8bef\u5c31\u8fd4\u56de0\uff0c\u5982\u679c\u8fd4\u56de\u7684\u662f LUA_YIELD ,\u8868\u660e\u534f\u7a0b\u505c\u6b62\u4e86\uff0c\u6b64\u65f6\u5806\u6808\u4e0a \u653e\u7740 Starts and resumes a coroutine in a given thread. To start a coroutine, you first create a new thread (see lua_newthread); then you push onto its stack the main function plus any arguments; then you call lua_resume, with narg being the number of arguments. This call returns when the coroutine suspends or finishes its execution. When it returns, the stack contains all values passed to lua_yield, or all values returned by the body function. lua_resume returns LUA_YIELD if the coroutine yields, 0 if the coroutine finishes its execution without errors, or an error code in case of errors (see lua_pcall). In case of errors, the stack is not unwound, so you can use the debug API over it. The error message is on the top of the stack. To restart a coroutine, you put on its stack only the values to be passed as results from yield, and then call lua_resume. lua_yeild \u57fa\u672c\u64cd\u4f5c lua_pushvfstring luaL_where lua_concat luaL_typename \u8868\u548c\u5143\u8868 registry \u662flua\u7684\u6ce8\u518c\u8868(\u662f\u4e00\u5f20\u53ea\u80fd\u88abC\u4ee3\u7801\u8bbf\u95ee\u7684\u5168\u5c40\u8868)\uff0c\u83b7\u53d6registry\u5c31\u548c\u83b7\u53d6\u666e\u901a\u7684\u8868\u4e00\u6837\uff0c\u53ef\u4ee5\u50cf\u64cd\u4f5c\u666e\u901a\u7684\u8868\u4e00\u6837\u6765\u64cd\u4f5cregistry\u8868\uff0c\u53ea\u4e0d\u8fc7\u8fd9\u4e2a\u8868\u7684\u9ed8\u8ba4\u5728\u6808\u4e2d\u7684\u4f4d\u7f6e\u662f LUA_REGISTRYINDEX (lua\u4e2d\u5b9a\u4e49\u4e86\u8fd9\u4e2a\u503c\u4e3a-10000)\uff0c\u8fd9\u4e2a\u4f4d\u7f6e\u5e76\u4e0d\u662f\u771f\u5b9e\u5b58\u5728\u7684\u6211\u4eec\u79f0\u4e4b\u4e3a\u4f2a\u7d22\u5f15\u3002\u901a\u8fc7\u8fd9\u4e2a\u4f2a\u7d22\u5f15\u5c31\u53ef\u4ee5\u83b7\u53d6\u5230registry\u8868\uff0c\u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u50cf\u64cd\u4f5c\u6b63\u5e38\u8868\u4e00\u6837\u7684\u65b9\u5f0f\u6765\u64cd\u4f5cregistry\u8868\u4e86\u3002\u6240\u6709\u7684C\u5e93\u4ee3\u7801\u90fd\u5171\u4eab \u540c\u4e00\u4e2aregistry\u8868\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u5c0f\u5fc3\u4f7f\u7528\u8fd9\u4e2a\u8868\uff0c\u907f\u514d\u51b2\u7a81\u3002 \u4e0d\u80fd\u7528 lua_remove \u548c lua_insert \u6765\u64cd\u4f5cregistry\u8868\uff0c\u56e0\u4e3aregistry\u5e76\u4e0d\u662f\u771f\u5b9e\u5b58\u5728\u4e8e\u5806\u6808\u4e2d\uff0c\u800c lua_remove \u548c lua_insert \u8981\u64cd\u4f5c\u771f\u5b9e\u5b58\u5728\u4e8e\u5806\u6808\u4e2d\u7684\u503c\u3002 registry\u6ce8\u518c\u8868\u4e2d\u4e0d\u80fd\u4f7f\u7528\u6570\u503c\u7c7b\u578b\u7684\u952e\uff0c\u56e0\u4e3alua\u8bed\u8a00\u5c06\u6570\u503c\u952e\u7528\u4f5c\u5f15\u7528\u7cfb\u7edf\u4e86\u3002 int luaL_newmetatable (lua_State *L, const char *tname) \u521b\u5efa\u4e00\u4e2a\u5143\u8868\uff0c\u5e76\u653e\u5230registry\u4e2d\uff0c\u5185\u90e8\u5176\u5b9e\u5c31\u662f\u901a\u8fc7 lua_newtable \uff0c\u521b\u5efa\u4e86\u4e00\u4e2a\u666e\u901a\u7684\u8868\uff0c\u7136\u540e\u901a\u8fc7 lua_setfield \u7ed9registry\u6ce8\u518c\u8868\u6dfb\u52a0\u4e86\u4e00\u4e2akey\u4e3atname\uff0cvalue\u4e3a\u7a7atable\u7684\u5b57\u6bb5\u3002 \u5e76\u5c06\u5176\u653e\u5728registry\u8868\uff0c\u800c\u666e\u901a\u7684\u8868\u662f\u653e\u5728global\u4e2d\u7684\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 -- luaL_newmetatable\u7684\u5b9e\u73b0 static int luaL_newmetatable ( lua_State * L , const char * tname ){ -- \u67e5\u8be2registry\u8868\u662f\u5426\u5b58\u5728\u5bf9\u5e94\u7684\u5b57\u6bb5 lua_getfield ( L ,( - 10000 ), tname ); if ( ! lua_isnil ( L , - 1 )) return 0 ; -- \u5982\u679c\u4e0d\u5b58\u5728\uff0c\u4f1a\u5728\u6808\u9876\u653e\u4e00\u4e2anil\u503c\uff0c\u56e0\u6b64\u8fd9\u91cc\u9700\u8981\u53bb\u6389\u6808\u9876 lua_pop ( L , 1 ); -- \u521b\u5efa\u4e00\u4e2a\u666e\u901a\u7684\u8868\uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u8868\u518d\u6b21\u653e\u5230\u6808\u9876\u4e0a\uff0c\u56e0\u4e3alua_setfield\u4f1a\u6d88\u8017\u6808\u9876\uff0c\u6700\u540e\u8fd4\u56de\u7684\u65f6\u5019\u9700\u8981\u628a -- \u8fd9\u4e2atable\u653e\u5728\u6808\u9876\u4e0a\uff0c\u56e0\u6b64\u8fd9\u91cc\u628atable\u518d\u6b21\u653e\u5230\u6808\u9876\u4e0a\u4e86\uff0c\u76f8\u5f53\u4e8e\u6808\u76841\u30012\u4e24\u4e2a\u4f4d\u7f6e\u90fd\u662f\u8fd9\u4e2atable lua_newtable ( L ); lua_pushvalue ( L , - 1 ); -- \u8bbe\u7f6e\u6ce8\u518c\u8868key\u4e3atname\uff0cvalue\u4e3a\u521a\u521b\u5efa\u7684\u7a7atable lua_setfield ( L ,( - 10000 ), tname ); return 1 ; } void lua_gettable (lua_State *L, int index) \u9996\u5148\u4eceindex\u5904\u83b7\u53d6\u5230table\uff0c\u7136\u540e\u7528\u6808\u9876\u7684\u503c\u4f5c\u4e3a\u8868\u7684key\u6765\u83b7\u53d6\u5176value\uff0c\u6700\u540e\u5c06\u83b7\u53d6\u5230\u7684value\u653e\u5230\u6808\u9876\u4e0a\u3002 1 2 3 4 5 6 // \u8981\u67e5\u8be2\u7684 key\u653e\u5165\u6808\u4e2d lua_pushstring ( L , key ); /* push key */ // - 2 index\u6240\u5728\u4f4d\u7f6e\u5b58\u653e\u4e86table lua_gettable ( L , - 2 ); /* get background [ key ] */ // \u4ece\u6808\u9876\u4e0a\u83b7\u53d6\u5230 table\u4e2d\u6307\u5b9akey\u7684\u503c result = ( int )( lua_tonumberx ( L , - 1 , & isnum ) * MAX_COLOR ); void lua_setfield (lua_State *L, int index, const char *k) \u901a\u8fc7index\u627e\u5230table\uff0c\u7136\u540e\u7ed9\u8fd9\u4e2atable\u8bbe\u7f6ekey\u4e3ak\uff0cvalue\u4e3a\u6808\u9876\u503c\u3002 1 2 3 int rc = luaL_newmetatable ( state , typeid ( T ). name ()); lua_pushvalue ( state , - 1 ); -- \u5c06\u521b\u5efa\u7684memtable\u62f7\u8d1d\u4e00\u4efd\u653e\u5728-2\u4f4d\u7f6e lua_setfield ( state , - 2 , \"__index\" ); -- \u7ed9\u521a\u521b\u5efa\u7684memtable\u8bbe\u7f6ekey\u4e3a__index\uff0cvalue\u4e3amemtable\u81ea\u5df1\u7684\u5b57\u6bb5 \u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u9996\u5148\u521b\u5efa\u4e86\u4e00\u4e2a\u5143\u8868\uff0c\u653e\u5728\u4e86\u6808\u9876\u4e0a\uff0c\u7136\u540e\u7ed9\u8fd9\u4e2a\u5143\u8868\u8bbe\u7f6e\u4e00\u4e2akey\u4e3a __index \uff0cvalue\u4e3a\u5143\u8868\u81ea\u5df1\u7684\u5b57\u6bb5\u3002 void luaL_register (lua_State *L, const char *libname, const luaL_Reg *l) \u5982\u679clibname\u4e3a\u7a7a\uff0c\u5c31\u7b80\u5355\u7684\u5c06l\u6240\u5bf9\u5e94\u7684\u4e00\u7cfb\u5217function\u6ce8\u518c\u5230\u6808\u9876\u7684table\u4e2d\uff0c\u5426\u5219\u5c31\u5148\u53bb\u6ce8\u518c\u8868\u4e2d \u627ekey\u4e3a _LOADED \u7684\u8868(\u7b49\u540c\u4e8e package.load[libname] )\u7684libname\u5b57\u6bb5\uff0c\u5982\u679c\u627e\u5230\u4e86\u5c31\u628afunction\u6ce8\u518c\u5230libname\u5bf9\u5e94\u7684\u8868\u4e2d\uff0c\u5426\u5219\u5c31\u53bb \u5168\u5c40\u8868\u4e2d\u67e5\u627ekey\u4e3alibname\u7684\u8868\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 static void luaL_register ( lua_State * L , const char * libname , const luaL_Reg * l ){ luaI_openlib ( L , libname , l , 0 ); } static int libsize ( const luaL_Reg * l ){ int size = 0 ; for (; l -> name ; l ++ ) size ++ ; return size ; } static void luaI_openlib ( lua_State * L , const char * libname , const luaL_Reg * l , int nup ){ if ( libname ){ int size = libsize ( l ); luaL_findtable ( L ,( - 10000 ), \"_LOADED\" , 1 ); lua_getfield ( L , - 1 , libname ); if ( ! lua_istable ( L , - 1 )){ lua_pop ( L , 1 ); if ( luaL_findtable ( L ,( - 10002 ), libname , size ) ! = NULL ) luaL_error ( L , \"name conflict for module \" LUA_QL ( \"%s\" ), libname ); lua_pushvalue ( L , - 1 ); lua_setfield ( L , - 3 , libname ); } lua_remove ( L , - 2 ); lua_insert ( L , - ( nup + 1 )); } for (; l -> name ; l ++ ){ int i ; for ( i = 0 ; i < nup ; i ++ ) lua_pushvalue ( L , - nup ); lua_pushcclosure ( L , l -> func , nup ); lua_setfield ( L , - ( nup + 2 ), l -> name ); } lua_pop ( L , nup ); } void lua_getglobal (lua_State *L, const char *name); \u83b7\u53d6\u5168\u5c40\u8868\u4e2dkey\u4e3aname\u7684value\u503c\uff0c\u4e5f\u5c31\u662f\u83b7\u53d6name\u5168\u5c40\u53d8\u91cf void lua_rawgeti (lua_State *L, int index, int n); raw\u524d\u7f00\u7684\u65b9\u6cd5\u90fd\u662f\u76f4\u63a5\u8bbf\u95ee\u8868\u672c\u8eab\uff0c\u4e0d\u4f1a\u8bbf\u95ee\u5143\u8868\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u7528\u6765\u8bbf\u95eeindex\u6240\u5728\u8868\u4e2d\u7684key\u4e3an\u7684\u503c\u3002 \u5143\u65b9\u6cd5 __index \u5f53\u8bbf\u95ee\u8868\u4e2d\u7684\u5143\u7d20\u4e0d\u5b58\u5728\u65f6\uff0c\u4f1a\u95f4\u63a5\u7684\u8bbf\u95ee\u8fd9\u4e2a\u8868\u5bf9\u5e94\u5143\u8868\u4e2d\u7684 __index \uff0c\u5982\u679c\u5143\u8868\u4e2d\u7684 __index \u5b57\u6bb5\u662f\u4e00\u4e2a\u8868\u5c31\u8bbf\u95ee\u8fd9\u4e2a\u8868\u5bf9\u5e94\u7684\u5b57\u6bb5\uff0c\u5982\u679c\u662f\u4e00\u4e2a\u51fd\u6570\u7684\u8bdd\u5c31\u4f1a\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570 \u5e76\u4e14\u4f1a\u628atable\u548c\u952e\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9\u8fd9\u4e2a\u51fd\u6570\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 -- __index\u662f\u4e00\u4e2atable local MyClass = {} -- the table representing the class, which will double as the metatable for the instances -- \u60ef\u7528\u6cd5\uff0c\u5c06table\u6307\u5411\u81ea\u5df1\uff0cMyClass\u4f1a\u88ab\u4f5c\u4e3a\u5176\u4ed6\u8868\u7684\u5143\u8868\uff0c\u5f53\u8bbf\u95ee\u4e0d\u5b58\u5728\u7684\u5b57\u6bb5\u5c31\u4f1a\u81ea\u52a8\u8bbf\u95eeMyClass\u5bf9\u5e94\u7684\u5b57\u6bb5\u4e86\u3002 MyClass . __index = MyClass -- failed table lookups on the instances should fallback to the class table, to get methods -- syntax equivalent to \"MyClass.new = function...\" function MyClass . new ( init ) -- \u5c06MyClass \u4f5c\u4e3a\u5143\u8868 local self = setmetatable ({}, MyClass ) self . value = init return self end function MyClass . set_value ( self , newval ) self . value = newval end function MyClass . get_value ( self ) return self . value end local i = MyClass . new ( 5 ) -- tbl:name(arg) is a shortcut for tbl.name(tbl, arg), except tbl is evaluated only once -- get_value\u5e76\u4e0d\u5b58\u5728\u4e8ei\u8868\u4e2d\uff0c\u56e0\u6b64\u4f1a\u53bb\u8bbf\u95eeMyClass\u5143\u8868\u7684get_value\u5b57\u6bb5 print ( i : get_value ()) --> 5 i : set_value ( 6 ) print ( i : get_value ()) --> 6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 -- __index\u662f\u4e00\u4e2a\u51fd\u6570 mytable = setmetatable ({ key1 = \"value1\" }, { __index = function ( mytable , key ) if key == \"key2\" then return \"metatablevalue\" else return nil end end }) print ( mytable . key1 , mytable . key2 ) -- \u8f93\u51fa\u7ed3\u679c value1 metatablevalue","title":"Lua Programing"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/book/LuaPrograming/#lua-programing","text":"","title":"Lua Programing"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/book/LuaPrograming/#userdata","text":"\u901a\u8fc7lua\u7684UserData\u53ef\u4ee5\u5b58\u50a8C\u4e2d\u521b\u5efa\u7684\u81ea\u5b9a\u4e49\u7c7b\u578b\uff0c\u9996\u5148\u901a\u8fc7 lua_newuserdata \u521b\u5efa\u4e00\u5757\u5185\u5b58\uff0c\u7136\u540e\u7528\u81ea\u5b9a\u4e49\u7c7b\u578b\u7684\u6307\u9488\u6307\u5411\u8fd9\u5757\u5185\u5b58\uff0c \u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u5728C\u4e2d\u64cd\u4f5c\u81ea\u5b9a\u4e49\u7c7b\u578b\u4e86\u3002","title":"UserData"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/book/LuaPrograming/#upvalues","text":"","title":"upvalues"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/book/LuaPrograming/#_1","text":"luaL_error 1 2 3 4 5 6 7 8 9 static int luaL_error ( lua_State * L , const char * fmt ,...){ va_list argp ; va_start ( argp , fmt ); luaL_where ( L , 1 ); lua_pushvfstring ( L , fmt , argp ); va_end ( argp ); lua_concat ( L , 2 ); return lua_error ( L ); }","title":"\u5176\u4ed6"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/book/LuaPrograming/#_2","text":"\u6211\u4eec\u6ca1\u529e\u6cd5\u4f7f\u7528C\u6307\u9488\u6765\u6307\u5411\u4e00\u4e2alua\u5bf9\u8c61\uff0c\u56e0\u6b64\u5982\u679c\u60f3\u5728C\u4ee3\u7801\u4e2d\u4f20\u9012lua\u5bf9\u8c61\u5c31\u53ea\u80fd\u4f7f\u7528lua\u7ed9\u6211\u4eec\u63d0\u4f9b\u7684\u5f15\u7528\u7cfb\u7edf\u3002\u56e0\u6b64\u5f53\u6211\u4eec\u5728C\u4ee3\u7801\u4e2d\u9700\u8981\u6307\u5411\u4e00\u4e2alua\u5bf9\u8c61\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u5148\u7ed9 \u8fd9\u4e2alua\u5bf9\u8c61\u521b\u5efa\u4e00\u4e2a\u5f15\u7528\uff0c\u7136\u540e\u5728C\u4ee3\u7801\u4e2d\u4fdd\u5b58\u8fd9\u4e2a\u5f15\u7528\u5c31\u53ef\u4ee5\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u901a\u8fc7\u4f20\u9012\u5f15\u7528\u7684\u65b9\u5f0f\u6765\u4ee3\u66ff\u4f20\u9012lua\u5bf9\u8c61\u3002lua\u4e2d\u7684\u5f15\u7528\u672c\u8d28\u4e0a\u5176\u5b9e\u5c31\u662f\u6ce8\u518c\u8868\u4e2d\u4ee5\u6570\u503c\u4e3akey\uff0c\u4ee5lua\u5bf9\u8c61 \u4e3avalue\u7684\u5b57\u6bb5\u3002 int luaL_ref (lua_State *L, int t); \u5728t\u6240\u5728table\u4e2d\uff0c\u521b\u5efa\u4e00\u4e2a\u5f15\u7528\uff0c\u5e76\u5c06\u6808\u9876\u7684\u5143\u7d20\u8fdb\u884c\u5f15\u7528\u5173\u8054\uff0c\u6700\u7ec8\u8fd4\u56de\u4e00\u4e2a\u552f\u4e00\u7684\u6570\u503c\u3002\u63a5\u4e0b\u6765\u901a\u8fc7\u8fd9\u4e2a\u6570\u503c\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7 lua_rawgeti \u83b7\u53d6\u5230\u5f15\u7528\u7684\u5bf9\u8c61\u4e86\u3002 1 2 3 4 5 // \u7ed9global\u5168\u5c40\u53d8\u91cf\u521b\u5efa\u5f15\u7528 lua_getglobal ( L , global ); int ref = luaL_ref ( L , LUA_REGISTRYINDEX ); // \u901a\u8fc7\u8fd9\u4e2a\u5f15\u7528\u8bbf\u95ee\u5168\u5c40\u53d8\u91cf lua_rawgeti ( L , LUA_REGISTRYINDEX , ref );","title":"\u5f15\u7528"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/book/LuaPrograming/#_3","text":"Lua5.3\u4e2d\u6ca1\u6709\u5168\u5c40\u53d8\u91cf\uff0c\u4f46\u662f\u4f1a\u901a\u8fc7\u5168\u5c40\u73af\u5883(global environment\uff0c\u4e00\u4e2a\u666e\u901a\u7684\u8868)\u6765\u8fdb\u884c\u6a21\u62df\uff0cLua\u52a0\u8f7d\u4ee3\u7801\u8fd0\u884c\u7684\u65f6\u5019\uff0c\u4f1a\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a_ENV\u7684upvale\uff0c\u8fd9\u662f\u4e00\u4e2a\u666e\u901a\u7684\u8868 \u662f\u5728Lua\u865a\u62df\u673a\u521d\u59cb\u5316\u7684\u65f6\u5019\u5c31\u88ab\u521b\u5efa\u4e86\uff0c\u91cc\u9762\u5305\u542b\u4e86\u5404\u79cd\u6807\u51c6\u5e93\u51fd\u6570\u3002\u5728\u6211\u4eec\u8bbf\u95ee\u5168\u5c40\u53d8\u91cf\u7684\u65f6\u5019, \u5b9e\u9645\u4e0a\u662f\u5728\u8bbf\u95ee\u4e0a\u503c _ENV \u4e2d\u7684\u952e\u503c\uff0clua\u7f16\u8bd1\u5668\u5728\u7f16\u8bd1\u7684\u65f6\u5019\uff0c\u5176\u5b9e\u5c31\u4f1a\u7ed9 \u6240\u6709\u7684\u5168\u5c40\u53d8\u91cf\u90fd\u4f1a\u88ab\u91cd\u5199\u6210\u5bf9_ENV\u8868\u7684\u5b57\u6bb5\u8bbf\u95ee\u3002G\u5176\u5b9e\u5c31\u662f_ENV\u4e2d\u7684\u4e00\u4e2a\u5b57\u6bb5\u3002_G\u5b9e\u9645\u6307\u5411\u4e86_ENV\u3002 1 2 3 4 print ( _ENV . _G == _ENV ) -- => Output: true print ( _G == _ENV ) -- => Output: true print ( _G . _G == _ENV ) -- => Output: true print ( _G . _G == _G ) -- => Output: true","title":"\u5168\u5c40\u53d8\u91cf\u548c\u73af\u5883"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/book/LuaPrograming/#_4","text":"lua_call lua_pcall","title":"\u51fd\u6570"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/book/LuaPrograming/#_5","text":"lua_State *lua_newthread (lua_State *L); \u521b\u5efa\u4e00\u4e2a\u7ebf\u7a0b\uff0c\u7136\u540e\u653e\u5230\u6808\u9876\uff0c\u5e76\u4e14\u8fd4\u56delua_State\u6765\u8868\u793a\u8fd9\u4e2a\u65b0\u7684\u7ebf\u7a0b\u3002\u8fd9\u4e2a\u8fd4\u56de\u7684\u65b0lua_State\u548c\u539f\u6765\u7684lua_State\u5171\u4eab\u6240\u6709\u7684\u5168\u5c40\u5bf9\u8c61\uff0c\u4f46\u662f\u6709\u81ea\u5df1\u72ec\u7acb\u7684\u6267\u884c\u6808\u3002 int lua_resume (lua_State *L, int narg); \u542f\u52a8\u6216\u8005\u6062\u590d\u6307\u5b9a\u534f\u7a0b\uff0c\u9700\u8981\u5c06\u8981\u8fd0\u884c\u7684funcion\u3001\u4ee5\u53ca\u53c2\u6570\u90fd\u653e\u5230\u5806\u6808\u4e2d\u3002\u5982\u679c\u8fd9\u4e2a\u534f\u7a0b\u8fd0\u884c\u7ed3\u675f\u6ca1\u6709\u4efb\u4f55\u9519\u8bef\u5c31\u8fd4\u56de0\uff0c\u5982\u679c\u8fd4\u56de\u7684\u662f LUA_YIELD ,\u8868\u660e\u534f\u7a0b\u505c\u6b62\u4e86\uff0c\u6b64\u65f6\u5806\u6808\u4e0a \u653e\u7740 Starts and resumes a coroutine in a given thread. To start a coroutine, you first create a new thread (see lua_newthread); then you push onto its stack the main function plus any arguments; then you call lua_resume, with narg being the number of arguments. This call returns when the coroutine suspends or finishes its execution. When it returns, the stack contains all values passed to lua_yield, or all values returned by the body function. lua_resume returns LUA_YIELD if the coroutine yields, 0 if the coroutine finishes its execution without errors, or an error code in case of errors (see lua_pcall). In case of errors, the stack is not unwound, so you can use the debug API over it. The error message is on the top of the stack. To restart a coroutine, you put on its stack only the values to be passed as results from yield, and then call lua_resume. lua_yeild","title":"\u534f\u7a0b\u548c\u7ebf\u7a0b"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/book/LuaPrograming/#_6","text":"lua_pushvfstring luaL_where lua_concat luaL_typename","title":"\u57fa\u672c\u64cd\u4f5c"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/book/LuaPrograming/#_7","text":"registry \u662flua\u7684\u6ce8\u518c\u8868(\u662f\u4e00\u5f20\u53ea\u80fd\u88abC\u4ee3\u7801\u8bbf\u95ee\u7684\u5168\u5c40\u8868)\uff0c\u83b7\u53d6registry\u5c31\u548c\u83b7\u53d6\u666e\u901a\u7684\u8868\u4e00\u6837\uff0c\u53ef\u4ee5\u50cf\u64cd\u4f5c\u666e\u901a\u7684\u8868\u4e00\u6837\u6765\u64cd\u4f5cregistry\u8868\uff0c\u53ea\u4e0d\u8fc7\u8fd9\u4e2a\u8868\u7684\u9ed8\u8ba4\u5728\u6808\u4e2d\u7684\u4f4d\u7f6e\u662f LUA_REGISTRYINDEX (lua\u4e2d\u5b9a\u4e49\u4e86\u8fd9\u4e2a\u503c\u4e3a-10000)\uff0c\u8fd9\u4e2a\u4f4d\u7f6e\u5e76\u4e0d\u662f\u771f\u5b9e\u5b58\u5728\u7684\u6211\u4eec\u79f0\u4e4b\u4e3a\u4f2a\u7d22\u5f15\u3002\u901a\u8fc7\u8fd9\u4e2a\u4f2a\u7d22\u5f15\u5c31\u53ef\u4ee5\u83b7\u53d6\u5230registry\u8868\uff0c\u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u50cf\u64cd\u4f5c\u6b63\u5e38\u8868\u4e00\u6837\u7684\u65b9\u5f0f\u6765\u64cd\u4f5cregistry\u8868\u4e86\u3002\u6240\u6709\u7684C\u5e93\u4ee3\u7801\u90fd\u5171\u4eab \u540c\u4e00\u4e2aregistry\u8868\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u5c0f\u5fc3\u4f7f\u7528\u8fd9\u4e2a\u8868\uff0c\u907f\u514d\u51b2\u7a81\u3002 \u4e0d\u80fd\u7528 lua_remove \u548c lua_insert \u6765\u64cd\u4f5cregistry\u8868\uff0c\u56e0\u4e3aregistry\u5e76\u4e0d\u662f\u771f\u5b9e\u5b58\u5728\u4e8e\u5806\u6808\u4e2d\uff0c\u800c lua_remove \u548c lua_insert \u8981\u64cd\u4f5c\u771f\u5b9e\u5b58\u5728\u4e8e\u5806\u6808\u4e2d\u7684\u503c\u3002 registry\u6ce8\u518c\u8868\u4e2d\u4e0d\u80fd\u4f7f\u7528\u6570\u503c\u7c7b\u578b\u7684\u952e\uff0c\u56e0\u4e3alua\u8bed\u8a00\u5c06\u6570\u503c\u952e\u7528\u4f5c\u5f15\u7528\u7cfb\u7edf\u4e86\u3002 int luaL_newmetatable (lua_State *L, const char *tname) \u521b\u5efa\u4e00\u4e2a\u5143\u8868\uff0c\u5e76\u653e\u5230registry\u4e2d\uff0c\u5185\u90e8\u5176\u5b9e\u5c31\u662f\u901a\u8fc7 lua_newtable \uff0c\u521b\u5efa\u4e86\u4e00\u4e2a\u666e\u901a\u7684\u8868\uff0c\u7136\u540e\u901a\u8fc7 lua_setfield \u7ed9registry\u6ce8\u518c\u8868\u6dfb\u52a0\u4e86\u4e00\u4e2akey\u4e3atname\uff0cvalue\u4e3a\u7a7atable\u7684\u5b57\u6bb5\u3002 \u5e76\u5c06\u5176\u653e\u5728registry\u8868\uff0c\u800c\u666e\u901a\u7684\u8868\u662f\u653e\u5728global\u4e2d\u7684\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 -- luaL_newmetatable\u7684\u5b9e\u73b0 static int luaL_newmetatable ( lua_State * L , const char * tname ){ -- \u67e5\u8be2registry\u8868\u662f\u5426\u5b58\u5728\u5bf9\u5e94\u7684\u5b57\u6bb5 lua_getfield ( L ,( - 10000 ), tname ); if ( ! lua_isnil ( L , - 1 )) return 0 ; -- \u5982\u679c\u4e0d\u5b58\u5728\uff0c\u4f1a\u5728\u6808\u9876\u653e\u4e00\u4e2anil\u503c\uff0c\u56e0\u6b64\u8fd9\u91cc\u9700\u8981\u53bb\u6389\u6808\u9876 lua_pop ( L , 1 ); -- \u521b\u5efa\u4e00\u4e2a\u666e\u901a\u7684\u8868\uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u8868\u518d\u6b21\u653e\u5230\u6808\u9876\u4e0a\uff0c\u56e0\u4e3alua_setfield\u4f1a\u6d88\u8017\u6808\u9876\uff0c\u6700\u540e\u8fd4\u56de\u7684\u65f6\u5019\u9700\u8981\u628a -- \u8fd9\u4e2atable\u653e\u5728\u6808\u9876\u4e0a\uff0c\u56e0\u6b64\u8fd9\u91cc\u628atable\u518d\u6b21\u653e\u5230\u6808\u9876\u4e0a\u4e86\uff0c\u76f8\u5f53\u4e8e\u6808\u76841\u30012\u4e24\u4e2a\u4f4d\u7f6e\u90fd\u662f\u8fd9\u4e2atable lua_newtable ( L ); lua_pushvalue ( L , - 1 ); -- \u8bbe\u7f6e\u6ce8\u518c\u8868key\u4e3atname\uff0cvalue\u4e3a\u521a\u521b\u5efa\u7684\u7a7atable lua_setfield ( L ,( - 10000 ), tname ); return 1 ; } void lua_gettable (lua_State *L, int index) \u9996\u5148\u4eceindex\u5904\u83b7\u53d6\u5230table\uff0c\u7136\u540e\u7528\u6808\u9876\u7684\u503c\u4f5c\u4e3a\u8868\u7684key\u6765\u83b7\u53d6\u5176value\uff0c\u6700\u540e\u5c06\u83b7\u53d6\u5230\u7684value\u653e\u5230\u6808\u9876\u4e0a\u3002 1 2 3 4 5 6 // \u8981\u67e5\u8be2\u7684 key\u653e\u5165\u6808\u4e2d lua_pushstring ( L , key ); /* push key */ // - 2 index\u6240\u5728\u4f4d\u7f6e\u5b58\u653e\u4e86table lua_gettable ( L , - 2 ); /* get background [ key ] */ // \u4ece\u6808\u9876\u4e0a\u83b7\u53d6\u5230 table\u4e2d\u6307\u5b9akey\u7684\u503c result = ( int )( lua_tonumberx ( L , - 1 , & isnum ) * MAX_COLOR ); void lua_setfield (lua_State *L, int index, const char *k) \u901a\u8fc7index\u627e\u5230table\uff0c\u7136\u540e\u7ed9\u8fd9\u4e2atable\u8bbe\u7f6ekey\u4e3ak\uff0cvalue\u4e3a\u6808\u9876\u503c\u3002 1 2 3 int rc = luaL_newmetatable ( state , typeid ( T ). name ()); lua_pushvalue ( state , - 1 ); -- \u5c06\u521b\u5efa\u7684memtable\u62f7\u8d1d\u4e00\u4efd\u653e\u5728-2\u4f4d\u7f6e lua_setfield ( state , - 2 , \"__index\" ); -- \u7ed9\u521a\u521b\u5efa\u7684memtable\u8bbe\u7f6ekey\u4e3a__index\uff0cvalue\u4e3amemtable\u81ea\u5df1\u7684\u5b57\u6bb5 \u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u9996\u5148\u521b\u5efa\u4e86\u4e00\u4e2a\u5143\u8868\uff0c\u653e\u5728\u4e86\u6808\u9876\u4e0a\uff0c\u7136\u540e\u7ed9\u8fd9\u4e2a\u5143\u8868\u8bbe\u7f6e\u4e00\u4e2akey\u4e3a __index \uff0cvalue\u4e3a\u5143\u8868\u81ea\u5df1\u7684\u5b57\u6bb5\u3002 void luaL_register (lua_State *L, const char *libname, const luaL_Reg *l) \u5982\u679clibname\u4e3a\u7a7a\uff0c\u5c31\u7b80\u5355\u7684\u5c06l\u6240\u5bf9\u5e94\u7684\u4e00\u7cfb\u5217function\u6ce8\u518c\u5230\u6808\u9876\u7684table\u4e2d\uff0c\u5426\u5219\u5c31\u5148\u53bb\u6ce8\u518c\u8868\u4e2d \u627ekey\u4e3a _LOADED \u7684\u8868(\u7b49\u540c\u4e8e package.load[libname] )\u7684libname\u5b57\u6bb5\uff0c\u5982\u679c\u627e\u5230\u4e86\u5c31\u628afunction\u6ce8\u518c\u5230libname\u5bf9\u5e94\u7684\u8868\u4e2d\uff0c\u5426\u5219\u5c31\u53bb \u5168\u5c40\u8868\u4e2d\u67e5\u627ekey\u4e3alibname\u7684\u8868\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 static void luaL_register ( lua_State * L , const char * libname , const luaL_Reg * l ){ luaI_openlib ( L , libname , l , 0 ); } static int libsize ( const luaL_Reg * l ){ int size = 0 ; for (; l -> name ; l ++ ) size ++ ; return size ; } static void luaI_openlib ( lua_State * L , const char * libname , const luaL_Reg * l , int nup ){ if ( libname ){ int size = libsize ( l ); luaL_findtable ( L ,( - 10000 ), \"_LOADED\" , 1 ); lua_getfield ( L , - 1 , libname ); if ( ! lua_istable ( L , - 1 )){ lua_pop ( L , 1 ); if ( luaL_findtable ( L ,( - 10002 ), libname , size ) ! = NULL ) luaL_error ( L , \"name conflict for module \" LUA_QL ( \"%s\" ), libname ); lua_pushvalue ( L , - 1 ); lua_setfield ( L , - 3 , libname ); } lua_remove ( L , - 2 ); lua_insert ( L , - ( nup + 1 )); } for (; l -> name ; l ++ ){ int i ; for ( i = 0 ; i < nup ; i ++ ) lua_pushvalue ( L , - nup ); lua_pushcclosure ( L , l -> func , nup ); lua_setfield ( L , - ( nup + 2 ), l -> name ); } lua_pop ( L , nup ); } void lua_getglobal (lua_State *L, const char *name); \u83b7\u53d6\u5168\u5c40\u8868\u4e2dkey\u4e3aname\u7684value\u503c\uff0c\u4e5f\u5c31\u662f\u83b7\u53d6name\u5168\u5c40\u53d8\u91cf void lua_rawgeti (lua_State *L, int index, int n); raw\u524d\u7f00\u7684\u65b9\u6cd5\u90fd\u662f\u76f4\u63a5\u8bbf\u95ee\u8868\u672c\u8eab\uff0c\u4e0d\u4f1a\u8bbf\u95ee\u5143\u8868\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u7528\u6765\u8bbf\u95eeindex\u6240\u5728\u8868\u4e2d\u7684key\u4e3an\u7684\u503c\u3002","title":"\u8868\u548c\u5143\u8868"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/book/LuaPrograming/#_8","text":"__index \u5f53\u8bbf\u95ee\u8868\u4e2d\u7684\u5143\u7d20\u4e0d\u5b58\u5728\u65f6\uff0c\u4f1a\u95f4\u63a5\u7684\u8bbf\u95ee\u8fd9\u4e2a\u8868\u5bf9\u5e94\u5143\u8868\u4e2d\u7684 __index \uff0c\u5982\u679c\u5143\u8868\u4e2d\u7684 __index \u5b57\u6bb5\u662f\u4e00\u4e2a\u8868\u5c31\u8bbf\u95ee\u8fd9\u4e2a\u8868\u5bf9\u5e94\u7684\u5b57\u6bb5\uff0c\u5982\u679c\u662f\u4e00\u4e2a\u51fd\u6570\u7684\u8bdd\u5c31\u4f1a\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570 \u5e76\u4e14\u4f1a\u628atable\u548c\u952e\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9\u8fd9\u4e2a\u51fd\u6570\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 -- __index\u662f\u4e00\u4e2atable local MyClass = {} -- the table representing the class, which will double as the metatable for the instances -- \u60ef\u7528\u6cd5\uff0c\u5c06table\u6307\u5411\u81ea\u5df1\uff0cMyClass\u4f1a\u88ab\u4f5c\u4e3a\u5176\u4ed6\u8868\u7684\u5143\u8868\uff0c\u5f53\u8bbf\u95ee\u4e0d\u5b58\u5728\u7684\u5b57\u6bb5\u5c31\u4f1a\u81ea\u52a8\u8bbf\u95eeMyClass\u5bf9\u5e94\u7684\u5b57\u6bb5\u4e86\u3002 MyClass . __index = MyClass -- failed table lookups on the instances should fallback to the class table, to get methods -- syntax equivalent to \"MyClass.new = function...\" function MyClass . new ( init ) -- \u5c06MyClass \u4f5c\u4e3a\u5143\u8868 local self = setmetatable ({}, MyClass ) self . value = init return self end function MyClass . set_value ( self , newval ) self . value = newval end function MyClass . get_value ( self ) return self . value end local i = MyClass . new ( 5 ) -- tbl:name(arg) is a shortcut for tbl.name(tbl, arg), except tbl is evaluated only once -- get_value\u5e76\u4e0d\u5b58\u5728\u4e8ei\u8868\u4e2d\uff0c\u56e0\u6b64\u4f1a\u53bb\u8bbf\u95eeMyClass\u5143\u8868\u7684get_value\u5b57\u6bb5 print ( i : get_value ()) --> 5 i : set_value ( 6 ) print ( i : get_value ()) --> 6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 -- __index\u662f\u4e00\u4e2a\u51fd\u6570 mytable = setmetatable ({ key1 = \"value1\" }, { __index = function ( mytable , key ) if key == \"key2\" then return \"metatablevalue\" else return nil end end }) print ( mytable . key1 , mytable . key2 ) -- \u8f93\u51fa\u7ed3\u679c value1 metatablevalue","title":"\u5143\u65b9\u6cd5"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/book/MathematicsForComputerScience/","text":"Mathematics For Computer Science \u56db\u8272\u5b9a\u7406 \u8d39\u9a6c\u5927\u5b9a\u7406 \u54e5\u5fb7\u5df4\u8d6b\u731c\u60f3","title":"Mathematics For Computer Science"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/book/MathematicsForComputerScience/#mathematics-for-computer-science","text":"\u56db\u8272\u5b9a\u7406 \u8d39\u9a6c\u5927\u5b9a\u7406 \u54e5\u5fb7\u5df4\u8d6b\u731c\u60f3","title":"Mathematics For Computer Science"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/book/MuduoCpp/","text":"Linux C++ \u670d\u52a1\u7aef\u7f16\u7a0b shared_ptr\u5b9e\u73b0Copy-On-Writer \u57fa\u672c\u539f\u7406: writer\u7aef\uff0c\u5982\u679c\u53d1\u73b0\u5f15\u7528\u8ba1\u6570\u4e3a1\uff0c\u8fd9\u65f6\u53ef\u4ee5\u5b89\u5168\u7684\u4fee\u6539\u5171\u4eab\u5bf9\u8c61\uff0c\u800c\u4e0d\u5fc5\u62c5\u5fc3\u6709\u4eba\u6b63\u5728\u8bfb\u5b83 \u5bf9\u4e8eread\u7aef\u5728\u8bfb\u4e4b\u524d\u628a\u5f15\u7528\u8ba1\u6570\u52a01\uff0c\u8bfb\u5b8c\u4e4b\u540e\u51cf1\uff0c\u8fd9\u6837\u5c31\u4fdd\u8bc1\u5728\u8bfb\u7684\u671f\u95f4\u5176\u5f15\u7528\u8ba1\u6570\u662f\u5927\u4e8e1\u7684\uff0c\u53ef\u4ee5\u963b\u6b62\u5e76\u53d1\u5199 Example: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 typedef std :: vector < Foo > FooList ; typedef boost :: shared_ptr < FooList > FoolListPtr ; MutexLock mutex ; FoolListPtr g_fools ; // Read void traverse () { FooListPtr foos ; { MutexLockGuard lock ( mutex ); foos = g_foos ; assert ( ! g_fools . unique ()); } { // ..... for ( auto & elem : foos ) { elem . doit (); } } } // Writer\u7aef void post ( const Foo & f ) { MutexLockGuard lock ( mutex ); // \u6b64\u65f6\u6709\u4eba\u6b63\u5728\u8bfb\uff0c\u6240\u4ee5\u9700\u8981copy\u4e00\u4e0b if ( ! g_foos . unique ()) { g_foos . reset ( new FoolList ( * g_foos )); } // \u6b64\u65f6\u80af\u5b9a\u6ca1\u6709\u4eba\u5728\u8bfb\u4e86\uff0c\u6574\u4e2a\u5199\u671f\u95f4\u90fd\u662f\u6709\u9501\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u786e\u8ba4\u8fd9\u671f\u95f4\u4e0d\u4f1a\u6709\u8bfb assert ( g_foos . unique ()); g_foos -> push_back ( f ); } EventLoop\u7684\u4e00\u4e2a\u7f3a\u70b9\u5c31\u662f\uff0c\u5b83\u662f\u975e\u62a2\u5360\u5f0f\u7684\uff0c\u4f1a\u51fa\u73b0\u4f18\u5148\u7ea7\u53cd\u8f6c\u7684\u60c5\u51b5\u3002\u53ef\u4ee5\u901a\u8fc7\u591a\u7ebf\u7a0b\u6765\u514d\u4e8b\u4ef6\u5904\u7406\u8017\u65f6\u5bfc\u81f4event loop\u65e0\u6cd5\u53ca\u65f6\u54cd\u5e94\u540e\u7eed\u7684\u4e8b\u4ef6\u3002","title":"Linux C++ \u670d\u52a1\u7aef\u7f16\u7a0b"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/book/MuduoCpp/#linux-c","text":"","title":"Linux C++ \u670d\u52a1\u7aef\u7f16\u7a0b"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/book/MuduoCpp/#shared_ptrcopy-on-writer","text":"\u57fa\u672c\u539f\u7406: writer\u7aef\uff0c\u5982\u679c\u53d1\u73b0\u5f15\u7528\u8ba1\u6570\u4e3a1\uff0c\u8fd9\u65f6\u53ef\u4ee5\u5b89\u5168\u7684\u4fee\u6539\u5171\u4eab\u5bf9\u8c61\uff0c\u800c\u4e0d\u5fc5\u62c5\u5fc3\u6709\u4eba\u6b63\u5728\u8bfb\u5b83 \u5bf9\u4e8eread\u7aef\u5728\u8bfb\u4e4b\u524d\u628a\u5f15\u7528\u8ba1\u6570\u52a01\uff0c\u8bfb\u5b8c\u4e4b\u540e\u51cf1\uff0c\u8fd9\u6837\u5c31\u4fdd\u8bc1\u5728\u8bfb\u7684\u671f\u95f4\u5176\u5f15\u7528\u8ba1\u6570\u662f\u5927\u4e8e1\u7684\uff0c\u53ef\u4ee5\u963b\u6b62\u5e76\u53d1\u5199 Example: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 typedef std :: vector < Foo > FooList ; typedef boost :: shared_ptr < FooList > FoolListPtr ; MutexLock mutex ; FoolListPtr g_fools ; // Read void traverse () { FooListPtr foos ; { MutexLockGuard lock ( mutex ); foos = g_foos ; assert ( ! g_fools . unique ()); } { // ..... for ( auto & elem : foos ) { elem . doit (); } } } // Writer\u7aef void post ( const Foo & f ) { MutexLockGuard lock ( mutex ); // \u6b64\u65f6\u6709\u4eba\u6b63\u5728\u8bfb\uff0c\u6240\u4ee5\u9700\u8981copy\u4e00\u4e0b if ( ! g_foos . unique ()) { g_foos . reset ( new FoolList ( * g_foos )); } // \u6b64\u65f6\u80af\u5b9a\u6ca1\u6709\u4eba\u5728\u8bfb\u4e86\uff0c\u6574\u4e2a\u5199\u671f\u95f4\u90fd\u662f\u6709\u9501\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u786e\u8ba4\u8fd9\u671f\u95f4\u4e0d\u4f1a\u6709\u8bfb assert ( g_foos . unique ()); g_foos -> push_back ( f ); } EventLoop\u7684\u4e00\u4e2a\u7f3a\u70b9\u5c31\u662f\uff0c\u5b83\u662f\u975e\u62a2\u5360\u5f0f\u7684\uff0c\u4f1a\u51fa\u73b0\u4f18\u5148\u7ea7\u53cd\u8f6c\u7684\u60c5\u51b5\u3002\u53ef\u4ee5\u901a\u8fc7\u591a\u7ebf\u7a0b\u6765\u514d\u4e8b\u4ef6\u5904\u7406\u8017\u65f6\u5bfc\u81f4event loop\u65e0\u6cd5\u53ca\u65f6\u54cd\u5e94\u540e\u7eed\u7684\u4e8b\u4ef6\u3002","title":"shared_ptr\u5b9e\u73b0Copy-On-Writer"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/book/OS/","text":"\u64cd\u4f5c\u7cfb\u7edf\u5bfc\u8bba","title":"\u64cd\u4f5c\u7cfb\u7edf\u5bfc\u8bba"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/book/OS/#_1","text":"","title":"\u64cd\u4f5c\u7cfb\u7edf\u5bfc\u8bba"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/book/ebpf/","text":"ebpf Chapter1 ten 64-bit registers. extended BPF version up to four times faster than the original BPF implementation. The BPF verifier, added these required safety guarantees. It ensures that any BPF program will complete without crashing, and it ensures that programs don\u2019t try to access memory out of range. These advantages come with certain restrictions, though: programs have a maximum size allowed, and loops need to be bounded to ensure that the system\u2019s memory is never exhausted by a bad BPF program. BPF maps will become the main mechanism to exchange data between the kernel and user-space","title":"ebpf"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/book/ebpf/#ebpf","text":"","title":"ebpf"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/book/ebpf/#chapter1","text":"ten 64-bit registers. extended BPF version up to four times faster than the original BPF implementation. The BPF verifier, added these required safety guarantees. It ensures that any BPF program will complete without crashing, and it ensures that programs don\u2019t try to access memory out of range. These advantages come with certain restrictions, though: programs have a maximum size allowed, and loops need to be bounded to ensure that the system\u2019s memory is never exhausted by a bad BPF program. BPF maps will become the main mechanism to exchange data between the kernel and user-space","title":"Chapter1"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/course/6.824/lecture1/","text":"\u5206\u5e03\u5f0f\u5f88\u96be\uff0c\u539f\u56e0\u662f: \u5e76\u884c\u6027\uff0c\u901a\u8fc7\u673a\u5668\u6269\u5145\u6765\u5b9e\u73b0\u9ad8\u6027\u80fd \u9700\u8981\u8003\u8651\u5bb9\u9519 \u5f02\u6784\u73af\u5883\u4e0b\uff0c\u673a\u5668\u4e4b\u95f4\u7684\u4ea4\u4e92 \u5b89\u5168\u548c\u9694\u79bb\u3002 \u90e8\u5206\u5931\u8d25\u662f\u5b9e\u73b0\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\u7684\u53e6\u5916\u4e00\u4e2a\u96be\u70b9\u3002 \u5982\u4f55\u901a\u8fc7\u7b80\u5355\u7684\u6269\u5145\u673a\u5668X\u500d\u5c31\u53ef\u4ee5\u63d0\u9ad8\u6027\u80fdX\u500d\uff0c\u8fd9\u662f\u4e00\u4e2a\u96be\u70b9\u3002 \u5206\u5e03\u5f0f\u57fa\u7840\u8bbe\u65bd: Storage Communication Computing \u62bd\u8c61\u3001\u5206\u5e03\u5f0f\u7cfb\u7edf\u7684\u6838\u5fc3\u5728\u4e8e\u62bd\u8c61\uff0c\u8ba9\u4f7f\u7528\u8005\u611f\u89c9\u4e0d\u5230\u5206\u5e03\u5f0f\u7cfb\u7edf\u7684\u5b58\u5728\u3002 \u5b9e\u73b0\u5206\u5e03\u5f0f\u7cfb\u7edf\u7684\u4e00\u4e9b\u7ec4\u4ef6: RPC Thread Concurrency Performance Scalability \u5206\u5e03\u5f0f\u4e2d\u5927\u91cf\u673a\u5668\u5fc5\u7136\u4f1a\u5b58\u5728\u673a\u5668\u6545\u969c\uff0c\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\u5982\u4f55\u8fdb\u884c\u5bb9\u9519(\u4fdd\u8bc1\u53ef\u7528\u6027)\u662f\u4e00\u4e2a\u8981\u89e3\u51b3\u7684\u95ee\u9898\u3002 \u5bb9\u9519\u6027 \u53ef\u7528\u6027 \u53ef\u6062\u590d\u6027 non-volatile \u975e\u6613\u5931\u6027\u7684 \u901a\u8fc7\u590d\u5236\u6765\u89e3\u51b3\u5bb9\u9519\u95ee\u9898 \u4e00\u81f4\u6027: \u5f3a\u4e00\u81f4: \u5f31\u4e00\u81f4\u6027:","title":"Index"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/course/6.824/lecture1/paper-note/","text":"\u4ec0\u4e48\u662fMapReduce? \u200b\u5b83\u662f\u4e00\u79cd\u7f16\u7a0b\u6a21\u578b\uff0c\u5176\u601d\u60f3\u6765\u81ea\u4e8e\u51fd\u6570\u5f0f\u7f16\u7a0b\uff0c\u548cPython\uff0cLisp\u8bed\u8a00\u4e2d\u7684map\u548creduce\u51fd\u6570\u7c7b\u4f3c\uff0c\u5176\u6b21\u5b83\u4e5f\u662f\u5904\u7406\u5927\u6570\u636e\u96c6\u7684\u4e00\u79cd\u5b9e\u73b0\uff0c\u62bd\u8c61\u51fa\u4e00\u4e2aMap\u63a5\u53e3\u548c\u4e00\u4e2aReduce\u63a5\u53e3\uff0c \u5c4f\u853d\u5e95\u5c42\u7684\u57fa\u7840\u8bbe\u65bd\u7684\u7ec6\u8282\uff0c\u8ba9\u4f7f\u7528\u8005\u53ef\u4ee5\u8f7b\u677e\u7684\u7f16\u5199\u5206\u5e03\u5f0f\u7684\u5e94\u7528\u3002 \u5b9e\u73b0MapReduce\u9700\u8981\u89e3\u51b3\u54ea\u4e9b\u95ee\u9898? \u8f93\u5165\u7684\u6570\u636e\u5982\u4f55\u5206\u5272 \u5927\u91cf\u8ba1\u7b97\u673a\u7ec4\u6210\u7684\u96c6\u7fa4\u5982\u4f55\u8c03\u5ea6 \u96c6\u7fa4\u4e2d\u7684\u8ba1\u7b97\u673a\u53d1\u751f\u4e86\u9519\u8bef\u5982\u4f55\u5904\u7406 \u5982\u4f55\u7ba1\u7406\u96c6\u7fa4\u4e2d\u7684\u8ba1\u7b97\u673a\u4e4b\u95f4\u7684\u901a\u4fe1 MapReduce\u4e2d\u7684map\u548creduce\u4e24\u4e2a\u9636\u6bb5\u5206\u522b\u505a\u54ea\u4e9b\u4e8b\u60c5? \u200b Map\u9636\u6bb5 Map\u9636\u6bb5\u4e3b\u8981\u662f\u5c06\u7528\u6237\u8f93\u5165\u7684\u6587\u4ef6\uff0c\u5206\u6210N\u4efd\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4efd\u6587\u4ef6\u7531\u4e00\u4e2awork\u8fdb\u7a0b\u8bfb\u53d6\u5176\u5185\u5bb9\u56de\u8c03\u7528\u6237\u7684Map\u51fd\u6570\u5f97\u5230\u8f93\u51fa\uff0c\u6839\u636e\u8f93\u51fa\u7684 key\u8fdb\u884chash\uff0c\u7136\u540e\u5bf9reduce\u9636\u6bb5\u7684work\u8fdb\u7a0b\u4e2a\u6570\u8fdb\u884c\u53d6\u6a21\u5f97\u5230\u8981\u8f93\u51fa\u7ed9\u54ea\u4e2awork\uff0c\u7136\u540e\u6839\u636e\u8fd9\u4e2awork\u8fdb\u7a0b\u7684index\u5f97\u5230\u8f93\u51fa\u6587\u4ef6\u540d\u6700\u7ec8\u628a\u8fd9\u4e2akey\u8f93\u51fa\u5230\u8fd9\u4e2a\u6587\u4ef6\u4e2d\u3002 Reduce\u9636\u6bb5 Reduce\u9636\u6bb5\u4f1a\u4ece\u6bcf\u4e00\u4e2aMap\u7684work\u8fdb\u7a0b\u4e2d\u62ff\u5230\u8f93\u51fa\u7684\u6587\u4ef6\u540d\uff0c\u7136\u540e\u6253\u5f00\u8fd9\u4e2a\u6587\u4ef6\u8bfb\u53d6\u5185\u5bb9\u56de\u8c03\u7528\u6237\u7684reduce\u51fd\u6570\uff0c\u5f97\u5230\u8f93\u51fa\uff0c\u7136\u540e\u6392\u5e8f\u6700\u7ec8\u5199\u5165\u5230\u8f93\u51fa\u7684\u6587\u4ef6\u540d\u3002 MapReduce\u7684\u6574\u4e2a\u6267\u884c\u6d41\u7a0b\u662f\u600e\u4e48\u6837\u7684? \u7528\u6237\u7a0b\u5e8f\u9996\u5148\u8c03\u7528MapReduce\u5e93\u5c06\u8f93\u5165\u6587\u4ef6\u5206\u5272\u6210M\u4e2a\u6570\u636e\u7247\uff0c\u6bcf\u4e2a\u6570\u636e\u7247\u7684\u5927\u5c0f\u901a\u5e38\u662f16MB\u523064MB\u5de6\u53f3\uff0c\u7136\u540e\u7528\u6237\u7a0b\u5e8f\u5f00\u59cb\u5728\u96c6\u7fa4\u4e2d\u521b\u5efa\u5927\u91cf\u7684\u8fdb\u7a0b\u3002 \u8fd9\u4e9b\u8fdb\u7a0b\u4e2d\u6709\u4e00\u4e2a\u7279\u6b8a\u7684\u8fdb\u7a0b\u53ebmaster\uff0c\u5176\u5b83\u7684\u90fd\u662fworker\u8fdb\u7a0b\uff0c\u7531master\u5206\u914d\u4efb\u52a1\uff0c\u6709M\u4e2aMap\u4efb\u52a1\u548cR\u4e2aReduce\u4efb\u52a1\u5c06\u88ab\u5206\u914d\uff0cmaster\u5c06\u4e00\u4e2aMap\u4efb\u52a1\u6216Reduce\u4efb\u52a1\u5206\u914d\u7ed9\u4e00\u4e2a\u7a7a\u95f2\u7684worker\u3002 \u88ab\u5206\u914d\u7684map\u4efb\u52a1\u7684worker\u7a0b\u5e8f\u8bfb\u53d6\u76f8\u5173\u7684\u8f93\u5165\u6570\u636e\u7247\u6bb5\uff0c\u4ece\u8f93\u5165\u7684\u6570\u636e\u7247\u6bb5\u4e2d\u89e3\u6790\u51fakey/value\u5bf9\uff0c\u7136\u540e\u628akey/value \u5bf9\u4f20\u9012\u7ed9\u7528\u6237\u81ea\u5b9a\u4e49\u7684Map\u51fd\u6570\u4e2d\uff0c\u7531Map\u51fd\u6570\u751f\u6210\u5e76\u8f93\u51fa\u4e2d\u95f4\u7684key/value\u5bf9\uff0c\u5e76\u7f13\u5b58\u5728\u5185\u5b58\u4e2d\u3002 \u7f13\u5b58\u7684key/value\u5bf9\u901a\u8fc7\u5206\u533a\u51fd\u6570\u5206\u6210R\u4e2a\u533a\u57df\uff0c\u4e4b\u540e\u5468\u671f\u6027\u7684\u5199\u5165\u5230\u672c\u5730\u78c1\u76d8\u4e0a\uff0c\u7f13\u5b58\u7684key/value\u5bf9\u5728\u672c\u5730\u78c1\u76d8\u4e0a\u7684\u5b58\u50a8\u4f4d\u7f6e\u88ab\u56de\u4f20\u7ed9master\uff0c\u7531master\u8d1f\u8d23\u628a\u8fd9\u4e9b\u5b58\u50a8\u4f4d\u7f6e\u518d\u4f20\u9001\u7ed9Reduce\u9636\u6bb5\u7684worker\u3002 \u5f53Redcue worker\u7a0b\u5e8f\u63a5\u6536\u5230master\u7a0b\u5e8f\u53d1\u6765\u7684\u6570\u636e\u5b58\u50a8\u4f4d\u7f6e\u4fe1\u606f\u540e \uff0c\u4f7f\u7528RPC\u4eceMap worker\u6240\u5728\u4e3b\u673a\u7684\u78c1\u76d8\u4e0a\u8bfb\u53d6\u8fd9\u4e9b\u7f13\u5b58\u7684\u6570\u636e\uff0c\u5f53Reduce worker\u8bfb\u53d6\u4e86\u6240\u6709\u7684\u4e2d\u95f4\u6570\u636e\u540e\uff0c\u901a\u8fc7\u5bf9key\u8fdb\u884c\u6392\u5e8f\u540e\u4f7f\u5f97\u5177\u6709\u76f8\u540c\u7684key\u503c\u7684\u6570\u636e\u805a\u5408\u5728\u4e00\u8d77\u3002\u7531\u4e8e\u8bb8\u591a\u4e0d\u540c\u7684key\u503c\u4f1a\u6620\u5c04\u5230\u76f8\u540c\u7684Reduce\u4efb\u52a1\u4e0a\uff0c\u56e0\u6b64\u5fc5\u987b\u8fdb\u884c\u6392\u5e8f\u3002\u5982\u679c\u4e2d\u95f4\u6570\u636e\u592a\u5927\u65e0\u6cd5\u5728\u5185\u5b58\u4e2d\u5b8c\u6210\u6392\u5e8f\uff0c\u90a3\u4e48\u5c31\u8981\u5728\u5916\u90e8\u8fdb\u884c\u6392\u5e8f\u3002 Reducer worker\u7a0b\u5e8f\u904d\u5386\u6392\u5e8f\u540e\u7684\u4e2d\u95f4\u6570\u636e\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u552f\u4e00\u7684\u4e2d\u95f4key\u503c\uff0cReducer worker\u7a0b\u5e8f\u5c06\u8fd9\u4e2akey\u503c\u548c\u5b83\u76f8\u5173\u7684\u4e2d\u95f4value\u503c\u7684\u96c6\u5408\u4f20\u9012\u7ed9\u7528\u6237\u81ea\u5b9a\u4e49\u7684Reduce\u51fd\u6570\u3002Reduce\u51fd\u6570\u7684\u8f93\u51fa\u88ab\u8ffd\u52a0\u5230\u6240\u5c5e\u5206\u533a\u7684\u8f93\u51fa\u6587\u4ef6\u3002 \u5f53\u6240\u6709\u7684map\u548cReduce\u4efb\u52a1\u90fd\u5b8c\u6210\u540e\uff0cmaster\u5524\u9192\u7528\u6237\u7a0b\u5e8f\u3002\u5728\u8fd9\u4e2a\u65f6\u5019\uff0c\u5728\u7528\u6237\u7a0b\u5e8f\u91cc\u7684\u5bf9MapReduce\u8c03\u7528\u624d\u8fd4\u56de\u3002 MapReduce\u662f\u600e\u4e48\u505a\u5bb9\u9519\u5904\u7406? \u5bb9\u9519\u5904\u7406\u4e3b\u8981\u9488\u5bf9\u4e0b\u9762\u51e0\u79cd\u9519\u8bef\u8fdb\u884c\u5904\u7406: worker\u6545\u969c \u200b \u5468\u671f\u6027\u7684\u53bbping worker\uff0c\u56fa\u5b9a\u65f6\u95f4\u6ca1\u6709\u6536\u5230\u54cd\u5e94\u5c31\u628a\u8fd9\u4e2aworker\u6807\u8bb0\u5931\u6548\uff0c\u628a\u8fd9\u4e2aworker\u5b8c\u6210\u7684\u4efb\u52a1\u4e5f\u8bbe\u7f6e\u4e3a\u521d\u59cb\u7a7a\u95f2\u72b6\u6001\u7b49\u5f85\u91cd\u65b0\u8c03\u5ea6\uff0c\u56e0\u4e3amap\u7684\u8f93\u51fa\u662f\u5728\u672c\u5730\uff0c\u800c\u5df2\u7ecf\u5b8c\u6210\u7684reducer\u4efb\u52a1\u4e0d\u9700\u8981\u91cd\u65b0\u7684\u8c03\u5ea6\uff0c\u56e0\u4e3areduce\u7684\u8f93\u51fa\u5728\u5168\u5c40\u6587\u4ef6\u7cfb\u7edf\u4e0a\u3002 master\u5931\u8d25 master\u5468\u671f\u6027\u7684\u5c06\u81ea\u5df1\u4fdd\u5b58\u7684\u5143\u6570\u636e\u5237\u65b0\u5230\u78c1\u76d8\u4e2d\uff0cmaster\u53ea\u8981\u4e00\u5931\u8d25\u5c31\u4e2d\u6b62MapReduce\u7684\u8fd0\u7b97\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u5237\u65b0\u5230\u78c1\u76d8\u4e2d\u7684\u5143\u6570\u636e\u662f\u6700\u65b0\u7684\uff0c\u5e76\u4e14\u5ba2\u6237\u4e5f\u53ef\u4ee5\u68c0\u67e5\u5230\u8fd9\u4e2a\u5931\u8d25\u7684\u72b6\u6001\u3002 \u5176\u5b83\u65b9\u9762 \u901a\u8fc7\u539f\u5b50\u63d0\u4ea4\u6765\u4fdd\u8bc1\u4efb\u52a1\u7684\u8f93\u51fa\u662f\u5b8c\u6574\u7684\uff0c\u8fd9\u4e2a\u662f\u501f\u52a9\u4e8ePOSIX\u7684rename\u662f\u539f\u5b50\u64cd\u4f5c\u8fd9\u4e00\u7279\u6027\uff0c\u901a\u8fc7\u628a\u4efb\u52a1\u7684\u8f93\u51fa\u5199\u5230\u4e34\u65f6\u6587\u4ef6\uff0c\u7136\u540e\u539f\u5b50\u7684\u91cd\u547d\u540d\u4e3a\u6700\u7ec8\u7684\u6587\u4ef6\u540d\u3002 \u95ee\u9898? MapReduce\u5982\u4f55\u5904\u7406\u975e\u5e42\u7b49\u6027\u7684\u51fd\u6570\uff1f\uff0c\u975e\u5e42\u7b49\u6027\u7684\u60c5\u51b5\u4e0bworker\u5931\u6548\u5bfc\u81f4\u4efb\u52a1\u91cd\u65b0\u6267\u884c\uff0c\u4f1a\u5bfc\u81f4\u7684\u5230\u4e0d\u9884\u671f\u7684\u7ed3\u679c\u3002 \u8f93\u5165\u6570\u636e\u7684\u5b58\u653e\u4f4d\u7f6e\u548c\u5904\u7406\u8fd9\u4e2a\u6570\u636e\u7684worker\u4e4b\u95f4\u7684\u5173\u7cfb? \u5c3d\u53ef\u80fd\u7684\u4fdd\u8bc1worker\u8981\u5904\u7406\u7684\u6570\u636e\u5c31\u5728worker\u6240\u5728\u673a\u5668\u4e0a\uff0c\u8fd9\u4e00\u5c31\u53ef\u4ee5\u907f\u514d\u4e0d\u5fc5\u8981\u7684\u7f51\u7edc\u5e26\u5bbd\u3002 \u8f93\u5165\u6570\u636eMap\u9636\u6bb5\u88ab\u5206\u5272\u7684\u4e2a\u6570M\uff0c\u4ee5\u53caReduce\u9636\u6bb5\u88ab\u5206\u5272\u7684\u4e2a\u6570R\uff0c\u5982\u4f55\u6289\u62e9? master\u9700\u8981\u7ef4\u62a4\u4efb\u52a1\u7684\u4fe1\u606f\uff0c\u9700\u8981\u5c06\u4efb\u52a1\u8c03\u5ea6\u5230\u4e0d\u540c\u7684\u673a\u5668\u4e0a\u6267\u884c\uff0c\u8003\u8651\u5230\u8fd9\u4e2a\u95ee\u9898\u7684\u8bdd\uff0c\u8981\u51cf\u5c11master\u505a\u4efb\u52a1\u8c03\u5ea6\u7684\u6b21\u6570\uff0c\u51cf\u5c11master\u4fdd\u5b58\u7684\u5143\u6570\u636e\u4fe1\u606f\u5927\u5c0f\uff0cReduce\u9636\u6bb5\u7684\u7684\u4efb\u52a1\u4e2a\u6570R\u662f\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u3002 MapReduce\u7684\u5907\u7528\u4efb\u52a1\u673a\u5236? \u200b \u5907\u7528\u4efb\u52a1\u673a\u5236\u5904\u7406\u96c6\u7fa4\u4e2d\u51fa\u73b0\u7684\"\u843d\u4f0d\u8005\"\uff0c\u5f53\u4e00\u4e2aMapReduce\u4efb\u52a1\u63a5\u8fd1\u5b8c\u6210\u7684\u65f6\u5019\uff0cmaster\u8c03\u5ea6\u5907\u7528\u4efb\u52a1\u8fdb\u7a0b\u6765\u6267\u884c\u5269\u4e0b\u7684\u5904\u4e8e\u4e2d\u95f4\u72b6\u6001\u7684\u4efb\u52a1\u3002\u65e0\u8bba\u662f\u6700\u521d\u7684\u8fdb\u7a0b\u8fd8\u662f\u5907\u7528\u4efb\u52a1\u8fdb\u7a0b\u5b8c\u6210\u4e86\u4efb\u52a1\u90fd\u4f1a\u628a\u4efb\u52a1\u6807\u8bb0\u4e3a\u5b8c\u6210\u3002 Combiner\u673a\u5236? \u901a\u8fc7\u5c06map\u9636\u6bb5\u7684\u672c\u5730\u8f93\u51fa\u6570\u636e\u8fdb\u884c\u5408\u5e76\uff0c\u51cf\u5c11\u5bf9\u7f51\u7edc\u5e26\u5bbd\u7684\u6d88\u8017\u3002 \u5982\u4f55\u505a\u597d\u8d1f\u8f7d\u5747\u8861? \u8ba9\u4efb\u52a1\u7684\u6570\u91cf\u8fdc\u8fdc\u5927\u4e8eworker\u7684\u6570\u91cf\uff0c\u8fd9\u6837\uff0c\u597d\u7684\u673a\u5668\u53ef\u4ee5\u591a\u5b8c\u6210\u4e00\u4e9b\u4efb\u52a1\uff0c\u5dee\u7684\u673a\u5668\u53ef\u4ee5\u5c11\u5b8c\u6210\u4efb\u52a1\uff0c\u8fd9\u6837\u6700\u540e\u5b8c\u6210\u7684\u4efb\u52a1\u7684\u65f6\u5019\uff0c\u6240\u6709\u673a\u5668\u7684\u7edd\u5bf9\u65f6\u95f4\u90fd\u5dee\u4e0d\u591a\u3002 \u4ec0\u4e48\u56e0\u7d20\u4f1a\u5f71\u54cd\u96c6\u7fa4\u7684\u6027\u80fd? \u7f51\u7edc\u5e26\u5bbd\u4f1a\u5f71\u54cd\u5230\u96c6\u7fa4\u7684\u6027\u80fd\uff0c\u8981\u5c3d\u53ef\u80fd\u5c11\u5728\u8ba1\u7b97\u673a\u4e4b\u95f4\u79fb\u52a8\u6570\u636e\u3002 MapReduce\u5982\u4f55\u505acrash\u6062\u590d? Map Worker crash master\u5b9a\u671f\u53bbping Worker\uff0c\u5982\u679c\u5f97\u4e0d\u5230\u54cd\u5e94\u5c31\u8ba4\u4e3aWorker\u5df2\u7ecfcrash\u4e86\uff0ccrash\u7684worker\u4ea7\u751f\u7684\u4e2d\u95f4 \u8f93\u51fa\u4f1a\u4e22\u5931\uff0c\u4f46\u4e5f\u6709\u53ef\u80fd\u5df2\u7ecf\u88abReduce worker\u8bfb\u53d6\u8fc7\u53bb\u3002\u5bf9\u4e8e\u8fd9\u79cd\u60c5\u51b5 master\u4f1a\u91cd\u65b0\u8fd0\u884ccrash\u7684worker\u3002 Reduce Worker crash \u540c\u6837\u5b58\u5728\u4e24\u79cd\u60c5\u51b5\uff0c\u4e00\u79cd\u5c31\u662f\u4e2d\u9014crash\u4e86\uff0c\u8fd9\u79cd\u9700\u8981\u91cd\u65b0\u8fd0\u884c\uff0c\u53e6\u5916\u4e00\u79cd\u5c31\u662f\u7ed3\u679c\u5df2\u7ecf\u8f93\u51fa\u4e86\uff0c\u4f46\u662f\u8fdb\u7a0b \u5df2\u7ecfcrash\u4e86\uff0c\u5bf9\u4e8e\u8fd9\u79cd\u60c5\u51b5\u4e0b\u4e0d\u9700\u8981\u91cd\u65b0\u8fd0\u884cworker\uff0c\u56e0\u4e3aReduce\u9636\u6bb5\u7684\u8f93\u51fa\u662f\u4fdd\u5b58\u5728\u5168\u5c40\u7684GFS\u6587\u4ef6\u7cfb\u7edf \u4e2d\u7684\u3002 Reduce Worker\u5728\u6587\u4ef6\u5199\u5165\u8fc7\u7a0b\u4e2dcrash \u8fd9\u4e2a\u662f\u901a\u8fc7\u539f\u5b50\u7684rename\u4fdd\u8bc1\uff0c\u5199\u5165\u7ed3\u679c\u7684\u65f6\u5019\u662f\u5148\u5199\u5165\u5230\u4e2d\u95f4\u6587\u4ef6\u4e2d\uff0c\u7136\u540e\u539f\u5b50\u7684\u8fdb\u884c\u91cd\u547d\u540d\u3002 MapReduce\u5982\u4f55\u505acrash\u6062\u590d? Map Worker crash master\u5b9a\u671f\u53bbping Worker\uff0c\u5982\u679c\u5f97\u4e0d\u5230\u54cd\u5e94\u5c31\u8ba4\u4e3aWorker\u5df2\u7ecfcrash\u4e86\uff0ccrash\u7684worker\u4ea7\u751f\u7684\u4e2d\u95f4 \u8f93\u51fa\u4f1a\u4e22\u5931\uff0c\u4f46\u4e5f\u6709\u53ef\u80fd\u5df2\u7ecf\u88abReduce worker\u8bfb\u53d6\u8fc7\u53bb\u3002\u5bf9\u4e8e\u8fd9\u79cd\u60c5\u51b5 master\u4f1a\u91cd\u65b0\u8fd0\u884ccrash\u7684worker\u3002 Reduce Worker crash \u540c\u6837\u5b58\u5728\u4e24\u79cd\u60c5\u51b5\uff0c\u4e00\u79cd\u5c31\u662f\u4e2d\u9014crash\u4e86\uff0c\u8fd9\u79cd\u9700\u8981\u91cd\u65b0\u8fd0\u884c\uff0c\u53e6\u5916\u4e00\u79cd\u5c31\u662f\u7ed3\u679c\u5df2\u7ecf\u8f93\u51fa\u4e86\uff0c\u4f46\u662f\u8fdb\u7a0b \u5df2\u7ecfcrash\u4e86\uff0c\u5bf9\u4e8e\u8fd9\u79cd\u60c5\u51b5\u4e0b\u4e0d\u9700\u8981\u91cd\u65b0\u8fd0\u884cworker\uff0c\u56e0\u4e3aReduce\u9636\u6bb5\u7684\u8f93\u51fa\u662f\u4fdd\u5b58\u5728\u5168\u5c40\u7684GFS\u6587\u4ef6\u7cfb\u7edf \u4e2d\u7684\u3002 Reduce Worker\u5728\u6587\u4ef6\u5199\u5165\u8fc7\u7a0b\u4e2dcrash \u8fd9\u4e2a\u662f\u901a\u8fc7\u539f\u5b50\u7684rename\u4fdd\u8bc1\uff0c\u5199\u5165\u7ed3\u679c\u7684\u65f6\u5019\u662f\u5148\u5199\u5165\u5230\u4e2d\u95f4\u6587\u4ef6\u4e2d\uff0c\u7136\u540e\u539f\u5b50\u7684\u8fdb\u884c\u91cd\u547d\u540d\u3002 \u5176\u4ed6\u95ee\u9898 \u7528\u6237\u7a0b\u5e8f\u51fa\u73b0bug\u5bfc\u81f4Map Reduce\u5728\u5904\u7406\u67d0\u4e9b\u6570\u636e\u7684\u65f6\u5019crash? \u901a\u5e38\u505a\u6cd5\u662f\u4fee\u590dbug\u7136\u540e\u518d\u6b21\u8fd0\u884c\uff0c\u4f46\u662f\u6709\u7684\u65f6\u5019\u5bfb\u627e\u8fd9\u4e2abug\u5e76\u4fee\u590d\u5b83\u5e76\u4e0d\u662f\u4e00\u4ef6\u5bb9\u6613\u7684\u4e8b\u60c5\u3002MapReduce\u4f1a\u901a\u8fc7\u7ed9\u6bcf\u4e2aworker\u8fdb\u7a0b\u8bbe\u7f6e\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u6765\u6355\u6349\u5185\u5b58\u6bb5\u5f02\u5e38\u548c\u603b\u7ebf\u9519\u8bef\u3002\u5728MapReduce\u5e93\u5728\u64cd\u4f5c\u4e4b\u524d\u4f1a\u901a\u8fc7\u5168\u5c40\u53d8\u91cf\u8bb0\u5f55\u5e8f\u53f7\u3002 \u5982\u679c\u7528\u6237\u7a0b\u5e8f\u89e6\u53d1\u4e86\u4e00\u4e2a\u7cfb\u7edf\u4fe1\u53f7\uff0c\u6d88\u606f\u5904\u7406\u51fd\u6570\u4f1a\u7528\u6700\u540e\u4e00\u53e3\u6c14\u901a\u5173UDP\u5305\u5411master\u53d1\u9001\u5904\u7406\u7684\u6700\u540e\u4e00\u6761\u8bb0\u5f55\u5e8f\u53f7\u3002\u800cmaster\u5982\u679c\u770b\u5230\u67d0\u6761\u7279\u5b9a\u8bb0\u5f55\u5931\u8d25\u591a\u6b21\uff0c\u90a3\u4e48\u4e0b\u6b21\u91cd\u65b0\u6267\u884c\u7684\u65f6\u5019\u5c31\u4f1a\u5bf9\u8fd9\u6761\u6570\u636e\u7684\u5904\u7406\u3002 \u5982\u4f55\u5bf9MapReduce\u8fdb\u884c\u8c03\u8bd5? \u63d0\u4f9b\u4e00\u5957MapReduce\u7684\u672c\u5730\u7248\u672c\u7528\u4e8e\u8c03\u8bd5\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u4f7f\u7528\u672c\u5730\u8c03\u8bd5\u5de5\u5177\u6765\u8c03\u8bd5MapReduce\u3002 \u54ea\u4e9b\u5e94\u7528\u7a0b\u5e8f\u4e0d\u9002\u5408MapReduce? \u4e0d\u9002\u5408map/shuffle/reduce\u8fd9\u79cd\u6a21\u5f0f\u7684\u5de5\u4f5c \u5c0f\u6570\u636e\u96c6 \u5bf9\u4e8e\u5927\u6570\u636e\u7684\u7684\u5c0f\u66f4\u65b0(\u4f8b\u5982\u6dfb\u52a0\u4e00\u4e2a\u5c0f\u7684\u6587\u6863\u5230\u4e00\u4e2a\u5f88\u5927\u7684\u7d22\u5f15\u4e2d) \u975e\u9884\u671f\u7684\u8bfb \u591a\u6b21shuffle(Shuffle\u63cf\u8ff0\u7740\u6570\u636e\u4ecemap task\u8f93\u51fa\u5230reduce task\u8f93\u5165\u7684\u8fd9\u6bb5\u8fc7\u7a0b)\uff0c\u4f8b\u5982pagerank\u7b97\u6cd5 \u867d\u7136\u53ef\u4ee5\u901a\u8fc7\u591a\u6b21MR\u6765\u89e3\u51b3\uff0c\u4f46\u662f\u8fd9\u79cd\u65b9\u5f0f\u6548\u7387\u4e0d\u9ad8\u3002 \u53c2\u8003\u6587\u732e: mapreduce","title":"Paper note"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/course/6.824/lecture1/paper-note/#mapreduce","text":"\u200b\u5b83\u662f\u4e00\u79cd\u7f16\u7a0b\u6a21\u578b\uff0c\u5176\u601d\u60f3\u6765\u81ea\u4e8e\u51fd\u6570\u5f0f\u7f16\u7a0b\uff0c\u548cPython\uff0cLisp\u8bed\u8a00\u4e2d\u7684map\u548creduce\u51fd\u6570\u7c7b\u4f3c\uff0c\u5176\u6b21\u5b83\u4e5f\u662f\u5904\u7406\u5927\u6570\u636e\u96c6\u7684\u4e00\u79cd\u5b9e\u73b0\uff0c\u62bd\u8c61\u51fa\u4e00\u4e2aMap\u63a5\u53e3\u548c\u4e00\u4e2aReduce\u63a5\u53e3\uff0c \u5c4f\u853d\u5e95\u5c42\u7684\u57fa\u7840\u8bbe\u65bd\u7684\u7ec6\u8282\uff0c\u8ba9\u4f7f\u7528\u8005\u53ef\u4ee5\u8f7b\u677e\u7684\u7f16\u5199\u5206\u5e03\u5f0f\u7684\u5e94\u7528\u3002","title":"\u4ec0\u4e48\u662fMapReduce?"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/course/6.824/lecture1/paper-note/#mapreduce_1","text":"\u8f93\u5165\u7684\u6570\u636e\u5982\u4f55\u5206\u5272 \u5927\u91cf\u8ba1\u7b97\u673a\u7ec4\u6210\u7684\u96c6\u7fa4\u5982\u4f55\u8c03\u5ea6 \u96c6\u7fa4\u4e2d\u7684\u8ba1\u7b97\u673a\u53d1\u751f\u4e86\u9519\u8bef\u5982\u4f55\u5904\u7406 \u5982\u4f55\u7ba1\u7406\u96c6\u7fa4\u4e2d\u7684\u8ba1\u7b97\u673a\u4e4b\u95f4\u7684\u901a\u4fe1","title":"\u5b9e\u73b0MapReduce\u9700\u8981\u89e3\u51b3\u54ea\u4e9b\u95ee\u9898?"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/course/6.824/lecture1/paper-note/#mapreducemapreduce","text":"\u200b Map\u9636\u6bb5 Map\u9636\u6bb5\u4e3b\u8981\u662f\u5c06\u7528\u6237\u8f93\u5165\u7684\u6587\u4ef6\uff0c\u5206\u6210N\u4efd\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4efd\u6587\u4ef6\u7531\u4e00\u4e2awork\u8fdb\u7a0b\u8bfb\u53d6\u5176\u5185\u5bb9\u56de\u8c03\u7528\u6237\u7684Map\u51fd\u6570\u5f97\u5230\u8f93\u51fa\uff0c\u6839\u636e\u8f93\u51fa\u7684 key\u8fdb\u884chash\uff0c\u7136\u540e\u5bf9reduce\u9636\u6bb5\u7684work\u8fdb\u7a0b\u4e2a\u6570\u8fdb\u884c\u53d6\u6a21\u5f97\u5230\u8981\u8f93\u51fa\u7ed9\u54ea\u4e2awork\uff0c\u7136\u540e\u6839\u636e\u8fd9\u4e2awork\u8fdb\u7a0b\u7684index\u5f97\u5230\u8f93\u51fa\u6587\u4ef6\u540d\u6700\u7ec8\u628a\u8fd9\u4e2akey\u8f93\u51fa\u5230\u8fd9\u4e2a\u6587\u4ef6\u4e2d\u3002 Reduce\u9636\u6bb5 Reduce\u9636\u6bb5\u4f1a\u4ece\u6bcf\u4e00\u4e2aMap\u7684work\u8fdb\u7a0b\u4e2d\u62ff\u5230\u8f93\u51fa\u7684\u6587\u4ef6\u540d\uff0c\u7136\u540e\u6253\u5f00\u8fd9\u4e2a\u6587\u4ef6\u8bfb\u53d6\u5185\u5bb9\u56de\u8c03\u7528\u6237\u7684reduce\u51fd\u6570\uff0c\u5f97\u5230\u8f93\u51fa\uff0c\u7136\u540e\u6392\u5e8f\u6700\u7ec8\u5199\u5165\u5230\u8f93\u51fa\u7684\u6587\u4ef6\u540d\u3002","title":"MapReduce\u4e2d\u7684map\u548creduce\u4e24\u4e2a\u9636\u6bb5\u5206\u522b\u505a\u54ea\u4e9b\u4e8b\u60c5?"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/course/6.824/lecture1/paper-note/#mapreduce_2","text":"\u7528\u6237\u7a0b\u5e8f\u9996\u5148\u8c03\u7528MapReduce\u5e93\u5c06\u8f93\u5165\u6587\u4ef6\u5206\u5272\u6210M\u4e2a\u6570\u636e\u7247\uff0c\u6bcf\u4e2a\u6570\u636e\u7247\u7684\u5927\u5c0f\u901a\u5e38\u662f16MB\u523064MB\u5de6\u53f3\uff0c\u7136\u540e\u7528\u6237\u7a0b\u5e8f\u5f00\u59cb\u5728\u96c6\u7fa4\u4e2d\u521b\u5efa\u5927\u91cf\u7684\u8fdb\u7a0b\u3002 \u8fd9\u4e9b\u8fdb\u7a0b\u4e2d\u6709\u4e00\u4e2a\u7279\u6b8a\u7684\u8fdb\u7a0b\u53ebmaster\uff0c\u5176\u5b83\u7684\u90fd\u662fworker\u8fdb\u7a0b\uff0c\u7531master\u5206\u914d\u4efb\u52a1\uff0c\u6709M\u4e2aMap\u4efb\u52a1\u548cR\u4e2aReduce\u4efb\u52a1\u5c06\u88ab\u5206\u914d\uff0cmaster\u5c06\u4e00\u4e2aMap\u4efb\u52a1\u6216Reduce\u4efb\u52a1\u5206\u914d\u7ed9\u4e00\u4e2a\u7a7a\u95f2\u7684worker\u3002 \u88ab\u5206\u914d\u7684map\u4efb\u52a1\u7684worker\u7a0b\u5e8f\u8bfb\u53d6\u76f8\u5173\u7684\u8f93\u5165\u6570\u636e\u7247\u6bb5\uff0c\u4ece\u8f93\u5165\u7684\u6570\u636e\u7247\u6bb5\u4e2d\u89e3\u6790\u51fakey/value\u5bf9\uff0c\u7136\u540e\u628akey/value \u5bf9\u4f20\u9012\u7ed9\u7528\u6237\u81ea\u5b9a\u4e49\u7684Map\u51fd\u6570\u4e2d\uff0c\u7531Map\u51fd\u6570\u751f\u6210\u5e76\u8f93\u51fa\u4e2d\u95f4\u7684key/value\u5bf9\uff0c\u5e76\u7f13\u5b58\u5728\u5185\u5b58\u4e2d\u3002 \u7f13\u5b58\u7684key/value\u5bf9\u901a\u8fc7\u5206\u533a\u51fd\u6570\u5206\u6210R\u4e2a\u533a\u57df\uff0c\u4e4b\u540e\u5468\u671f\u6027\u7684\u5199\u5165\u5230\u672c\u5730\u78c1\u76d8\u4e0a\uff0c\u7f13\u5b58\u7684key/value\u5bf9\u5728\u672c\u5730\u78c1\u76d8\u4e0a\u7684\u5b58\u50a8\u4f4d\u7f6e\u88ab\u56de\u4f20\u7ed9master\uff0c\u7531master\u8d1f\u8d23\u628a\u8fd9\u4e9b\u5b58\u50a8\u4f4d\u7f6e\u518d\u4f20\u9001\u7ed9Reduce\u9636\u6bb5\u7684worker\u3002 \u5f53Redcue worker\u7a0b\u5e8f\u63a5\u6536\u5230master\u7a0b\u5e8f\u53d1\u6765\u7684\u6570\u636e\u5b58\u50a8\u4f4d\u7f6e\u4fe1\u606f\u540e \uff0c\u4f7f\u7528RPC\u4eceMap worker\u6240\u5728\u4e3b\u673a\u7684\u78c1\u76d8\u4e0a\u8bfb\u53d6\u8fd9\u4e9b\u7f13\u5b58\u7684\u6570\u636e\uff0c\u5f53Reduce worker\u8bfb\u53d6\u4e86\u6240\u6709\u7684\u4e2d\u95f4\u6570\u636e\u540e\uff0c\u901a\u8fc7\u5bf9key\u8fdb\u884c\u6392\u5e8f\u540e\u4f7f\u5f97\u5177\u6709\u76f8\u540c\u7684key\u503c\u7684\u6570\u636e\u805a\u5408\u5728\u4e00\u8d77\u3002\u7531\u4e8e\u8bb8\u591a\u4e0d\u540c\u7684key\u503c\u4f1a\u6620\u5c04\u5230\u76f8\u540c\u7684Reduce\u4efb\u52a1\u4e0a\uff0c\u56e0\u6b64\u5fc5\u987b\u8fdb\u884c\u6392\u5e8f\u3002\u5982\u679c\u4e2d\u95f4\u6570\u636e\u592a\u5927\u65e0\u6cd5\u5728\u5185\u5b58\u4e2d\u5b8c\u6210\u6392\u5e8f\uff0c\u90a3\u4e48\u5c31\u8981\u5728\u5916\u90e8\u8fdb\u884c\u6392\u5e8f\u3002 Reducer worker\u7a0b\u5e8f\u904d\u5386\u6392\u5e8f\u540e\u7684\u4e2d\u95f4\u6570\u636e\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u552f\u4e00\u7684\u4e2d\u95f4key\u503c\uff0cReducer worker\u7a0b\u5e8f\u5c06\u8fd9\u4e2akey\u503c\u548c\u5b83\u76f8\u5173\u7684\u4e2d\u95f4value\u503c\u7684\u96c6\u5408\u4f20\u9012\u7ed9\u7528\u6237\u81ea\u5b9a\u4e49\u7684Reduce\u51fd\u6570\u3002Reduce\u51fd\u6570\u7684\u8f93\u51fa\u88ab\u8ffd\u52a0\u5230\u6240\u5c5e\u5206\u533a\u7684\u8f93\u51fa\u6587\u4ef6\u3002 \u5f53\u6240\u6709\u7684map\u548cReduce\u4efb\u52a1\u90fd\u5b8c\u6210\u540e\uff0cmaster\u5524\u9192\u7528\u6237\u7a0b\u5e8f\u3002\u5728\u8fd9\u4e2a\u65f6\u5019\uff0c\u5728\u7528\u6237\u7a0b\u5e8f\u91cc\u7684\u5bf9MapReduce\u8c03\u7528\u624d\u8fd4\u56de\u3002","title":"MapReduce\u7684\u6574\u4e2a\u6267\u884c\u6d41\u7a0b\u662f\u600e\u4e48\u6837\u7684?"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/course/6.824/lecture1/paper-note/#mapreduce_3","text":"\u5bb9\u9519\u5904\u7406\u4e3b\u8981\u9488\u5bf9\u4e0b\u9762\u51e0\u79cd\u9519\u8bef\u8fdb\u884c\u5904\u7406: worker\u6545\u969c \u200b \u5468\u671f\u6027\u7684\u53bbping worker\uff0c\u56fa\u5b9a\u65f6\u95f4\u6ca1\u6709\u6536\u5230\u54cd\u5e94\u5c31\u628a\u8fd9\u4e2aworker\u6807\u8bb0\u5931\u6548\uff0c\u628a\u8fd9\u4e2aworker\u5b8c\u6210\u7684\u4efb\u52a1\u4e5f\u8bbe\u7f6e\u4e3a\u521d\u59cb\u7a7a\u95f2\u72b6\u6001\u7b49\u5f85\u91cd\u65b0\u8c03\u5ea6\uff0c\u56e0\u4e3amap\u7684\u8f93\u51fa\u662f\u5728\u672c\u5730\uff0c\u800c\u5df2\u7ecf\u5b8c\u6210\u7684reducer\u4efb\u52a1\u4e0d\u9700\u8981\u91cd\u65b0\u7684\u8c03\u5ea6\uff0c\u56e0\u4e3areduce\u7684\u8f93\u51fa\u5728\u5168\u5c40\u6587\u4ef6\u7cfb\u7edf\u4e0a\u3002 master\u5931\u8d25 master\u5468\u671f\u6027\u7684\u5c06\u81ea\u5df1\u4fdd\u5b58\u7684\u5143\u6570\u636e\u5237\u65b0\u5230\u78c1\u76d8\u4e2d\uff0cmaster\u53ea\u8981\u4e00\u5931\u8d25\u5c31\u4e2d\u6b62MapReduce\u7684\u8fd0\u7b97\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u5237\u65b0\u5230\u78c1\u76d8\u4e2d\u7684\u5143\u6570\u636e\u662f\u6700\u65b0\u7684\uff0c\u5e76\u4e14\u5ba2\u6237\u4e5f\u53ef\u4ee5\u68c0\u67e5\u5230\u8fd9\u4e2a\u5931\u8d25\u7684\u72b6\u6001\u3002 \u5176\u5b83\u65b9\u9762 \u901a\u8fc7\u539f\u5b50\u63d0\u4ea4\u6765\u4fdd\u8bc1\u4efb\u52a1\u7684\u8f93\u51fa\u662f\u5b8c\u6574\u7684\uff0c\u8fd9\u4e2a\u662f\u501f\u52a9\u4e8ePOSIX\u7684rename\u662f\u539f\u5b50\u64cd\u4f5c\u8fd9\u4e00\u7279\u6027\uff0c\u901a\u8fc7\u628a\u4efb\u52a1\u7684\u8f93\u51fa\u5199\u5230\u4e34\u65f6\u6587\u4ef6\uff0c\u7136\u540e\u539f\u5b50\u7684\u91cd\u547d\u540d\u4e3a\u6700\u7ec8\u7684\u6587\u4ef6\u540d\u3002 \u95ee\u9898? MapReduce\u5982\u4f55\u5904\u7406\u975e\u5e42\u7b49\u6027\u7684\u51fd\u6570\uff1f\uff0c\u975e\u5e42\u7b49\u6027\u7684\u60c5\u51b5\u4e0bworker\u5931\u6548\u5bfc\u81f4\u4efb\u52a1\u91cd\u65b0\u6267\u884c\uff0c\u4f1a\u5bfc\u81f4\u7684\u5230\u4e0d\u9884\u671f\u7684\u7ed3\u679c\u3002","title":"MapReduce\u662f\u600e\u4e48\u505a\u5bb9\u9519\u5904\u7406?"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/course/6.824/lecture1/paper-note/#worker","text":"\u5c3d\u53ef\u80fd\u7684\u4fdd\u8bc1worker\u8981\u5904\u7406\u7684\u6570\u636e\u5c31\u5728worker\u6240\u5728\u673a\u5668\u4e0a\uff0c\u8fd9\u4e00\u5c31\u53ef\u4ee5\u907f\u514d\u4e0d\u5fc5\u8981\u7684\u7f51\u7edc\u5e26\u5bbd\u3002","title":"\u8f93\u5165\u6570\u636e\u7684\u5b58\u653e\u4f4d\u7f6e\u548c\u5904\u7406\u8fd9\u4e2a\u6570\u636e\u7684worker\u4e4b\u95f4\u7684\u5173\u7cfb?"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/course/6.824/lecture1/paper-note/#mapmreducer","text":"master\u9700\u8981\u7ef4\u62a4\u4efb\u52a1\u7684\u4fe1\u606f\uff0c\u9700\u8981\u5c06\u4efb\u52a1\u8c03\u5ea6\u5230\u4e0d\u540c\u7684\u673a\u5668\u4e0a\u6267\u884c\uff0c\u8003\u8651\u5230\u8fd9\u4e2a\u95ee\u9898\u7684\u8bdd\uff0c\u8981\u51cf\u5c11master\u505a\u4efb\u52a1\u8c03\u5ea6\u7684\u6b21\u6570\uff0c\u51cf\u5c11master\u4fdd\u5b58\u7684\u5143\u6570\u636e\u4fe1\u606f\u5927\u5c0f\uff0cReduce\u9636\u6bb5\u7684\u7684\u4efb\u52a1\u4e2a\u6570R\u662f\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u3002","title":"\u8f93\u5165\u6570\u636eMap\u9636\u6bb5\u88ab\u5206\u5272\u7684\u4e2a\u6570M\uff0c\u4ee5\u53caReduce\u9636\u6bb5\u88ab\u5206\u5272\u7684\u4e2a\u6570R\uff0c\u5982\u4f55\u6289\u62e9?"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/course/6.824/lecture1/paper-note/#mapreduce_4","text":"\u200b \u5907\u7528\u4efb\u52a1\u673a\u5236\u5904\u7406\u96c6\u7fa4\u4e2d\u51fa\u73b0\u7684\"\u843d\u4f0d\u8005\"\uff0c\u5f53\u4e00\u4e2aMapReduce\u4efb\u52a1\u63a5\u8fd1\u5b8c\u6210\u7684\u65f6\u5019\uff0cmaster\u8c03\u5ea6\u5907\u7528\u4efb\u52a1\u8fdb\u7a0b\u6765\u6267\u884c\u5269\u4e0b\u7684\u5904\u4e8e\u4e2d\u95f4\u72b6\u6001\u7684\u4efb\u52a1\u3002\u65e0\u8bba\u662f\u6700\u521d\u7684\u8fdb\u7a0b\u8fd8\u662f\u5907\u7528\u4efb\u52a1\u8fdb\u7a0b\u5b8c\u6210\u4e86\u4efb\u52a1\u90fd\u4f1a\u628a\u4efb\u52a1\u6807\u8bb0\u4e3a\u5b8c\u6210\u3002","title":"MapReduce\u7684\u5907\u7528\u4efb\u52a1\u673a\u5236?"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/course/6.824/lecture1/paper-note/#combiner","text":"\u901a\u8fc7\u5c06map\u9636\u6bb5\u7684\u672c\u5730\u8f93\u51fa\u6570\u636e\u8fdb\u884c\u5408\u5e76\uff0c\u51cf\u5c11\u5bf9\u7f51\u7edc\u5e26\u5bbd\u7684\u6d88\u8017\u3002","title":"Combiner\u673a\u5236?"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/course/6.824/lecture1/paper-note/#_1","text":"\u8ba9\u4efb\u52a1\u7684\u6570\u91cf\u8fdc\u8fdc\u5927\u4e8eworker\u7684\u6570\u91cf\uff0c\u8fd9\u6837\uff0c\u597d\u7684\u673a\u5668\u53ef\u4ee5\u591a\u5b8c\u6210\u4e00\u4e9b\u4efb\u52a1\uff0c\u5dee\u7684\u673a\u5668\u53ef\u4ee5\u5c11\u5b8c\u6210\u4efb\u52a1\uff0c\u8fd9\u6837\u6700\u540e\u5b8c\u6210\u7684\u4efb\u52a1\u7684\u65f6\u5019\uff0c\u6240\u6709\u673a\u5668\u7684\u7edd\u5bf9\u65f6\u95f4\u90fd\u5dee\u4e0d\u591a\u3002","title":"\u5982\u4f55\u505a\u597d\u8d1f\u8f7d\u5747\u8861?"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/course/6.824/lecture1/paper-note/#_2","text":"\u7f51\u7edc\u5e26\u5bbd\u4f1a\u5f71\u54cd\u5230\u96c6\u7fa4\u7684\u6027\u80fd\uff0c\u8981\u5c3d\u53ef\u80fd\u5c11\u5728\u8ba1\u7b97\u673a\u4e4b\u95f4\u79fb\u52a8\u6570\u636e\u3002","title":"\u4ec0\u4e48\u56e0\u7d20\u4f1a\u5f71\u54cd\u96c6\u7fa4\u7684\u6027\u80fd?"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/course/6.824/lecture1/paper-note/#mapreducecrash","text":"Map Worker crash master\u5b9a\u671f\u53bbping Worker\uff0c\u5982\u679c\u5f97\u4e0d\u5230\u54cd\u5e94\u5c31\u8ba4\u4e3aWorker\u5df2\u7ecfcrash\u4e86\uff0ccrash\u7684worker\u4ea7\u751f\u7684\u4e2d\u95f4 \u8f93\u51fa\u4f1a\u4e22\u5931\uff0c\u4f46\u4e5f\u6709\u53ef\u80fd\u5df2\u7ecf\u88abReduce worker\u8bfb\u53d6\u8fc7\u53bb\u3002\u5bf9\u4e8e\u8fd9\u79cd\u60c5\u51b5 master\u4f1a\u91cd\u65b0\u8fd0\u884ccrash\u7684worker\u3002 Reduce Worker crash \u540c\u6837\u5b58\u5728\u4e24\u79cd\u60c5\u51b5\uff0c\u4e00\u79cd\u5c31\u662f\u4e2d\u9014crash\u4e86\uff0c\u8fd9\u79cd\u9700\u8981\u91cd\u65b0\u8fd0\u884c\uff0c\u53e6\u5916\u4e00\u79cd\u5c31\u662f\u7ed3\u679c\u5df2\u7ecf\u8f93\u51fa\u4e86\uff0c\u4f46\u662f\u8fdb\u7a0b \u5df2\u7ecfcrash\u4e86\uff0c\u5bf9\u4e8e\u8fd9\u79cd\u60c5\u51b5\u4e0b\u4e0d\u9700\u8981\u91cd\u65b0\u8fd0\u884cworker\uff0c\u56e0\u4e3aReduce\u9636\u6bb5\u7684\u8f93\u51fa\u662f\u4fdd\u5b58\u5728\u5168\u5c40\u7684GFS\u6587\u4ef6\u7cfb\u7edf \u4e2d\u7684\u3002 Reduce Worker\u5728\u6587\u4ef6\u5199\u5165\u8fc7\u7a0b\u4e2dcrash \u8fd9\u4e2a\u662f\u901a\u8fc7\u539f\u5b50\u7684rename\u4fdd\u8bc1\uff0c\u5199\u5165\u7ed3\u679c\u7684\u65f6\u5019\u662f\u5148\u5199\u5165\u5230\u4e2d\u95f4\u6587\u4ef6\u4e2d\uff0c\u7136\u540e\u539f\u5b50\u7684\u8fdb\u884c\u91cd\u547d\u540d\u3002","title":"MapReduce\u5982\u4f55\u505acrash\u6062\u590d?"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/course/6.824/lecture1/paper-note/#mapreducecrash_1","text":"Map Worker crash master\u5b9a\u671f\u53bbping Worker\uff0c\u5982\u679c\u5f97\u4e0d\u5230\u54cd\u5e94\u5c31\u8ba4\u4e3aWorker\u5df2\u7ecfcrash\u4e86\uff0ccrash\u7684worker\u4ea7\u751f\u7684\u4e2d\u95f4 \u8f93\u51fa\u4f1a\u4e22\u5931\uff0c\u4f46\u4e5f\u6709\u53ef\u80fd\u5df2\u7ecf\u88abReduce worker\u8bfb\u53d6\u8fc7\u53bb\u3002\u5bf9\u4e8e\u8fd9\u79cd\u60c5\u51b5 master\u4f1a\u91cd\u65b0\u8fd0\u884ccrash\u7684worker\u3002 Reduce Worker crash \u540c\u6837\u5b58\u5728\u4e24\u79cd\u60c5\u51b5\uff0c\u4e00\u79cd\u5c31\u662f\u4e2d\u9014crash\u4e86\uff0c\u8fd9\u79cd\u9700\u8981\u91cd\u65b0\u8fd0\u884c\uff0c\u53e6\u5916\u4e00\u79cd\u5c31\u662f\u7ed3\u679c\u5df2\u7ecf\u8f93\u51fa\u4e86\uff0c\u4f46\u662f\u8fdb\u7a0b \u5df2\u7ecfcrash\u4e86\uff0c\u5bf9\u4e8e\u8fd9\u79cd\u60c5\u51b5\u4e0b\u4e0d\u9700\u8981\u91cd\u65b0\u8fd0\u884cworker\uff0c\u56e0\u4e3aReduce\u9636\u6bb5\u7684\u8f93\u51fa\u662f\u4fdd\u5b58\u5728\u5168\u5c40\u7684GFS\u6587\u4ef6\u7cfb\u7edf \u4e2d\u7684\u3002 Reduce Worker\u5728\u6587\u4ef6\u5199\u5165\u8fc7\u7a0b\u4e2dcrash \u8fd9\u4e2a\u662f\u901a\u8fc7\u539f\u5b50\u7684rename\u4fdd\u8bc1\uff0c\u5199\u5165\u7ed3\u679c\u7684\u65f6\u5019\u662f\u5148\u5199\u5165\u5230\u4e2d\u95f4\u6587\u4ef6\u4e2d\uff0c\u7136\u540e\u539f\u5b50\u7684\u8fdb\u884c\u91cd\u547d\u540d\u3002","title":"MapReduce\u5982\u4f55\u505acrash\u6062\u590d?"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/course/6.824/lecture1/paper-note/#_3","text":"\u7528\u6237\u7a0b\u5e8f\u51fa\u73b0bug\u5bfc\u81f4Map Reduce\u5728\u5904\u7406\u67d0\u4e9b\u6570\u636e\u7684\u65f6\u5019crash? \u901a\u5e38\u505a\u6cd5\u662f\u4fee\u590dbug\u7136\u540e\u518d\u6b21\u8fd0\u884c\uff0c\u4f46\u662f\u6709\u7684\u65f6\u5019\u5bfb\u627e\u8fd9\u4e2abug\u5e76\u4fee\u590d\u5b83\u5e76\u4e0d\u662f\u4e00\u4ef6\u5bb9\u6613\u7684\u4e8b\u60c5\u3002MapReduce\u4f1a\u901a\u8fc7\u7ed9\u6bcf\u4e2aworker\u8fdb\u7a0b\u8bbe\u7f6e\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u6765\u6355\u6349\u5185\u5b58\u6bb5\u5f02\u5e38\u548c\u603b\u7ebf\u9519\u8bef\u3002\u5728MapReduce\u5e93\u5728\u64cd\u4f5c\u4e4b\u524d\u4f1a\u901a\u8fc7\u5168\u5c40\u53d8\u91cf\u8bb0\u5f55\u5e8f\u53f7\u3002 \u5982\u679c\u7528\u6237\u7a0b\u5e8f\u89e6\u53d1\u4e86\u4e00\u4e2a\u7cfb\u7edf\u4fe1\u53f7\uff0c\u6d88\u606f\u5904\u7406\u51fd\u6570\u4f1a\u7528\u6700\u540e\u4e00\u53e3\u6c14\u901a\u5173UDP\u5305\u5411master\u53d1\u9001\u5904\u7406\u7684\u6700\u540e\u4e00\u6761\u8bb0\u5f55\u5e8f\u53f7\u3002\u800cmaster\u5982\u679c\u770b\u5230\u67d0\u6761\u7279\u5b9a\u8bb0\u5f55\u5931\u8d25\u591a\u6b21\uff0c\u90a3\u4e48\u4e0b\u6b21\u91cd\u65b0\u6267\u884c\u7684\u65f6\u5019\u5c31\u4f1a\u5bf9\u8fd9\u6761\u6570\u636e\u7684\u5904\u7406\u3002 \u5982\u4f55\u5bf9MapReduce\u8fdb\u884c\u8c03\u8bd5? \u63d0\u4f9b\u4e00\u5957MapReduce\u7684\u672c\u5730\u7248\u672c\u7528\u4e8e\u8c03\u8bd5\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u4f7f\u7528\u672c\u5730\u8c03\u8bd5\u5de5\u5177\u6765\u8c03\u8bd5MapReduce\u3002","title":"\u5176\u4ed6\u95ee\u9898"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/course/6.824/lecture1/paper-note/#mapreduce_5","text":"\u4e0d\u9002\u5408map/shuffle/reduce\u8fd9\u79cd\u6a21\u5f0f\u7684\u5de5\u4f5c \u5c0f\u6570\u636e\u96c6 \u5bf9\u4e8e\u5927\u6570\u636e\u7684\u7684\u5c0f\u66f4\u65b0(\u4f8b\u5982\u6dfb\u52a0\u4e00\u4e2a\u5c0f\u7684\u6587\u6863\u5230\u4e00\u4e2a\u5f88\u5927\u7684\u7d22\u5f15\u4e2d) \u975e\u9884\u671f\u7684\u8bfb \u591a\u6b21shuffle(Shuffle\u63cf\u8ff0\u7740\u6570\u636e\u4ecemap task\u8f93\u51fa\u5230reduce task\u8f93\u5165\u7684\u8fd9\u6bb5\u8fc7\u7a0b)\uff0c\u4f8b\u5982pagerank\u7b97\u6cd5 \u867d\u7136\u53ef\u4ee5\u901a\u8fc7\u591a\u6b21MR\u6765\u89e3\u51b3\uff0c\u4f46\u662f\u8fd9\u79cd\u65b9\u5f0f\u6548\u7387\u4e0d\u9ad8\u3002","title":"\u54ea\u4e9b\u5e94\u7528\u7a0b\u5e8f\u4e0d\u9002\u5408MapReduce?"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/course/6.824/lecture1/paper-note/#_4","text":"mapreduce","title":"\u53c2\u8003\u6587\u732e:"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/course/Ultimate_Go_Programing/","text":"Ultimate Go Programing Lesson 1: Design Guidelines Philosophy Open Your Mind: Technology changes quickly but people's minds change slowly. Easy to adopt new technology but hard to adopt new ways of thinking. Interesting Questions - What do they mean to you? Is it a good program? Is it an efficient program? Is it correct? Was it done on time? What did it cost? Aspire To Be a champion for quality, efficiency and simplicity. Have a point of view. Value introspection and self-review. Reading Code Tip \u201cIf most computer people lack understanding and knowledge, then what they will select will also be lacking.\u201d - Alan Kay \"The software business is one of the few places we teach people to write before we teach them to read.\" - Tom Love (inventor of Objective C) \"Code is read many more times than it is written.\" - Dave Cheney \"Programming is, among other things, a kind of writing. One way to learn writing is to write, but in all other forms of writing, one also reads. We read examples both good and bad to facilitate learning. But how many programmers learn to write programs by reading programs?\" - Gerald M. Weinberg \"Skill develops when we produce, not consume.\" - Katrina Owen Productivity vs Performance \u9075\u5faaGo\u7684idioms\u548cguideliness\uff0c\u6211\u4eec\u5c06\u4f1a\u540c\u65f6\u62e5\u6709\u6027\u80fd\u548c\u5f00\u53d1\u6548\u7387\uff0c\u5728\u8fc7\u4e8e\u8fd9\u662f\u9700\u8981\u4e8c\u9009\u4e00\u7684\uff0c\u800c\u5927\u5bb6\u66f4\u591a\u662f\u9009\u62e9\u4e86\u5f00\u53d1\u6548\u7387\uff0c\u5e76\u5e0c\u671b\u901a\u8fc7\u786c\u4ef6\u7684\u53d1\u5c55\u6765\u63d0\u9ad8\u6027\u80fd\u3002\u8fd9\u4e5f\u5bfc\u81f4\u4e86\u4e3a\u6b64\u8bbe\u8ba1\u7684\u8bed\u8a00\u4ea7\u751f\u4e86\u5927\u91cf\u4f4e\u6548\u7684\u8f6f\u4ef6\u3002 Correctness vs Performance \u60a8\u60f3\u8981\u7f16\u5199\u9488\u5bf9\u6b63\u786e\u6027\u8fdb\u884c\u4e86\u4f18\u5316\u7684\u4ee3\u7801\u3002\u4e0d\u8981\u6839\u636e\u60a8\u8ba4\u4e3a\u53ef\u80fd\u4f1a\u66f4\u597d\u7684\u6027\u80fd\u6765\u505a\u51fa\u7f16\u7801\u51b3\u7b56\u3002\u60a8\u5fc5\u987b\u8fdb\u884c\u57fa\u51c6\u6d4b\u8bd5\u4ee5\u4e86\u89e3\u4ee3\u7801\u662f\u5426\u4e0d\u591f\u5feb\u4ee5\u6b64\u6765\u51b3\u5b9a\u662f\u5426\u9700\u8981\u4f18\u5316\u3002 Tip \"Make it correct, make it clear, make it concise, make it fast. In that order.\" - Wes Dyer \"Good engineering is less about finding the \"perfect\" solution and more about understanding the tradeoffs and being able to explain them.\" - JBD \"The correctness of the implementation is the most important concern, but there is no royal road to correctness. It involves diverse tasks such as thinking of invariants, testing and code reviews. Optimization should be done, but not prematurely.\" - Al Aho (inventor of AWK) \"The basic ideas of good style, which are fundamental to write clearly and simply, are just as important now as they were 35 years ago. Simple, straightforward code is just plain easier to work with and less likely to have problems. As programs get bigger and more complicated, it's even more important to have clean, simple code.\" - Brian Kernighan \"Problems can usually be solved with simple, mundane solutions. That means there's no glamorous work. You don't get to show off your amazing skills. You just build something that gets the job done and then move on. This approach may not earn you oohs and aahs, but it lets you get on with it.\" - Jason Fried Code Reviews \u6ca1\u6709\u8bbe\u8ba1\u54f2\u5b66\uff0c\u60a8\u5c31\u65e0\u6cd5\u770b\u4e00\u6bb5\u4ee3\u7801\uff0c\u51fd\u6570\u6216\u7b97\u6cd5\uff0c\u5e76\u786e\u5b9a\u5b83\u662f\u597d\u662f\u574f\u3002\u8fd9\u56db\u4e2a\u4e3b\u8981\u7c7b\u522b\u662f\u4ee3\u7801\u5ba1\u67e5\u7684\u57fa\u7840\uff0c\u5e94\u6309\u6b64\u987a\u5e8f\u6392\u5217\u4f18\u5148\u7ea7\uff1a\u5b8c\u6574\u6027\uff0c\u53ef\u8bfb\u6027\uff0c\u7b80\u5355\u6027\u548c\u6027\u80fd\u3002\u60a8\u5fc5\u987b\u6709\u610f\u8bc6\u5730\u5e76\u4e14\u6709\u5145\u5206\u7684\u7406\u7531\u80fd\u591f\u89e3\u91ca\u60a8\u9009\u62e9\u7684\u7c7b\u522b\u3002 Code Reviews Integrity We need to become very serious about reliability. Integrity is about every allocation, read and write of memory being accurate, consistent and efficient. The type system is critical to making sure we have this micro level of integrity. Integrity is about every data transformation being accurate, consistent and efficient. Writing less code and error handling is critical to making sure we have this macro level of integrity. Write Less Code Tips There have been studies that have researched the number of bugs you can expect to have in your software. The industry average is around 15 to 50 bugs per 1000 lines of code. One simple way to reduce the number of bugs, and increase the integrity of your software, is to write less code. Error Handling Tips When error handling is treated as an exception and not part of the main code, you can expect the majority of your critical failures to be due to error handling. Readability \u4ee3\u7801\u8981\u6613\u4e8e\u9605\u8bfb\u548c\u7406\u89e3\uff0c\u800c\u65e0\u9700\u82b1\u8d39\u7cbe\u529b\u3002\u540c\u6837\u91cd\u8981\u7684\u662f\uff0c\u5b83\u4e0d\u9690\u85cf\u6bcf\u884c\u4ee3\u7801\uff0c\u529f\u80fd\uff0c\u7a0b\u5e8f\u5305\u53ca\u5176\u8fd0\u884c\u7684\u6574\u4f53\u751f\u6001\u7cfb\u7edf\u7684\u6210\u672c/\u5f71\u54cd\u3002 Code Must Never Lie Simplicity \u6211\u4eec\u5fc5\u987b\u4e86\u89e3\uff0c\u7b80\u5355\u6027\u5f88\u96be\u8bbe\u8ba1\uff0c\u800c\u4e14\u6784\u5efa\u8d77\u6765\u5f88\u590d\u6742\u3002\u6211\u4eec\u5fc5\u987b\u5c06\u8bb8\u591a\u7ef4\u62a4\u548c\u8bbe\u8ba1\u53d8\u5f97\u7b80\u5355\uff0c\u56e0\u4e3a\u8fd9\u53ef\u80fd\u5bfc\u81f4\u66f4\u591a\u7684\u95ee\u9898\u3002\u5b83\u53ef\u80fd\u4f1a\u5f15\u8d77\u53ef\u8bfb\u6027\u95ee\u9898\uff0c\u5e76\u53ef\u80fd\u5bfc\u81f4\u6027\u80fd\u95ee\u9898\u3002 Tips \"Simplicity is a great virtue but it requires hard work to achieve it and education to appreciate it. And to make matters worse: complexity sells better.\" - Edsger W. Dijkstra \"Everything should be made as simple as possible, but not simpler.\" - Albert Einstein \"You wake up and say, I will be productive, not simple, today.\" - Dave Cheney \u5c01\u88c5\u662f\u6211\u4eec40\u5e74\u6765\u4e00\u76f4\u8bd5\u56fe\u89e3\u51b3\u7684\u95ee\u9898\u3002 Go\u5bf9\u8be5\u8f6f\u4ef6\u5305\u91c7\u53d6\u4e86\u4e00\u79cd\u65b0\u7684\u65b9\u6cd5\u3002\u63d0\u5347\u5c01\u88c5\u6c34\u5e73\uff0c\u5e76\u5728\u8bed\u8a00\u7ea7\u522b\u63d0\u4f9b\u66f4\u4e30\u5bcc\u7684\u652f\u6301\u3002 Tips \"The purpose of abstraction is not to be vague, but to create a new semantic level in which one can be absolutely precise - Edsger W. Dijkstra Performance \u6211\u4eec\u5fc5\u987b\u51cf\u5c11\u8ba1\u7b97\u4ee5\u83b7\u5f97\u6240\u9700\u7684\u7ed3\u679c\u3002 Rules of Performance: * Never guess about performance. * Measurements must be relevant. * Profile before you decide something is performance critical. * Test to know you are correct. Micro-Optimizations \u5fae\u89c2\u4f18\u5316\u662f\u8981\u5c3d\u53ef\u80fd\u5730\u538b\u7f29\u6bcf\u4e2a\u4ee3\u7801\u5feb\u6027\u80fd\u3002\u5f53\u4ee5\u6b64\u4f18\u5148\u7ea7\u7f16\u5199\u4ee3\u7801\u65f6\uff0c\u5f88\u96be\u7f16\u5199\u53ef\u8bfb\uff0c\u7b80\u5355\u6216\u60ef\u7528\u7684\u4ee3\u7801\u3002\u60a8\u6b63\u5728\u7f16\u5199\u5de7\u5999\u7684\u4ee3\u7801\uff0c\u8fd9\u4e9b\u4ee3\u7801\u53ef\u80fd\u9700\u8981 unsafe \u7684\u8f6f\u4ef6\u5305\uff0c\u6216\u8005\u53ef\u80fd\u9700\u8981\u653e\u5165\u6c47\u7f16\u4e2d\u3002 Lesson2: Language Syntax Variable When variables are being declared to their zero value, use the keyword var. When variables are being declared and initialized, use the short variable declaration operator. \u5c0f\u5fc3 := \u8d4b\u503c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 package main import ( \"fmt\" \"os\" ) func main () { var data [] string killswitch := os . Getenv ( \"KILLSWITCH\" ) if killswitch == \"\" { fmt . Println ( \"kill switch is off\" ) // data\u88ab\u5f53\u4f5c\u5168\u65b0\u7684\u53d8\u91cf\uff0c\u8986\u76d6\u4e86\u4e0a\u9762\u7684data data , err := getData () if err != nil { panic ( \"ERROR!\" ) } fmt . Printf ( \"Data was fetched! %d\\n\" , len ( data )) } for _ , item := range data { fmt . Println ( item ) } } func getData () ([] string , error ) { // Simulating getting the data from a datasource - lets say a DB. return [] string { \"there\" , \"are\" , \"no\" , \"strings\" , \"on\" , \"me\" }, nil } Reference What's in a name? Struct Memory alignment Tips All memory is allocated on an alignment boundary to minimize memory defragmentation. To determine the alignment boundary Go is using for your architecture, you can run the unsafe.Alignof function. The alignment boundary in Go for the 64bit Darwin platform is 8 bytes. So when Go determines the memory allocation for our structs, it will pad bytes to make sure the final memory footprint is a multiple of 8. The compiler will determine where to add the padding. \u4e3a\u4ec0\u4e48\u8981\u586b\u51451\u4e2a\u5b57\u8282\u5462\uff1f,\u8fd9\u4e2a\u76ee\u7684\u662f\u4e3a\u4e86\u8ba9\u6574\u4f53\u7684\u5927\u5c0f\u662f\u5b57\u7684\u500d\u6570\uff0c\u5b57\u957f\u4e00\u822c\u90fd\u662f2\u30014\u30018\u300116\u8fd9\u6837\u76842\u7684\u5e42\u6b21\u65b9\uff0c\u5bf9\u4e8e64\u4f4d\u7684CPU\u6765\u8bf4\uff0c\u8fd9\u91cc\u53ea\u9700\u8981\u586b\u51451\u4e2a\u5b57\u8282\u5c31\u53ef\u4ee5\u6ee1\u8db3\u8fd9\u4e2a\u8981\u6c42\u3002 CPU\u6bcf\u6b21\u8bfb\u53d6\u5185\u5b58\u90fd\u662f\u6309\u7167\u4e00\u4e2a\u5b57\u6765\u8bfb\u53d6\uff0c\u4e0d\u540c\u7684CPU\u67b6\u6784\u6240\u4ee3\u8868\u7684\u5927\u5c0f\u4e0d\u540c\uff0c\u5bf9\u4e8e64\u4f4d\u7684CPU\u6765\u8bf4\uff0c\u4e00\u4e2a\u5b57\u5c31\u662f8\u4e2a\u5b57\u8282\uff0cCPU\u6bcf\u6b21\u8bfb\u548c\u5199\u90fd\u53ea\u80fd\u64cd\u4f5c\u4e00\u4e2a\u5b57\u7684\u5185\u5b58\uff0c\u56e0\u6b64\u4e3a\u4e86\u9ad8\u6548\u7684\u8bfb\u53d6\u53d8\u91cf\uff0c\u6211\u4eec\u5e94\u8be5\u8ba9\u53d8\u91cf \u5360\u7528\u7684\u5185\u5b58\u63a7\u5236\u5728\u4e00\u4e2a\u5b57\u5185\uff0c\u800c\u4e0d\u662f\u8de8\u4e24\u4e2a\u5b57\uff0c\u8fd9\u6837\u4f1a\u5bfc\u81f4CPU\u591a\u8bfb\u53d6\u4e00\u6b21\u3002\u4e3a\u6b64\u6211\u4eec\u9700\u8981\u5bf9\u5185\u5b58\u8fdb\u884cpadding\uff0c\u4ee5\u4fdd\u8bc1\u53d8\u91cf\u4e0d\u4f1a\u8de8\u591a\u4e2a\u5b57\u5b58\u653e\u3002\u6bd4\u5982\u4e0b\u9762\u8fd9\u4e2a\u7ed3\u6784\u4f53\u3002 1 2 3 4 5 type Example struct { BoolValue bool IntValue int16 FloatValue float32 } \u4e0a\u9762\u7684 struct \u6700\u7ec8\u4f1apadding\u4e00\u4e2a\u5b57\u8282\uff0c\u603b\u5360\u7528\u4e3a8\u4e2a\u5b57\u8282\uff0c\u901a\u8fc7\u8fd9\u6bb5\u4ee3\u7801 alignment \u53ef\u4ee5\u770b\u51fa\uff0c BoolValue \u7684\u5730\u65b9\u586b\u5145\u4e86\u4e00\u4e2a\u5b57\u8282\u3002 Tips \u4e3a\u4ec0\u4e48\u662f\u5728 BoolValue \u5904\u586b\u5145\u4e00\u4e2a\u5b57\u8282\u5462?\uff0c\u800c\u4e0d\u662f\u5728 IntValue \u7684\u65c1\u8fb9\u586b\u5145\uff1f \u6216\u8005\u662f\u5728 FloatValue \u7684\u65c1\u8fb9\u586b\u5145\u5462? \u53ef\u4ee5\u8bd5\u7740\u679a\u4e3e\u4e00\u4e0b\uff0c\u5982\u679c\u662f\u5728 IntValue \u5904\u586b\u51451\u4e2a\u5b57\u8282\uff0c\u90a3\u4e48\u5982\u679c\u5b57\u957f\u662f2\u5b57\u8282\uff0c\u90a3\u4e48 IntValue \u5c31\u4f1a\u8de8\u591a\u4e2a\u5b57\u5b58\u653e(\u4e00\u534a\u5728\u524d\u4e00\u4e2a\u5b57\uff0c\u4e00\u534a\u5728\u540e\u4e00\u4e2a\u5b57)\uff0c\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u53ea\u80fd\u662f\u5728 BoolValue \u5904\u586b\u5145\u3002 \u5927\u5bb6\u53ef\u4ee5\u8bd5\u7740\u679a\u4e3e\u4e0b\uff0c\u5047\u8bbe\u4f4d\u957f\u4f4d2\u30014\u30018\u7684\u65f6\u5019\uff0c\u5728\u54ea\u91cc\u586b\u5145\u53ef\u4ee5\u907f\u514d\u8de8\u591a\u4e2a\u5b57\u5b58\u653e\uff0c\u6700\u540e\u7684\u7ed3\u8bba\u5c31\u662f\u5728 BoolValue \u5904\u5b58\u653e\u6700\u4f73\u3002 Anonymous struct Go\u4e2d\u662f\u4e0d\u5141\u8bb8\u9690\u5f0f\u7c7b\u578b\u8f6c\u6362\u7684\uff0c\u4e24\u4e2a\u4e0d\u540c\u7684struct\u5373\u4f7f\u662f\b\u5177\u6709\u5b8c\u5168\u76f8\u540c\u7684\u5b57\u6bb5\u548c\u987a\u5e8f\uff0c\u4e5f\u4e0d\u80fd\u8fdb\u884c\u9690\u5f0f\u8f6c\u6362\u3002\u4f46\u662f\u901a\u8fc7\u533f\u540dstruct\u5c31\u53ef\u4ee5\u505a\u4e86\u3002\u5177\u4f53\u4ee3\u7801\u89c1 anonymous_struct.go Tips \"Implicit conversion of types is the Halloween special of coding. Whoever thought of them deserves their own special hell.\" - Martin Thompson \u6211\u4eec\u5e94\u8be5\u5c3d\u53ef\u80fd\u53bb\u907f\u514d\u4f7f\u7528\u9690\u5f0f\u8f6c\u6362\u3002 Embedded Types \u7ed3\u6784\u4f53\u7c7b\u578b\u53ef\u4ee5\u5305\u542b\u533f\u540d\u6216\u5d4c\u5165\u5f0f\u5b57\u6bb5\u3002\u8fd9\u4e5f\u79f0\u4e3a\u5d4c\u5165\u7c7b\u578b\uff0c\u5f53\u6211\u4eec\u5c06\u4e00\u4e2a\u7c7b\u578b\u5d4c\u5165\u5230\u7ed3\u6784\u4e2d\u65f6\uff0c\u8be5\u7c7b\u578b\u7684\u540d\u79f0\u5c06\u5145\u5f53\u968f\u540e\u5d4c\u5165\u5b57\u6bb5\u7684\u5b57\u6bb5\u540d\u79f0\u3002 1 2 3 4 type Admin struct { User Level string } \u8fd9\u5e76\u975e\u7ee7\u627f\uff0c\u800c\u662f\u4e00\u79cd\u7ec4\u5408\u6a21\u5f0f\uff0c\u63a5\u7740\u6211\u4eec\u6765\u770b\u770b\u5982\u4f55\u521b\u5efa\u5e26\u6709\u5d4c\u5165\u5f0f\u5b57\u6bb5\u7684 struct 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 func main () { admin := & Admin { // \u548c\u521b\u5efa\u666e\u901a\u7684struct\u4e00\u6837\uff0c\u4f7f\u7528\u7c7b\u578b\u540d\u4f5c\u4e3a\u5b57\u6bb5\u540d User : User { Name : \"john smith\" , Email : \"john@email.com\" , }, Level : \"super\" , } SendNotification ( admin ) } // Output User : Sending User Email To john smith < john @ email . com > \u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u7684\u7ec4\u5408\uff0c\u4f7f\u5f97Admin\u5b9e\u73b0User\u6240\u6709\u7684\u63a5\u53e3\u3002 Reference Understanding Type in Go Object Oriented Programming in Go Padding is hard Pointer \u6307\u9488\u8bed\u4e49\u548c\u503c\u8bed\u4e49\uff0c\u524d\u8005\u662f\u5171\u4eab\u7684\uff0c\u5b58\u5728\u526f\u4f5c\u7528\uff0c\u6d89\u53ca\u5230data race\u3001\u9003\u9038\u5206\u6790\u7b49\uff0c\u800c\u540e\u8005\u65e0\u526f\u4f5c\u7528\uff0c\u4f46\u662f\u5b58\u5728\u62f7\u8d1d\u5f00\u9500\u3002 \u5728Go\u4e2d\u662fgoroutine\u4e2d\u662f\u6ca1\u529e\u6cd5\u6307\u5411\u53e6\u5916\u4e00\u4e2agoroutine\u7684\u6808\u7684\uff0c\u8fd9\u662f\u56e0\u4e3agoroutine\u7684\u6808\u662f\u4f1a\u589e\u957f\u7684\uff0c\u5982\u679c\u53d1\u751f\u589e\u957f\u4f1a\u5bfc\u81f4\u6808\u88ab\u62f7\u8d1d\u5230\u53e6\u5916\u4e00\u4e2a\u66f4\u5927\u7684\u6808\u7a7a\u95f4\u4e0a\uff0c\u8fd9\u5c31\u5bfc\u81f4\u4e86\u6307\u9488\u5931\u6548\u4e86\u3002\u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801\u6f14\u793a\u4e86\u6808\u589e\u957f\u7684\u60c5\u51b5\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 package main // Number of elements to grow each stack frame. // Run with 10 and then with 1024 const size = 1024 // main is the entry point for the application. func main () { s := \"HELLO\" stackCopy ( & s , 0 , [ size ] int {}) } // stackCopy recursively runs increasing the size // of the stack. func stackCopy ( s * string , c int , a [ size ] int ) { println ( c , s , * s ) c ++ if c == 10 { return } stackCopy ( s , c , a ) } Tip \u4e0e GCC \u76f8\u4f3c\uff0c\u5728 Golang \u7684 goroutine \u7684\u5b9e\u73b0\u4e2d\u4e5f\u5e94\u7528\u4e86\u7c7b\u4f3c\u7684\u6280\u672f\u3002\u5728 1.3 \u7248\u672c\u53ca\u4ee5\u524d\u91c7\u7528\u7684\u662f\u5206\u6bb5\u6808\u7684\u5b9e\u73b0\uff0c\u5728\u521d\u59cb\u65f6\u4f1a\u5bf9\u6bcf\u4e2a goroutine \u5206\u914d 8KB \u7684\u5185\u5b58\uff0c\u800c\u5728 goroutine \u5185\u90e8\u6bcf\u4e2a\u51fd\u6570\u7684\u8c03\u7528\u65f6\uff0c\u4f1a\u68c0\u67e5\u6808\u7a7a\u95f4\u662f\u5426\u8db3\u591f\u4f7f\u7528\uff0c\u82e5\u4e0d\u591f\u5219\u8c03\u7528 morestack \u8fdb\u884c\u989d\u5916\u7684\u6808\u7a7a\u95f4\u7533\u8bf7\uff0c\u7533\u8bf7\u5b8c\u6bd5\u540e\u8fde\u63a5\u5230\u65e7\u6808\u7a7a\u95f4\u4e0a\uff0c\u5728\u51fd\u6570\u7ed3\u675f\u65f6\u4f1a\u8c03\u7528 lessstack \u6765\u56de\u6536\u591a\u4f59\u7684\u6808\u7a7a\u95f4\u3002\u7531\u4e8e\u6808\u7684\u7f29\u51cf\u662f\u4e00\u4e2a\u76f8\u5bf9\u6765\u8bf4\u5f00\u9500\u8f83\u5927\u7684\u903b\u8f91\uff0c\u5c24\u5176\u5728\u4e00\u4e2a\u8f83\u6df1\u7684\u9012\u5f52\u4e2d\uff0c\u4f1a\u6709\u8f83\u591a\u7684 morestack \u548c lessstack \u8c03\u7528\uff0c\u8fd9\u79cd\u95ee\u9898\u88ab\u6210\u4e3a\u70ed\u5206\u88c2\u95ee\u9898\u3002Golang 1.4 \u901a\u8fc7\u6808\u590d\u5236\u6cd5\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u5728\u6808\u7a7a\u95f4\u4e0d\u8db3\u65f6\uff0c\u4e0d\u4f1a\u7533\u8bf7\u4e00\u4e2a\u65b0\u7684\u6808\u7a7a\u95f4\u5757\u94fe\u63a5\u5230\u8001\u7684\u6808\u7a7a\u95f4\u5feb\u4e0a\uff0c\u800c\u662f\u521b\u5efa\u4e00\u4e2a\u539f\u6765\u4e24\u500d\u5927\u5c0f\u7684\u6808\u7a7a\u95f4\u5757\uff0c\u5e76\u5c06\u65e7\u6808\u4fe1\u606f\u62f7\u8d1d\u81f3\u65b0\u6808\u4e2d\u3002\u8fd9\u6837\u5bf9\u4e8e\u6808\u7684\u7f29\u51cf\uff0c\u6ca1\u6709\u591a\u4f59\u7684\u5f00\u9500\uff0c\u540c\u65f6\u5728\u7b2c\u4e8c\u6b21\u62d3\u5c55\u6808\u65f6\uff0c\u4e5f\u65e0\u9700\u518d\u6b21\u7533\u8bf7\u7a7a\u95f4\u3002\u9488\u5bf9\u6808\u590d\u5236\u4e2d\u6307\u9488\u7684\u95ee\u9898\uff0c\u7531\u4e8e\u5783\u573e\u56de\u6536\u673a\u5236\u7684\u5b58\u5728\uff0c\u53ef\u4ee5\u627e\u5230\u54ea\u90e8\u5206\u7684\u6808\u4f7f\u7528\u4e86\u6307\u9488\uff0c\u901a\u8fc7\u5bf9\u5e94\u53ef\u4ee5\u5c06\u6307\u9488\u5730\u5740\u8fdb\u884c\u76f8\u5e94\u7684\u66f4\u65b0\u3002 \u9003\u9038\u5206\u6790 \u5f53\u51fd\u6570\u4e2d\u8fd4\u56de\u7684\u503c\u88ab\u51fd\u6570\u5916\u6240\u5f15\u7528\u7684\u65f6\u5019\uff0c\u4f1a\u5bfc\u81f4\u8fd9\u4e2a\u503c\u8fdb\u884c\u4e86\u9003\u9038\uff0c\u5206\u914d\u5728\u5806\u4e0a\uff0c\u4f8b\u5982\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 package main type user struct { name string email string } func main () { u1 := createUser () println ( \"u1\" , & u1 ) } // \u8fd9\u91cc\u8fd4\u56de\u7684\u6307\u9488\u6307\u5411\u6808\u4e0a\u5206\u914d\u7684user\uff0c\u8fd9\u4f1a\u5bfc\u81f4\u9003\u9038\u5206\u6790\u751f\u6548 // \u5c06user\u5206\u914d\u5728\u5806\u4e0a\uff0c\u907f\u514d\u56e0\u4e3a\u51fd\u6570\u7ed3\u675f\u6808\u88ab\u6e05\u7406\u5bfc\u81f4\u6307\u9488\u5931\u6548\u3002 // \u907f\u514d\u5185\u8054\uff0c\u5426\u5219\u5c31\u6ca1\u6709\u9003\u9038\u5206\u6790\u4e86 //go:noinline func createUser () * user { u := user { name : \"Bill\" , email : \"bill@ardanlabs.com\" , } println ( \"U\" , & u ) return & u } \u9003\u9038\u5206\u6790\u7684\u7ed3\u679c\u5982\u4e0b escape1.go : 1 2 3 4 5 6 7 8 ./escape.go:17:6: cannot inline createUserV1: marked go:noinline ./escape.go:31:6: cannot inline createUserV2: marked go:noinline ./escape.go:8:6: cannot inline main: function too complex: cost 133 exceeds budget 80 ./escape.go:32:2: u escapes to heap: ./escape.go:32:2: flow: ~r0 = & u: ./escape.go:32:2: from & u ( address-of ) at ./escape.go:38:9 ./escape.go:32:2: from return & u ( return ) at ./escape.go:38:2 ./escape.go:32:2: moved to heap: u \u5f53\u7f16\u8bd1\u5668\u53d1\u73b0\u4e00\u4e2a\u503c\u7684\u5927\u5c0f\u65e0\u6cd5\u5728\u6808\u4e0a\u5b58\u653e\u7684\u65f6\u5019\u4f1a\u5c06\u5176\u5206\u914d\u5728\u5806\u4e0a \u5f53\u7f16\u8bd1\u5668\u65e0\u6cd5\u5728\u7f16\u8bd1\u65f6\u77e5\u9053\u503c\u7684\u5927\u5c0f\u65f6\u5c31\u9009\u62e9\u5728\u5806\u4e0a\u8fdb\u884c\u5206\u914d 1 2 3 4 5 6 7 8 9 10 11 12 13 package main import ( \"bytes\" ) func main () { size := 10 // size\u7684\u503c\u662f\u7f16\u8bd1\u65f6\u65e0\u6cd5\u77e5\u9053\u7684\uff0c\u5982\u679c\u8fd9\u91cc\u6539\u621010\uff0c\u5c31\u4e0d\u4f1a\u6709\u9003\u9038\u5206\u6790\u4e86 b := make ([] byte , size ) c := bytes . NewBuffer ( b ) c . WriteString ( \"test\" ) } \u9003\u9038\u5206\u6790\u7684\u7ed3\u679c\u5982\u4e0b escape2.go : 1 2 3 4 5 6 7 ./escape2.go:7:6: cannot inline main: function too complex: cost 84 exceeds budget 80 ./escape2.go:10:22: inlining call to bytes.NewBuffer func ([] byte ) *bytes.Buffer { return & bytes.Buffer literal } ./escape2.go:9:11: make ([] byte, size ) escapes to heap: ./escape2.go:9:11: flow: { heap } = & { storage for make ([] byte, size )} : ./escape2.go:9:11: from make ([] byte, size ) ( non-constant size ) at ./escape2.go:9:11 ./escape2.go:9:11: make ([] byte, size ) escapes to heap ./escape2.go:10:22: & bytes.Buffer literal does not escape \u5f53\u53d8\u91cf\u8d4b\u503c\u7ed9interface\u6216\u8005\u51fd\u6570\u7684\u65f6\u5019\u4f1a\u5bfc\u81f4\u9003\u9038 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 package main import ( \"bytes\" ) //go:noinline func InterfaceMethod ( value interface {}) { } func main () { size := 10 b := make ([] byte , size ) c := bytes . NewBuffer ( b ) c . WriteString ( \"test\" ) // \u5bfc\u81f4\u9003\u9038\u5206\u6790 InterfaceMethod ( c ) } \u9003\u9038\u5206\u6790\u7684\u7ed3\u679c\u5982\u4e0b escape3.go : 1 2 3 4 5 6 7 8 9 ./escape3.go:8:6: cannot inline InterfaceMethod: marked go:noinline ./escape3.go:11:6: cannot inline main: function too complex: cost 145 exceeds budget 80 ./escape3.go:14:22: inlining call to bytes.NewBuffer func ([] byte ) *bytes.Buffer { return & bytes.Buffer literal } ./escape3.go:8:22: value does not escape ./escape3.go:13:11: make ([] byte, size ) escapes to heap: ./escape3.go:13:11: flow: { heap } = & { storage for make ([] byte, size )} : ./escape3.go:13:11: from make ([] byte, size ) ( non-constant size ) at ./escape3.go:13:11 ./escape3.go:13:11: make ([] byte, size ) escapes to heap ./escape3.go:14:22: & bytes.Buffer literal does not escape \u8d4b\u503c\u7ed9\u6307\u9488\u5bfc\u81f4\u7684\u9003\u9038 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 func BenchmarkAssignmentIndirect ( b * testing . B ) { type X struct { p * int } for i := 0 ; i < b . N ; i ++ { var i1 int x1 := & X { p : & i1 , // GOOD: i1 does not escape } _ = x1 var i2 int x2 := & X {} x2 . p = & i2 // BAD: Cause of i2 escape } } \u9003\u9038\u5206\u6790\u7684\u7ed3\u679c\u5982\u4e0b example1_test.go 1 2 3 4 5 6 7 8 9 ./example1_test.go:5:6: cannot inline BenchmarkAssignmentIndirect: unhandled op DCLTYPE ./example1_test.go:16:7: i2 escapes to heap: ./example1_test.go:16:7: flow: { heap } = & i2: ./example1_test.go:16:7: from & i2 ( address-of ) at ./example1_test.go:18:10 ./example1_test.go:16:7: from x2.p = & i2 ( assign ) at ./example1_test.go:18:8 ./example1_test.go:5:34: b does not escape ./example1_test.go:16:7: moved to heap: i2 ./example1_test.go:11:9: & X literal does not escape ./example1_test.go:17:9: & X literal does not escape \u5982\u679c\u662f\u8d4b\u503c\u7ed9\u6307\u9488\u7684\u6307\u9488\u4e5f\u662f\u4f1a\u5bfc\u81f4\u9003\u9038\u7684\u3002 1 2 3 4 5 6 7 8 package main func main () { i := 0 pp := new ( * int ) * pp = & i // BAD: i escapes _ = pp } \u9003\u9038\u5206\u6790\u7684\u7ed3\u679c\u5982\u4e0b escape4.go 1 2 3 4 5 6 7 ./escape4.go:3:6: can inline main with cost 20 as: func () { i : = 0 ; pp : = new ( *int ) ; *pp = & i ; _ = pp } ./escape4.go:4:2: i escapes to heap: ./escape4.go:4:2: flow: { heap } = & i: ./escape4.go:4:2: from & i ( address-of ) at ./escape4.go:6:8 ./escape4.go:4:2: from *pp = & i ( assign ) at ./escape4.go:6:6 ./escape4.go:4:2: moved to heap: i ./escape4.go:5:11: new ( *int ) does not escape \u5bf9\u4e8e\u63a5\u53e3\u7684\u4f7f\u7528\u610f\u89c1: Use an interface when: users of the API need to provide an implementation detail. API\u2019s have multiple implementations they need to maintain internally. parts of the API that can change have been identified and require decoupling. Don\u2019t use an interface: for the sake of using an interface. to generalize an algorithm. when users can declare their own interfaces. Tip go build -gcflags \"-m -m\" \u6dfb\u52a0gcflags\u53ef\u4ee5\u663e\u793a\u5904\u54ea\u4e9b\u53d8\u91cf\u8fdb\u884c\u4e86\u9003\u9038 Garbage Collection \u5783\u573e\u56de\u6536\u51e0\u4e2a\u9636\u6bb5: Mark Setup - STW \u5728\u8fd9\u4e2a\u9636\u6bb5\u9700\u8981\u627e\u5230\u4e00\u4e2a\u5b89\u5168\u70b9\uff0c\u8ba9\u6240\u6709\u7684goroutine\u90fd\u505c\u4e0b\u6765\uff0c\u57281.14\u4e4b\u524d\uff0cGo\u4e2d\u7684\u51fd\u6570\u8c03\u7528\u662f\u4e00\u4e2a\u5b89\u5168\u70b9\uff0c\u5f53gorountine\u6267\u884c\u51fd\u6570\u8c03\u7528\u7684\u65f6\u5019\u5c31\u505c\u6b62\uff0c\u4f46\u662f\u8fd9\u4e2a\u5b58\u5728\u4e00\u4e2a\u95ee\u9898\uff0c\u5982\u679c\u4e00\u4e2agoroutine \u4e00\u76f4\u5728\u505a\u5bc6\u96c6\u7684\u8ba1\u7b97\uff0c\u6ca1\u6709\u8fdb\u884c\u51fd\u6570\u8c03\u7528\uff0c\u8fd9\u4f1a\u5bfc\u81f4GC\u7684\u91c7\u96c6\u505c\u6b62\u4e0d\u524d\u3002\u57281.14\u540eGo\u4e2d\u5f15\u5165\u4e86\u62a2\u5360\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002 runtime: non-cooperative goroutine preemption Marking - Concurrent \u5728\u6807\u8bb0\u9636\u6bb5\uff0c\u5783\u573e\u56de\u6536\u4f1a\u63a7\u5236\u81ea\u5df1\u6240\u5360\u7528\u7684CPU\u4e3a\u6574\u4f53\u76841/4(\u5176\u4ed6\u7684CPU\u7528\u4e8e\u7a0b\u5e8f\u8fd0\u884c)\uff0c\u5728\u8fd9\u4e2a\u9636\u6bb5\uff0cGC\u4f1a\u626b\u63cfgoroutine\u7684\u6808\uff0c\u627e\u5230\u6808\u4e2d\u6307\u5411\u5806\u7684\u6307\u9488\u8fdb\u884c\u6807\u8bb0\u3002\u6807\u8bb0\u9636\u6bb5\u7684\u541e\u5410\u91cf\u4e3a 1MB/ms * 1/4 * CPU\u6838\u5fc3\u6570 \u5982\u679c\u5728\u6807\u8bb0\u9636\u6bb5\uff0c\u5e94\u7528\u5206\u914d\u5185\u5b58\u7684\u901f\u5ea6\u5927\u4e8e\u6807\u8bb0\u7684\u901f\u5ea6\uff0c\u8fd9\u4e2a\u65f6\u5019\u4f1a\u542f\u7528 Mark Assist \u5360\u7528\u66f4\u591a\u7684CPU\u6765\u534f\u52a9\u8fdb\u884c\u6807\u8bb0\u3002\u4f46\u662f\u4e0d\u4f1a\u5360\u7528\u592a\u591a\u7684 Mark Assist \uff0c\u4e0e\u5176\u8fd9\u6837\u5360\u7528\u592a\u591a Mark Assist \uff0c\u8fd8\u4e0d\u5982\u4eca\u65e9\u5f00\u542f\u4e0b\u4e00\u6b21GC\u56de\u6536\u3002\u6240\u4ee5GC\u4f1a\u63a7\u5236 Mark Assist \u7684\u6570\u91cf\u3002 Mark Termination - STW \u6807\u8bb0\u9636\u6bb5\u7684\u6700\u540e\u5de5\u4f5c\u662fMark Termination\uff0c\u5173\u95ed\u5185\u5b58\u5c4f\u969c\uff0c\u505c\u6b62\u540e\u53f0\u6807\u8bb0\u4ee5\u53ca\u8f85\u52a9\u6807\u8bb0\uff0c\u505a\u4e00\u4e9b\u6e05\u7406\u5de5\u4f5c\uff0c\u6574\u4e2a\u8fc7\u7a0b\u4e5f\u9700\u8981STW\uff0c\u5927\u6982\u9700\u898160-90\u5fae\u79d2\u3002\u5728\u6b64\u4e4b\u540e\uff0c\u6240\u6709\u7684P\u90fd\u80fd\u7ee7\u7eed\u4e3a\u5e94\u7528\u7a0b\u5e8fG\u670d\u52a1\u4e86\u3002 Sweeping - Concurrent \u5728\u6807\u8bb0\u5de5\u4f5c\u5b8c\u6210\u4e4b\u540e\uff0c\u5269\u4e0b\u7684\u5c31\u662f\u6e05\u7406\u8fc7\u7a0b\u4e86\uff0c\u6e05\u7406\u8fc7\u7a0b\u7684\u672c\u8d28\u662f\u5c06\u6ca1\u6709\u88ab\u4f7f\u7528\u7684\u5185\u5b58\u5757\u6574\u7406\u56de\u6536\u7ed9\u4e0a\u4e00\u4e2a\u5185\u5b58\u7ba1\u7406\u5c42\u7ea7(mcache -> mcentral -> mheap -> OS)\uff0c\u6e05\u7406\u56de\u6536\u7684\u5f00\u9500\u88ab\u5e73\u644a\u5230\u5e94\u7528\u7a0b\u5e8f\u7684\u6bcf\u6b21\u5185\u5b58\u5206\u914d\u64cd\u4f5c\u4e2d\uff0c \u76f4\u5230\u6240\u6709\u5185\u5b58\u90fdSweeping\u5b8c\u6210\u3002\u5f53\u7136\u6bcf\u4e2a\u5c42\u7ea7\u4e0d\u4f1a\u5168\u90e8\u5c06\u5f85\u6e05\u7406\u5185\u5b58\u90fd\u5f52\u8fd8\u7ed9\u4e0a\u4e00\u7ea7\uff0c\u907f\u514d\u4e0b\u6b21\u5206\u914d\u518d\u7533\u8bf7\u7684\u5f00\u9500\uff0c\u6bd4\u5982Go1.12\u5bf9mheap\u5f52\u8fd8OS\u5185\u5b58\u505a\u4e86\u4f18\u5316\uff0c\u4f7f\u7528NADV_FREE\u5ef6\u8fdf\u5f52\u8fd8\u5185\u5b58\u3002 GC percentage runtime\u4e2d\u6709\u4e00\u4e2a\u914d\u7f6e\u9009\u9879\u53eb\u505a GC Percentage\uff0c\u9ed8\u8ba4\u503c\u662f100\u3002\u8fd9\u4e2a\u503c\u4ee3\u8868\u4e86\u4e0b\u4e00\u6b21\u56de\u6536\u5f00\u59cb\u4e4b\u524d\uff0c\u6709\u591a\u5c11\u65b0\u7684\u5806\u5185\u5b58\u53ef\u4ee5\u5206\u914d\u3002GC Percentage\u8bbe\u7f6e\u4e3a100\u610f\u5473\u7740\uff0c\u57fa\u4e8e\u56de\u6536\u5b8c\u6210\u4e4b\u540e\u88ab\u6807\u8bb0\u4e3a\u751f\u5b58\u7684\u5806\u5185\u5b58\u6570\u91cf\uff0c\u4e0b\u4e00\u6b21\u56de\u6536\u7684\u5f00\u59cb\u5fc5\u987b\u5728\u6709100%\u4ee5\u4e0a\u7684\u65b0\u5185\u5b58\u5206\u914d\u5230\u5806\u5185\u5b58\u65f6\u542f\u52a8\u3002\u5982\u679c\u65b0\u5206\u914d\u7684\u5185\u5b58\u5e76\u6ca1\u6709\u5230\u8fbe100%\u5c31\u89e6\u53d1\u4e86\u4e0b\u4e00\u6b21GC\uff0c\u8fd9\u4e2a\u53ef\u80fd\u662f\u56e0\u4e3a\u5e94\u7528\u5185\u5b58\u5206\u914d\u901f\u5ea6\u592a\u5feb\uff0cGC\u4e0d\u5e0c\u671b\u5206\u914d\u592a\u591a\u7684 Mark Assist \uff0c\u56e0\u6b64\u5c3d\u5feb\u7684\u542f\u52a8\u4e86\u4e0b\u4e00\u6b21GC\u3002 GC Trcae GODEBUG=gctrace=1 \u5f00\u542fGC Trace GODEBUG=gctrace=1,gcpacertrace=1 \u5f00\u542f\u66f4\u8be6\u7ec6\u7684GC Trace 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 gc 1405 @6.068s 11 %: 0 .058+1.2+0.083 ms clock, 0 .70+2.5/1.5/0+0.99 ms cpu, 7 ->11->6 MB, 10 MB goal, 12 P gc 1406 @6.070s 11 %: 0 .051+1.8+0.076 ms clock, 0 .61+2.0/2.5/0+0.91 ms cpu, 8 ->11->6 MB, 13 MB goal, 12 P gc 1407 @6.073s 11 %: 0 .052+1.8+0.20 ms clock, 0 .62+1.5/2.2/0+2.4 ms cpu, 8 ->14->8 MB, 13 MB goal, 12 P \u5b57\u6bb5\u542b\u4e49\u5982\u4e0b: // General gc 1405 : The 1405 GC run since the program started @6.068s : Six seconds since the program started 11 % : Eleven percent of the available CPU so far has been spent in GC // Wall-Clock 0 .058ms : STW : Mark Start - Write Barrier on 1 .2ms : Concurrent : Marking 0 .083ms : STW : Mark Termination - Write Barrier off and clean up // CPU Time 0 .70ms : STW : Mark Start 2 .5ms : Concurrent : Mark - Assist Time ( GC performed in line with allocation ) 1 .5ms : Concurrent : Mark - Background GC time 0ms : Concurrent : Mark - Idle GC time 0 .99ms : STW : Mark Term // Memory 7MB : Heap memory in -use before the Marking started 11MB : Heap memory in -use after the Marking finished 6MB : Heap memory marked as live after the Marking finished 10MB : Collection goal for heap memory in -use after Marking finished // Threads 12P : Number of logical processors or threads used to run Goroutines GC\u8c03\u4f18\u7684\u610f\u89c1: Maintain the smallest heap possible. Find an optimal consistent pace. Stay within the goal for every collection. Minimize the duration of every collection, STW and Mark Assist. Compiler And Runtime Optimizations Non-scannable objects Garbage collector does not scan underlying buffers of slices, channels and maps when element type does not contain pointers (both key and value for maps). \u5783\u573e\u56de\u6536\u671f\u4e0d\u4f1a\u626b\u63cf\u5143\u7d20\u662f\u6307\u9488\u7c7b\u578b\u7684map\u3001slices\u3001channnel\u3002\u4e0b\u9762\u8fd9\u4e2amap\u5c31\u4e0d\u4f1a\u5f71\u54cdGC\u7684\u91c7\u96c6\u65f6\u95f4\u3002 1 2 3 4 5 6 7 type Key [ 64 ] byte // SHA-512 hash type Value struct { Name [ 32 ] byte Balance uint64 Timestamp int64 } m := make ( map [ Key ] Value , 1e8 ) Function Inlining \u53ea\u6709\u5c0f\u7684\u3001\u77ed\u7684\u51fd\u6570\u624d\u4f1a\u5185\u8054\uff0c\u51fd\u6570\u4e2d\u8981\u5c0f\u4e8e40\u4e2a\u8868\u8fbe\u5f0f\u3001\u5e76\u4e14\u4e0d\u5305\u542b\u590d\u6742\u7684\u8bed\u53e5\uff0c\u6bd4\u5982loop\u3001labels\u3001closures\u3001panic\u3001recover\u3001select\u3001switch\u7b49 go build -x \u663e\u793abuild\u7684\u8fc7\u7a0b go build -gcflags=\"-S\" \u663e\u793agolang\u4e2d\u95f4\u6c47\u7f16\u7ed3\u679c go tool objdump -s main.main hello \u4e8c\u8fdb\u5236\u53cd\u6c47\u7f16 go tool nm escape1 \u67e5\u770b\u4e8c\u8fdb\u5236\u7b26\u53f7\u4fe1\u606f GOSSAFUNC=main go build && open ssa.html SSA \u4ee3\u8868 static single-assignment\uff0c\u662f\u4e00\u79cdIR(\u4e2d\u95f4\u8868\u793a\u4ee3\u7801)\uff0c\u8981\u4fdd\u8bc1\u6bcf\u4e2a\u53d8\u91cf\u53ea\u88ab\u8d4b\u503c\u4e00\u6b21\u3002 go build -gcflags=\"-m\" \u9003\u9038\u5206\u6790 go build -gcflags=\"-l -N\" \u7981\u6b62\u4f18\u5316\u548c\u7981\u6b62\u5185\u8054 Constans \u5728Go\u4e2d\u662f\u4e0d\u80fd\u5728\u4e0d\u540c\u7684\u6570\u5b57\u7c7b\u578b\u7684\u53d8\u91cf\u4e4b\u95f4\u505a\u64cd\u4f5c\u7684\uff0c\u6bd4\u5982\u4e0d\u80fd\u7528float64\u548cint\u4e4b\u95f4\u505a\u64cd\u4f5c\uff0c\u9700\u8981\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362\uff0c\u4f46\u662f\u6709\u7684\u65f6\u5019\u6211\u4eec\u53d1\u73b0\u6211\u4eec\u53ef\u4ee5\u505a\u7c7b\u4f3c 2 * time.Second \u3001 1 << ('t' + 2.0) \u8fd9\u6837\u7684\u64cd\u4f5c\uff0c\u8fd9\u662f\u56e0\u4e3a\u4ed6\u4eec\u90fd\u662f\u5e38\u91cf\uff0c\u5e76\u975e\u662f\u53d8\u91cf\u3002 \u5e38\u91cf\u5b58\u5728\u9ed8\u8ba4\u7c7b\u578b 1 2 3 4 5 6 7 8 9 10 fmt . Printf ( \"%T %v\\n\" , 0 , 0 ) fmt . Printf ( \"%T %v\\n\" , 0.0 , 0.0 ) fmt . Printf ( \"%T %v\\n\" , 'x' , 'x' ) fmt . Printf ( \"%T %v\\n\" , 0i , 0i ) // \u8f93\u51fa\u7ed3\u679c int 0 float64 0 int32 120 complex128 ( 0 + 0i ) \u4e0d\u540c\u7c7b\u578b\u7684\u5e38\u91cf\u64cd\u4f5c\uff0c\u4f1a\u8fdb\u884c\u7c7b\u578b\u8f6c\u6362 \u8f6c\u6362\u89c4\u5219\u6309\u7167integer, rune, floating-point, complex.\u7684\u5148\u540e\u987a\u5e8f 1 var answer = 3 * 0.33 // \u6309\u7167\u4e0a\u9762\u7684\u89c4\u5219\uff0cinteger\u4f1a\u8f6c\u6362\u4e3afloating-point\uff0c\u6700\u7ec8\u7ed3\u679c\u5c31\u662f\u6d6e\u70b9\u6570\u4e86 \u6570\u5b57\u5e38\u91cf\u53ef\u4ee5\u8bf4\u662finteger, floating-point, complex and rune\u7b49\u56db\u79cdkind\uff0c\u6b64\u5916\u8fd8\u6709bool\u3001string\u4e24\u79cdkind\u7c7b\u578b\u7684\u5e38\u91cf\u3002 \u5e38\u91cf\u4e0d\u662f\u53d8\u91cf \u5e38\u91cf\u53ea\u5b58\u5728\u4e8e\u7f16\u8bd1\u65f6 \u65e0\u7c7b\u578b\u7684\u5e38\u91cf\u53ef\u4ee5\u9690\u5f0f\u8f6c\u6362\u4e3a\u6709\u7c7b\u578b\u7684\u5e38\u91cf\uff0c\u4f46\u662f\u53d8\u91cf\u4e0d\u884c\u9700\u8981\u5f3a\u5236\u8f6c\u6362 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 type Duration int64 // Common durations. There is no definition for units of Day or larger // to avoid confusion across daylight savings time zone transitions. const ( Nanosecond Duration = 1 Microsecond = 1000 * Nanosecond Millisecond = 1000 * Microsecond Second = 1000 * Millisecond Minute = 60 * Second Hour = 60 * Minute ) // Add returns the time t+d. func ( t Time ) Add ( d Duration ) Time func main () { // Use the time package to get the current date/time. now := time . Now () // \u8fd9\u91cc\u76845\u8f6c\u6362\u6210\u5e38\u91cfDuration\u4e86 // Subtract 5 nanoseconds from now using a literal constant. literal := now . Add ( - 5 ) // Subtract 5 seconds from now using a declared constant. const timeout = 5 * time . Second // time.Duration(5) * time.Duration(1000000000) constant := now . Add ( - timeout ) // Subtract 5 nanoseconds from now using a variable of type int64. minusFive := int64 ( - 5 ) variable := now . Add ( minusFive ) // example4.go:50: cannot use minusFive (type int64) as type time.Duration in argument to now.Add // Display the values. fmt . Printf ( \"Now : %v\\n\" , now ) fmt . Printf ( \"Literal : %v\\n\" , literal ) fmt . Printf ( \"Constant: %v\\n\" , constant ) fmt . Printf ( \"Variable: %v\\n\" , variable ) } \u65e0\u7c7b\u578b\u7684\u5e38\u91cf\u6709Kind\uff0c\u4f46\u662f\u6ca1\u6709\u7c7b\u578b 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 // \u65e0\u7c7b\u578b\u5e38\u91cf\uff0c\u7cbe\u5ea6\u7406\u8bba\u4e0a\u65e0\u9650\u5236 // Untyped Constants. const ui = 12345 // kind: integer const uf = 3.141592 // kind: floating-point // \u4e0b\u9762\u5c31\u662f\u6709\u7c7b\u578b\u7684\u5e38\u91cf\u4e86\uff0c\u8fd9\u662f\u6709\u7cbe\u5ea6\u9650\u5236\u7684\uff0c\u53d6\u51b3\u4e8e\u5e38\u91cf\u7c7b\u578b // Typed Constants still use the constant type system but their precision // is restricted. const ti int = 12345 // type: int const tf float64 = 3.141592 // type: float64 // \u8fd9\u91cc\u58f0\u660euint8\u7684\u503c\u4e3a1000\u5c31\u8d85\u8fc7\u9650\u5236\u4e86\uff0c\u4f1a\u7f16\u8bd1\u62a5\u9519\uff0c\u4f46\u662f\u6539\u6210\u65e0\u7c7b\u578b\u7684\u5e38\u91cf\u5c31\u6ca1\u6709\u8fd9\u4e2a\u9650\u5236\u4e86 // ./constants.go:XX: constant 1000 overflows uint8 // const myUint8 uint8 = 1000 // \u6709\u7c7b\u578b\u548c\u65e0\u7c7b\u578b\u8fdb\u884c\u7b97\u672f\u8fd0\u7b97\u4f1a\u8fdb\u884c\u7c7b\u578b\u8f6c\u6362\u3002 const one int8 = 1 const two = 2 * one // int8(2) * int8(1) integer\u5e38\u91cf\u7cbe\u5ea6\u81f3\u5c11256bits 1 2 3 4 5 6 7 8 9 10 11 const ( // Max integer value on 64 bit architecture. maxInt = 9223372036854775807 // Much larger value than int64. bigger = 9223372036854775808543522345 // \u6709\u7c7b\u578b\u7684\u5e38\u91cf\u53d7\u5230\u4e86\u7c7b\u578b\u7684\u7cbe\u5ea6\u9650\u5236\uff0c\u65e0\u7c7b\u578b\u5e38\u91cf\u5219\u6ca1\u6709\u9650\u5236 // Will NOT compile // biggerInt int64 = 9223372036854775808543522345 ) Array \u9762\u5411\u6570\u636e\u7684\u8bbe\u8ba1\u539f\u5219: If you don't understand the data, you don't understand the problem. All problems are unique and specific to the data you are working with. Data transformations are at the heart of solving problems. Each function, method and work-flow must focus on implementing the specific data transformations required to solve the problems. If your data is changing, your problems are changing. When your problems are changing, the data transformations needs to change with it. Uncertainty about the data is not a license to guess but a directive to STOP and learn more. Solving problems you don't have, creates more problems you now do. If performance matters, you must have mechanical sympathy for how the hardware and operating system work. Minimize, simplify and REDUCE the amount of code required to solve each problem. Do less work by not wasting effort. Code that can be reasoned about and does not hide execution costs can be better understood, debugged and performance tuned. Coupling data together and writing code that produces predictable access patterns to the data will be the most performant. Changing data layouts can yield more significant performance improvements than changing just the algorithms. Efficiency is obtained through algorithms but performance is obtained through data structures and layouts. \u6211\u4eec\u5728\u8bbe\u8ba1\u6570\u636e\u7ed3\u6784\u7684\u65f6\u5019\u9700\u8981\u8003\u8651\u6570\u636e\u7684\u5b58\u50a8\u5f62\u5f0f\uff0c\u5e94\u8be5\u5c3d\u53ef\u80fd\u7684\u8003\u8651\u5230\u5bf9\u5e95\u5c42\u786c\u4ef6\u5e73\u53f0\u7684\u4f9d\u8d56\uff0c\u6bd4\u5982\u9700\u8981\u8003\u8651\u5230\u7f13\u5b58\uff0c\u8bbe\u8ba1\u7684\u6570\u636e\u7ed3\u6784\u9700\u8981\u5bf9\u7f13\u5b58\u53cb\u597d\uff0c \u4e00\u822c\u6765\u8bf4\uff0c\u94fe\u8868\u7684\u662f\u7f13\u5b58\u4e0d\u53cb\u597d\u7684\uff0c\u800c\u6570\u7ec4\u8fd9\u79cd\u8fde\u7eed\u5185\u5b58\u7684\u6570\u636e\u7ed3\u6784\u662f\u7f13\u5b58\u53cb\u597d\u7684\uff0c\u53ef\u4ee5\u5145\u5206\u5229\u7528\u7f13\u5b58\u6765\u52a0\u901f\u3002 CPU\u7684\u7f13\u5b58\u4e3b\u8981\u662f\u901a\u8fc7\u5c06\u4e3b\u5185\u5b58\u4e2d\u7684\u6570\u636e\u7f13\u5b58\u5728cache line\u4e0a Cache line\u76ee\u524d\u4e00\u822c\u662f32\u4e2a\u5b57\u8282\u6216\u8005\u662f64\u4e2a\u5b57\u8282\uff0c\u8fd9\u4e2a\u53d6\u51b3\u4e8e\u5bf9\u5e94\u7684\u786c\u4ef6\u5e73\u53f0 CPU\u6838\u5fc3\u4e0d\u4f1a\u76f4\u63a5\u8bbf\u95ee\u4e3b\u5185\u5b58\uff0c\u4ed6\u4eec\u5f80\u5f80\u53ea\u80fd\u8bbf\u95ee\u672c\u5730\u7684\u7f13\u5b58 \u6570\u636e\u548c\u6307\u4ee4\u90fd\u53ef\u4ee5\u5b58\u5728\u7f13\u5b58\u4e2d \u9ad8\u901f\u7f13\u5b58\u884c\u6309L1-> L2-> L3\u7684\u987a\u5e8f\u6392\u5217\uff0c\u56e0\u4e3a\u65b0\u7684\u9ad8\u901f\u7f13\u5b58\u884c\u9700\u8981\u5b58\u50a8\u5728\u9ad8\u901f\u7f13\u5b58\u4e2d\u3002 \u786c\u4ef6\u559c\u6b22\u6cbf\u7740Cache line\u7ebf\u6027\u7684\u8bbf\u95ee\u6570\u636e\u548c\u6307\u4ee4 \u4e3b\u5185\u5b58\u5efa\u7acb\u5728\u76f8\u5bf9\u8f83\u5feb\u7684\u5ec9\u4ef7\u5185\u5b58\u4e0a\u3002\u9ad8\u901f\u7f13\u5b58\u5efa\u7acb\u5728\u975e\u5e38\u5feb\u901f\u4e14\u6602\u8d35\u7684\u5185\u5b58\u4e0a\u3002 \u8bbf\u95ee\u4e3b\u5185\u5b58\u7684\u901f\u5ea6\u975e\u5e38\u6162\uff0c\u6211\u4eec\u9700\u8981\u7f13\u5b58\u3002 \u4ece\u4e3b\u5b58\u50a8\u5668\u8bbf\u95ee\u4e00\u4e2a\u5b57\u8282\u5c06\u5bfc\u81f4\u8bfb\u53d6\u5e76\u7f13\u5b58\u6574\u4e2a\u7f13\u5b58\u884c\u3002 \u5728\u9ad8\u901f\u7f13\u5b58\u884c\u4e2d\u5199\u5165\u4e00\u4e2a\u5b57\u8282\u9700\u8981\u5199\u5165\u6574\u4e2a\u9ad8\u901f\u7f13\u5b58\u884c\u3002 \u5c0f \u7b49\u4e8e \u5feb \u9002\u5408\u653e\u5165\u7f13\u5b58\u4e2d\u7d27\u51d1\u6570\u636e\u7ed3\u6784\u662f\u6700\u5feb\u7684 \u4ec5\u904d\u5386\u7f13\u5b58\u7684\u6570\u636e\u662f\u6700\u5feb\u7684 \u53ef\u9884\u6d4b\u7684\u8bbf\u95ee\u6a21\u5f0f\u6700\u91cd\u8981 \u53ea\u8981\u53ef\u884c\uff0c\u5c3d\u53ef\u80fd\u4f7f\u7528\u7ebf\u6027\u6570\u7ec4\u904d\u5386 \u63d0\u4f9b\u5e38\u89c4\u7684\u5185\u5b58\u8bbf\u95ee\u6a21\u5f0f \u786c\u4ef6\u53ef\u4ee5\u5bf9\u6240\u9700\u7684\u5185\u5b58\u505a\u51fa\u66f4\u597d\u7684\u9884\u6d4b \u7f13\u5b58\u672a\u547d\u4e2d\u4e5f\u4f1a\u5bfc\u81f4TLB\u7f13\u5b58\u672a\u547d\u4e2d \u5c06\u865a\u62df\u5730\u5740\u8f6c\u6362\u4e3a\u7269\u7406\u5730\u5740\u9700\u8981Cache \u9700\u8981\u7b49\u5f85OS\u544a\u8bc9\u6211\u4eec\u771f\u6b63\u8981\u8bbf\u95ee\u7684\u5185\u5b58\u5728\u54ea\u91cc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 3GHz(3 clock cycles/ns) * 4 instructions per cycle = 12 instructions per ns! 1 ns ............. 1 ns .............. 12 instructions (one) 1 \u00b5s .......... 1000 ns .......... 12,000 instructions (thousand) 1 ms ..... 1,000,000 ns ...... 12,000,000 instructions (million) 1 s .. 1,000,000,000 ns .. 12,000,000,000 instructions (billion) L1 - 64KB Cache (Per Core) 4 cycles of latency at 1.3 ns Stalls for 16 instructions L2 - 256KB Cache (Per Core) 12 cycles of latency at 4 ns Stalls for 48 instructions L3 - 8MB Cache 40 cycles of latency at 13.3 ns Stalls for 160 instructions Main Memory 100 cycle of latency at 33.3 ns Stalled for 400 instructions 1 2 3 4 5 6 7 8 9 10 11 12 13 14 L1 cache reference ......................... 0.5 ns ................... 6 ins Branch mispredict ............................ 5 ns ................... 60 ins L2 cache reference ........................... 7 ns ................... 84 ins Mutex lock/unlock ........................... 25 ns .................. 300 ins Main memory reference ...................... 100 ns ................. 1200 ins Compress 1K bytes with Zippy ............. 3,000 ns (3 \u00b5s) ........... 36k ins Send 2K bytes over 1 Gbps network ....... 20,000 ns (20 \u00b5s) ........ 240k ins SSD random read ........................ 150,000 ns (150 \u00b5s) ........ 1.8M ins Read 1 MB sequentially from memory ..... 250,000 ns (250 \u00b5s) .......... 3M ins Round trip within same datacenter ...... 500,000 ns (0.5 ms) .......... 6M ins Read 1 MB sequentially from SSD* ..... 1,000,000 ns (1 ms) ........... 12M ins Disk seek ........................... 10,000,000 ns (10 ms) ......... 120M ins Read 1 MB sequentially from disk .... 20,000,000 ns (20 ms) ......... 240M ins Send packet CA->Netherlands->CA .... 150,000,000 ns (150 ms) ........ 1.8B ins range\u7684\u8bed\u4e49 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 // All material is licensed under the Apache License Version 2.0, January 2004 // http://www.apache.org/licenses/LICENSE-2.0 // Sample program to show how the for range has both value and pointer semantics. package main import \"fmt\" func main () { // Using the pointer semantic form of the for range. friends := [ 5 ] string { \"Annie\" , \"Betty\" , \"Charley\" , \"Doug\" , \"Edward\" } fmt . Printf ( \"Bfr[%s] : \" , friends [ 1 ]) // \u8fd9\u79cd\u662f\u6307\u9488\u8bed\u4e49\uff0c\u901a\u8fc7\u4e0b\u6807\u6765\u8bbf\u95eefriends\uff0c\u4e0d\u4ea7\u751f\u4e34\u65f6\u53d8\u91cf for i := range friends { friends [ 1 ] = \"Jack\" if i == 1 { fmt . Printf ( \"Aft[%s]\\n\" , friends [ 1 ]) } } // Using the value semantic form of the for range. friends = [ 5 ] string { \"Annie\" , \"Betty\" , \"Charley\" , \"Doug\" , \"Edward\" } fmt . Printf ( \"Bfr[%s] : \" , friends [ 1 ]) // \u8fd9\u79cd\u662f\u503c\u8bed\u4e49\uff0cv\u6bcf\u6b21\u62f7\u8d1dfriends\u4e2d\u7684\u5143\u7d20\uff0c\u4fee\u6539friends\u4e0d\u4f1a\u5f71\u54cdv for i , v := range friends { friends [ 1 ] = \"Jack\" if i == 1 { fmt . Printf ( \"v[%s]\\n\" , v ) } } // Using the value semantic form of the for range but with pointer // semantic access. DON'T DO THIS. friends = [ 5 ] string { \"Annie\" , \"Betty\" , \"Charley\" , \"Doug\" , \"Edward\" } fmt . Printf ( \"Bfr[%s] : \" , friends [ 1 ]) // \u4e0d\u8981\u8fd9\u79cd\u5199\u6cd5\uff0c\u4f1a\u5b58\u5728data race\u7684\uff0c\u56e0\u4e3av\u6bcf\u6b21\u62f7\u8d1d\u7684\u662ffriends\u4e2d\u5143\u7d20\u7684\u6307\u9488\uff0c\u4fee\u6539 friends\u4f1a\u5f71\u54cdv for i , v := range & friends { friends [ 1 ] = \"Jack\" if i == 1 { fmt . Printf ( \"v[%s]\\n\" , v ) } } } slice slice\u3001channel\u3001map\u3001function\u3001interface\u90fd\u662f\u5f15\u7528\u7c7b\u578b\uff0c\u8fd9\u4e9b\u6570\u636e\u7ed3\u6784\u5185\u90e8\u90fd\u6709\u6307\u9488\uff0c\u9ed8\u8ba4\u503c\u662fnil\u3002 nil\u548cempty\u4e0d\u4e00\u6837 1 2 3 4 // \u8fd9\u91cc\u7684s\u662fnil\uff0cnil\u8868\u793aslice\u5185\u90e8\u7684\u6307\u9488\u3001size\u3001cap\u7b49\u90fd\u662f0 var s [] string // \u8fd9\u91cc\u7684s\u662fempty\uff0c\u8868\u793a\u5185\u90e8\u6307\u9488\u6307\u5411\u4e86\u4e00\u4e2a\u5168\u5c40\u7684\u4f4d\u7f6e\u3001size\u548ccap\u90fd\u662f0 s := [] string {} \u901a\u8fc7make\u6765\u521b\u5efaslice\u53ef\u4ee5\u6307\u5b9alength\u548ccap\uff0c\u5982\u679c\u53ea\u6307\u5b9alength\u7684\u8bdd\uff0ccap\u9ed8\u8ba4\u7b49\u4e8elength 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 func main () { // Create a slice with a length of 5 elements. fruits := make ([] string , 5 ) fruits [ 0 ] = \"Apple\" fruits [ 1 ] = \"Orange\" fruits [ 2 ] = \"Banana\" fruits [ 3 ] = \"Grape\" fruits [ 4 ] = \"Plum\" // \u4f1a\u5b58\u5728\u8bbf\u95ee\u8d8a\u754c // You can't access an index of a slice beyond its length. fruits [ 5 ] = \"Runtime error\" // Error: panic: runtime error: index out of range fmt . Println ( fruits ) } slice\u5728cap\u5c0f\u4e8e1024\u7684\u65f6\u5019\u603b\u662f\u6309\u7167100%\u6765\u589e\u957f\uff0c\u5230\u4e861024\u540e\u5219\u6309\u716725%\u6765\u589e\u957f\u3002 \u5177\u4f53\u7ec6\u8282\u89c1 cap.go \u5728slice\u7684\u57fa\u7840\u4e0a\u53ef\u4ee5\u518d\u521b\u5efaslice\uff0c\u521b\u5efa\u7684slice\u548c\u4e4b\u524d\u7684slice\u662f\u5171\u4eab\u5e95\u5c42\u7684\u5b58\u50a8 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 func main () { orgSlice := make ([] string , 5 , 8 ) orgSlice [ 0 ] = \"Apple\" orgSlice [ 1 ] = \"Orange\" orgSlice [ 2 ] = \"Banana\" orgSlice [ 3 ] = \"Grape\" orgSlice [ 4 ] = \"Plum\" fmt . Printf ( \"cap: %d, length: %d\\n\" , cap ( orgSlice ), len ( orgSlice )) // \u53ef\u4ee5\u901a\u8fc7orgSlice[2:4:cap]\u6765\u6307\u5b9acap\uff0c\u5c06cap\u548clength\u8bbe\u7f6e\u4e3a\u76f8\u540c\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5728 // append\u7684\u65f6\u5019\u907f\u514d\u5bf9\u539f\u6765\u7684slice\u8fdb\u884c\u4fee\u6539\u3002\u5176\u4e2dcap\u4e0d\u80fd\u8d85\u8fc7\u539f\u6765slice\u7684\u6700\u5927cap\u8303\u56f4 slice2 := orgSlice [ 2 : 4 ] // length\u4e3a2\uff0ccap\u4e3a6\uff0c\u8fd9\u91cc\u9700\u8981\u5c0f\u5fc3\u4e86\uff0c\u56e0\u4e3acap\u548clength\u4e0d\u76f8\u540c\uff0c\u56e0\u6b64\u5728append\u7684\u65f6\u5019 // \u4e0d\u4f1a\u8fdb\u884c\u62f7\u8d1d\uff0c\u800c\u662f\u76f4\u63a5\u5728\u539f\u6765\u7684\u57fa\u7840\u4e0a\u64cd\u4f5c\uff0c\u8fd9\u4e2a\u662f\u5b58\u5728\u526f\u4f5c\u7528\u7684\uff0c\u4f1a\u5f71\u54cd\u5230orgSlice\uff0c\u4f8b\u5982\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50 fmt . Printf ( \"cap: %d, length: %d\\n\" , cap ( slice2 ), len ( slice2 )) // Append\u4f1a\u5bfc\u81f4orgSlice\u4e2d\u7684\u5143\u7d20\u88ab\u8986\u76d6 slice2 = append ( slice2 , \"test\" ) fmt . Printf ( \"slice2: %v\\n\" , slice2 ) fmt . Printf ( \"orgSlice: %v %d\\n\" , orgSlice , len ( orgSlice )) slice3 := orgSlice [ 2 :] fmt . Printf ( \"cap: %d, length: %d\\n\" , cap ( slice3 ), len ( slice3 )) // \u8fd9\u91ccappend\u4e0d\u4f1a\u5f71\u54cdorgSlice\uff0c\u56e0\u4e3aorgSlice\u548cslice3\u4e24\u4e2a\u7ed3\u675f\u4f4d\u7f6e\u90fd\u662f\u76f8\u540c\u7684\uff0c // \u8fd9\u91cc\u7684append\u53ea\u4f1a\u5728\u672a\u4f7f\u7528\u7684\u533a\u57df\u6dfb\u52a0\u65b0\u7684\u5143\u7d20\uff0corgSlice\u611f\u77e5\u4e0d\u5230\u3002\u540e\u7eedorgSlice // \u5982\u679c\u4e5f\u8fdb\u884cappend\u7684\u5316\uff0c\u4f1a\u5bfc\u81f4\u4e24\u4e2aSlice\u7684\u5185\u5bb9\u76f8\u4e92\u8986\u76d6\u4e86\u3002 slice3 = append ( slice3 , \"test3\" ) fmt . Printf ( \"slice3: %v\\n\" , slice3 ) fmt . Printf ( \"orgSlice: %v %d\\n\" , orgSlice , len ( orgSlice )) } // \u8f93\u51fa cap : 8 , length : 5 cap : 6 , length : 2 slice2 : [ Banana Grape test ] orgSlice : [ Apple Orange Banana Grape test ] cap : 6 , length : 3 slice3 : [ Banana Grape test test3 ] orgSlice : [ Apple Orange Banana Grape test ] 5 \u5f15\u7528slice\u4e2d\u7684\u5143\u7d20\u65f6\u9700\u8981\u5c0f\u5fc3\u56e0\u4e3aappend\u5e26\u6765\u7684\u526f\u4f5c\u7528 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 type user struct { likes int } func main () { // Declare a slice of 3 users. users := make ([] user , 3 ) // Share the user at index 1. // \u8fd9\u91cc\u5f15\u7528\u4e86slice\u4e2d\u7684\u5143\u7d20 shareUser := & users [ 1 ] // Add a like for the user that was shared. // \u64cd\u4f5c\u5f15\u7528\u672c\u8eab\u4e5f\u4f1a\u5bfc\u81f4slice\u4e2d\u5bf9\u5e94\u5143\u7d20\u53d1\u751f\u53d8\u5316 shareUser . likes ++ // Display the number of likes for all users. for i := range users { fmt . Printf ( \"User: %d Likes: %d\\n\" , i , users [ i ]. likes ) } // Add a new user. // append\u4f1a\u5bfc\u81f4copy\u7684\u53d1\u751f\uff0c\u90a3\u4e48\u4e4b\u524d\u5bf9slice\u4e2d\u5143\u7d20\u7684\u5f15\u7528\u548cappend\u540e\u7684slice\u662f\u4e24\u4e2a\u72ec\u7acb\u7684slice\uff0c\u4e92\u4e0d\u5f71\u54cd\u3002 users = append ( users , user {}) // Add another like for the user that was shared. // \u8fd9\u662f\u5728\u64cd\u4f5cappend\u524d\u7684slice shareUser . likes ++ // Display the number of likes for all users. fmt . Println ( \"*************************\" ) for i := range users { fmt . Printf ( \"User: %d Likes: %d\\n\" , i , users [ i ]. likes ) } // Notice the last like has not been recorded. } copy\u51fd\u6570\u53ea\u4f1a\u62f7\u8d1d\u4e24\u4e2aslice\u4e2d\u7684\u6700\u5c0f\u957f\u5ea6\u3002\u5f53\u4e24\u4e2aslice\u5b58\u5728\u91cd\u53e0\u7684\u65f6\u5019\uff0ccopy\u51fd\u6570\u4e5f\u53ef\u4ee5\u6b63\u786e\u5de5\u4f5c 1 2 3 4 5 6 7 8 9 10 11 12 13 // Insert inserts the value into the slice at the specified index, // which must be in range. // The slice must have room for the new element. func Insert ( slice [] int , index , value int ) [] int { // Grow the slice by one element. slice = slice [ 0 : len ( slice ) + 1 ] // Use copy to move the upper part of the slice out of the way and open a hole. copy ( slice [ index + 1 :], slice [ index :]) // Store the new value. slice [ index ] = value // Return the result. return slice } \u5c0f\u5fc3slice\u7684\u8fed\u4ee3\uff0c\u503c\u8bed\u4e49\u548c\u6307\u9488\u8bed\u4e49 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 package main import \"fmt\" func main () { // Using the value semantic form of the for range. friends := [] string { \"Annie\" , \"Betty\" , \"Charley\" , \"Doug\" , \"Edward\" } // \u503c\u8bed\u4e49\uff0c\u8fd9\u91cc\u4f1a\u5bf9friends\u8fdb\u884c\u62f7\u8d1d\uff0c\u56e0\u6b64\u5728\u8fed\u4ee3\u8fc7\u7a0b\u4e2d\u4fee\u6539friends\u4e0d\u4f1a\u5f71\u54cd\u8fed\u4ee3\u7ed3\u679c\u7684 // v\u6bcf\u6b21\u90fd\u4f1a\u5bf9friends\u4e2d\u7684\u5143\u7d20\u8fdb\u884c\u62f7\u8d1d for _ , v := range friends { friends = friends [: 2 ] fmt . Printf ( \"v[%s]\\n\" , v ) } // Using the pointer semantic form of the for range. friends = [] string { \"Annie\" , \"Betty\" , \"Charley\" , \"Doug\" , \"Edward\" } // \u6307\u9488\u8bed\u4e49\uff0cfriends\u5e76\u4e0d\u4f1a\u62f7\u8d1d\uff0c\u56e0\u6b64\u8fed\u4ee3\u5668\u4e2d\u4fee\u6539friends\u4f1a\u5f71\u54cd\u8fed\u4ee3 for i := range friends { friends = friends [: 2 ] fmt . Printf ( \"v[%s]\\n\" , friends [ i ]) } } \u5c0f\u5fc3slice\u8fed\u4ee3\uff0c\u59cb\u7ec8\u53ea\u6709\u4e00\u4e2a\u8fed\u4ee3\u5668\u53d8\u91cf 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 type Dog struct { Name string Age int } func main () { jackie := Dog { Name : \"Jackie\" , Age : 19 , } fmt . Printf ( \"Jackie Addr: %p\\n\" , & jackie ) sammy := Dog { Name : \"Sammy\" , Age : 10 , } fmt . Printf ( \"Sammy Addr: %p\\n\" , & sammy ) dogs := [] Dog { jackie , sammy } fmt . Println ( \"\" ) // dog\u6bcf\u6b21\u8fed\u4ee3\u90fd\u4f1a\u62f7\u8d1d\u4e00\u6b21 for _ , dog := range dogs { fmt . Printf ( \"Name: %s Age: %d\\n\" , dog . Name , dog . Age ) fmt . Printf ( \"Addr: %p\\n\" , & dog ) // \u8fd9\u91cc\u8f93\u51fa\u7684\u5730\u5740\u603b\u662f\u4e00\u6837\u7684 fmt . Println ( \"\" ) } allDogs := [] * Dog {} for _ , dog := range dogs { // \u8fd9\u91cc\u4f1a\u5b58\u5728\u95ee\u9898\uff0c\u56e0\u6b64\u5b58\u7684\u90fd\u662f\u6307\u9488\uff0c\uff0c\u4f46\u662fdog\u53d8\u91cf\u53ea\u6709\u4e00\u4e2a\uff0c\u53ea\u662f\u6bcf\u6b21\u8fdb\u884ccopy\uff0c\u56e0\u6b64\u8fd9\u91cc\u6700\u7ec8append\u7684\u90fd\u662f\u6700\u540e\u4e00\u4e2a\u5143\u7d20 allDogs = append ( allDogs , & dog ) } for _ , dog := range allDogs { fmt . Printf ( \"Name: %s Age: %d\\n\" , dog . Name , dog . Age ) } } string\u5176\u5b9e\u5c31\u662fslice\u7684\u4e00\u4e2a\u53ea\u8bfb\u7248\u672c\uff0c\u4e5f\u5305\u542b\u4e86\u6307\u9488\u548csize\uff0c\u4f46\u662f\u56e0\u4e3a\u662f\u53ea\u8bfb\u7684\uff0c\u6240\u4ee5\u6ca1\u6709cap\u5b57\u6bb5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 package main import ( \"fmt\" \"unicode/utf8\" ) func main () { // Declare a string with both chinese and english characters. s := \"\u4e16\u754c means world\" // UTFMax is 4 -- up to 4 bytes per encoded rune. var buf [ utf8 . UTFMax ] byte // Iterate over the string. // \u9ed8\u8ba4\u904d\u5386string\u662f\u6309\u7167rune\u6765\u904d\u5386\u7684\uff0c\u4e00\u4e2arune\u662f\u4e00\u4e2a\u53ef\u53d8\u5927\u5c0f\u3002 // i\u6307\u5411\u8fd9\u4e2arune\u5728string\u4e2d\u7684offset for i , r := range s { // Capture the number of bytes for this rune. rl := utf8 . RuneLen ( r ) // Calculate the slice offset for the bytes associated // with this rune. si := i + rl // Copy of rune from the string to our buffer. copy ( buf [:], s [ i : si ]) // Display the details. fmt . Printf ( \"%2d: %q; codepoint: %#6x; encoded bytes: %#v\\n\" , i , r , r , buf [: rl ]) } } map map\u7684\u8fed\u4ee3\u603b\u662f\u65e0\u5e8f\u7684 map\u7684key\u5fc5\u987b\u662f\u53efhash\u7684\u3001\u800c\u4e14\u662f\u53ef\u6bd4\u8f83\u7684\uff0cslice\u6ca1\u529e\u6cd5\u4f5c\u4e3akey\uff0c\u56e0\u4e3a\u4e0d\u53ef\u6bd4\u8f83 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 package main import \"fmt\" // user represents someone using the program. type user struct { name string surname string } // users defines a set of users. type users [] user func main () { // Declare and make a map that uses a slice as the key. // \u8fd9\u91cc\u7684users\u662fslice\uff0c\u662f\u4e0d\u53ef\u6bd4\u8f83\u7684\uff0c\u4e0d\u80fd\u4f5c\u4e3akey u := make ( map [ users ] int ) // ./example3.go:22: invalid map key type users // Iterate over the map. for key , value := range u { fmt . Println ( key , value ) } } map\u4e2d\u7684\u5143\u7d20\u662f\u4e0d\u53ef\u5bfb\u5740\u7684 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 package main // player represents someone playing our game. type player struct { name string score int } func main () { // Declare a map with initial values using a map literal. players := map [ string ] player { \"anna\" : { \"Anna\" , 42 }, \"jacob\" : { \"Jacob\" , 21 }, } // Trying to take the address of a map element fails. anna := & players [ \"anna\" ] anna . score ++ // ./example4.go:23:10: cannot take the address of players[\"anna\"] // Instead take the element, modify it, and put it back. player := players [ \"anna\" ] player . score ++ players [ \"anna\" ] = player } \u7a7amap\u548cnil\u662f\u4e0d\u540c\u7684 1 2 3 4 // \u7a7amap users := make ( map [ string ] user ) // nil var users map [ string ] user method \u65b9\u6cd5\u672c\u8d28\u4e0a\u662f\u4e2a\u5e26\u6709receive\u7684\u51fd\u6570 receiver\u4f1a\u7ed9\u65b9\u6cd5\u7ed1\u5b9a\u4e00\u4e2a\u7c7b\u578b\uff0c\u53ef\u4ee5\u662f\u503c\u8bed\u4e49\u4e5f\u53ef\u4ee5\u662f\u6307\u9488\u8bed\u4e49 \u503c\u8bed\u4e49\u610f\u5473\u7740\u6bcf\u6b21\u65b9\u6cd5\u8c03\u7528\u90fd\u662f\u901a\u8fc7\u526f\u672c\u8fdb\u884c\u64cd\u4f5c\u7684 \u6307\u9488\u8bed\u4e49\u610f\u5473\u7740\u6bcf\u6b21\u65b9\u6cd5\u8c03\u7528\u90fd\u662f\u5171\u4eab\u76f8\u540c\u7684\u5b9e\u4f8b \u575a\u6301\u7ed9\u5b9a\u7c7b\u578b\u7684\u5355\u4e00\u8bed\u4e49\u5e76\u4fdd\u6301\u4e00\u81f4 \u7528\u503c\u8bed\u4e49\u8fd8\u662f\u6307\u9488\u8bed\u4e49 \u5982\u679c\u7c7b\u578b\u662f\u4e00\u4e2amap\u3001func\u3001chan\uff0c\u4e0d\u8981\u4f7f\u7528\u6307\u9488\u8bed\u4e49\uff0c\u5982\u679c\u7c7b\u578b\u662fslice\uff0c\u5e76\u4e14\u6ca1\u6709reslice\u6216\u8005\u91cd\u65b0\u5206\u914dslice\u7684\u9700\u6c42\uff0c\u4e5f\u4e0d\u8981\u4f7f\u7528\u6307\u9488\u8bed\u4e49 \u5982\u679c\u65b9\u6cd5\u9700\u8981\u4fee\u6539\u64cd\u4f5c\uff0c\u90a3\u4e48\u5fc5\u987b\u4f7f\u7528\u6307\u9488\u8bed\u4e49 \u5982\u679c\u7c7b\u578b\u5305\u542b\u4e86\u9501\u3001\u6587\u4ef6fd\u7b49\u4e0d\u53ef\u62f7\u8d1d\u7684\u8d44\u6e90\u5219\u5fc5\u987b\u8981\u7528\u6307\u9488\u8bed\u4e49 \u5982\u679c\u7c7b\u578b\u662f\u5927\u578b\u7684\u6570\u636e\u7ed3\u6784\u6216\u8005\u6570\u7ec4\uff0c\u90a3\u4e48\u4e3a\u4e86\u6548\u7387\u5e94\u8be5\u4f7f\u7528\u6307\u9488 \u5982\u679c\u7c7b\u578b\u662f\u6570\u7ec4\u6216\u5207\u7247\uff0c\u5e76\u4e14\u5176\u5143\u7d20\u662f\u6307\u9488\uff0c\u800c\u4e14\u53ef\u80fd\u4f1a\u88ab\u4fee\u6539\uff0c\u5219\u6700\u597d\u4f7f\u7528\u6307\u9488\u8bed\u4e49\uff0c\u56e0\u4e3a\u5b83\u5c06\u4f7f\u8bfb\u8005\u66f4\u52a0\u6e05\u695a\u610f\u56fe\u3002 \u5982\u679c\u7c7b\u578b\u662f\u5c0f\u7684\u6570\u7ec4\u6216\u8005struct\u4e2d\u5305\u542b\u4e86\u4e00\u4e9b\u57fa\u672c\u7c7b\u578b\uff0c\u5e76\u4e14\u6ca1\u6709\u6307\u9488\uff0c\u4e5f\u6ca1\u6709\u53ef\u4fee\u6539\u7684\u5b57\u6bb5\u3002\u4ec5\u4ec5\u662f\u4e00\u4e9b\u57fa\u672c\u7c7b\u578b\uff0c\u90a3\u4e48\u4f7f\u7528\u503c\u8bed\u4e49\u53ef\u4ee5\u51cf\u5c11gc\u7684\u538b\u529b\u3002 \u6700\u540e\u5982\u6709\u7591\u95ee\u8bf7\u4f7f\u7528\u6307\u9488\u8bed\u4e49 interface \u63a5\u53e3\u672c\u8eab\u5c31\u662f\u5f15\u7528\u7c7b\u578b\uff0c\u4e0d\u9700\u8981\u901a\u8fc7\u6307\u9488\u6765\u5171\u4eab \u5982\u4f55\u5224\u65ad\u4e00\u4e2a\u7c7b\u578b\u662f\u5426\u5b9e\u73b0\u4e86\u67d0\u4e2a\u63a5\u53e3? \u5bf9\u4e8e\u4e00\u4e2a\u6307\u9488\u6765\u8bf4\uff0c\u5176\u65b9\u6cd5\u96c6\u5305\u542b\u4e86\u503c\u8bed\u4e49\u548c\u6307\u9488\u8bed\u4e49\u4f5c\u4e3areciver\u5b9e\u73b0\u7684\u65b9\u6cd5 \u5bf9\u4e8e\u4e00\u4e2a\u503c\u6765\u8bf4\uff0c\u5176\u65b9\u6cd5\u96c6\u4ec5\u9650\u4e8e\u4f7f\u7528\u503c\u8bed\u4e49\u4f5c\u4e3areciver\u5b9e\u73b0\u7684\u65b9\u6cd5 \u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0cuser\u4f5c\u4e3a\u503c\u6765\u8bf4\uff0c\u5176\u65b9\u6cd5\u96c6\u53ea\u6709\u4f7f\u7528\u503c\u4f5c\u4e3areceiver\u7684\u65b9\u6cd5\uff0c\u4f46\u662fUser\u7684Notify\u662f\u7528\u6307\u9488\u4f5c\u4e3areceiver\u6765\u5b9e\u73b0\u7684\uff0c\u56e0\u6b64user\u5e76\u6ca1\u6709\u5b9e\u73b0Notify\u63a5\u53e3\uff0c \u628a\u5b83\u6362\u6210\u6307\u9488\u7c7b\u578b\u5c31\u53ef\u4ee5\u4e86\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 type User struct { Name string Email string } func SendNotification ( notify Notifier ) error { return notify . Notify () } func ( u * User ) Notify () error { log . Printf ( \"User: Sending User Email To %s<%s>\\n\" , u . Name , u . Email ) return nil } func main () { user := User { Name : \"janet jones\" , Email : \"janet@email.com\" , } SendNotification ( user ) } // Output: cannot use user ( type User ) as type Notifier in function argument : User does not implement Notifier ( Notify method has pointer receiver ) \u5d4c\u5165\u5f0f\u7c7b\u578b\u5176\u5305\u542b\u7684\u65b9\u6cd5\u96c6\u548c\u5916\u90e8\u7c7b\u578b\u662f\u4ec0\u4e48\u5173\u7cfb? 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 // Admin\u5305\u542b\u4e86\u5d4c\u5165\u5f0f\u7c7b\u578bUser\uff0c\u56e0\u6b64User\u5b9e\u73b0\u7684Notify\u63a5\u53e3\uff0cAdmin\u4e5f\u5b9e\u73b0\u4e86\u3002 type Admin struct { User Level string } func main () { admin := & Admin { User : User { Name : \"john smith\" , Email : \"john@email.com\" , }, Level : \"super\" , } SendNotification ( admin ) // \u4e5f\u53ef\u4ee5\u8fd9\u6837\u6765\u8c03\u7528\uff0c\u56e0\u4e3a\u5d4c\u5165\u7c7b\u578b\u5728\u5916\u90e8\u7c7b\u578b\u4e2d\u5c31\u662f\u4e00\u4e2a\u5b57\u6bb5\u540d\u4e3a\u7c7b\u578b\u540d\u7684\u5b57\u6bb5\u3002 // admin.User.Notify() } // Output User : Sending User Email To john smith < john @ email . com > Tip \u5f53\u6211\u4eec\u5d4c\u5165\u4e00\u4e2a\u7c7b\u578b\u65f6\uff0c\u8be5\u7c7b\u578b\u7684\u65b9\u6cd5\u6210\u4e3a\u5916\u90e8\u7c7b\u578b\u7684\u65b9\u6cd5\uff0c\u4f46\u662f\u5f53\u5b83\u4eec\u88ab\u8c03\u7528\u65f6\uff0c\u8be5\u65b9\u6cd5\u7684\u63a5\u6536\u8005\u662f\u5185\u90e8\u7c7b\u578b\uff0c\u800c\u4e0d\u662f\u5916\u90e8\u7c7b\u578b\u3002 \u7ed9\u5b9a\u4e00\u4e2a\u7ed3\u6784\u7c7b\u578bS\u548c\u4e00\u4e2a\u540d\u4e3aT\u7684\u7c7b\u578b\uff0c\u90a3\u4e48\u8be5\u7ed3\u6784\u4f53S\u7684\u65b9\u6cd5\u96c6\u4e3a: 1 2 1. \u5982\u679cS\u5305\u542b\u533f\u540d\u5b57\u6bb5T\uff0c\u5219`S`\u548c`*S`\u7684\u65b9\u6cd5\u96c6\u4f1a\u5305\u62ec\u4ee5T\u4f5c\u4e3areceiver\u7684\u65b9\u6cd5\u3002 2. `*S`\u8fd8\u989d\u5916\u5305\u542b\u4e86\u4ee5`*T`\u4f5c\u4e3areceiver\u7684\u65b9\u6cd5 \u5916\u90e8\u7c7b\u578b\u548c\u5d4c\u5165\u5f0f\u7c7b\u578b\u5b9e\u73b0\u4e86\u76f8\u540c\u7684interface\u600e\u4e48\u529e? 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 func ( a * Admin ) Notify () error { log . Printf ( \"Admin: Sending Admin Email To %s<%s>\\n\" , a . Name , a . Email ) return nil } func main () { admin := & Admin { User : User { Name : \"john smith\" , Email : \"john@email.com\" , }, Level : \"super\" , } // \u5916\u90e8\u7c7b\u578b\u6240\u5b9e\u73b0\u7684\u65b9\u6cd5\u4f18\u5148\u8986\u76d6\u5d4c\u5165\u5f0f\u7c7b\u578b SendNotification ( admin ) } // Output Admin : Sending Admin Email To john smith < john @ email . com > interface\u4f1a\u4fdd\u5b58\u503c\uff0c\u5728\u8c03\u7528\u7684\u65f6\u5019\uff0c\u4f7f\u7528\u4fdd\u5b58\u7684\u503c\u6765\u8c03\u7528 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 package main import \"fmt\" type printer interface { print () } type user struct { name string } func ( u user ) print () { fmt . Println ( \"User Name:\" , u . name ) } func main () { u := user { \"Bill\" } // \u8fd9\u91cc\u4f1a\u5bf9u\u8fdb\u884c\u62f7\u8d1d\uff0c\u5e76\u4fdd\u5b58\u5728interface\u4e2d entities := [] printer { u , & u , } // \u8fd9\u91cc\u4fee\u6539u\uff0c\u5e76\u4e0d\u4f1a\u5f71\u54cd\u5df2\u7ecf\u62f7\u8d1d\u7684u u . name = \"Bill_CHG\" for _ , e := range entities { e . print () } } Tip \u5f53\u4f7f\u7528\u503c\u63a5\u6536\u5668\uff08\u503c\u8bed\u4e49\uff09\u5b9e\u73b0\u63a5\u53e3\u65f6\uff0c\u53ef\u4ee5\u5728\u63a5\u53e3\u5185\u90e8\u5b58\u50a8\u503c\u548c\u5730\u5740\u7684\u526f\u672c\u3002\u4f46\u662f\uff0c\u5f53\u4f7f\u7528\u6307\u9488\u63a5\u6536\u5668\uff08\u6307\u9488\u8bed\u4e49\uff09\u5b9e\u73b0\u63a5\u53e3\u65f6\uff0c\u53ea\u80fd\u5b58\u50a8\u5730\u5740\u7684\u526f\u672c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 package main import \"fmt\" type notifier interface { notify () } type duration int func ( d * duration ) notify () { fmt . Println ( \"Sending Notification in\" , * d ) } func main () { duration ( 42 ). notify () } // \u4f7f\u7528\u6307\u9488\u4f5c\u4e3areceiver\u7684\u65f6\u5019\uff0c\u662f\u4e0d\u80fd\u5c06\u503c\u4f20\u9012\u7ed9interface\u7684\uff0c\u5fc5\u987b\u4f20\u9012\u7684\u662f\u4e00\u4e2a\u53ef\u4ee5\u53d6\u5730\u5740\u7684\u53d8\u91cf\u3002 // duration(42)\u662f\u4e00\u4e2a\u5e38\u91cf\u662f\u6ca1\u6709\u5730\u5740\u7684\uff0c\u53ea\u5b58\u5728\u4e8e\u7f16\u8bd1\u65f6 . / prog . go : 16 : 14 : cannot call pointer method on duration ( 42 ) . / prog . go : 16 : 14 : cannot take the address of duration ( 42 ) interface\u662f\u53ef\u4ee5\u6bd4\u8f83\u7684\uff0c\u6bd4\u8f83\u7684\u662f\u63a5\u53e3\u5185\u90e8\u5b58\u50a8\u7684\u6570\u636e\uff0c\u800c\u4e0d\u662f\u63a5\u53e3\u672c\u8eab\u3002\u4f7f\u7528\u6307\u9488\u8bed\u4e49\u65f6\uff0c\u5c06\u6bd4\u8f83\u5730\u5740\u3002\u4f7f\u7528\u503c\u8bed\u4e49\u65f6\uff0c\u5c06\u6bd4\u8f83\u503c\u3002 \u6df1\u5165interface 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 // All material is licensed under the Apache License Version 2.0, January 2004 // http://www.apache.org/licenses/LICENSE-2.0 // Sample program that explores how interface assignments work when // values are stored inside the interface. package main import ( \"fmt\" \"unsafe\" ) // notifier provides support for notifying events. type notifier interface { notify () } // user represents a user in the system. type user struct { name string } // notify implements the notifier interface. func ( u user ) notify () { fmt . Println ( \"Alert\" , u . name ) } func inspect ( n * notifier , u * user ) { // \u4e00\u4e2ainterface\u4e24\u4e2a\u5b57\u5927\u5c0f\uff0c\u7b2c\u4e00\u4e2a\u5b57\u5b58\u50a8\u65b9\u6cd5\u96c6\uff0c\u7b2c\u4e8c\u4e2a\u5b57\u5b58\u50a8\u503c word := uintptr ( unsafe . Pointer ( n )) + uintptr ( unsafe . Sizeof ( & u )) // \u53ef\u4ee5\u770b\u5230interface\u59cb\u7ec8\u5b58\u50a8\u5730\u5740\uff0c\u53ea\u662f\u8fd9\u4e2a\u5730\u5740\u6307\u5411\u7684\u5185\u5bb9\u5230\u5e95\u662f\u503c\u62f7\u8d1d\u540e\u7684\u5bf9\u8c61\uff0c\u8fd8\u662f\u6307\u9488\u62f7\u8d1d\u540e\u7684\u5bf9\u8c61\u3002 value := ( ** user )( unsafe . Pointer ( word )) fmt . Printf ( \"Addr User: %p Word Value: %p Ptr Value: %v\\n\" , u , * value , ** value ) } func main () { // Create a notifier interface and concrete type value. var n1 notifier u := user { \"bill\" } // Store a copy of the user value inside the notifier // interface value. n1 = u // We see the interface has its own copy. // Addr User: 0x1040a120 Word Value: 0x10427f70 Ptr Value: {bill} // \u901a\u8fc7\u8f93\u51fa\u7ed3\u679c\u53ef\u503c\uff0cinterface\u4e2d\u5b58\u50a8\u7684\u503c\u548c\u8d4b\u503c\u8fc7\u6765\u7684\u503c\u4e0d\u4e00\u6837\uff0c\u56e0\u6b64\u5176\u6307\u5411\u7684\u662f\u62f7\u8d1d\u540e\u7684\u503c inspect ( & n1 , & u ) // Make a copy of the interface value. n2 := n1 // We see the interface is sharing the same value stored in // the n1 interface value. // Addr User: 0x1040a120 Word Value: 0x10427f70 Ptr Value: {bill} // \u6307\u9488\u8d4b\u503c\u540e\uff0c\u5927\u5bb6\u90fd\u662f\u6307\u5411\u76f8\u540c\u7684\u503c inspect ( & n2 , & u ) // Store a copy of the user address value inside the // notifier interface value. n1 = & u // We see the interface is sharing the u variables value // directly. There is no copy. // Addr User: 0x1040a120 Word Value: 0x1040a120 Ptr Value: {bill} // \u5f53\u4f20\u9012\u6307\u9488\u7684\u65f6\u5019\uff0cinterface\u4e2d\u5b58\u50a8\u7684\u5c31\u662f\u5730\u5740\u4e86\u3002 inspect ( & n1 , & u ) } // Output Addr User : 0xc000010200 Word Value : 0xc000068f68 Ptr Value : { bill } Addr User : 0xc000010200 Word Value : 0xc000068f68 Ptr Value : { bill } Addr User : 0xc000010200 Word Value : 0xc000010200 Ptr Value : { bill } reflection \u53cd\u5c04\u662finterface\u5230\u53cd\u5c04\u5bf9\u8c61\u7684\u8f6c\u6362 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 package main import ( \"fmt\" \"reflect\" ) func main () { var x float64 = 3.4 // TypeOf\u7684\u53c2\u6570\u662finterface{},\u4efb\u610f\u8f93\u5165\u90fd\u4f1a\u8f6c\u6362\u4e3ainterface{} // \u7136\u540e\u901a\u8fc7\u53cd\u5c04\u83b7\u53d6\u5230\u7c7b\u578b\u4fe1\u606f fmt . Println ( \"type:\" , reflect . TypeOf ( x )) fmt . Println ( \"value:\" , reflect . ValueOf ( x ). String ()) v := reflect . ValueOf ( x ) fmt . Println ( \"type:\" , v . Type ()) fmt . Println ( \"kind is float64:\" , v . Kind () == reflect . Float64 ) fmt . Println ( \"value:\" , v . Float ()) } func TypeOf ( i interface {}) Type \u83b7\u53d6\u53cd\u5c04\u5bf9\u8c61\u7684\u503c\u6216\u8005\u7ed9\u5bf9\u8c61\u8bbe\u7f6e\u503c\u65f6\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u7684\u53c2\u6570\u6216\u8005\u8fd4\u56de\u503c\u7684\u7c7b\u578b\u662f\u53ef\u5bb9\u7eb3\u8be5\u503c\u7684\u6700\u5927\u7c7b\u578b\u4e0a\uff1a \u4f8b\u5982\uff0c\u6240\u6709\u6709\u7b26\u53f7\u6574\u6570\u7684\u662fint64\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u53cd\u5c04\u5bf9\u8c61\u7684Int\u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2aint64\uff0c\u800cSetInt\u503c\u63a5\u6536\u4e00\u4e2aint64\u4f5c\u4e3a\u53c2\u6570\uff0c\u4f8b\u5982\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 package main import ( \"fmt\" \"reflect\" ) func main () { var x uint8 = 'x' v := reflect . ValueOf ( x ) fmt . Println ( \"type:\" , v . Type ()) // uint8. fmt . Println ( \"kind is uint8: \" , v . Kind () == reflect . Uint8 ) // true. // \u83b7\u53d6\u503c\u7684\u65f6\u5019\uff0cUint\u8fd4\u56de\u7684\u662fuint64\uff0c\u56e0\u6b64\u8fd9\u91cc\u9700\u8981\u8f6c\u578b x = uint8 ( v . Uint ()) // v.Uint returns a uint64. } \u901a\u8fc7\u53cd\u5c04\u83b7\u53d6\u5230\u7684\u7c7b\u578b\u662f\u5176\u5e95\u5c42\u7684\u771f\u5b9e\u7c7b\u578b\uff0c\u800c\u4e0d\u662f\u7c7b\u578b\u522b\u540d 1 2 3 4 type MyInt int var x MyInt = 7 // v.Kind == reflect.Int v := reflect . ValueOf ( x ) \u53cd\u5c04\u4e5f\u53ef\u4ee5\u4ece\u53cd\u5c04\u5bf9\u8c61\u8f6c\u6362\u4e3ainterface 1 2 3 4 5 6 7 8 9 10 11 12 13 package main import ( \"fmt\" \"reflect\" ) func main () { var x uint8 = 'x' v := reflect . ValueOf ( x ) // \u5c06\u53cd\u5c04\u5bf9\u8c61\u53d8\u6210\u4e86interface\uff0c\u7136\u540e\u4f20\u9012\u7ed9\u4e86Println fmt . Println ( v . Interface ()) } \u8981\u4fee\u6539\u53cd\u5c04\u5bf9\u8c61\uff0c\u8be5\u503c\u5fc5\u987b\u53ef\u8bbe\u7f6e\u3002 \u53ef\u8bbe\u7f6e\u662f\u53cd\u5c04\u5bf9\u8c61\u7684\u5c5e\u6027\uff0c\u5e76\u975e\u6240\u6709\u53cd\u5c04\u5bf9\u8c61\u90fd\u5177\u6709\u5b83\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 package main import ( \"reflect\" \"fmt\" ) func main () { var x float64 = 3.4 // \u8fd9\u91cc\u662f\u5c06x\u4f20\u9012\u7ed9\u4e86ValueOf\u8fdb\u884c\u62f7\u8d1d\u624d\u6709\u4e86\u53cd\u5c04\u5bf9\u8c61v\uff0c\u56e0\u4e3a\u901a\u8fc7v\u4fee\u6539\u503c\u4e5f\u53ea\u662f\u5bf9\u62f7\u8d1d\u8fdb\u884c\u4e86\u4fee\u6539\uff0c\u5e76\u4e0d\u662f\u4fee\u6539x\u672c\u8eab // \u56e0\u6b64v\u4e0d\u5177\u6709\u53ef\u8bbe\u7f6e\u503c\u7684\u5c5e\u6027 v := reflect . ValueOf ( x ) // settability of v: false fmt . Println ( \"settability of v:\" , v . CanSet ()) // panic: reflect.Value.SetFloat using unaddressable value v . SetFloat ( 7.1 ) // Error: will panic. } \u6539\u6210\u4e0b\u9762\u8fd9\u6837\u5c31\u53ef\u4ee5\u8bbe\u7f6e\u503c\u4e86 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 var x float64 = 3.4 // \u53cd\u5c04\u5bf9\u8c61p\u672c\u8eab\u662f\u4e0d\u53ef\u8bbe\u7f6e\u7684\uff0c\u5176\u6307\u5411\u7684\u5143\u7d20\u624d\u662f\u53ef\u8bbe\u7f6e\u7684\u3002\u56e0\u4e3ap\u7684\u7c7b\u578b\u662f*float64 // \u6307\u9488\u7684\u503c\u662f\u6ca1\u529e\u6cd5\u4fee\u6539\u7684\uff0c\u4fee\u6539\u6307\u9488\u7684\u503c\u53ea\u4f1a\u5bfc\u81f4\u6307\u5411\u53e6\u5916\u4e00\u4e2a\u5bf9\u8c61 // \u901a\u8fc7Elem\u53ef\u4ee5\u83b7\u53d6\u5230\u5176\u6307\u5411\u7684\u503c\uff0c\u4e5f\u5c31\u662f*p\uff0c*p\u624d\u662f\u53ef\u4ee5\u8bbe\u7f6e\u7684\u3002 p := reflect . ValueOf ( & x ) // Note: take the address of x. // type of p: *float64 // settability of p: false fmt . Println ( \"type of p:\" , p . Type ()) fmt . Println ( \"settability of p:\" , p . CanSet ()) v := p . Elem () fmt . Println ( \"settability of v:\" , v . CanSet ()) v . SetFloat ( 7.1 ) fmt . Println ( v . Interface ()) fmt . Println ( x ) \u6b64\u5916\uff0c\u8fd8\u53ef\u4ee5\u901a\u8fc7\u53cd\u5c04\u6765\u4fee\u6539struct\u7684\u503c\uff0cstruct\u4e2d\u7684\u5927\u5199\u5f00\u5934\u7684\u5b57\u6bb5\u624d\u662f\u5bfc\u51fa\u5b57\u6bb5\uff0c\u662f\u53ef\u4ee5\u88ab\u4fee\u6539\u7684\uff0c\u5176\u4ed6\u7684\u5b57\u6bb5\u662f\u4e0d\u5177\u5907\u53ef\u8bbe\u7f6e\u5c5e\u6027\u7684 1 2 3 4 5 6 7 8 9 10 11 12 13 type T struct { A int B string } t := T { 23 , \"skidoo\" } s := reflect . ValueOf ( & t ). Elem () typeOfT := s . Type () for i := 0 ; i < s . NumField (); i ++ { // \u83b7\u53d6\u5230\u5b57\u6bb5 f := s . Field ( i ) fmt . Printf ( \"%d: %s %s = %v\\n\" , i , typeOfT . Field ( i ). Name , f . Type (), f . Interface ()) } exporting package\u662fgo\u7684\u57fa\u672c\u7f16\u8bd1\u5355\u5143\uff0c \u4ee3\u7801\u88ab\u7f16\u8bd1\u5230package\u4e2d\uff0c\u5e76\u6700\u7ec8\u94fe\u63a5\u5728\u4e00\u8d77 \u6807\u8bc6\u7b26\u6839\u636e\u5b57\u6bcd\u5927\u5c0f\u5199\u5bfc\u51fa\uff08\u6216\u4fdd\u6301\u672a\u5bfc\u51fa\uff09 \u901a\u8fc7import\u5bfc\u5165package\uff0c\u5c31\u53ef\u4ee5\u8bbf\u95ee\u8fd9\u4e2apackage\u4e2d\u5df2\u7ecf\u5bfc\u51fa\u7684\u6807\u8bc6\u7b26\u4e86 \u4efb\u4f55\u5305\u90fd\u53ef\u4ee5\u4f7f\u7528\u672a\u5bfc\u51fa\u7c7b\u578b\u7684\u503c\uff0c\u4f46\u662f\u4f7f\u7528\u8d77\u6765\u5f88\u70e6\u4eba 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 package counters // alertCounter is an unexported type that // contains an integer counter for alerts. type alertCounter int // NewAlertCounter creates and returns objects of // the unexported type alertCounter. func NewAlertCounter ( value int ) alertCounter { return alertCounter ( value ) } // \u95f4\u63a5\u8bbf\u95ee\u672a\u5bfc\u51fa\u7684\u6807\u8bc6\u7b26 package main import ( \"fmt\" \"test/counters\" ) func main () { // Create a variable of the unexported type using the // exported NewAlertCounter function from the package counters. counter := counters . NewAlertCounter ( 10 ) fmt . Printf ( \"Counter: %d\\n\" , counter ) } struct\u7684\u5b57\u6bb5\u540d\u6216\u8005\u65b9\u6cd5\u540d\u5982\u679c\u662f\u5c0f\u5199\u662f\u65e0\u6cd5\u88ab\u5916\u90e8\u76f4\u63a5\u8bbf\u95ee\u7684 \u5982\u679cstruct\u4e2d\u5d4c\u5165\u7684\u7c7b\u578b\u662f\u672a\u5bfc\u51fa\u7684\uff0c\u5219\u65e0\u6cd5\u76f4\u63a5\u521d\u59cb\u5316\uff0c\u9700\u8981\u663e\u793a\u7684\u8bbf\u95ee\u5d4c\u5165\u5f0f\u7c7b\u578b\u4e2d\u5bfc\u51fa\u7684\u5b57\u6bb5\u6765\u521d\u59cb\u5316 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 package animals // animal represents information about all animals. type animal struct { Name string Age int } // Dog represents information about dogs. type Dog struct { animal BarkStrength int } package main import ( \"fmt\" \"test/animals\" ) func main () { // Create an object of type Dog from the animals package. // This will NOT compile. dog := animals . Dog { // \u65e0\u6cd5\u7f16\u8bd1 animal : animals . animal { Name : \"Chole\" , Age : 1 , }, BarkStrength : 10 , } fmt . Printf ( \"Counter: %#v\\n\" , dog ) // Create an object of type Dog from the animals package. dog := animals . Dog { BarkStrength : 10 , } // \u663e\u793a\u8bbf\u95ee\u5bfc\u51fa\u5b57\u6bb5\u6765\u8fdb\u884c\u521d\u59cb\u5316 dog . Name = \"Chole\" dog . Age = 1 fmt . Printf ( \"Counter: %#v\\n\" , dog ) } Composition \u884c\u4e3a\u7684\u7ec4\u5408\uff0c\u800c\u4e0d\u662f\u6570\u636e\u7684\u7ec4\u5408 \u7ec4\u5408\u8d85\u8d8a\u4e86\u7c7b\u578b\u5d4c\u5165 \u8003\u8651\u5c06\u884c\u4e3a\u5b9a\u4e49\u6210\u4e00\u4e2a\u4e2a\u72ec\u7acb\u7684intreface\uff0c\u7136\u540e\u901a\u8fc7\u63a5\u53e3\u7ec4\u5408\u5f62\u6210\u529f\u80fd\u66f4\u5927\u7684\u63a5\u53e3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // NailDriver represents behavior to drive nails into a board. type NailDriver interface { DriveNail ( nailSupply * int , b * Board ) } // NailPuller represents behavior to remove nails into a board. type NailPuller interface { PullNail ( nailSupply * int , b * Board ) } // NailDrivePuller represents behavior to drive and remove nails into a board. type NailDrivePuller interface { NailDriver NailPuller } \u786e\u4fdd\u6bcf\u4e2a\u51fd\u6570\u6216\u65b9\u6cd5\u5bf9\u4e8e\u5b83\u4eec\u63a5\u53d7\u7684\u63a5\u53e3\u7c7b\u578b\u90fd\u662f\u975e\u5e38\u7279\u5b9a\u7684\u3002\u4ec5\u63a5\u53d7\u60a8\u5728\u8be5\u51fd\u6570\u6216\u65b9\u6cd5\u4e2d\u4f7f\u7528\u7684\u884c\u4e3a\u7684\u63a5\u53e3\u7c7b\u578b\u3002\u8fd9\u5c06\u6709\u52a9\u4e8e\u786e\u5b9a\u6240\u9700\u7684\u8f83\u5927\u63a5\u53e3\u7c7b\u578b\u3002 \u7c7b\u578b\u5d4c\u5165\u4e0d\u662f\u5b50\u7c7b\u578b\u3001\u4e5f\u4e0d\u662f\u5b50\u7c7b\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 // \u9762\u5411\u5bf9\u8c61\u7684\u8fd9\u79cd\u7ee7\u627f\u7684\u98ce\u683c type Animal struct { Name string IsMamal bool } func ( a Animal ) Speak () {} type Dog struct { Animal PackFactor int } func ( d Dog ) Speak () {} // \u57fa\u4e8e\u884c\u4e3a\u7684\u98ce\u683c type Speaker interface { Speak () } type Dog struct { Name string IsMamal bool PackFactor int } func ( d Dog ) Speak () {} \u662f\u5426\u6709\u5fc5\u8981\u6dfb\u52a0\u4e00\u4e2a\u63a5\u53e3\uff0cchecklist\u5982\u4e0b: package\u58f0\u660e\u4e86\u4e00\u4e2a\u63a5\u53e3\uff0c\u8be5\u63a5\u53e3\u4e0e\u5176\u5177\u4f53\u7c7b\u578b\u7684\u6574\u4e2aAPI\u76f8\u5339\u914d\u3002 factory\u51fd\u6570\u8fd4\u56de\u7684\u7c7b\u578b\u662f\u5185\u90e8\u672a\u5bfc\u51fa\u7684\u7c7b\u578b \u53ef\u4ee5\u5220\u9664\u8be5\u63a5\u53e3\uff0c\u5e76\u4e14\u5bf9\u4e8eAPI\u7528\u6237\u800c\u8a00\uff0c\u6ca1\u6709\u4efb\u4f55\u66f4\u6539\u3002 \u63a5\u53e3\u672a\u5c06API\u4e0e\u66f4\u6539\u5206\u79bb \u6ee1\u8db3\u4e0a\u9762\u6761\u4ef6\u5219\u6ca1\u6709\u5fc5\u8981\u58f0\u660e\u63a5\u53e3\uff0c\u4e0b\u9762\u8fd9\u4e2achecklist\u5219\u662f\u9700\u8981\u4f7f\u7528\u63a5\u53e3\u7684\u573a\u666f: 1 2 3 1. API\u7684\u7528\u6237\u9700\u8981\u63d0\u4f9b\u5b9e\u73b0\u7ec6\u8282\u7684\u65f6\u5019 2. APi\u6709\u591a\u4e2a\u5b9e\u73b0\u7684\u65f6\u5019 3. \u8bc6\u522b\u51faAPI\u4e2d\u53ef\u4ee5\u66f4\u6539\u7684\u90e8\u5206\u5e76\u9700\u8981\u5c06\u5176\u53bb\u8026\u5408 intreface conversion 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 package main import \"fmt\" // Mover provides support for moving things. type Mover interface { Move () } // Locker provides support for locking and unlocking things. type Locker interface { Lock () Unlock () } // MoveLocker provides support for moving and locking things. type MoveLocker interface { Mover Locker } // bike represents a concrete type for the example. type bike struct {} // Move can change the position of a bike. func ( bike ) Move () { fmt . Println ( \"Moving the bike\" ) } // Lock prevents a bike from moving. func ( bike ) Lock () { fmt . Println ( \"Locking the bike\" ) } // Unlock allows a bike to be moved. func ( bike ) Unlock () { fmt . Println ( \"Unlocking the bike\" ) } func main () { var ml MoveLocker var m Mover // bike\u5b9e\u73b0\u4e86move\u3001lock\u3001unlock\uff0c\u6ee1\u8db3MoveLocker\u63a5\u53e3 ml = bike {} // \u53ef\u4ee5\u9690\u5f0f\u8f6c\u6362\u4e3a\u63a5\u53e3\u7684\u5b50\u96c6\u3002 // Move\u63a5\u53e3\u662fMoveLocker\u63a5\u53e3\u7684\u5b50\u96c6 m = ml // \u4f46\u662f\u53cd\u8fc7\u6765\u4e0d\u53ef\u4ee5\u3002 ml = m // \u5c06\u63a5\u53e3\u8f6c\u6362\u4e3a\u5177\u4f53\u7684\u503c b := m .( bike ) ml = b } Runtime Type Assertions 1 2 3 4 5 6 7 8 9 10 11 12 13 // car represents something you drive. type car struct {} // String implements the fmt.Stringer interface. func ( car ) String () string { return \"Vroom!\" } mvs fmt . Stringer := car {} if v , is := mvs .( car ); is { fmt . Printf ( \"Type assertion success\" ) } Error Handing \u5f53\u9519\u8bef\u7684\u4e0a\u4e0b\u6587\u6bd4\u8f83\u590d\u6742\u7684\u65f6\u5019\uff0c\u901a\u8fc7\u521b\u5efa\u81ea\u5b9a\u4e49\u7684\u9519\u8bef\u7c7b\u578b\u7c7b\u4f3c\u627f\u8f7d 1 2 3 4 5 6 type SyntaxError struct { msg string // description of error Offset int64 // error occurred after reading Offset bytes } func ( e * SyntaxError ) Error () string { return e . msg } \u5bf9\u4e8e\u4e00\u4e9b\u9759\u6001\u7684\u3001\u7b80\u5355\u7684\u9519\u8bef\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u6807\u51c6\u5e93\u4e2d\u7684error 1 2 3 4 5 func Sqrt ( f float64 ) ( float64 , error ) { if f < 0 { return 0 , errors . New ( \"math: square root of negative number\" ) } } \u7edf\u4e00\u5b9a\u4e49Package\u7ea7\u522b\u7684\u9519\u8bef(Err\u524d\u7f00\uff0c\u8fd9\u662fgo\u5b9a\u4e49\u9519\u8bef\u7684\u547d\u540d\u89c4\u8303) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 var ( ErrInvalidUnreadByte = errors . New ( \"bufio: invalid use of UnreadByte\" ) ErrInvalidUnreadRune = errors . New ( \"bufio: invalid use of UnreadRune\" ) ErrBufferFull = errors . New ( \"bufio: buffer full\" ) ErrNegativeCount = errors . New ( \"bufio: negative count\" ) ) data , err := b . Peek ( 1 ) if err != nil { switch err { case bufio . ErrNegativeCount : // Do something specific. return case bufio . ErrBufferFull : // Do something specific. return default : // Do something generic. return } } \u5c0f\u5fc3error\u7684\u6bd4\u8f83 error\u662f\u4e2ainterface\uff0cintreface\u7684\u6bd4\u8f83\u8981\u770b\u5176\u5185\u90e8\u5b58\u50a8\u7684\u662f\u503c\u8fd8\u662f\u6307\u9488\uff0c\u5b9e\u9645\u6bd4\u8f83\u7684\u65f6\u5019\u662f\u7528\u5185\u90e8\u5b58\u50a8\u7684\u7c7b\u578b\u6765\u6bd4\u8f83\u7684\uff0c\u5982\u679c\u5b58\u50a8\u7684\u6307\u9488\uff0c\u90a3\u4e48\u603b\u662f\u4e0d\u76f8\u540c\uff0c \u5982\u679c\u5b58\u50a8\u7684\u662f\u503c\u4f1a\u8fdb\u884c\u503c\u7684\u6bd4\u8f83\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 package main import \"errors\" import \"fmt\" func main () { // errors.New\u8fd4\u56de\u7684interface\u5185\u90e8\u5b58\u50a8\u7684\u662f\u6307\u9488 a := errors . New ( \"same thing\" ); b := errors . New ( \"same thing\" ); if a == b { fmt . Printf ( \"same\" ) } else { fmt . Printf ( \"no\" ) } } type ErrNumber int64 func ( e ErrNumber ) Error () string { return \"error number\" } func main () { // \u6bd4\u8f83\u7684\u662fErrNumber\u7684\u503c\uff0c\u56e0\u4e3aErrNumber\u662f\u503c\u7c7b\u578b\u5b58\u50a8\u5728intreface\u4e2d var err1 error = ErrNumber ( 5 ) var err2 error = ErrNumber ( 5 ) if err1 == err2 { fmt . Printf ( \"same\" ) } else { fmt . Printf ( \"no\" ) } } Tip \u4e00\u65e6\u6211\u4eec\u4f7f\u7528\u6307\u9488\u4f5c\u4e3areceve\u5c31\u6807\u5fd7\u7740\u6211\u4eec\u53ea\u80fd\u5b58\u50a8\u6307\u9488\u5230interface\u4e2d\uff0c\u56e0\u6b64\u8fd9\u4e2a\u65f6\u5019\u6bd4\u8f83interface\u5c31\u603b\u662f\u6bd4\u8f83\u6307\u9488\u4e86\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u9884\u5148\u5728pacakge\u7ea7\u522b\u5b9a\u4e49\u597d\u4e00\u7cfb\u5217\u7684\u9519\u8bef\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u8fdb\u884c\u6bd4\u8f83\u4e86\uff0c\u56e0\u4e3a\u6b64\u65f6\u7684\u63a5\u53e3\u90fd\u662f\u6307\u5411\u76f8\u540c\u7684\u9519\u8bef\u53d8\u91cf \u5c0f\u5fc3error\u7684\u8d4b\u503c error\u662f\u4e2ainterface\uff0c\u4e00\u4e2ainterface\u901a\u5e38\u6765\u8bf4\u5185\u90e8\u6709\u4e24\u4e2a\u6307\u9488\uff0c\u4e00\u4e2a\u6307\u9488\u6307\u5411\u7c7b\u578b\uff0c\u4e00\u4e2a\u6307\u9488\u6307\u5411\u503c\uff0c\u5f53\u6211\u4eec\u5c06\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684error\u7c7b\u578b\u7684nil\u6307\u9488\u8d4b\u503c\u7ed9error\u7684\u65f6\u5019\uff0c \u5b9e\u9645\u4e0a\u5176\u7c7b\u578b\u90e8\u5206\u5df2\u7ecf\u4e0d\u662fnil\u4e86\uff0c\u53ea\u662f\u503c\u7684\u90e8\u5206\u662fnil\u800c\u5df2\u3002\u4e00\u4e2aintreface\u5982\u679c\u662fnil\u7684\u8bdd\uff0c\u5c31\u5fc5\u987b\u5185\u90e8\u7684\u6240\u6709\u6307\u9488\u90fd\u662fnil\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 type ErrNumber struct { number int64 } func ( e * ErrNumber ) Error () string { return \"error number\" } func main () { var err * ErrNumber = nil var err2 error = err // \u8fd9\u91cc\u4f1a\u8f93\u51fanot nil\uff0c\u56e0\u4e3aerr2\u7684\u7c7b\u578b\u90e8\u5206\u6307\u5411\u4e86ErrNumber\uff0c\u53ea\u662f\u503c\u7684\u90e8\u5206\u662fnil\u800c\u5df2\u3002 if err2 != nil { fmt . Printf ( \"not nil\" ) } else { fmt . Printf ( \"nil\" ) } } github.com/pkg/errors log\u548cerror\u662f\u9700\u8981\u4e00\u8d77\u5904\u7406\u7684\uff0cerror\u7684\u5730\u65b9\u90fd\u662f\u9700\u8981\u8bb0\u5f55\u65e5\u5fd7\u7684\uff0c\u8bb0\u5f55\u7684\u65e5\u5fd7\u9700\u8981\u80fd\u591f\u5e2e\u52a9\u6211\u4eecdebug\u95ee\u9898\u3002 \u9762\u5411\u5931\u8d25\u7f16\u7a0b\uff0c\u800c\u4e0d\u662f\u6210\u529f\uff0c\u56e0\u6b64Go\u6ca1\u6709\u5b9e\u73b0\u5f02\u5e38\u3002 \u9519\u8bef\u5904\u7406\u65b9\u5f0f\u7684\u8fdb\u5316\u4e4b\u8def 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 // Get fetches and unmarshals the JSON blob for the key k into v. // If the key is not found, Get reports a \"key not found\" error. func ( tx * Tx ) Get ( k string , v interface {}) ( err error ) // \u7b2c\u4e00\u79cd\u65b9\u5f0f\uff0c\u4e0d\u63a8\u8350\uff0c\u9519\u8bef\u4fe1\u606f\u4e0d\u591f\uff0c\u800c\u4e14\u4e5f\u5f3a\u8026\u5408\u9519\u8bef\u7c7b\u578b var ErrNotFound = errors . New ( \"taildb: key not found\" ) var val Value if err := tx . Get ( \"my-key\" , & val ); err == taildb . ErrNotFound { // no such key } else if err != nil { // something went very wrong } else { // use val } // \u7b2c\u4e8c\u79cd\u65b9\u5f0f\uff0c\u901a\u8fc7\u5b9a\u4e49\u9519\u8bef\u7c7b\u578b\uff0c\u53ef\u4ee5\u627f\u8f7d\u66f4\u591a\u7684\u9519\u8bef\u4e0a\u4e0b\u6587\uff0c\u4f46\u662f\u4ecd\u7136\u5b58\u5728\u95ee\u9898 // \u5f53\u6709\u4eba\u5728\u8fd9\u4e2a\u9519\u8bef\u7684\u57fa\u7840\u4e0a\u53c8\u6dfb\u52a0\u4e86\u9519\u8bef\uff0c\u90a3\u4e48\u5728\u5f97\u5230\u9519\u8bef\u7684\u65f6\u5019\u5c31\u4e0d\u77e5\u9053\u5230\u5e95\u662f\u4f55\u79cd\u7c7b\u578b\u4e86 type KeyNotFoundError struct { Name string } func ( e KeyNotFoundError ) Error () string { return fmt . Errorf ( \"taildb: key %q not found\" ) } var val Value err := tx . Get ( \"my-key\" , & val ) if err != nil { if _ , isNotFound := err .( taildb . KeyNotFoundError ); isNotFound { // no such key } else { // something went very wrong } } else { // use val } func accessCheck ( tx * taildb . Tx , key string ) error { var val Value if err := tx . Get ( key , & val ); err != nil { // \u9519\u8bef\u7c7b\u578b\u518d\u6b21\u88ab\u5c01\u88c5\u4e86\uff0c\u8c03\u7528accessCheck\u7684\u5730\u65b9\u5c31\u6ca1\u529e\u6cd5\u62ff\u5230\u771f\u5b9e\u7684\u9519\u8bef\u4e86\u3002 return fmt . Errorf ( \"access check: %v\" , err ) } if ! val . AccessGranted { return errAccessDenied } return nil } // \u7b2c\u4e09\u79cd\u65b9\u5f0f \u901a\u8fc7xerrors\u5e93\u53ef\u4ee5\u4fdd\u7559\u5e95\u5c42\u7684\u9519\u8bef\u7c7b\u578b\uff0c\u8fd9\u6837\u6211\u4eec\u5728\u8c03\u7528\u7684\u5730\u65b9\u5c31\u53ef\u4ee5\u8fdb\u884c\u8f6c\u6362\u4e86\u3002 // xerrors\u57281.13\u7684\u65f6\u5019\u5c06\u4f1a\u6210\u4e3a\u6807\u51c6\u5e93\u7684\u4e00\u90e8\u5206\uff0c\u5c4a\u65f6\u901a\u8fc7fmt.Errorf(\"%w\")\u540c\u6837\u53ef\u4ee5\u5b9e\u73b0\u76f8\u540c\u7684\u6548\u679c\u3002 if err := tx . Get ( key , & val ); err != nil { return xerrors . Errorf ( \"access check: %w\" , err ) } var val Value if err := accessCheck ( tx , \"my-key\" ); err != nil { var notFoundErr taildb . KeyNotFoundError if xerrors . As ( err , & notFoundErr ) { // no such key } else { // something went very wrong } } else { // use val } // \u7b2c\u56db\u79cd\u65b9\u5f0f\uff0c\u5bf9xerrors\u7684\u4f7f\u7528\u505a\u4e86\u4f18\u5316 var ErrNotFound = errors . New ( \"key not found\" ) Inside taildb we can write : func ( tx * Tx ) Get ( k string , v interface {}) ( err error ) { // ... if noSuchKey { return xerrors . Errorf ( \"taildb: %q: %w\" , k , ErrNotFound ) } } var val Value if err := accessCheck ( tx , \"my-key\" ); xerrors . Is ( err , taildb . ErrNotFound ) { // no such key } else if err != nil { // something went very wrong } else { // use val } Pacakgeing 1 2 3 4 5 6 7 8 9 10 11 12 13 Kit Application \u251c\u2500\u2500 CONTRIBUTORS \u251c\u2500\u2500 cmd/ \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 internal/ \u251c\u2500\u2500 README.md \u2502 \u2514\u2500\u2500 platform/ \u251c\u2500\u2500 cfg/ \u2514\u2500\u2500 vendor/ \u251c\u2500\u2500 examples/ \u251c\u2500\u2500 log/ \u251c\u2500\u2500 pool/ \u251c\u2500\u2500 tcp/ \u251c\u2500\u2500 timezone/ \u251c\u2500\u2500 udp/ \u2514\u2500\u2500 web/ vendor/ \u6240\u6709\u4f9d\u8d56\u7684\u4e09\u65b9\u5e93\u7684\u5305\u90fd\u9700\u8981copy\u5230\u8fd9\u4e2a\u76ee\u5f55\u4e0b cmd \u6240\u6709\u7684\u9879\u76ee\u4e8c\u8fdb\u5236\u90fd\u653e\u5728\u8fd9\u4e2a\u76ee\u5f55\u4e0b\uff0c\u8fd9\u4e2a\u76ee\u5f55\u4e0b\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u4e8c\u8fdb\u5236\u7a0b\u5e8f\u6709\u5355\u72ec\u7684\u76ee\u5f55\u3002 internal \u9700\u8981\u88ab\u591a\u4e2a\u7a0b\u5e8f\u7528\u5230\u7684package\u5c5e\u4e8e\u8fd9\u4e2a\u76ee\u5f55\uff0c\u4f7f\u7528\u540d\u79f0 internal/ \u7684\u4e00\u4e2a\u597d\u5904\u662f\uff0c\u9879\u76ee\u4ece\u7f16\u8bd1\u5668\u4e2d\u83b7\u5f97\u4e86\u989d\u5916\u7684\u4fdd\u62a4\u3002 \u6b64\u9879\u76ee\u5916\u90e8\u7684\u4efb\u4f55\u8f6f\u4ef6\u5305\u90fd\u4e0d\u80fd\u4ece internal/ \u5185\u90e8\u5bfc\u5165\u8f6f\u4ef6\u5305\u3002\u56e0\u6b64\uff0c\u8fd9\u4e9b\u8f6f\u4ef6\u5305\u4ec5\u5728\u6b64\u9879\u76ee\u5185\u90e8\u3002 internal/platform \u57fa\u7840\u4f46\u7279\u5b9a\u4e8e\u9879\u76ee\u7684\u8f6f\u4ef6\u5305\u4f4d\u4e8e internal/platform/ \u6587\u4ef6\u5939\u4e2d\u3002\u8fd9\u4e9b\u8f6f\u4ef6\u5305\u5c06\u4e3a\u6570\u636e\u5e93\uff0c\u8eab\u4efd\u9a8c\u8bc1\u751a\u81f3\u90ae\u4ef6\u5904\u7406\u7b49\u63d0\u4f9b\u652f\u6301\u3002 Goroutines And Concurrency Goroutines\u662f\u7531Go\u8c03\u5ea6\u7a0b\u5e8f\u521b\u5efa\u5e76\u72ec\u7acb\u8fd0\u884c\u7684\u51fd\u6570\u3002 Go\u8c03\u5ea6\u7a0b\u5e8f\u8d1f\u8d23goroutine\u7684\u7ba1\u7406\u548c\u6267\u884c\u3002 Goroutines\u7b80\u79f0\u4e3aG\u3001Goroutines\u8fd0\u884c\u5728\u903b\u8f91\u5904\u7406\u5668\u4e0a\uff0c\u7b80\u79f0\u4e3aP\uff0c\u800c\u8fd9\u4e2a\u903b\u8f91\u7684\u5904\u7406\u5668\u548cOS\u63d0\u4f9b\u7684Thread\u7ed1\u5b9a\u5728\u4e00\u8d77\uff0c\u8fd9\u4e2aThread\u7b80\u79f0\u4e3aM\uff0c\u800c\u8fd9\u4e2aThread\u5219\u6709OS\u8d1f\u8d23\u7ed1\u5b9a\u5230\u4e00\u4e2a\u5904\u7406\u5668\u4e0a\u8fd0\u884c\u3002 GODEBUG=schedtrace=1000 \u8f93\u51fago runtime\u7684\u8c03\u5ea6trace\u4fe1\u606f\uff0c\u6bcf\u96941000\u5fae\u5999 1 2 3 4 5 SCHED 0ms: gomaxprocs = 1 idleprocs = 0 threads = 2 spinningthreads = 0 idlethreads = 0 runqueue = 0 [ 1 ] SCHED 1009ms ( \u7a0b\u5e8f\u8fd0\u884c\u5230\u73b0\u5728\u7684\u65f6\u95f4 ) : gomaxprocs = 1 ( \u914d\u7f6e\u7684\u903b\u8f91\u5904\u7406\u5668\u6570\u91cf ) idleprocs = 0 ( \u6709\u591a\u5c11\u5904\u7406\u5668\u662f\u95f2\u7f6e\u7684 ) threads = 3 ( \u603b\u5171\u6709\u4e09\u4e2a\u7ebf\u7a0b\u8fd0\u884c\uff0c\u5176\u4e2d\u4e8c\u4e2a\u662f\u670d\u52a1go runtime\u7684\uff0c\u53e6\u5916\u4e00\u4e2a\u624d\u662f\u7ed1\u5b9a\u5230\u5904\u7406\u5668\u4e0a\u8fd0\u884c ) spinningthreads = 0 idlethreads = 1 ( \u6709\u591a\u5c11\u4e2a\u7ebf\u7a0b\u95f2\u7f6e ) runqueue = 0 ( \u6709\u591a\u5c11\u534f\u7a0b\u5728\u5168\u5c40\u8fd0\u884c\u961f\u5217 ) [ 9 ]( \u6709\u591a\u5c11\u4e2a\u534f\u7a0b\u5728\u672c\u5730\u8fd0\u884c\u961f\u5217 ) 1 2 3 4 5 6 7 8 9 10 SCHED 2002ms: gomaxprocs = 2 idleprocs = 0 threads = 4 spinningthreads = 0 idlethreads = 1 runqueue = 0 [ 4 4 ] 2002ms : \u5728\u7a0b\u5e8f\u8fd0\u884c\u4e862s\u5de6\u53f3\u8f93\u51fa\u7684trace\u4fe1\u606f gomaxprocs = 2 : \u914d\u7f6e\u4e862\u4e2a\u903b\u8f91\u5904\u7406\u5668 threads = 4 : \u6709\u56db\u4e2a\u7ebf\u7a0b\u5728\u8fd0\u884c\uff0c2\u4e2a\u670d\u52a1\u4e8ego runtime\uff0c\u8fd8\u67092\u4e2a\u670d\u52a1\u4e8e\u5904\u7406\u5668 idlethreads = 1 : \u67091\u4e2a\u7ebf\u7a0b\u662f\u95f2\u7f6e\u7684 idleprocs = 0 : \u67090\u4e2a\u5904\u7406\u5668\u662f\u5904\u4e8e\u95f2\u7f6e\u72b6\u6001 runqueue = 0 : \u67090\u4e2a\u534f\u7a0b\u5728\u5168\u5c40\u8fd0\u884c\u961f\u5217\u4e2d [ 4 4 ] : \u6bcf\u4e00\u4e2a\u5904\u7406\u5668\u4e0a\u7684\u672c\u5730\u8fd0\u884c\u961f\u5217\u4e2d\u90fd\u67094\u4e2a\u534f\u7a0b\u5728\u7b49\u5f85\u88ab\u8fd0\u884c\u3002 GODEBUG=schedtrace=1000,scheddetail=1 \u663e\u793a\u7b49\u8be6\u7ec6\u7684\u8c03\u5ea6trace\u4fe1\u606f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 SCHED 4028ms: gomaxprocs = 2 idleprocs = 0 threads = 4 spinningthreads = 0 idlethreads = 1 runqueue = 2 gcwaiting = 0 nmidlelocked = 0 stopwait = 0 sysmonwait = 0 P0: status = 1 schedtick = 10 syscalltick = 0 m = 3 runqsize = 3 gfreecnt = 0 P1: status = 1 schedtick = 10 syscalltick = 1 m = 2 runqsize = 3 gfreecnt = 0 M3: p = 0 curg = 4 mallocing = 0 throwing = 0 gcing = 0 locks = 0 dying = 0 helpgc = 0 spinning = 0 blocked = 0 lockedg = -1 M2: p = 1 ( \u8868\u793a\u8fd9\u4e2a\u7ebf\u7a0b\u7ed1\u5b9a\u5728\u54ea\u4e2a\u5904\u7406\u5668\u4e0a\u4e86 ) curg = 10 mallocing = 0 throwing = 0 gcing = 0 locks = 0 dying = 0 helpgc = 0 spinning = 0 blocked = 0 lockedg = -1 M1: p = -1 curg = -1 mallocing = 0 throwing = 0 gcing = 0 locks = 1 dying = 0 helpgc = 0 spinning = 0 blocked = 0 lockedg = -1 M0: p = -1 curg = -1 mallocing = 0 throwing = 0 gcing = 0 locks = 0 dying = 0 helpgc = 0 spinning = 0 blocked = 0 lockedg = -1 G1: status = 4 ( semacquire ) m = -1 lockedm = -1 G2: status = 4 ( force gc ( idle )) m = -1 lockedm = -1 G3: status = 4 ( GC sweep wait ) m = -1 lockedm = -1 G4: status = 2 ( sleep ) m = 3 lockedm = -1 G5: status = 1 ( sleep ) m = -1 lockedm = -1 G6: status = 1 ( stack growth ) m = -1 lockedm = -1 G7: status = 1 ( sleep ) m = -1 lockedm = -1 G8: status = 1 ( sleep ) m = -1 lockedm = -1 G9: status = 1 ( stack growth ) m = -1 lockedm = -1 G10: status = 2 ( sleep ) m = 2 ( \u8868\u793a\u8fd9\u4e2a\u534f\u7a0b\u6b64\u65f6\u5728\u54ea\u4e2a\u7ebf\u7a0b\u4e2d\u8fd0\u884c ) lockedm = -1 G11: status = 1 ( sleep ) m = -1 lockedm = -1 G12: status = 1 ( sleep ) m = -1 lockedm = -1 G13: status = 1 ( sleep ) m = -1 lockedm = -1 G17: status = 4 ( timer goroutine ( idle )) m = -1 lockedm = -1 P\u8868\u793a\u5904\u7406\u5668\u3001M\u8868\u793a\u7ebf\u7a0b\u3001G\u8868\u793a\u534f\u7a0b\u3002 1 2 3 4 5 6 7 8 9 10 status: http://golang.org/src/runtime/ Gidle, // 0 Grunnable, // 1 runnable and on a run queue Grunning, // 2 running Gsyscall, // 3 performing a syscall Gwaiting, // 4 waiting for the runtime Gmoribund_unused, // 5 currently unused, but hardcoded in gdb scripts Gdead, // 6 goroutine is dead Genqueue, // 7 only the Gscanenqueue is used Gcopystack, // 8 in this state when newstack is moving the stack GOMAXPROCS \u63a7\u5236go\u534f\u7a0b\u53ef\u4ee5\u5728\u591a\u5c11\u4e2acore\u4e0a\u8fd0\u884c\u3002 Concurrency Pattern Generator 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 c := boring ( \"boring!\" ) // Function returning a channel. for i := 0 ; i < 5 ; i ++ { fmt . Printf ( \"You say: %q\\n\" , <- c ) } fmt . Println ( \"You're boring; I'm leaving.\" ) func boring ( msg string ) <- chan string { // Returns receive-only channel of strings. c := make ( chan string ) go func () { // We launch the goroutine from inside the function. for i := 0 ; ; i ++ { c <- fmt . Sprintf ( \"%s %d\" , msg , i ) time . Sleep ( time . Duration ( rand . Intn ( 1e3 )) * time . Millisecond ) } }() return c // Return the channel to the caller. } Tip \u4e0a\u9762\u7684\u4ee3\u7801\u5b58\u5728\u534f\u7a0b\u6cc4\u6f0f\uff0c\u9700\u8981\u8003\u8651\u52a0\u5165context Fan in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 func merge ( cs ...<- chan int ) <- chan int { var wg sync . WaitGroup out := make ( chan int ) // Start an output goroutine for each input channel in cs. output // copies values from c to out until c is closed, then calls wg.Done. output := func ( c <- chan int ) { for n := range c { out <- n } wg . Done () } wg . Add ( len ( cs )) for _ , c := range cs { go output ( c ) } // Start a goroutine to close out once all the output goroutines are // done. This must start after the wg.Add call. go func () { wg . Wait () close ( out ) }() return out } Fan out 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 func fanOutSem () { emps := 2000 ch := make ( chan string , emps ) g := runtime . GOMAXPROCS ( 0 ) sem := make ( chan bool , g ) for e := 0 ; e < emps ; e ++ { go func ( emp int ) { sem <- true { time . Sleep ( time . Duration ( rand . Intn ( 200 )) * time . Millisecond ) ch <- \"paper\" fmt . Println ( \"employee : sent signal :\" , emp ) } <- sem }( e ) } for emps > 0 { p := <- ch emps -- fmt . Println ( p ) fmt . Println ( \"manager : recv'd signal :\" , emps ) } time . Sleep ( time . Second ) } Drop 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 func drop () { const cap = 100 ch := make ( chan string , cap ) go func () { for p := range ch { fmt . Println ( \"employee : recv'd signal :\" , p ) } }() const work = 2000 for w := 0 ; w < work ; w ++ { select { case ch <- \"paper\" : fmt . Println ( \"manager : sent signal :\" , w ) default : fmt . Println ( \"manager : dropped data :\" , w ) } } close ( ch ) fmt . Println ( \"manager : sent shutdown signal\" ) time . Sleep ( time . Second ) } pooling 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 func pooling () { ch := make ( chan string ) g := runtime . GOMAXPROCS ( 0 ) for e := 0 ; e < g ; e ++ { go func ( emp int ) { for p := range ch { fmt . Printf ( \"employee %d : recv'd signal : %s\\n\" , emp , p ) } fmt . Printf ( \"employee %d : recv'd shutdown signal\\n\" , emp ) }( e ) } const work = 100 for w := 0 ; w < work ; w ++ { ch <- \"paper\" fmt . Println ( \"manager : sent signal :\" , w ) } close ( ch ) fmt . Println ( \"manager : sent shutdown signal\" ) time . Sleep ( time . Second ) } Pipeline 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 func gen ( nums ... int ) <- chan int { out := make ( chan int ) go func () { for _ , n := range nums { out <- n } close ( out ) }() return out } func sq ( in <- chan int ) <- chan int { out := make ( chan int ) go func () { for n := range in { out <- n * n } close ( out ) }() return out } func main () { // Set up the pipeline and consume the output. for n := range sq ( sq ( gen ( 2 , 3 ))) { fmt . Println ( n ) // 16 then 81 } } Data Race go build -race/go test -race \u5f00\u542frace\u68c0\u6d4b map\u9ed8\u8ba4\u81ea\u5e26race\u68c0\u6d4b \u5bf9\u4e8e\u63a5\u53e3\u7684read/write\u662f\u5b58\u5728data race\u7684\uff0c\u56e0\u4e3ainterface\u662f\u4e2a\u53cc\u5b57\u5927\u5c0f\u7684\u7c7b\u578b\uff0c\u8d4b\u503c\u7684\u65f6\u5019\u4e0d\u662f\u539f\u5b50\u7684\uff0c\u9700\u8981\u4fee\u6539\u6307\u5411\u7684\u7c7b\u578b\uff0c\u8fd8\u9700\u8981\u4fee\u6539\u6307\u5411\u7684\u503c\u3002 Channels channels\u5141\u8bb8goroutines\u901a\u8fc7\u4fe1\u53f7\u8bed\u4e49\u76f8\u4e92\u901a\u4fe1\uff0cChannels\u901a\u8fc7\u4f7f\u7528\u53d1\u9001/\u63a5\u6536\u6570\u636e\u6216\u901a\u8fc7\u8bc6\u522b\u5404\u4e2aChannels\u4e0a\u7684\u72b6\u6001\u53d8\u5316\u6765\u5b8c\u6210\u6b64\u4fe1\u53f7\u3002 \u4e0d\u8981\u4ee5Channels\u662f\u961f\u5217\u7684\u601d\u60f3\u6765\u8bbe\u8ba1\u8f6f\u4ef6\uff0c\u800c\u8981\u4e13\u6ce8\u4e8e\u4fe1\u53f7\u8bed\u4e49\u6765\u7b80\u5316\u540c\u6b65\u3002 \u4f7f\u7528channels\u7f16\u6392\u548c\u534f\u8c03goroutine \u5173\u6ce8channels\u63d0\u4f9b\u7684\u4fe1\u4ee4\u8bed\u4e49\uff0c\u800c\u4e0d\u662f\u6570\u636e\u5171\u4eab\u3002 \u4fe1\u53f7\u5206\u4e3a\u6709\u6570\u636e\u548c\u65e0\u6570\u636e\u7684\u3002 \u5bf9\u4e8e\u4f7f\u7528channels\u6765\u4f5c\u4e3a\u6570\u636e\u5171\u4eab\u7684\u573a\u666f\u9700\u8981\u8d28\u7591 Unbuffered channels \u63a5\u6536\u53d1\u751f\u5728\u53d1\u9001\u4e4b\u524d 100%\u4fdd\u8bc1\u4fe1\u53f7\u5230\u8fbe \u5bf9\u4e8e\u4f55\u65f6\u6536\u5230\u4fe1\u53f7\u662f\u672a\u77e5\u7684\uff0c\u56e0\u4e3a\u4f60\u53d1\u9001\u7684\u65f6\u5019\uff0c\u63a5\u6536\u7aef\u53ef\u80fd\u8fd8\u6ca1\u6709\u5728\u63a5\u6536 Buffered channels \u53d1\u9001\u53d1\u751f\u5728\u63a5\u6536\u524d \u51cf\u5c11\u4e86\u4fe1\u53f7\u4e4b\u95f4\u7684\u963b\u585e\u5ef6\u8fdf\uff0c\u591a\u6b21\u4fe1\u53f7\u53d1\u9001\u4e4b\u95f4\u662f\u6ca1\u6709\u5ef6\u8fdf\u7684 \u4e0d\u4fdd\u8bc1\u4fe1\u53f7\u88ab\u63a5\u6536\u4e86\uff0c\u53ef\u80fd\u4e00\u76f4\u5728\u961f\u5217\u4e2d \u7f13\u51b2\u533a\u8d8a\u5927\uff0c\u4fdd\u8bc1\u8d8a\u5c11 \u7f13\u51b2\u533a\u4e3a1\u7684\u8bdd\uff0c\u53ef\u4ee5\u4fdd\u8bc1\u53ea\u6709\u4e00\u4e2a\u4fe1\u53f7\u88ab\u5ef6\u8fdf\u53d1\u9001\u3002 Closing channels Close\u53d1\u751f\u5728\u63a5\u6536\u524d \u662f\u4e00\u79cd\u6ca1\u6709\u6570\u636e\u7684\u4fe1\u53f7 \u7528\u4e8e\u53d6\u6d88\u6216\u8005\u662fdeadline\u662f\u6700\u4f73\u7684 NIL channels \u53d1\u9001\u548c\u63a5\u6536\u662f\u963b\u585e\u7684 \u5173\u95ed\u4e86\u4fe1\u53f7 \u975e\u5e38\u9002\u5408\u901f\u7387\u9650\u5236\u6216\u77ed\u671f\u505c\u5de5 \u5f80Closed\u7684channel\u53d1\u9001\u4fe1\u53f7\u4f1a\u5bfc\u81f4panic\uff0c\u4f46\u662f\u63a5\u6536\u662f\u53ef\u4ee5\u7684\uff0c\u4f1a\u7acb\u5373\u8fd4\u56de\u3002 close channel\u6216\u8005\u662f\u5bf9struct{}\u7c7b\u578b\u7684channel\u8fdb\u884csend\u5c5e\u4e8e\u65e0\u6570\u636e\u7684\u4fe1\u53f7\uff0c\u8fd9\u7c7b\u4fe1\u53f7\u901a\u5e38\u7528\u4e8estop\u3001cannecel\u7b49\u573a\u666f\u3002\u4e5f\u53ef\u4ee5\u4f7f\u7528Context Channels\u5185\u90e8\u662f\u4e00\u4e2ahchan\u7ed3\u6784\uff0c\u8fd9\u4e2a\u7ed3\u6784\u5927\u81f4\u5982\u4e0b: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 type hchan struct { buf CircularQueue sendx uint64 recvx uint64 lock mutex sendq sudog recvq sudog } type sudog struct { G Coroutine elem T ... } \u4e00\u4e2acircular queue\uff0cchan\u7684\u8bfb\u548c\u5199\u5b9e\u9645\u5c31\u662f\u64cd\u4f5csendx\u3001recvx\u3001chan\u672c\u8eab\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u6307\u5411hchan\u7684\u6307\u9488\u3002\u5f53chan\u662fbuffer\u7684channel\u7684\u65f6\u5019\u5199\u5165\u548c\u8bfb\u53d6\u5c31\u662f\u7b80\u5355\u7684\u52a0\u9501\u7136\u540e\u79fb\u52a8sendx\u3001recvx \u5f53chan\u4e3aunbuffer\u6216\u8005buffer\u6ee1\u7684\u65f6\u5019\u53d1\u751f\u5199\u5165\u6216\u8005buffer\u7a7a\u7684\u65f6\u5019\u53d1\u751f\u8bfb\u53d6\u7684\u65f6\u5019\u90fd\u4f1a\u5bfc\u81f4\u963b\u585e\uff0c\u8fd9\u4e2a\u65f6\u5019go runtime\u4f1a\u8c03\u7528gopark\u628a\u5f53\u524d\u534f\u7a0b\u7684\u72b6\u6001\u8bbe\u7f6e\u4e3awaitting\uff0c\u7136\u540e\u4ece\u5f53\u524d\u534f\u7a0b\u4e2d\u79fb\u9664 \u653e\u5165\u5168\u5c40\u961f\u5217\u4e2d\u3002\u7136\u540e\u8fd9\u4e2a\u534f\u7a0b\u6240\u5bf9\u5e94\u7684OS Thread\u4f1a\u7ee7\u7eed\u4ece\u53ef\u8fd0\u884c\u961f\u5217\u4e2d\u8fd0\u884c\u4e0b\u4e00\u4e2a\u534f\u7a0b\u3002\u7136\u540e\u628a\u5f53\u524d\u534f\u7a0b\u548c\u8981\u5199\u5165\u7684\u503c\u653e\u5165\u4e00\u4e2a\u7c7b\u4e3asudog\u7684send queue\u4e2d\u3002\u5f53\u6709receive\u4ece\u534f\u7a0b\u63a5\u6536\u7684\u65f6\u5019\u4f1a \u4ecesend queue\u4e2d\u51fa\u961f\uff0c\u628a\u503c\u653e\u5230circular queue\u4e2d\u6216\u8005\u5982\u679c\u662f\u4e00\u4e2aunbuffered\u7684chan\u5219\u76f4\u63a5\u8d4b\u503c\u7ed9receiver\uff0c\u6700\u540e\u8c03\u7528go runtime\u4e2d\u7684goready\u5c06\u5f53\u524d\u534f\u7a0b\u8bbe\u7f6e\u4e3arunable\u3002\u7b49\u5f85\u8c03\u5ea6\u5230OS Thread\u4e2d \u88ab\u8fd0\u884c\u3002\u540c\u6837\u5f53receive\u51fa\u73b0\u963b\u585e\u7684\u65f6\u5019\uff0c\u8fc7\u7a0b\u548csend\u7c7b\u4f3c\u3002 Context Context\u63d0\u4f9b\u4e86key-value\u7684\u6620\u5c04\uff0ckey\u548cvalue\u90fd\u662f interface{} \u7c7b\u578b\uff0ckey\u5fc5\u987b\u5177\u5907\u76f8\u7b49\u6027\u6bd4\u8f83\uff0c\u800cvalue\u5219\u5141\u8bb8\u88ab\u591a\u4e2a\u534f\u7a0b\u5b89\u5168\u7684\u4f7f\u7528\u3002 \u5230server\u7684\u8bf7\u6c42\u5e94\u8be5\u521b\u5efa\u4e00\u4e2aContext \u4eceServer\u4e2d\u53d1\u51fa\u7684\u8bf7\u6c42\u5e94\u8be5\u53ef\u4ee5\u63a5\u6536Context\u53c2\u6570 \u8fdb\u6765\u7684\u8bf7\u6c42\u548c\u51fa\u53bb\u7684\u8bf7\u6c42\u4e4b\u95f4\u5fc5\u987b\u80fd\u5426\u4f20\u9012Context \u53d6\u6d88Context\u540e\uff0c\u4ece\u8be5Context\u6d3e\u751f\u7684\u6240\u6709Context\u4e5f\u4f1a\u88ab\u53d6\u6d88 \u4e0d\u8981\u5c06\u4e0a\u4e0b\u6587\u5b58\u50a8\u5728\u7ed3\u6784\u7c7b\u578b\u4e2d\uff1b\u800c\u662f\u5c06\u4e0a\u4e0b\u6587\u660e\u786e\u4f20\u9012\u7ed9\u9700\u8981\u5b83\u7684\u6bcf\u4e2a\u51fd\u6570 \u5373\u4f7f\u51fd\u6570\u5141\u8bb8\uff0c\u4e5f\u4e0d\u8981\u4f20\u9012nil Context\u3002\u5982\u679c\u4e0d\u786e\u5b9a\u4f7f\u7528\u54ea\u4e2a\u4e0a\u4e0b\u6587\uff0c\u8bf7\u4f20\u9012context.TODO\u3002 \u4ec5\u5c06\u4e0a\u4e0b\u6587\u503c\u7528\u4e8e\u8bf7\u6c42\u8303\u56f4\u7684\u8fdb\u7a0b\u548cAPI\u95f4\u7684\u4f20\u9012\uff0c\u800c\u4e0d\u7528\u4e8e\u5c06\u53ef\u9009\u53c2\u6570\u4f20\u9012\u7ed9\u51fd\u6570\u3002 \u53ef\u4ee5\u5c06\u76f8\u540c\u7684\u4e0a\u4e0b\u6587\u4f20\u9012\u7ed9\u5728\u4e0d\u540cgoroutine\u4e2d\u8fd0\u884c\u7684\u51fd\u6570\u3002\u4e0a\u4e0b\u6587\u5bf9\u4e8e\u7531\u591a\u4e2agoroutine\u540c\u65f6\u4f7f\u7528\u662f\u5b89\u5168\u7684\u3002 Testing \u4f7f\u7528httptest\u6765\u505amockClient 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 func init () { handlers . Routes () } // TestSendJSON testing the sendjson internal endpoint. func TestSendJSON ( t * testing . T ) { url := \"/sendjson\" statusCode := 200 t . Log ( \"Given the need to test the SendJSON endpoint.\" ) { r := httptest . NewRequest ( \"GET\" , url , nil ) w := httptest . NewRecorder () http . DefaultServeMux . ServeHTTP ( w , r ) testID := 0 t . Logf ( \"\\tTest %d:\\tWhen checking %q for status code %d\" , testID , url , statusCode ) { if w . Code != 200 { t . Fatalf ( \"\\t%s\\tTest %d:\\tShould receive a status code of %d for the response. Received[%d].\" , failed , testID , statusCode , w . Code ) } t . Logf ( \"\\t%s\\tTest %d:\\tShould receive a status code of %d for the response.\" , succeed , testID , statusCode ) var u struct { Name string Email string } if err := json . NewDecoder ( w . Body ). Decode ( & u ); err != nil { t . Fatalf ( \"\\t%s\\tTest %d:\\tShould be able to decode the response.\" , failed , testID ) } t . Logf ( \"\\t%s\\tTest %d:\\tShould be able to decode the response.\" , succeed , testID ) if u . Name == \"Bill\" { t . Logf ( \"\\t%s\\tTest %d:\\tShould have \\\"Bill\\\" for Name in the response.\" , succeed , testID ) } else { t . Errorf ( \"\\t%s\\tTest %d:\\tShould have \\\"Bill\\\" for Name in the response : %q\" , failed , testID , u . Name ) } if u . Email == \"bill@ardanlabs.com\" { t . Logf ( \"\\t%s\\tTest %d:\\tShould have \\\"bill@ardanlabs.com\\\" for Email in the response.\" , succeed , testID ) } else { t . Errorf ( \"\\t%s\\tTest %d:\\tShould have \\\"bill@ardanlabs.com\\\" for Email in the response : %q\" , failed , testID , u . Email ) } } } } \u4f7f\u7528httptest\u6765\u505amockServer 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 // mockServer returns a pointer to a server to handle the mock get call. func mockServer () * httptest . Server { f := func ( w http . ResponseWriter , r * http . Request ) { w . WriteHeader ( 200 ) w . Header (). Set ( \"Content-Type\" , \"application/xml\" ) fmt . Fprintln ( w , feed ) } return httptest . NewServer ( http . HandlerFunc ( f )) } // TestDownload validates the http Get function can download content and // the content can be unmarshaled and clean. func TestDownload ( t * testing . T ) { statusCode := http . StatusOK server := mockServer () defer server . Close () t . Log ( \"Given the need to test downloading content.\" ) { testID := 0 t . Logf ( \"\\tTest %d:\\tWhen checking %q for status code %d\" , testID , server . URL , statusCode ) { resp , err := http . Get ( server . URL ) if err != nil { t . Fatalf ( \"\\t%s\\tTest %d:\\tShould be able to make the Get call : %v\" , failed , testID , err ) } t . Logf ( \"\\t%s\\tTest %d:\\tShould be able to make the Get call.\" , succeed , testID ) defer resp . Body . Close () if resp . StatusCode != statusCode { t . Fatalf ( \"\\t%s\\tTest %d:\\tShould receive a %d status code : %v\" , failed , testID , statusCode , resp . StatusCode ) } t . Logf ( \"\\t%s\\tTest %d:\\tShould receive a %d status code.\" , succeed , testID , statusCode ) var d Document if err := xml . NewDecoder ( resp . Body ). Decode ( & d ); err != nil { t . Fatalf ( \"\\t%s\\tTest %d:\\tShould be able to unmarshal the response : %v\" , failed , testID , err ) } t . Logf ( \"\\t%s\\tTest %d:\\tShould be able to unmarshal the response.\" , succeed , testID ) if len ( d . Channel . Items ) == 1 { t . Logf ( \"\\t%s\\tTest %d:\\tShould have 1 item in the feed.\" , succeed , testID ) } else { t . Errorf ( \"\\t%s\\tTest %d:\\tShould have 1 item in the feed : %d\" , failed , testID , len ( d . Channel . Items )) } } } } Compile args 1 2 3 4 5 6 7 8 9 10 11 panic : Aw , snap goroutine 1 [ running ]: main . main () / home / johnpili / go / src / company . com / event - document - pusher / main . go : 42 + 0x3e > go build - trimpath panic : Aw , snap goroutine 1 [ running ]: main . main () src / company . com / event - document - pusher / main . go : 42 + 0x3e Reference Contiguous stacks How Stacks are Handled in Go gc Go Escape Analysis Flaws Reading TODO https://brunocalza.me/how-buffer-pool-works-an-implementation-in-go/ https://www.youtube.com/watch?v=f6kdp27TYZs https://talks.golang.org/2013/advconc.slide#1 https://steveazz.xyz/blog/go-performance-tools-cheat-sheet/","title":"Ultimate Go Programing"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/course/Ultimate_Go_Programing/#ultimate-go-programing","text":"","title":"Ultimate Go Programing"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/course/Ultimate_Go_Programing/#lesson-1-design-guidelines","text":"","title":"Lesson 1: Design Guidelines"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/course/Ultimate_Go_Programing/#philosophy","text":"Open Your Mind: Technology changes quickly but people's minds change slowly. Easy to adopt new technology but hard to adopt new ways of thinking. Interesting Questions - What do they mean to you? Is it a good program? Is it an efficient program? Is it correct? Was it done on time? What did it cost? Aspire To Be a champion for quality, efficiency and simplicity. Have a point of view. Value introspection and self-review. Reading Code Tip \u201cIf most computer people lack understanding and knowledge, then what they will select will also be lacking.\u201d - Alan Kay \"The software business is one of the few places we teach people to write before we teach them to read.\" - Tom Love (inventor of Objective C) \"Code is read many more times than it is written.\" - Dave Cheney \"Programming is, among other things, a kind of writing. One way to learn writing is to write, but in all other forms of writing, one also reads. We read examples both good and bad to facilitate learning. But how many programmers learn to write programs by reading programs?\" - Gerald M. Weinberg \"Skill develops when we produce, not consume.\" - Katrina Owen Productivity vs Performance \u9075\u5faaGo\u7684idioms\u548cguideliness\uff0c\u6211\u4eec\u5c06\u4f1a\u540c\u65f6\u62e5\u6709\u6027\u80fd\u548c\u5f00\u53d1\u6548\u7387\uff0c\u5728\u8fc7\u4e8e\u8fd9\u662f\u9700\u8981\u4e8c\u9009\u4e00\u7684\uff0c\u800c\u5927\u5bb6\u66f4\u591a\u662f\u9009\u62e9\u4e86\u5f00\u53d1\u6548\u7387\uff0c\u5e76\u5e0c\u671b\u901a\u8fc7\u786c\u4ef6\u7684\u53d1\u5c55\u6765\u63d0\u9ad8\u6027\u80fd\u3002\u8fd9\u4e5f\u5bfc\u81f4\u4e86\u4e3a\u6b64\u8bbe\u8ba1\u7684\u8bed\u8a00\u4ea7\u751f\u4e86\u5927\u91cf\u4f4e\u6548\u7684\u8f6f\u4ef6\u3002 Correctness vs Performance \u60a8\u60f3\u8981\u7f16\u5199\u9488\u5bf9\u6b63\u786e\u6027\u8fdb\u884c\u4e86\u4f18\u5316\u7684\u4ee3\u7801\u3002\u4e0d\u8981\u6839\u636e\u60a8\u8ba4\u4e3a\u53ef\u80fd\u4f1a\u66f4\u597d\u7684\u6027\u80fd\u6765\u505a\u51fa\u7f16\u7801\u51b3\u7b56\u3002\u60a8\u5fc5\u987b\u8fdb\u884c\u57fa\u51c6\u6d4b\u8bd5\u4ee5\u4e86\u89e3\u4ee3\u7801\u662f\u5426\u4e0d\u591f\u5feb\u4ee5\u6b64\u6765\u51b3\u5b9a\u662f\u5426\u9700\u8981\u4f18\u5316\u3002 Tip \"Make it correct, make it clear, make it concise, make it fast. In that order.\" - Wes Dyer \"Good engineering is less about finding the \"perfect\" solution and more about understanding the tradeoffs and being able to explain them.\" - JBD \"The correctness of the implementation is the most important concern, but there is no royal road to correctness. It involves diverse tasks such as thinking of invariants, testing and code reviews. Optimization should be done, but not prematurely.\" - Al Aho (inventor of AWK) \"The basic ideas of good style, which are fundamental to write clearly and simply, are just as important now as they were 35 years ago. Simple, straightforward code is just plain easier to work with and less likely to have problems. As programs get bigger and more complicated, it's even more important to have clean, simple code.\" - Brian Kernighan \"Problems can usually be solved with simple, mundane solutions. That means there's no glamorous work. You don't get to show off your amazing skills. You just build something that gets the job done and then move on. This approach may not earn you oohs and aahs, but it lets you get on with it.\" - Jason Fried Code Reviews \u6ca1\u6709\u8bbe\u8ba1\u54f2\u5b66\uff0c\u60a8\u5c31\u65e0\u6cd5\u770b\u4e00\u6bb5\u4ee3\u7801\uff0c\u51fd\u6570\u6216\u7b97\u6cd5\uff0c\u5e76\u786e\u5b9a\u5b83\u662f\u597d\u662f\u574f\u3002\u8fd9\u56db\u4e2a\u4e3b\u8981\u7c7b\u522b\u662f\u4ee3\u7801\u5ba1\u67e5\u7684\u57fa\u7840\uff0c\u5e94\u6309\u6b64\u987a\u5e8f\u6392\u5217\u4f18\u5148\u7ea7\uff1a\u5b8c\u6574\u6027\uff0c\u53ef\u8bfb\u6027\uff0c\u7b80\u5355\u6027\u548c\u6027\u80fd\u3002\u60a8\u5fc5\u987b\u6709\u610f\u8bc6\u5730\u5e76\u4e14\u6709\u5145\u5206\u7684\u7406\u7531\u80fd\u591f\u89e3\u91ca\u60a8\u9009\u62e9\u7684\u7c7b\u522b\u3002","title":"Philosophy"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/course/Ultimate_Go_Programing/#code-reviews","text":"Integrity We need to become very serious about reliability. Integrity is about every allocation, read and write of memory being accurate, consistent and efficient. The type system is critical to making sure we have this micro level of integrity. Integrity is about every data transformation being accurate, consistent and efficient. Writing less code and error handling is critical to making sure we have this macro level of integrity. Write Less Code Tips There have been studies that have researched the number of bugs you can expect to have in your software. The industry average is around 15 to 50 bugs per 1000 lines of code. One simple way to reduce the number of bugs, and increase the integrity of your software, is to write less code. Error Handling Tips When error handling is treated as an exception and not part of the main code, you can expect the majority of your critical failures to be due to error handling. Readability \u4ee3\u7801\u8981\u6613\u4e8e\u9605\u8bfb\u548c\u7406\u89e3\uff0c\u800c\u65e0\u9700\u82b1\u8d39\u7cbe\u529b\u3002\u540c\u6837\u91cd\u8981\u7684\u662f\uff0c\u5b83\u4e0d\u9690\u85cf\u6bcf\u884c\u4ee3\u7801\uff0c\u529f\u80fd\uff0c\u7a0b\u5e8f\u5305\u53ca\u5176\u8fd0\u884c\u7684\u6574\u4f53\u751f\u6001\u7cfb\u7edf\u7684\u6210\u672c/\u5f71\u54cd\u3002 Code Must Never Lie Simplicity \u6211\u4eec\u5fc5\u987b\u4e86\u89e3\uff0c\u7b80\u5355\u6027\u5f88\u96be\u8bbe\u8ba1\uff0c\u800c\u4e14\u6784\u5efa\u8d77\u6765\u5f88\u590d\u6742\u3002\u6211\u4eec\u5fc5\u987b\u5c06\u8bb8\u591a\u7ef4\u62a4\u548c\u8bbe\u8ba1\u53d8\u5f97\u7b80\u5355\uff0c\u56e0\u4e3a\u8fd9\u53ef\u80fd\u5bfc\u81f4\u66f4\u591a\u7684\u95ee\u9898\u3002\u5b83\u53ef\u80fd\u4f1a\u5f15\u8d77\u53ef\u8bfb\u6027\u95ee\u9898\uff0c\u5e76\u53ef\u80fd\u5bfc\u81f4\u6027\u80fd\u95ee\u9898\u3002 Tips \"Simplicity is a great virtue but it requires hard work to achieve it and education to appreciate it. And to make matters worse: complexity sells better.\" - Edsger W. Dijkstra \"Everything should be made as simple as possible, but not simpler.\" - Albert Einstein \"You wake up and say, I will be productive, not simple, today.\" - Dave Cheney \u5c01\u88c5\u662f\u6211\u4eec40\u5e74\u6765\u4e00\u76f4\u8bd5\u56fe\u89e3\u51b3\u7684\u95ee\u9898\u3002 Go\u5bf9\u8be5\u8f6f\u4ef6\u5305\u91c7\u53d6\u4e86\u4e00\u79cd\u65b0\u7684\u65b9\u6cd5\u3002\u63d0\u5347\u5c01\u88c5\u6c34\u5e73\uff0c\u5e76\u5728\u8bed\u8a00\u7ea7\u522b\u63d0\u4f9b\u66f4\u4e30\u5bcc\u7684\u652f\u6301\u3002 Tips \"The purpose of abstraction is not to be vague, but to create a new semantic level in which one can be absolutely precise - Edsger W. Dijkstra Performance \u6211\u4eec\u5fc5\u987b\u51cf\u5c11\u8ba1\u7b97\u4ee5\u83b7\u5f97\u6240\u9700\u7684\u7ed3\u679c\u3002 Rules of Performance: * Never guess about performance. * Measurements must be relevant. * Profile before you decide something is performance critical. * Test to know you are correct. Micro-Optimizations \u5fae\u89c2\u4f18\u5316\u662f\u8981\u5c3d\u53ef\u80fd\u5730\u538b\u7f29\u6bcf\u4e2a\u4ee3\u7801\u5feb\u6027\u80fd\u3002\u5f53\u4ee5\u6b64\u4f18\u5148\u7ea7\u7f16\u5199\u4ee3\u7801\u65f6\uff0c\u5f88\u96be\u7f16\u5199\u53ef\u8bfb\uff0c\u7b80\u5355\u6216\u60ef\u7528\u7684\u4ee3\u7801\u3002\u60a8\u6b63\u5728\u7f16\u5199\u5de7\u5999\u7684\u4ee3\u7801\uff0c\u8fd9\u4e9b\u4ee3\u7801\u53ef\u80fd\u9700\u8981 unsafe \u7684\u8f6f\u4ef6\u5305\uff0c\u6216\u8005\u53ef\u80fd\u9700\u8981\u653e\u5165\u6c47\u7f16\u4e2d\u3002","title":"Code Reviews"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/course/Ultimate_Go_Programing/#lesson2-language-syntax","text":"","title":"Lesson2: Language Syntax"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/course/Ultimate_Go_Programing/#variable","text":"When variables are being declared to their zero value, use the keyword var. When variables are being declared and initialized, use the short variable declaration operator. \u5c0f\u5fc3 := \u8d4b\u503c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 package main import ( \"fmt\" \"os\" ) func main () { var data [] string killswitch := os . Getenv ( \"KILLSWITCH\" ) if killswitch == \"\" { fmt . Println ( \"kill switch is off\" ) // data\u88ab\u5f53\u4f5c\u5168\u65b0\u7684\u53d8\u91cf\uff0c\u8986\u76d6\u4e86\u4e0a\u9762\u7684data data , err := getData () if err != nil { panic ( \"ERROR!\" ) } fmt . Printf ( \"Data was fetched! %d\\n\" , len ( data )) } for _ , item := range data { fmt . Println ( item ) } } func getData () ([] string , error ) { // Simulating getting the data from a datasource - lets say a DB. return [] string { \"there\" , \"are\" , \"no\" , \"strings\" , \"on\" , \"me\" }, nil } Reference What's in a name?","title":"Variable"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/course/Ultimate_Go_Programing/#struct","text":"Memory alignment Tips All memory is allocated on an alignment boundary to minimize memory defragmentation. To determine the alignment boundary Go is using for your architecture, you can run the unsafe.Alignof function. The alignment boundary in Go for the 64bit Darwin platform is 8 bytes. So when Go determines the memory allocation for our structs, it will pad bytes to make sure the final memory footprint is a multiple of 8. The compiler will determine where to add the padding. \u4e3a\u4ec0\u4e48\u8981\u586b\u51451\u4e2a\u5b57\u8282\u5462\uff1f,\u8fd9\u4e2a\u76ee\u7684\u662f\u4e3a\u4e86\u8ba9\u6574\u4f53\u7684\u5927\u5c0f\u662f\u5b57\u7684\u500d\u6570\uff0c\u5b57\u957f\u4e00\u822c\u90fd\u662f2\u30014\u30018\u300116\u8fd9\u6837\u76842\u7684\u5e42\u6b21\u65b9\uff0c\u5bf9\u4e8e64\u4f4d\u7684CPU\u6765\u8bf4\uff0c\u8fd9\u91cc\u53ea\u9700\u8981\u586b\u51451\u4e2a\u5b57\u8282\u5c31\u53ef\u4ee5\u6ee1\u8db3\u8fd9\u4e2a\u8981\u6c42\u3002 CPU\u6bcf\u6b21\u8bfb\u53d6\u5185\u5b58\u90fd\u662f\u6309\u7167\u4e00\u4e2a\u5b57\u6765\u8bfb\u53d6\uff0c\u4e0d\u540c\u7684CPU\u67b6\u6784\u6240\u4ee3\u8868\u7684\u5927\u5c0f\u4e0d\u540c\uff0c\u5bf9\u4e8e64\u4f4d\u7684CPU\u6765\u8bf4\uff0c\u4e00\u4e2a\u5b57\u5c31\u662f8\u4e2a\u5b57\u8282\uff0cCPU\u6bcf\u6b21\u8bfb\u548c\u5199\u90fd\u53ea\u80fd\u64cd\u4f5c\u4e00\u4e2a\u5b57\u7684\u5185\u5b58\uff0c\u56e0\u6b64\u4e3a\u4e86\u9ad8\u6548\u7684\u8bfb\u53d6\u53d8\u91cf\uff0c\u6211\u4eec\u5e94\u8be5\u8ba9\u53d8\u91cf \u5360\u7528\u7684\u5185\u5b58\u63a7\u5236\u5728\u4e00\u4e2a\u5b57\u5185\uff0c\u800c\u4e0d\u662f\u8de8\u4e24\u4e2a\u5b57\uff0c\u8fd9\u6837\u4f1a\u5bfc\u81f4CPU\u591a\u8bfb\u53d6\u4e00\u6b21\u3002\u4e3a\u6b64\u6211\u4eec\u9700\u8981\u5bf9\u5185\u5b58\u8fdb\u884cpadding\uff0c\u4ee5\u4fdd\u8bc1\u53d8\u91cf\u4e0d\u4f1a\u8de8\u591a\u4e2a\u5b57\u5b58\u653e\u3002\u6bd4\u5982\u4e0b\u9762\u8fd9\u4e2a\u7ed3\u6784\u4f53\u3002 1 2 3 4 5 type Example struct { BoolValue bool IntValue int16 FloatValue float32 } \u4e0a\u9762\u7684 struct \u6700\u7ec8\u4f1apadding\u4e00\u4e2a\u5b57\u8282\uff0c\u603b\u5360\u7528\u4e3a8\u4e2a\u5b57\u8282\uff0c\u901a\u8fc7\u8fd9\u6bb5\u4ee3\u7801 alignment \u53ef\u4ee5\u770b\u51fa\uff0c BoolValue \u7684\u5730\u65b9\u586b\u5145\u4e86\u4e00\u4e2a\u5b57\u8282\u3002 Tips \u4e3a\u4ec0\u4e48\u662f\u5728 BoolValue \u5904\u586b\u5145\u4e00\u4e2a\u5b57\u8282\u5462?\uff0c\u800c\u4e0d\u662f\u5728 IntValue \u7684\u65c1\u8fb9\u586b\u5145\uff1f \u6216\u8005\u662f\u5728 FloatValue \u7684\u65c1\u8fb9\u586b\u5145\u5462? \u53ef\u4ee5\u8bd5\u7740\u679a\u4e3e\u4e00\u4e0b\uff0c\u5982\u679c\u662f\u5728 IntValue \u5904\u586b\u51451\u4e2a\u5b57\u8282\uff0c\u90a3\u4e48\u5982\u679c\u5b57\u957f\u662f2\u5b57\u8282\uff0c\u90a3\u4e48 IntValue \u5c31\u4f1a\u8de8\u591a\u4e2a\u5b57\u5b58\u653e(\u4e00\u534a\u5728\u524d\u4e00\u4e2a\u5b57\uff0c\u4e00\u534a\u5728\u540e\u4e00\u4e2a\u5b57)\uff0c\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u53ea\u80fd\u662f\u5728 BoolValue \u5904\u586b\u5145\u3002 \u5927\u5bb6\u53ef\u4ee5\u8bd5\u7740\u679a\u4e3e\u4e0b\uff0c\u5047\u8bbe\u4f4d\u957f\u4f4d2\u30014\u30018\u7684\u65f6\u5019\uff0c\u5728\u54ea\u91cc\u586b\u5145\u53ef\u4ee5\u907f\u514d\u8de8\u591a\u4e2a\u5b57\u5b58\u653e\uff0c\u6700\u540e\u7684\u7ed3\u8bba\u5c31\u662f\u5728 BoolValue \u5904\u5b58\u653e\u6700\u4f73\u3002 Anonymous struct Go\u4e2d\u662f\u4e0d\u5141\u8bb8\u9690\u5f0f\u7c7b\u578b\u8f6c\u6362\u7684\uff0c\u4e24\u4e2a\u4e0d\u540c\u7684struct\u5373\u4f7f\u662f\b\u5177\u6709\u5b8c\u5168\u76f8\u540c\u7684\u5b57\u6bb5\u548c\u987a\u5e8f\uff0c\u4e5f\u4e0d\u80fd\u8fdb\u884c\u9690\u5f0f\u8f6c\u6362\u3002\u4f46\u662f\u901a\u8fc7\u533f\u540dstruct\u5c31\u53ef\u4ee5\u505a\u4e86\u3002\u5177\u4f53\u4ee3\u7801\u89c1 anonymous_struct.go Tips \"Implicit conversion of types is the Halloween special of coding. Whoever thought of them deserves their own special hell.\" - Martin Thompson \u6211\u4eec\u5e94\u8be5\u5c3d\u53ef\u80fd\u53bb\u907f\u514d\u4f7f\u7528\u9690\u5f0f\u8f6c\u6362\u3002 Embedded Types \u7ed3\u6784\u4f53\u7c7b\u578b\u53ef\u4ee5\u5305\u542b\u533f\u540d\u6216\u5d4c\u5165\u5f0f\u5b57\u6bb5\u3002\u8fd9\u4e5f\u79f0\u4e3a\u5d4c\u5165\u7c7b\u578b\uff0c\u5f53\u6211\u4eec\u5c06\u4e00\u4e2a\u7c7b\u578b\u5d4c\u5165\u5230\u7ed3\u6784\u4e2d\u65f6\uff0c\u8be5\u7c7b\u578b\u7684\u540d\u79f0\u5c06\u5145\u5f53\u968f\u540e\u5d4c\u5165\u5b57\u6bb5\u7684\u5b57\u6bb5\u540d\u79f0\u3002 1 2 3 4 type Admin struct { User Level string } \u8fd9\u5e76\u975e\u7ee7\u627f\uff0c\u800c\u662f\u4e00\u79cd\u7ec4\u5408\u6a21\u5f0f\uff0c\u63a5\u7740\u6211\u4eec\u6765\u770b\u770b\u5982\u4f55\u521b\u5efa\u5e26\u6709\u5d4c\u5165\u5f0f\u5b57\u6bb5\u7684 struct 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 func main () { admin := & Admin { // \u548c\u521b\u5efa\u666e\u901a\u7684struct\u4e00\u6837\uff0c\u4f7f\u7528\u7c7b\u578b\u540d\u4f5c\u4e3a\u5b57\u6bb5\u540d User : User { Name : \"john smith\" , Email : \"john@email.com\" , }, Level : \"super\" , } SendNotification ( admin ) } // Output User : Sending User Email To john smith < john @ email . com > \u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u7684\u7ec4\u5408\uff0c\u4f7f\u5f97Admin\u5b9e\u73b0User\u6240\u6709\u7684\u63a5\u53e3\u3002 Reference Understanding Type in Go Object Oriented Programming in Go Padding is hard","title":"Struct"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/course/Ultimate_Go_Programing/#pointer","text":"\u6307\u9488\u8bed\u4e49\u548c\u503c\u8bed\u4e49\uff0c\u524d\u8005\u662f\u5171\u4eab\u7684\uff0c\u5b58\u5728\u526f\u4f5c\u7528\uff0c\u6d89\u53ca\u5230data race\u3001\u9003\u9038\u5206\u6790\u7b49\uff0c\u800c\u540e\u8005\u65e0\u526f\u4f5c\u7528\uff0c\u4f46\u662f\u5b58\u5728\u62f7\u8d1d\u5f00\u9500\u3002 \u5728Go\u4e2d\u662fgoroutine\u4e2d\u662f\u6ca1\u529e\u6cd5\u6307\u5411\u53e6\u5916\u4e00\u4e2agoroutine\u7684\u6808\u7684\uff0c\u8fd9\u662f\u56e0\u4e3agoroutine\u7684\u6808\u662f\u4f1a\u589e\u957f\u7684\uff0c\u5982\u679c\u53d1\u751f\u589e\u957f\u4f1a\u5bfc\u81f4\u6808\u88ab\u62f7\u8d1d\u5230\u53e6\u5916\u4e00\u4e2a\u66f4\u5927\u7684\u6808\u7a7a\u95f4\u4e0a\uff0c\u8fd9\u5c31\u5bfc\u81f4\u4e86\u6307\u9488\u5931\u6548\u4e86\u3002\u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801\u6f14\u793a\u4e86\u6808\u589e\u957f\u7684\u60c5\u51b5\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 package main // Number of elements to grow each stack frame. // Run with 10 and then with 1024 const size = 1024 // main is the entry point for the application. func main () { s := \"HELLO\" stackCopy ( & s , 0 , [ size ] int {}) } // stackCopy recursively runs increasing the size // of the stack. func stackCopy ( s * string , c int , a [ size ] int ) { println ( c , s , * s ) c ++ if c == 10 { return } stackCopy ( s , c , a ) } Tip \u4e0e GCC \u76f8\u4f3c\uff0c\u5728 Golang \u7684 goroutine \u7684\u5b9e\u73b0\u4e2d\u4e5f\u5e94\u7528\u4e86\u7c7b\u4f3c\u7684\u6280\u672f\u3002\u5728 1.3 \u7248\u672c\u53ca\u4ee5\u524d\u91c7\u7528\u7684\u662f\u5206\u6bb5\u6808\u7684\u5b9e\u73b0\uff0c\u5728\u521d\u59cb\u65f6\u4f1a\u5bf9\u6bcf\u4e2a goroutine \u5206\u914d 8KB \u7684\u5185\u5b58\uff0c\u800c\u5728 goroutine \u5185\u90e8\u6bcf\u4e2a\u51fd\u6570\u7684\u8c03\u7528\u65f6\uff0c\u4f1a\u68c0\u67e5\u6808\u7a7a\u95f4\u662f\u5426\u8db3\u591f\u4f7f\u7528\uff0c\u82e5\u4e0d\u591f\u5219\u8c03\u7528 morestack \u8fdb\u884c\u989d\u5916\u7684\u6808\u7a7a\u95f4\u7533\u8bf7\uff0c\u7533\u8bf7\u5b8c\u6bd5\u540e\u8fde\u63a5\u5230\u65e7\u6808\u7a7a\u95f4\u4e0a\uff0c\u5728\u51fd\u6570\u7ed3\u675f\u65f6\u4f1a\u8c03\u7528 lessstack \u6765\u56de\u6536\u591a\u4f59\u7684\u6808\u7a7a\u95f4\u3002\u7531\u4e8e\u6808\u7684\u7f29\u51cf\u662f\u4e00\u4e2a\u76f8\u5bf9\u6765\u8bf4\u5f00\u9500\u8f83\u5927\u7684\u903b\u8f91\uff0c\u5c24\u5176\u5728\u4e00\u4e2a\u8f83\u6df1\u7684\u9012\u5f52\u4e2d\uff0c\u4f1a\u6709\u8f83\u591a\u7684 morestack \u548c lessstack \u8c03\u7528\uff0c\u8fd9\u79cd\u95ee\u9898\u88ab\u6210\u4e3a\u70ed\u5206\u88c2\u95ee\u9898\u3002Golang 1.4 \u901a\u8fc7\u6808\u590d\u5236\u6cd5\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u5728\u6808\u7a7a\u95f4\u4e0d\u8db3\u65f6\uff0c\u4e0d\u4f1a\u7533\u8bf7\u4e00\u4e2a\u65b0\u7684\u6808\u7a7a\u95f4\u5757\u94fe\u63a5\u5230\u8001\u7684\u6808\u7a7a\u95f4\u5feb\u4e0a\uff0c\u800c\u662f\u521b\u5efa\u4e00\u4e2a\u539f\u6765\u4e24\u500d\u5927\u5c0f\u7684\u6808\u7a7a\u95f4\u5757\uff0c\u5e76\u5c06\u65e7\u6808\u4fe1\u606f\u62f7\u8d1d\u81f3\u65b0\u6808\u4e2d\u3002\u8fd9\u6837\u5bf9\u4e8e\u6808\u7684\u7f29\u51cf\uff0c\u6ca1\u6709\u591a\u4f59\u7684\u5f00\u9500\uff0c\u540c\u65f6\u5728\u7b2c\u4e8c\u6b21\u62d3\u5c55\u6808\u65f6\uff0c\u4e5f\u65e0\u9700\u518d\u6b21\u7533\u8bf7\u7a7a\u95f4\u3002\u9488\u5bf9\u6808\u590d\u5236\u4e2d\u6307\u9488\u7684\u95ee\u9898\uff0c\u7531\u4e8e\u5783\u573e\u56de\u6536\u673a\u5236\u7684\u5b58\u5728\uff0c\u53ef\u4ee5\u627e\u5230\u54ea\u90e8\u5206\u7684\u6808\u4f7f\u7528\u4e86\u6307\u9488\uff0c\u901a\u8fc7\u5bf9\u5e94\u53ef\u4ee5\u5c06\u6307\u9488\u5730\u5740\u8fdb\u884c\u76f8\u5e94\u7684\u66f4\u65b0\u3002 \u9003\u9038\u5206\u6790 \u5f53\u51fd\u6570\u4e2d\u8fd4\u56de\u7684\u503c\u88ab\u51fd\u6570\u5916\u6240\u5f15\u7528\u7684\u65f6\u5019\uff0c\u4f1a\u5bfc\u81f4\u8fd9\u4e2a\u503c\u8fdb\u884c\u4e86\u9003\u9038\uff0c\u5206\u914d\u5728\u5806\u4e0a\uff0c\u4f8b\u5982\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 package main type user struct { name string email string } func main () { u1 := createUser () println ( \"u1\" , & u1 ) } // \u8fd9\u91cc\u8fd4\u56de\u7684\u6307\u9488\u6307\u5411\u6808\u4e0a\u5206\u914d\u7684user\uff0c\u8fd9\u4f1a\u5bfc\u81f4\u9003\u9038\u5206\u6790\u751f\u6548 // \u5c06user\u5206\u914d\u5728\u5806\u4e0a\uff0c\u907f\u514d\u56e0\u4e3a\u51fd\u6570\u7ed3\u675f\u6808\u88ab\u6e05\u7406\u5bfc\u81f4\u6307\u9488\u5931\u6548\u3002 // \u907f\u514d\u5185\u8054\uff0c\u5426\u5219\u5c31\u6ca1\u6709\u9003\u9038\u5206\u6790\u4e86 //go:noinline func createUser () * user { u := user { name : \"Bill\" , email : \"bill@ardanlabs.com\" , } println ( \"U\" , & u ) return & u } \u9003\u9038\u5206\u6790\u7684\u7ed3\u679c\u5982\u4e0b escape1.go : 1 2 3 4 5 6 7 8 ./escape.go:17:6: cannot inline createUserV1: marked go:noinline ./escape.go:31:6: cannot inline createUserV2: marked go:noinline ./escape.go:8:6: cannot inline main: function too complex: cost 133 exceeds budget 80 ./escape.go:32:2: u escapes to heap: ./escape.go:32:2: flow: ~r0 = & u: ./escape.go:32:2: from & u ( address-of ) at ./escape.go:38:9 ./escape.go:32:2: from return & u ( return ) at ./escape.go:38:2 ./escape.go:32:2: moved to heap: u \u5f53\u7f16\u8bd1\u5668\u53d1\u73b0\u4e00\u4e2a\u503c\u7684\u5927\u5c0f\u65e0\u6cd5\u5728\u6808\u4e0a\u5b58\u653e\u7684\u65f6\u5019\u4f1a\u5c06\u5176\u5206\u914d\u5728\u5806\u4e0a \u5f53\u7f16\u8bd1\u5668\u65e0\u6cd5\u5728\u7f16\u8bd1\u65f6\u77e5\u9053\u503c\u7684\u5927\u5c0f\u65f6\u5c31\u9009\u62e9\u5728\u5806\u4e0a\u8fdb\u884c\u5206\u914d 1 2 3 4 5 6 7 8 9 10 11 12 13 package main import ( \"bytes\" ) func main () { size := 10 // size\u7684\u503c\u662f\u7f16\u8bd1\u65f6\u65e0\u6cd5\u77e5\u9053\u7684\uff0c\u5982\u679c\u8fd9\u91cc\u6539\u621010\uff0c\u5c31\u4e0d\u4f1a\u6709\u9003\u9038\u5206\u6790\u4e86 b := make ([] byte , size ) c := bytes . NewBuffer ( b ) c . WriteString ( \"test\" ) } \u9003\u9038\u5206\u6790\u7684\u7ed3\u679c\u5982\u4e0b escape2.go : 1 2 3 4 5 6 7 ./escape2.go:7:6: cannot inline main: function too complex: cost 84 exceeds budget 80 ./escape2.go:10:22: inlining call to bytes.NewBuffer func ([] byte ) *bytes.Buffer { return & bytes.Buffer literal } ./escape2.go:9:11: make ([] byte, size ) escapes to heap: ./escape2.go:9:11: flow: { heap } = & { storage for make ([] byte, size )} : ./escape2.go:9:11: from make ([] byte, size ) ( non-constant size ) at ./escape2.go:9:11 ./escape2.go:9:11: make ([] byte, size ) escapes to heap ./escape2.go:10:22: & bytes.Buffer literal does not escape \u5f53\u53d8\u91cf\u8d4b\u503c\u7ed9interface\u6216\u8005\u51fd\u6570\u7684\u65f6\u5019\u4f1a\u5bfc\u81f4\u9003\u9038 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 package main import ( \"bytes\" ) //go:noinline func InterfaceMethod ( value interface {}) { } func main () { size := 10 b := make ([] byte , size ) c := bytes . NewBuffer ( b ) c . WriteString ( \"test\" ) // \u5bfc\u81f4\u9003\u9038\u5206\u6790 InterfaceMethod ( c ) } \u9003\u9038\u5206\u6790\u7684\u7ed3\u679c\u5982\u4e0b escape3.go : 1 2 3 4 5 6 7 8 9 ./escape3.go:8:6: cannot inline InterfaceMethod: marked go:noinline ./escape3.go:11:6: cannot inline main: function too complex: cost 145 exceeds budget 80 ./escape3.go:14:22: inlining call to bytes.NewBuffer func ([] byte ) *bytes.Buffer { return & bytes.Buffer literal } ./escape3.go:8:22: value does not escape ./escape3.go:13:11: make ([] byte, size ) escapes to heap: ./escape3.go:13:11: flow: { heap } = & { storage for make ([] byte, size )} : ./escape3.go:13:11: from make ([] byte, size ) ( non-constant size ) at ./escape3.go:13:11 ./escape3.go:13:11: make ([] byte, size ) escapes to heap ./escape3.go:14:22: & bytes.Buffer literal does not escape \u8d4b\u503c\u7ed9\u6307\u9488\u5bfc\u81f4\u7684\u9003\u9038 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 func BenchmarkAssignmentIndirect ( b * testing . B ) { type X struct { p * int } for i := 0 ; i < b . N ; i ++ { var i1 int x1 := & X { p : & i1 , // GOOD: i1 does not escape } _ = x1 var i2 int x2 := & X {} x2 . p = & i2 // BAD: Cause of i2 escape } } \u9003\u9038\u5206\u6790\u7684\u7ed3\u679c\u5982\u4e0b example1_test.go 1 2 3 4 5 6 7 8 9 ./example1_test.go:5:6: cannot inline BenchmarkAssignmentIndirect: unhandled op DCLTYPE ./example1_test.go:16:7: i2 escapes to heap: ./example1_test.go:16:7: flow: { heap } = & i2: ./example1_test.go:16:7: from & i2 ( address-of ) at ./example1_test.go:18:10 ./example1_test.go:16:7: from x2.p = & i2 ( assign ) at ./example1_test.go:18:8 ./example1_test.go:5:34: b does not escape ./example1_test.go:16:7: moved to heap: i2 ./example1_test.go:11:9: & X literal does not escape ./example1_test.go:17:9: & X literal does not escape \u5982\u679c\u662f\u8d4b\u503c\u7ed9\u6307\u9488\u7684\u6307\u9488\u4e5f\u662f\u4f1a\u5bfc\u81f4\u9003\u9038\u7684\u3002 1 2 3 4 5 6 7 8 package main func main () { i := 0 pp := new ( * int ) * pp = & i // BAD: i escapes _ = pp } \u9003\u9038\u5206\u6790\u7684\u7ed3\u679c\u5982\u4e0b escape4.go 1 2 3 4 5 6 7 ./escape4.go:3:6: can inline main with cost 20 as: func () { i : = 0 ; pp : = new ( *int ) ; *pp = & i ; _ = pp } ./escape4.go:4:2: i escapes to heap: ./escape4.go:4:2: flow: { heap } = & i: ./escape4.go:4:2: from & i ( address-of ) at ./escape4.go:6:8 ./escape4.go:4:2: from *pp = & i ( assign ) at ./escape4.go:6:6 ./escape4.go:4:2: moved to heap: i ./escape4.go:5:11: new ( *int ) does not escape \u5bf9\u4e8e\u63a5\u53e3\u7684\u4f7f\u7528\u610f\u89c1: Use an interface when: users of the API need to provide an implementation detail. API\u2019s have multiple implementations they need to maintain internally. parts of the API that can change have been identified and require decoupling. Don\u2019t use an interface: for the sake of using an interface. to generalize an algorithm. when users can declare their own interfaces. Tip go build -gcflags \"-m -m\" \u6dfb\u52a0gcflags\u53ef\u4ee5\u663e\u793a\u5904\u54ea\u4e9b\u53d8\u91cf\u8fdb\u884c\u4e86\u9003\u9038","title":"Pointer"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/course/Ultimate_Go_Programing/#garbage-collection","text":"\u5783\u573e\u56de\u6536\u51e0\u4e2a\u9636\u6bb5: Mark Setup - STW \u5728\u8fd9\u4e2a\u9636\u6bb5\u9700\u8981\u627e\u5230\u4e00\u4e2a\u5b89\u5168\u70b9\uff0c\u8ba9\u6240\u6709\u7684goroutine\u90fd\u505c\u4e0b\u6765\uff0c\u57281.14\u4e4b\u524d\uff0cGo\u4e2d\u7684\u51fd\u6570\u8c03\u7528\u662f\u4e00\u4e2a\u5b89\u5168\u70b9\uff0c\u5f53gorountine\u6267\u884c\u51fd\u6570\u8c03\u7528\u7684\u65f6\u5019\u5c31\u505c\u6b62\uff0c\u4f46\u662f\u8fd9\u4e2a\u5b58\u5728\u4e00\u4e2a\u95ee\u9898\uff0c\u5982\u679c\u4e00\u4e2agoroutine \u4e00\u76f4\u5728\u505a\u5bc6\u96c6\u7684\u8ba1\u7b97\uff0c\u6ca1\u6709\u8fdb\u884c\u51fd\u6570\u8c03\u7528\uff0c\u8fd9\u4f1a\u5bfc\u81f4GC\u7684\u91c7\u96c6\u505c\u6b62\u4e0d\u524d\u3002\u57281.14\u540eGo\u4e2d\u5f15\u5165\u4e86\u62a2\u5360\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002 runtime: non-cooperative goroutine preemption Marking - Concurrent \u5728\u6807\u8bb0\u9636\u6bb5\uff0c\u5783\u573e\u56de\u6536\u4f1a\u63a7\u5236\u81ea\u5df1\u6240\u5360\u7528\u7684CPU\u4e3a\u6574\u4f53\u76841/4(\u5176\u4ed6\u7684CPU\u7528\u4e8e\u7a0b\u5e8f\u8fd0\u884c)\uff0c\u5728\u8fd9\u4e2a\u9636\u6bb5\uff0cGC\u4f1a\u626b\u63cfgoroutine\u7684\u6808\uff0c\u627e\u5230\u6808\u4e2d\u6307\u5411\u5806\u7684\u6307\u9488\u8fdb\u884c\u6807\u8bb0\u3002\u6807\u8bb0\u9636\u6bb5\u7684\u541e\u5410\u91cf\u4e3a 1MB/ms * 1/4 * CPU\u6838\u5fc3\u6570 \u5982\u679c\u5728\u6807\u8bb0\u9636\u6bb5\uff0c\u5e94\u7528\u5206\u914d\u5185\u5b58\u7684\u901f\u5ea6\u5927\u4e8e\u6807\u8bb0\u7684\u901f\u5ea6\uff0c\u8fd9\u4e2a\u65f6\u5019\u4f1a\u542f\u7528 Mark Assist \u5360\u7528\u66f4\u591a\u7684CPU\u6765\u534f\u52a9\u8fdb\u884c\u6807\u8bb0\u3002\u4f46\u662f\u4e0d\u4f1a\u5360\u7528\u592a\u591a\u7684 Mark Assist \uff0c\u4e0e\u5176\u8fd9\u6837\u5360\u7528\u592a\u591a Mark Assist \uff0c\u8fd8\u4e0d\u5982\u4eca\u65e9\u5f00\u542f\u4e0b\u4e00\u6b21GC\u56de\u6536\u3002\u6240\u4ee5GC\u4f1a\u63a7\u5236 Mark Assist \u7684\u6570\u91cf\u3002 Mark Termination - STW \u6807\u8bb0\u9636\u6bb5\u7684\u6700\u540e\u5de5\u4f5c\u662fMark Termination\uff0c\u5173\u95ed\u5185\u5b58\u5c4f\u969c\uff0c\u505c\u6b62\u540e\u53f0\u6807\u8bb0\u4ee5\u53ca\u8f85\u52a9\u6807\u8bb0\uff0c\u505a\u4e00\u4e9b\u6e05\u7406\u5de5\u4f5c\uff0c\u6574\u4e2a\u8fc7\u7a0b\u4e5f\u9700\u8981STW\uff0c\u5927\u6982\u9700\u898160-90\u5fae\u79d2\u3002\u5728\u6b64\u4e4b\u540e\uff0c\u6240\u6709\u7684P\u90fd\u80fd\u7ee7\u7eed\u4e3a\u5e94\u7528\u7a0b\u5e8fG\u670d\u52a1\u4e86\u3002 Sweeping - Concurrent \u5728\u6807\u8bb0\u5de5\u4f5c\u5b8c\u6210\u4e4b\u540e\uff0c\u5269\u4e0b\u7684\u5c31\u662f\u6e05\u7406\u8fc7\u7a0b\u4e86\uff0c\u6e05\u7406\u8fc7\u7a0b\u7684\u672c\u8d28\u662f\u5c06\u6ca1\u6709\u88ab\u4f7f\u7528\u7684\u5185\u5b58\u5757\u6574\u7406\u56de\u6536\u7ed9\u4e0a\u4e00\u4e2a\u5185\u5b58\u7ba1\u7406\u5c42\u7ea7(mcache -> mcentral -> mheap -> OS)\uff0c\u6e05\u7406\u56de\u6536\u7684\u5f00\u9500\u88ab\u5e73\u644a\u5230\u5e94\u7528\u7a0b\u5e8f\u7684\u6bcf\u6b21\u5185\u5b58\u5206\u914d\u64cd\u4f5c\u4e2d\uff0c \u76f4\u5230\u6240\u6709\u5185\u5b58\u90fdSweeping\u5b8c\u6210\u3002\u5f53\u7136\u6bcf\u4e2a\u5c42\u7ea7\u4e0d\u4f1a\u5168\u90e8\u5c06\u5f85\u6e05\u7406\u5185\u5b58\u90fd\u5f52\u8fd8\u7ed9\u4e0a\u4e00\u7ea7\uff0c\u907f\u514d\u4e0b\u6b21\u5206\u914d\u518d\u7533\u8bf7\u7684\u5f00\u9500\uff0c\u6bd4\u5982Go1.12\u5bf9mheap\u5f52\u8fd8OS\u5185\u5b58\u505a\u4e86\u4f18\u5316\uff0c\u4f7f\u7528NADV_FREE\u5ef6\u8fdf\u5f52\u8fd8\u5185\u5b58\u3002 GC percentage runtime\u4e2d\u6709\u4e00\u4e2a\u914d\u7f6e\u9009\u9879\u53eb\u505a GC Percentage\uff0c\u9ed8\u8ba4\u503c\u662f100\u3002\u8fd9\u4e2a\u503c\u4ee3\u8868\u4e86\u4e0b\u4e00\u6b21\u56de\u6536\u5f00\u59cb\u4e4b\u524d\uff0c\u6709\u591a\u5c11\u65b0\u7684\u5806\u5185\u5b58\u53ef\u4ee5\u5206\u914d\u3002GC Percentage\u8bbe\u7f6e\u4e3a100\u610f\u5473\u7740\uff0c\u57fa\u4e8e\u56de\u6536\u5b8c\u6210\u4e4b\u540e\u88ab\u6807\u8bb0\u4e3a\u751f\u5b58\u7684\u5806\u5185\u5b58\u6570\u91cf\uff0c\u4e0b\u4e00\u6b21\u56de\u6536\u7684\u5f00\u59cb\u5fc5\u987b\u5728\u6709100%\u4ee5\u4e0a\u7684\u65b0\u5185\u5b58\u5206\u914d\u5230\u5806\u5185\u5b58\u65f6\u542f\u52a8\u3002\u5982\u679c\u65b0\u5206\u914d\u7684\u5185\u5b58\u5e76\u6ca1\u6709\u5230\u8fbe100%\u5c31\u89e6\u53d1\u4e86\u4e0b\u4e00\u6b21GC\uff0c\u8fd9\u4e2a\u53ef\u80fd\u662f\u56e0\u4e3a\u5e94\u7528\u5185\u5b58\u5206\u914d\u901f\u5ea6\u592a\u5feb\uff0cGC\u4e0d\u5e0c\u671b\u5206\u914d\u592a\u591a\u7684 Mark Assist \uff0c\u56e0\u6b64\u5c3d\u5feb\u7684\u542f\u52a8\u4e86\u4e0b\u4e00\u6b21GC\u3002 GC Trcae GODEBUG=gctrace=1 \u5f00\u542fGC Trace GODEBUG=gctrace=1,gcpacertrace=1 \u5f00\u542f\u66f4\u8be6\u7ec6\u7684GC Trace 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 gc 1405 @6.068s 11 %: 0 .058+1.2+0.083 ms clock, 0 .70+2.5/1.5/0+0.99 ms cpu, 7 ->11->6 MB, 10 MB goal, 12 P gc 1406 @6.070s 11 %: 0 .051+1.8+0.076 ms clock, 0 .61+2.0/2.5/0+0.91 ms cpu, 8 ->11->6 MB, 13 MB goal, 12 P gc 1407 @6.073s 11 %: 0 .052+1.8+0.20 ms clock, 0 .62+1.5/2.2/0+2.4 ms cpu, 8 ->14->8 MB, 13 MB goal, 12 P \u5b57\u6bb5\u542b\u4e49\u5982\u4e0b: // General gc 1405 : The 1405 GC run since the program started @6.068s : Six seconds since the program started 11 % : Eleven percent of the available CPU so far has been spent in GC // Wall-Clock 0 .058ms : STW : Mark Start - Write Barrier on 1 .2ms : Concurrent : Marking 0 .083ms : STW : Mark Termination - Write Barrier off and clean up // CPU Time 0 .70ms : STW : Mark Start 2 .5ms : Concurrent : Mark - Assist Time ( GC performed in line with allocation ) 1 .5ms : Concurrent : Mark - Background GC time 0ms : Concurrent : Mark - Idle GC time 0 .99ms : STW : Mark Term // Memory 7MB : Heap memory in -use before the Marking started 11MB : Heap memory in -use after the Marking finished 6MB : Heap memory marked as live after the Marking finished 10MB : Collection goal for heap memory in -use after Marking finished // Threads 12P : Number of logical processors or threads used to run Goroutines GC\u8c03\u4f18\u7684\u610f\u89c1: Maintain the smallest heap possible. Find an optimal consistent pace. Stay within the goal for every collection. Minimize the duration of every collection, STW and Mark Assist.","title":"Garbage Collection"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/course/Ultimate_Go_Programing/#compiler-and-runtime-optimizations","text":"Non-scannable objects Garbage collector does not scan underlying buffers of slices, channels and maps when element type does not contain pointers (both key and value for maps). \u5783\u573e\u56de\u6536\u671f\u4e0d\u4f1a\u626b\u63cf\u5143\u7d20\u662f\u6307\u9488\u7c7b\u578b\u7684map\u3001slices\u3001channnel\u3002\u4e0b\u9762\u8fd9\u4e2amap\u5c31\u4e0d\u4f1a\u5f71\u54cdGC\u7684\u91c7\u96c6\u65f6\u95f4\u3002 1 2 3 4 5 6 7 type Key [ 64 ] byte // SHA-512 hash type Value struct { Name [ 32 ] byte Balance uint64 Timestamp int64 } m := make ( map [ Key ] Value , 1e8 ) Function Inlining \u53ea\u6709\u5c0f\u7684\u3001\u77ed\u7684\u51fd\u6570\u624d\u4f1a\u5185\u8054\uff0c\u51fd\u6570\u4e2d\u8981\u5c0f\u4e8e40\u4e2a\u8868\u8fbe\u5f0f\u3001\u5e76\u4e14\u4e0d\u5305\u542b\u590d\u6742\u7684\u8bed\u53e5\uff0c\u6bd4\u5982loop\u3001labels\u3001closures\u3001panic\u3001recover\u3001select\u3001switch\u7b49 go build -x \u663e\u793abuild\u7684\u8fc7\u7a0b go build -gcflags=\"-S\" \u663e\u793agolang\u4e2d\u95f4\u6c47\u7f16\u7ed3\u679c go tool objdump -s main.main hello \u4e8c\u8fdb\u5236\u53cd\u6c47\u7f16 go tool nm escape1 \u67e5\u770b\u4e8c\u8fdb\u5236\u7b26\u53f7\u4fe1\u606f GOSSAFUNC=main go build && open ssa.html SSA \u4ee3\u8868 static single-assignment\uff0c\u662f\u4e00\u79cdIR(\u4e2d\u95f4\u8868\u793a\u4ee3\u7801)\uff0c\u8981\u4fdd\u8bc1\u6bcf\u4e2a\u53d8\u91cf\u53ea\u88ab\u8d4b\u503c\u4e00\u6b21\u3002 go build -gcflags=\"-m\" \u9003\u9038\u5206\u6790 go build -gcflags=\"-l -N\" \u7981\u6b62\u4f18\u5316\u548c\u7981\u6b62\u5185\u8054","title":"Compiler And Runtime Optimizations"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/course/Ultimate_Go_Programing/#constans","text":"\u5728Go\u4e2d\u662f\u4e0d\u80fd\u5728\u4e0d\u540c\u7684\u6570\u5b57\u7c7b\u578b\u7684\u53d8\u91cf\u4e4b\u95f4\u505a\u64cd\u4f5c\u7684\uff0c\u6bd4\u5982\u4e0d\u80fd\u7528float64\u548cint\u4e4b\u95f4\u505a\u64cd\u4f5c\uff0c\u9700\u8981\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362\uff0c\u4f46\u662f\u6709\u7684\u65f6\u5019\u6211\u4eec\u53d1\u73b0\u6211\u4eec\u53ef\u4ee5\u505a\u7c7b\u4f3c 2 * time.Second \u3001 1 << ('t' + 2.0) \u8fd9\u6837\u7684\u64cd\u4f5c\uff0c\u8fd9\u662f\u56e0\u4e3a\u4ed6\u4eec\u90fd\u662f\u5e38\u91cf\uff0c\u5e76\u975e\u662f\u53d8\u91cf\u3002 \u5e38\u91cf\u5b58\u5728\u9ed8\u8ba4\u7c7b\u578b 1 2 3 4 5 6 7 8 9 10 fmt . Printf ( \"%T %v\\n\" , 0 , 0 ) fmt . Printf ( \"%T %v\\n\" , 0.0 , 0.0 ) fmt . Printf ( \"%T %v\\n\" , 'x' , 'x' ) fmt . Printf ( \"%T %v\\n\" , 0i , 0i ) // \u8f93\u51fa\u7ed3\u679c int 0 float64 0 int32 120 complex128 ( 0 + 0i ) \u4e0d\u540c\u7c7b\u578b\u7684\u5e38\u91cf\u64cd\u4f5c\uff0c\u4f1a\u8fdb\u884c\u7c7b\u578b\u8f6c\u6362 \u8f6c\u6362\u89c4\u5219\u6309\u7167integer, rune, floating-point, complex.\u7684\u5148\u540e\u987a\u5e8f 1 var answer = 3 * 0.33 // \u6309\u7167\u4e0a\u9762\u7684\u89c4\u5219\uff0cinteger\u4f1a\u8f6c\u6362\u4e3afloating-point\uff0c\u6700\u7ec8\u7ed3\u679c\u5c31\u662f\u6d6e\u70b9\u6570\u4e86 \u6570\u5b57\u5e38\u91cf\u53ef\u4ee5\u8bf4\u662finteger, floating-point, complex and rune\u7b49\u56db\u79cdkind\uff0c\u6b64\u5916\u8fd8\u6709bool\u3001string\u4e24\u79cdkind\u7c7b\u578b\u7684\u5e38\u91cf\u3002 \u5e38\u91cf\u4e0d\u662f\u53d8\u91cf \u5e38\u91cf\u53ea\u5b58\u5728\u4e8e\u7f16\u8bd1\u65f6 \u65e0\u7c7b\u578b\u7684\u5e38\u91cf\u53ef\u4ee5\u9690\u5f0f\u8f6c\u6362\u4e3a\u6709\u7c7b\u578b\u7684\u5e38\u91cf\uff0c\u4f46\u662f\u53d8\u91cf\u4e0d\u884c\u9700\u8981\u5f3a\u5236\u8f6c\u6362 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 type Duration int64 // Common durations. There is no definition for units of Day or larger // to avoid confusion across daylight savings time zone transitions. const ( Nanosecond Duration = 1 Microsecond = 1000 * Nanosecond Millisecond = 1000 * Microsecond Second = 1000 * Millisecond Minute = 60 * Second Hour = 60 * Minute ) // Add returns the time t+d. func ( t Time ) Add ( d Duration ) Time func main () { // Use the time package to get the current date/time. now := time . Now () // \u8fd9\u91cc\u76845\u8f6c\u6362\u6210\u5e38\u91cfDuration\u4e86 // Subtract 5 nanoseconds from now using a literal constant. literal := now . Add ( - 5 ) // Subtract 5 seconds from now using a declared constant. const timeout = 5 * time . Second // time.Duration(5) * time.Duration(1000000000) constant := now . Add ( - timeout ) // Subtract 5 nanoseconds from now using a variable of type int64. minusFive := int64 ( - 5 ) variable := now . Add ( minusFive ) // example4.go:50: cannot use minusFive (type int64) as type time.Duration in argument to now.Add // Display the values. fmt . Printf ( \"Now : %v\\n\" , now ) fmt . Printf ( \"Literal : %v\\n\" , literal ) fmt . Printf ( \"Constant: %v\\n\" , constant ) fmt . Printf ( \"Variable: %v\\n\" , variable ) } \u65e0\u7c7b\u578b\u7684\u5e38\u91cf\u6709Kind\uff0c\u4f46\u662f\u6ca1\u6709\u7c7b\u578b 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 // \u65e0\u7c7b\u578b\u5e38\u91cf\uff0c\u7cbe\u5ea6\u7406\u8bba\u4e0a\u65e0\u9650\u5236 // Untyped Constants. const ui = 12345 // kind: integer const uf = 3.141592 // kind: floating-point // \u4e0b\u9762\u5c31\u662f\u6709\u7c7b\u578b\u7684\u5e38\u91cf\u4e86\uff0c\u8fd9\u662f\u6709\u7cbe\u5ea6\u9650\u5236\u7684\uff0c\u53d6\u51b3\u4e8e\u5e38\u91cf\u7c7b\u578b // Typed Constants still use the constant type system but their precision // is restricted. const ti int = 12345 // type: int const tf float64 = 3.141592 // type: float64 // \u8fd9\u91cc\u58f0\u660euint8\u7684\u503c\u4e3a1000\u5c31\u8d85\u8fc7\u9650\u5236\u4e86\uff0c\u4f1a\u7f16\u8bd1\u62a5\u9519\uff0c\u4f46\u662f\u6539\u6210\u65e0\u7c7b\u578b\u7684\u5e38\u91cf\u5c31\u6ca1\u6709\u8fd9\u4e2a\u9650\u5236\u4e86 // ./constants.go:XX: constant 1000 overflows uint8 // const myUint8 uint8 = 1000 // \u6709\u7c7b\u578b\u548c\u65e0\u7c7b\u578b\u8fdb\u884c\u7b97\u672f\u8fd0\u7b97\u4f1a\u8fdb\u884c\u7c7b\u578b\u8f6c\u6362\u3002 const one int8 = 1 const two = 2 * one // int8(2) * int8(1) integer\u5e38\u91cf\u7cbe\u5ea6\u81f3\u5c11256bits 1 2 3 4 5 6 7 8 9 10 11 const ( // Max integer value on 64 bit architecture. maxInt = 9223372036854775807 // Much larger value than int64. bigger = 9223372036854775808543522345 // \u6709\u7c7b\u578b\u7684\u5e38\u91cf\u53d7\u5230\u4e86\u7c7b\u578b\u7684\u7cbe\u5ea6\u9650\u5236\uff0c\u65e0\u7c7b\u578b\u5e38\u91cf\u5219\u6ca1\u6709\u9650\u5236 // Will NOT compile // biggerInt int64 = 9223372036854775808543522345 )","title":"Constans"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/course/Ultimate_Go_Programing/#array","text":"\u9762\u5411\u6570\u636e\u7684\u8bbe\u8ba1\u539f\u5219: If you don't understand the data, you don't understand the problem. All problems are unique and specific to the data you are working with. Data transformations are at the heart of solving problems. Each function, method and work-flow must focus on implementing the specific data transformations required to solve the problems. If your data is changing, your problems are changing. When your problems are changing, the data transformations needs to change with it. Uncertainty about the data is not a license to guess but a directive to STOP and learn more. Solving problems you don't have, creates more problems you now do. If performance matters, you must have mechanical sympathy for how the hardware and operating system work. Minimize, simplify and REDUCE the amount of code required to solve each problem. Do less work by not wasting effort. Code that can be reasoned about and does not hide execution costs can be better understood, debugged and performance tuned. Coupling data together and writing code that produces predictable access patterns to the data will be the most performant. Changing data layouts can yield more significant performance improvements than changing just the algorithms. Efficiency is obtained through algorithms but performance is obtained through data structures and layouts. \u6211\u4eec\u5728\u8bbe\u8ba1\u6570\u636e\u7ed3\u6784\u7684\u65f6\u5019\u9700\u8981\u8003\u8651\u6570\u636e\u7684\u5b58\u50a8\u5f62\u5f0f\uff0c\u5e94\u8be5\u5c3d\u53ef\u80fd\u7684\u8003\u8651\u5230\u5bf9\u5e95\u5c42\u786c\u4ef6\u5e73\u53f0\u7684\u4f9d\u8d56\uff0c\u6bd4\u5982\u9700\u8981\u8003\u8651\u5230\u7f13\u5b58\uff0c\u8bbe\u8ba1\u7684\u6570\u636e\u7ed3\u6784\u9700\u8981\u5bf9\u7f13\u5b58\u53cb\u597d\uff0c \u4e00\u822c\u6765\u8bf4\uff0c\u94fe\u8868\u7684\u662f\u7f13\u5b58\u4e0d\u53cb\u597d\u7684\uff0c\u800c\u6570\u7ec4\u8fd9\u79cd\u8fde\u7eed\u5185\u5b58\u7684\u6570\u636e\u7ed3\u6784\u662f\u7f13\u5b58\u53cb\u597d\u7684\uff0c\u53ef\u4ee5\u5145\u5206\u5229\u7528\u7f13\u5b58\u6765\u52a0\u901f\u3002 CPU\u7684\u7f13\u5b58\u4e3b\u8981\u662f\u901a\u8fc7\u5c06\u4e3b\u5185\u5b58\u4e2d\u7684\u6570\u636e\u7f13\u5b58\u5728cache line\u4e0a Cache line\u76ee\u524d\u4e00\u822c\u662f32\u4e2a\u5b57\u8282\u6216\u8005\u662f64\u4e2a\u5b57\u8282\uff0c\u8fd9\u4e2a\u53d6\u51b3\u4e8e\u5bf9\u5e94\u7684\u786c\u4ef6\u5e73\u53f0 CPU\u6838\u5fc3\u4e0d\u4f1a\u76f4\u63a5\u8bbf\u95ee\u4e3b\u5185\u5b58\uff0c\u4ed6\u4eec\u5f80\u5f80\u53ea\u80fd\u8bbf\u95ee\u672c\u5730\u7684\u7f13\u5b58 \u6570\u636e\u548c\u6307\u4ee4\u90fd\u53ef\u4ee5\u5b58\u5728\u7f13\u5b58\u4e2d \u9ad8\u901f\u7f13\u5b58\u884c\u6309L1-> L2-> L3\u7684\u987a\u5e8f\u6392\u5217\uff0c\u56e0\u4e3a\u65b0\u7684\u9ad8\u901f\u7f13\u5b58\u884c\u9700\u8981\u5b58\u50a8\u5728\u9ad8\u901f\u7f13\u5b58\u4e2d\u3002 \u786c\u4ef6\u559c\u6b22\u6cbf\u7740Cache line\u7ebf\u6027\u7684\u8bbf\u95ee\u6570\u636e\u548c\u6307\u4ee4 \u4e3b\u5185\u5b58\u5efa\u7acb\u5728\u76f8\u5bf9\u8f83\u5feb\u7684\u5ec9\u4ef7\u5185\u5b58\u4e0a\u3002\u9ad8\u901f\u7f13\u5b58\u5efa\u7acb\u5728\u975e\u5e38\u5feb\u901f\u4e14\u6602\u8d35\u7684\u5185\u5b58\u4e0a\u3002 \u8bbf\u95ee\u4e3b\u5185\u5b58\u7684\u901f\u5ea6\u975e\u5e38\u6162\uff0c\u6211\u4eec\u9700\u8981\u7f13\u5b58\u3002 \u4ece\u4e3b\u5b58\u50a8\u5668\u8bbf\u95ee\u4e00\u4e2a\u5b57\u8282\u5c06\u5bfc\u81f4\u8bfb\u53d6\u5e76\u7f13\u5b58\u6574\u4e2a\u7f13\u5b58\u884c\u3002 \u5728\u9ad8\u901f\u7f13\u5b58\u884c\u4e2d\u5199\u5165\u4e00\u4e2a\u5b57\u8282\u9700\u8981\u5199\u5165\u6574\u4e2a\u9ad8\u901f\u7f13\u5b58\u884c\u3002 \u5c0f \u7b49\u4e8e \u5feb \u9002\u5408\u653e\u5165\u7f13\u5b58\u4e2d\u7d27\u51d1\u6570\u636e\u7ed3\u6784\u662f\u6700\u5feb\u7684 \u4ec5\u904d\u5386\u7f13\u5b58\u7684\u6570\u636e\u662f\u6700\u5feb\u7684 \u53ef\u9884\u6d4b\u7684\u8bbf\u95ee\u6a21\u5f0f\u6700\u91cd\u8981 \u53ea\u8981\u53ef\u884c\uff0c\u5c3d\u53ef\u80fd\u4f7f\u7528\u7ebf\u6027\u6570\u7ec4\u904d\u5386 \u63d0\u4f9b\u5e38\u89c4\u7684\u5185\u5b58\u8bbf\u95ee\u6a21\u5f0f \u786c\u4ef6\u53ef\u4ee5\u5bf9\u6240\u9700\u7684\u5185\u5b58\u505a\u51fa\u66f4\u597d\u7684\u9884\u6d4b \u7f13\u5b58\u672a\u547d\u4e2d\u4e5f\u4f1a\u5bfc\u81f4TLB\u7f13\u5b58\u672a\u547d\u4e2d \u5c06\u865a\u62df\u5730\u5740\u8f6c\u6362\u4e3a\u7269\u7406\u5730\u5740\u9700\u8981Cache \u9700\u8981\u7b49\u5f85OS\u544a\u8bc9\u6211\u4eec\u771f\u6b63\u8981\u8bbf\u95ee\u7684\u5185\u5b58\u5728\u54ea\u91cc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 3GHz(3 clock cycles/ns) * 4 instructions per cycle = 12 instructions per ns! 1 ns ............. 1 ns .............. 12 instructions (one) 1 \u00b5s .......... 1000 ns .......... 12,000 instructions (thousand) 1 ms ..... 1,000,000 ns ...... 12,000,000 instructions (million) 1 s .. 1,000,000,000 ns .. 12,000,000,000 instructions (billion) L1 - 64KB Cache (Per Core) 4 cycles of latency at 1.3 ns Stalls for 16 instructions L2 - 256KB Cache (Per Core) 12 cycles of latency at 4 ns Stalls for 48 instructions L3 - 8MB Cache 40 cycles of latency at 13.3 ns Stalls for 160 instructions Main Memory 100 cycle of latency at 33.3 ns Stalled for 400 instructions 1 2 3 4 5 6 7 8 9 10 11 12 13 14 L1 cache reference ......................... 0.5 ns ................... 6 ins Branch mispredict ............................ 5 ns ................... 60 ins L2 cache reference ........................... 7 ns ................... 84 ins Mutex lock/unlock ........................... 25 ns .................. 300 ins Main memory reference ...................... 100 ns ................. 1200 ins Compress 1K bytes with Zippy ............. 3,000 ns (3 \u00b5s) ........... 36k ins Send 2K bytes over 1 Gbps network ....... 20,000 ns (20 \u00b5s) ........ 240k ins SSD random read ........................ 150,000 ns (150 \u00b5s) ........ 1.8M ins Read 1 MB sequentially from memory ..... 250,000 ns (250 \u00b5s) .......... 3M ins Round trip within same datacenter ...... 500,000 ns (0.5 ms) .......... 6M ins Read 1 MB sequentially from SSD* ..... 1,000,000 ns (1 ms) ........... 12M ins Disk seek ........................... 10,000,000 ns (10 ms) ......... 120M ins Read 1 MB sequentially from disk .... 20,000,000 ns (20 ms) ......... 240M ins Send packet CA->Netherlands->CA .... 150,000,000 ns (150 ms) ........ 1.8B ins range\u7684\u8bed\u4e49 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 // All material is licensed under the Apache License Version 2.0, January 2004 // http://www.apache.org/licenses/LICENSE-2.0 // Sample program to show how the for range has both value and pointer semantics. package main import \"fmt\" func main () { // Using the pointer semantic form of the for range. friends := [ 5 ] string { \"Annie\" , \"Betty\" , \"Charley\" , \"Doug\" , \"Edward\" } fmt . Printf ( \"Bfr[%s] : \" , friends [ 1 ]) // \u8fd9\u79cd\u662f\u6307\u9488\u8bed\u4e49\uff0c\u901a\u8fc7\u4e0b\u6807\u6765\u8bbf\u95eefriends\uff0c\u4e0d\u4ea7\u751f\u4e34\u65f6\u53d8\u91cf for i := range friends { friends [ 1 ] = \"Jack\" if i == 1 { fmt . Printf ( \"Aft[%s]\\n\" , friends [ 1 ]) } } // Using the value semantic form of the for range. friends = [ 5 ] string { \"Annie\" , \"Betty\" , \"Charley\" , \"Doug\" , \"Edward\" } fmt . Printf ( \"Bfr[%s] : \" , friends [ 1 ]) // \u8fd9\u79cd\u662f\u503c\u8bed\u4e49\uff0cv\u6bcf\u6b21\u62f7\u8d1dfriends\u4e2d\u7684\u5143\u7d20\uff0c\u4fee\u6539friends\u4e0d\u4f1a\u5f71\u54cdv for i , v := range friends { friends [ 1 ] = \"Jack\" if i == 1 { fmt . Printf ( \"v[%s]\\n\" , v ) } } // Using the value semantic form of the for range but with pointer // semantic access. DON'T DO THIS. friends = [ 5 ] string { \"Annie\" , \"Betty\" , \"Charley\" , \"Doug\" , \"Edward\" } fmt . Printf ( \"Bfr[%s] : \" , friends [ 1 ]) // \u4e0d\u8981\u8fd9\u79cd\u5199\u6cd5\uff0c\u4f1a\u5b58\u5728data race\u7684\uff0c\u56e0\u4e3av\u6bcf\u6b21\u62f7\u8d1d\u7684\u662ffriends\u4e2d\u5143\u7d20\u7684\u6307\u9488\uff0c\u4fee\u6539 friends\u4f1a\u5f71\u54cdv for i , v := range & friends { friends [ 1 ] = \"Jack\" if i == 1 { fmt . Printf ( \"v[%s]\\n\" , v ) } } }","title":"Array"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/course/Ultimate_Go_Programing/#slice","text":"slice\u3001channel\u3001map\u3001function\u3001interface\u90fd\u662f\u5f15\u7528\u7c7b\u578b\uff0c\u8fd9\u4e9b\u6570\u636e\u7ed3\u6784\u5185\u90e8\u90fd\u6709\u6307\u9488\uff0c\u9ed8\u8ba4\u503c\u662fnil\u3002 nil\u548cempty\u4e0d\u4e00\u6837 1 2 3 4 // \u8fd9\u91cc\u7684s\u662fnil\uff0cnil\u8868\u793aslice\u5185\u90e8\u7684\u6307\u9488\u3001size\u3001cap\u7b49\u90fd\u662f0 var s [] string // \u8fd9\u91cc\u7684s\u662fempty\uff0c\u8868\u793a\u5185\u90e8\u6307\u9488\u6307\u5411\u4e86\u4e00\u4e2a\u5168\u5c40\u7684\u4f4d\u7f6e\u3001size\u548ccap\u90fd\u662f0 s := [] string {} \u901a\u8fc7make\u6765\u521b\u5efaslice\u53ef\u4ee5\u6307\u5b9alength\u548ccap\uff0c\u5982\u679c\u53ea\u6307\u5b9alength\u7684\u8bdd\uff0ccap\u9ed8\u8ba4\u7b49\u4e8elength 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 func main () { // Create a slice with a length of 5 elements. fruits := make ([] string , 5 ) fruits [ 0 ] = \"Apple\" fruits [ 1 ] = \"Orange\" fruits [ 2 ] = \"Banana\" fruits [ 3 ] = \"Grape\" fruits [ 4 ] = \"Plum\" // \u4f1a\u5b58\u5728\u8bbf\u95ee\u8d8a\u754c // You can't access an index of a slice beyond its length. fruits [ 5 ] = \"Runtime error\" // Error: panic: runtime error: index out of range fmt . Println ( fruits ) } slice\u5728cap\u5c0f\u4e8e1024\u7684\u65f6\u5019\u603b\u662f\u6309\u7167100%\u6765\u589e\u957f\uff0c\u5230\u4e861024\u540e\u5219\u6309\u716725%\u6765\u589e\u957f\u3002 \u5177\u4f53\u7ec6\u8282\u89c1 cap.go \u5728slice\u7684\u57fa\u7840\u4e0a\u53ef\u4ee5\u518d\u521b\u5efaslice\uff0c\u521b\u5efa\u7684slice\u548c\u4e4b\u524d\u7684slice\u662f\u5171\u4eab\u5e95\u5c42\u7684\u5b58\u50a8 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 func main () { orgSlice := make ([] string , 5 , 8 ) orgSlice [ 0 ] = \"Apple\" orgSlice [ 1 ] = \"Orange\" orgSlice [ 2 ] = \"Banana\" orgSlice [ 3 ] = \"Grape\" orgSlice [ 4 ] = \"Plum\" fmt . Printf ( \"cap: %d, length: %d\\n\" , cap ( orgSlice ), len ( orgSlice )) // \u53ef\u4ee5\u901a\u8fc7orgSlice[2:4:cap]\u6765\u6307\u5b9acap\uff0c\u5c06cap\u548clength\u8bbe\u7f6e\u4e3a\u76f8\u540c\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5728 // append\u7684\u65f6\u5019\u907f\u514d\u5bf9\u539f\u6765\u7684slice\u8fdb\u884c\u4fee\u6539\u3002\u5176\u4e2dcap\u4e0d\u80fd\u8d85\u8fc7\u539f\u6765slice\u7684\u6700\u5927cap\u8303\u56f4 slice2 := orgSlice [ 2 : 4 ] // length\u4e3a2\uff0ccap\u4e3a6\uff0c\u8fd9\u91cc\u9700\u8981\u5c0f\u5fc3\u4e86\uff0c\u56e0\u4e3acap\u548clength\u4e0d\u76f8\u540c\uff0c\u56e0\u6b64\u5728append\u7684\u65f6\u5019 // \u4e0d\u4f1a\u8fdb\u884c\u62f7\u8d1d\uff0c\u800c\u662f\u76f4\u63a5\u5728\u539f\u6765\u7684\u57fa\u7840\u4e0a\u64cd\u4f5c\uff0c\u8fd9\u4e2a\u662f\u5b58\u5728\u526f\u4f5c\u7528\u7684\uff0c\u4f1a\u5f71\u54cd\u5230orgSlice\uff0c\u4f8b\u5982\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50 fmt . Printf ( \"cap: %d, length: %d\\n\" , cap ( slice2 ), len ( slice2 )) // Append\u4f1a\u5bfc\u81f4orgSlice\u4e2d\u7684\u5143\u7d20\u88ab\u8986\u76d6 slice2 = append ( slice2 , \"test\" ) fmt . Printf ( \"slice2: %v\\n\" , slice2 ) fmt . Printf ( \"orgSlice: %v %d\\n\" , orgSlice , len ( orgSlice )) slice3 := orgSlice [ 2 :] fmt . Printf ( \"cap: %d, length: %d\\n\" , cap ( slice3 ), len ( slice3 )) // \u8fd9\u91ccappend\u4e0d\u4f1a\u5f71\u54cdorgSlice\uff0c\u56e0\u4e3aorgSlice\u548cslice3\u4e24\u4e2a\u7ed3\u675f\u4f4d\u7f6e\u90fd\u662f\u76f8\u540c\u7684\uff0c // \u8fd9\u91cc\u7684append\u53ea\u4f1a\u5728\u672a\u4f7f\u7528\u7684\u533a\u57df\u6dfb\u52a0\u65b0\u7684\u5143\u7d20\uff0corgSlice\u611f\u77e5\u4e0d\u5230\u3002\u540e\u7eedorgSlice // \u5982\u679c\u4e5f\u8fdb\u884cappend\u7684\u5316\uff0c\u4f1a\u5bfc\u81f4\u4e24\u4e2aSlice\u7684\u5185\u5bb9\u76f8\u4e92\u8986\u76d6\u4e86\u3002 slice3 = append ( slice3 , \"test3\" ) fmt . Printf ( \"slice3: %v\\n\" , slice3 ) fmt . Printf ( \"orgSlice: %v %d\\n\" , orgSlice , len ( orgSlice )) } // \u8f93\u51fa cap : 8 , length : 5 cap : 6 , length : 2 slice2 : [ Banana Grape test ] orgSlice : [ Apple Orange Banana Grape test ] cap : 6 , length : 3 slice3 : [ Banana Grape test test3 ] orgSlice : [ Apple Orange Banana Grape test ] 5 \u5f15\u7528slice\u4e2d\u7684\u5143\u7d20\u65f6\u9700\u8981\u5c0f\u5fc3\u56e0\u4e3aappend\u5e26\u6765\u7684\u526f\u4f5c\u7528 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 type user struct { likes int } func main () { // Declare a slice of 3 users. users := make ([] user , 3 ) // Share the user at index 1. // \u8fd9\u91cc\u5f15\u7528\u4e86slice\u4e2d\u7684\u5143\u7d20 shareUser := & users [ 1 ] // Add a like for the user that was shared. // \u64cd\u4f5c\u5f15\u7528\u672c\u8eab\u4e5f\u4f1a\u5bfc\u81f4slice\u4e2d\u5bf9\u5e94\u5143\u7d20\u53d1\u751f\u53d8\u5316 shareUser . likes ++ // Display the number of likes for all users. for i := range users { fmt . Printf ( \"User: %d Likes: %d\\n\" , i , users [ i ]. likes ) } // Add a new user. // append\u4f1a\u5bfc\u81f4copy\u7684\u53d1\u751f\uff0c\u90a3\u4e48\u4e4b\u524d\u5bf9slice\u4e2d\u5143\u7d20\u7684\u5f15\u7528\u548cappend\u540e\u7684slice\u662f\u4e24\u4e2a\u72ec\u7acb\u7684slice\uff0c\u4e92\u4e0d\u5f71\u54cd\u3002 users = append ( users , user {}) // Add another like for the user that was shared. // \u8fd9\u662f\u5728\u64cd\u4f5cappend\u524d\u7684slice shareUser . likes ++ // Display the number of likes for all users. fmt . Println ( \"*************************\" ) for i := range users { fmt . Printf ( \"User: %d Likes: %d\\n\" , i , users [ i ]. likes ) } // Notice the last like has not been recorded. } copy\u51fd\u6570\u53ea\u4f1a\u62f7\u8d1d\u4e24\u4e2aslice\u4e2d\u7684\u6700\u5c0f\u957f\u5ea6\u3002\u5f53\u4e24\u4e2aslice\u5b58\u5728\u91cd\u53e0\u7684\u65f6\u5019\uff0ccopy\u51fd\u6570\u4e5f\u53ef\u4ee5\u6b63\u786e\u5de5\u4f5c 1 2 3 4 5 6 7 8 9 10 11 12 13 // Insert inserts the value into the slice at the specified index, // which must be in range. // The slice must have room for the new element. func Insert ( slice [] int , index , value int ) [] int { // Grow the slice by one element. slice = slice [ 0 : len ( slice ) + 1 ] // Use copy to move the upper part of the slice out of the way and open a hole. copy ( slice [ index + 1 :], slice [ index :]) // Store the new value. slice [ index ] = value // Return the result. return slice } \u5c0f\u5fc3slice\u7684\u8fed\u4ee3\uff0c\u503c\u8bed\u4e49\u548c\u6307\u9488\u8bed\u4e49 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 package main import \"fmt\" func main () { // Using the value semantic form of the for range. friends := [] string { \"Annie\" , \"Betty\" , \"Charley\" , \"Doug\" , \"Edward\" } // \u503c\u8bed\u4e49\uff0c\u8fd9\u91cc\u4f1a\u5bf9friends\u8fdb\u884c\u62f7\u8d1d\uff0c\u56e0\u6b64\u5728\u8fed\u4ee3\u8fc7\u7a0b\u4e2d\u4fee\u6539friends\u4e0d\u4f1a\u5f71\u54cd\u8fed\u4ee3\u7ed3\u679c\u7684 // v\u6bcf\u6b21\u90fd\u4f1a\u5bf9friends\u4e2d\u7684\u5143\u7d20\u8fdb\u884c\u62f7\u8d1d for _ , v := range friends { friends = friends [: 2 ] fmt . Printf ( \"v[%s]\\n\" , v ) } // Using the pointer semantic form of the for range. friends = [] string { \"Annie\" , \"Betty\" , \"Charley\" , \"Doug\" , \"Edward\" } // \u6307\u9488\u8bed\u4e49\uff0cfriends\u5e76\u4e0d\u4f1a\u62f7\u8d1d\uff0c\u56e0\u6b64\u8fed\u4ee3\u5668\u4e2d\u4fee\u6539friends\u4f1a\u5f71\u54cd\u8fed\u4ee3 for i := range friends { friends = friends [: 2 ] fmt . Printf ( \"v[%s]\\n\" , friends [ i ]) } } \u5c0f\u5fc3slice\u8fed\u4ee3\uff0c\u59cb\u7ec8\u53ea\u6709\u4e00\u4e2a\u8fed\u4ee3\u5668\u53d8\u91cf 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 type Dog struct { Name string Age int } func main () { jackie := Dog { Name : \"Jackie\" , Age : 19 , } fmt . Printf ( \"Jackie Addr: %p\\n\" , & jackie ) sammy := Dog { Name : \"Sammy\" , Age : 10 , } fmt . Printf ( \"Sammy Addr: %p\\n\" , & sammy ) dogs := [] Dog { jackie , sammy } fmt . Println ( \"\" ) // dog\u6bcf\u6b21\u8fed\u4ee3\u90fd\u4f1a\u62f7\u8d1d\u4e00\u6b21 for _ , dog := range dogs { fmt . Printf ( \"Name: %s Age: %d\\n\" , dog . Name , dog . Age ) fmt . Printf ( \"Addr: %p\\n\" , & dog ) // \u8fd9\u91cc\u8f93\u51fa\u7684\u5730\u5740\u603b\u662f\u4e00\u6837\u7684 fmt . Println ( \"\" ) } allDogs := [] * Dog {} for _ , dog := range dogs { // \u8fd9\u91cc\u4f1a\u5b58\u5728\u95ee\u9898\uff0c\u56e0\u6b64\u5b58\u7684\u90fd\u662f\u6307\u9488\uff0c\uff0c\u4f46\u662fdog\u53d8\u91cf\u53ea\u6709\u4e00\u4e2a\uff0c\u53ea\u662f\u6bcf\u6b21\u8fdb\u884ccopy\uff0c\u56e0\u6b64\u8fd9\u91cc\u6700\u7ec8append\u7684\u90fd\u662f\u6700\u540e\u4e00\u4e2a\u5143\u7d20 allDogs = append ( allDogs , & dog ) } for _ , dog := range allDogs { fmt . Printf ( \"Name: %s Age: %d\\n\" , dog . Name , dog . Age ) } } string\u5176\u5b9e\u5c31\u662fslice\u7684\u4e00\u4e2a\u53ea\u8bfb\u7248\u672c\uff0c\u4e5f\u5305\u542b\u4e86\u6307\u9488\u548csize\uff0c\u4f46\u662f\u56e0\u4e3a\u662f\u53ea\u8bfb\u7684\uff0c\u6240\u4ee5\u6ca1\u6709cap\u5b57\u6bb5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 package main import ( \"fmt\" \"unicode/utf8\" ) func main () { // Declare a string with both chinese and english characters. s := \"\u4e16\u754c means world\" // UTFMax is 4 -- up to 4 bytes per encoded rune. var buf [ utf8 . UTFMax ] byte // Iterate over the string. // \u9ed8\u8ba4\u904d\u5386string\u662f\u6309\u7167rune\u6765\u904d\u5386\u7684\uff0c\u4e00\u4e2arune\u662f\u4e00\u4e2a\u53ef\u53d8\u5927\u5c0f\u3002 // i\u6307\u5411\u8fd9\u4e2arune\u5728string\u4e2d\u7684offset for i , r := range s { // Capture the number of bytes for this rune. rl := utf8 . RuneLen ( r ) // Calculate the slice offset for the bytes associated // with this rune. si := i + rl // Copy of rune from the string to our buffer. copy ( buf [:], s [ i : si ]) // Display the details. fmt . Printf ( \"%2d: %q; codepoint: %#6x; encoded bytes: %#v\\n\" , i , r , r , buf [: rl ]) } }","title":"slice"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/course/Ultimate_Go_Programing/#map","text":"map\u7684\u8fed\u4ee3\u603b\u662f\u65e0\u5e8f\u7684 map\u7684key\u5fc5\u987b\u662f\u53efhash\u7684\u3001\u800c\u4e14\u662f\u53ef\u6bd4\u8f83\u7684\uff0cslice\u6ca1\u529e\u6cd5\u4f5c\u4e3akey\uff0c\u56e0\u4e3a\u4e0d\u53ef\u6bd4\u8f83 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 package main import \"fmt\" // user represents someone using the program. type user struct { name string surname string } // users defines a set of users. type users [] user func main () { // Declare and make a map that uses a slice as the key. // \u8fd9\u91cc\u7684users\u662fslice\uff0c\u662f\u4e0d\u53ef\u6bd4\u8f83\u7684\uff0c\u4e0d\u80fd\u4f5c\u4e3akey u := make ( map [ users ] int ) // ./example3.go:22: invalid map key type users // Iterate over the map. for key , value := range u { fmt . Println ( key , value ) } } map\u4e2d\u7684\u5143\u7d20\u662f\u4e0d\u53ef\u5bfb\u5740\u7684 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 package main // player represents someone playing our game. type player struct { name string score int } func main () { // Declare a map with initial values using a map literal. players := map [ string ] player { \"anna\" : { \"Anna\" , 42 }, \"jacob\" : { \"Jacob\" , 21 }, } // Trying to take the address of a map element fails. anna := & players [ \"anna\" ] anna . score ++ // ./example4.go:23:10: cannot take the address of players[\"anna\"] // Instead take the element, modify it, and put it back. player := players [ \"anna\" ] player . score ++ players [ \"anna\" ] = player } \u7a7amap\u548cnil\u662f\u4e0d\u540c\u7684 1 2 3 4 // \u7a7amap users := make ( map [ string ] user ) // nil var users map [ string ] user","title":"map"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/course/Ultimate_Go_Programing/#method","text":"\u65b9\u6cd5\u672c\u8d28\u4e0a\u662f\u4e2a\u5e26\u6709receive\u7684\u51fd\u6570 receiver\u4f1a\u7ed9\u65b9\u6cd5\u7ed1\u5b9a\u4e00\u4e2a\u7c7b\u578b\uff0c\u53ef\u4ee5\u662f\u503c\u8bed\u4e49\u4e5f\u53ef\u4ee5\u662f\u6307\u9488\u8bed\u4e49 \u503c\u8bed\u4e49\u610f\u5473\u7740\u6bcf\u6b21\u65b9\u6cd5\u8c03\u7528\u90fd\u662f\u901a\u8fc7\u526f\u672c\u8fdb\u884c\u64cd\u4f5c\u7684 \u6307\u9488\u8bed\u4e49\u610f\u5473\u7740\u6bcf\u6b21\u65b9\u6cd5\u8c03\u7528\u90fd\u662f\u5171\u4eab\u76f8\u540c\u7684\u5b9e\u4f8b \u575a\u6301\u7ed9\u5b9a\u7c7b\u578b\u7684\u5355\u4e00\u8bed\u4e49\u5e76\u4fdd\u6301\u4e00\u81f4 \u7528\u503c\u8bed\u4e49\u8fd8\u662f\u6307\u9488\u8bed\u4e49 \u5982\u679c\u7c7b\u578b\u662f\u4e00\u4e2amap\u3001func\u3001chan\uff0c\u4e0d\u8981\u4f7f\u7528\u6307\u9488\u8bed\u4e49\uff0c\u5982\u679c\u7c7b\u578b\u662fslice\uff0c\u5e76\u4e14\u6ca1\u6709reslice\u6216\u8005\u91cd\u65b0\u5206\u914dslice\u7684\u9700\u6c42\uff0c\u4e5f\u4e0d\u8981\u4f7f\u7528\u6307\u9488\u8bed\u4e49 \u5982\u679c\u65b9\u6cd5\u9700\u8981\u4fee\u6539\u64cd\u4f5c\uff0c\u90a3\u4e48\u5fc5\u987b\u4f7f\u7528\u6307\u9488\u8bed\u4e49 \u5982\u679c\u7c7b\u578b\u5305\u542b\u4e86\u9501\u3001\u6587\u4ef6fd\u7b49\u4e0d\u53ef\u62f7\u8d1d\u7684\u8d44\u6e90\u5219\u5fc5\u987b\u8981\u7528\u6307\u9488\u8bed\u4e49 \u5982\u679c\u7c7b\u578b\u662f\u5927\u578b\u7684\u6570\u636e\u7ed3\u6784\u6216\u8005\u6570\u7ec4\uff0c\u90a3\u4e48\u4e3a\u4e86\u6548\u7387\u5e94\u8be5\u4f7f\u7528\u6307\u9488 \u5982\u679c\u7c7b\u578b\u662f\u6570\u7ec4\u6216\u5207\u7247\uff0c\u5e76\u4e14\u5176\u5143\u7d20\u662f\u6307\u9488\uff0c\u800c\u4e14\u53ef\u80fd\u4f1a\u88ab\u4fee\u6539\uff0c\u5219\u6700\u597d\u4f7f\u7528\u6307\u9488\u8bed\u4e49\uff0c\u56e0\u4e3a\u5b83\u5c06\u4f7f\u8bfb\u8005\u66f4\u52a0\u6e05\u695a\u610f\u56fe\u3002 \u5982\u679c\u7c7b\u578b\u662f\u5c0f\u7684\u6570\u7ec4\u6216\u8005struct\u4e2d\u5305\u542b\u4e86\u4e00\u4e9b\u57fa\u672c\u7c7b\u578b\uff0c\u5e76\u4e14\u6ca1\u6709\u6307\u9488\uff0c\u4e5f\u6ca1\u6709\u53ef\u4fee\u6539\u7684\u5b57\u6bb5\u3002\u4ec5\u4ec5\u662f\u4e00\u4e9b\u57fa\u672c\u7c7b\u578b\uff0c\u90a3\u4e48\u4f7f\u7528\u503c\u8bed\u4e49\u53ef\u4ee5\u51cf\u5c11gc\u7684\u538b\u529b\u3002 \u6700\u540e\u5982\u6709\u7591\u95ee\u8bf7\u4f7f\u7528\u6307\u9488\u8bed\u4e49","title":"method"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/course/Ultimate_Go_Programing/#interface","text":"\u63a5\u53e3\u672c\u8eab\u5c31\u662f\u5f15\u7528\u7c7b\u578b\uff0c\u4e0d\u9700\u8981\u901a\u8fc7\u6307\u9488\u6765\u5171\u4eab \u5982\u4f55\u5224\u65ad\u4e00\u4e2a\u7c7b\u578b\u662f\u5426\u5b9e\u73b0\u4e86\u67d0\u4e2a\u63a5\u53e3? \u5bf9\u4e8e\u4e00\u4e2a\u6307\u9488\u6765\u8bf4\uff0c\u5176\u65b9\u6cd5\u96c6\u5305\u542b\u4e86\u503c\u8bed\u4e49\u548c\u6307\u9488\u8bed\u4e49\u4f5c\u4e3areciver\u5b9e\u73b0\u7684\u65b9\u6cd5 \u5bf9\u4e8e\u4e00\u4e2a\u503c\u6765\u8bf4\uff0c\u5176\u65b9\u6cd5\u96c6\u4ec5\u9650\u4e8e\u4f7f\u7528\u503c\u8bed\u4e49\u4f5c\u4e3areciver\u5b9e\u73b0\u7684\u65b9\u6cd5 \u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0cuser\u4f5c\u4e3a\u503c\u6765\u8bf4\uff0c\u5176\u65b9\u6cd5\u96c6\u53ea\u6709\u4f7f\u7528\u503c\u4f5c\u4e3areceiver\u7684\u65b9\u6cd5\uff0c\u4f46\u662fUser\u7684Notify\u662f\u7528\u6307\u9488\u4f5c\u4e3areceiver\u6765\u5b9e\u73b0\u7684\uff0c\u56e0\u6b64user\u5e76\u6ca1\u6709\u5b9e\u73b0Notify\u63a5\u53e3\uff0c \u628a\u5b83\u6362\u6210\u6307\u9488\u7c7b\u578b\u5c31\u53ef\u4ee5\u4e86\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 type User struct { Name string Email string } func SendNotification ( notify Notifier ) error { return notify . Notify () } func ( u * User ) Notify () error { log . Printf ( \"User: Sending User Email To %s<%s>\\n\" , u . Name , u . Email ) return nil } func main () { user := User { Name : \"janet jones\" , Email : \"janet@email.com\" , } SendNotification ( user ) } // Output: cannot use user ( type User ) as type Notifier in function argument : User does not implement Notifier ( Notify method has pointer receiver ) \u5d4c\u5165\u5f0f\u7c7b\u578b\u5176\u5305\u542b\u7684\u65b9\u6cd5\u96c6\u548c\u5916\u90e8\u7c7b\u578b\u662f\u4ec0\u4e48\u5173\u7cfb? 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 // Admin\u5305\u542b\u4e86\u5d4c\u5165\u5f0f\u7c7b\u578bUser\uff0c\u56e0\u6b64User\u5b9e\u73b0\u7684Notify\u63a5\u53e3\uff0cAdmin\u4e5f\u5b9e\u73b0\u4e86\u3002 type Admin struct { User Level string } func main () { admin := & Admin { User : User { Name : \"john smith\" , Email : \"john@email.com\" , }, Level : \"super\" , } SendNotification ( admin ) // \u4e5f\u53ef\u4ee5\u8fd9\u6837\u6765\u8c03\u7528\uff0c\u56e0\u4e3a\u5d4c\u5165\u7c7b\u578b\u5728\u5916\u90e8\u7c7b\u578b\u4e2d\u5c31\u662f\u4e00\u4e2a\u5b57\u6bb5\u540d\u4e3a\u7c7b\u578b\u540d\u7684\u5b57\u6bb5\u3002 // admin.User.Notify() } // Output User : Sending User Email To john smith < john @ email . com > Tip \u5f53\u6211\u4eec\u5d4c\u5165\u4e00\u4e2a\u7c7b\u578b\u65f6\uff0c\u8be5\u7c7b\u578b\u7684\u65b9\u6cd5\u6210\u4e3a\u5916\u90e8\u7c7b\u578b\u7684\u65b9\u6cd5\uff0c\u4f46\u662f\u5f53\u5b83\u4eec\u88ab\u8c03\u7528\u65f6\uff0c\u8be5\u65b9\u6cd5\u7684\u63a5\u6536\u8005\u662f\u5185\u90e8\u7c7b\u578b\uff0c\u800c\u4e0d\u662f\u5916\u90e8\u7c7b\u578b\u3002 \u7ed9\u5b9a\u4e00\u4e2a\u7ed3\u6784\u7c7b\u578bS\u548c\u4e00\u4e2a\u540d\u4e3aT\u7684\u7c7b\u578b\uff0c\u90a3\u4e48\u8be5\u7ed3\u6784\u4f53S\u7684\u65b9\u6cd5\u96c6\u4e3a: 1 2 1. \u5982\u679cS\u5305\u542b\u533f\u540d\u5b57\u6bb5T\uff0c\u5219`S`\u548c`*S`\u7684\u65b9\u6cd5\u96c6\u4f1a\u5305\u62ec\u4ee5T\u4f5c\u4e3areceiver\u7684\u65b9\u6cd5\u3002 2. `*S`\u8fd8\u989d\u5916\u5305\u542b\u4e86\u4ee5`*T`\u4f5c\u4e3areceiver\u7684\u65b9\u6cd5 \u5916\u90e8\u7c7b\u578b\u548c\u5d4c\u5165\u5f0f\u7c7b\u578b\u5b9e\u73b0\u4e86\u76f8\u540c\u7684interface\u600e\u4e48\u529e? 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 func ( a * Admin ) Notify () error { log . Printf ( \"Admin: Sending Admin Email To %s<%s>\\n\" , a . Name , a . Email ) return nil } func main () { admin := & Admin { User : User { Name : \"john smith\" , Email : \"john@email.com\" , }, Level : \"super\" , } // \u5916\u90e8\u7c7b\u578b\u6240\u5b9e\u73b0\u7684\u65b9\u6cd5\u4f18\u5148\u8986\u76d6\u5d4c\u5165\u5f0f\u7c7b\u578b SendNotification ( admin ) } // Output Admin : Sending Admin Email To john smith < john @ email . com > interface\u4f1a\u4fdd\u5b58\u503c\uff0c\u5728\u8c03\u7528\u7684\u65f6\u5019\uff0c\u4f7f\u7528\u4fdd\u5b58\u7684\u503c\u6765\u8c03\u7528 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 package main import \"fmt\" type printer interface { print () } type user struct { name string } func ( u user ) print () { fmt . Println ( \"User Name:\" , u . name ) } func main () { u := user { \"Bill\" } // \u8fd9\u91cc\u4f1a\u5bf9u\u8fdb\u884c\u62f7\u8d1d\uff0c\u5e76\u4fdd\u5b58\u5728interface\u4e2d entities := [] printer { u , & u , } // \u8fd9\u91cc\u4fee\u6539u\uff0c\u5e76\u4e0d\u4f1a\u5f71\u54cd\u5df2\u7ecf\u62f7\u8d1d\u7684u u . name = \"Bill_CHG\" for _ , e := range entities { e . print () } } Tip \u5f53\u4f7f\u7528\u503c\u63a5\u6536\u5668\uff08\u503c\u8bed\u4e49\uff09\u5b9e\u73b0\u63a5\u53e3\u65f6\uff0c\u53ef\u4ee5\u5728\u63a5\u53e3\u5185\u90e8\u5b58\u50a8\u503c\u548c\u5730\u5740\u7684\u526f\u672c\u3002\u4f46\u662f\uff0c\u5f53\u4f7f\u7528\u6307\u9488\u63a5\u6536\u5668\uff08\u6307\u9488\u8bed\u4e49\uff09\u5b9e\u73b0\u63a5\u53e3\u65f6\uff0c\u53ea\u80fd\u5b58\u50a8\u5730\u5740\u7684\u526f\u672c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 package main import \"fmt\" type notifier interface { notify () } type duration int func ( d * duration ) notify () { fmt . Println ( \"Sending Notification in\" , * d ) } func main () { duration ( 42 ). notify () } // \u4f7f\u7528\u6307\u9488\u4f5c\u4e3areceiver\u7684\u65f6\u5019\uff0c\u662f\u4e0d\u80fd\u5c06\u503c\u4f20\u9012\u7ed9interface\u7684\uff0c\u5fc5\u987b\u4f20\u9012\u7684\u662f\u4e00\u4e2a\u53ef\u4ee5\u53d6\u5730\u5740\u7684\u53d8\u91cf\u3002 // duration(42)\u662f\u4e00\u4e2a\u5e38\u91cf\u662f\u6ca1\u6709\u5730\u5740\u7684\uff0c\u53ea\u5b58\u5728\u4e8e\u7f16\u8bd1\u65f6 . / prog . go : 16 : 14 : cannot call pointer method on duration ( 42 ) . / prog . go : 16 : 14 : cannot take the address of duration ( 42 ) interface\u662f\u53ef\u4ee5\u6bd4\u8f83\u7684\uff0c\u6bd4\u8f83\u7684\u662f\u63a5\u53e3\u5185\u90e8\u5b58\u50a8\u7684\u6570\u636e\uff0c\u800c\u4e0d\u662f\u63a5\u53e3\u672c\u8eab\u3002\u4f7f\u7528\u6307\u9488\u8bed\u4e49\u65f6\uff0c\u5c06\u6bd4\u8f83\u5730\u5740\u3002\u4f7f\u7528\u503c\u8bed\u4e49\u65f6\uff0c\u5c06\u6bd4\u8f83\u503c\u3002 \u6df1\u5165interface 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 // All material is licensed under the Apache License Version 2.0, January 2004 // http://www.apache.org/licenses/LICENSE-2.0 // Sample program that explores how interface assignments work when // values are stored inside the interface. package main import ( \"fmt\" \"unsafe\" ) // notifier provides support for notifying events. type notifier interface { notify () } // user represents a user in the system. type user struct { name string } // notify implements the notifier interface. func ( u user ) notify () { fmt . Println ( \"Alert\" , u . name ) } func inspect ( n * notifier , u * user ) { // \u4e00\u4e2ainterface\u4e24\u4e2a\u5b57\u5927\u5c0f\uff0c\u7b2c\u4e00\u4e2a\u5b57\u5b58\u50a8\u65b9\u6cd5\u96c6\uff0c\u7b2c\u4e8c\u4e2a\u5b57\u5b58\u50a8\u503c word := uintptr ( unsafe . Pointer ( n )) + uintptr ( unsafe . Sizeof ( & u )) // \u53ef\u4ee5\u770b\u5230interface\u59cb\u7ec8\u5b58\u50a8\u5730\u5740\uff0c\u53ea\u662f\u8fd9\u4e2a\u5730\u5740\u6307\u5411\u7684\u5185\u5bb9\u5230\u5e95\u662f\u503c\u62f7\u8d1d\u540e\u7684\u5bf9\u8c61\uff0c\u8fd8\u662f\u6307\u9488\u62f7\u8d1d\u540e\u7684\u5bf9\u8c61\u3002 value := ( ** user )( unsafe . Pointer ( word )) fmt . Printf ( \"Addr User: %p Word Value: %p Ptr Value: %v\\n\" , u , * value , ** value ) } func main () { // Create a notifier interface and concrete type value. var n1 notifier u := user { \"bill\" } // Store a copy of the user value inside the notifier // interface value. n1 = u // We see the interface has its own copy. // Addr User: 0x1040a120 Word Value: 0x10427f70 Ptr Value: {bill} // \u901a\u8fc7\u8f93\u51fa\u7ed3\u679c\u53ef\u503c\uff0cinterface\u4e2d\u5b58\u50a8\u7684\u503c\u548c\u8d4b\u503c\u8fc7\u6765\u7684\u503c\u4e0d\u4e00\u6837\uff0c\u56e0\u6b64\u5176\u6307\u5411\u7684\u662f\u62f7\u8d1d\u540e\u7684\u503c inspect ( & n1 , & u ) // Make a copy of the interface value. n2 := n1 // We see the interface is sharing the same value stored in // the n1 interface value. // Addr User: 0x1040a120 Word Value: 0x10427f70 Ptr Value: {bill} // \u6307\u9488\u8d4b\u503c\u540e\uff0c\u5927\u5bb6\u90fd\u662f\u6307\u5411\u76f8\u540c\u7684\u503c inspect ( & n2 , & u ) // Store a copy of the user address value inside the // notifier interface value. n1 = & u // We see the interface is sharing the u variables value // directly. There is no copy. // Addr User: 0x1040a120 Word Value: 0x1040a120 Ptr Value: {bill} // \u5f53\u4f20\u9012\u6307\u9488\u7684\u65f6\u5019\uff0cinterface\u4e2d\u5b58\u50a8\u7684\u5c31\u662f\u5730\u5740\u4e86\u3002 inspect ( & n1 , & u ) } // Output Addr User : 0xc000010200 Word Value : 0xc000068f68 Ptr Value : { bill } Addr User : 0xc000010200 Word Value : 0xc000068f68 Ptr Value : { bill } Addr User : 0xc000010200 Word Value : 0xc000010200 Ptr Value : { bill }","title":"interface"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/course/Ultimate_Go_Programing/#reflection","text":"\u53cd\u5c04\u662finterface\u5230\u53cd\u5c04\u5bf9\u8c61\u7684\u8f6c\u6362 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 package main import ( \"fmt\" \"reflect\" ) func main () { var x float64 = 3.4 // TypeOf\u7684\u53c2\u6570\u662finterface{},\u4efb\u610f\u8f93\u5165\u90fd\u4f1a\u8f6c\u6362\u4e3ainterface{} // \u7136\u540e\u901a\u8fc7\u53cd\u5c04\u83b7\u53d6\u5230\u7c7b\u578b\u4fe1\u606f fmt . Println ( \"type:\" , reflect . TypeOf ( x )) fmt . Println ( \"value:\" , reflect . ValueOf ( x ). String ()) v := reflect . ValueOf ( x ) fmt . Println ( \"type:\" , v . Type ()) fmt . Println ( \"kind is float64:\" , v . Kind () == reflect . Float64 ) fmt . Println ( \"value:\" , v . Float ()) } func TypeOf ( i interface {}) Type \u83b7\u53d6\u53cd\u5c04\u5bf9\u8c61\u7684\u503c\u6216\u8005\u7ed9\u5bf9\u8c61\u8bbe\u7f6e\u503c\u65f6\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u7684\u53c2\u6570\u6216\u8005\u8fd4\u56de\u503c\u7684\u7c7b\u578b\u662f\u53ef\u5bb9\u7eb3\u8be5\u503c\u7684\u6700\u5927\u7c7b\u578b\u4e0a\uff1a \u4f8b\u5982\uff0c\u6240\u6709\u6709\u7b26\u53f7\u6574\u6570\u7684\u662fint64\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u53cd\u5c04\u5bf9\u8c61\u7684Int\u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2aint64\uff0c\u800cSetInt\u503c\u63a5\u6536\u4e00\u4e2aint64\u4f5c\u4e3a\u53c2\u6570\uff0c\u4f8b\u5982\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 package main import ( \"fmt\" \"reflect\" ) func main () { var x uint8 = 'x' v := reflect . ValueOf ( x ) fmt . Println ( \"type:\" , v . Type ()) // uint8. fmt . Println ( \"kind is uint8: \" , v . Kind () == reflect . Uint8 ) // true. // \u83b7\u53d6\u503c\u7684\u65f6\u5019\uff0cUint\u8fd4\u56de\u7684\u662fuint64\uff0c\u56e0\u6b64\u8fd9\u91cc\u9700\u8981\u8f6c\u578b x = uint8 ( v . Uint ()) // v.Uint returns a uint64. } \u901a\u8fc7\u53cd\u5c04\u83b7\u53d6\u5230\u7684\u7c7b\u578b\u662f\u5176\u5e95\u5c42\u7684\u771f\u5b9e\u7c7b\u578b\uff0c\u800c\u4e0d\u662f\u7c7b\u578b\u522b\u540d 1 2 3 4 type MyInt int var x MyInt = 7 // v.Kind == reflect.Int v := reflect . ValueOf ( x ) \u53cd\u5c04\u4e5f\u53ef\u4ee5\u4ece\u53cd\u5c04\u5bf9\u8c61\u8f6c\u6362\u4e3ainterface 1 2 3 4 5 6 7 8 9 10 11 12 13 package main import ( \"fmt\" \"reflect\" ) func main () { var x uint8 = 'x' v := reflect . ValueOf ( x ) // \u5c06\u53cd\u5c04\u5bf9\u8c61\u53d8\u6210\u4e86interface\uff0c\u7136\u540e\u4f20\u9012\u7ed9\u4e86Println fmt . Println ( v . Interface ()) } \u8981\u4fee\u6539\u53cd\u5c04\u5bf9\u8c61\uff0c\u8be5\u503c\u5fc5\u987b\u53ef\u8bbe\u7f6e\u3002 \u53ef\u8bbe\u7f6e\u662f\u53cd\u5c04\u5bf9\u8c61\u7684\u5c5e\u6027\uff0c\u5e76\u975e\u6240\u6709\u53cd\u5c04\u5bf9\u8c61\u90fd\u5177\u6709\u5b83\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 package main import ( \"reflect\" \"fmt\" ) func main () { var x float64 = 3.4 // \u8fd9\u91cc\u662f\u5c06x\u4f20\u9012\u7ed9\u4e86ValueOf\u8fdb\u884c\u62f7\u8d1d\u624d\u6709\u4e86\u53cd\u5c04\u5bf9\u8c61v\uff0c\u56e0\u4e3a\u901a\u8fc7v\u4fee\u6539\u503c\u4e5f\u53ea\u662f\u5bf9\u62f7\u8d1d\u8fdb\u884c\u4e86\u4fee\u6539\uff0c\u5e76\u4e0d\u662f\u4fee\u6539x\u672c\u8eab // \u56e0\u6b64v\u4e0d\u5177\u6709\u53ef\u8bbe\u7f6e\u503c\u7684\u5c5e\u6027 v := reflect . ValueOf ( x ) // settability of v: false fmt . Println ( \"settability of v:\" , v . CanSet ()) // panic: reflect.Value.SetFloat using unaddressable value v . SetFloat ( 7.1 ) // Error: will panic. } \u6539\u6210\u4e0b\u9762\u8fd9\u6837\u5c31\u53ef\u4ee5\u8bbe\u7f6e\u503c\u4e86 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 var x float64 = 3.4 // \u53cd\u5c04\u5bf9\u8c61p\u672c\u8eab\u662f\u4e0d\u53ef\u8bbe\u7f6e\u7684\uff0c\u5176\u6307\u5411\u7684\u5143\u7d20\u624d\u662f\u53ef\u8bbe\u7f6e\u7684\u3002\u56e0\u4e3ap\u7684\u7c7b\u578b\u662f*float64 // \u6307\u9488\u7684\u503c\u662f\u6ca1\u529e\u6cd5\u4fee\u6539\u7684\uff0c\u4fee\u6539\u6307\u9488\u7684\u503c\u53ea\u4f1a\u5bfc\u81f4\u6307\u5411\u53e6\u5916\u4e00\u4e2a\u5bf9\u8c61 // \u901a\u8fc7Elem\u53ef\u4ee5\u83b7\u53d6\u5230\u5176\u6307\u5411\u7684\u503c\uff0c\u4e5f\u5c31\u662f*p\uff0c*p\u624d\u662f\u53ef\u4ee5\u8bbe\u7f6e\u7684\u3002 p := reflect . ValueOf ( & x ) // Note: take the address of x. // type of p: *float64 // settability of p: false fmt . Println ( \"type of p:\" , p . Type ()) fmt . Println ( \"settability of p:\" , p . CanSet ()) v := p . Elem () fmt . Println ( \"settability of v:\" , v . CanSet ()) v . SetFloat ( 7.1 ) fmt . Println ( v . Interface ()) fmt . Println ( x ) \u6b64\u5916\uff0c\u8fd8\u53ef\u4ee5\u901a\u8fc7\u53cd\u5c04\u6765\u4fee\u6539struct\u7684\u503c\uff0cstruct\u4e2d\u7684\u5927\u5199\u5f00\u5934\u7684\u5b57\u6bb5\u624d\u662f\u5bfc\u51fa\u5b57\u6bb5\uff0c\u662f\u53ef\u4ee5\u88ab\u4fee\u6539\u7684\uff0c\u5176\u4ed6\u7684\u5b57\u6bb5\u662f\u4e0d\u5177\u5907\u53ef\u8bbe\u7f6e\u5c5e\u6027\u7684 1 2 3 4 5 6 7 8 9 10 11 12 13 type T struct { A int B string } t := T { 23 , \"skidoo\" } s := reflect . ValueOf ( & t ). Elem () typeOfT := s . Type () for i := 0 ; i < s . NumField (); i ++ { // \u83b7\u53d6\u5230\u5b57\u6bb5 f := s . Field ( i ) fmt . Printf ( \"%d: %s %s = %v\\n\" , i , typeOfT . Field ( i ). Name , f . Type (), f . Interface ()) }","title":"reflection"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/course/Ultimate_Go_Programing/#exporting","text":"package\u662fgo\u7684\u57fa\u672c\u7f16\u8bd1\u5355\u5143\uff0c \u4ee3\u7801\u88ab\u7f16\u8bd1\u5230package\u4e2d\uff0c\u5e76\u6700\u7ec8\u94fe\u63a5\u5728\u4e00\u8d77 \u6807\u8bc6\u7b26\u6839\u636e\u5b57\u6bcd\u5927\u5c0f\u5199\u5bfc\u51fa\uff08\u6216\u4fdd\u6301\u672a\u5bfc\u51fa\uff09 \u901a\u8fc7import\u5bfc\u5165package\uff0c\u5c31\u53ef\u4ee5\u8bbf\u95ee\u8fd9\u4e2apackage\u4e2d\u5df2\u7ecf\u5bfc\u51fa\u7684\u6807\u8bc6\u7b26\u4e86 \u4efb\u4f55\u5305\u90fd\u53ef\u4ee5\u4f7f\u7528\u672a\u5bfc\u51fa\u7c7b\u578b\u7684\u503c\uff0c\u4f46\u662f\u4f7f\u7528\u8d77\u6765\u5f88\u70e6\u4eba 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 package counters // alertCounter is an unexported type that // contains an integer counter for alerts. type alertCounter int // NewAlertCounter creates and returns objects of // the unexported type alertCounter. func NewAlertCounter ( value int ) alertCounter { return alertCounter ( value ) } // \u95f4\u63a5\u8bbf\u95ee\u672a\u5bfc\u51fa\u7684\u6807\u8bc6\u7b26 package main import ( \"fmt\" \"test/counters\" ) func main () { // Create a variable of the unexported type using the // exported NewAlertCounter function from the package counters. counter := counters . NewAlertCounter ( 10 ) fmt . Printf ( \"Counter: %d\\n\" , counter ) } struct\u7684\u5b57\u6bb5\u540d\u6216\u8005\u65b9\u6cd5\u540d\u5982\u679c\u662f\u5c0f\u5199\u662f\u65e0\u6cd5\u88ab\u5916\u90e8\u76f4\u63a5\u8bbf\u95ee\u7684 \u5982\u679cstruct\u4e2d\u5d4c\u5165\u7684\u7c7b\u578b\u662f\u672a\u5bfc\u51fa\u7684\uff0c\u5219\u65e0\u6cd5\u76f4\u63a5\u521d\u59cb\u5316\uff0c\u9700\u8981\u663e\u793a\u7684\u8bbf\u95ee\u5d4c\u5165\u5f0f\u7c7b\u578b\u4e2d\u5bfc\u51fa\u7684\u5b57\u6bb5\u6765\u521d\u59cb\u5316 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 package animals // animal represents information about all animals. type animal struct { Name string Age int } // Dog represents information about dogs. type Dog struct { animal BarkStrength int } package main import ( \"fmt\" \"test/animals\" ) func main () { // Create an object of type Dog from the animals package. // This will NOT compile. dog := animals . Dog { // \u65e0\u6cd5\u7f16\u8bd1 animal : animals . animal { Name : \"Chole\" , Age : 1 , }, BarkStrength : 10 , } fmt . Printf ( \"Counter: %#v\\n\" , dog ) // Create an object of type Dog from the animals package. dog := animals . Dog { BarkStrength : 10 , } // \u663e\u793a\u8bbf\u95ee\u5bfc\u51fa\u5b57\u6bb5\u6765\u8fdb\u884c\u521d\u59cb\u5316 dog . Name = \"Chole\" dog . Age = 1 fmt . Printf ( \"Counter: %#v\\n\" , dog ) }","title":"exporting"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/course/Ultimate_Go_Programing/#composition","text":"\u884c\u4e3a\u7684\u7ec4\u5408\uff0c\u800c\u4e0d\u662f\u6570\u636e\u7684\u7ec4\u5408 \u7ec4\u5408\u8d85\u8d8a\u4e86\u7c7b\u578b\u5d4c\u5165 \u8003\u8651\u5c06\u884c\u4e3a\u5b9a\u4e49\u6210\u4e00\u4e2a\u4e2a\u72ec\u7acb\u7684intreface\uff0c\u7136\u540e\u901a\u8fc7\u63a5\u53e3\u7ec4\u5408\u5f62\u6210\u529f\u80fd\u66f4\u5927\u7684\u63a5\u53e3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // NailDriver represents behavior to drive nails into a board. type NailDriver interface { DriveNail ( nailSupply * int , b * Board ) } // NailPuller represents behavior to remove nails into a board. type NailPuller interface { PullNail ( nailSupply * int , b * Board ) } // NailDrivePuller represents behavior to drive and remove nails into a board. type NailDrivePuller interface { NailDriver NailPuller } \u786e\u4fdd\u6bcf\u4e2a\u51fd\u6570\u6216\u65b9\u6cd5\u5bf9\u4e8e\u5b83\u4eec\u63a5\u53d7\u7684\u63a5\u53e3\u7c7b\u578b\u90fd\u662f\u975e\u5e38\u7279\u5b9a\u7684\u3002\u4ec5\u63a5\u53d7\u60a8\u5728\u8be5\u51fd\u6570\u6216\u65b9\u6cd5\u4e2d\u4f7f\u7528\u7684\u884c\u4e3a\u7684\u63a5\u53e3\u7c7b\u578b\u3002\u8fd9\u5c06\u6709\u52a9\u4e8e\u786e\u5b9a\u6240\u9700\u7684\u8f83\u5927\u63a5\u53e3\u7c7b\u578b\u3002 \u7c7b\u578b\u5d4c\u5165\u4e0d\u662f\u5b50\u7c7b\u578b\u3001\u4e5f\u4e0d\u662f\u5b50\u7c7b\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 // \u9762\u5411\u5bf9\u8c61\u7684\u8fd9\u79cd\u7ee7\u627f\u7684\u98ce\u683c type Animal struct { Name string IsMamal bool } func ( a Animal ) Speak () {} type Dog struct { Animal PackFactor int } func ( d Dog ) Speak () {} // \u57fa\u4e8e\u884c\u4e3a\u7684\u98ce\u683c type Speaker interface { Speak () } type Dog struct { Name string IsMamal bool PackFactor int } func ( d Dog ) Speak () {} \u662f\u5426\u6709\u5fc5\u8981\u6dfb\u52a0\u4e00\u4e2a\u63a5\u53e3\uff0cchecklist\u5982\u4e0b: package\u58f0\u660e\u4e86\u4e00\u4e2a\u63a5\u53e3\uff0c\u8be5\u63a5\u53e3\u4e0e\u5176\u5177\u4f53\u7c7b\u578b\u7684\u6574\u4e2aAPI\u76f8\u5339\u914d\u3002 factory\u51fd\u6570\u8fd4\u56de\u7684\u7c7b\u578b\u662f\u5185\u90e8\u672a\u5bfc\u51fa\u7684\u7c7b\u578b \u53ef\u4ee5\u5220\u9664\u8be5\u63a5\u53e3\uff0c\u5e76\u4e14\u5bf9\u4e8eAPI\u7528\u6237\u800c\u8a00\uff0c\u6ca1\u6709\u4efb\u4f55\u66f4\u6539\u3002 \u63a5\u53e3\u672a\u5c06API\u4e0e\u66f4\u6539\u5206\u79bb \u6ee1\u8db3\u4e0a\u9762\u6761\u4ef6\u5219\u6ca1\u6709\u5fc5\u8981\u58f0\u660e\u63a5\u53e3\uff0c\u4e0b\u9762\u8fd9\u4e2achecklist\u5219\u662f\u9700\u8981\u4f7f\u7528\u63a5\u53e3\u7684\u573a\u666f: 1 2 3 1. API\u7684\u7528\u6237\u9700\u8981\u63d0\u4f9b\u5b9e\u73b0\u7ec6\u8282\u7684\u65f6\u5019 2. APi\u6709\u591a\u4e2a\u5b9e\u73b0\u7684\u65f6\u5019 3. \u8bc6\u522b\u51faAPI\u4e2d\u53ef\u4ee5\u66f4\u6539\u7684\u90e8\u5206\u5e76\u9700\u8981\u5c06\u5176\u53bb\u8026\u5408 intreface conversion 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 package main import \"fmt\" // Mover provides support for moving things. type Mover interface { Move () } // Locker provides support for locking and unlocking things. type Locker interface { Lock () Unlock () } // MoveLocker provides support for moving and locking things. type MoveLocker interface { Mover Locker } // bike represents a concrete type for the example. type bike struct {} // Move can change the position of a bike. func ( bike ) Move () { fmt . Println ( \"Moving the bike\" ) } // Lock prevents a bike from moving. func ( bike ) Lock () { fmt . Println ( \"Locking the bike\" ) } // Unlock allows a bike to be moved. func ( bike ) Unlock () { fmt . Println ( \"Unlocking the bike\" ) } func main () { var ml MoveLocker var m Mover // bike\u5b9e\u73b0\u4e86move\u3001lock\u3001unlock\uff0c\u6ee1\u8db3MoveLocker\u63a5\u53e3 ml = bike {} // \u53ef\u4ee5\u9690\u5f0f\u8f6c\u6362\u4e3a\u63a5\u53e3\u7684\u5b50\u96c6\u3002 // Move\u63a5\u53e3\u662fMoveLocker\u63a5\u53e3\u7684\u5b50\u96c6 m = ml // \u4f46\u662f\u53cd\u8fc7\u6765\u4e0d\u53ef\u4ee5\u3002 ml = m // \u5c06\u63a5\u53e3\u8f6c\u6362\u4e3a\u5177\u4f53\u7684\u503c b := m .( bike ) ml = b } Runtime Type Assertions 1 2 3 4 5 6 7 8 9 10 11 12 13 // car represents something you drive. type car struct {} // String implements the fmt.Stringer interface. func ( car ) String () string { return \"Vroom!\" } mvs fmt . Stringer := car {} if v , is := mvs .( car ); is { fmt . Printf ( \"Type assertion success\" ) }","title":"Composition"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/course/Ultimate_Go_Programing/#error-handing","text":"\u5f53\u9519\u8bef\u7684\u4e0a\u4e0b\u6587\u6bd4\u8f83\u590d\u6742\u7684\u65f6\u5019\uff0c\u901a\u8fc7\u521b\u5efa\u81ea\u5b9a\u4e49\u7684\u9519\u8bef\u7c7b\u578b\u7c7b\u4f3c\u627f\u8f7d 1 2 3 4 5 6 type SyntaxError struct { msg string // description of error Offset int64 // error occurred after reading Offset bytes } func ( e * SyntaxError ) Error () string { return e . msg } \u5bf9\u4e8e\u4e00\u4e9b\u9759\u6001\u7684\u3001\u7b80\u5355\u7684\u9519\u8bef\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u6807\u51c6\u5e93\u4e2d\u7684error 1 2 3 4 5 func Sqrt ( f float64 ) ( float64 , error ) { if f < 0 { return 0 , errors . New ( \"math: square root of negative number\" ) } } \u7edf\u4e00\u5b9a\u4e49Package\u7ea7\u522b\u7684\u9519\u8bef(Err\u524d\u7f00\uff0c\u8fd9\u662fgo\u5b9a\u4e49\u9519\u8bef\u7684\u547d\u540d\u89c4\u8303) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 var ( ErrInvalidUnreadByte = errors . New ( \"bufio: invalid use of UnreadByte\" ) ErrInvalidUnreadRune = errors . New ( \"bufio: invalid use of UnreadRune\" ) ErrBufferFull = errors . New ( \"bufio: buffer full\" ) ErrNegativeCount = errors . New ( \"bufio: negative count\" ) ) data , err := b . Peek ( 1 ) if err != nil { switch err { case bufio . ErrNegativeCount : // Do something specific. return case bufio . ErrBufferFull : // Do something specific. return default : // Do something generic. return } } \u5c0f\u5fc3error\u7684\u6bd4\u8f83 error\u662f\u4e2ainterface\uff0cintreface\u7684\u6bd4\u8f83\u8981\u770b\u5176\u5185\u90e8\u5b58\u50a8\u7684\u662f\u503c\u8fd8\u662f\u6307\u9488\uff0c\u5b9e\u9645\u6bd4\u8f83\u7684\u65f6\u5019\u662f\u7528\u5185\u90e8\u5b58\u50a8\u7684\u7c7b\u578b\u6765\u6bd4\u8f83\u7684\uff0c\u5982\u679c\u5b58\u50a8\u7684\u6307\u9488\uff0c\u90a3\u4e48\u603b\u662f\u4e0d\u76f8\u540c\uff0c \u5982\u679c\u5b58\u50a8\u7684\u662f\u503c\u4f1a\u8fdb\u884c\u503c\u7684\u6bd4\u8f83\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 package main import \"errors\" import \"fmt\" func main () { // errors.New\u8fd4\u56de\u7684interface\u5185\u90e8\u5b58\u50a8\u7684\u662f\u6307\u9488 a := errors . New ( \"same thing\" ); b := errors . New ( \"same thing\" ); if a == b { fmt . Printf ( \"same\" ) } else { fmt . Printf ( \"no\" ) } } type ErrNumber int64 func ( e ErrNumber ) Error () string { return \"error number\" } func main () { // \u6bd4\u8f83\u7684\u662fErrNumber\u7684\u503c\uff0c\u56e0\u4e3aErrNumber\u662f\u503c\u7c7b\u578b\u5b58\u50a8\u5728intreface\u4e2d var err1 error = ErrNumber ( 5 ) var err2 error = ErrNumber ( 5 ) if err1 == err2 { fmt . Printf ( \"same\" ) } else { fmt . Printf ( \"no\" ) } } Tip \u4e00\u65e6\u6211\u4eec\u4f7f\u7528\u6307\u9488\u4f5c\u4e3areceve\u5c31\u6807\u5fd7\u7740\u6211\u4eec\u53ea\u80fd\u5b58\u50a8\u6307\u9488\u5230interface\u4e2d\uff0c\u56e0\u6b64\u8fd9\u4e2a\u65f6\u5019\u6bd4\u8f83interface\u5c31\u603b\u662f\u6bd4\u8f83\u6307\u9488\u4e86\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u9884\u5148\u5728pacakge\u7ea7\u522b\u5b9a\u4e49\u597d\u4e00\u7cfb\u5217\u7684\u9519\u8bef\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u8fdb\u884c\u6bd4\u8f83\u4e86\uff0c\u56e0\u4e3a\u6b64\u65f6\u7684\u63a5\u53e3\u90fd\u662f\u6307\u5411\u76f8\u540c\u7684\u9519\u8bef\u53d8\u91cf \u5c0f\u5fc3error\u7684\u8d4b\u503c error\u662f\u4e2ainterface\uff0c\u4e00\u4e2ainterface\u901a\u5e38\u6765\u8bf4\u5185\u90e8\u6709\u4e24\u4e2a\u6307\u9488\uff0c\u4e00\u4e2a\u6307\u9488\u6307\u5411\u7c7b\u578b\uff0c\u4e00\u4e2a\u6307\u9488\u6307\u5411\u503c\uff0c\u5f53\u6211\u4eec\u5c06\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684error\u7c7b\u578b\u7684nil\u6307\u9488\u8d4b\u503c\u7ed9error\u7684\u65f6\u5019\uff0c \u5b9e\u9645\u4e0a\u5176\u7c7b\u578b\u90e8\u5206\u5df2\u7ecf\u4e0d\u662fnil\u4e86\uff0c\u53ea\u662f\u503c\u7684\u90e8\u5206\u662fnil\u800c\u5df2\u3002\u4e00\u4e2aintreface\u5982\u679c\u662fnil\u7684\u8bdd\uff0c\u5c31\u5fc5\u987b\u5185\u90e8\u7684\u6240\u6709\u6307\u9488\u90fd\u662fnil\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 type ErrNumber struct { number int64 } func ( e * ErrNumber ) Error () string { return \"error number\" } func main () { var err * ErrNumber = nil var err2 error = err // \u8fd9\u91cc\u4f1a\u8f93\u51fanot nil\uff0c\u56e0\u4e3aerr2\u7684\u7c7b\u578b\u90e8\u5206\u6307\u5411\u4e86ErrNumber\uff0c\u53ea\u662f\u503c\u7684\u90e8\u5206\u662fnil\u800c\u5df2\u3002 if err2 != nil { fmt . Printf ( \"not nil\" ) } else { fmt . Printf ( \"nil\" ) } } github.com/pkg/errors log\u548cerror\u662f\u9700\u8981\u4e00\u8d77\u5904\u7406\u7684\uff0cerror\u7684\u5730\u65b9\u90fd\u662f\u9700\u8981\u8bb0\u5f55\u65e5\u5fd7\u7684\uff0c\u8bb0\u5f55\u7684\u65e5\u5fd7\u9700\u8981\u80fd\u591f\u5e2e\u52a9\u6211\u4eecdebug\u95ee\u9898\u3002 \u9762\u5411\u5931\u8d25\u7f16\u7a0b\uff0c\u800c\u4e0d\u662f\u6210\u529f\uff0c\u56e0\u6b64Go\u6ca1\u6709\u5b9e\u73b0\u5f02\u5e38\u3002 \u9519\u8bef\u5904\u7406\u65b9\u5f0f\u7684\u8fdb\u5316\u4e4b\u8def 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 // Get fetches and unmarshals the JSON blob for the key k into v. // If the key is not found, Get reports a \"key not found\" error. func ( tx * Tx ) Get ( k string , v interface {}) ( err error ) // \u7b2c\u4e00\u79cd\u65b9\u5f0f\uff0c\u4e0d\u63a8\u8350\uff0c\u9519\u8bef\u4fe1\u606f\u4e0d\u591f\uff0c\u800c\u4e14\u4e5f\u5f3a\u8026\u5408\u9519\u8bef\u7c7b\u578b var ErrNotFound = errors . New ( \"taildb: key not found\" ) var val Value if err := tx . Get ( \"my-key\" , & val ); err == taildb . ErrNotFound { // no such key } else if err != nil { // something went very wrong } else { // use val } // \u7b2c\u4e8c\u79cd\u65b9\u5f0f\uff0c\u901a\u8fc7\u5b9a\u4e49\u9519\u8bef\u7c7b\u578b\uff0c\u53ef\u4ee5\u627f\u8f7d\u66f4\u591a\u7684\u9519\u8bef\u4e0a\u4e0b\u6587\uff0c\u4f46\u662f\u4ecd\u7136\u5b58\u5728\u95ee\u9898 // \u5f53\u6709\u4eba\u5728\u8fd9\u4e2a\u9519\u8bef\u7684\u57fa\u7840\u4e0a\u53c8\u6dfb\u52a0\u4e86\u9519\u8bef\uff0c\u90a3\u4e48\u5728\u5f97\u5230\u9519\u8bef\u7684\u65f6\u5019\u5c31\u4e0d\u77e5\u9053\u5230\u5e95\u662f\u4f55\u79cd\u7c7b\u578b\u4e86 type KeyNotFoundError struct { Name string } func ( e KeyNotFoundError ) Error () string { return fmt . Errorf ( \"taildb: key %q not found\" ) } var val Value err := tx . Get ( \"my-key\" , & val ) if err != nil { if _ , isNotFound := err .( taildb . KeyNotFoundError ); isNotFound { // no such key } else { // something went very wrong } } else { // use val } func accessCheck ( tx * taildb . Tx , key string ) error { var val Value if err := tx . Get ( key , & val ); err != nil { // \u9519\u8bef\u7c7b\u578b\u518d\u6b21\u88ab\u5c01\u88c5\u4e86\uff0c\u8c03\u7528accessCheck\u7684\u5730\u65b9\u5c31\u6ca1\u529e\u6cd5\u62ff\u5230\u771f\u5b9e\u7684\u9519\u8bef\u4e86\u3002 return fmt . Errorf ( \"access check: %v\" , err ) } if ! val . AccessGranted { return errAccessDenied } return nil } // \u7b2c\u4e09\u79cd\u65b9\u5f0f \u901a\u8fc7xerrors\u5e93\u53ef\u4ee5\u4fdd\u7559\u5e95\u5c42\u7684\u9519\u8bef\u7c7b\u578b\uff0c\u8fd9\u6837\u6211\u4eec\u5728\u8c03\u7528\u7684\u5730\u65b9\u5c31\u53ef\u4ee5\u8fdb\u884c\u8f6c\u6362\u4e86\u3002 // xerrors\u57281.13\u7684\u65f6\u5019\u5c06\u4f1a\u6210\u4e3a\u6807\u51c6\u5e93\u7684\u4e00\u90e8\u5206\uff0c\u5c4a\u65f6\u901a\u8fc7fmt.Errorf(\"%w\")\u540c\u6837\u53ef\u4ee5\u5b9e\u73b0\u76f8\u540c\u7684\u6548\u679c\u3002 if err := tx . Get ( key , & val ); err != nil { return xerrors . Errorf ( \"access check: %w\" , err ) } var val Value if err := accessCheck ( tx , \"my-key\" ); err != nil { var notFoundErr taildb . KeyNotFoundError if xerrors . As ( err , & notFoundErr ) { // no such key } else { // something went very wrong } } else { // use val } // \u7b2c\u56db\u79cd\u65b9\u5f0f\uff0c\u5bf9xerrors\u7684\u4f7f\u7528\u505a\u4e86\u4f18\u5316 var ErrNotFound = errors . New ( \"key not found\" ) Inside taildb we can write : func ( tx * Tx ) Get ( k string , v interface {}) ( err error ) { // ... if noSuchKey { return xerrors . Errorf ( \"taildb: %q: %w\" , k , ErrNotFound ) } } var val Value if err := accessCheck ( tx , \"my-key\" ); xerrors . Is ( err , taildb . ErrNotFound ) { // no such key } else if err != nil { // something went very wrong } else { // use val }","title":"Error Handing"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/course/Ultimate_Go_Programing/#pacakgeing","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 Kit Application \u251c\u2500\u2500 CONTRIBUTORS \u251c\u2500\u2500 cmd/ \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 internal/ \u251c\u2500\u2500 README.md \u2502 \u2514\u2500\u2500 platform/ \u251c\u2500\u2500 cfg/ \u2514\u2500\u2500 vendor/ \u251c\u2500\u2500 examples/ \u251c\u2500\u2500 log/ \u251c\u2500\u2500 pool/ \u251c\u2500\u2500 tcp/ \u251c\u2500\u2500 timezone/ \u251c\u2500\u2500 udp/ \u2514\u2500\u2500 web/ vendor/ \u6240\u6709\u4f9d\u8d56\u7684\u4e09\u65b9\u5e93\u7684\u5305\u90fd\u9700\u8981copy\u5230\u8fd9\u4e2a\u76ee\u5f55\u4e0b cmd \u6240\u6709\u7684\u9879\u76ee\u4e8c\u8fdb\u5236\u90fd\u653e\u5728\u8fd9\u4e2a\u76ee\u5f55\u4e0b\uff0c\u8fd9\u4e2a\u76ee\u5f55\u4e0b\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u4e8c\u8fdb\u5236\u7a0b\u5e8f\u6709\u5355\u72ec\u7684\u76ee\u5f55\u3002 internal \u9700\u8981\u88ab\u591a\u4e2a\u7a0b\u5e8f\u7528\u5230\u7684package\u5c5e\u4e8e\u8fd9\u4e2a\u76ee\u5f55\uff0c\u4f7f\u7528\u540d\u79f0 internal/ \u7684\u4e00\u4e2a\u597d\u5904\u662f\uff0c\u9879\u76ee\u4ece\u7f16\u8bd1\u5668\u4e2d\u83b7\u5f97\u4e86\u989d\u5916\u7684\u4fdd\u62a4\u3002 \u6b64\u9879\u76ee\u5916\u90e8\u7684\u4efb\u4f55\u8f6f\u4ef6\u5305\u90fd\u4e0d\u80fd\u4ece internal/ \u5185\u90e8\u5bfc\u5165\u8f6f\u4ef6\u5305\u3002\u56e0\u6b64\uff0c\u8fd9\u4e9b\u8f6f\u4ef6\u5305\u4ec5\u5728\u6b64\u9879\u76ee\u5185\u90e8\u3002 internal/platform \u57fa\u7840\u4f46\u7279\u5b9a\u4e8e\u9879\u76ee\u7684\u8f6f\u4ef6\u5305\u4f4d\u4e8e internal/platform/ \u6587\u4ef6\u5939\u4e2d\u3002\u8fd9\u4e9b\u8f6f\u4ef6\u5305\u5c06\u4e3a\u6570\u636e\u5e93\uff0c\u8eab\u4efd\u9a8c\u8bc1\u751a\u81f3\u90ae\u4ef6\u5904\u7406\u7b49\u63d0\u4f9b\u652f\u6301\u3002","title":"Pacakgeing"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/course/Ultimate_Go_Programing/#goroutines-and-concurrency","text":"Goroutines\u662f\u7531Go\u8c03\u5ea6\u7a0b\u5e8f\u521b\u5efa\u5e76\u72ec\u7acb\u8fd0\u884c\u7684\u51fd\u6570\u3002 Go\u8c03\u5ea6\u7a0b\u5e8f\u8d1f\u8d23goroutine\u7684\u7ba1\u7406\u548c\u6267\u884c\u3002 Goroutines\u7b80\u79f0\u4e3aG\u3001Goroutines\u8fd0\u884c\u5728\u903b\u8f91\u5904\u7406\u5668\u4e0a\uff0c\u7b80\u79f0\u4e3aP\uff0c\u800c\u8fd9\u4e2a\u903b\u8f91\u7684\u5904\u7406\u5668\u548cOS\u63d0\u4f9b\u7684Thread\u7ed1\u5b9a\u5728\u4e00\u8d77\uff0c\u8fd9\u4e2aThread\u7b80\u79f0\u4e3aM\uff0c\u800c\u8fd9\u4e2aThread\u5219\u6709OS\u8d1f\u8d23\u7ed1\u5b9a\u5230\u4e00\u4e2a\u5904\u7406\u5668\u4e0a\u8fd0\u884c\u3002 GODEBUG=schedtrace=1000 \u8f93\u51fago runtime\u7684\u8c03\u5ea6trace\u4fe1\u606f\uff0c\u6bcf\u96941000\u5fae\u5999 1 2 3 4 5 SCHED 0ms: gomaxprocs = 1 idleprocs = 0 threads = 2 spinningthreads = 0 idlethreads = 0 runqueue = 0 [ 1 ] SCHED 1009ms ( \u7a0b\u5e8f\u8fd0\u884c\u5230\u73b0\u5728\u7684\u65f6\u95f4 ) : gomaxprocs = 1 ( \u914d\u7f6e\u7684\u903b\u8f91\u5904\u7406\u5668\u6570\u91cf ) idleprocs = 0 ( \u6709\u591a\u5c11\u5904\u7406\u5668\u662f\u95f2\u7f6e\u7684 ) threads = 3 ( \u603b\u5171\u6709\u4e09\u4e2a\u7ebf\u7a0b\u8fd0\u884c\uff0c\u5176\u4e2d\u4e8c\u4e2a\u662f\u670d\u52a1go runtime\u7684\uff0c\u53e6\u5916\u4e00\u4e2a\u624d\u662f\u7ed1\u5b9a\u5230\u5904\u7406\u5668\u4e0a\u8fd0\u884c ) spinningthreads = 0 idlethreads = 1 ( \u6709\u591a\u5c11\u4e2a\u7ebf\u7a0b\u95f2\u7f6e ) runqueue = 0 ( \u6709\u591a\u5c11\u534f\u7a0b\u5728\u5168\u5c40\u8fd0\u884c\u961f\u5217 ) [ 9 ]( \u6709\u591a\u5c11\u4e2a\u534f\u7a0b\u5728\u672c\u5730\u8fd0\u884c\u961f\u5217 ) 1 2 3 4 5 6 7 8 9 10 SCHED 2002ms: gomaxprocs = 2 idleprocs = 0 threads = 4 spinningthreads = 0 idlethreads = 1 runqueue = 0 [ 4 4 ] 2002ms : \u5728\u7a0b\u5e8f\u8fd0\u884c\u4e862s\u5de6\u53f3\u8f93\u51fa\u7684trace\u4fe1\u606f gomaxprocs = 2 : \u914d\u7f6e\u4e862\u4e2a\u903b\u8f91\u5904\u7406\u5668 threads = 4 : \u6709\u56db\u4e2a\u7ebf\u7a0b\u5728\u8fd0\u884c\uff0c2\u4e2a\u670d\u52a1\u4e8ego runtime\uff0c\u8fd8\u67092\u4e2a\u670d\u52a1\u4e8e\u5904\u7406\u5668 idlethreads = 1 : \u67091\u4e2a\u7ebf\u7a0b\u662f\u95f2\u7f6e\u7684 idleprocs = 0 : \u67090\u4e2a\u5904\u7406\u5668\u662f\u5904\u4e8e\u95f2\u7f6e\u72b6\u6001 runqueue = 0 : \u67090\u4e2a\u534f\u7a0b\u5728\u5168\u5c40\u8fd0\u884c\u961f\u5217\u4e2d [ 4 4 ] : \u6bcf\u4e00\u4e2a\u5904\u7406\u5668\u4e0a\u7684\u672c\u5730\u8fd0\u884c\u961f\u5217\u4e2d\u90fd\u67094\u4e2a\u534f\u7a0b\u5728\u7b49\u5f85\u88ab\u8fd0\u884c\u3002 GODEBUG=schedtrace=1000,scheddetail=1 \u663e\u793a\u7b49\u8be6\u7ec6\u7684\u8c03\u5ea6trace\u4fe1\u606f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 SCHED 4028ms: gomaxprocs = 2 idleprocs = 0 threads = 4 spinningthreads = 0 idlethreads = 1 runqueue = 2 gcwaiting = 0 nmidlelocked = 0 stopwait = 0 sysmonwait = 0 P0: status = 1 schedtick = 10 syscalltick = 0 m = 3 runqsize = 3 gfreecnt = 0 P1: status = 1 schedtick = 10 syscalltick = 1 m = 2 runqsize = 3 gfreecnt = 0 M3: p = 0 curg = 4 mallocing = 0 throwing = 0 gcing = 0 locks = 0 dying = 0 helpgc = 0 spinning = 0 blocked = 0 lockedg = -1 M2: p = 1 ( \u8868\u793a\u8fd9\u4e2a\u7ebf\u7a0b\u7ed1\u5b9a\u5728\u54ea\u4e2a\u5904\u7406\u5668\u4e0a\u4e86 ) curg = 10 mallocing = 0 throwing = 0 gcing = 0 locks = 0 dying = 0 helpgc = 0 spinning = 0 blocked = 0 lockedg = -1 M1: p = -1 curg = -1 mallocing = 0 throwing = 0 gcing = 0 locks = 1 dying = 0 helpgc = 0 spinning = 0 blocked = 0 lockedg = -1 M0: p = -1 curg = -1 mallocing = 0 throwing = 0 gcing = 0 locks = 0 dying = 0 helpgc = 0 spinning = 0 blocked = 0 lockedg = -1 G1: status = 4 ( semacquire ) m = -1 lockedm = -1 G2: status = 4 ( force gc ( idle )) m = -1 lockedm = -1 G3: status = 4 ( GC sweep wait ) m = -1 lockedm = -1 G4: status = 2 ( sleep ) m = 3 lockedm = -1 G5: status = 1 ( sleep ) m = -1 lockedm = -1 G6: status = 1 ( stack growth ) m = -1 lockedm = -1 G7: status = 1 ( sleep ) m = -1 lockedm = -1 G8: status = 1 ( sleep ) m = -1 lockedm = -1 G9: status = 1 ( stack growth ) m = -1 lockedm = -1 G10: status = 2 ( sleep ) m = 2 ( \u8868\u793a\u8fd9\u4e2a\u534f\u7a0b\u6b64\u65f6\u5728\u54ea\u4e2a\u7ebf\u7a0b\u4e2d\u8fd0\u884c ) lockedm = -1 G11: status = 1 ( sleep ) m = -1 lockedm = -1 G12: status = 1 ( sleep ) m = -1 lockedm = -1 G13: status = 1 ( sleep ) m = -1 lockedm = -1 G17: status = 4 ( timer goroutine ( idle )) m = -1 lockedm = -1 P\u8868\u793a\u5904\u7406\u5668\u3001M\u8868\u793a\u7ebf\u7a0b\u3001G\u8868\u793a\u534f\u7a0b\u3002 1 2 3 4 5 6 7 8 9 10 status: http://golang.org/src/runtime/ Gidle, // 0 Grunnable, // 1 runnable and on a run queue Grunning, // 2 running Gsyscall, // 3 performing a syscall Gwaiting, // 4 waiting for the runtime Gmoribund_unused, // 5 currently unused, but hardcoded in gdb scripts Gdead, // 6 goroutine is dead Genqueue, // 7 only the Gscanenqueue is used Gcopystack, // 8 in this state when newstack is moving the stack GOMAXPROCS \u63a7\u5236go\u534f\u7a0b\u53ef\u4ee5\u5728\u591a\u5c11\u4e2acore\u4e0a\u8fd0\u884c\u3002 Concurrency Pattern Generator 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 c := boring ( \"boring!\" ) // Function returning a channel. for i := 0 ; i < 5 ; i ++ { fmt . Printf ( \"You say: %q\\n\" , <- c ) } fmt . Println ( \"You're boring; I'm leaving.\" ) func boring ( msg string ) <- chan string { // Returns receive-only channel of strings. c := make ( chan string ) go func () { // We launch the goroutine from inside the function. for i := 0 ; ; i ++ { c <- fmt . Sprintf ( \"%s %d\" , msg , i ) time . Sleep ( time . Duration ( rand . Intn ( 1e3 )) * time . Millisecond ) } }() return c // Return the channel to the caller. } Tip \u4e0a\u9762\u7684\u4ee3\u7801\u5b58\u5728\u534f\u7a0b\u6cc4\u6f0f\uff0c\u9700\u8981\u8003\u8651\u52a0\u5165context Fan in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 func merge ( cs ...<- chan int ) <- chan int { var wg sync . WaitGroup out := make ( chan int ) // Start an output goroutine for each input channel in cs. output // copies values from c to out until c is closed, then calls wg.Done. output := func ( c <- chan int ) { for n := range c { out <- n } wg . Done () } wg . Add ( len ( cs )) for _ , c := range cs { go output ( c ) } // Start a goroutine to close out once all the output goroutines are // done. This must start after the wg.Add call. go func () { wg . Wait () close ( out ) }() return out } Fan out 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 func fanOutSem () { emps := 2000 ch := make ( chan string , emps ) g := runtime . GOMAXPROCS ( 0 ) sem := make ( chan bool , g ) for e := 0 ; e < emps ; e ++ { go func ( emp int ) { sem <- true { time . Sleep ( time . Duration ( rand . Intn ( 200 )) * time . Millisecond ) ch <- \"paper\" fmt . Println ( \"employee : sent signal :\" , emp ) } <- sem }( e ) } for emps > 0 { p := <- ch emps -- fmt . Println ( p ) fmt . Println ( \"manager : recv'd signal :\" , emps ) } time . Sleep ( time . Second ) } Drop 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 func drop () { const cap = 100 ch := make ( chan string , cap ) go func () { for p := range ch { fmt . Println ( \"employee : recv'd signal :\" , p ) } }() const work = 2000 for w := 0 ; w < work ; w ++ { select { case ch <- \"paper\" : fmt . Println ( \"manager : sent signal :\" , w ) default : fmt . Println ( \"manager : dropped data :\" , w ) } } close ( ch ) fmt . Println ( \"manager : sent shutdown signal\" ) time . Sleep ( time . Second ) } pooling 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 func pooling () { ch := make ( chan string ) g := runtime . GOMAXPROCS ( 0 ) for e := 0 ; e < g ; e ++ { go func ( emp int ) { for p := range ch { fmt . Printf ( \"employee %d : recv'd signal : %s\\n\" , emp , p ) } fmt . Printf ( \"employee %d : recv'd shutdown signal\\n\" , emp ) }( e ) } const work = 100 for w := 0 ; w < work ; w ++ { ch <- \"paper\" fmt . Println ( \"manager : sent signal :\" , w ) } close ( ch ) fmt . Println ( \"manager : sent shutdown signal\" ) time . Sleep ( time . Second ) } Pipeline 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 func gen ( nums ... int ) <- chan int { out := make ( chan int ) go func () { for _ , n := range nums { out <- n } close ( out ) }() return out } func sq ( in <- chan int ) <- chan int { out := make ( chan int ) go func () { for n := range in { out <- n * n } close ( out ) }() return out } func main () { // Set up the pipeline and consume the output. for n := range sq ( sq ( gen ( 2 , 3 ))) { fmt . Println ( n ) // 16 then 81 } }","title":"Goroutines And Concurrency"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/course/Ultimate_Go_Programing/#data-race","text":"go build -race/go test -race \u5f00\u542frace\u68c0\u6d4b map\u9ed8\u8ba4\u81ea\u5e26race\u68c0\u6d4b \u5bf9\u4e8e\u63a5\u53e3\u7684read/write\u662f\u5b58\u5728data race\u7684\uff0c\u56e0\u4e3ainterface\u662f\u4e2a\u53cc\u5b57\u5927\u5c0f\u7684\u7c7b\u578b\uff0c\u8d4b\u503c\u7684\u65f6\u5019\u4e0d\u662f\u539f\u5b50\u7684\uff0c\u9700\u8981\u4fee\u6539\u6307\u5411\u7684\u7c7b\u578b\uff0c\u8fd8\u9700\u8981\u4fee\u6539\u6307\u5411\u7684\u503c\u3002","title":"Data Race"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/course/Ultimate_Go_Programing/#channels","text":"channels\u5141\u8bb8goroutines\u901a\u8fc7\u4fe1\u53f7\u8bed\u4e49\u76f8\u4e92\u901a\u4fe1\uff0cChannels\u901a\u8fc7\u4f7f\u7528\u53d1\u9001/\u63a5\u6536\u6570\u636e\u6216\u901a\u8fc7\u8bc6\u522b\u5404\u4e2aChannels\u4e0a\u7684\u72b6\u6001\u53d8\u5316\u6765\u5b8c\u6210\u6b64\u4fe1\u53f7\u3002 \u4e0d\u8981\u4ee5Channels\u662f\u961f\u5217\u7684\u601d\u60f3\u6765\u8bbe\u8ba1\u8f6f\u4ef6\uff0c\u800c\u8981\u4e13\u6ce8\u4e8e\u4fe1\u53f7\u8bed\u4e49\u6765\u7b80\u5316\u540c\u6b65\u3002 \u4f7f\u7528channels\u7f16\u6392\u548c\u534f\u8c03goroutine \u5173\u6ce8channels\u63d0\u4f9b\u7684\u4fe1\u4ee4\u8bed\u4e49\uff0c\u800c\u4e0d\u662f\u6570\u636e\u5171\u4eab\u3002 \u4fe1\u53f7\u5206\u4e3a\u6709\u6570\u636e\u548c\u65e0\u6570\u636e\u7684\u3002 \u5bf9\u4e8e\u4f7f\u7528channels\u6765\u4f5c\u4e3a\u6570\u636e\u5171\u4eab\u7684\u573a\u666f\u9700\u8981\u8d28\u7591 Unbuffered channels \u63a5\u6536\u53d1\u751f\u5728\u53d1\u9001\u4e4b\u524d 100%\u4fdd\u8bc1\u4fe1\u53f7\u5230\u8fbe \u5bf9\u4e8e\u4f55\u65f6\u6536\u5230\u4fe1\u53f7\u662f\u672a\u77e5\u7684\uff0c\u56e0\u4e3a\u4f60\u53d1\u9001\u7684\u65f6\u5019\uff0c\u63a5\u6536\u7aef\u53ef\u80fd\u8fd8\u6ca1\u6709\u5728\u63a5\u6536 Buffered channels \u53d1\u9001\u53d1\u751f\u5728\u63a5\u6536\u524d \u51cf\u5c11\u4e86\u4fe1\u53f7\u4e4b\u95f4\u7684\u963b\u585e\u5ef6\u8fdf\uff0c\u591a\u6b21\u4fe1\u53f7\u53d1\u9001\u4e4b\u95f4\u662f\u6ca1\u6709\u5ef6\u8fdf\u7684 \u4e0d\u4fdd\u8bc1\u4fe1\u53f7\u88ab\u63a5\u6536\u4e86\uff0c\u53ef\u80fd\u4e00\u76f4\u5728\u961f\u5217\u4e2d \u7f13\u51b2\u533a\u8d8a\u5927\uff0c\u4fdd\u8bc1\u8d8a\u5c11 \u7f13\u51b2\u533a\u4e3a1\u7684\u8bdd\uff0c\u53ef\u4ee5\u4fdd\u8bc1\u53ea\u6709\u4e00\u4e2a\u4fe1\u53f7\u88ab\u5ef6\u8fdf\u53d1\u9001\u3002 Closing channels Close\u53d1\u751f\u5728\u63a5\u6536\u524d \u662f\u4e00\u79cd\u6ca1\u6709\u6570\u636e\u7684\u4fe1\u53f7 \u7528\u4e8e\u53d6\u6d88\u6216\u8005\u662fdeadline\u662f\u6700\u4f73\u7684 NIL channels \u53d1\u9001\u548c\u63a5\u6536\u662f\u963b\u585e\u7684 \u5173\u95ed\u4e86\u4fe1\u53f7 \u975e\u5e38\u9002\u5408\u901f\u7387\u9650\u5236\u6216\u77ed\u671f\u505c\u5de5 \u5f80Closed\u7684channel\u53d1\u9001\u4fe1\u53f7\u4f1a\u5bfc\u81f4panic\uff0c\u4f46\u662f\u63a5\u6536\u662f\u53ef\u4ee5\u7684\uff0c\u4f1a\u7acb\u5373\u8fd4\u56de\u3002 close channel\u6216\u8005\u662f\u5bf9struct{}\u7c7b\u578b\u7684channel\u8fdb\u884csend\u5c5e\u4e8e\u65e0\u6570\u636e\u7684\u4fe1\u53f7\uff0c\u8fd9\u7c7b\u4fe1\u53f7\u901a\u5e38\u7528\u4e8estop\u3001cannecel\u7b49\u573a\u666f\u3002\u4e5f\u53ef\u4ee5\u4f7f\u7528Context Channels\u5185\u90e8\u662f\u4e00\u4e2ahchan\u7ed3\u6784\uff0c\u8fd9\u4e2a\u7ed3\u6784\u5927\u81f4\u5982\u4e0b: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 type hchan struct { buf CircularQueue sendx uint64 recvx uint64 lock mutex sendq sudog recvq sudog } type sudog struct { G Coroutine elem T ... } \u4e00\u4e2acircular queue\uff0cchan\u7684\u8bfb\u548c\u5199\u5b9e\u9645\u5c31\u662f\u64cd\u4f5csendx\u3001recvx\u3001chan\u672c\u8eab\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u6307\u5411hchan\u7684\u6307\u9488\u3002\u5f53chan\u662fbuffer\u7684channel\u7684\u65f6\u5019\u5199\u5165\u548c\u8bfb\u53d6\u5c31\u662f\u7b80\u5355\u7684\u52a0\u9501\u7136\u540e\u79fb\u52a8sendx\u3001recvx \u5f53chan\u4e3aunbuffer\u6216\u8005buffer\u6ee1\u7684\u65f6\u5019\u53d1\u751f\u5199\u5165\u6216\u8005buffer\u7a7a\u7684\u65f6\u5019\u53d1\u751f\u8bfb\u53d6\u7684\u65f6\u5019\u90fd\u4f1a\u5bfc\u81f4\u963b\u585e\uff0c\u8fd9\u4e2a\u65f6\u5019go runtime\u4f1a\u8c03\u7528gopark\u628a\u5f53\u524d\u534f\u7a0b\u7684\u72b6\u6001\u8bbe\u7f6e\u4e3awaitting\uff0c\u7136\u540e\u4ece\u5f53\u524d\u534f\u7a0b\u4e2d\u79fb\u9664 \u653e\u5165\u5168\u5c40\u961f\u5217\u4e2d\u3002\u7136\u540e\u8fd9\u4e2a\u534f\u7a0b\u6240\u5bf9\u5e94\u7684OS Thread\u4f1a\u7ee7\u7eed\u4ece\u53ef\u8fd0\u884c\u961f\u5217\u4e2d\u8fd0\u884c\u4e0b\u4e00\u4e2a\u534f\u7a0b\u3002\u7136\u540e\u628a\u5f53\u524d\u534f\u7a0b\u548c\u8981\u5199\u5165\u7684\u503c\u653e\u5165\u4e00\u4e2a\u7c7b\u4e3asudog\u7684send queue\u4e2d\u3002\u5f53\u6709receive\u4ece\u534f\u7a0b\u63a5\u6536\u7684\u65f6\u5019\u4f1a \u4ecesend queue\u4e2d\u51fa\u961f\uff0c\u628a\u503c\u653e\u5230circular queue\u4e2d\u6216\u8005\u5982\u679c\u662f\u4e00\u4e2aunbuffered\u7684chan\u5219\u76f4\u63a5\u8d4b\u503c\u7ed9receiver\uff0c\u6700\u540e\u8c03\u7528go runtime\u4e2d\u7684goready\u5c06\u5f53\u524d\u534f\u7a0b\u8bbe\u7f6e\u4e3arunable\u3002\u7b49\u5f85\u8c03\u5ea6\u5230OS Thread\u4e2d \u88ab\u8fd0\u884c\u3002\u540c\u6837\u5f53receive\u51fa\u73b0\u963b\u585e\u7684\u65f6\u5019\uff0c\u8fc7\u7a0b\u548csend\u7c7b\u4f3c\u3002","title":"Channels"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/course/Ultimate_Go_Programing/#context","text":"Context\u63d0\u4f9b\u4e86key-value\u7684\u6620\u5c04\uff0ckey\u548cvalue\u90fd\u662f interface{} \u7c7b\u578b\uff0ckey\u5fc5\u987b\u5177\u5907\u76f8\u7b49\u6027\u6bd4\u8f83\uff0c\u800cvalue\u5219\u5141\u8bb8\u88ab\u591a\u4e2a\u534f\u7a0b\u5b89\u5168\u7684\u4f7f\u7528\u3002 \u5230server\u7684\u8bf7\u6c42\u5e94\u8be5\u521b\u5efa\u4e00\u4e2aContext \u4eceServer\u4e2d\u53d1\u51fa\u7684\u8bf7\u6c42\u5e94\u8be5\u53ef\u4ee5\u63a5\u6536Context\u53c2\u6570 \u8fdb\u6765\u7684\u8bf7\u6c42\u548c\u51fa\u53bb\u7684\u8bf7\u6c42\u4e4b\u95f4\u5fc5\u987b\u80fd\u5426\u4f20\u9012Context \u53d6\u6d88Context\u540e\uff0c\u4ece\u8be5Context\u6d3e\u751f\u7684\u6240\u6709Context\u4e5f\u4f1a\u88ab\u53d6\u6d88 \u4e0d\u8981\u5c06\u4e0a\u4e0b\u6587\u5b58\u50a8\u5728\u7ed3\u6784\u7c7b\u578b\u4e2d\uff1b\u800c\u662f\u5c06\u4e0a\u4e0b\u6587\u660e\u786e\u4f20\u9012\u7ed9\u9700\u8981\u5b83\u7684\u6bcf\u4e2a\u51fd\u6570 \u5373\u4f7f\u51fd\u6570\u5141\u8bb8\uff0c\u4e5f\u4e0d\u8981\u4f20\u9012nil Context\u3002\u5982\u679c\u4e0d\u786e\u5b9a\u4f7f\u7528\u54ea\u4e2a\u4e0a\u4e0b\u6587\uff0c\u8bf7\u4f20\u9012context.TODO\u3002 \u4ec5\u5c06\u4e0a\u4e0b\u6587\u503c\u7528\u4e8e\u8bf7\u6c42\u8303\u56f4\u7684\u8fdb\u7a0b\u548cAPI\u95f4\u7684\u4f20\u9012\uff0c\u800c\u4e0d\u7528\u4e8e\u5c06\u53ef\u9009\u53c2\u6570\u4f20\u9012\u7ed9\u51fd\u6570\u3002 \u53ef\u4ee5\u5c06\u76f8\u540c\u7684\u4e0a\u4e0b\u6587\u4f20\u9012\u7ed9\u5728\u4e0d\u540cgoroutine\u4e2d\u8fd0\u884c\u7684\u51fd\u6570\u3002\u4e0a\u4e0b\u6587\u5bf9\u4e8e\u7531\u591a\u4e2agoroutine\u540c\u65f6\u4f7f\u7528\u662f\u5b89\u5168\u7684\u3002","title":"Context"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/course/Ultimate_Go_Programing/#testing","text":"\u4f7f\u7528httptest\u6765\u505amockClient 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 func init () { handlers . Routes () } // TestSendJSON testing the sendjson internal endpoint. func TestSendJSON ( t * testing . T ) { url := \"/sendjson\" statusCode := 200 t . Log ( \"Given the need to test the SendJSON endpoint.\" ) { r := httptest . NewRequest ( \"GET\" , url , nil ) w := httptest . NewRecorder () http . DefaultServeMux . ServeHTTP ( w , r ) testID := 0 t . Logf ( \"\\tTest %d:\\tWhen checking %q for status code %d\" , testID , url , statusCode ) { if w . Code != 200 { t . Fatalf ( \"\\t%s\\tTest %d:\\tShould receive a status code of %d for the response. Received[%d].\" , failed , testID , statusCode , w . Code ) } t . Logf ( \"\\t%s\\tTest %d:\\tShould receive a status code of %d for the response.\" , succeed , testID , statusCode ) var u struct { Name string Email string } if err := json . NewDecoder ( w . Body ). Decode ( & u ); err != nil { t . Fatalf ( \"\\t%s\\tTest %d:\\tShould be able to decode the response.\" , failed , testID ) } t . Logf ( \"\\t%s\\tTest %d:\\tShould be able to decode the response.\" , succeed , testID ) if u . Name == \"Bill\" { t . Logf ( \"\\t%s\\tTest %d:\\tShould have \\\"Bill\\\" for Name in the response.\" , succeed , testID ) } else { t . Errorf ( \"\\t%s\\tTest %d:\\tShould have \\\"Bill\\\" for Name in the response : %q\" , failed , testID , u . Name ) } if u . Email == \"bill@ardanlabs.com\" { t . Logf ( \"\\t%s\\tTest %d:\\tShould have \\\"bill@ardanlabs.com\\\" for Email in the response.\" , succeed , testID ) } else { t . Errorf ( \"\\t%s\\tTest %d:\\tShould have \\\"bill@ardanlabs.com\\\" for Email in the response : %q\" , failed , testID , u . Email ) } } } } \u4f7f\u7528httptest\u6765\u505amockServer 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 // mockServer returns a pointer to a server to handle the mock get call. func mockServer () * httptest . Server { f := func ( w http . ResponseWriter , r * http . Request ) { w . WriteHeader ( 200 ) w . Header (). Set ( \"Content-Type\" , \"application/xml\" ) fmt . Fprintln ( w , feed ) } return httptest . NewServer ( http . HandlerFunc ( f )) } // TestDownload validates the http Get function can download content and // the content can be unmarshaled and clean. func TestDownload ( t * testing . T ) { statusCode := http . StatusOK server := mockServer () defer server . Close () t . Log ( \"Given the need to test downloading content.\" ) { testID := 0 t . Logf ( \"\\tTest %d:\\tWhen checking %q for status code %d\" , testID , server . URL , statusCode ) { resp , err := http . Get ( server . URL ) if err != nil { t . Fatalf ( \"\\t%s\\tTest %d:\\tShould be able to make the Get call : %v\" , failed , testID , err ) } t . Logf ( \"\\t%s\\tTest %d:\\tShould be able to make the Get call.\" , succeed , testID ) defer resp . Body . Close () if resp . StatusCode != statusCode { t . Fatalf ( \"\\t%s\\tTest %d:\\tShould receive a %d status code : %v\" , failed , testID , statusCode , resp . StatusCode ) } t . Logf ( \"\\t%s\\tTest %d:\\tShould receive a %d status code.\" , succeed , testID , statusCode ) var d Document if err := xml . NewDecoder ( resp . Body ). Decode ( & d ); err != nil { t . Fatalf ( \"\\t%s\\tTest %d:\\tShould be able to unmarshal the response : %v\" , failed , testID , err ) } t . Logf ( \"\\t%s\\tTest %d:\\tShould be able to unmarshal the response.\" , succeed , testID ) if len ( d . Channel . Items ) == 1 { t . Logf ( \"\\t%s\\tTest %d:\\tShould have 1 item in the feed.\" , succeed , testID ) } else { t . Errorf ( \"\\t%s\\tTest %d:\\tShould have 1 item in the feed : %d\" , failed , testID , len ( d . Channel . Items )) } } } }","title":"Testing"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/course/Ultimate_Go_Programing/#compile-args","text":"1 2 3 4 5 6 7 8 9 10 11 panic : Aw , snap goroutine 1 [ running ]: main . main () / home / johnpili / go / src / company . com / event - document - pusher / main . go : 42 + 0x3e > go build - trimpath panic : Aw , snap goroutine 1 [ running ]: main . main () src / company . com / event - document - pusher / main . go : 42 + 0x3e","title":"Compile args"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/course/Ultimate_Go_Programing/#reference","text":"Contiguous stacks How Stacks are Handled in Go gc Go Escape Analysis Flaws","title":"Reference"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/course/Ultimate_Go_Programing/#reading-todo","text":"https://brunocalza.me/how-buffer-pool-works-an-implementation-in-go/ https://www.youtube.com/watch?v=f6kdp27TYZs https://talks.golang.org/2013/advconc.slide#1 https://steveazz.xyz/blog/go-performance-tools-cheat-sheet/","title":"Reading TODO"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/course/%E4%BF%A1%E6%81%AF%E8%AE%BA/note/","text":"\u4fe1\u606f\u7684\u4f5c\u7528? \u4ec0\u4e48\u662f\u7f6e\u4fe1\u5ea6? \u4ec0\u4e48\u662f\u5965\u5361\u59c6\u5243\u5200\u539f\u5219? \u4fe1\u606f\u5982\u4f55\u91cf\u5316\u5ea6\u91cf? \u4ec0\u4e48\u662f\u4fe1\u606f\u7684\u5197\u4f59\u5ea6 \u4ec0\u4e48\u662f\u4fe1\u606f\u7684\u7b49\u4ef7\u6027? \u4ec0\u4e48\u662f\u4fe1\u606f\u589e\u91cf? \u4fe1\u606f\u538b\u6d4b\u6bd4\u3001\u5931\u771f\u7387?","title":"Note"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/READMEN/","text":"\u81ea\u7136\u62fc\u8bfb \u4e00\u8f85\u4e00\u5143\u3001\u524d\u8f85\u540e\u5143 Aa \\\u00e6\\ \u5143\u97f3 \u4e91\u97f3\u5b57\u6bcd: Aa\u3001Ee\u3001li\u3001Oo\u3001Uu Bb \\b\\ Cc \\k\\ \\s\\ \u6709\u4e24\u4e2a\u53d1\u97f3 cap \\c\u00e6p\\ cat \\c\u00e6t\\ can \\c\u00e6n\\ \u5f53\u540e\u9762\u63a5\u7684\u662fe\u3001i\u3001y\u7684\u65f6\u5019\uff0c\u53d1\\s\\ cell \\sel\\ cyber \\sa\u026ab\u0259r\\ city \\s\u026ati\\ candy \\k\u00e6ndi\\ Dd \\d\\ dad \\d\u00e6d\\ damn\\d\u00e6m\\ dance \\d\u00e6ns\\ cad \\k\u00e6d\\ Ee \\e\\ \u5143\u97f3 bed \\bed\\ beg \\beg\\ det \\det\\ Ed \\ed\\ \u4e0d\u53ef\u4ee5\u62fc\u8bfb\u3001\u8f85\u97f3\u5728\u524d\u3001\u4e91\u97f3\u5728\u540e\u624d\u53ef\u4ee5\u62fc\u8bfb Ff \\f\\ fat \\f\u00e6t\\ fend \\fend\\ fans \\f\u00e6ns\\ fax \\f\u00e6ks\\ Gg \\g\\ gab \\g\u00e6b\\ get \\g\u00e6t\\ gas \\g\u00e6s\\ Hh \\h\\ hat \\h\u00e6t\\ hand \\h\u00e6nd\\ hen \\hen\\ has \\h\u00e6z\\ li \\I\\ \u5143\u97f3 dig \\dIg\\ sit \\sIt\\ fit \\fIt\\ if \\If\\ Jj \\d\u0292\\ jam \\d\u0292\u00e6m\\ jack \\d\u0292\u00e6k\\ jelly \\d\u0292elI\\ jill \\d\u0292I\\ Kk \\k\\ kathy \\k\u00e6..\\ kettle \\ketl\\ kiss \\kis\\ kick \\kIk\\ ck\u5728\u4e00\u8d77\u7684\u65f6\u5019\u53d1\u97f3\\k\\ Ll \\l\\ leg \\leg\\ lips \\lIps\\ flag \\fl\u00e6g\\ last \\ll\u00e6\\ \u6ca1\u6709\u4e91\u97f3\u5b57\u6bcd\u7684\u65f6\u5019\u7684\u53d1\u97f3 xx Jill bell fell girl Mm \\m\\ math \\m\u00e6e\\ mem \\men\\ map \\m\u00e6p\\ miss \\mis\\ Nn \\n\\ net \\net\\ neck \\nek\\ ck\u7ec4\u5408\u53d1\u97f3\\k\\ Nick \\nik\\ nill \\nil\\ \u6ca1\u6709\u4e91\u97f3\u5b57\u6bcd\u7684\u65f6\u5019\u7684\u53d1\u97f3 xx man \\m\u00e6n\\ hen \\hen\\ ben \\ben\\ dance \\d\u00e6ns\\ Oo \\\u028a\\ \u5143\u97f3 on \u65e0\u6cd5\u62fc\u8bfb Pp \\p\\ pants \\p\u00e6nts\\ pig \\pig\\ pop \\p\u028ap\\ pen \\pen\\ Qq \\kw\\ \u4e0d\u5355\u72ec\u51fa\u73b0\u4e00\u822c\u540e\u9762\u63a5u -> \\kw\\ quiz \\kwiz\\ quick \\kwik\\ quit \\kwit\\ question \\kwes...\\ Rr \\r\\ rock \\r\u028ak\\ rat \\r\u00e6t\\ red \\red\\ rabbit \\r\u00e6bit\\ \u4e24\u4e2a\u76f8\u540c\u7684\u8f85\u97f3\u5728\u4e00\u8d77\uff0c\u53ea\u53d1\u4e00\u4e2a\u97f3 \u7ec3\u4e60 rob quell object frog map grip horrid jog Ss \\s\\ sam \\s\u00e6m\\ sit \\sit\\ set \\set\\ soft \\s\u028aft\\ Tt \\t\\ tag top ten pot Uu \\^\\ \u5143\u97f3 but cup fun Vv \\v\\ very vivid van vomit \\'v\u028amit\\ voice venuse \u5728\u4e00\u4e2a\u6b21\u62fc\u4e86\u4e24\u6b21\u6216\u4ee5\u4e0a\u65f6\uff0c\u9700\u8981\u51fa\u73b0\u91cd\u8bfb \u7ec3\u4e60: rest public hump hug valid self tent optic Ww \\w\\ wet watch \u53d1\u97f3\u6bd4\u8f83\u7279\u6b8a\uff0ct\u6ca1\u6709\u53d1\u97f3 win where h\u6ca1\u6709\u53d1\u97f3 Xx \\ks\\ ax box fox exit Yy \\j\\ \\I\\ \u534a\u5143\u97f3\uff0c\u53ef\u4ee5\u662f\u8f85\u97f3\u3001\u4e5f\u53ef\u4ee5\u662f\u5143\u97f3 yes yam yet \u7ed3\u5c3e\u7684\u65f6\u5019\u53d1\u5143\u97f3 yellow happy family city Zz \\z\\ zip zest zigzag quiz \u7ec3\u4e60: rust sex mix vanity muggy Lily fix liquid \u5b57\u6bcd\u7ec4\u5408: ea \\i:\\ ee \\i:\\ tea clean eat sweet beef feet sleep deed vs did seat vs sit seek vs sick ir \\\u025c\u02d0\\ er \\\u025c\\ (\u4e00\u822c\u5728\u5355\u8bcd\u5c3e) sir bird firm girl dancer cleaner sister summer \\a:\\ ar |^| hard farm bar mark cart vs cut barge vs budge \u7ec3\u4e60: feel farmer girder tariff neat ugly aw, au \\\u0254\u02d0\\ law raw paw saw daughter saucer er\u53d1\u97f3\\\u025c\\ because ght \\t\\ bought fight brought right oo \u5728\u5b57\u6bcdk\\d\u4e4b\u524d \\\u028a\\ look book good wood \u4f8b\u5916: food \\fu: d\\ oo \u5728\u5b57\u6bcdt\u524d \\u:\\ tooth boot shoot loot \u4f8b\u5916: foot \\f\u028at\\ \u5176\u4ed6\u65e0\u6cd5\u5f52\u7c7b\u7684: zoo too oops ea \\e\\ head bread weather dead \u7ec3\u4e60: jean hook bawl goose caught opt cook audibility a-e \\e\u026a\\ \u5143 + \u8f85 + e (\u5143\u97f3\u5b57\u6bcd\u53d1\u81ea\u5df1\u7684\u672c\u97f3\u3001e\u4e0d\u53d1\u97f3) take name late face table plane shave orange ay \\e\u026a\\ day way pray say ey \\e\u026a\\ grey they hey eyrir \u4f8b\u5916: \\i:\\ key monkey \\e\u026a\\: 1. a-e 2. ey 3. ay i-e \\a\u026a\\ bike nice kite fine white smile slide crime ie \\a\u026a\\ tie lie pie die wh \\w\\ \u6216\u8005 \\h\\ what why o-e \\\u0259\u028a\\ note hope wrote phone oa \\\u0259\u028a\\ boat goat coat float ow \\\u0259\u028a\\ yellow follow slow window ph \\f\\ photo phrase graph physical \u7206\u7834\u97f3\u89c4\u5219 /s/\u548c/t/\u5728\u4e00\u8d77\u7684\u65f6\u5019/t/\u4f1a\u53d8\u6210/d/ /s/\u548c/p/\u5728\u4e00\u8d77\u7684\u65f6\u5019/p/\u4f1a\u53d8\u6210/b/ Excuse me excuse \u539f\u8c05 \u5bf9\u4e0d\u8d77\u3001\u6253\u6270 \u501f\u8fc7\u4e00\u4e0b \u5931\u966a\u4e86 \u9ebb\u70e6\u518d\u8bf4\u4e00\u904d\u3001Pardon \u4e5f\u6709\u8fd9\u4e2a\u610f\u601d me \u5bbe\u683c\u4e2d\u7684\u6211 \u4e3a\u4ec0\u4e48\u82f1\u6587\u4f1a\u6709\u4e3b\u683c\u548c\u5bbe\u683c\u4e4b\u5206? \u7b80\u5355\u53e5\u7684\u53e5\u578b\u7ed3\u6784: \u4e3b + \u8c13 \u4e3b + \u8c13 + \u5bbe I love you(\u627f\u63a5\u52a8\u8bcd) \u4e3b + \u8c13 + \u5bbe + \u5bbe \u4e3b + \u8c13 + \u5bbe + \u5bbe\u8865 \u4e3b + \u7cfb + \u8868 she is beautiful \u8868\u793a\u4e3b\u8bed\u72b6\u6001\u548c\u7279\u5f81(\u8868\u8bed) \u4e3b\u683c I you she he it \u5bbe\u683c me you her him it yes yes \u662f\u7684 yes? \u4ec0\u4e48\u4e8b? this this book that student your your friend your name handbag hand bag pardon \u539f\u8c05\u3001\u518d\u8bf4\u4e00\u904d Sorry? Excuse me? Say it again it \u4ee3\u66ff\u7269\u4f53\u3001\u5730\u65b9\u3001\u5929\u6c14 It is a desk It is a Beijing It is fine today thank you Thanks! Thanks a lot! very much \u975e\u5e38\u5730 I love you very much \u800c\u4e0d\u662f I very love you Thank you very much \u800c\u4e0d\u662f very thank you \u4e00\u822c\u7591\u95ee\u53e5: \u529f\u80fd: \u7528\u4e8e\u8be2\u95ee \u6784\u6210: be\u52a8\u8bcd(am\u3001is\u3001are)\u7f6e\u4e8e\u53e5\u524d I am nice -> Am i nice? You are my friend -> Are you my friend? She is prety -> Is she pretty? Is this your...? pen pencil book an English book a book store book one\u3001book two\u3001book three\u3001book four (\u4e00\u518c\u3001\u4e8c\u518c..) watch look at my watch coat \u5916\u5957 dress \u8fde\u8863\u88d9 skirt \u77ed\u88d9 car bus coach house \u522b\u5885 flat \u516c\u5bd3\u697c apartment 3/4 unbrella please here \u8fd9\u91cc (\u526f\u8bcd) there \u90a3\u91cc where \u54ea\u91cc my \u6211\u7684 \u5f62\u5bb9\u6027\u7269\u4e3b\u4ee3\u8bcd ticket number units one No. one => number one sir \u5148\u751f\u3001\u5bf9\u7537\u6027\u7684\u5c0a\u79f0 cloakroom \u8863\u5e3d\u5b58\u653e\u5904 \u540d\u8bcd + please 1. \u70b9\u9910\u65f6 A roast duck, please 2. \u8d2d\u7269\u65f6 This shirt, please 3. \u8fdb\u7ad9\u65f6 Your ID card, please Here is my ticket (\u4e60\u60ef\u628ahere\u63d0\u524d) \u7b49\u540c\u4e8e My ticket is here \u5012\u88c5: 1. \u4e3b\u8bed\u662f\u540d\u8bcd\uff0c\u5012\u88c5\u4e3a here + \u7cfb\u52a8\u8bcd/\u5b9e\u4e49\u52a8\u8bcd + n \u6bd4\u5982 here is my ticket 2. \u4e3b\u8bed\u662f\u4ee3\u8bcd \u4e0d\u5b8c\u5168\u5012\u88c5 Here + \u4ee3\u8bcd + \u7cfb\u52a8\u8bcd/\u5b9e\u4e49\u52a8\u8bcd \u6bd4\u5982 here we go \u5426\u5b9a\u53e5: is not/am not/are not/isn't/m not(am not(\u7f29\u5199)/aren't \u7701\u7565\u5f62\u5f0f\u7684\u7948\u4f7f\u53e5: * My coat and my umbrella please => Give me my coat and my umbrella, please \u53e3\u8bed\u4e2d\uff0c\u5728\u8bed\u5883\u6bd4\u8f83\u660e\u786e\u7684\u60c5\u51b5\u4e0b\uff0c\u901a\u5e38\u53ef\u4ee5\u7701\u7565\u52a8\u8bcd\u548c\u95f4\u63a5\u5bbe\u8bed\uff0c\u6bd4\u5982: (Show me) your Ticket please (Show me) Passport, please \u76f4\u63a5\u5bbe\u8bed\u662f\u8c13\u8bed\u52a8\u8bcd\u7684\u627f\u53d7\u8005\uff0c\u95f4\u63a5\u5bbe\u8bed\u8868\u793a\u8c13\u8bed\u52a8\u4f5c\u7684\u65b9\u5411\uff08\u5bf9\u8c01\u505a\uff09\u6216\u52a8\u4f5c\u7684\u76ee\u6807\uff08\u4e3a\u8c01\u505a\uff09\uff0c\u95f4\u63a5\u5bbe\u8bed\u7d27\u63a5\u5728\u8c13\u8bed\u52a8\u8bcd\u540e\uff0c\u4f46\u5b83\u4e0d\u80fd\u5355\u72ec\u5b58\u5728\u3002 Here's your umbrella and your coat Here is my ticket \u6b63\u5e38\u8bed\u5e8f My ticket is here Here's \u662fHere is\u7684\u7f29\u5199\u3001\u8fd9\u4e2a\u53e5\u5b50\u672c\u8eab\u4e5f\u662f\u5012\u88c5\u7ed3\u6784\uff0c\u539f\u53e5\u5b50\u5e94\u8be5\u4e3ayour umbrella and your coat is here \u975e\u7f29\u5199\u5f62\u5f0f\u5e38\u7528\u4e8e\u6bd4\u8f83\u6b63\u5f0f\u7684\u573a\u5408 Sir \u82f1\u8bed\u4e2d\u4e0d\u76f8\u8bc6\u7684\u7537\u5b50\u3001\u5e74\u957f\u8005\u3001\u6216\u4e0a\u7ea7\u7684\u5c0a\u79f0 What can I do for you, sir? Thany you sir Sir\u901a\u5e38\u7528\u4e8e\u6b63\u5f0f\u4fe1\u51fd\u7684\u5f00\u5934: Dear sir Dear sirs \u4e3b\u683c \u5bbe\u683c \u5f62\u5bb9\u8bcd\u6027\u7269\u4e3b\u4ee3\u8bcd(\u6240\u6709\u683c) \u540d\u8bcd\u6027\u7269\u4e3b\u4ee3\u8bcd I me my mine you you your yours he him his his she her her hers it it its its they them their theirs we us our \u6240\u6709\u683c\u4fee\u9970\u4e00\u4e2a\u540d\u8bcd\uff08\u4eba\u6216\u7269\uff09\uff0c\u5fc5\u987b\u4e0e\u4eba\u6216\u7269\u4e00\u8d77 \u2014\u2014 \u4ee5\u8bcd\u7ec4\u7684\u65b9\u5f0f\u51fa\u73b0\u5728\u53e5\u5b50\u4e2d\u3002\u6240\u6709\u683c\u5355\u72ec\u51fa\u73b0\u5728\u53e5\u5b50\u4e2d\uff0c\u662f\u9519\u8bef\u7684\uff0c\u8868\u8fbe\u7684\u53e5\u610f\u4e0d\u5b8c\u6574\u3002 This is my book \u5f53\u901a\u8fc7\u4e0a\u4e0b\u6587\u53ef\u4ee5\uff0c\u53ef\u4ee5\u63a8\u6d4b\u51fa\u6240\u6709\u683c\u540e\u9762\u63a5\u7684\u90a3\u4e2a\u540d\u8bcd\u65f6\uff0c\u4e2d\u6587\u76f4\u63a5\u7701\u7565\u6389\u3002\u53ef\u662f\u82f1\u6587\u5fc5\u987b\u8981\u8f6c\u6362\u6210\u540d\u8bcd\u6027\u6240\u6709\u683c\u3002 This is mine \u540d\u8bcd\u6027\u6240\u6709\u683c\uff0c\u867d\u7136\u6ca1\u6709\u51fa\u73b0 \u4eba\u6216\u7269 \uff0c\u4f46\u662f\u4eba\u6216\u7269\uff0c\u5df2\u7ecf\u6697\u6697\u542b\u5728\u5176\u4e2d\u4e86\u3002 Q: Thank you for your help A: Not at all \u4e0d\u5ba2\u6c14\u3001\u4e0d\u7528\u978b The same to you \u4f60\u4e5f\u662f suit school primary school middle school university teacher Mr Wang/Miss Wang son daughter \u4e00\u822c\u7591\u95ee\u53e5\u53e5\u7684\u5426\u5b9a\u5f62\u5f0f: 1. \u628anot\u653e\u5728\u4e00\u822c\u7591\u95ee\u53e5\u7684\u4e3b\u8bed\u4e4b\u540e\uff0c\u5373\u6784\u6210\u4e00\u822c\u7591\u95ee\u53e5\u7684\u5426\u5b9a\u7ed3\u6784 2. \u5982\u679c\u60f3\u7528not\u7684\u7b80\u7565\u5f0f n't\uff0c\u5219\u9700\u8981\u5c06n't\u548c\u4e00\u822c\u7591\u95ee\u53e5\u53e5\u9996\u7684be\u3001have\u3001\u52a9\u52a8\u8bcd\u3001\u6216\u60c5\u6001\u52a8\u8bcd\u5199\u5728\u4e00\u8d77 Is she not a student? (Isn't she a student?) Will they not come? (Won't they come?) Have you not any sisters? (Haven't you any sisters?) Can she not do it? (Can't she do it?) Lesson5 Nice to meet you Mr. \u5148\u751f Miss \u672a\u5a5a\u5973\u6027 Mrs \u5df2\u5a5a\u5973\u6027 Ms [m\u026az] .\u5973\u58eb,\u5a5a\u5426\u4e0d\u77e5.\u65e0\u5168\u62fc.\uff08\u4ee3\u66ffMiss\u6216Mrs\u7684\u5b57,\u4e0d\u6307\u660e\u79f0\u547c\u4eba\u7684\u5a5a\u59fb\u72b6\u51b5\uff09 Miss [m\u026as] \u5c0f\u59d0,\u672a\u5a5a. Mr \u5148\u751f\uff0c\u7528\u4e8e\u7537\u58eb\u59d3\u4e4b\u524d\uff0c\u4e0d\u80fd\u5355\u72ec\u4f7f\u7528 Mrs \u592a\u592a Sir \u4e00\u822c\u5355\u72ec\u4f7f\u7528\uff0c\u662f\u5bf9\u957f\u8005\u3001\u4e0a\u53f8\u6216\u8005\u7537\u987e\u5ba2\u7684\u5c0a\u79f0 Good \u597d well \u8eab\u4f53\u597d morning new \u65b0\u7684 old \u65e7\u7684 student \u5b66\u751f \u6d4a\u5316: s + \u6e05\u8f85\u97f3(/p/\u3001/t/\u3001/g/) \u8bfb\u4f5c\u6d4a\u8f85\u97f3(/b/\u3001/d/\u3001/g/) sport /p/ /b/ start /t/ /d/ skit /k/ /g/ nice \u672b\u5c3e\u7684e\u4e0d\u53d1\u97f3\u3001\u524d\u9762\u7684\u539f\u56e0\u53d1\u81ea\u5df1\u7684\u97f3 bike kite fine take name fate nose hope meet \u8fd9\u662f\u52a8\u8bcd\uff0c\u7528\u4f5c\u8c13\u8bed\uff0c\u540e\u9762\u63a5\u5bbe\u8bed meet you\\him]her\\me \u5bbe\u683c\u5f62\u5f0f too \u4e5f(\u80af\u5b9a\u53e5\u3001\u7591\u95ee\u53e5\u5c3e) I love you too Do you love me too? \u51a0\u8bcd: \u5e3d\u5b50\uff0c\u5e26\u5728\u540d\u8bcd\u4e0a\u7684\u5e3d\u5b50\uff0c\u6ca1\u6709\u7279\u6b8a\u60c5\u51b5\u4e0b\u4e0d\u80fd\u6458\u5e3d\u5b50 a nice car a big house a good name \u51a0\u8bcd: a\u3001an\u3001the \u5b9a\u51a0\u8bcd: the \u786e\u5b9a\u7684\u3001\u77e5\u9053\u7684 \u4e0d\u5b9a\u51a0\u8bcd: a/an \u4e0d\u786e\u5b9a\u7684\u3001\u4e0d\u77e5\u9053\u7684 There is a monk The monk is Jack a/an\u7684\u533a\u522b: an + \u5143\u97f3\u53d1\u97f3\u5f00\u5934\u7684\u5355\u8bcd\u3001\u5176\u4f59\u7528a an egg an orange an hour \u7279\u6b8a\u60c5\u51b5: \u56fd\u5bb6\u3001\u56fd\u7c4d\u3001\u4eba\u540d\u3001\u57ce\u5e02\u540d Q: Yes, thank you A: You're welcome \u4e5f: * also \u4e5f\uff0c\u800c\u4e14\uff0c\u5e38\u7f6e\u4e8e\u53e5\u4e2d * too \u4e5f\uff0c\u4e00\u822c\u7f6e\u4e8e\u53e5\u5c3e * either \u4e5f(\u7528\u4e8e\u5426\u5b9a\u53e5\u6216\u5426\u5b9a\u8bcd\u7ec4) Lesson6 What make is it? make \u724c\u5b50 What make is __? What make is your car? Lession7 Are you a teacher? nationality station happy keyboard operator \u64cd\u4f5c\u4eba\u5458 -or -er director \u5bfc\u6f14 engineer \u5de5\u7a0b\u5e08 I am Chinese He is in England We are in Begjing Q:What nationality are you? What nationality are you too? A: I'am Chinese Q: What's your job? A: I'm teacher I have no job I have no time for/to .... \u201cIf you say that you have no time for a person or thing, you mean you do not like them or approve of them. \u201d I have no time for/to ... \u6539\u6210 I don\u2019t have much time for/to ... \u66f4\u597d\uff0c\u66f4\u793c\u8c8c I have no time \u4e0d\u80fd\u76f4\u63a5\u8fd9\u4e48\u7528\uff0c\u540e\u9762\u8981\u52a0\u8bf4\u660e\uff0c\u6bd4\u5982 I have no time to talk about those issues \u4e00\u822c\u7591\u95ee\u53e5: is/am/are \u7f6e\u4e8e\u53e5\u524d Are you French? You are a teacher She is a doctor Is she a doctor? He is a student Is he a student? This is my teacher Is this my teacher? This is your car Is this your car? \u7279\u6b8a\u7591\u95ee\u53e5: \u4ec0\u4e48\u3001\u8c01\u3001\u8c01\u7684\u3001\u54ea\u4e2a.... \u4f60\u7684\u5de5\u4f5c\u662f\u4ec0\u4e48? What is your job? 1. \u627e\u5230\u80af\u5b9a\u53e5\u88ab\u63d0\u95ee\u7684\u90e8\u5206 2. \u6839\u636e\u53e5\u610f\u9009\u62e9\u6700\u5408\u9002\u7684\u7591\u95ee\u8bcd 3. \u5c06\u7591\u95ee\u8bcd\u8bbe\u7f6e\u5728\u53e5\u9996 4. \u5982\u679c\u662f\u9488\u5bf9\u4e3b\u8bed\u63d0\u95ee\uff0c\u52a8\u8bcd\u653e\u5728\u4e3b\u8bed\u524d\uff0c\u5426\u5219\u4e0d\u53d8 Lesson8 What's your job taxi cap \u7684\u58eb airhostess \u7a7a\u59d0 air airline \u822a\u7ebf\u3001\u822a\u7a7a\u516c\u53f8 host \u4e3b\u4eba -ess \u8868\u793a\u5973\u6027\u7684\u540e\u7f00 waiter \u7537\u670d\u52a1\u5458 waiteress \u5973\u670d\u52a1\u5458 tiger tigeress \u6bcd\u8001\u864e actor actoress \u5973\u6f14\u5458 lion \u72ee\u5b50 lioness \u6bcd\u72ee\u5b50 postman post \u90ae\u653f nurse \u62a4\u58eb mechanic \u673a\u68b0\u5e08 hairdresser \u7406\u53d1\u5e08 dress \u6253\u626e\u3001\u88d9\u5b50 hoursewife milkman \u9001\u725b\u5976\u7684\u4eba policeman postman superman Lesson9 How are you today? how How is the weather? How is your mother? today tonight thanks Thabks a lot Thanks you very much How are you? \u5982\u4f55\u56de\u5e94 1. Fine \\Very well Than you are you 2. Not bad 3. very bad\\Terrible \u51a0\u8bcd: \u5e3d\u5b50\uff0c\u5e26\u5728\u540d\u8bcd\u4e0a\u7684\u5e3d\u5b50\uff0c\u6ca1\u6709\u7279\u6b8a\u60c5\u51b5\u4e0b\u4e0d\u80fd\u6458\u5e3d\u5b50 \u7279\u6b8a\u60c5\u51b5: \u56fd\u5bb6\u3001\u56fd\u7c4d\u3001\u4eba\u540d\u3001\u57ce\u5e02\u540d \u4e24\u8005\u53d1\u97f3\u4e0d\u540c\uff0c\u8981\u770bthe\u540e\u9762\u63a5\u7684\u662f\u5143\u97f3\u3001\u8fd8\u662f\u8f85\u97f3 the absoulte the range Lesson10 Look at ... a fat cat \u66b4\u53d1\u6237 thin slim \u82d7\u6761\u7684 You are so slim dirty clean \u5e72\u51c0\u7684 hot \u70ed\u7684 It is hot today The girl is very hot Lay GaGa is hot now... cold I have a cold welcome \u6211\u53d7\u5230\u4e86\u51b7\u9047 young busy He is very busy lazy \u61d2\u60f0\u7684 Look at .... Lesson 11 Is this your shirt? whose what whose pen \\ whose shirt \\ shose car blue \u72b9\u8c6b\u7684 You are blue today \u4e0d\u5065\u5eb7\u7684 It's blue book \u8d35\u65cf\u7684 blue blood perhaps \u5927\u6982 Perhaps it is \u53ef\u80fd\u662f\u8fd9\u6837\u5427 Perhaps so Perhaps not \u53ef\u80fd\u4e0d\u662f\u8fd9\u6837 white \u767d\u8272 the White House \u767d\u5bab white lie \u5584\u610f\u7684\u8c0e\u8a00 catch \u6293\u4f4f\u3001\u63a5\u7740 tch\u4e2d\u4e00\u822ct\u4e0d\u53d1\u97f3 catch the thief catch the ball Whose shoirt is that? \u7279\u6b8a\u7591\u95ee\u8bcd + be + \u540d\u8bcd Whose is this car? \u7279\u6b8a\u7591\u95ee\u8bcd + \u540d\u8bcd + be + \u4ee3\u8bcd Whose car is that? Is this your shirt, Dave? Here you are \u7ed9\u4f60 \u6211\u7684 => my \u4f60\u7684 => your Lucy\u7684 => Lucy's Lucy's friend Lily's book my mother's bag the driver's watch the doctor's car \u540d\u8bcd\u6240\u6709\u7684\u683c: \u540d\u8bcd's\uff0c\u4e00\u79cd\u6240\u5c5e\u7684\u6982\u5ff5\uff0c\u8fd9\u4e2a\u540d\u8bcd\u5fc5\u987b\u662f\u6709\u751f\u547d\u7684 Lesson 12 \u5f62\u5bb9\u8bcd\u4fee\u9970\u540d\u8bcd a fat cat blouse \u5973\u886c\u886b his \u4ed6\u7684 her \u5979\u7684 \u7269\u4e3b\u4ee3\u8bcd: \u5f62\u5bb9\u8bcd\u6027 my\u3001your\u3001his\u3001her tie \u9886\u5e26 Lesson 13 A new dress a green hand \u65b0\u624b come here upstairs hat smart beautiful same the same color the same city lovely \u53ef\u7231\u7684\u3001\u6f02\u4eae\u7684 beautiful smart lovely nice What color is your ....? Come and see her. \u8fc7\u6765\u770b\u770b \u4e24\u4e2a\u52a8\u8bcd\u901a\u8fc7and\u8fde\u63a5\u8d77\u6765\uff0c\u5c31\u53ef\u4ee5\u628a\u4e24\u4e2a\u52a8\u4f5c\u8054\u7cfb\u8d77\u6765\uff0c\u8868\u793a\u4e00\u4e2a\u8fde\u7eed\u7684\u52a8\u4f5c\u3002 Here it is \u7b80\u5355\u7684\u5012\u88c5\u7ed3\u6784 Here I am Here we go \u7279\u6b8a\u7591\u95ee\u53e5: \u4f60\u7684\u540d\u5b57\u662f\u4ec0\u4e48? What is your name? What is your job? What color is your coat? Lesson 14 case suitcase carpet car \u6c7d\u8f66 + per \u5ba0\u7269 = \u5730\u6bef dog a lucky dog \u5e78\u8fd0\u513f You're welcome \u4e0d\u7528\u5ba2\u6c14 Whose turn is it now? (\u8fd9\u91cc\u7684turn\u662f\u6b21\u5e8f\u7684\u610f\u601d\uff0c\u8fd9\u53e5\u8bdd\u662f\u8bf4\uff0c\u8be5\u8f6e\u5230\u8c01\u4e86) Lesson 15 customs \u6d77\u5173 customer \u987e\u5ba2 officer \u5b98\u5458 customs officer \u6d77\u5173\u5b98\u5458 CEO(Chief Executive Officer) passport \u62a4\u7167 pass \u901a\u8fc7 port \u6e2f\u53e3 visa \u7b7e\u8bc1 brown \u68d5\u8272\u7684 brown tea \u7ea2\u8272 brown sugar \u7ea2\u7cd6 ` \u540d\u8bcd\u7684\u5355\u590d\u6570: \u4e00\u822c\u7684\u540d\u8bcd + s a girl -> girls a officer -> officers \u4ee5s\u3001sh\u3001x \u3001ch\u7ed3\u5c3e\u7684 + es/iz/ a bus -> buses a box -> boxes a brush -> brushes \u4ee5f\u3001fe\u7ed3\u5c3e\u7684\u53d8f\u3001fe -> ves \\vz\\ a wife -> wives a shelf -> shelves knife -> knives \u8f85\u97f3\u5b57\u6bcd+y\u7ed3\u5c3e\u7684\u540d\u8bcd \u53d8y->i + es\\iz\\ a baby -> babies a lady -> ladies \u5143\u97f3 + o\u7ed3\u5c3e + s\\z\\ a zoo -> zoos a radio _. radios \u8f85\u97f3 + o \u7ed3\u5c3e, +es \\z\\ hero -> heroes potato -> potatoes \u4e00\u822c\u4ee5\u590d\u6570\u5f62\u5f0f\u51fa\u73b0\u7684: jeans pants shorts glasses Lesson 16 black coffee black tea yellow \u9ec4\u8272\u7684 orange \u6a58\u9ec4\u8272 Lession 17 employee \u96c7\u5458 employ \u96c7\u7528 employer \u96c7\u4e3b trainer \u57f9\u8bad trainee \u88ab\u57f9\u8bad\u7684\u4eba hard-working adj + doing good-looking easy-going sales rep \u63a8\u9500\u5458 \u590d\u6570: sales reps \u5168\u79f0: sales representative assistant \u52a9\u624b an office assistant \u529e\u516c\u5ba4\u52a9\u7406 \u6253\u62db\u547c: Hello How are you? How are you doing? How do you do? \u975e\u5e38\u6b63\u5f0f\u7684\u6253\u62db\u547c \u4f60\u597d Come and meet Come and sit down Come and have a drink Come and meet my friend What are theiy jobs? What is your job? \u5355\u590d\u6570\u53d8\u6362: This is my name These are their names Who is the young girl? Who are the young girls? What is your job? What are theiy jobs? He is a tourist They are tourists. \u540d\u8bcd\u7684\u5355\u590d\u6570: books\u3001jobs buses\u3001boxes\u3001brushes\u3001benches\u3001potatoes wife-wives(f\u6e05\u8f85\u97f3\u3001\u53d8\u6210\u4e86v\u6d4a\u8f85\u97f3)\u3001leaf-leaves baby-babies man-men toman-women foot-feet tooth-teeth child-children \u53e5\u5b50\u7684\u590d\u6570: \u5355\u6570\u540d\u8bcd + is .... \u590d\u6570\u540d\u8bcd + are .... Her passport is greent The men are keyboard operators This assistant is busy Our classroom is large These umbrellas are useful Lesson 18 What are their jobs? \u897f\u65b9\u4eba\u7684\u59d3\u6c0f\u6765\u6e90: \u897f\u65b9\u4eba\u5148\u6709\u540d\u8fd8\u662f\u73b0\u6709\u59d3? \u73b0\u6709\u540d\u5b57\u3001\u7136\u540e\u6709\u59d3 \u897f\u65b9\u4eba\u59d3\u6c0f\u6765\u6e90: \u804c\u4e1a: Taylor\u3001Baker ... \u989c\u8272: White\u3001Brown .... \u751f\u6d3b: Bird\u3001Rice .... \u4f4f\u5740: Bridge\u3001Hill \u540d\u5b57+son: Peterson\u3001Johnson\u3001Jackson 19 tired and thirsty matter \u4e8b\u60c5 What's the matter? (matter\u662f\u540d\u8bcd\uff0c\u9700\u8981\u52a0\u4e0a\u51a0\u8bcd) What's wrong? \u8fd9\u91cc\u7684wrong\u662f\u5f62\u5bb9\u8bcd What's the matter with you? children \u5b69\u5b50\u4eec child kids tired \u7d2f\u3001\u75b2\u4e4f thirsty sit down \u5750\u4e0b have a seat sit down, please right \u597d\uff0c\u53ef\u4ee5 gh\u4e0d\u53d1\u97f3 All right (t\u4e0d\u53d1\u97f3) tired and thirsty \u53c8\u6e34\u53c8\u7d2f beautiful and kind \u53c8\u597d\u770b\u53c8\u5584\u826f young\u3001tall and rich Threre be\u53e5\u578b There's an ice cream man There's a mailman \u82f1\u8bed\u4e2d\u4ecb\u7ecd\u4eba\u79f0\u987a\u5e8f\u7684\u65f6\u5019\uff0c\u662f\u4e8c\u3001\u4e09\u3001\u4e00\u7684\u987a\u5e8f 20 Look at them! sister brother mother father husband wife son daughter aunt/aunty \u963f\u59e8\u3001\u59d1\u59d1 uncle uncle \u53d4\u53d4/\u8205\u8205 grandmother grandfather in-law \u7ed3\u5a5a\u540e\u7684\u4eb2\u5c5e\u5173\u7cfb mother in-law father in-law sister in-law brother in-law step \u540e\u7684\u3001\u7ee7\u7684 step father step mother ex \u524d\u4efb\u7684 ex-girlfriend 21 which book? ones \u4ee3\u66ff\u590d\u6570\u540d\u8bcd which \u54ea\u4e00\u4e2a\u3001\u54ea\u4e00\u4e9b You(\u4e3b) give(\u8c13) me(\u627f\u53d7\u4e86give\u7684\u52a8\u4f5c\uff0c\u5bbe\u8bed) a book(\u627f\u53d7\u4e86give\u7684\u52a8\u4f5c\uff0c\u8fd9\u91cc\u662f\u5bbe\u8bed) \u80fd\u591f\u63a5\u53cc\u5bbe\u8bed\u7684\u52a8\u8bcd: give \u590d\u4e60\u70b9: 22 give.... \u8fde\u8bfb: \u4e00\u8f85\u4e00\u5143\u3001\u524d\u8f85\u540e\u5143 \u5c31\u53ef\u4ee5\u8fde\u8bfb empty An empty street (An empty \u53ef\u4ee5\u8fde\u8bfbn\u548ce\u7b26\u5408\u4e00\u8f85\u4e00\u5143\uff0c\u524d\u8f85\u540e\u5143) full I'm full \u6211\u9971\u4e86 a full stop \u53e5\u53f7 a full time job \u5168\u804c\u5de5\u4f5c large \u5927\u7684(\u5f3a\u8c03\u9762\u79ef) \u53cd\u4e49\u8bcdsmall\uff0c\u5176\u4ed6\u60c5\u51b5\u7528big(\u53cd\u4e49\u8bcdlittle) China is a large country This room is large little sharp \u950b\u5229\u7684 blunt \u949d\u7684 The knife is blunt \u8fd9\u5200\u5f88\u949d small small world \u4e16\u754c\u771f\u5c0f\u3001\u53c8\u89c1\u9762\u4e86 glasses cup bottle tin knife (\u5b57\u6bcdk\u548cn\u5728\u4e00\u8d77\u7684\u65f6\u5019\uff0ck\u4e0d\u53d1\u97f3) fork spoon \u4e2d\u897f\u65b9\u4eba\u4e0d\u540c\u7684\u9910\u996e\u5de5\u5177: \u4e2d\u56fd: \u7897+\u7b77 \u897f\u65b9: \u5200+\u53c9 knifes and forks It's + adj + of sb \u8868\u793a\u9ed8\u8ba4\u81ea\u8eab\u7684\u6027\u683c\u3001\u7279\u70b9 It's very nice of you to help me \u4f60\u5e2e\u6211\u771f\u662f\u592a\u5584\u826f\u4e86 It's + adj + for sb \u8868\u793a\u5bf9\u4e8e\u67d0\u4eba\u6765\u8bf4\u5982\u4f55\u5982\u4f55 be late for sth \u505a...\u8fdf\u5230 It's not good to be late for school The one in pencil \u8fd9\u91cc\u7684in\u8868\u793a \u7528..\u5199\u7684 \u7528\u94c5\u7b14\u5199\u7684\u4fe1 there be\u53e5\u578b: (\u6ca1\u6709there will have\u7684\u7528\u6cd5\uff0chave\u662f\u52a9\u52a8\u8bcd\uff0c\u540e\u9762\u8fd8\u8981\u52a0been\u6784\u9020there be\u7ed3\u6784) * \u5c06\u6765\u65f6: there will be\u6216\u8005there is going to be 23 which glasses on \u5728...\u4e4b\u4e0a shelf \u590d\u6570 shelves The ones on the shelf \u77ed\u8bed \u67b6\u5b50\u4e0a\u7684\u90a3\u4e9b \u4ecb\u8bcd\u77ed\u8bed\u540e\u7f6e\uff0c\u5012\u7740\u7ffb\u8bd1 \u4ecb\u8bcd: \u8fde\u63a5\u4e24\u4e2a\u8bcd\u6216\u8bcd\u4e0e\u53e5\u5b50 on: \u5728...\u4e4b\u4e0a The book is on the desk \u4f7f\u7528\u4ecb\u8bcd\u65f6\uff0c\u4e0d\u80fd\u5fd8\u8bb0\u8981\u52a0\u52a8\u8bcd cigarette television floor dressing table \u68b3\u5986\u53f0 magazine newspaper shelf \u67b6\u5b50 \u8868\u793a\u65f6\u95f4: * on \u7528\u4e8e\u5177\u4f53\u7684\u67d0\u4e00\u5929\u6216\u67d0\u4e00\u5929\u7684\u65e9\u4e0a\u3001\u4e0b\u5348\u3001\u665a\u4e0a\u524d \u661f\u671f\u6216\u8282\u65e5\u524d We met at a afe on the evening of May 25th I was born on the morning of March 11th in \u8868\u4e00\u6bb5\u65f6\u95f4\u3001\u7528\u4e8e\u5e74\u3001\u6708\u3001\u4e16\u7eaa\u3001\u56db\u5b63\u6216\u6cdb\u6307\u4e00\u5929\u7684\u4e0a\u5348\u3001\u4e0b\u5348\u3001\u665a\u4e0a\u7b49 in a minute in three minutes in a year in February in 2017 in spring in a week at \u7528\u4e8e\u5177\u4f53\u7684\u65f6\u95f4\u70b9\u524d\u3001\u6216\u6b63\u5348\u3001\u9ec4\u660f\u3001\u5348\u591c\u7b49 Every day he begins his work at 8 o'clock by \u8868\u793a\u6700\u8fdf\u5728\u67d0\u4e00\u65f6\u523b to \u8868\u793a\u65f6\u95f4\u8303\u56f4\uff0c\u901a\u5e38\u548cfrom\u8fde\u7528 \u8868\u793a\u8303\u56f4: in \u8868\u793a\u5728\u67d0\u4e2a\u8303\u56f4\u4e4b\u5185\uff0c\u6ca1\u6709\u51fa\u8fd9\u4e2a\u5708\u5b50 Our village is in a valley Wangfujing Street is in Beijing on \u8868\u793a\u5728\u67d0\u4e2a\u5e73\u9762\u4e0a\u6216\u4e0e\u4e00\u4e2a\u9762\u76f8\u63a5\u89e6\uff0c\u8fd9\u4e00\u70b9\u548c over \u4e0e above \u662f\u4e0d\u540c\u7684\u3002 There are some boats on the river They're having fun on the playground at \u5219\u8868\u793a\u5728\u67d0\u4e2a\u5177\u4f53\u7684\u573a\u6240\u6216\u5730\u70b9\uff0c\u8fd9\u4e00\u70b9\u548c\u7528\u5728\u65f6\u95f4\u4e4b\u524d\u4e00\u6837\uff0c\u90fd\u662f\u5728\u4e00\u4e2a\u6bd4\u8f83\u5177\u4f53\u7684\u3001\u5f88\u5c0f\u7684\u201c\u70b9\u201d\u4e4b\u524d at the cinema at the bus stop at the door \u7948\u4f7f\u53e5\u4e2d\uff0c\u52a8\u8bcd\u8981\u7528\u539f\u578b \u5982\u679c\u8868\u793a\u7684\u662f\u8be2\u95ee\u610f\u89c1\u6216\u5efa\u8bae\u7684\u65f6\u5019\u5373\u4f7f\u662f\u7591\u95ee\u53e5\u4e5f\u53ef\u4ee5\u7528some\u800c\u4e0d\u662fany Would you like some tea? make oneself at home \u8bf7\u81ea\u4fbf\u3001\u968f\u4fbf 25/26 Mrs.Smith's kitchen Mrs kitchen refrigerator fridge \u51b0\u7bb1 right electric \u5e26\u7535\u7684\u3001\u53ef\u901a\u7535\u7684 an electric cooker an electric shaver(\u7535\u52a8\u522e\u80e1\u5200) cooker \u7089\u5b50\u3001\u708a\u5177\uff0c\u867d\u7136er\u7ed3\u5c3e\u4f46\u4e0d\u8868\u793a\u4eba\uff0c\u53a8\u5e08\u7528cook\u8868\u793a middle \u4e2d\u95f4 in the middle of \u5728...\u7684\u4e2d\u95f4 room \u623f\u95f4 living room dining room \u9910\u5385 bedroom // [\u02c8bedru\u02d0m,\u02c8bedr\u028am] dr \u6d4a\u8f85\u97f3\u8fde\u8bfb \u53e5\u578b: \u4f4d\u7f6e: There is ... in the kitchen \u989c\u8272: The ... is blue \u72b6\u6001: It is on the left There be\u53e5\u578b: \u6784\u6210 There be + (is, are) + \u5730\u70b9 \u6709: * \u62e5\u6709 have * \u5b58\u5728 there be There is one in my heart \u6211\u5fc3\u91cc\u6709\u4eba There is a cooker in the kitchen -> A cooker in the kitchen there There be\u53e5\u578b\u4e2dbe\u52a8\u8bcd\u7684\u5355\u590d\u6570\u5f62\u5f0f\u53d6\u51b3\u4e8e\u6700\u8fd1\u7684\u540d\u8bcd\u7684\u5355\u590d\u6570\u5f62\u5f0f There is(\u6700\u8fd1\u7684dictionary\u662f\u5355\u6570) a dictionary and some books in the room in \u5728...\u91cc\u9762 Where is it? \u5b83\u5728\u54ea\u91cc have breakfast/lunch/super/ \u8fdf\u65e9\u996d\u3001\u5403\u5348\u996d\u3001\u5403\u665a\u996d do well in ... \u8868\u793a\u5728...\u65b9\u9762\u505a\u7684\u597d do whell in be good at I independence, because I be good at association with person. I do well in communicating with customers She is a very clever girl; she will do well in life. with one's help \u5728...\u7684\u5e2e\u52a9\u4e0b with the help of one's With your help\uff08=With the help of yours\uff09, we finished the hard work on time. With Kate's help\uff08=With the help of Kate\uff09, John caught up with the others in the class. 27/28 trousers \u957f\u88e4 pants \u957f\u88e4 jeans \u725b\u4ed4\u88e4 shorts \u77ed\u88e4 shoes socks gloves \u624b\u5957 glasses shelf \u67b6\u5b50\uff0c\u9694\u677f tins \u7f50\u5b50\u3001a tin of \u4e00\u7f50.... \u4ecb\u8bcd/\u4ecb\u8bcd\u77ed\u8bed\u524d\u9700\u8981\u6709be\u52a8\u8bcd \u6709\u59cb\u6709\u7ec8: There is a beging, a middle, and the end. There is some water in that bottle, isn't there? \u90a3\u4e2a\u74f6\u5b50\u91cc\u6709\u4e00\u4e9b\u6c34\uff0c\u4e0d\u662f\u5417? children \u590d\u6570\u5f62\u5f0f\u7684child the number of \u4f5c\u4e3b\u8bed\u65f6\u540e\u9762\u52a8\u8bcd\u8981\u7528\u5355\u6570 29/30 \u540c\u65f6\u5177\u5907\u540d\u8bcd\u548c\u52a8\u8bcd\u7684\u8bed\u4e49 shut \u5173\u95e8 The door is shut(\u5f62\u5bb9\u8bcd\uff0c\u5173\u7740\u7684) shut the door \u5173\u95e8 must \u5fc5\u987b \u60c5\u6001\u52a8\u8bcd -> \u8868\u793a\u60c5\u611f\u3001\u6001\u5ea6 air \u662f\u7a7a\u6c14\u6d41\u901a The air is fresh air the kitchen \u7ed9\u53a8\u623f\u901a\u98ce \u8fd9\u4e9b\u8bcd\u90fd\u662f\u540c\u65f6\u5177\u5907\u540d\u8bcd\u548c\u52a8\u8bcd\u8bed\u4e49\u7684 water\u3001color\u3001air\u3001dust\u3001book\u3001milk\u3001empty put \u653e\u7f6e\u3001\u6401 Put your hand in your pocket clothes \u8863\u670d(\u5355\u590d\u6570\u540c\u5f62) people\u3001hair\u3001fish\u3001sheep wardrobe Put your coat in the wardrobe empty Empty the bottle please \u8bf7\u628a\u74f6\u5b50\u5012\u7a7a \u4f7f\u7a7a\u3001\u628a..\u5012\u51fa \u6d41\u51fa\u3001\u8d70\u51fa \u7a7a\u7684 \u7a7a\u865a\u7684\u3001\u65e0\u610f\u4e49\u7684 \u5446\u677f\u7684\u3001\u6beb\u65e0\u8868\u60c5\u7684 read sharpen adj + en = v sharp + en = \u4f7f\u950b\u5229 short + en = \u7f29\u77ed weak + en = \u524a\u5f31 put on & take off turn on & turn off turn on\\off the television turn it down \u4eba\u79f0\u4ee3\u7801\u653e\u5728\u4e2d\u95f4 untidy \u4e71\u3001\u4e0d\u6574\u6d01 air the room \u7ed9\u623f\u95f4\u901a\u98ce tap \u6c34\u9f99\u5934 cupboard \u7897\u67dc\u3001\u98df\u53a8 sweep \u6253\u626b dust \u5c18\u57c3\u3001\u7c89\u672b\u3001\u62c2\u53bb\u2026\u7684\u7070\u5c18\uff0c\u63b8\u6389\u2026\u7684\u5c18\u571f\uff0c\u7ed9\u2026\u64e6\u7070 \u7948\u4f7f\u53e5: A. \u6ca1\u6709\u4e3b\u8bed B. \u52a8\u8bcd\u6253\u5934 \u8868\u793a\u547d\u4ee4: \u52a8\u8bcd\u5706\u5f62 + ..... Shut the door \u8868\u793a\u8bf7\u6c42: please + \u52a8\u8bcd\u539f\u578b + ... Please give me it \u8868\u793a\u5efa\u8bae: Let's + \u52a8\u8bcd\u539f\u578b + ... Let's go, ok? What must I do? What must I say\\read\\clean? Where must I go\\live\\stay? Who must I meet\\love....? must\u7684\u5426\u5b9a\u7528needn't\u3001\u53cd\u4e49\u8bcd\u662fmust not \u6d17\u624b\u95f4\u7684\u8868\u8fbe\u65b9\u5f0f: bathroom \u81ea\u5df1\u5bb6\u7684\u6d17\u624b\u95f4 restroom \u516c\u5171\u5395\u6240 washroom \u6d17\u624b\u95f4 toilet \u5395\u6240 loo \u7537\u5973\u5395\u6240: lady's room\\man's room \u7981\u6b62\u5438\u5f15\u3001\u7981\u6b62\u505c\u8f66\u7b49\u6807\u8bed\u901a\u5e38\u90fd\u662fNO... NO SMOKING\u3001NO PARKING 31/32 Where's Sally? \u65f6\u95f4: \u8fc7\u53bb\u3001\u73b0\u5728\u3001\u5c06\u6765 \u72b6\u6001: \u6b63\u5728\u505a(\u8fdb\u884c)\u3001\u5b8c\u6210\u7684\u3001\u4e00\u822c(\u901a\u5e38) \u65f6\u95f4 + \u72b6\u6001 = \u65f6\u6001 \u73b0\u5728\u8fdb\u884c\u65f6: \u73b0\u5728 + \u8fdb\u884c \u6b64\u65f6\u6b64\u523b\u6b63\u5728\u505a\u7684\u4e8b\u60c5 \u4e3b\u8bed + is/am/are + doing He is reading He is eating He is drinking He is sleeping He is playing He is running She is writing do \u4ee3\u8868\u6240\u6709\u7684\u52a8\u8bcd \u73b0\u5728\u5206\u8bcd \u7528\u4e8e\u73b0\u5728\u8fdb\u884c\u65f6 1. \u4e00\u822c + ing 2. \u4ee5\u4e0d\u53d1\u97f3\u7684e\u7ed3\u5c3e \u53bbe + ing (write -> writing) 3. \u8f85 + \u5143 + \u8f85\uff0c \u53cc\u5199\u8f85\u97f3+ing(\u9664\u6389opening) run after \u8ffd\u9010 (\u53ef\u4ee5\u8fde\u8bfb\uff0cr^ na: fte) in the garden \u5728\u82b1\u56ed\u91cc a gardener \u5706\u827a\u5e08 under \u5728....\u7684\u4e4b\u4e0b There is a chair under the bed a family tree \u5bb6\u8c31 climb \u4ed6\u6b63\u5728\u7a7f\u8fc7\u90a3\u7247\u8349\u5730: He is acrossing(across\u662f\u4ecb\u8bcd\uff0c\u4e0d\u80fd\u52a0ing) the grass He is walking/going/runing across the grass They are overing(over\u8fd8\u662f\u4ecb\u8bcd\uff0c\u4e0d\u80fd\u52a0ing) the bridge They are walking/goding/running over the bridge I beg your pardon? / Pardon / Excuse me? / Sorry ? Say it again What about ... ? What about the dog? -> What is the dog doing in the garden? \u4e3a\u4e86\u907f\u514d\u91cd\u590d\u5267\u4e2d\u7684\u4e3b\u8bed\u548c\u8c13\u8bed\uff0c\u4f7f\u7528what about\u6765\u8be2\u95ee\u60c5\u51b5 I am teacher. What about you? I am learing English. What about you? I like rice What about you? 33/34 A fine day sunhat sunglass sunblock \u9632\u6652\u971c shine \u7167\u8000 foot bridge \u5929\u6865 shave \u522e\u80e1\u5b50 shaver \u522e\u80e1\u5200 wash \u6d17 \u4eca\u5929\u5929\u6c14\u5f88\u597d\uff0c\u5929\u7a7a\u4e2d\u98d8\u7740\u51e0\u6735\u767d\u4e91\uff0c\u4f46\u662f\u9633\u5149\u707f\u70c2\u3002Lucy\u548c\u5979\u7684\u7537\u670b\u53cb\u5728\u4e00\u5757\u513f\u3002\u4ed6\u4eec\u6b63\u5728\u5f00\u8f66\u3002Lucy\u6b63\u5728\u770b\u4e00\u53ea\u6f02\u4eae\u7684\u5c0f\u9e1f\u3002 \u5c0f\u9e1f\u6b63\u5728\u5929\u4e0a\u98de\u8fc7\u3002\u4e00\u4e9b\u4eba\u4ece\u5929\u6865\u4e0a\u8d70\u8fc7\uff0c\u4ed6\u4eec\u5f88\u5fd9\u3002 It is fine today, There are some clouds in the sky, But the sun is shining Lucy is with her bodyfriend, They are driving. Lucy is looking at a beautiful bird. The bird is flying in the sky. Some people are walking over the bridge. They are busy \u52a8\u8bcd\u7684\u91cd\u8981\u6027: \u65f6\u6001\u9700\u8981\u901a\u8fc7\u52a8\u8bcd\u6765\u8868\u793a \u8bcd\u7ec4\u4e2d\u6700\u4e3a\u91cd\u8981\u7684\u5c31\u662f\u52a8\u8bcd\u8bcd\u7ec4 \u53e5\u5b50\u6240\u6709\u9aa8\u67b6\u4e2d\u6700\u4e3a\u91cd\u8981\u548c\u4e0d\u80fd\u7f3a\u5931\u7684\u5c31\u662f\u52a8\u8bcd \u52a8\u8bcd\u79cd\u7c7b: 1. \u8fde\u7cfb\u52a8\u8bcd She is beautiful \u60c5\u6001\u52a8\u8bcd You must do it \u5b9e\u4e49\u52a8\u8bcd I wash my hands \u53ca\u7269\u52a8\u8bcd \u4e0d\u53ca\u7269\u52a8\u8bcd \u52a9\u52a8\u8bcd help sb with sth Linda often helps her mother with the housework on weekends catch up with \u8ffd\u4e0a I begin to catch up with my classmates among vs between \u524d\u8005\u8868\u793a\u5728...\u4e4b\u95f4(\u4e09\u8005\u6216\u4ee5\u4e0a)\uff0c\u540e\u8005\u610f\u601d\u76f8\u540c\uff0c\u4f46\u662f\u8868\u793a\u7684\u662f\u4e8c\u8005\u4e4b\u95f4 35/36 our village between \u4ecb\u8bcd \u5728....\u4e4b\u95f4 between A and B Just between you and me, don't tell others \u5929\u77e5\u5730\u77e5\uff0c\u4f60\u77e5\u6211\u77e5 The lady is between her daughter and her friend hill \u5c0f\u5c71 mountain wife (\u590d\u6570 wives) along \u4ecb\u8bcd(\u6cbf\u7740) swim(swimming) wim\u8f85\u5143\u8f85\u7ed3\u6784 beside \u4ecb\u8bcd \u5728...\u7684\u65c1\u8fb9 There is a bed table beside the bed off \u4ecb\u8bcd \u79bb\u5f00 driver off \u5f00\u8d70 a photograph of our village a photo of my book My wife and I are walking along ..... \u6211\u548c\u6211\u59bb\u5b50\u6cbf\u7740...\u6563\u6b65\uff0c\u82f1\u8bed\u4e2d\u4e60\u60ef\u5c06\u4ed6\u4eba\u653e\u5728\u524d\u9762\uff0c\u8fd9\u91cc\u5c06my wife\u653e\u5728\u9996\u4f4d one is teacher, the other is a doctor \u5f53\u6709\u5927\u4e8e\u4e8c\u4e2a\u7684\u65f6\u5019\uff0c\u7528another out of .... \u51fa\u6765 come out of .... walk out of .... run out of .... some of \u590d\u6570\u5f62\u5f0f some of them \u4ed6\u4eec\u4e2d\u7684\u4e00\u4e9b some of us \u6211\u4eec\u4e2d\u7684\u4e00\u4e9b \u8868\u793a \u8c01\u8c01\u8c01 \"\u7684\" (\u540d\u8bcd\u6240\u6709\u683c) \u7269\u4e3b\u4ee3\u8bcd 's \u6709\u751f\u547d\u7684\u7269\u4f53\u624d\u80fd\u7528\u8fd9\u79cd\u65b9\u5f0f\uff0c\u6bd4\u5982\u4eba\uff0cmother's car of \u65e0\u751f\u547d\u7684\uff0c\u8981\u5012\u7740\u8868\u793a the photo of my school the name of the song the color of the car Jim and Jack's room \u4e24\u4e2a\u4eba\u5171\u7528 Jim's and Jack's rooms \u623f\u95f4\u5404\u5c5e\u5404\u81ea\u6240\u6709 take to \u5f00\u59cb\u3001\u4ece\u4e8b take down \u5199\u4e0b\u3001\u8bb0\u4e0b take off \u8131\u4e0b\u3001\u8d77\u98de take on \u5448\u73b0\u3001\u627f\u62c5 turn in \u4e0a\u4ea4 turn up \u8c03\u9ad8 turn down \u8c03\u4f4e turn off \u5173\u95ed turn out \u7ed3\u679c\u662f look after \u7167\u987e\u3001\u7167\u770b look up \u67e5\u8be2 look for \u5bfb\u627e look at \u770b look into \u8c03\u67e5 look to \u6307\u671b\u3001\u4f9d\u8d56 look over \u68c0\u67e5\u3001\u67e5\u770b The doctor is look over the crying baby, but he can't find out what is wrong with it put off \u63a8\u8fdf\u3001\u803d\u6401 put up \u5f20\u8d34\u3001\u4e3e\u8d77 put down \u653e\u4e0b\u3001\u9547\u538b put away \u6536\u8d77 37/38 \u526f\u8bcd: \u7528\u6765\u4fee\u9970adj\u3001v\u3001adv \u4fee\u9970adj I am very tired I am so tired I am too tired I am awfully tired \u4fee\u9970v I love you I love you very much I love you awfully \u526f\u8bcd\u901a\u5e38\u60c5\u51b5\uff0c\u5f62\u524d\u52a8\u540e hard work \u8270\u82e6\u7684\u5de5\u4f5c wokr hard \u52aa\u529b\u5730\u5de5\u4f5c paint \u6d82\u8272\u3001\u4e0a\u8272 pink \u7c89\u8272\u7684 favourite \u6700\u559c\u6b22\u7684 I'am going to(\u52a9\u52a8\u8bcd) paint(\u8c13\u8bed) it(\u5bbe\u8bed) pink(\u5bbe\u8865\uff0c\u5bf9\u4e8e\u5bbe\u8bed\u7684\u8865\u5145\u8bf4\u660e) \u6211\u53d1\u73b0\u90a3\u5c4b\u5b50\u662f\u9ed1\u7684 I find the room dark \u4e0d\u80fd\u662f I find the room is dark We must keep the classroom clean \u5386\u53f2\u4f7f\u4eba\u660e\u77e5: Histories make men wise \u8bd7\u6b4c\u4f7f\u4eba\u7075\u79c0: Poems make men witty \u6570\u5b66\u4f7f\u4eba\u7f1c\u5bc6: Math make men subtle \u54f2\u5b66\u4f7f\u4eba\u6df1\u523b: Philosophy make men deep It's for my daughter for: \u4e3a\u4e86...\u67d0\u4eba\u800c... It's for you \u5bf9\u4e8e\u67d0\u4eba\u6765\u8bf4 Math is so difficult for me \u8868\u793a\u539f\u56e0.... what are you sorry for? \u957f\u8fbe... I study Yoga for two years \u4e00\u822c\u5c06\u6765\u65f6: be going to \u53e5\u578b \u4f55\u65f6\u7528 \u9884\u5148\u8ba1\u5212\u548c\u6253\u7b97\u8981\u505a\u7684\u4e8b \u56fa\u5b9a\u5f62\u5f0f \u4e3b + is/am/are + going to \u5c0f\u5c0f\u7684\u8981\u6c42 \u540e\u9762\u63a5\u52a8\u8bcd\u539f\u578b I am going to go shoping this weekend He is going to sell his old car and buy a new one be going to = be gonna \u53e3\u8bed\u4e2d\u53ef\u4ee5\u7b80\u5199 I am gonna be(\u52a8\u8bcd\u539f\u578b\uff0c\u9700\u8981\u8981\u6709) happy this year be going to \u53e5\u578b\u7684\u5176\u4ed6\u5f62\u5f0f: \u7591: be \u63d0\u524d \u5426: be + not Is she going to go shopping this weekend? housework \u5bb6\u52a1\u6d3b listen \u662f\u4e00\u4e2a\u52a8\u8bcd\uff0c\u4e00\u822c\u540e\u9762\u8981\u52a0to listen to the music Alice sings well(\u526f\u8bcd\u4fee\u9970\u52a8\u8bcd\uff0c\u653e\u5728\u52a8\u8bcd\u540e\u9762) fine \u5f62\u5bb9\u8bcd nice \u5f62\u5bb9\u8bcd good \u5f62\u5bb9\u8bcd well \u662f\u526f\u8bcd pick \u6311\u9009 bring \u5e26\u6765 carry \u643a\u5e26\u3001\u642c\u8fd0 take \u5e26\u6765 take away \u62ff\u8d70 make the bed for \u4e3a...\u94fa\u5e8a 39/40 front n \u524d\u9762 in front of \u5728...\u4e4b\u524d (\u5916\u90e8) in the front of (\u5185\u90e8) The main is in front of the car The main is in the front of the car careful \u5f62\u5bb9\u8bcd What are you going to do with .... \u4f60\u6253\u7b97\u5982\u4f55\u5904\u7406..... Be carefull Give it to me \u7948\u4f7f\u53e5: \u52a8\u8bcd\u5f00\u5934\u3001\u6ca1\u6709\u4e3b\u8bed be + adj\\prep \u53ef\u4ee5\u6784\u6210\u7948\u4f7f\u53e5 be happy be good be nice be in beijing Give it to me => You give the vase to me \u53cc\u5bbe\u8bed \u53ef\u4ee5\u63a5\u53cc\u5bbe\u8bed\u7684\u8bcd: give show fake teach give sth to sb = give sb sth I give a flower to my mother = I give my mother a flower There we are \u77a7\uff0c\u770b....\uff0c\u5c31\u8fd9\u4e48\u7740\u5427 \u8bf4\u4e0d\u7684\u51e0\u79cd\u65b9\u5f0f: \u6784\u6210 is not/am not/are not \u5bf9\u4e8e\u5b9e\u4e49\u52a8\u8bcd\u7684\u5426\u5b9a\u9700\u8981\u52a0Don't(Do not) No + n No smoking Don't(\u52a9\u52a8\u8bcd) smoke(\u52a8\u8bcd\uff0c\u6240\u4ee5\u4e0d\u80fd\u7528is) Don't come in Don't dust in Don't litter Don't fall Don't sleep in Don'it enter Don't drop it \u90fd\u662f\u53ef\u4ee5\u63a5\u53cc\u5bbe\u8bed * show \u7ed9..\u770b * send \u9001\u7ed9 * take \u5e26\u7ed9 show sb sth = show sth to sb send sb sth = send sth to sb take sb sth = take sth to sb carry \u643a\u5e26 get \u5f97\u5230\u3001\u62ff bring \u5e26\u6765 take \u5e26\u8d70 ask sb to do sth ask sb not to do sth 41/42 Penny's bag cheese \u5976\u916a bread soap \u80a5\u7682 soup \u6c64 chocolate \u5de7\u514b\u529b sugar \u7cd6(\u767d\u7802\u7cd6) candy \u7cd6\u679c sugar coat \u59d4\u5a49 Can you sugar ciat a little? coffee \u5496\u5561 tea \u8336 tobacco \u70df\u8349 cigarette Not very \u4e0d\u662f\u975e\u5e38.... It is not very heavy? \u91cf\u8bcd(\u91cf\u8bcd\u672c\u8eab\u53ef\u4ee5\u662f\u590d\u6570\uff0c\u6bd4\u5982two bottles....\u3001two pieces of....): A piece of.... \u4e00\u7247 a loaf of... \u4e00\u4e2a\u3001\u4e00\u6761\u7684 a bar of.... \u4e00\u6761\u3001\u4e00\u5757\u7684 a bottle of.... \u4e00\u74f6\u7684.... a pound of .... \u4e00\u699c\u7684.... a tin of... \u4e00\u7f50\u7684.... a cup of....1 \u4e00\u676f... a box of.... \u4e00\u76d2... s spoon of... \u4e00\u52fa... half a pound of .... \u534a\u699c..... a quarter of a pound of .... \u56db\u5206\u4e4b\u4e00\u699c.... \u4e0d\u53ef\u6570\u540d\u8bcd \u6db2\u4f53\u72b6\u7684\u52a8\u8bcd\u3001water\u3001tea\u3001coffee\u3001milk\u3001beer \u7269\u8d28\u540d\u8bcd soap\u3001bread\u3001chocolate\u3001rice\u3001tobacco \u62bd\u8c61\u540d\u8bcd love\u3001friendship\u3001work\u3001homework \u4e0d\u53ef\u6570\u540d\u8bcd\u7528\u6cd5: 1. \u524d\u9762\u4e0d\u53ef\u4ee5\u52a0 one\u3001two\u3001three 2. \u524d\u9762\u4e0d\u53ef\u4ee5\u52a0 a\\an 3. \u540e\u9762\u4e0d\u53ef\u4ee5\u52a0s\u3001\u6c38\u8fdc\u662f\u5355\u6570 the beer\u3001the cheese\u3001some rice \u9700\u7528\u7528\u91cf\u8bcd\u642d\u914d: a piece of bread a loaf of bread a bar of soap a bottle of cola some vs any some\\any + \u590d\u6570\u540d\u8bcd\u6216\u4e0d\u53ef\u6570\u540d\u8bcd\u65f6\uff0c\u8868\u793a\u4e00\u4e9b\uff0c some\u7528\u5728\u80af\u5b9a\u53e5\u4e2d\uff0cany\u7528\u5728\u5426\u5b9a\u53e5\u4e2d\uff0c\u7591\u95ee\u53e5\u4e2d \u4f46\u662f\u5728\u8868\u8bf7\u6c42\u3001\u5efa\u8bae\u7684\u7591\u95ee\u53e5\u65f6\u7528some Could you lend me some money? any/some + \u5355\u6570\u540d\u8bcd\uff0csome\u7ffb\u8bd1\u4e3a\u67d0\u4e00\uff0cany\u7ffb\u8bd1\u4e3a\u4efb\u4e00 Some day\uff0che can be some one \u67d0\u4e00\u5929\uff0c\u4ed6\u53ef\u80fd\u79f0\u4e3a\u4e00\u4e2a\u4eba\u7269 people\u662f\u5355\u590d\u6570\u540c\u884c\u7684\u53ef\u6570\u540d\u8bcd few \u51e0\u4e4e\u6ca1\u6709\uff0c\u4fee\u9970\u53ef\u6570\u540d\u8bcd cake \u86cb\u7cd5\u3001(\u5c45\u7136\u662f\u53ef\u6570\u540d\u8bcd) bread \u9762\u5305(\u4e0d\u53ef\u6570\u540d\u8bcd) apple \u82f9\u679c(\u53ef\u6570\u540d\u8bcd) Five dollars is enough\uff0c\u8fd9\u91cc\u7528is\uff0c\u56e0\u4e3afive dollars\u662f\u4e00\u4e2a\u6574\u4f53 43/44 Hurry up of course certainly of course not \u5f53\u7136\u6ca1\u6709 kettle \u6c34\u58f6 behind teapot \u8336\u58f6 hot pot \u706b\u9505 now \u73b0\u5728\u3001\u6b64\u523b What are you doing now? I am learning English What are you going to do now? look Look! Can you see it? Listen! Can you hear it? Look for it! Can you find it? \u8868\u793a\u52a8\u4f5c: Look\u3001Listen\u3001Look for it! \u8868\u793a\u7ed3\u679c: see\u3001hear\u3001find boil \u6cb8\u817e\u3001\u5f00 boil an egg Hurry up! Be quick! make\u7684\u7528\u6cd5: make the tea \u6c8f\u8336 make some coffee make in bed What make is it? It's over there \u5c31\u5728\u90a3\u513f right here \u5c31\u5728\u8fd9\u513f Can you see it? Can you find it? look -> see listen -> hear look for -> find There it is -> It is there Here thery are -> They are here Here I am There he is \u53ef\u4ee5\u5417? Can\u53ef\u4ee5\u7528\u4e8e\u4efb\u4f55\u4eba\u79f0\uff0c\u4e0d\u7528\u8003\u8651\u4eba\u79f0\u548c\u5355\u590d\u6570 Can you....? Can she....? Can he.....? Can we...? Can they...? can + \u52a8\u8bcd\uff0c\u4e14\u662f\u539f\u578b Can you help me? Can you do it? Can we swim together? Can you make the tea? Can you see it? Can you find them? knife -> knives (fe\u7ed3\u5c3e\uff0c\u53d8\u6210ves) box -> boxes (\u4ee5s\u3001sh\u3001x \u3001ch\u7ed3\u5c3e\u7684 + es/iz/) loaf -> loafies (f\u7ed3\u5c3e\uff0c\u53d8\u6210ves) shelf -> shelves f\u7ed3\u5c3e\uff0c\u53d8\u6210ves) wife -> wives (fe\u7ed3\u5c3e\uff0c\u53d8\u6210ves) dish -> dishes (\u4ee5s\u3001sh\u3001x \u3001ch\u7ed3\u5c3e\u7684 + es/iz/) bus -> buses (\u4ee5s\u7ed3\u5c3e\uff0c\u53d8\u6210es) Are there any + \u590d\u6570 ? Is there any + \u4e0d\u53ef\u6570\u540d\u8bcd? \u6709: 1. \u62e5\u6709 have 2. \u5b58\u5728 there is/are Do you have a boyfriend? \u8fd9\u91cc\u662f\u62e5\u6709\u7684\u5173\u7cfb Do you have any monry? Are there any trees? Are there any buildings? look for \u5bfb\u627e find \u627e\u5230 find out \u627e\u51fa look at \u770b must\u7684\u5426\u5b9a\u5f62\u5f0f\u662fneed't may\u8868\u793a\u53ef\u4ee5\u65f6\uff0c\u5b83\u7684\u53cd\u4e49\u8bcd\u65f6mustn't 45/46 The boss's letter can \u80fd\u591f\uff0c\u53ef\u4ee5 boss \u8001\u677f manager \u7ecf\u7406 minute wait a minute \u7b49\u4e00\u4f1a ask \u8bf7\u6c42\u3001\u8be2\u95ee ask the way \u95ee\u8def handwriting \u4e66\u5199 terrible \u7cdf\u7cd5\u7684 Can you come here a minute please? a minute \u4e00\u4f1a\u3001\u4e00\u4e0b next door \u5728\u9694\u58c1\u3001\u4e0e...\u76f8\u90bb She is next door She is next door to us There is a school next door to the park next door to.... \u4e0e\u4ec0\u4e48,..\u76f8\u90bb next-door \u9694\u58c1\u7684(adj) The next-door girl is very beautiful The old man next-door is going to leave \u60c5\u6001\u52a8\u8bcd: \u6982\u5ff5: \u8868\u793a\u60c5\u611f\u3001\u6001\u5ea6 You must go out! Can you please stand up? \u5305\u62ec: can\u3001must\u3001may... \u7528\u6cd5: +\u52a8\u8bcd\u3001\u4e14\u539f\u578b He can do/read/write it \u6ca1\u6709\u4eba\u79f0\u548c\u6570\u7684\u53d8\u5316 \u7591\u95ee\u53e5\uff0c\u60c5\u6001\u52a8\u8bcd\u63d0\u524d \u5426\u5b9a\u53e5: can-can't, cannot(\u5fc5\u987b\u5408\u5e76\u5728\u4e00\u8d77\u5199\uff0c\u4e0d\u80fd\u7528can not) must->mustn't(\u7981\u6b62) may->may not \u6ca1\u6709\u5fc5\u8981: don't need to lift \u4e3e\u8d77 cake \u997c\u3001\u86cb\u7cd5 biscuit \u997c\u5e72 Can you lift this heavy case? \u8fde\u7cfb\u52a8\u8bcd \u60c5\u6001\u52a8\u8bcd \u5b9e\u4e49\u52a8\u8bcd \u52a9\u52a8\u8bcd can\u5728\u53e3\u8bed\u4e2d\u7684\u5e94\u7528: Can I help you? Can't wait! I can't help! \u6ca1\u6cd5\u5b50 Can you give me a hand? \u53ef\u4ee5\u51fa\u624b\u5e2e\u5fd9\u5417? can \u53ef\u4ee5\u3001\u80fd\u591f must \u5fc5\u987b have to \u4e0d\u5f97\u4e0d need to \u9700\u8981 can't \u4e0d\u80fd\u591f needn't \u6ca1\u5fc5\u8981 \u8868\u793a\u731c\u6d4b\u7528can may it be true? \u8fd9\u53ef\u80fd\u662f\u771f\u7684\u5417? look\u76f8\u5173\u7684\u8bcd\u7ec4: look after \u7167\u987e look around \u73af\u89c6 look up \u5411\u4e0a\u770b look for \u5bfb\u627e hardly \u51e0\u4e4e\u4e0d ever \u6c38\u8fdc\u3001\u66fe\u7ecf almost \u51e0\u4e4e\u3001\u5dee\u4e0d\u591a\u3001\u5c06\u8fd1\u3001\u5feb\u8981 47/48 A couple of coffee fresh \u65b0\u9c9c\u7684\uff0cthe fresh air egg \u9e21\u86cb butter \u9ec4\u6cb9\uff0c\u4e0d\u53ef\u6570 pure \u7eaf\u51c0\u7684 honey \u8702\u871c ripe \u6210\u719f\u7684 banana \u9999\u8549 jam \u679c\u9171 traffic jam sweet \u751c\u7684 her sweet voice \u4ed6\u751c\u7f8e\u7684\u55d3\u97f3 orange \u6a59\u5b50 choice \u4e0a\u7b49\u7684\uff0c\u7cbe\u9009\u7684 like I like playing(\u4e0d\u80fd\u6709\u4e24\u4e2a\u52a8\u8bcd\uff0c\u8981\u5f31\u5316) football want think I want a new car I want to buy a new car I want to go shoping I want to swim Do you want any sugar? Yes, please Do you want any milk? No, thank you I don't like milk in my coffee I don't like English in Chinese Are they happy? Are they students? Are they on the subway? Are they + n/adj/\u4ecb\u8bcd\u77ed\u8bed \u5bf9\u4e8e\u52a8\u8bcd\u63d0\u95ee\uff0c\u4f7f\u7528Do. Do you like coffee? \u73b0\u5728\u8fdb\u884c\u65f6: \u4e3b\u8bed + is/am/are + doing You are eating breakfast Are you eating breakfast? The apple of one's eyes \u638c\u4e0a\u660e\u73e0 the big apple \u7ebd\u7ea6\u5e02 Adam's apple \u7537\u6027\u7684\u5589\u7ed3 \u540d\u8bcd\u7684\u590d\u6570\u5f62\u5f0f\u8868\u793a\u4e00\u7c7b\u4eba\u6216\u8005\u4e00\u7c7b\u4e8b\u7269? Which do you like better? Biscuits or breads? choice \u7cbe\u9009\u7684\u3001\u4e0a\u7b49\u7684\u3001\u6781\u597d\u7684 new \u65b0\u7684 red \u7ea2\u7684 ripe \u719f\u7684 49/50 butcher \u5356\u8089\u8005 at the butcher's at the doctor's at the hairdresser's at the baker's meet \u8089\uff0c\u4e0d\u53ef\u6570\u540d\u8bcd beef \u725b\u8089 lamb \u7f94\u7f8a\u8089 mutton \u7f8a\u8089 steak \u725b\u6392 a piece of steak mince \u8089\u9985 chicken pork \u732a\u8089 husband wife tell tell sb sth \u544a\u8bc9\u67d0\u4eba\u67d0\u4e8b To tell you the truth truth \u5b9e\u60c5 either \u4e5f I don't know either \u4e00\u822c\u73b0\u5728\u65f6\u6001: \u4f55\u65f6\u7528 \u7ecf\u5e38\u7684\u72b6\u6001 \u4e60\u60ef\u7684\u52a8\u4f5c \u771f\u7406 \u7ed3\u6784 \u7ecf\u5e38\u7684\u72b6\u6001: \u4e3b\u8bed + is/am/are \u4e60\u60ef\u7684\u52a8\u4f5c: \u4e3b\u8bed + v(\u52a8\u8bcd) \u771f\u7406: \u4e3b\u8bed + is/am/are \u6216 \u4e3b\u8bed + v(\u52a8\u8bcd) \u52a8\u8bcd \u4e3b\u8bed + \u52a8\u8bcd(v) * \u4e3b\u8bed\u4e3a\u975e\u4e09\u5355 + \u52a8\u8bcd\u539f\u578b * \u4e3b\u8bed\u4e3a\u4e09\u5355 + \u52a8\u8bcds\\es \u7b2c\u4e00\u4eba\u79f0 I(\u5355\u6570\u5f62\u5f0f)\u3001we(\u590d\u6570\u5f62\u5f0f) \u4e3b\u683c\u5f62\u5f0f| me\u3001us \u5bbe\u683c\u5f62\u5f0f \u7b2c\u4e8c\u4eba\u79f0 you(\u5355\u590d\u6570\u540c\u578b) \u5bbe\u683c\u548c\u4e3b\u683c\u540c\u578b \u7b2c\u4e09\u4eba\u79f0 he\u3001she\u3001it\u3001They(\u590d\u6570\u5f62\u5f0f) \u4e3b\u683c\u5f62\u5f0f| him\u3001her\u3001them \u5bbe\u683c\u5f62\u5f0f He loves his girfriend very much Jim and Lily walk to school every day They drink beer beer every night My dog watches TV at night She goes to school on foot \u7591\u95ee Thery drink beer every night? Do thery drink beer every night? He loves his girfriend very much Does he love his girlfriend very much? \u5426\u5b9a don't \u6765\u5426\u5b9a Do you want ant meat....? tomato potato cabbage lettuce pea bean pear grape peach 51/52 the U.S. \u7f8e\u56fd the United States of America American \u7f8e\u56fd\u4eba Brazil \u5df4\u897f Holland \u8377\u5170 Dutch \u8377\u5170\u4eba England \u82f1\u56fd English \u82f1\u56fd\u4eba Italy \u610f\u5927\u5229 Italian \u610f\u5927\u5229\u4eba Norway \u632a\u5a01\u4eba Russia \u4fc4\u7f57\u65af\u3001\u4fc4\u7f57\u65af\u4eba Spain \u897f\u73ed\u7259 Spanish \u897f\u73ed\u7259\u4eba Greece \u5e0c\u814a Greek \u5e0c\u814a\u4eba Athens \u96c5\u5178 climate \u6c14\u5019 (\u5f88\u957f\u4e00\u6bb5\u65f6\u95f4\u4f53\u73b0\u51fa\u6765\u7684\u6c14\u5019\u7279\u70b9) weather \u5929\u6c14(\u4e00\u5929\u7684\u6c14\u5019) pleasant \u5b9c\u4eba\u7684 a pleasant manner \u968f\u548c\u7684\u6001\u5ea6 a pleasant dream \u7f8e\u68a6 like\uff0c\u50cf What's the climate like? \u7b49\u540c\u4e8e\u4e0a\u9762\u7684What's.... How's the climate? How's the weather? How's her boyfriend? How's your boss? What's the climate like in .... + \u56fd\u5bb6/\u57ce\u5e02/\u5b63\u8282/\u6708\u4efd? It's often sunny in March It's + \u5929\u6c14\u5f62\u5bb9\u8bcd + in .... It + \u5929\u6c14\u52a8\u8bcd + in ..... \u4e00\u822c\u73b0\u5728\u65f6: \u7ecf\u5e38\u7684\u72b6\u6001 \u4e3b\u8bed + is/am/are .... \u4e60\u60ef\u7684\u52a8\u4f5c \u4e3b\u8bed + v \u771f\u7406 \u8fd9\u91cc\u51ac\u5929\u7ecf\u5e38\u662f\u96ea\u5929 It's often snowy in winter here \u8fd9\u91cc\u51ac\u5929\u7ecf\u5e38\u4e0b\u96ea It often snows in winter here at / on / in + \u65f6\u95f4 at + \u70b9 at 2:00 at 4:00 on + \u5929 on Sunday on Jan.7th in + \u6708/\u5b63/\u5e74(\u6301\u7eed\u7684\u65f6\u95f4) sometimes \u6709\u65f6\u3001\u9891\u5ea6\u526f\u8bcd He is sometimes late sometime \u67d0\u65f6\u3001\u526f\u8bcd I hope to see you again sometime some time \u4e00\u6bb5\u65f6\u95f4 I takes me some time to get there 53/54 mild \u6e29\u548c\u7684 spicy food \u8f9b\u8fa3\u7684\u98df\u7269 north east west south be in the south of A\uff0c\u5728A\u7684\u5357\u90e8 be to the south of A\uff0c\u5728A\u5916\u7684\u5357\u90e8 news (north\u3001ease\u3001weat\u3001 south) \u65b0\u95fb\u3001\u6d88\u606f East\u3001west\u3001home is best \u91d1\u7a9d\u94f6\u7a9d\uff0c\u4e0d\u5982\u81ea\u5df1\u7684\u8349\u7a9d wet \u6f6e\u6e7f\u7684 weep \u6d41\u6cea wave \u6ce2\u6d6a wine \u7ea2\u9152 wash \u6e05\u6d17 season \u5b63\u8282 best \u6700(adv)\u3001\u6700\u597d\u7684(adj) I like green best (\u884c\u5bb9\u8bcd\u524d\u3001\u52a8\u8bcd\u540e -> \u526f\u8bcd\u7684\u4f4d\u7f6e) I like beijing best night \u591c\u665a evening \u508d\u665a rise \u5347\u8d77 set \u843d\u4e0b early \u65e9\u7684 late \u665a\u7684 subject \u79d1\u76ee\u3001\u8bdd\u9898 what's the climate\\weather like in + (\u6708\u4efd\u3001\u5b63\u8282\u3001\u5730\u70b9) \u63cf\u8ff0\u5929\u6c14\u7684\u53e5\u5b50: It is ... in ... It is terrible in spring It is dry in the west It is pleasant in Xiamen Which seasons do you like best? Which are your favorite aseasons? \u9891\u7387\u526f\u8bcd: never seldom sometimes often usually always \u9891\u7387\u526f\u8bcd\u7684\u4f4d\u7f6e: \u60c5\u3001\u7cfb\u540e\uff0c\u5b9e\u4e49\u524d He is always late He often writes love letters to girls \u8868\u8fbe\u5f3a\u8c03\u65f6\uff0c\u53ef\u8c03\u6574\u4f4d\u7f6e I can never remember I never can remember (\u8c03\u6574\u4f4d\u7f6e) \u8c08\u8c08\u5929\u6c14: sunny/clear \u6674\u6717 rain showers \u9635\u96e8 light snow \u5c0f\u96ea mostly cloudy \u5927\u90e8\u591a\u4e91 partly windy \u5c40\u90e8\u6709\u98ce \u96fe\u973e haze sandstorm \u6c99\u5c18\u7206 The weather is bad/terrible I am crazy about..... south by east \u5357\u504f\u4e1c in season \u5f53\u4eca\u3001\u65fa\u5b63 out of season \u6de1\u5b63 make the best of \u5c3d\u91cf\u5229\u7528 best of all \u6700\u559c\u6b22 at the best \u5145\u5176\u91cf\u3001\u81f3\u591a at one's best \u5174\u76db\u5230\u6781\u70b9 day and night, night and day \u591c\u4ee5\u7ee7\u65e5\u7684 by night \u5728\u591c\u95f4 on the rise \u5728\u589e\u957f rise from the dead \u6b7b\u800c\u590d\u751f give rise to \u5f15\u8d77 rise up \u8d77\u4e49 in the early seventies from the earliest times at the earliest set about \u7740\u624b\u3001\u5f00\u59cb set aside \u62d4\u51fa\u3001\u6311\u51fa\u3001\u7559\u51fa set back \u63a8\u8fdf\u3001\u5ef6\u7f13 set down \u653e\u5728\u3001\u8bb0\u4e0b set forth \u9648\u8ff0 set off \u52a8\u8eab\u3001\u51fa\u53d1 be different from \u4e0e...\u4e0d\u540c \uff0c\u540e\u9762\u63a5\u7684\u662f\u6bd4\u8f83\u7684\u5bf9\u8c61 A is different from B be different in \u5728...\u65b9\u9762\u4e0d\u540c\uff0cin\u540e\u9762\u63a5\u6bd4\u8f83\u7684\u90a3\u65b9\u9762\u3002 The difference in price was enormous. 55/56 live live + at (\u975e\u5e38\u5c0f\u7684\u5730\u65b9) live + in (\u76f8\u5bf9\u5927\u7684\u5730\u65b9) She lives at 23 Haidian Street I live in Beijing evil adj \u90aa\u6076\u7684 stay \u77ed\u6682\u505c\u7559 stay + at (\u975e\u5e38\u5c0f\u7684\u5730\u65b9) stay + in (\u5927\u7684\u5730\u65b9) stay at home stay at hotel stay in New York arrive arrive + at (\u5c0f\u7684\u5730\u65b9) arrive + in (\u5927\u7684\u5730\u65b9) I arrive at the classroom early I arrive in Shanghai late housework \u4e0d\u53ef\u6570\u540d\u8bcd homework\u5bb6\u5ead\u4f5c\u4e1a do some housework/homework lunch breakfast dinner/supper \u665a\u996d eat/hash breakfast/launch/dinner/supper noon \u6b63\u5348 morning \u65e9\u6668 evening \u508d\u665a night \u591c\u665a in the moring/afternoon/evening at night at noon an evening dress 7, usually \u526f\u8bcd together adv \u4e00\u8d77 \u5317\u4eac\u5e02\u671d\u9633\u533a\u5e78\u798f\u88574\u53f7 4 Xingfu Street, Chanyang District Beijing \u4ece\u5c0f\u5230\u5927\u8bf4 \u52a8\u8bcd\u77ed\u8bed: go to work go to school take sb to ... stay at home see her friends come home from work come home from school go to bed read newspaper watch television home go to school go to work go to bed go to Shanghai go home/arrive home/come home\uff0c\u4e2d\u95f4\u6ca1\u6709to adv\u526f\u8bcd\u7528\u6765\u4fee\u9970\u52a8\u8bcd\uff0chome\u5f53\u526f\u8bcd\u7528\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u76f4\u63a5\u653e\u5728\u52a8\u8bcd\u540e\uff0c\u800c\u4e0d\u7528\u52a0\u4ecb\u8bcdto This is my home \u8868\u793a\u5730\u70b9\u7684\u526f\u8bcd: home there here upstairs downstairs \u52a8\u8bcd\u548c\u8fd9\u4e9b\u5730\u70b9\u526f\u8bcd\u642d\u914d\uff0c\u76f4\u63a5\u653e\u5728\u52a8\u8bcd\u540e\u9762 \u540d\u8bcd\u7684\u590d\u6570: 1. +s 2. \u8f85\u97f3 + y-ies ladies 3. s/sh/ch/x + es watches/buses/dishes 4. o + es potatoes \u52a8\u8bcd\u7684\u7b2c\u4e09\u4eba\u79f0\u5355\u6570: 1. +s 2. \u8f85\u97f3+y-ies 3. s/sh/ch/x + es passes 4. o + es goes \u5f3a\u8c03\u4e3b\u8bed(\u91cd\u590d\u63d0\u53ca\u4e3b\u8bed) She always eats her lunch The children always do their homework Mr Sawer usually reads his newspaper 57/58 o'clock \u6574\u70b9 shop \u5546\u5e97(\u89c4\u6a21\u6bd4\u8f83\u5c0f) department store \u767e\u8d27\u5546\u5e97 moment wait a second wait a moment wait a minute She is learning English at a moment It is ..... \u5929\u6c14 It is terriable in spring \u70b9\u949f It is eight now \u7535\u8bdd It's me, Venus \u4ea4\u901a\u65b9\u5f0f: on foot by bike by bus by car by train by air How do you go to school? Ther are going to school on foot \u4e00\u822c\u73b0\u5728\u65f6 vs \u73b0\u5728\u8fdb\u884c\u65f6 \u4f7f\u7528\u60c5\u51b5\u4e0d\u540c \u4e00\u822c\u73b0\u5728\u65f6: \u4e60\u60ef\u7684\u72b6\u6001\u3001\u7ecf\u5e38\u7684\u52a8\u4f5c\u3001\u771f\u7406 \u73b0\u5728\u8fdb\u884c\u65f6: \u6b64\u65f6\u6b64\u523b\u6b63\u5728\u505a\u3001\u4e00\u6bb5\u65f6\u95f4\u5185\u4e00\u76f4 \u7ed3\u6784\u4e0d\u540c \u4e00\u822c\u73b0\u5728\u65f6: \u4e3b\u8bed + is/am/are, \u4e3b\u8bed+v(\u52a8\u8bcd\u539f\u578b) \u73b0\u5728\u8fdb\u884c\u65f6: \u4e3b\u8bed + is/am/are + doing \u65f6\u95f4\u72b6\u8bed\u4e0d\u540c \u4e00\u822c\u73b0\u5728\u65f6 every\u3001always\u3001usually\u3001often\u3001sometimes \u73b0\u5728\u8fdb\u884c\u65f6: now\u3001at the moment what's the time? what time is it? \u8fde\u8bfb(\u4e00\u8f85\u4e00\u5143\uff0c\u524d\u8f85\u540e\u5143): it is -> it is (t\u548ci\u8fde\u8bfb) an orange put on stop it take off come on in live at clean it up \u7701\u8bfb: sit down part time big cake but now good moring not that one good night bookcase \u53e3\u8bed\u4e60\u60ef: I'm gonna sit down on the grass (gonna -> going to) I want to put on my shirt(want to -> wanna) 59/60 envelope \u4fe1\u5c01 writing paper \u4fe1\u7eb8(\u4e0d\u53ef\u6570) a piece of writing paper shop assisant \u552e\u8d27\u5458 S\u3001M\u3001L XS -> extra small small/medium/large size size 6/7 \u53cd\u8fc7\u6765\u8bf4\uff0c7\u7801 class 2 \u4e8c\u73ed line 10 \u5341\u53f7\u7ebf a bottle of glue a stick of chalk / a box of chalk change \u96f6\u94b1 keep the change \u4e0d\u7528\u627e\u96f6\u4e86 \u4e70\u4e1c\u897f\u7528\u6765\u8be2\u95ee\u7684\u53e5\u578b: I want some...../I want a .... Do you have any...? n + please only adv(\u4ec5\u4ec5\u3001\u53ea\u6709) I have two watches I only have two watches I have only two watches \u4f7f\u7528\u573a\u666f: That's all thank you \u53d1\u97f3\u5b8c\u6bd5 \u8bb2\u8bfe\u7ed3\u675f\u65f6 \u8d2d\u7269\u65f6 what else? Do you have any...? \u53ef\u6570\u540d\u8bcd Do you have any friends/envelopes/bananas/.... \u4e0d\u53ef\u6570\u540d\u8bcd Coffee\\tea\\time.... Do you have any shorts I want some shorts, please Yes what size do you want? I want medium size Can I have a try? \u6211\u53ef\u4ee5\u8bd5\u7a7f\u5417? Yes of course Ok this pair please 61/62 feel \u611f\u89c9\u3001look \u770b\u8d77\u6765 \u611f\u5b98\u52a8\u8bcd must call \u53eb\u3001\u8bf7 telephone \u7535\u8bdd \u6253\u7535\u8bdd\u7684\u51e0\u79cd\u8bf4\u6cd5: call sb phone sb give sb a call give sb a phone remember \u8bb0\u4f4f\u3001\u8bb0\u5f97 tongue \u820c\u5934 tongue twister \u7ed5\u53e3\u4ee4 a cold handshake a cold color a piece of news in bed \u751f\u75c5\u5367\u5e8a He is in the bed \u4ed6\u5728\u5e8a\u4e0a He is in bed \u4ed6\u5367\u75c5\u5728\u5e8a in the hospital in hospital sb\u600e\u4e48\u6837? what's the matter with him? what's wrong with sb? what's up? So he muts stay in bed for a week (\u6301\u7eed\u4e00\u4e2a\u661f\u671f\uff0c\u9700\u8981\u52a0for) That's good news for Jimmy (for \u5bf9\u4e8e\u67d0\u4eba\u6765\u8bf4) English is very easy for me \u611f\u5b98\u52a8\u8bcd: \u534a\u7cfb\u52a8\u8bcd(\u7528\u5f62\u5bb9\u8bcd\u6765\u4fee\u9970\uff0c\u548c\u7cfb\u52a8\u8bcd\u63a5\u8fd1)\uff0c\u4e00\u534a\u5b9e\u4e49\u52a8\u8bcd(\u65f6\u6001\u4eba\u79f0\u5355\u590d\u6570\u7b49\u53d8\u5316\u548c\u5b9e\u4e49\u52a8\u8bcd\u4e00\u81f4\uff0c\u7528\u526f\u8bcd\u4fee\u9970) headache earache toothache stomach ache have a xxxache flu \u6d41\u611f bird flu swine flu have flu/have bird flu measles \u9ebb\u75b9 have measles mumps dentist \u7259\u533b scientist tourist typist medicine \u836f He has a headache What must he do? He must take an aspirin The baby has a temperature what must we do? He must see the doctor He is under the weather He has a runny nose\u3001sneezing or a scratchy throat He has an allergy I'm troubled by ... \u5e38\u7528\u60a3\u75c5\u7684\u8bcd: have/has take/catch get... suffer from... 63/64 better certainly adv \u5f53\u7136 get up go to bed / go to sleep yet adv \u8fd8\u3001\u4ecd rich \u6cb9\u817b\u7684\u3001\u5bcc\u6709\u7684 rich food \u6cb9\u817b\u7684\u98df\u7269 mild food \u6e05\u6de1\u7684\u98df\u7269 spicy food \u8f9b\u8fa3\u7684\u98df\u7269 green food \u7eff\u8272\u98df\u54c1 fast food \u5feb\u9910 sea food \u6d77\u9c9c \u4fee\u9970\u611f\u5b98\u52a8\u8bcd\uff0c\u9700\u8981\u7528\u5f62\u5bb9\u8bcd(\u7c7b\u4f3c\u7cfb\u52a8\u8bcd) yet \u5426\u5b9a\u7591\u95ee\u53e5\u672b mustn't \u7edd\u5bf9\u4e0d You are better now, but you mustn't go to school yet You must stay in bed two days again(\u5f3a\u8c03\u518d\u6765\u4e24\u5929\uff0c\u800c\u4e0d\u662f\u518d\u5367\u5e8a\u3002\u6240\u4ee5\u4e0d\u80fd\u7528again) You must stay in bed for another two days I must stay in BJ for another two weeks We must study English for another two years \u53d1\u70e7 1. have a fever 2. have a temperature He has a ferver Do you have a fever? Does he have a fever? I don't have a fever He doesn't have a fever \u5367\u5e8a stay in bed remain in bed He every day can get up about two hours (\u91cd\u70b9\u662f\u4ed6\u53ef\u4ee5\u8d77\u5e8a\uff0c\u800c\u4e0d\u662fevery day) He can get up for(\u957f\u8fbe + \u65f6\u95f4\u6bb5) about two hours every day \u82f1\u6587\u4e2d\uff0c\u8981\u7a81\u51fa\u8c01\u3001\u505a\u4e86\u4ec0\u4e48 each day(\u5f3a\u8c03\u4e2a\u4f53) vs every day(\u5f3a\u8c03\u6574\u4f53) Hi every one! Each man has his own name You(\u4e3b) must(\u60c5\u6001\u52a8\u8bcd) keep(\u52a8\u8bcd) the room(\u5bbe\u8bed) warm (\u5bbe\u8865) must: \u7591\u95ee: Must I clean the room? \u5426\u5b9a: 1. You mustn't make noise here 2. I don't need to clean the room \u4e0d\u5fc5 play: play games/play the violin/play football/play basketball match: \u706b\u67f4 matches \u590d\u6570 talk: talk to sb \u4e0e....\u8c08\u8bdd Don't talk to me like that!/Don't talk to strangers library: in the library so: adv \u5982\u6b64\u5730 so beautiful/ so much lean out of: \u8eab\u4f53\u63a2\u51fa\u3001\u63a2\u8eab\u51fa\u53bb lean out of the window have/make/take/get 65/66 Dad key \u94a5\u5319 \u53ef\u6570\u540d\u8bcd the key to the door \u95e8\u7684\u94a5\u5319 the key to the car the color of the book baby \u5a74\u513f\u3001\u5b9d\u8d1d baby-kid(child)-teenager baby, honey, sweetheart listen(\u542c) vs hear(\u542c\u89c1) Listen! Can you hear it? Look(\u770b) vs See(\u770b\u89c1) enjoy \u73a9\u7684\u5f00\u5fc3\u3001\u559c\u6b22 I enjoy my holiday I enjoy the song very much en-\u4f7f\u5f97\u7684\u8bcd\u524d\u7f00 enlarge\u3001endanger\u3001enslave\u3001enjoy mum \u5988\u5988 You must be(\u60c5\u6001\u52a8\u8bcd+be\u52a8\u8bcd\u539f\u5f62) home at half past ten \u56de\u5bb6: 1. be home 2. get home 3. come home 4. arrive home \u8fd9\u4e9bhome\u90fd\u662f\u526f\u8bcd\u53ef\u4ee5\u76f4\u63a5\u4fee\u9970\u52a8\u8bcd\uff0c\u5982\u679c\u662f\u540d\u8bcd\u9700\u8981\u6709\u4ecb\u8bcd\u642d\u914d(go to(\u642d\u914d\u4ecb\u8bcd) school) the answer to the question the exit to the building the ticket to the movie 67/68 greengrocer at the greenhgrocer's at the butcher's at the doctor's at the grocer's absent He is absent today He is absent from school today be absent from school\\work\\class She is not absent from work keep keep healthy \u4fdd\u6301\u5065\u5eb7 spend \u52a8\u8bcd He stays in Beijing for two days He spends two days in Beijing. \u4e00\u822c\u60c5\u51b5\uff0c\u65f6\u95f4\u548c\u5730\u70b9\u540c\u65f6\u51fa\u73b0\u7684\u65f6\u5019\uff0c\u5730\u70b9\u5728\u524d\uff0c\u65f6\u95f4\u5728\u540e\uff0cspend\u5728\u76f8\u53cd spend + \u65f6\u95f4 + \u5730\u70b9 spend + \u65f6\u95f4 + with sb He spends two weeks with his girlfriend country in the country \u5728\u4e61\u4e0b in the city \u5728\u57ce\u91cc in the village \u5728\u6751\u91cc in my country \u5728\u6211\u7684\u56fd\u5bb6 village vs country lucky adj \u5e78\u8fd0\u7684 You are so lucky! You are a lucky dog. \u661f\u671f Sunday (Sun) Monday (Mon) Tuesday (Tues) Wednesday (Wed) Thursday (Thu) Friday (Fri) Saturday (Sat) \u4e00\u4e2a\u661f\u671f\u7684\u5f00\u59cb\u662fSunday \u661f\u671f\u9700\u8981\u9996\u5b57\u6bcd\u5927\u5199 on + \u5929 Where(\u8fc7\u53bb\u5f0f) you at the butcher's? \u4f60\u521a\u5728\u8089\u5e97\u5417? Are you at the butcher's? \u4f60\u73b0\u5728\u5728\u8089\u5e97\u5417? How's jmmy today? How's (is/was/has) Was he absent from school last week? He was absent from last week \u4e00\u822c\u9648\u8ff0\u53e5 How are you(all keeping)? We're going to spend three days at my mother's at the butcher's Aren't you lucky! \u4f60\u4eec\u53ef\u771f\u5e78\u8fd0\u554a","title":"READMEN"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/READMEN/#_1","text":"\u4e00\u8f85\u4e00\u5143\u3001\u524d\u8f85\u540e\u5143 Aa \\\u00e6\\ \u5143\u97f3 \u4e91\u97f3\u5b57\u6bcd: Aa\u3001Ee\u3001li\u3001Oo\u3001Uu Bb \\b\\ Cc \\k\\ \\s\\ \u6709\u4e24\u4e2a\u53d1\u97f3 cap \\c\u00e6p\\ cat \\c\u00e6t\\ can \\c\u00e6n\\ \u5f53\u540e\u9762\u63a5\u7684\u662fe\u3001i\u3001y\u7684\u65f6\u5019\uff0c\u53d1\\s\\ cell \\sel\\ cyber \\sa\u026ab\u0259r\\ city \\s\u026ati\\ candy \\k\u00e6ndi\\ Dd \\d\\ dad \\d\u00e6d\\ damn\\d\u00e6m\\ dance \\d\u00e6ns\\ cad \\k\u00e6d\\ Ee \\e\\ \u5143\u97f3 bed \\bed\\ beg \\beg\\ det \\det\\ Ed \\ed\\ \u4e0d\u53ef\u4ee5\u62fc\u8bfb\u3001\u8f85\u97f3\u5728\u524d\u3001\u4e91\u97f3\u5728\u540e\u624d\u53ef\u4ee5\u62fc\u8bfb Ff \\f\\ fat \\f\u00e6t\\ fend \\fend\\ fans \\f\u00e6ns\\ fax \\f\u00e6ks\\ Gg \\g\\ gab \\g\u00e6b\\ get \\g\u00e6t\\ gas \\g\u00e6s\\ Hh \\h\\ hat \\h\u00e6t\\ hand \\h\u00e6nd\\ hen \\hen\\ has \\h\u00e6z\\ li \\I\\ \u5143\u97f3 dig \\dIg\\ sit \\sIt\\ fit \\fIt\\ if \\If\\ Jj \\d\u0292\\ jam \\d\u0292\u00e6m\\ jack \\d\u0292\u00e6k\\ jelly \\d\u0292elI\\ jill \\d\u0292I\\ Kk \\k\\ kathy \\k\u00e6..\\ kettle \\ketl\\ kiss \\kis\\ kick \\kIk\\ ck\u5728\u4e00\u8d77\u7684\u65f6\u5019\u53d1\u97f3\\k\\ Ll \\l\\ leg \\leg\\ lips \\lIps\\ flag \\fl\u00e6g\\ last \\ll\u00e6\\ \u6ca1\u6709\u4e91\u97f3\u5b57\u6bcd\u7684\u65f6\u5019\u7684\u53d1\u97f3 xx Jill bell fell girl Mm \\m\\ math \\m\u00e6e\\ mem \\men\\ map \\m\u00e6p\\ miss \\mis\\ Nn \\n\\ net \\net\\ neck \\nek\\ ck\u7ec4\u5408\u53d1\u97f3\\k\\ Nick \\nik\\ nill \\nil\\ \u6ca1\u6709\u4e91\u97f3\u5b57\u6bcd\u7684\u65f6\u5019\u7684\u53d1\u97f3 xx man \\m\u00e6n\\ hen \\hen\\ ben \\ben\\ dance \\d\u00e6ns\\ Oo \\\u028a\\ \u5143\u97f3 on \u65e0\u6cd5\u62fc\u8bfb Pp \\p\\ pants \\p\u00e6nts\\ pig \\pig\\ pop \\p\u028ap\\ pen \\pen\\ Qq \\kw\\ \u4e0d\u5355\u72ec\u51fa\u73b0\u4e00\u822c\u540e\u9762\u63a5u -> \\kw\\ quiz \\kwiz\\ quick \\kwik\\ quit \\kwit\\ question \\kwes...\\ Rr \\r\\ rock \\r\u028ak\\ rat \\r\u00e6t\\ red \\red\\ rabbit \\r\u00e6bit\\ \u4e24\u4e2a\u76f8\u540c\u7684\u8f85\u97f3\u5728\u4e00\u8d77\uff0c\u53ea\u53d1\u4e00\u4e2a\u97f3 \u7ec3\u4e60 rob quell object frog map grip horrid jog Ss \\s\\ sam \\s\u00e6m\\ sit \\sit\\ set \\set\\ soft \\s\u028aft\\ Tt \\t\\ tag top ten pot Uu \\^\\ \u5143\u97f3 but cup fun Vv \\v\\ very vivid van vomit \\'v\u028amit\\ voice venuse \u5728\u4e00\u4e2a\u6b21\u62fc\u4e86\u4e24\u6b21\u6216\u4ee5\u4e0a\u65f6\uff0c\u9700\u8981\u51fa\u73b0\u91cd\u8bfb \u7ec3\u4e60: rest public hump hug valid self tent optic Ww \\w\\ wet watch \u53d1\u97f3\u6bd4\u8f83\u7279\u6b8a\uff0ct\u6ca1\u6709\u53d1\u97f3 win where h\u6ca1\u6709\u53d1\u97f3 Xx \\ks\\ ax box fox exit Yy \\j\\ \\I\\ \u534a\u5143\u97f3\uff0c\u53ef\u4ee5\u662f\u8f85\u97f3\u3001\u4e5f\u53ef\u4ee5\u662f\u5143\u97f3 yes yam yet \u7ed3\u5c3e\u7684\u65f6\u5019\u53d1\u5143\u97f3 yellow happy family city Zz \\z\\ zip zest zigzag quiz \u7ec3\u4e60: rust sex mix vanity muggy Lily fix liquid \u5b57\u6bcd\u7ec4\u5408: ea \\i:\\ ee \\i:\\ tea clean eat sweet beef feet sleep deed vs did seat vs sit seek vs sick ir \\\u025c\u02d0\\ er \\\u025c\\ (\u4e00\u822c\u5728\u5355\u8bcd\u5c3e) sir bird firm girl dancer cleaner sister summer \\a:\\ ar |^| hard farm bar mark cart vs cut barge vs budge \u7ec3\u4e60: feel farmer girder tariff neat ugly aw, au \\\u0254\u02d0\\ law raw paw saw daughter saucer er\u53d1\u97f3\\\u025c\\ because ght \\t\\ bought fight brought right oo \u5728\u5b57\u6bcdk\\d\u4e4b\u524d \\\u028a\\ look book good wood \u4f8b\u5916: food \\fu: d\\ oo \u5728\u5b57\u6bcdt\u524d \\u:\\ tooth boot shoot loot \u4f8b\u5916: foot \\f\u028at\\ \u5176\u4ed6\u65e0\u6cd5\u5f52\u7c7b\u7684: zoo too oops ea \\e\\ head bread weather dead \u7ec3\u4e60: jean hook bawl goose caught opt cook audibility a-e \\e\u026a\\ \u5143 + \u8f85 + e (\u5143\u97f3\u5b57\u6bcd\u53d1\u81ea\u5df1\u7684\u672c\u97f3\u3001e\u4e0d\u53d1\u97f3) take name late face table plane shave orange ay \\e\u026a\\ day way pray say ey \\e\u026a\\ grey they hey eyrir \u4f8b\u5916: \\i:\\ key monkey \\e\u026a\\: 1. a-e 2. ey 3. ay i-e \\a\u026a\\ bike nice kite fine white smile slide crime ie \\a\u026a\\ tie lie pie die wh \\w\\ \u6216\u8005 \\h\\ what why o-e \\\u0259\u028a\\ note hope wrote phone oa \\\u0259\u028a\\ boat goat coat float ow \\\u0259\u028a\\ yellow follow slow window ph \\f\\ photo phrase graph physical","title":"\u81ea\u7136\u62fc\u8bfb"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/READMEN/#_2","text":"/s/\u548c/t/\u5728\u4e00\u8d77\u7684\u65f6\u5019/t/\u4f1a\u53d8\u6210/d/ /s/\u548c/p/\u5728\u4e00\u8d77\u7684\u65f6\u5019/p/\u4f1a\u53d8\u6210/b/","title":"\u7206\u7834\u97f3\u89c4\u5219"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/READMEN/#excuse-me","text":"excuse \u539f\u8c05 \u5bf9\u4e0d\u8d77\u3001\u6253\u6270 \u501f\u8fc7\u4e00\u4e0b \u5931\u966a\u4e86 \u9ebb\u70e6\u518d\u8bf4\u4e00\u904d\u3001Pardon \u4e5f\u6709\u8fd9\u4e2a\u610f\u601d me \u5bbe\u683c\u4e2d\u7684\u6211 \u4e3a\u4ec0\u4e48\u82f1\u6587\u4f1a\u6709\u4e3b\u683c\u548c\u5bbe\u683c\u4e4b\u5206? \u7b80\u5355\u53e5\u7684\u53e5\u578b\u7ed3\u6784: \u4e3b + \u8c13 \u4e3b + \u8c13 + \u5bbe I love you(\u627f\u63a5\u52a8\u8bcd) \u4e3b + \u8c13 + \u5bbe + \u5bbe \u4e3b + \u8c13 + \u5bbe + \u5bbe\u8865 \u4e3b + \u7cfb + \u8868 she is beautiful \u8868\u793a\u4e3b\u8bed\u72b6\u6001\u548c\u7279\u5f81(\u8868\u8bed) \u4e3b\u683c I you she he it \u5bbe\u683c me you her him it yes yes \u662f\u7684 yes? \u4ec0\u4e48\u4e8b? this this book that student your your friend your name handbag hand bag pardon \u539f\u8c05\u3001\u518d\u8bf4\u4e00\u904d Sorry? Excuse me? Say it again it \u4ee3\u66ff\u7269\u4f53\u3001\u5730\u65b9\u3001\u5929\u6c14 It is a desk It is a Beijing It is fine today thank you Thanks! Thanks a lot! very much \u975e\u5e38\u5730 I love you very much \u800c\u4e0d\u662f I very love you Thank you very much \u800c\u4e0d\u662f very thank you \u4e00\u822c\u7591\u95ee\u53e5: \u529f\u80fd: \u7528\u4e8e\u8be2\u95ee \u6784\u6210: be\u52a8\u8bcd(am\u3001is\u3001are)\u7f6e\u4e8e\u53e5\u524d I am nice -> Am i nice? You are my friend -> Are you my friend? She is prety -> Is she pretty?","title":"Excuse me"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/READMEN/#is-this-your","text":"pen pencil book an English book a book store book one\u3001book two\u3001book three\u3001book four (\u4e00\u518c\u3001\u4e8c\u518c..) watch look at my watch coat \u5916\u5957 dress \u8fde\u8863\u88d9 skirt \u77ed\u88d9 car bus coach house \u522b\u5885 flat \u516c\u5bd3\u697c apartment","title":"Is this your...?"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/READMEN/#34","text":"unbrella please here \u8fd9\u91cc (\u526f\u8bcd) there \u90a3\u91cc where \u54ea\u91cc my \u6211\u7684 \u5f62\u5bb9\u6027\u7269\u4e3b\u4ee3\u8bcd ticket number units one No. one => number one sir \u5148\u751f\u3001\u5bf9\u7537\u6027\u7684\u5c0a\u79f0 cloakroom \u8863\u5e3d\u5b58\u653e\u5904 \u540d\u8bcd + please 1. \u70b9\u9910\u65f6 A roast duck, please 2. \u8d2d\u7269\u65f6 This shirt, please 3. \u8fdb\u7ad9\u65f6 Your ID card, please Here is my ticket (\u4e60\u60ef\u628ahere\u63d0\u524d) \u7b49\u540c\u4e8e My ticket is here \u5012\u88c5: 1. \u4e3b\u8bed\u662f\u540d\u8bcd\uff0c\u5012\u88c5\u4e3a here + \u7cfb\u52a8\u8bcd/\u5b9e\u4e49\u52a8\u8bcd + n \u6bd4\u5982 here is my ticket 2. \u4e3b\u8bed\u662f\u4ee3\u8bcd \u4e0d\u5b8c\u5168\u5012\u88c5 Here + \u4ee3\u8bcd + \u7cfb\u52a8\u8bcd/\u5b9e\u4e49\u52a8\u8bcd \u6bd4\u5982 here we go \u5426\u5b9a\u53e5: is not/am not/are not/isn't/m not(am not(\u7f29\u5199)/aren't \u7701\u7565\u5f62\u5f0f\u7684\u7948\u4f7f\u53e5: * My coat and my umbrella please => Give me my coat and my umbrella, please \u53e3\u8bed\u4e2d\uff0c\u5728\u8bed\u5883\u6bd4\u8f83\u660e\u786e\u7684\u60c5\u51b5\u4e0b\uff0c\u901a\u5e38\u53ef\u4ee5\u7701\u7565\u52a8\u8bcd\u548c\u95f4\u63a5\u5bbe\u8bed\uff0c\u6bd4\u5982: (Show me) your Ticket please (Show me) Passport, please \u76f4\u63a5\u5bbe\u8bed\u662f\u8c13\u8bed\u52a8\u8bcd\u7684\u627f\u53d7\u8005\uff0c\u95f4\u63a5\u5bbe\u8bed\u8868\u793a\u8c13\u8bed\u52a8\u4f5c\u7684\u65b9\u5411\uff08\u5bf9\u8c01\u505a\uff09\u6216\u52a8\u4f5c\u7684\u76ee\u6807\uff08\u4e3a\u8c01\u505a\uff09\uff0c\u95f4\u63a5\u5bbe\u8bed\u7d27\u63a5\u5728\u8c13\u8bed\u52a8\u8bcd\u540e\uff0c\u4f46\u5b83\u4e0d\u80fd\u5355\u72ec\u5b58\u5728\u3002 Here's your umbrella and your coat Here is my ticket \u6b63\u5e38\u8bed\u5e8f My ticket is here Here's \u662fHere is\u7684\u7f29\u5199\u3001\u8fd9\u4e2a\u53e5\u5b50\u672c\u8eab\u4e5f\u662f\u5012\u88c5\u7ed3\u6784\uff0c\u539f\u53e5\u5b50\u5e94\u8be5\u4e3ayour umbrella and your coat is here \u975e\u7f29\u5199\u5f62\u5f0f\u5e38\u7528\u4e8e\u6bd4\u8f83\u6b63\u5f0f\u7684\u573a\u5408 Sir \u82f1\u8bed\u4e2d\u4e0d\u76f8\u8bc6\u7684\u7537\u5b50\u3001\u5e74\u957f\u8005\u3001\u6216\u4e0a\u7ea7\u7684\u5c0a\u79f0 What can I do for you, sir? Thany you sir Sir\u901a\u5e38\u7528\u4e8e\u6b63\u5f0f\u4fe1\u51fd\u7684\u5f00\u5934: Dear sir Dear sirs \u4e3b\u683c \u5bbe\u683c \u5f62\u5bb9\u8bcd\u6027\u7269\u4e3b\u4ee3\u8bcd(\u6240\u6709\u683c) \u540d\u8bcd\u6027\u7269\u4e3b\u4ee3\u8bcd I me my mine you you your yours he him his his she her her hers it it its its they them their theirs we us our \u6240\u6709\u683c\u4fee\u9970\u4e00\u4e2a\u540d\u8bcd\uff08\u4eba\u6216\u7269\uff09\uff0c\u5fc5\u987b\u4e0e\u4eba\u6216\u7269\u4e00\u8d77 \u2014\u2014 \u4ee5\u8bcd\u7ec4\u7684\u65b9\u5f0f\u51fa\u73b0\u5728\u53e5\u5b50\u4e2d\u3002\u6240\u6709\u683c\u5355\u72ec\u51fa\u73b0\u5728\u53e5\u5b50\u4e2d\uff0c\u662f\u9519\u8bef\u7684\uff0c\u8868\u8fbe\u7684\u53e5\u610f\u4e0d\u5b8c\u6574\u3002 This is my book \u5f53\u901a\u8fc7\u4e0a\u4e0b\u6587\u53ef\u4ee5\uff0c\u53ef\u4ee5\u63a8\u6d4b\u51fa\u6240\u6709\u683c\u540e\u9762\u63a5\u7684\u90a3\u4e2a\u540d\u8bcd\u65f6\uff0c\u4e2d\u6587\u76f4\u63a5\u7701\u7565\u6389\u3002\u53ef\u662f\u82f1\u6587\u5fc5\u987b\u8981\u8f6c\u6362\u6210\u540d\u8bcd\u6027\u6240\u6709\u683c\u3002 This is mine \u540d\u8bcd\u6027\u6240\u6709\u683c\uff0c\u867d\u7136\u6ca1\u6709\u51fa\u73b0 \u4eba\u6216\u7269 \uff0c\u4f46\u662f\u4eba\u6216\u7269\uff0c\u5df2\u7ecf\u6697\u6697\u542b\u5728\u5176\u4e2d\u4e86\u3002 Q: Thank you for your help A: Not at all \u4e0d\u5ba2\u6c14\u3001\u4e0d\u7528\u978b The same to you \u4f60\u4e5f\u662f suit school primary school middle school university teacher Mr Wang/Miss Wang son daughter \u4e00\u822c\u7591\u95ee\u53e5\u53e5\u7684\u5426\u5b9a\u5f62\u5f0f: 1. \u628anot\u653e\u5728\u4e00\u822c\u7591\u95ee\u53e5\u7684\u4e3b\u8bed\u4e4b\u540e\uff0c\u5373\u6784\u6210\u4e00\u822c\u7591\u95ee\u53e5\u7684\u5426\u5b9a\u7ed3\u6784 2. \u5982\u679c\u60f3\u7528not\u7684\u7b80\u7565\u5f0f n't\uff0c\u5219\u9700\u8981\u5c06n't\u548c\u4e00\u822c\u7591\u95ee\u53e5\u53e5\u9996\u7684be\u3001have\u3001\u52a9\u52a8\u8bcd\u3001\u6216\u60c5\u6001\u52a8\u8bcd\u5199\u5728\u4e00\u8d77 Is she not a student? (Isn't she a student?) Will they not come? (Won't they come?) Have you not any sisters? (Haven't you any sisters?) Can she not do it? (Can't she do it?)","title":"3/4"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/READMEN/#lesson5-nice-to-meet-you","text":"Mr. \u5148\u751f Miss \u672a\u5a5a\u5973\u6027 Mrs \u5df2\u5a5a\u5973\u6027 Ms [m\u026az] .\u5973\u58eb,\u5a5a\u5426\u4e0d\u77e5.\u65e0\u5168\u62fc.\uff08\u4ee3\u66ffMiss\u6216Mrs\u7684\u5b57,\u4e0d\u6307\u660e\u79f0\u547c\u4eba\u7684\u5a5a\u59fb\u72b6\u51b5\uff09 Miss [m\u026as] \u5c0f\u59d0,\u672a\u5a5a. Mr \u5148\u751f\uff0c\u7528\u4e8e\u7537\u58eb\u59d3\u4e4b\u524d\uff0c\u4e0d\u80fd\u5355\u72ec\u4f7f\u7528 Mrs \u592a\u592a Sir \u4e00\u822c\u5355\u72ec\u4f7f\u7528\uff0c\u662f\u5bf9\u957f\u8005\u3001\u4e0a\u53f8\u6216\u8005\u7537\u987e\u5ba2\u7684\u5c0a\u79f0 Good \u597d well \u8eab\u4f53\u597d morning new \u65b0\u7684 old \u65e7\u7684 student \u5b66\u751f \u6d4a\u5316: s + \u6e05\u8f85\u97f3(/p/\u3001/t/\u3001/g/) \u8bfb\u4f5c\u6d4a\u8f85\u97f3(/b/\u3001/d/\u3001/g/) sport /p/ /b/ start /t/ /d/ skit /k/ /g/ nice \u672b\u5c3e\u7684e\u4e0d\u53d1\u97f3\u3001\u524d\u9762\u7684\u539f\u56e0\u53d1\u81ea\u5df1\u7684\u97f3 bike kite fine take name fate nose hope meet \u8fd9\u662f\u52a8\u8bcd\uff0c\u7528\u4f5c\u8c13\u8bed\uff0c\u540e\u9762\u63a5\u5bbe\u8bed meet you\\him]her\\me \u5bbe\u683c\u5f62\u5f0f too \u4e5f(\u80af\u5b9a\u53e5\u3001\u7591\u95ee\u53e5\u5c3e) I love you too Do you love me too? \u51a0\u8bcd: \u5e3d\u5b50\uff0c\u5e26\u5728\u540d\u8bcd\u4e0a\u7684\u5e3d\u5b50\uff0c\u6ca1\u6709\u7279\u6b8a\u60c5\u51b5\u4e0b\u4e0d\u80fd\u6458\u5e3d\u5b50 a nice car a big house a good name \u51a0\u8bcd: a\u3001an\u3001the \u5b9a\u51a0\u8bcd: the \u786e\u5b9a\u7684\u3001\u77e5\u9053\u7684 \u4e0d\u5b9a\u51a0\u8bcd: a/an \u4e0d\u786e\u5b9a\u7684\u3001\u4e0d\u77e5\u9053\u7684 There is a monk The monk is Jack a/an\u7684\u533a\u522b: an + \u5143\u97f3\u53d1\u97f3\u5f00\u5934\u7684\u5355\u8bcd\u3001\u5176\u4f59\u7528a an egg an orange an hour \u7279\u6b8a\u60c5\u51b5: \u56fd\u5bb6\u3001\u56fd\u7c4d\u3001\u4eba\u540d\u3001\u57ce\u5e02\u540d Q: Yes, thank you A: You're welcome \u4e5f: * also \u4e5f\uff0c\u800c\u4e14\uff0c\u5e38\u7f6e\u4e8e\u53e5\u4e2d * too \u4e5f\uff0c\u4e00\u822c\u7f6e\u4e8e\u53e5\u5c3e * either \u4e5f(\u7528\u4e8e\u5426\u5b9a\u53e5\u6216\u5426\u5b9a\u8bcd\u7ec4)","title":"Lesson5 Nice to meet you"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/READMEN/#lesson6-what-make-is-it","text":"make \u724c\u5b50 What make is __? What make is your car?","title":"Lesson6 What make is it?"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/READMEN/#lession7-are-you-a-teacher","text":"nationality station happy keyboard operator \u64cd\u4f5c\u4eba\u5458 -or -er director \u5bfc\u6f14 engineer \u5de5\u7a0b\u5e08 I am Chinese He is in England We are in Begjing Q:What nationality are you? What nationality are you too? A: I'am Chinese Q: What's your job? A: I'm teacher I have no job I have no time for/to .... \u201cIf you say that you have no time for a person or thing, you mean you do not like them or approve of them. \u201d I have no time for/to ... \u6539\u6210 I don\u2019t have much time for/to ... \u66f4\u597d\uff0c\u66f4\u793c\u8c8c I have no time \u4e0d\u80fd\u76f4\u63a5\u8fd9\u4e48\u7528\uff0c\u540e\u9762\u8981\u52a0\u8bf4\u660e\uff0c\u6bd4\u5982 I have no time to talk about those issues \u4e00\u822c\u7591\u95ee\u53e5: is/am/are \u7f6e\u4e8e\u53e5\u524d Are you French? You are a teacher She is a doctor Is she a doctor? He is a student Is he a student? This is my teacher Is this my teacher? This is your car Is this your car? \u7279\u6b8a\u7591\u95ee\u53e5: \u4ec0\u4e48\u3001\u8c01\u3001\u8c01\u7684\u3001\u54ea\u4e2a.... \u4f60\u7684\u5de5\u4f5c\u662f\u4ec0\u4e48? What is your job? 1. \u627e\u5230\u80af\u5b9a\u53e5\u88ab\u63d0\u95ee\u7684\u90e8\u5206 2. \u6839\u636e\u53e5\u610f\u9009\u62e9\u6700\u5408\u9002\u7684\u7591\u95ee\u8bcd 3. \u5c06\u7591\u95ee\u8bcd\u8bbe\u7f6e\u5728\u53e5\u9996 4. \u5982\u679c\u662f\u9488\u5bf9\u4e3b\u8bed\u63d0\u95ee\uff0c\u52a8\u8bcd\u653e\u5728\u4e3b\u8bed\u524d\uff0c\u5426\u5219\u4e0d\u53d8","title":"Lession7  Are you a teacher?"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/READMEN/#lesson8-whats-your-job","text":"taxi cap \u7684\u58eb airhostess \u7a7a\u59d0 air airline \u822a\u7ebf\u3001\u822a\u7a7a\u516c\u53f8 host \u4e3b\u4eba -ess \u8868\u793a\u5973\u6027\u7684\u540e\u7f00 waiter \u7537\u670d\u52a1\u5458 waiteress \u5973\u670d\u52a1\u5458 tiger tigeress \u6bcd\u8001\u864e actor actoress \u5973\u6f14\u5458 lion \u72ee\u5b50 lioness \u6bcd\u72ee\u5b50 postman post \u90ae\u653f nurse \u62a4\u58eb mechanic \u673a\u68b0\u5e08 hairdresser \u7406\u53d1\u5e08 dress \u6253\u626e\u3001\u88d9\u5b50 hoursewife milkman \u9001\u725b\u5976\u7684\u4eba policeman postman superman","title":"Lesson8 What's your job"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/READMEN/#lesson9-how-are-you-today","text":"how How is the weather? How is your mother? today tonight thanks Thabks a lot Thanks you very much How are you? \u5982\u4f55\u56de\u5e94 1. Fine \\Very well Than you are you 2. Not bad 3. very bad\\Terrible \u51a0\u8bcd: \u5e3d\u5b50\uff0c\u5e26\u5728\u540d\u8bcd\u4e0a\u7684\u5e3d\u5b50\uff0c\u6ca1\u6709\u7279\u6b8a\u60c5\u51b5\u4e0b\u4e0d\u80fd\u6458\u5e3d\u5b50 \u7279\u6b8a\u60c5\u51b5: \u56fd\u5bb6\u3001\u56fd\u7c4d\u3001\u4eba\u540d\u3001\u57ce\u5e02\u540d \u4e24\u8005\u53d1\u97f3\u4e0d\u540c\uff0c\u8981\u770bthe\u540e\u9762\u63a5\u7684\u662f\u5143\u97f3\u3001\u8fd8\u662f\u8f85\u97f3 the absoulte the range","title":"Lesson9 How are you today?"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/READMEN/#lesson10-look-at","text":"a fat cat \u66b4\u53d1\u6237 thin slim \u82d7\u6761\u7684 You are so slim dirty clean \u5e72\u51c0\u7684 hot \u70ed\u7684 It is hot today The girl is very hot Lay GaGa is hot now... cold I have a cold welcome \u6211\u53d7\u5230\u4e86\u51b7\u9047 young busy He is very busy lazy \u61d2\u60f0\u7684 Look at ....","title":"Lesson10 Look at ..."},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/READMEN/#lesson-11-is-this-your-shirt","text":"whose what whose pen \\ whose shirt \\ shose car blue \u72b9\u8c6b\u7684 You are blue today \u4e0d\u5065\u5eb7\u7684 It's blue book \u8d35\u65cf\u7684 blue blood perhaps \u5927\u6982 Perhaps it is \u53ef\u80fd\u662f\u8fd9\u6837\u5427 Perhaps so Perhaps not \u53ef\u80fd\u4e0d\u662f\u8fd9\u6837 white \u767d\u8272 the White House \u767d\u5bab white lie \u5584\u610f\u7684\u8c0e\u8a00 catch \u6293\u4f4f\u3001\u63a5\u7740 tch\u4e2d\u4e00\u822ct\u4e0d\u53d1\u97f3 catch the thief catch the ball Whose shoirt is that? \u7279\u6b8a\u7591\u95ee\u8bcd + be + \u540d\u8bcd Whose is this car? \u7279\u6b8a\u7591\u95ee\u8bcd + \u540d\u8bcd + be + \u4ee3\u8bcd Whose car is that? Is this your shirt, Dave? Here you are \u7ed9\u4f60 \u6211\u7684 => my \u4f60\u7684 => your Lucy\u7684 => Lucy's Lucy's friend Lily's book my mother's bag the driver's watch the doctor's car \u540d\u8bcd\u6240\u6709\u7684\u683c: \u540d\u8bcd's\uff0c\u4e00\u79cd\u6240\u5c5e\u7684\u6982\u5ff5\uff0c\u8fd9\u4e2a\u540d\u8bcd\u5fc5\u987b\u662f\u6709\u751f\u547d\u7684","title":"Lesson 11 Is this your shirt?"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/READMEN/#lesson-12","text":"\u5f62\u5bb9\u8bcd\u4fee\u9970\u540d\u8bcd a fat cat blouse \u5973\u886c\u886b his \u4ed6\u7684 her \u5979\u7684 \u7269\u4e3b\u4ee3\u8bcd: \u5f62\u5bb9\u8bcd\u6027 my\u3001your\u3001his\u3001her tie \u9886\u5e26","title":"Lesson 12"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/READMEN/#lesson-13-a-new-dress","text":"a green hand \u65b0\u624b come here upstairs hat smart beautiful same the same color the same city lovely \u53ef\u7231\u7684\u3001\u6f02\u4eae\u7684 beautiful smart lovely nice What color is your ....? Come and see her. \u8fc7\u6765\u770b\u770b \u4e24\u4e2a\u52a8\u8bcd\u901a\u8fc7and\u8fde\u63a5\u8d77\u6765\uff0c\u5c31\u53ef\u4ee5\u628a\u4e24\u4e2a\u52a8\u4f5c\u8054\u7cfb\u8d77\u6765\uff0c\u8868\u793a\u4e00\u4e2a\u8fde\u7eed\u7684\u52a8\u4f5c\u3002 Here it is \u7b80\u5355\u7684\u5012\u88c5\u7ed3\u6784 Here I am Here we go \u7279\u6b8a\u7591\u95ee\u53e5: \u4f60\u7684\u540d\u5b57\u662f\u4ec0\u4e48? What is your name? What is your job? What color is your coat?","title":"Lesson 13 A new dress"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/READMEN/#lesson-14","text":"case suitcase carpet car \u6c7d\u8f66 + per \u5ba0\u7269 = \u5730\u6bef dog a lucky dog \u5e78\u8fd0\u513f You're welcome \u4e0d\u7528\u5ba2\u6c14 Whose turn is it now? (\u8fd9\u91cc\u7684turn\u662f\u6b21\u5e8f\u7684\u610f\u601d\uff0c\u8fd9\u53e5\u8bdd\u662f\u8bf4\uff0c\u8be5\u8f6e\u5230\u8c01\u4e86)","title":"Lesson 14"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/READMEN/#lesson-15","text":"customs \u6d77\u5173 customer \u987e\u5ba2 officer \u5b98\u5458 customs officer \u6d77\u5173\u5b98\u5458 CEO(Chief Executive Officer) passport \u62a4\u7167 pass \u901a\u8fc7 port \u6e2f\u53e3 visa \u7b7e\u8bc1 brown \u68d5\u8272\u7684 brown tea \u7ea2\u8272 brown sugar \u7ea2\u7cd6 ` \u540d\u8bcd\u7684\u5355\u590d\u6570: \u4e00\u822c\u7684\u540d\u8bcd + s a girl -> girls a officer -> officers \u4ee5s\u3001sh\u3001x \u3001ch\u7ed3\u5c3e\u7684 + es/iz/ a bus -> buses a box -> boxes a brush -> brushes \u4ee5f\u3001fe\u7ed3\u5c3e\u7684\u53d8f\u3001fe -> ves \\vz\\ a wife -> wives a shelf -> shelves knife -> knives \u8f85\u97f3\u5b57\u6bcd+y\u7ed3\u5c3e\u7684\u540d\u8bcd \u53d8y->i + es\\iz\\ a baby -> babies a lady -> ladies \u5143\u97f3 + o\u7ed3\u5c3e + s\\z\\ a zoo -> zoos a radio _. radios \u8f85\u97f3 + o \u7ed3\u5c3e, +es \\z\\ hero -> heroes potato -> potatoes \u4e00\u822c\u4ee5\u590d\u6570\u5f62\u5f0f\u51fa\u73b0\u7684: jeans pants shorts glasses","title":"Lesson 15"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/READMEN/#lesson-16","text":"black coffee black tea yellow \u9ec4\u8272\u7684 orange \u6a58\u9ec4\u8272","title":"Lesson 16"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/READMEN/#lession-17","text":"employee \u96c7\u5458 employ \u96c7\u7528 employer \u96c7\u4e3b trainer \u57f9\u8bad trainee \u88ab\u57f9\u8bad\u7684\u4eba hard-working adj + doing good-looking easy-going sales rep \u63a8\u9500\u5458 \u590d\u6570: sales reps \u5168\u79f0: sales representative assistant \u52a9\u624b an office assistant \u529e\u516c\u5ba4\u52a9\u7406 \u6253\u62db\u547c: Hello How are you? How are you doing? How do you do? \u975e\u5e38\u6b63\u5f0f\u7684\u6253\u62db\u547c \u4f60\u597d Come and meet Come and sit down Come and have a drink Come and meet my friend What are theiy jobs? What is your job? \u5355\u590d\u6570\u53d8\u6362: This is my name These are their names Who is the young girl? Who are the young girls? What is your job? What are theiy jobs? He is a tourist They are tourists. \u540d\u8bcd\u7684\u5355\u590d\u6570: books\u3001jobs buses\u3001boxes\u3001brushes\u3001benches\u3001potatoes wife-wives(f\u6e05\u8f85\u97f3\u3001\u53d8\u6210\u4e86v\u6d4a\u8f85\u97f3)\u3001leaf-leaves baby-babies man-men toman-women foot-feet tooth-teeth child-children \u53e5\u5b50\u7684\u590d\u6570: \u5355\u6570\u540d\u8bcd + is .... \u590d\u6570\u540d\u8bcd + are .... Her passport is greent The men are keyboard operators This assistant is busy Our classroom is large These umbrellas are useful Lesson 18 What are their jobs? \u897f\u65b9\u4eba\u7684\u59d3\u6c0f\u6765\u6e90: \u897f\u65b9\u4eba\u5148\u6709\u540d\u8fd8\u662f\u73b0\u6709\u59d3? \u73b0\u6709\u540d\u5b57\u3001\u7136\u540e\u6709\u59d3 \u897f\u65b9\u4eba\u59d3\u6c0f\u6765\u6e90: \u804c\u4e1a: Taylor\u3001Baker ... \u989c\u8272: White\u3001Brown .... \u751f\u6d3b: Bird\u3001Rice .... \u4f4f\u5740: Bridge\u3001Hill \u540d\u5b57+son: Peterson\u3001Johnson\u3001Jackson","title":"Lession 17"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/READMEN/#19-tired-and-thirsty","text":"matter \u4e8b\u60c5 What's the matter? (matter\u662f\u540d\u8bcd\uff0c\u9700\u8981\u52a0\u4e0a\u51a0\u8bcd) What's wrong? \u8fd9\u91cc\u7684wrong\u662f\u5f62\u5bb9\u8bcd What's the matter with you? children \u5b69\u5b50\u4eec child kids tired \u7d2f\u3001\u75b2\u4e4f thirsty sit down \u5750\u4e0b have a seat sit down, please right \u597d\uff0c\u53ef\u4ee5 gh\u4e0d\u53d1\u97f3 All right (t\u4e0d\u53d1\u97f3) tired and thirsty \u53c8\u6e34\u53c8\u7d2f beautiful and kind \u53c8\u597d\u770b\u53c8\u5584\u826f young\u3001tall and rich Threre be\u53e5\u578b There's an ice cream man There's a mailman \u82f1\u8bed\u4e2d\u4ecb\u7ecd\u4eba\u79f0\u987a\u5e8f\u7684\u65f6\u5019\uff0c\u662f\u4e8c\u3001\u4e09\u3001\u4e00\u7684\u987a\u5e8f","title":"19 tired and thirsty"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/READMEN/#20-look-at-them","text":"sister brother mother father husband wife son daughter aunt/aunty \u963f\u59e8\u3001\u59d1\u59d1 uncle uncle \u53d4\u53d4/\u8205\u8205 grandmother grandfather in-law \u7ed3\u5a5a\u540e\u7684\u4eb2\u5c5e\u5173\u7cfb mother in-law father in-law sister in-law brother in-law step \u540e\u7684\u3001\u7ee7\u7684 step father step mother ex \u524d\u4efb\u7684 ex-girlfriend","title":"20 Look at them!"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/READMEN/#21-which-book","text":"ones \u4ee3\u66ff\u590d\u6570\u540d\u8bcd which \u54ea\u4e00\u4e2a\u3001\u54ea\u4e00\u4e9b You(\u4e3b) give(\u8c13) me(\u627f\u53d7\u4e86give\u7684\u52a8\u4f5c\uff0c\u5bbe\u8bed) a book(\u627f\u53d7\u4e86give\u7684\u52a8\u4f5c\uff0c\u8fd9\u91cc\u662f\u5bbe\u8bed) \u80fd\u591f\u63a5\u53cc\u5bbe\u8bed\u7684\u52a8\u8bcd: give \u590d\u4e60\u70b9:","title":"21 which book?"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/READMEN/#22-give","text":"\u8fde\u8bfb: \u4e00\u8f85\u4e00\u5143\u3001\u524d\u8f85\u540e\u5143 \u5c31\u53ef\u4ee5\u8fde\u8bfb empty An empty street (An empty \u53ef\u4ee5\u8fde\u8bfbn\u548ce\u7b26\u5408\u4e00\u8f85\u4e00\u5143\uff0c\u524d\u8f85\u540e\u5143) full I'm full \u6211\u9971\u4e86 a full stop \u53e5\u53f7 a full time job \u5168\u804c\u5de5\u4f5c large \u5927\u7684(\u5f3a\u8c03\u9762\u79ef) \u53cd\u4e49\u8bcdsmall\uff0c\u5176\u4ed6\u60c5\u51b5\u7528big(\u53cd\u4e49\u8bcdlittle) China is a large country This room is large little sharp \u950b\u5229\u7684 blunt \u949d\u7684 The knife is blunt \u8fd9\u5200\u5f88\u949d small small world \u4e16\u754c\u771f\u5c0f\u3001\u53c8\u89c1\u9762\u4e86 glasses cup bottle tin knife (\u5b57\u6bcdk\u548cn\u5728\u4e00\u8d77\u7684\u65f6\u5019\uff0ck\u4e0d\u53d1\u97f3) fork spoon \u4e2d\u897f\u65b9\u4eba\u4e0d\u540c\u7684\u9910\u996e\u5de5\u5177: \u4e2d\u56fd: \u7897+\u7b77 \u897f\u65b9: \u5200+\u53c9 knifes and forks It's + adj + of sb \u8868\u793a\u9ed8\u8ba4\u81ea\u8eab\u7684\u6027\u683c\u3001\u7279\u70b9 It's very nice of you to help me \u4f60\u5e2e\u6211\u771f\u662f\u592a\u5584\u826f\u4e86 It's + adj + for sb \u8868\u793a\u5bf9\u4e8e\u67d0\u4eba\u6765\u8bf4\u5982\u4f55\u5982\u4f55 be late for sth \u505a...\u8fdf\u5230 It's not good to be late for school The one in pencil \u8fd9\u91cc\u7684in\u8868\u793a \u7528..\u5199\u7684 \u7528\u94c5\u7b14\u5199\u7684\u4fe1 there be\u53e5\u578b: (\u6ca1\u6709there will have\u7684\u7528\u6cd5\uff0chave\u662f\u52a9\u52a8\u8bcd\uff0c\u540e\u9762\u8fd8\u8981\u52a0been\u6784\u9020there be\u7ed3\u6784) * \u5c06\u6765\u65f6: there will be\u6216\u8005there is going to be","title":"22 give...."},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/READMEN/#23-which-glasses","text":"on \u5728...\u4e4b\u4e0a shelf \u590d\u6570 shelves The ones on the shelf \u77ed\u8bed \u67b6\u5b50\u4e0a\u7684\u90a3\u4e9b \u4ecb\u8bcd\u77ed\u8bed\u540e\u7f6e\uff0c\u5012\u7740\u7ffb\u8bd1 \u4ecb\u8bcd: \u8fde\u63a5\u4e24\u4e2a\u8bcd\u6216\u8bcd\u4e0e\u53e5\u5b50 on: \u5728...\u4e4b\u4e0a The book is on the desk \u4f7f\u7528\u4ecb\u8bcd\u65f6\uff0c\u4e0d\u80fd\u5fd8\u8bb0\u8981\u52a0\u52a8\u8bcd cigarette television floor dressing table \u68b3\u5986\u53f0 magazine newspaper shelf \u67b6\u5b50 \u8868\u793a\u65f6\u95f4: * on \u7528\u4e8e\u5177\u4f53\u7684\u67d0\u4e00\u5929\u6216\u67d0\u4e00\u5929\u7684\u65e9\u4e0a\u3001\u4e0b\u5348\u3001\u665a\u4e0a\u524d \u661f\u671f\u6216\u8282\u65e5\u524d We met at a afe on the evening of May 25th I was born on the morning of March 11th in \u8868\u4e00\u6bb5\u65f6\u95f4\u3001\u7528\u4e8e\u5e74\u3001\u6708\u3001\u4e16\u7eaa\u3001\u56db\u5b63\u6216\u6cdb\u6307\u4e00\u5929\u7684\u4e0a\u5348\u3001\u4e0b\u5348\u3001\u665a\u4e0a\u7b49 in a minute in three minutes in a year in February in 2017 in spring in a week at \u7528\u4e8e\u5177\u4f53\u7684\u65f6\u95f4\u70b9\u524d\u3001\u6216\u6b63\u5348\u3001\u9ec4\u660f\u3001\u5348\u591c\u7b49 Every day he begins his work at 8 o'clock by \u8868\u793a\u6700\u8fdf\u5728\u67d0\u4e00\u65f6\u523b to \u8868\u793a\u65f6\u95f4\u8303\u56f4\uff0c\u901a\u5e38\u548cfrom\u8fde\u7528 \u8868\u793a\u8303\u56f4: in \u8868\u793a\u5728\u67d0\u4e2a\u8303\u56f4\u4e4b\u5185\uff0c\u6ca1\u6709\u51fa\u8fd9\u4e2a\u5708\u5b50 Our village is in a valley Wangfujing Street is in Beijing on \u8868\u793a\u5728\u67d0\u4e2a\u5e73\u9762\u4e0a\u6216\u4e0e\u4e00\u4e2a\u9762\u76f8\u63a5\u89e6\uff0c\u8fd9\u4e00\u70b9\u548c over \u4e0e above \u662f\u4e0d\u540c\u7684\u3002 There are some boats on the river They're having fun on the playground at \u5219\u8868\u793a\u5728\u67d0\u4e2a\u5177\u4f53\u7684\u573a\u6240\u6216\u5730\u70b9\uff0c\u8fd9\u4e00\u70b9\u548c\u7528\u5728\u65f6\u95f4\u4e4b\u524d\u4e00\u6837\uff0c\u90fd\u662f\u5728\u4e00\u4e2a\u6bd4\u8f83\u5177\u4f53\u7684\u3001\u5f88\u5c0f\u7684\u201c\u70b9\u201d\u4e4b\u524d at the cinema at the bus stop at the door \u7948\u4f7f\u53e5\u4e2d\uff0c\u52a8\u8bcd\u8981\u7528\u539f\u578b \u5982\u679c\u8868\u793a\u7684\u662f\u8be2\u95ee\u610f\u89c1\u6216\u5efa\u8bae\u7684\u65f6\u5019\u5373\u4f7f\u662f\u7591\u95ee\u53e5\u4e5f\u53ef\u4ee5\u7528some\u800c\u4e0d\u662fany Would you like some tea? make oneself at home \u8bf7\u81ea\u4fbf\u3001\u968f\u4fbf","title":"23 which glasses"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/READMEN/#2526-mrssmiths-kitchen","text":"Mrs kitchen refrigerator fridge \u51b0\u7bb1 right electric \u5e26\u7535\u7684\u3001\u53ef\u901a\u7535\u7684 an electric cooker an electric shaver(\u7535\u52a8\u522e\u80e1\u5200) cooker \u7089\u5b50\u3001\u708a\u5177\uff0c\u867d\u7136er\u7ed3\u5c3e\u4f46\u4e0d\u8868\u793a\u4eba\uff0c\u53a8\u5e08\u7528cook\u8868\u793a middle \u4e2d\u95f4 in the middle of \u5728...\u7684\u4e2d\u95f4 room \u623f\u95f4 living room dining room \u9910\u5385 bedroom // [\u02c8bedru\u02d0m,\u02c8bedr\u028am] dr \u6d4a\u8f85\u97f3\u8fde\u8bfb \u53e5\u578b: \u4f4d\u7f6e: There is ... in the kitchen \u989c\u8272: The ... is blue \u72b6\u6001: It is on the left There be\u53e5\u578b: \u6784\u6210 There be + (is, are) + \u5730\u70b9 \u6709: * \u62e5\u6709 have * \u5b58\u5728 there be There is one in my heart \u6211\u5fc3\u91cc\u6709\u4eba There is a cooker in the kitchen -> A cooker in the kitchen there There be\u53e5\u578b\u4e2dbe\u52a8\u8bcd\u7684\u5355\u590d\u6570\u5f62\u5f0f\u53d6\u51b3\u4e8e\u6700\u8fd1\u7684\u540d\u8bcd\u7684\u5355\u590d\u6570\u5f62\u5f0f There is(\u6700\u8fd1\u7684dictionary\u662f\u5355\u6570) a dictionary and some books in the room in \u5728...\u91cc\u9762 Where is it? \u5b83\u5728\u54ea\u91cc have breakfast/lunch/super/ \u8fdf\u65e9\u996d\u3001\u5403\u5348\u996d\u3001\u5403\u665a\u996d do well in ... \u8868\u793a\u5728...\u65b9\u9762\u505a\u7684\u597d do whell in be good at I independence, because I be good at association with person. I do well in communicating with customers She is a very clever girl; she will do well in life. with one's help \u5728...\u7684\u5e2e\u52a9\u4e0b with the help of one's With your help\uff08=With the help of yours\uff09, we finished the hard work on time. With Kate's help\uff08=With the help of Kate\uff09, John caught up with the others in the class.","title":"25/26 Mrs.Smith's kitchen"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/READMEN/#2728","text":"trousers \u957f\u88e4 pants \u957f\u88e4 jeans \u725b\u4ed4\u88e4 shorts \u77ed\u88e4 shoes socks gloves \u624b\u5957 glasses shelf \u67b6\u5b50\uff0c\u9694\u677f tins \u7f50\u5b50\u3001a tin of \u4e00\u7f50.... \u4ecb\u8bcd/\u4ecb\u8bcd\u77ed\u8bed\u524d\u9700\u8981\u6709be\u52a8\u8bcd \u6709\u59cb\u6709\u7ec8: There is a beging, a middle, and the end. There is some water in that bottle, isn't there? \u90a3\u4e2a\u74f6\u5b50\u91cc\u6709\u4e00\u4e9b\u6c34\uff0c\u4e0d\u662f\u5417? children \u590d\u6570\u5f62\u5f0f\u7684child the number of \u4f5c\u4e3b\u8bed\u65f6\u540e\u9762\u52a8\u8bcd\u8981\u7528\u5355\u6570","title":"27/28"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/READMEN/#2930","text":"\u540c\u65f6\u5177\u5907\u540d\u8bcd\u548c\u52a8\u8bcd\u7684\u8bed\u4e49 shut \u5173\u95e8 The door is shut(\u5f62\u5bb9\u8bcd\uff0c\u5173\u7740\u7684) shut the door \u5173\u95e8 must \u5fc5\u987b \u60c5\u6001\u52a8\u8bcd -> \u8868\u793a\u60c5\u611f\u3001\u6001\u5ea6 air \u662f\u7a7a\u6c14\u6d41\u901a The air is fresh air the kitchen \u7ed9\u53a8\u623f\u901a\u98ce \u8fd9\u4e9b\u8bcd\u90fd\u662f\u540c\u65f6\u5177\u5907\u540d\u8bcd\u548c\u52a8\u8bcd\u8bed\u4e49\u7684 water\u3001color\u3001air\u3001dust\u3001book\u3001milk\u3001empty put \u653e\u7f6e\u3001\u6401 Put your hand in your pocket clothes \u8863\u670d(\u5355\u590d\u6570\u540c\u5f62) people\u3001hair\u3001fish\u3001sheep wardrobe Put your coat in the wardrobe empty Empty the bottle please \u8bf7\u628a\u74f6\u5b50\u5012\u7a7a \u4f7f\u7a7a\u3001\u628a..\u5012\u51fa \u6d41\u51fa\u3001\u8d70\u51fa \u7a7a\u7684 \u7a7a\u865a\u7684\u3001\u65e0\u610f\u4e49\u7684 \u5446\u677f\u7684\u3001\u6beb\u65e0\u8868\u60c5\u7684 read sharpen adj + en = v sharp + en = \u4f7f\u950b\u5229 short + en = \u7f29\u77ed weak + en = \u524a\u5f31 put on & take off turn on & turn off turn on\\off the television turn it down \u4eba\u79f0\u4ee3\u7801\u653e\u5728\u4e2d\u95f4 untidy \u4e71\u3001\u4e0d\u6574\u6d01 air the room \u7ed9\u623f\u95f4\u901a\u98ce tap \u6c34\u9f99\u5934 cupboard \u7897\u67dc\u3001\u98df\u53a8 sweep \u6253\u626b dust \u5c18\u57c3\u3001\u7c89\u672b\u3001\u62c2\u53bb\u2026\u7684\u7070\u5c18\uff0c\u63b8\u6389\u2026\u7684\u5c18\u571f\uff0c\u7ed9\u2026\u64e6\u7070 \u7948\u4f7f\u53e5: A. \u6ca1\u6709\u4e3b\u8bed B. \u52a8\u8bcd\u6253\u5934 \u8868\u793a\u547d\u4ee4: \u52a8\u8bcd\u5706\u5f62 + ..... Shut the door \u8868\u793a\u8bf7\u6c42: please + \u52a8\u8bcd\u539f\u578b + ... Please give me it \u8868\u793a\u5efa\u8bae: Let's + \u52a8\u8bcd\u539f\u578b + ... Let's go, ok? What must I do? What must I say\\read\\clean? Where must I go\\live\\stay? Who must I meet\\love....? must\u7684\u5426\u5b9a\u7528needn't\u3001\u53cd\u4e49\u8bcd\u662fmust not \u6d17\u624b\u95f4\u7684\u8868\u8fbe\u65b9\u5f0f: bathroom \u81ea\u5df1\u5bb6\u7684\u6d17\u624b\u95f4 restroom \u516c\u5171\u5395\u6240 washroom \u6d17\u624b\u95f4 toilet \u5395\u6240 loo \u7537\u5973\u5395\u6240: lady's room\\man's room \u7981\u6b62\u5438\u5f15\u3001\u7981\u6b62\u505c\u8f66\u7b49\u6807\u8bed\u901a\u5e38\u90fd\u662fNO... NO SMOKING\u3001NO PARKING","title":"29/30"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/READMEN/#3132-wheres-sally","text":"\u65f6\u95f4: \u8fc7\u53bb\u3001\u73b0\u5728\u3001\u5c06\u6765 \u72b6\u6001: \u6b63\u5728\u505a(\u8fdb\u884c)\u3001\u5b8c\u6210\u7684\u3001\u4e00\u822c(\u901a\u5e38) \u65f6\u95f4 + \u72b6\u6001 = \u65f6\u6001 \u73b0\u5728\u8fdb\u884c\u65f6: \u73b0\u5728 + \u8fdb\u884c \u6b64\u65f6\u6b64\u523b\u6b63\u5728\u505a\u7684\u4e8b\u60c5 \u4e3b\u8bed + is/am/are + doing He is reading He is eating He is drinking He is sleeping He is playing He is running She is writing do \u4ee3\u8868\u6240\u6709\u7684\u52a8\u8bcd \u73b0\u5728\u5206\u8bcd \u7528\u4e8e\u73b0\u5728\u8fdb\u884c\u65f6 1. \u4e00\u822c + ing 2. \u4ee5\u4e0d\u53d1\u97f3\u7684e\u7ed3\u5c3e \u53bbe + ing (write -> writing) 3. \u8f85 + \u5143 + \u8f85\uff0c \u53cc\u5199\u8f85\u97f3+ing(\u9664\u6389opening) run after \u8ffd\u9010 (\u53ef\u4ee5\u8fde\u8bfb\uff0cr^ na: fte) in the garden \u5728\u82b1\u56ed\u91cc a gardener \u5706\u827a\u5e08 under \u5728....\u7684\u4e4b\u4e0b There is a chair under the bed a family tree \u5bb6\u8c31 climb \u4ed6\u6b63\u5728\u7a7f\u8fc7\u90a3\u7247\u8349\u5730: He is acrossing(across\u662f\u4ecb\u8bcd\uff0c\u4e0d\u80fd\u52a0ing) the grass He is walking/going/runing across the grass They are overing(over\u8fd8\u662f\u4ecb\u8bcd\uff0c\u4e0d\u80fd\u52a0ing) the bridge They are walking/goding/running over the bridge I beg your pardon? / Pardon / Excuse me? / Sorry ? Say it again What about ... ? What about the dog? -> What is the dog doing in the garden? \u4e3a\u4e86\u907f\u514d\u91cd\u590d\u5267\u4e2d\u7684\u4e3b\u8bed\u548c\u8c13\u8bed\uff0c\u4f7f\u7528what about\u6765\u8be2\u95ee\u60c5\u51b5 I am teacher. What about you? I am learing English. What about you? I like rice What about you?","title":"31/32  Where's Sally?"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/READMEN/#3334-a-fine-day","text":"sunhat sunglass sunblock \u9632\u6652\u971c shine \u7167\u8000 foot bridge \u5929\u6865 shave \u522e\u80e1\u5b50 shaver \u522e\u80e1\u5200 wash \u6d17 \u4eca\u5929\u5929\u6c14\u5f88\u597d\uff0c\u5929\u7a7a\u4e2d\u98d8\u7740\u51e0\u6735\u767d\u4e91\uff0c\u4f46\u662f\u9633\u5149\u707f\u70c2\u3002Lucy\u548c\u5979\u7684\u7537\u670b\u53cb\u5728\u4e00\u5757\u513f\u3002\u4ed6\u4eec\u6b63\u5728\u5f00\u8f66\u3002Lucy\u6b63\u5728\u770b\u4e00\u53ea\u6f02\u4eae\u7684\u5c0f\u9e1f\u3002 \u5c0f\u9e1f\u6b63\u5728\u5929\u4e0a\u98de\u8fc7\u3002\u4e00\u4e9b\u4eba\u4ece\u5929\u6865\u4e0a\u8d70\u8fc7\uff0c\u4ed6\u4eec\u5f88\u5fd9\u3002 It is fine today, There are some clouds in the sky, But the sun is shining Lucy is with her bodyfriend, They are driving. Lucy is looking at a beautiful bird. The bird is flying in the sky. Some people are walking over the bridge. They are busy \u52a8\u8bcd\u7684\u91cd\u8981\u6027: \u65f6\u6001\u9700\u8981\u901a\u8fc7\u52a8\u8bcd\u6765\u8868\u793a \u8bcd\u7ec4\u4e2d\u6700\u4e3a\u91cd\u8981\u7684\u5c31\u662f\u52a8\u8bcd\u8bcd\u7ec4 \u53e5\u5b50\u6240\u6709\u9aa8\u67b6\u4e2d\u6700\u4e3a\u91cd\u8981\u548c\u4e0d\u80fd\u7f3a\u5931\u7684\u5c31\u662f\u52a8\u8bcd \u52a8\u8bcd\u79cd\u7c7b: 1. \u8fde\u7cfb\u52a8\u8bcd She is beautiful \u60c5\u6001\u52a8\u8bcd You must do it \u5b9e\u4e49\u52a8\u8bcd I wash my hands \u53ca\u7269\u52a8\u8bcd \u4e0d\u53ca\u7269\u52a8\u8bcd \u52a9\u52a8\u8bcd help sb with sth Linda often helps her mother with the housework on weekends catch up with \u8ffd\u4e0a I begin to catch up with my classmates among vs between \u524d\u8005\u8868\u793a\u5728...\u4e4b\u95f4(\u4e09\u8005\u6216\u4ee5\u4e0a)\uff0c\u540e\u8005\u610f\u601d\u76f8\u540c\uff0c\u4f46\u662f\u8868\u793a\u7684\u662f\u4e8c\u8005\u4e4b\u95f4","title":"33/34 A fine day"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/READMEN/#3536-our-village","text":"between \u4ecb\u8bcd \u5728....\u4e4b\u95f4 between A and B Just between you and me, don't tell others \u5929\u77e5\u5730\u77e5\uff0c\u4f60\u77e5\u6211\u77e5 The lady is between her daughter and her friend hill \u5c0f\u5c71 mountain wife (\u590d\u6570 wives) along \u4ecb\u8bcd(\u6cbf\u7740) swim(swimming) wim\u8f85\u5143\u8f85\u7ed3\u6784 beside \u4ecb\u8bcd \u5728...\u7684\u65c1\u8fb9 There is a bed table beside the bed off \u4ecb\u8bcd \u79bb\u5f00 driver off \u5f00\u8d70 a photograph of our village a photo of my book My wife and I are walking along ..... \u6211\u548c\u6211\u59bb\u5b50\u6cbf\u7740...\u6563\u6b65\uff0c\u82f1\u8bed\u4e2d\u4e60\u60ef\u5c06\u4ed6\u4eba\u653e\u5728\u524d\u9762\uff0c\u8fd9\u91cc\u5c06my wife\u653e\u5728\u9996\u4f4d one is teacher, the other is a doctor \u5f53\u6709\u5927\u4e8e\u4e8c\u4e2a\u7684\u65f6\u5019\uff0c\u7528another out of .... \u51fa\u6765 come out of .... walk out of .... run out of .... some of \u590d\u6570\u5f62\u5f0f some of them \u4ed6\u4eec\u4e2d\u7684\u4e00\u4e9b some of us \u6211\u4eec\u4e2d\u7684\u4e00\u4e9b \u8868\u793a \u8c01\u8c01\u8c01 \"\u7684\" (\u540d\u8bcd\u6240\u6709\u683c) \u7269\u4e3b\u4ee3\u8bcd 's \u6709\u751f\u547d\u7684\u7269\u4f53\u624d\u80fd\u7528\u8fd9\u79cd\u65b9\u5f0f\uff0c\u6bd4\u5982\u4eba\uff0cmother's car of \u65e0\u751f\u547d\u7684\uff0c\u8981\u5012\u7740\u8868\u793a the photo of my school the name of the song the color of the car Jim and Jack's room \u4e24\u4e2a\u4eba\u5171\u7528 Jim's and Jack's rooms \u623f\u95f4\u5404\u5c5e\u5404\u81ea\u6240\u6709 take to \u5f00\u59cb\u3001\u4ece\u4e8b take down \u5199\u4e0b\u3001\u8bb0\u4e0b take off \u8131\u4e0b\u3001\u8d77\u98de take on \u5448\u73b0\u3001\u627f\u62c5 turn in \u4e0a\u4ea4 turn up \u8c03\u9ad8 turn down \u8c03\u4f4e turn off \u5173\u95ed turn out \u7ed3\u679c\u662f look after \u7167\u987e\u3001\u7167\u770b look up \u67e5\u8be2 look for \u5bfb\u627e look at \u770b look into \u8c03\u67e5 look to \u6307\u671b\u3001\u4f9d\u8d56 look over \u68c0\u67e5\u3001\u67e5\u770b The doctor is look over the crying baby, but he can't find out what is wrong with it put off \u63a8\u8fdf\u3001\u803d\u6401 put up \u5f20\u8d34\u3001\u4e3e\u8d77 put down \u653e\u4e0b\u3001\u9547\u538b put away \u6536\u8d77","title":"35/36 our village"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/READMEN/#3738","text":"\u526f\u8bcd: \u7528\u6765\u4fee\u9970adj\u3001v\u3001adv \u4fee\u9970adj I am very tired I am so tired I am too tired I am awfully tired \u4fee\u9970v I love you I love you very much I love you awfully \u526f\u8bcd\u901a\u5e38\u60c5\u51b5\uff0c\u5f62\u524d\u52a8\u540e hard work \u8270\u82e6\u7684\u5de5\u4f5c wokr hard \u52aa\u529b\u5730\u5de5\u4f5c paint \u6d82\u8272\u3001\u4e0a\u8272 pink \u7c89\u8272\u7684 favourite \u6700\u559c\u6b22\u7684 I'am going to(\u52a9\u52a8\u8bcd) paint(\u8c13\u8bed) it(\u5bbe\u8bed) pink(\u5bbe\u8865\uff0c\u5bf9\u4e8e\u5bbe\u8bed\u7684\u8865\u5145\u8bf4\u660e) \u6211\u53d1\u73b0\u90a3\u5c4b\u5b50\u662f\u9ed1\u7684 I find the room dark \u4e0d\u80fd\u662f I find the room is dark We must keep the classroom clean \u5386\u53f2\u4f7f\u4eba\u660e\u77e5: Histories make men wise \u8bd7\u6b4c\u4f7f\u4eba\u7075\u79c0: Poems make men witty \u6570\u5b66\u4f7f\u4eba\u7f1c\u5bc6: Math make men subtle \u54f2\u5b66\u4f7f\u4eba\u6df1\u523b: Philosophy make men deep It's for my daughter for: \u4e3a\u4e86...\u67d0\u4eba\u800c... It's for you \u5bf9\u4e8e\u67d0\u4eba\u6765\u8bf4 Math is so difficult for me \u8868\u793a\u539f\u56e0.... what are you sorry for? \u957f\u8fbe... I study Yoga for two years \u4e00\u822c\u5c06\u6765\u65f6: be going to \u53e5\u578b \u4f55\u65f6\u7528 \u9884\u5148\u8ba1\u5212\u548c\u6253\u7b97\u8981\u505a\u7684\u4e8b \u56fa\u5b9a\u5f62\u5f0f \u4e3b + is/am/are + going to \u5c0f\u5c0f\u7684\u8981\u6c42 \u540e\u9762\u63a5\u52a8\u8bcd\u539f\u578b I am going to go shoping this weekend He is going to sell his old car and buy a new one be going to = be gonna \u53e3\u8bed\u4e2d\u53ef\u4ee5\u7b80\u5199 I am gonna be(\u52a8\u8bcd\u539f\u578b\uff0c\u9700\u8981\u8981\u6709) happy this year be going to \u53e5\u578b\u7684\u5176\u4ed6\u5f62\u5f0f: \u7591: be \u63d0\u524d \u5426: be + not Is she going to go shopping this weekend? housework \u5bb6\u52a1\u6d3b listen \u662f\u4e00\u4e2a\u52a8\u8bcd\uff0c\u4e00\u822c\u540e\u9762\u8981\u52a0to listen to the music Alice sings well(\u526f\u8bcd\u4fee\u9970\u52a8\u8bcd\uff0c\u653e\u5728\u52a8\u8bcd\u540e\u9762) fine \u5f62\u5bb9\u8bcd nice \u5f62\u5bb9\u8bcd good \u5f62\u5bb9\u8bcd well \u662f\u526f\u8bcd pick \u6311\u9009 bring \u5e26\u6765 carry \u643a\u5e26\u3001\u642c\u8fd0 take \u5e26\u6765 take away \u62ff\u8d70 make the bed for \u4e3a...\u94fa\u5e8a","title":"37/38"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/READMEN/#3940","text":"front n \u524d\u9762 in front of \u5728...\u4e4b\u524d (\u5916\u90e8) in the front of (\u5185\u90e8) The main is in front of the car The main is in the front of the car careful \u5f62\u5bb9\u8bcd What are you going to do with .... \u4f60\u6253\u7b97\u5982\u4f55\u5904\u7406..... Be carefull Give it to me \u7948\u4f7f\u53e5: \u52a8\u8bcd\u5f00\u5934\u3001\u6ca1\u6709\u4e3b\u8bed be + adj\\prep \u53ef\u4ee5\u6784\u6210\u7948\u4f7f\u53e5 be happy be good be nice be in beijing Give it to me => You give the vase to me \u53cc\u5bbe\u8bed \u53ef\u4ee5\u63a5\u53cc\u5bbe\u8bed\u7684\u8bcd: give show fake teach give sth to sb = give sb sth I give a flower to my mother = I give my mother a flower There we are \u77a7\uff0c\u770b....\uff0c\u5c31\u8fd9\u4e48\u7740\u5427 \u8bf4\u4e0d\u7684\u51e0\u79cd\u65b9\u5f0f: \u6784\u6210 is not/am not/are not \u5bf9\u4e8e\u5b9e\u4e49\u52a8\u8bcd\u7684\u5426\u5b9a\u9700\u8981\u52a0Don't(Do not) No + n No smoking Don't(\u52a9\u52a8\u8bcd) smoke(\u52a8\u8bcd\uff0c\u6240\u4ee5\u4e0d\u80fd\u7528is) Don't come in Don't dust in Don't litter Don't fall Don't sleep in Don'it enter Don't drop it \u90fd\u662f\u53ef\u4ee5\u63a5\u53cc\u5bbe\u8bed * show \u7ed9..\u770b * send \u9001\u7ed9 * take \u5e26\u7ed9 show sb sth = show sth to sb send sb sth = send sth to sb take sb sth = take sth to sb carry \u643a\u5e26 get \u5f97\u5230\u3001\u62ff bring \u5e26\u6765 take \u5e26\u8d70 ask sb to do sth ask sb not to do sth","title":"39/40"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/READMEN/#4142-pennys-bag","text":"cheese \u5976\u916a bread soap \u80a5\u7682 soup \u6c64 chocolate \u5de7\u514b\u529b sugar \u7cd6(\u767d\u7802\u7cd6) candy \u7cd6\u679c sugar coat \u59d4\u5a49 Can you sugar ciat a little? coffee \u5496\u5561 tea \u8336 tobacco \u70df\u8349 cigarette Not very \u4e0d\u662f\u975e\u5e38.... It is not very heavy? \u91cf\u8bcd(\u91cf\u8bcd\u672c\u8eab\u53ef\u4ee5\u662f\u590d\u6570\uff0c\u6bd4\u5982two bottles....\u3001two pieces of....): A piece of.... \u4e00\u7247 a loaf of... \u4e00\u4e2a\u3001\u4e00\u6761\u7684 a bar of.... \u4e00\u6761\u3001\u4e00\u5757\u7684 a bottle of.... \u4e00\u74f6\u7684.... a pound of .... \u4e00\u699c\u7684.... a tin of... \u4e00\u7f50\u7684.... a cup of....1 \u4e00\u676f... a box of.... \u4e00\u76d2... s spoon of... \u4e00\u52fa... half a pound of .... \u534a\u699c..... a quarter of a pound of .... \u56db\u5206\u4e4b\u4e00\u699c.... \u4e0d\u53ef\u6570\u540d\u8bcd \u6db2\u4f53\u72b6\u7684\u52a8\u8bcd\u3001water\u3001tea\u3001coffee\u3001milk\u3001beer \u7269\u8d28\u540d\u8bcd soap\u3001bread\u3001chocolate\u3001rice\u3001tobacco \u62bd\u8c61\u540d\u8bcd love\u3001friendship\u3001work\u3001homework \u4e0d\u53ef\u6570\u540d\u8bcd\u7528\u6cd5: 1. \u524d\u9762\u4e0d\u53ef\u4ee5\u52a0 one\u3001two\u3001three 2. \u524d\u9762\u4e0d\u53ef\u4ee5\u52a0 a\\an 3. \u540e\u9762\u4e0d\u53ef\u4ee5\u52a0s\u3001\u6c38\u8fdc\u662f\u5355\u6570 the beer\u3001the cheese\u3001some rice \u9700\u7528\u7528\u91cf\u8bcd\u642d\u914d: a piece of bread a loaf of bread a bar of soap a bottle of cola some vs any some\\any + \u590d\u6570\u540d\u8bcd\u6216\u4e0d\u53ef\u6570\u540d\u8bcd\u65f6\uff0c\u8868\u793a\u4e00\u4e9b\uff0c some\u7528\u5728\u80af\u5b9a\u53e5\u4e2d\uff0cany\u7528\u5728\u5426\u5b9a\u53e5\u4e2d\uff0c\u7591\u95ee\u53e5\u4e2d \u4f46\u662f\u5728\u8868\u8bf7\u6c42\u3001\u5efa\u8bae\u7684\u7591\u95ee\u53e5\u65f6\u7528some Could you lend me some money? any/some + \u5355\u6570\u540d\u8bcd\uff0csome\u7ffb\u8bd1\u4e3a\u67d0\u4e00\uff0cany\u7ffb\u8bd1\u4e3a\u4efb\u4e00 Some day\uff0che can be some one \u67d0\u4e00\u5929\uff0c\u4ed6\u53ef\u80fd\u79f0\u4e3a\u4e00\u4e2a\u4eba\u7269 people\u662f\u5355\u590d\u6570\u540c\u884c\u7684\u53ef\u6570\u540d\u8bcd few \u51e0\u4e4e\u6ca1\u6709\uff0c\u4fee\u9970\u53ef\u6570\u540d\u8bcd cake \u86cb\u7cd5\u3001(\u5c45\u7136\u662f\u53ef\u6570\u540d\u8bcd) bread \u9762\u5305(\u4e0d\u53ef\u6570\u540d\u8bcd) apple \u82f9\u679c(\u53ef\u6570\u540d\u8bcd) Five dollars is enough\uff0c\u8fd9\u91cc\u7528is\uff0c\u56e0\u4e3afive dollars\u662f\u4e00\u4e2a\u6574\u4f53","title":"41/42 Penny's bag"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/READMEN/#4344-hurry-up","text":"of course certainly of course not \u5f53\u7136\u6ca1\u6709 kettle \u6c34\u58f6 behind teapot \u8336\u58f6 hot pot \u706b\u9505 now \u73b0\u5728\u3001\u6b64\u523b What are you doing now? I am learning English What are you going to do now? look Look! Can you see it? Listen! Can you hear it? Look for it! Can you find it? \u8868\u793a\u52a8\u4f5c: Look\u3001Listen\u3001Look for it! \u8868\u793a\u7ed3\u679c: see\u3001hear\u3001find boil \u6cb8\u817e\u3001\u5f00 boil an egg Hurry up! Be quick! make\u7684\u7528\u6cd5: make the tea \u6c8f\u8336 make some coffee make in bed What make is it? It's over there \u5c31\u5728\u90a3\u513f right here \u5c31\u5728\u8fd9\u513f Can you see it? Can you find it? look -> see listen -> hear look for -> find There it is -> It is there Here thery are -> They are here Here I am There he is \u53ef\u4ee5\u5417? Can\u53ef\u4ee5\u7528\u4e8e\u4efb\u4f55\u4eba\u79f0\uff0c\u4e0d\u7528\u8003\u8651\u4eba\u79f0\u548c\u5355\u590d\u6570 Can you....? Can she....? Can he.....? Can we...? Can they...? can + \u52a8\u8bcd\uff0c\u4e14\u662f\u539f\u578b Can you help me? Can you do it? Can we swim together? Can you make the tea? Can you see it? Can you find them? knife -> knives (fe\u7ed3\u5c3e\uff0c\u53d8\u6210ves) box -> boxes (\u4ee5s\u3001sh\u3001x \u3001ch\u7ed3\u5c3e\u7684 + es/iz/) loaf -> loafies (f\u7ed3\u5c3e\uff0c\u53d8\u6210ves) shelf -> shelves f\u7ed3\u5c3e\uff0c\u53d8\u6210ves) wife -> wives (fe\u7ed3\u5c3e\uff0c\u53d8\u6210ves) dish -> dishes (\u4ee5s\u3001sh\u3001x \u3001ch\u7ed3\u5c3e\u7684 + es/iz/) bus -> buses (\u4ee5s\u7ed3\u5c3e\uff0c\u53d8\u6210es) Are there any + \u590d\u6570 ? Is there any + \u4e0d\u53ef\u6570\u540d\u8bcd? \u6709: 1. \u62e5\u6709 have 2. \u5b58\u5728 there is/are Do you have a boyfriend? \u8fd9\u91cc\u662f\u62e5\u6709\u7684\u5173\u7cfb Do you have any monry? Are there any trees? Are there any buildings? look for \u5bfb\u627e find \u627e\u5230 find out \u627e\u51fa look at \u770b must\u7684\u5426\u5b9a\u5f62\u5f0f\u662fneed't may\u8868\u793a\u53ef\u4ee5\u65f6\uff0c\u5b83\u7684\u53cd\u4e49\u8bcd\u65f6mustn't","title":"43/44 Hurry up"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/READMEN/#4546-the-bosss-letter","text":"can \u80fd\u591f\uff0c\u53ef\u4ee5 boss \u8001\u677f manager \u7ecf\u7406 minute wait a minute \u7b49\u4e00\u4f1a ask \u8bf7\u6c42\u3001\u8be2\u95ee ask the way \u95ee\u8def handwriting \u4e66\u5199 terrible \u7cdf\u7cd5\u7684 Can you come here a minute please? a minute \u4e00\u4f1a\u3001\u4e00\u4e0b next door \u5728\u9694\u58c1\u3001\u4e0e...\u76f8\u90bb She is next door She is next door to us There is a school next door to the park next door to.... \u4e0e\u4ec0\u4e48,..\u76f8\u90bb next-door \u9694\u58c1\u7684(adj) The next-door girl is very beautiful The old man next-door is going to leave \u60c5\u6001\u52a8\u8bcd: \u6982\u5ff5: \u8868\u793a\u60c5\u611f\u3001\u6001\u5ea6 You must go out! Can you please stand up? \u5305\u62ec: can\u3001must\u3001may... \u7528\u6cd5: +\u52a8\u8bcd\u3001\u4e14\u539f\u578b He can do/read/write it \u6ca1\u6709\u4eba\u79f0\u548c\u6570\u7684\u53d8\u5316 \u7591\u95ee\u53e5\uff0c\u60c5\u6001\u52a8\u8bcd\u63d0\u524d \u5426\u5b9a\u53e5: can-can't, cannot(\u5fc5\u987b\u5408\u5e76\u5728\u4e00\u8d77\u5199\uff0c\u4e0d\u80fd\u7528can not) must->mustn't(\u7981\u6b62) may->may not \u6ca1\u6709\u5fc5\u8981: don't need to lift \u4e3e\u8d77 cake \u997c\u3001\u86cb\u7cd5 biscuit \u997c\u5e72 Can you lift this heavy case? \u8fde\u7cfb\u52a8\u8bcd \u60c5\u6001\u52a8\u8bcd \u5b9e\u4e49\u52a8\u8bcd \u52a9\u52a8\u8bcd can\u5728\u53e3\u8bed\u4e2d\u7684\u5e94\u7528: Can I help you? Can't wait! I can't help! \u6ca1\u6cd5\u5b50 Can you give me a hand? \u53ef\u4ee5\u51fa\u624b\u5e2e\u5fd9\u5417? can \u53ef\u4ee5\u3001\u80fd\u591f must \u5fc5\u987b have to \u4e0d\u5f97\u4e0d need to \u9700\u8981 can't \u4e0d\u80fd\u591f needn't \u6ca1\u5fc5\u8981 \u8868\u793a\u731c\u6d4b\u7528can may it be true? \u8fd9\u53ef\u80fd\u662f\u771f\u7684\u5417? look\u76f8\u5173\u7684\u8bcd\u7ec4: look after \u7167\u987e look around \u73af\u89c6 look up \u5411\u4e0a\u770b look for \u5bfb\u627e hardly \u51e0\u4e4e\u4e0d ever \u6c38\u8fdc\u3001\u66fe\u7ecf almost \u51e0\u4e4e\u3001\u5dee\u4e0d\u591a\u3001\u5c06\u8fd1\u3001\u5feb\u8981","title":"45/46 The boss's letter"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/READMEN/#4748-a-couple-of-coffee","text":"fresh \u65b0\u9c9c\u7684\uff0cthe fresh air egg \u9e21\u86cb butter \u9ec4\u6cb9\uff0c\u4e0d\u53ef\u6570 pure \u7eaf\u51c0\u7684 honey \u8702\u871c ripe \u6210\u719f\u7684 banana \u9999\u8549 jam \u679c\u9171 traffic jam sweet \u751c\u7684 her sweet voice \u4ed6\u751c\u7f8e\u7684\u55d3\u97f3 orange \u6a59\u5b50 choice \u4e0a\u7b49\u7684\uff0c\u7cbe\u9009\u7684 like I like playing(\u4e0d\u80fd\u6709\u4e24\u4e2a\u52a8\u8bcd\uff0c\u8981\u5f31\u5316) football want think I want a new car I want to buy a new car I want to go shoping I want to swim Do you want any sugar? Yes, please Do you want any milk? No, thank you I don't like milk in my coffee I don't like English in Chinese Are they happy? Are they students? Are they on the subway? Are they + n/adj/\u4ecb\u8bcd\u77ed\u8bed \u5bf9\u4e8e\u52a8\u8bcd\u63d0\u95ee\uff0c\u4f7f\u7528Do. Do you like coffee? \u73b0\u5728\u8fdb\u884c\u65f6: \u4e3b\u8bed + is/am/are + doing You are eating breakfast Are you eating breakfast? The apple of one's eyes \u638c\u4e0a\u660e\u73e0 the big apple \u7ebd\u7ea6\u5e02 Adam's apple \u7537\u6027\u7684\u5589\u7ed3 \u540d\u8bcd\u7684\u590d\u6570\u5f62\u5f0f\u8868\u793a\u4e00\u7c7b\u4eba\u6216\u8005\u4e00\u7c7b\u4e8b\u7269? Which do you like better? Biscuits or breads? choice \u7cbe\u9009\u7684\u3001\u4e0a\u7b49\u7684\u3001\u6781\u597d\u7684 new \u65b0\u7684 red \u7ea2\u7684 ripe \u719f\u7684","title":"47/48 A couple of coffee"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/READMEN/#4950","text":"butcher \u5356\u8089\u8005 at the butcher's at the doctor's at the hairdresser's at the baker's meet \u8089\uff0c\u4e0d\u53ef\u6570\u540d\u8bcd beef \u725b\u8089 lamb \u7f94\u7f8a\u8089 mutton \u7f8a\u8089 steak \u725b\u6392 a piece of steak mince \u8089\u9985 chicken pork \u732a\u8089 husband wife tell tell sb sth \u544a\u8bc9\u67d0\u4eba\u67d0\u4e8b To tell you the truth truth \u5b9e\u60c5 either \u4e5f I don't know either \u4e00\u822c\u73b0\u5728\u65f6\u6001: \u4f55\u65f6\u7528 \u7ecf\u5e38\u7684\u72b6\u6001 \u4e60\u60ef\u7684\u52a8\u4f5c \u771f\u7406 \u7ed3\u6784 \u7ecf\u5e38\u7684\u72b6\u6001: \u4e3b\u8bed + is/am/are \u4e60\u60ef\u7684\u52a8\u4f5c: \u4e3b\u8bed + v(\u52a8\u8bcd) \u771f\u7406: \u4e3b\u8bed + is/am/are \u6216 \u4e3b\u8bed + v(\u52a8\u8bcd) \u52a8\u8bcd \u4e3b\u8bed + \u52a8\u8bcd(v) * \u4e3b\u8bed\u4e3a\u975e\u4e09\u5355 + \u52a8\u8bcd\u539f\u578b * \u4e3b\u8bed\u4e3a\u4e09\u5355 + \u52a8\u8bcds\\es \u7b2c\u4e00\u4eba\u79f0 I(\u5355\u6570\u5f62\u5f0f)\u3001we(\u590d\u6570\u5f62\u5f0f) \u4e3b\u683c\u5f62\u5f0f| me\u3001us \u5bbe\u683c\u5f62\u5f0f \u7b2c\u4e8c\u4eba\u79f0 you(\u5355\u590d\u6570\u540c\u578b) \u5bbe\u683c\u548c\u4e3b\u683c\u540c\u578b \u7b2c\u4e09\u4eba\u79f0 he\u3001she\u3001it\u3001They(\u590d\u6570\u5f62\u5f0f) \u4e3b\u683c\u5f62\u5f0f| him\u3001her\u3001them \u5bbe\u683c\u5f62\u5f0f He loves his girfriend very much Jim and Lily walk to school every day They drink beer beer every night My dog watches TV at night She goes to school on foot \u7591\u95ee Thery drink beer every night? Do thery drink beer every night? He loves his girfriend very much Does he love his girlfriend very much? \u5426\u5b9a don't \u6765\u5426\u5b9a Do you want ant meat....? tomato potato cabbage lettuce pea bean pear grape peach","title":"49/50"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/READMEN/#5152","text":"the U.S. \u7f8e\u56fd the United States of America American \u7f8e\u56fd\u4eba Brazil \u5df4\u897f Holland \u8377\u5170 Dutch \u8377\u5170\u4eba England \u82f1\u56fd English \u82f1\u56fd\u4eba Italy \u610f\u5927\u5229 Italian \u610f\u5927\u5229\u4eba Norway \u632a\u5a01\u4eba Russia \u4fc4\u7f57\u65af\u3001\u4fc4\u7f57\u65af\u4eba Spain \u897f\u73ed\u7259 Spanish \u897f\u73ed\u7259\u4eba Greece \u5e0c\u814a Greek \u5e0c\u814a\u4eba Athens \u96c5\u5178 climate \u6c14\u5019 (\u5f88\u957f\u4e00\u6bb5\u65f6\u95f4\u4f53\u73b0\u51fa\u6765\u7684\u6c14\u5019\u7279\u70b9) weather \u5929\u6c14(\u4e00\u5929\u7684\u6c14\u5019) pleasant \u5b9c\u4eba\u7684 a pleasant manner \u968f\u548c\u7684\u6001\u5ea6 a pleasant dream \u7f8e\u68a6 like\uff0c\u50cf What's the climate like? \u7b49\u540c\u4e8e\u4e0a\u9762\u7684What's.... How's the climate? How's the weather? How's her boyfriend? How's your boss? What's the climate like in .... + \u56fd\u5bb6/\u57ce\u5e02/\u5b63\u8282/\u6708\u4efd? It's often sunny in March It's + \u5929\u6c14\u5f62\u5bb9\u8bcd + in .... It + \u5929\u6c14\u52a8\u8bcd + in ..... \u4e00\u822c\u73b0\u5728\u65f6: \u7ecf\u5e38\u7684\u72b6\u6001 \u4e3b\u8bed + is/am/are .... \u4e60\u60ef\u7684\u52a8\u4f5c \u4e3b\u8bed + v \u771f\u7406 \u8fd9\u91cc\u51ac\u5929\u7ecf\u5e38\u662f\u96ea\u5929 It's often snowy in winter here \u8fd9\u91cc\u51ac\u5929\u7ecf\u5e38\u4e0b\u96ea It often snows in winter here at / on / in + \u65f6\u95f4 at + \u70b9 at 2:00 at 4:00 on + \u5929 on Sunday on Jan.7th in + \u6708/\u5b63/\u5e74(\u6301\u7eed\u7684\u65f6\u95f4) sometimes \u6709\u65f6\u3001\u9891\u5ea6\u526f\u8bcd He is sometimes late sometime \u67d0\u65f6\u3001\u526f\u8bcd I hope to see you again sometime some time \u4e00\u6bb5\u65f6\u95f4 I takes me some time to get there","title":"51/52"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/READMEN/#5354","text":"mild \u6e29\u548c\u7684 spicy food \u8f9b\u8fa3\u7684\u98df\u7269 north east west south be in the south of A\uff0c\u5728A\u7684\u5357\u90e8 be to the south of A\uff0c\u5728A\u5916\u7684\u5357\u90e8 news (north\u3001ease\u3001weat\u3001 south) \u65b0\u95fb\u3001\u6d88\u606f East\u3001west\u3001home is best \u91d1\u7a9d\u94f6\u7a9d\uff0c\u4e0d\u5982\u81ea\u5df1\u7684\u8349\u7a9d wet \u6f6e\u6e7f\u7684 weep \u6d41\u6cea wave \u6ce2\u6d6a wine \u7ea2\u9152 wash \u6e05\u6d17 season \u5b63\u8282 best \u6700(adv)\u3001\u6700\u597d\u7684(adj) I like green best (\u884c\u5bb9\u8bcd\u524d\u3001\u52a8\u8bcd\u540e -> \u526f\u8bcd\u7684\u4f4d\u7f6e) I like beijing best night \u591c\u665a evening \u508d\u665a rise \u5347\u8d77 set \u843d\u4e0b early \u65e9\u7684 late \u665a\u7684 subject \u79d1\u76ee\u3001\u8bdd\u9898 what's the climate\\weather like in + (\u6708\u4efd\u3001\u5b63\u8282\u3001\u5730\u70b9) \u63cf\u8ff0\u5929\u6c14\u7684\u53e5\u5b50: It is ... in ... It is terrible in spring It is dry in the west It is pleasant in Xiamen Which seasons do you like best? Which are your favorite aseasons? \u9891\u7387\u526f\u8bcd: never seldom sometimes often usually always \u9891\u7387\u526f\u8bcd\u7684\u4f4d\u7f6e: \u60c5\u3001\u7cfb\u540e\uff0c\u5b9e\u4e49\u524d He is always late He often writes love letters to girls \u8868\u8fbe\u5f3a\u8c03\u65f6\uff0c\u53ef\u8c03\u6574\u4f4d\u7f6e I can never remember I never can remember (\u8c03\u6574\u4f4d\u7f6e) \u8c08\u8c08\u5929\u6c14: sunny/clear \u6674\u6717 rain showers \u9635\u96e8 light snow \u5c0f\u96ea mostly cloudy \u5927\u90e8\u591a\u4e91 partly windy \u5c40\u90e8\u6709\u98ce \u96fe\u973e haze sandstorm \u6c99\u5c18\u7206 The weather is bad/terrible I am crazy about..... south by east \u5357\u504f\u4e1c in season \u5f53\u4eca\u3001\u65fa\u5b63 out of season \u6de1\u5b63 make the best of \u5c3d\u91cf\u5229\u7528 best of all \u6700\u559c\u6b22 at the best \u5145\u5176\u91cf\u3001\u81f3\u591a at one's best \u5174\u76db\u5230\u6781\u70b9 day and night, night and day \u591c\u4ee5\u7ee7\u65e5\u7684 by night \u5728\u591c\u95f4 on the rise \u5728\u589e\u957f rise from the dead \u6b7b\u800c\u590d\u751f give rise to \u5f15\u8d77 rise up \u8d77\u4e49 in the early seventies from the earliest times at the earliest set about \u7740\u624b\u3001\u5f00\u59cb set aside \u62d4\u51fa\u3001\u6311\u51fa\u3001\u7559\u51fa set back \u63a8\u8fdf\u3001\u5ef6\u7f13 set down \u653e\u5728\u3001\u8bb0\u4e0b set forth \u9648\u8ff0 set off \u52a8\u8eab\u3001\u51fa\u53d1 be different from \u4e0e...\u4e0d\u540c \uff0c\u540e\u9762\u63a5\u7684\u662f\u6bd4\u8f83\u7684\u5bf9\u8c61 A is different from B be different in \u5728...\u65b9\u9762\u4e0d\u540c\uff0cin\u540e\u9762\u63a5\u6bd4\u8f83\u7684\u90a3\u65b9\u9762\u3002 The difference in price was enormous.","title":"53/54"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/READMEN/#5556","text":"live live + at (\u975e\u5e38\u5c0f\u7684\u5730\u65b9) live + in (\u76f8\u5bf9\u5927\u7684\u5730\u65b9) She lives at 23 Haidian Street I live in Beijing evil adj \u90aa\u6076\u7684 stay \u77ed\u6682\u505c\u7559 stay + at (\u975e\u5e38\u5c0f\u7684\u5730\u65b9) stay + in (\u5927\u7684\u5730\u65b9) stay at home stay at hotel stay in New York arrive arrive + at (\u5c0f\u7684\u5730\u65b9) arrive + in (\u5927\u7684\u5730\u65b9) I arrive at the classroom early I arrive in Shanghai late housework \u4e0d\u53ef\u6570\u540d\u8bcd homework\u5bb6\u5ead\u4f5c\u4e1a do some housework/homework lunch breakfast dinner/supper \u665a\u996d eat/hash breakfast/launch/dinner/supper noon \u6b63\u5348 morning \u65e9\u6668 evening \u508d\u665a night \u591c\u665a in the moring/afternoon/evening at night at noon an evening dress 7, usually \u526f\u8bcd together adv \u4e00\u8d77 \u5317\u4eac\u5e02\u671d\u9633\u533a\u5e78\u798f\u88574\u53f7 4 Xingfu Street, Chanyang District Beijing \u4ece\u5c0f\u5230\u5927\u8bf4 \u52a8\u8bcd\u77ed\u8bed: go to work go to school take sb to ... stay at home see her friends come home from work come home from school go to bed read newspaper watch television home go to school go to work go to bed go to Shanghai go home/arrive home/come home\uff0c\u4e2d\u95f4\u6ca1\u6709to adv\u526f\u8bcd\u7528\u6765\u4fee\u9970\u52a8\u8bcd\uff0chome\u5f53\u526f\u8bcd\u7528\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u76f4\u63a5\u653e\u5728\u52a8\u8bcd\u540e\uff0c\u800c\u4e0d\u7528\u52a0\u4ecb\u8bcdto This is my home \u8868\u793a\u5730\u70b9\u7684\u526f\u8bcd: home there here upstairs downstairs \u52a8\u8bcd\u548c\u8fd9\u4e9b\u5730\u70b9\u526f\u8bcd\u642d\u914d\uff0c\u76f4\u63a5\u653e\u5728\u52a8\u8bcd\u540e\u9762 \u540d\u8bcd\u7684\u590d\u6570: 1. +s 2. \u8f85\u97f3 + y-ies ladies 3. s/sh/ch/x + es watches/buses/dishes 4. o + es potatoes \u52a8\u8bcd\u7684\u7b2c\u4e09\u4eba\u79f0\u5355\u6570: 1. +s 2. \u8f85\u97f3+y-ies 3. s/sh/ch/x + es passes 4. o + es goes \u5f3a\u8c03\u4e3b\u8bed(\u91cd\u590d\u63d0\u53ca\u4e3b\u8bed) She always eats her lunch The children always do their homework Mr Sawer usually reads his newspaper","title":"55/56"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/READMEN/#5758","text":"o'clock \u6574\u70b9 shop \u5546\u5e97(\u89c4\u6a21\u6bd4\u8f83\u5c0f) department store \u767e\u8d27\u5546\u5e97 moment wait a second wait a moment wait a minute She is learning English at a moment It is ..... \u5929\u6c14 It is terriable in spring \u70b9\u949f It is eight now \u7535\u8bdd It's me, Venus \u4ea4\u901a\u65b9\u5f0f: on foot by bike by bus by car by train by air How do you go to school? Ther are going to school on foot \u4e00\u822c\u73b0\u5728\u65f6 vs \u73b0\u5728\u8fdb\u884c\u65f6 \u4f7f\u7528\u60c5\u51b5\u4e0d\u540c \u4e00\u822c\u73b0\u5728\u65f6: \u4e60\u60ef\u7684\u72b6\u6001\u3001\u7ecf\u5e38\u7684\u52a8\u4f5c\u3001\u771f\u7406 \u73b0\u5728\u8fdb\u884c\u65f6: \u6b64\u65f6\u6b64\u523b\u6b63\u5728\u505a\u3001\u4e00\u6bb5\u65f6\u95f4\u5185\u4e00\u76f4 \u7ed3\u6784\u4e0d\u540c \u4e00\u822c\u73b0\u5728\u65f6: \u4e3b\u8bed + is/am/are, \u4e3b\u8bed+v(\u52a8\u8bcd\u539f\u578b) \u73b0\u5728\u8fdb\u884c\u65f6: \u4e3b\u8bed + is/am/are + doing \u65f6\u95f4\u72b6\u8bed\u4e0d\u540c \u4e00\u822c\u73b0\u5728\u65f6 every\u3001always\u3001usually\u3001often\u3001sometimes \u73b0\u5728\u8fdb\u884c\u65f6: now\u3001at the moment what's the time? what time is it? \u8fde\u8bfb(\u4e00\u8f85\u4e00\u5143\uff0c\u524d\u8f85\u540e\u5143): it is -> it is (t\u548ci\u8fde\u8bfb) an orange put on stop it take off come on in live at clean it up \u7701\u8bfb: sit down part time big cake but now good moring not that one good night bookcase \u53e3\u8bed\u4e60\u60ef: I'm gonna sit down on the grass (gonna -> going to) I want to put on my shirt(want to -> wanna)","title":"57/58"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/READMEN/#5960","text":"envelope \u4fe1\u5c01 writing paper \u4fe1\u7eb8(\u4e0d\u53ef\u6570) a piece of writing paper shop assisant \u552e\u8d27\u5458 S\u3001M\u3001L XS -> extra small small/medium/large size size 6/7 \u53cd\u8fc7\u6765\u8bf4\uff0c7\u7801 class 2 \u4e8c\u73ed line 10 \u5341\u53f7\u7ebf a bottle of glue a stick of chalk / a box of chalk change \u96f6\u94b1 keep the change \u4e0d\u7528\u627e\u96f6\u4e86 \u4e70\u4e1c\u897f\u7528\u6765\u8be2\u95ee\u7684\u53e5\u578b: I want some...../I want a .... Do you have any...? n + please only adv(\u4ec5\u4ec5\u3001\u53ea\u6709) I have two watches I only have two watches I have only two watches \u4f7f\u7528\u573a\u666f: That's all thank you \u53d1\u97f3\u5b8c\u6bd5 \u8bb2\u8bfe\u7ed3\u675f\u65f6 \u8d2d\u7269\u65f6 what else? Do you have any...? \u53ef\u6570\u540d\u8bcd Do you have any friends/envelopes/bananas/.... \u4e0d\u53ef\u6570\u540d\u8bcd Coffee\\tea\\time.... Do you have any shorts I want some shorts, please Yes what size do you want? I want medium size Can I have a try? \u6211\u53ef\u4ee5\u8bd5\u7a7f\u5417? Yes of course Ok this pair please","title":"59/60"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/READMEN/#6162","text":"feel \u611f\u89c9\u3001look \u770b\u8d77\u6765 \u611f\u5b98\u52a8\u8bcd must call \u53eb\u3001\u8bf7 telephone \u7535\u8bdd \u6253\u7535\u8bdd\u7684\u51e0\u79cd\u8bf4\u6cd5: call sb phone sb give sb a call give sb a phone remember \u8bb0\u4f4f\u3001\u8bb0\u5f97 tongue \u820c\u5934 tongue twister \u7ed5\u53e3\u4ee4 a cold handshake a cold color a piece of news in bed \u751f\u75c5\u5367\u5e8a He is in the bed \u4ed6\u5728\u5e8a\u4e0a He is in bed \u4ed6\u5367\u75c5\u5728\u5e8a in the hospital in hospital sb\u600e\u4e48\u6837? what's the matter with him? what's wrong with sb? what's up? So he muts stay in bed for a week (\u6301\u7eed\u4e00\u4e2a\u661f\u671f\uff0c\u9700\u8981\u52a0for) That's good news for Jimmy (for \u5bf9\u4e8e\u67d0\u4eba\u6765\u8bf4) English is very easy for me \u611f\u5b98\u52a8\u8bcd: \u534a\u7cfb\u52a8\u8bcd(\u7528\u5f62\u5bb9\u8bcd\u6765\u4fee\u9970\uff0c\u548c\u7cfb\u52a8\u8bcd\u63a5\u8fd1)\uff0c\u4e00\u534a\u5b9e\u4e49\u52a8\u8bcd(\u65f6\u6001\u4eba\u79f0\u5355\u590d\u6570\u7b49\u53d8\u5316\u548c\u5b9e\u4e49\u52a8\u8bcd\u4e00\u81f4\uff0c\u7528\u526f\u8bcd\u4fee\u9970) headache earache toothache stomach ache have a xxxache flu \u6d41\u611f bird flu swine flu have flu/have bird flu measles \u9ebb\u75b9 have measles mumps dentist \u7259\u533b scientist tourist typist medicine \u836f He has a headache What must he do? He must take an aspirin The baby has a temperature what must we do? He must see the doctor He is under the weather He has a runny nose\u3001sneezing or a scratchy throat He has an allergy I'm troubled by ... \u5e38\u7528\u60a3\u75c5\u7684\u8bcd: have/has take/catch get... suffer from...","title":"61/62"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/READMEN/#6364","text":"better certainly adv \u5f53\u7136 get up go to bed / go to sleep yet adv \u8fd8\u3001\u4ecd rich \u6cb9\u817b\u7684\u3001\u5bcc\u6709\u7684 rich food \u6cb9\u817b\u7684\u98df\u7269 mild food \u6e05\u6de1\u7684\u98df\u7269 spicy food \u8f9b\u8fa3\u7684\u98df\u7269 green food \u7eff\u8272\u98df\u54c1 fast food \u5feb\u9910 sea food \u6d77\u9c9c \u4fee\u9970\u611f\u5b98\u52a8\u8bcd\uff0c\u9700\u8981\u7528\u5f62\u5bb9\u8bcd(\u7c7b\u4f3c\u7cfb\u52a8\u8bcd) yet \u5426\u5b9a\u7591\u95ee\u53e5\u672b mustn't \u7edd\u5bf9\u4e0d You are better now, but you mustn't go to school yet You must stay in bed two days again(\u5f3a\u8c03\u518d\u6765\u4e24\u5929\uff0c\u800c\u4e0d\u662f\u518d\u5367\u5e8a\u3002\u6240\u4ee5\u4e0d\u80fd\u7528again) You must stay in bed for another two days I must stay in BJ for another two weeks We must study English for another two years \u53d1\u70e7 1. have a fever 2. have a temperature He has a ferver Do you have a fever? Does he have a fever? I don't have a fever He doesn't have a fever \u5367\u5e8a stay in bed remain in bed He every day can get up about two hours (\u91cd\u70b9\u662f\u4ed6\u53ef\u4ee5\u8d77\u5e8a\uff0c\u800c\u4e0d\u662fevery day) He can get up for(\u957f\u8fbe + \u65f6\u95f4\u6bb5) about two hours every day \u82f1\u6587\u4e2d\uff0c\u8981\u7a81\u51fa\u8c01\u3001\u505a\u4e86\u4ec0\u4e48 each day(\u5f3a\u8c03\u4e2a\u4f53) vs every day(\u5f3a\u8c03\u6574\u4f53) Hi every one! Each man has his own name You(\u4e3b) must(\u60c5\u6001\u52a8\u8bcd) keep(\u52a8\u8bcd) the room(\u5bbe\u8bed) warm (\u5bbe\u8865) must: \u7591\u95ee: Must I clean the room? \u5426\u5b9a: 1. You mustn't make noise here 2. I don't need to clean the room \u4e0d\u5fc5 play: play games/play the violin/play football/play basketball match: \u706b\u67f4 matches \u590d\u6570 talk: talk to sb \u4e0e....\u8c08\u8bdd Don't talk to me like that!/Don't talk to strangers library: in the library so: adv \u5982\u6b64\u5730 so beautiful/ so much lean out of: \u8eab\u4f53\u63a2\u51fa\u3001\u63a2\u8eab\u51fa\u53bb lean out of the window have/make/take/get","title":"63/64"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/READMEN/#6566","text":"Dad key \u94a5\u5319 \u53ef\u6570\u540d\u8bcd the key to the door \u95e8\u7684\u94a5\u5319 the key to the car the color of the book baby \u5a74\u513f\u3001\u5b9d\u8d1d baby-kid(child)-teenager baby, honey, sweetheart listen(\u542c) vs hear(\u542c\u89c1) Listen! Can you hear it? Look(\u770b) vs See(\u770b\u89c1) enjoy \u73a9\u7684\u5f00\u5fc3\u3001\u559c\u6b22 I enjoy my holiday I enjoy the song very much en-\u4f7f\u5f97\u7684\u8bcd\u524d\u7f00 enlarge\u3001endanger\u3001enslave\u3001enjoy mum \u5988\u5988 You must be(\u60c5\u6001\u52a8\u8bcd+be\u52a8\u8bcd\u539f\u5f62) home at half past ten \u56de\u5bb6: 1. be home 2. get home 3. come home 4. arrive home \u8fd9\u4e9bhome\u90fd\u662f\u526f\u8bcd\u53ef\u4ee5\u76f4\u63a5\u4fee\u9970\u52a8\u8bcd\uff0c\u5982\u679c\u662f\u540d\u8bcd\u9700\u8981\u6709\u4ecb\u8bcd\u642d\u914d(go to(\u642d\u914d\u4ecb\u8bcd) school) the answer to the question the exit to the building the ticket to the movie","title":"65/66"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/READMEN/#6768","text":"greengrocer at the greenhgrocer's at the butcher's at the doctor's at the grocer's absent He is absent today He is absent from school today be absent from school\\work\\class She is not absent from work keep keep healthy \u4fdd\u6301\u5065\u5eb7 spend \u52a8\u8bcd He stays in Beijing for two days He spends two days in Beijing. \u4e00\u822c\u60c5\u51b5\uff0c\u65f6\u95f4\u548c\u5730\u70b9\u540c\u65f6\u51fa\u73b0\u7684\u65f6\u5019\uff0c\u5730\u70b9\u5728\u524d\uff0c\u65f6\u95f4\u5728\u540e\uff0cspend\u5728\u76f8\u53cd spend + \u65f6\u95f4 + \u5730\u70b9 spend + \u65f6\u95f4 + with sb He spends two weeks with his girlfriend country in the country \u5728\u4e61\u4e0b in the city \u5728\u57ce\u91cc in the village \u5728\u6751\u91cc in my country \u5728\u6211\u7684\u56fd\u5bb6 village vs country lucky adj \u5e78\u8fd0\u7684 You are so lucky! You are a lucky dog. \u661f\u671f Sunday (Sun) Monday (Mon) Tuesday (Tues) Wednesday (Wed) Thursday (Thu) Friday (Fri) Saturday (Sat) \u4e00\u4e2a\u661f\u671f\u7684\u5f00\u59cb\u662fSunday \u661f\u671f\u9700\u8981\u9996\u5b57\u6bcd\u5927\u5199 on + \u5929 Where(\u8fc7\u53bb\u5f0f) you at the butcher's? \u4f60\u521a\u5728\u8089\u5e97\u5417? Are you at the butcher's? \u4f60\u73b0\u5728\u5728\u8089\u5e97\u5417? How's jmmy today? How's (is/was/has) Was he absent from school last week? He was absent from last week \u4e00\u822c\u9648\u8ff0\u53e5 How are you(all keeping)? We're going to spend three days at my mother's at the butcher's Aren't you lucky! \u4f60\u4eec\u53ef\u771f\u5e78\u8fd0\u554a","title":"67/68"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/note/","text":"\u4ecb\u8bcd in \u5728...\u91cc\u9762 on \u5728...\u4e0a\u9762\u3001\u5728...\u65c1\u8fb9\uff1b\u9760\u8fd1\uff0c\u5728\u5de6/\u53f3\u3001put on(\u7a7f\u4e0a)\u3001trun on(\u6253\u5f00) under over \u5728..\u4e0a\u65b9\uff0c\u4e0d\u63a5\u89e6\u3001\u7ffb\u8d8a across \u4ece...\u7684\u4e00\u8fb9\u5230\u53e6\u4e00\u8fb9 in the sun under the tree on the tree \u957f\u5728\u6811\u4e0a in the tree \u5728\u6811\u4e0a on the board \u5728\u7532\u677f\u4e0a There is a window in the wall \u5899\u4e0a\u6709\u526f\u753b The desk near the window \u662f\u4e0d\u6b63\u786e\u7684\uff0cThe desk is near the window She with her friends\u4e0d\u6b63\u786e\uff0cShe is with her friends for: \u4e3a\u4e86...\u67d0\u4eba\u800c.. It's for you \u5bf9\u4e8e\u67d0\u4eba\u6765\u8bf4... Math is so difficult for me \u8868\u539f\u56e0... What are you sorry for? \u957f\u8fbe... I study Yoga for two years \u540d\u8bcd\u7684\u6570 \u53ef\u6570\u540d\u8bcd(C) \u4e0d\u53ef\u6570\u540d\u8bcd(U) \u53ef\u6570&\u4e0d\u53ef\u6570 \u4e00\u822c\u53ef\u6570\u540d\u8bcd + s \u6e05\u8f85\u97f3 + s -> /s/ books\u3001bikes\u3001cups\u3001truths \u6d4a\u8f85\u97f3&\u5143\u97f3 + s -> /z/ pens\u3001girls\u3001teachers\u3001door /t/ + s -> /ts/ cats\u3001hats\u3001shirts /d/ + s -> /dz/ beds\u3001hands\u3001friends\u3001birds box -> boxes buzz -> buzzes dish -> dishes garage -> garages watch -> watches bridge -> bridges \u4e00\u822c\u60c5\u51b5\u5728\u8bcd\u5c3e\u76f4\u63a5\u52a0 -s \u4ee5 -s , -x , -ch , -sh \u7ed3\u5c3e\u7684\u540d\u8bcd, \u5728\u8bcd\u5c3e\u52a0 -es glass -> glasses box -> boxes watch -> watches brush -> brushes bench -> benches \u4ee5\u8f85\u97f3\u5b57\u6bcd\u52a0-y \u7ed3\u5c3e\u7684\u540d\u8bcd, \u628a-y \u6539\u4e3a-i, \u518d\u52a0-es story -> stories country -> countries \u4ee5-o \u7ed3\u5c3e\u7684\u540d\u8bcd\u53d8\u4e3a\u590d\u6570\u65f6, \u5e38\u5728\u8bcd\u5c3e\u52a0-s\uff0c\u4f46\u6709\u4e9b\u540d\u8bcd\u8981\u52a0-es \u5143\u97f3\u5b57\u6bcd + o\u7ed3\u5c3e\u52a0es \u8f85\u97f3\u5b57\u6bcd + o\u7ed3\u5c3e\u52a0s Negro -> Negroes hero -> heroes potato -> potatoes tomato -> tomatoes radio -> radios \u7f29\u5199\u4e00\u822c + s photo -> photos (photograph) kilo -> kilos (kilogram) \u4ee5 -f \u6216 -fe \u7ed3\u5c3e\u7684\u540d\u8bcd\u53d8\u4e3a\u590d\u6570\u65f6, \u4e00\u822c\u76f4\u63a5\u52a0 -s , \u4f46\u6709\u4e9b\u4ee5 -f \u6216 -fe \u7ed3\u5c3e\u7684\u540d\u8bcd\u9700\u628a f \u6216 fe \u53bb\u6389, \u52a0 -ves self \u2014> selves life -> lives thief \u2014> thieves wife -> wives knife -> knives loaf -> loaves leaf \u2014> leaves shelf -> shelves wolf -> wolves half -> halves \u5408\u6210\u540d\u8bcd\u53d8\u590d\u6570\u65f6, \u901a\u5e38\u53ea\u5c06\u91cc\u9762\u6240\u542b\u7684\u4e3b\u4f53\u540d\u8bcd\u53d8\u4e3a\u590d\u6570, \u5982\u679c\u6ca1\u6709\u4e3b\u4f53\u540d\u8bcd, \u5219\u5c06\u6700\u540e\u4e00\u90e8\u5206\u53d8\u4e3a\u590d\u6570 son-in-law\u2014sons-in-law storyteller\u2014storytellers \"man/woman+n.\"\u53d8\u590d\u6570\u65f6, \u4f5c\u5b9a\u8bed\u7684 man/woman \u548c\u4e2d\u5fc3\u8bcd\u90fd\u8981\u53d8\u590d\u6570 man teacher -> men teachers woman engineer -> women engineers \u53d8\u5185\u90e8\u5143\u97f3 man -> men woman -> women foot -> feet tooth -> teeth \u7279\u6b8a child -> children \u5355\u6570\u540d\u8bcd + is ... \u590d\u6570\u540d\u8bcd + are ... Her passport is green The men are keyboard operations This assistant is busy Our classroom is large \u53ef\u6570/\u4e0d\u53ef\u6570 \u4e0d\u53ef\u4ee5\u6570\u7684\u3001\u4e0d\u53ef\u4ee5\u8ba1\u7b97\u7684\u540d\u8bcd \u4e0d\u53ef\u6570\u540d\u8bcd: \u6240\u6709\u6db2\u4f53\u7684\u4e1c\u897f \u7269\u8d28\u540d\u8bcd soap\\bread\\chocolate\\rice\\tobacco \u62bd\u8c61\u540d\u8bcd love\\friendship\\work\\homework \u4e0d\u53ef\u6570\u540d\u8bcd\u7684\u7279\u70b9: \u524d\u9762\u4e0d\u80fd\u52a0one\u3001two\u3001three \u524d\u9762\u4e0d\u53ef\u4ee5\u52a0a\\an \u540e\u9762\u4e0d\u53ef\u4ee5\u52a0s\u3001\u6c38\u8fdc\u90fd\u662f\u5355\u6570 \u4e8e\u91cf\u8bcd\u642d\u914d: a piece of bread a loaf of bread a bar of soap a bottle of cola a tin of cola \u91cf\u8bcd a piece of \u4e00\u7247 a loaf of \u4e00\u6761 a bar of \u4e00\u5757 a bottle of \u4e00\u74f6 a pound of \u4e00\u78c5 a tin of \u4e00\u542c a cup of \u4e00\u676f a box of \u4e00\u76d2 a spoon of \u4e00\u52fa \u5f62\u5bb9\u6027\u7269\u4e3b\u4ee3\u8bcd \u540e\u9762\u5fc5\u987b\u52a0\u540d\u8bcd my\u3001your\u3001his\u3001her\u3001its\u3001our\u3001your\u3001their be\u52a8\u8bcd am: I am a doctor \u56fa\u5b9a\u642d\u914d\uff0c\u8fd9\u662f\u52a8\u8bcd\u73b0\u5728\u65f6\u7b2c\u4e00\u4eba\u79f0\u5355\u6570 are: be\u52a8\u8bcd\u73b0\u5728\u65f6\u590d\u6570 \u4e8e\u7b2c\u4e8c\u4eba\u79f0\u6216\u590d\u6570\u4eba\u79f0\u642d\u914d Your are....\u3001we are...\u3001They are...\u3001 is: \u4e3b\u8bed\u65f6\u7b2c\u4e09\u4eba\u79f0\u5355\u6570\u3001He is...\u3001She is....\u3001It is.....\u3001The book is.... \u4ee3\u8bcd \u4ee3\u8bcd\uff0c\u7528\u6765\u4ee3\u66ff\u540d\u8bcd\u3002 \u4eba\u79f0\u4ee3\u8bcd(\u4f60\u3001\u6211\u3001\u4ed6) \u7b2c\u4e00\u4eba\u79f0 I(\u5355\u6570\u5f62\u5f0f)\u3001we(\u590d\u6570\u5f62\u5f0f) \u4e3b\u683c\u5f62\u5f0f| me\u3001us \u5bbe\u683c\u5f62\u5f0f \u7b2c\u4e8c\u4eba\u79f0 you(\u5355\u590d\u6570\u540c\u578b) \u5bbe\u683c\u548c\u4e3b\u683c\u540c\u578b \u7b2c\u4e09\u4eba\u79f0 he\u3001she\u3001it\u3001They(\u590d\u6570\u5f62\u5f0f) \u4e3b\u683c\u5f62\u5f0f| him\u3001her\u3001them \u5bbe\u683c\u5f62\u5f0f \u9664\u4e86\u7b2c\u4e00\u4eba\u79f0\u3001\u7b2c\u4e8c\u4eba\u79f0\u5916\u5176\u4ed6\u90fd\u662f\u7b2c\u4e09\u4eba\u79f0\u3001\u4e0d\u4ec5\u4ec5\u65f6\u4e0a\u9762\u63d0\u5230 \u9648\u8ff0\u53e5\u4e2d\uff0c\u52a8\u8bcd\u524d\u9762\u7528\u4eba\u79f0\u4ee3\u8bcd\u7528\u4e3b\u683c\u3001\u540e\u9762\u7528\u5bbe\u683c Example: I like you I like them You love me They love her \u82f1\u8bed\u4eba\u79f0\u987a\u5e8f: 1. \u5355\u6570\u4eba\u79f0\u9075\u5faa\u7b2c\u4e8c\u4eba\u79f0\u3001\u7b2c\u4e09\u4eba\u79f0\u3001\u7b2c\u4e00\u4eba\u79f0\u7684\u987a\u5e8f You, he and I must clan up the classroom 2. \u590d\u6570\u4eba\u79f0\u9075\u5faa\u7b2c\u4e00\u4eba\u79f0\u3001\u7b2c\u4e8c\u4eba\u79f0\u3001\u7b2c\u4e09\u4eba\u79f0\u7684\u987a\u5e8f We\uff0cyou and they must clean up the classroom 3. \u5f53\u627f\u8ba4\u9519\u8bef\u7684\u65f6\u5019\uff0c\u65e0\u8bba\u5355\u590d\u6570\u4e00\u5f8b 123\u7684\u987a\u5e8f I he and you are sorry for being late \u540d\u8bcd\u6240\u6709\u683c \u4e00\u79cd\u6240\u5c5e\u5173\u7cfb \u540d\u8bcd's + \u540d\u8bcd This is Mike's car That is Tom's watch This is the boy's father That is Mary's dress That is the bird's song \u540d\u8bcd(s) \u53d1\u97f3/z/ \u540d\u8bcd(s)'s + \u540d\u8bcd \u540d\u8bcd(s)'s book Tomas's book or Tomas' book Jones's car or Jones' car Hopkins's bike or Hopkins' bike \u540d\u8bcd(s) \u590d\u6570 \u540d\u8bcd(s)'s + \u540d\u8bcd The teachers' reading-room \u540d\u8bcd's + \u540d\u8bcd(\u53ef\u7701\u7565) \u540d\u8bcd's This shirt is Tim's shirt. This shirt is Tim's Is this shirt Tim's? \u526f\u8bcd \u4fee\u9970\u5f62\u5bb9\u8bcd(\u5f62\u5bb9\u8bcd\u524d) I am tired I am very tired I am so tired I am too tired I am awfully tired very\u3001so\u3001too\u3001awfully \u90fd\u662f\u526f\u8bcd \u4fee\u9970\u52a8\u8bcd (\u653e\u5728\u52a8\u8bcd\u540e\u9762) I love you very much I love you awfully \u4fee\u9970\u526f\u8bcd I swim well I know him well \u5b9a\u8bed \u9650\u5b9a\u3001\u8bf4\u660e\u540d\u8bcd\u6216\u8005\u4ee3\u8bcd\u7684\u54c1\u8d28\u4e0e\u7279\u5f81\u7684\u3002\u6bd4\u5982: Mike's car\uff0c\u5176\u4e2dMike's\u662f\u5b9a\u8bed\uff0c\u4fee\u9970car I want a red(\u5b9a\u8bed) shirt The Tall(\u5b9a\u8bed) boy is my friend His(\u5b9a\u8bed) father is a doctor \u5b9a\u8bed\u524d\u7f6e\u7684\u8fd9\u79cd\u5f62\u5f0f\u548c\u6211\u4eec\u7684\u601d\u7ef4\u65b9\u5f0f\u662f\u4e00\u81f4\u7684\u3002 \u5b9a\u8bed: 1. \u88ab\u5b9a\u8bed\u9650\u5b9a\u7684\u8bcd of \u5b9a\u8bed 2. \u5b9a\u8bed's \u88ab\u9650\u5b9a\u7684\u8bcd \u4f5c\u5b9a\u8bed\u7684\u540d\u8bcd\u662f\u6709\u751f\u547d\u7684\u65f6\u5019\uff0c\u5f80\u5f80\u91c7\u7528\u540d\u8bcd\u6240\u6709\u683c's\u7684\u5f62\u5f0f \u4f5c\u5b9a\u8bed\u7684\u540d\u8bcd\u662f\u65e0\u751f\u547d\u7684\u65f6\u5019\uff0c\u5f80\u5f80\u91c7\u7528of\u7684\u5f62\u5f0f \u53e5\u5b50\u7684\u79cd\u7c7b \u80af\u5b9a\u53e5 \u4e3b\u8bed + \u52a8\u8bcd + \u5176\u5b83\u6210\u4efd \u5426\u5b9a\u53e5 \u4e3b\u8bed + \u52a8\u8bcd + not + \u5176\u5b83\u6210\u4efd \u4e00\u822c\u7591\u95ee yes/no question\uff0c\u4e00\u822c\u4ee5yes/no\u6765\u56de\u7b54 \u7279\u6b8a\u7591\u95ee\u53e5 \u7279\u6b8a\u7591\u95ee\u8bcd\u5f00\u5934\u3001\u90fd\u662f\u4ee5wh\u5f00\u5934\uff0c\u4e0d\u80fd\u76f4\u63a5\u7528yes/no\u6765\u56de\u7b54 This is Miss Sophie Dupont? \u6539\u6210\u4e00\u822c\u7591\u95ee\u53e5(\u52a8\u8bcd\u6362\u5230\u4e3b\u8bed\u4e4b\u524d): Is this Miss Sophie Dupont? \u7279\u6b8a\u7591\u95ee\u53e5 \u4e0d\u7b49\u4e8e \u7279\u6b8a\u7591\u95ee\u8bcd + \u4e00\u822c\u7591\u95ee\u53e5(\u52a8\u8bcd + \u4e3b\u8bed) ? Who is climbing the tree ? What is in it ? \u91cc\u9762\u662f\u4ec0\u4e48\u4e1c\u897f What is on ? Who served you ? I don't know what you are talking about? Example: Your name is Bob Is your name Bob? \u4e00\u822c\u7591\u95ee\u53e5 \u4f60\u7684\u540d\u5b57\u662f\u4ec0\u4e48? \u4e0d\u80fd\u7528yes/no\u6765\u56de\u7b54 \u5982\u4f55\u8f6c\u6362\u4e3a\u7279\u6b8a\u7591\u95ee\u53e5? \u627e\u5230\u80af\u5b9a\u53e5\u4e2d\u88ab\u63d0\u95ee\u7684\u90e8\u5206 \u6839\u636e\u53e5\u610f\u9009\u62e9\u6700\u5408\u9002\u7684\u7279\u6b8a\u7591\u95ee\u8bcd \u5c06\u7279\u6b8a\u7591\u95ee\u8bcd\u7f6e\u4e8e\u53e5\u9996 \u8be5\u7279\u6b8a\u7591\u95ee\u53e5\u4e0d\u9488\u5bf9\u80af\u5b9a\u53e5\u7684\u4e3b\u8bed\u63d0\u95ee\u65f6\uff0c\u52a8\u8bcd\u653e\u5728\u4e3b\u8bed\u524d\u3002 \u6539\u7279\u6b8a\u7591\u95ee\u53e5\u662f\u9488\u5bf9\u4e3b\u8bed\u63d0\u95ee\u65f6\uff0c\u52a8\u8bcd\u4e0d\u7528\u63d0\u524d\u3001\u539f\u4f4d\u4e0d\u52a8 What is your name? Who is Bob? He is my teacher \u4ed6\u662f\u8c01: Who is he? \u8c01\u662f\u6211\u7684\u8001\u5e08: Who is my teacher? My book is on the table? \u6211\u7684\u4e66\u5728\u54ea\u91cc? Where is my book? \u4ec0\u4e48\u5728\u684c\u5b50\u4e0a\u9762? What is on the table? You are French? \u8c01\u662f\u6cd5\u56fd\u4eba: Who is French? (who\u662f\u7b2c\u4e09\u4eba\u79f0\u5355\u6570) Hey\u3001Hi\u3001Hello \u95ee\u597d How is your mother? How is the weather? How are you? \u56de\u7b54: very well\u3001Thank you and you\u3001not bad\u3001very bad\u3001terrible well \u8eab\u4f53\u597d Thanks a lot \u975e\u5e38\u611f\u8c22 Thankyou very much Look at... \u770b... I see him in the street A fat cat \u66b4\u53d1\u6237 The girl is very hot \u8fd9\u4e2a\u5973\u5b69\u975e\u5e38\u6027\u611f \u6307\u793a\u4ee3\u8bcd this\u3001these\u3001that\u3001those \u53cc\u5bbe\u8bed\u52a8\u8bcd give\u3001teach\u3001write\u3001send\u3001offer\u3001post\u3001read teach you English write him a letter send her an e-mail offer you a job read me this lettle post him a letter shell her a new car \u7ed9\u5979\u5e26\u6765\u4e00\u4e9b\u82b1\u5427 Bring her some flower \u7ed9\u6211\u8bb2\u4e2a\u82f1\u8bed\u6545\u4e8b\u5427 Tell me an English story \u628a\u90a3\u672c\u4e66\u9012\u7ed9\u6211 Hand me that book \u628a\u90a3\u672c\u4e66\u7ed9\u6211\u62ff\u8fc7\u6765\u77a7\u4e00\u77a7\u3001\u770b\u4e00\u770b Show me that book \u7ed9\u6211\u4e70\u4e00\u6735\u82b1\u5427 Buy me a flower \u52a8\u8bcd+\u4ee3\u8bcd+\u540d\u8bcd \u82f1\u6587\u4e2d\u4e00\u4e2a\u53e5\u5b50\u4e00\u822c\u6700\u591a\u53ea\u4f1a\u51fa\u73b0\u4e00\u4e2a\u53e5\u5b50 \u8fde\u8bfb \u4e00\u8f85\u4e00\u5143\u3001\u524d\u8f85\u540e\u5143\u53ef\u4ee5\u4e00\u8d77\u8fde\u8bfb An empty \u53e5\u578b What colour's your....? Is this your shirt? Look at... Are you a teacher? How are you today? Nice to meet you What make is it? What's your job? -> What is your job? what are their jobs? \u590d\u6570\u5f62\u5f0f Tied and thirsty There be(\u5b58\u5728) + \u4e3b\u8bed Where is it? Are these your....? \u8fd9\u4e9b\u662f\u4f60\u7684....\u561b? What colour are your...? \u4f60\u7684...\u662f\u4ec0\u4e48\u989c\u8272? \u590d\u6570\u5f62\u5f0f What must I do? // \u6211\u8be5\u505a\u70b9\u5565\u5462? What is he doing? // \u4ed6\u6b63\u5728\u505a\u4ec0\u4e48 I beg your pardon? What about this dress? // \u8fd9\u4ef6\u8863\u670d\u600e\u4e48\u6837? It is + adj + \u65f6\u95f4 // It is fine day today I am off today \u6211\u4eca\u5929\u4e0d\u4e0a\u73ed What are you going to do ? \u4f60\u51c6\u5907\u505a\u4ec0\u4e48? What are you doing now? \u4f60\u73b0\u5728\u6b63\u5728\u505a\u4ec0\u4e48? It is not very heavy \u4e0d\u662f\u975e\u5e38... what's in it? \u91cc\u9762\u6709\u4ec0\u4e48 do with \u5904\u7406 What are you going to do with there empty bottles? \u67d0\u5730\u5b58\u5728\u67d0\u4eba\u6216\u67d0\u7269 There is a book on the table. There is a pen in my bag There is a student in the classroom There is a teacher in the office There is a traffic jam on the road There is no power in my cell phone. There is truth in wine \u9152\u4e2d\u6709\u771f\u60c5 There is no place like home \u5929\u6daf\u65e0\u5904\u4f3c\u5f52\u6240 There is a witness(\u76ee\u51fb\u8005) everywhere \u82e5\u8981\u4eba\u4e0d\u77e5\u9664\u975e\u5df1\u83ab\u4e3a There is no royal way to learning \u5b66\u95ee\u65e0\u6377\u5f84 Where there is a will\uff0cthere is a way \u6709\u5fd7\u8005\u4e8b\u7adf\u6210 There is no smoke without fire \u65e0\u98ce\u4e0d\u8d77\u6d6a There is no best but better There are spots in the sun \u4eba\u65e0\u5b8c\u4eba \u6240\u5728\u4f4d\u7f6e\u3001\u989c\u8272\u3001\u5177\u4f53\u4f4d\u7f6e\u3001\u72b6\u6001 There is a bed in the bedroom The bed is green It is in the middle of the room And it is very clean \u6211\u6709\u5f88\u591a\u94b1 \u62e5\u6709\u7684\u5173\u7cfb\uff0c\u7528have \u8857\u4e0a\u6709\u5f88\u591a\u8f66 \u5b58\u5728\u7684\u5173\u7cfb\uff0c\u7528There be There are + \u590d\u6570\u540d\u8bcd / There is + \u5355\u6570\u540d\u8bcd There is a cooker in the kitchen => A cooker is in the kitchen there \u4e3b\u8c13\u5bbe+\u5bbe\u8865 I find the room is dark -> I find the room dark(\u5bbe\u8bed\u8865\u8db3\u8bed) We must keep the classroom clean Histories make mem wise Poems make mem witty Math make mem subtle some and any some\\any + \u590d\u6570\u540d\u8bcd\u6216\u4e0d\u53ef\u6570\u540d\u8bcd\u65f6\u65f6\u4e00\u4e9b\u7684\u610f\u601d\uff0csome\u7528\u5728\u80af\u5b9a\u53e5\u4e2d\uff0cany\u7528\u5728\u5426\u5b9a\u3001\u7591\u95ee\u53e5\u4e2d\u3002 Is there a + \u53ef\u6570\u540d\u8bcd Is there any + \u4e0d\u53ef\u6570\u540d\u8bcd \u4f46\u662f\u5728\u8868\u8bf7\u6c42\u3001\u5efa\u8bae\u7684\u7591\u95ee\u53e5\u4e2d\u7528some any + \u5355\u6570\u540d\u8bcd\uff0c some\u7ffb\u8bd1\u4e3a\u67d0\u4e00\uff0cany\u7ffb\u8bd1\u4e3a\u4efb\u4e00 Some day, he can be some one You can buy it in any supermarket \u5355\u8bcd customs n \u6d77\u5173 custom \u4e60\u60ef\u3001customer \u987e\u5ba2 officer \u5b98\u5458 CEO Chief Executive Officer police officer nationality \u56fd\u7c4d nation \u56fd\u5bb6\u3001\u6c11\u65cf national \u56fd\u5bb6\u7684 girl \u5973\u5b69\u3001\u83c7\u51c9 ex-\u524d\u7f00\uff0c\u8868\u793a\u524d... ex-wife \u524d\u59bb passport n \u62a4\u7167 pass v \u901a\u8fc7\u3001port \u6e2f\u53e3\u3001seaport\u3001airport \u98de\u673a\u573a\u3001visa n \u7b7e\u8bc1 brown adj \u68d5\u8272\u7684 brown sugar \u7ea2\u8272 You look brown afetr this summer \u6691\u5047\u8fc7\u540e\u6652\u9ed1\u4e86 tourist n \u65c5\u6e38\u8005 terrorist \u6050\u6016\u8005 grey \u7070\u8272\u7684 grey\u3001gray(\u7f8e\u5f0f\u62fc\u5199) yellow adj yellow race \u9ec4\u79cd\u4eba I am Asian \u4e0d\u80fd\u8bf4 I am yellow race black adj black tea \u7ea2\u8336 orange adj \u6a58\u9ec4\u8272 emplyee \u96c7\u5458 employ \u96c7\u4f63 employer \u96c7\u4f63\u8005 trainer \u57f9\u8bad\u8005 trainee \u88ab\u57f9\u8bad\u8005 hard-working good-looking \u597d\u770b\u7684 easy-going \u597d\u76f8\u5904\u7684 sales rep \u63a8\u9500\u5458 light \u8f7b\u7684 thirsty \u6e34 thirty 30 thirteen 13 jam \u679c\u9171\u3001\u5835\u585e boy cowboy \u725b\u4ed4 busboy \u9910\u9986\u670d\u52a1\u751f sit down sit down please have a seat, please carpet \u5730\u6bef empty An empty \u53ef\u4ee5\u8fde\u8bfb empty\u7684\u9996\u5b57\u6bcd\u662f\u539f\u56e0\u3001An\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u662f\u8f85\u97f3\uff0c\u8f85\u97f3\u548c\u5143\u97f3\u53ef\u4ee5\u8fde\u8bfb glass\u3001box\u3001cup\u3001bottle\u3001tin knife\u3001fork\u3001spoon k\u548cn\u5728\u4e00\u8d77\u7684\u65f6\u5019\uff0ck\u4e0d\u53d1\u97f3\uff0c\u4f8b\u5982:know shelf \u67b6\u5b50 \u590d\u6570shelves bookshelf\u3001shelf life \u4fdd\u8d28\u671f desk\u3001table tea table\u3001office desk\u3001school desk plate \u76d8\u5b50 cupboard cigarette \u9999\u70df cigar \u96ea\u8304 television \u7535\u89c6\u673a floor \u5730\u677f dressing \u68b3\u5986\u53f0 magazine \u6742\u5fd7 newspaper stereo \u7acb\u4f53\u58f0\u97f3\u54cd refrigerator/fridge \u7535\u51b0\u7bb1 electric \u5e26\u7535\u7684\uff0c\u53ef\u901a\u7535\u7684 bottle \u74f6\u5b50 trousers \u957f\u88e4 shelf \u67b6\u5b50 take off/put on \u8131\u6389/\u7a7f\u4e0a sharpen \u524a\u5c16 en \u540e\u7f00\uff0c\u4f7f\u5f62\u5bb9\u8bcd\u53d8\u6210\u52a8\u8bcd turn on/turn off (\u5e26\u7535\u7684\u8bbe\u5907) shut/open (\u975e\u5e26\u7535\u8bbe\u5907) untidy \u4e71\uff0c\u4e0d\u6574\u9f50 air \u4f7f...\u901a\u98ce\uff0c\u6362\u6362\u7a7a\u6c14 sweep \u626b dust \u626b\u63cf\u7070\u5c18 wardrobe \u8863\u67dc put yours clothes on the wardrobe bathroom/restroom/washroom/toilet \u6d17\u624b\u95f4 sunhat\u3001sunglasss\u3001sunblock shine \u7167\u8000 shave \u522e\u8138\u3001shaver\u522e\u80e1\u5200 village valley hill \u4e18\u9675\u3001\u5c71 along\u3001bank(\u6cb3\u5cb8) off \u79bb\u5f00 vase take (\u5e26\u8d70)vs bring(\u5e26\u6765) sugar \u767d\u7802\u7cd6 candy \u7cd6\u679c tabacco \u70df\u8349\uff0ccigarette \u9999\u70df cent \u7f8e\u5206 \u77ed\u8bed big mouth \u5927\u5634\u5df4 small change \u96f6\u94b1 small talk \u95f2\u804a light rain \u5c0f\u96e8 light snow \u5c0f\u96ea long time no see \u597d\u4e45\u4e0d\u89c1 grandfather clock \u8001\u5ea7\u949f Great-grandfather \u66fe\u7956\u7236 a full stop \u53e5\u53f7 legwork \u8dd1\u817f\u5de5\u4f5c boil the ocean \u597d\u9ad8\u9a9b\u8fdc make the bed \u6574\u7406\u5e8a\u94fa over the bridge \u8fc7\u6865 dream boat \u68a6\u4e2d\u60c5\u4eba 20% OFF 8\u6298\u4f18\u60e0 do with There we are \u5c31\u653e\u5728\u90a3\u5427\uff0c\u653e\u597d\u4e86 in front of \u5728...\u4e4b\u524d(\u4e24\u4e2a\u76f8\u5bf9\u72ec\u7acb\u7684\u4e2a\u4f53\u4e4b\u95f4\u7684\u5173\u7cfb)\uff0cin the front of(\u4e00\u4e2a\u7269\u4f53\u7684\u524d\u7aef) sugar coat \u59d4\u5a49 \u65f6\u6001 \u65f6\u6001 = \u65f6\u95f4 + \u72b6\u6001 \u65f6\u95f4: \u8fc7\u53bb\u3001\u73b0\u5728\u3001\u5c06\u6765 \u65f6\u6001: \u4e00\u822c\u3001\u8fdb\u884c\u3001\u5b8c\u6210 \u52a8\u4f5c\u53d1\u751f\u7684\u65f6\u95f4 \u4e3b\u8bed + \u52a8\u8bcd + \u5176\u5b83\u6210\u4efd \u4e00\u517116\u79cd\u65f6\u6001 \u73b0\u5728\u8fdb\u884c\u65f6(\u76ee\u524d\u6b63\u5728\u53d1\u751f\u7684\u52a8\u4f5c) \u4e3b\u8bed + am/is/are + \u52a8\u8bcd-ing(\u52a8\u8bcd\u7684\u73b0\u5728\u5206\u8bcd) \u52a8\u8bcd\u76f4\u63a5\u52a0ing walking\u3001reading\u3001seeing\u3001going \u52a8\u8bcd\u4ee5\u4e0d\u53d1\u97f3\u7684\u5b57\u6bcde\u7ed3\u5c3e\uff0c\u53bb\u6389e\u52a0ing coming\u3001making\u3001smoking \u52a8\u8bcd\u7684\u62fc\u5199\u662f\uff0c\u8f85\u97f3 + 1\u5143\u97f3 + 1\u8f85\u97f3 \u7ed3\u5c3e\uff0c\u540c\u65f6\u8be5\u5143\u97f3\u5b57\u6bcd\u5728\u5355\u8bcd\u4e2d\u5904\u4e8e\u91cd\u8bfb\u97f3\u8282\uff0c\u6b64\u4e8b\u65f6\u53cc\u5199\u8f85\u97f3\u5b57\u6bcd\u52a0ing sitting\u3001running\u3001swimming\u3001regretting I am sleeping(\u4e0d\u6b63\u786e\u7684\uff0c\u6b63\u5728\u7761\u89c9\u7684\u60c5\u51b5\u4e0b\uff0c\u600e\u4e48\u4f1a\u548c\u522b\u4eba\u4ea4\u8c08\u5462) I am watching TV We are cleaning the room She is playing the guita He is typing a letter They are swimming in the river \u53d8\u6210\u4e00\u822c\u7591\u95ee\u53e5: She is watching TV -> Is she watching TV? They are swimming in the river -> Are they swimming in the river? \u53d8\u6210\u5426\u5b9a\u53e5 She is watching TV -> She isn't watching TV \u53d8\u6210\u7279\u6b8a\u7591\u95ee\u53e5 She is watching TV -> Who is watching TV? She is watching TV -> What is she doing? \u4e00\u822c\u5c06\u6765\u65f6 (\u73b0\u5728\u5bf9\u4e8e\u672a\u6765\u7684\u6253\u7b97) bo going to \u9884\u5148\u8ba1\u5212\u548c\u6253\u7b97\u8981\u505a\u7684\u4e8b \u4e3b + is/am/are + going to + \u540e\u9762\u63a5\u52a8\u8bcd\u539f\u884c / be going to be + (adj n prep)\u7b49 I am going to shopping this weekend He is going to sell the car \u53e3\u8bed\u4e2d be going to = be gonna \u7948\u4f7f\u53e5 Don't + \u52a8\u8bcd\u5706\u5f62 Don't Speak Don't enter Don't kiss me Don't smoke \u5199\u4f5c \u4eca\u5929\u7684\u5929\u6c14\u771f\u597d\u3002\u5929\u7a7a\u4e2d\u98d8\u7740\u51e0\u6735\u767d\u4e91\uff0c\u4f46\u662f\u9633\u5173\u707f\u70c2\u3002Lucy\u548c\u5979\u7684\u7537\u670b\u53cb\u5728\u4e00\u5757\u513f\u3002\u4ed6\u4eec\u6b63\u5728\u5f00\u8f66\u3002Lucy\u6b63\u5728\u770b\u4e00\u53ea\u6f02\u4eae\u7684\u5c0f\u9e1f\u3002\u5c0f\u9e1f\u6b63\u4ece\u5929\u4e0a\u98de\u8fc7\u3002 \u4e00\u4e9b\u4eba\u6b63\u4ece\u5929\u6865\u4e0a\u8d70\u8fc7\u3002\u4ed6\u4eec\u5f88\u5fd9\u3002 It is fine today\uff0cThere are some clouds in the sky, But the sun is shining. Lucy is with her boyfriend. They are driving. Lucy is looking at a beautiful bird. The bird is flying in the sky. Some people are walking over the brideg. They are busy It's vs its\u7684\u533a\u522b 41 Penny's bag a loaf of a bar of a pound of tobacco cheese it's certaintly not for me! \u5f53\u7136\u4e0d\u4f1a\u662f\u7ed9\u4f60\u7684 What's in it? \u91cc\u9762\u662f\u4ec0\u4e48\u4e1c\u897f 43 Hurry up electric up \u901a\u7535 teapot \u8336\u58f6 pot \u9505\u3001\u7f50\uff0c\u5bb9\u5668 flow pot \u82b1\u76c6 hot pot\u706b\u9505 boil \u6cb8\u817e\u5f00(\u4e0d\u53ca\u7269\u52a8\u8bcd) The kettle is boiling (\u6c34\u58f6\u5f00\u4e86\uff0c\u73b0\u5728\u8fdb\u884c\u65f6) boil \u716e(\u53ca\u7269\u4e1c\u897f\uff0c\u53ef\u4ee5\u63a5\u53cc\u5bbe\u8bed) Please boil me an egg Please boil an egg for me oil \u6cb9(\u6c7d\u6cb9\u3001\u98df\u7528\u6cb9) pil painting \u6cb9\u753b housewife -> housewives(\u590d\u6570) some(\u7528\u5728\u80af\u5b9a\u53e5) vs any(\u5426\u5b9a\u53e5) + \u53ef\u6570\u540d\u6b21\u590d\u6570\u6216\u4e0d\u53ef\u6570\u540d\u6b21\uff0c\u4e0d\u80fd\u63a5\u53ef\u6570\u540d\u6b21\u7684\u5355\u6570\u5f62\u5f0f any \u82e5\u5e72\u3001\u4efb\u4f55 Is there any(\u4efb\u4f55) beer in the bolle? -> No, there isn't any(\u4ee3\u8bcd) There are some books on the table? Are there any books on the table? There aren't any book on the table? \u5982\u679c\u662f\u4e00\u4e2a\u8868\u793a\u8bf7\u6c42\u3001\u5efa\u8bae\u3001\u53cd\u95ee\u7684\u7591\u95ee\u53e5\uff0c\u6216\u5e0c\u671b\u5f97\u5230\u5bf9\u65b9\u80af\u5b9a\u7b54\u6848\u624d\u63d0\u51fa\u7684\u7591\u95ee\u53e5\u53ef\u4ee5\u7528some Shall I have some coffee? What about some tea? Why don't we have some beer? Are these some students in the classroom? \u5728\u4e00\u4e2a\u8868\u793a\u90e8\u5206\u5426\u5b9a\u7684\u5426\u5b9a\u53e5\u4e2d\u53ef\u4ee5\u7528some Some of them are not Chinese over there \u5728\u90a3\u8fb9 hurry up \u8d76\u5feb => quickly get up \u8d77\u5e8a eat up \u5403\u5149\u3001\u5403\u5b8c speed up \u5feb\u4e00\u70b9 speak up \u5927\u70b9\u58f0(speak loudly) shut up \u95ed\u5634 wait up \u7b49\u4e00\u7b49 slow down \u6162\u70b9 calm down \u51b7\u9759 sit down \u5750\u4e0b put that down \u653e\u4e0b calm: adj. \u9759\u7684\uff0c\u5e73\u9759\u7684\uff1b\u6c89\u7740\u7684 vt. \u4f7f\u5e73\u9759\uff1b\u4f7f\u9547\u5b9a vi. \u5e73\u9759\u4e0b\u6765\uff1b\u9547\u5b9a\u4e0b\u6765 n. \u98ce\u5e73\u6d6a\u9759 in the front of vs in the front of in front of \u5728...\u4e4b\u524d(\u4e24\u4e2a\u76f8\u5bf9\u72ec\u7acb\u7684\u4e2a\u4f53\u4e4b\u95f4\u7684\u5173\u7cfb)\uff0cin the front of(\u4e00\u4e2a\u7269\u4f53\u7684\u524d\u7aef) \u60c5\u6001\u52a8\u8bcd: can(\u80fd\u529b\uff0c\u5141\u8bb8\u3001\u8bf7\u6c42\uff0c\u8981\u6c42)\u3001must\u3001\u5fc5\u987b\u653e\u5728\u52a8\u8bcd\u7684\u524d\u9762\u3001\u6b64\u65f6\u6539\u52a8\u8bcd\u5fc5\u987b\u91c7\u7528\u52a8\u8bcd\u539f\u578b He must go no We must study English She must be in the office \u8f6c\u53d8\u4e3a\u4e00\u822c\u7591\u95ee\u53e5\uff0c\u9700\u8981\u5c06\u60c5\u6001\u52a8\u8bcd\u653e\u5728\u5c45\u9996\u6216\u8005\u4e3b\u8bed\u524d\u9762 Must he go now? \u8f6c\u53d8\u4e3a\u5426\u5b9a\u53e5\uff0c\u5c06must\u53d8\u6210needn't\u3001mustn't \u8f6c\u53d8\u4e3a\u7279\u6b8a\u7591\u95ee\u53e5\uff0c\u9488\u5bf9\u4e3b\u8bed\u63d0\u95ee\uff0c\u5c31\u662f\u9009\u597d\u7591\u95ee\u8bcd\uff0c\u5269\u4e0b\u4e0d\u53d8\uff0c\u5426\u5219\u5c31\u9700\u8981\u5c06\u60c5\u6001\u52a8\u8bcd\u653e\u5728\u4e3b\u8bed\u524d\u9762\uff0c\u7136\u540e\u52a0\u7591\u95ee\u8bcd What must we do? She must be in the office 1. Must she be in the office? 2. She mustn't be in the office 3. Where must she be? \u82f1\u8bed\u4e2d\u4e60\u60ef\u4ee5\u7b2c\u4e00\u4eba\u79f0\u4e3a\u4e3b\u4f53\uff0c\u4e2d\u6587\u5219\u4e0d\u662f Can you bring me some water, please? -> Can I have some water, please? Can I have your name? Can I help you? Can I have your e-mail address? Can I use your bike? Can I have your order? Can I speak to Tom please? Can I have a look at your cell phone? Can you speak English(\u4f60\u4f1a\u82f1\u8bed\u5417\uff0c\u4fa7\u91cd\u8be2\u95ee\u5bf9\u65b9\u6709\u6ca1\u6709\u8fd9\u4e2a\u80fd\u529b\uff0c\u5177\u6709\u6311\u6218\u7684\u610f\u5473)? Do you speak English? \u66f4\u793c\u8c8c 45 The boss's letter wait a minute \u7b49\u4e00\u4f1a ask the way \u95ee\u8def his handwriteing is very nice \u4ed6\u7684\u5b57\u5199\u7684\u5f88\u597d lift \u4e3e\u8d77\u3001\u62ff\u8d77\u3001\u7535\u68af(\u76f4\u68af) Can you lift this heavy case? a minute \u4e00\u4f1a Can you come here a minute please? next door \u5728\u9694\u58c1 next-door \u9694\u58c1\u7684 adj She is next door \u5979\u5728\u9694\u58c1 There is a shcool next door to the park \u548c\u4ec0\u4e48\u76f8\u90bb next door to ... The next door girl is very beautiful \u653e\u5728\u540d\u8bcd\u7684\u524d\u9762\u505a\u4fee\u9970 \u60c5\u6001\u52a8\u8bcd \u8868\u793a\u60c5\u611f\u548c\u6001\u5ea6\u7684\u8bcd(can\u3001must\u3001may....) \u7528\u6cd5: +\u52a8\u8bcd\uff0c\u4e14\u539f\u578b \u6ca1\u6709\u5355\u590d\u6570\u548c\u4eba\u79f0\u4e4b\u5206 You must go out Can you please stand up? \u7591\u95ee\u53e5: can \u76f4\u63a5\u63d0\u524d\u53d8\u6210\u7591\u95ee\u53e5 Tom can swim well -> Can tom swim well \u5426\u5b9a\u53e5: can->can't\u3001cannot must->mustn't(\u7981\u6b62\uff0c\u8bed\u6c14\u6781\u7aef\u5f3a) may->may not don't need \u6ca1\u5fc5\u8981 \u8fde\u7cfb\u52a8\u8bcd \u5b9e\u4e49\u52a8\u8bcd \u52a9\u52a8\u8bcd 47 A cup of coffee dislike \u4e0d\u559c\u6b22 I dislike coffee very much like \u559c\u6b22(v)\u3001\u50cf(prep) You look like your father Like father, like son \u6709\u5176\u7236\u5fc5\u6709\u5176\u5b50 Love me, love my dog \u7231\u5c4b\u53ca\u5c4b butter \u9ec4\u6cb9 butterfly \u8774\u8776 bread and buttle \u996d\u7897\u3001\u751f\u8ba1 Teaching is my bread and buttle \u6559\u4e66\u662f\u6211\u7684\u996d\u7897 pure \u7eaf\u51c0\u7684 honey \u8702\u871c ripe \u6210\u719f\u7684 choice \u4e0a\u7b49\u7684\u3001\u7cbe\u9009\u7684 Do you like books? \u5e76\u4e0d\u662fDo you like book? \u80af\u5b9a\u53e5 \u5426\u5b9a\u53e5 \u4e00\u822c\u7591\u95ee\u53e5 \u7279\u6b8a\u7591\u95ee\u53e5 \u80af\u5b9a\u53e5 -> \u4e00\u822c\u7591\u95ee\u53e5 (\u9700\u8981\u5c06\u52a8\u8bcd(be\u52a8\u8bcd\u3001\u60c5\u6001\u52a8\u8bcd\uff0c\u5982\u679c\u540c\u65f6\u51fa\u73b0\uff0c\u5de6\u4fa7\u52a8\u8bcd\u63d0\u524d)\u653e\u5728\u4e3b\u8bed\u4e4b\u524d) He must be in the office -> Must he be in the office \u65e2\u6ca1\u6709be\u52a8\u8bcd\u3001\u4e5f\u6ca1\u6709\u60c5\u6001\u52a8\u8bcd\u3001\u4e5f\u6ca1\u6709\u52a9\u52a8\u8bcd\u7684\u65f6\u5019\u9700\u8981\u7528do(\u52a9\u52a8\u8bcd)\u6765\u8f85\u52a9\u5b8c\u6210\u8f6c\u6362\u4e3a\u7591\u95ee\u53e5 I like coffee -> Do you like coffee? I must do my homework \u8fd9\u91cc\u7684do\u662f\u505a\u7684\u610f\u4e49\uff0c\u4e0d\u662f\u52a9\u52a8\u8bcd \u80af\u5b9a\u53e5 -> \u5426\u5b9a\u53e5 (\u5426\u5b9a\u8bcdnot\u3001\u6709be\u52a8\u8bcd\u65f6\u653e\u5728\u5176\u540e\uff0c\u6709\u60c5\u6001\u52a8\u8bcd\u653e\u5728\u5176\u540e\uff0c\u52a9\u52a8\u8bcd\u653e\u5728\u5176\u540e\uff0c\u540c\u65f6\u51fa\u73b0\uff0c\u653e\u5728\u6700\u5de6\u4fa7\u52a8\u8bcd\u540e) He is a teacher -> He isn't a teacher He must go now -> He nneedn't go now He must be in the office -> He needn't be in the office \u6ca1\u6709be\u3001\u60c5\u6001\u3001\u52a9\u52a8\u8bcd\u7684\u65f6\u5019\uff0c\u9700\u8981\u5f15\u5165do\uff0c\u7136\u540enot\u653e\u5728\u540e\u9762 I like coffee -> I don't like coffee \u80af\u5b9a\u53e5 -> \u7279\u6b8a\u7591\u95ee\u53e5 (\u4e0d\u9488\u5bf9\u4e3b\u8bed\u63d0\u95ee\u7684\u65f6\u5019\uff0c\u9700\u8981\u628a\u52a8\u8bcd\u63d0\u5230\u4e3b\u8bed\u4e4b\u524d\uff0c\u542b\u6709be\u52a8\u8bcd\u5c31\u63d0\u524d\u3001\u60c5\u6001\u52a8\u8bcd\u63d0\u524d\u3001\u52a9\u52a8\u8bcd\u63d0\u524d\uff0c\u90fd\u6ca1\u6709\u7684\u60c5\u51b5\u4f7f\u7528do\u653e\u5728\u4e3b\u8bed\u524d) He is a teacher -> who is he? He must go now -> When must he go? I can swim -> What can you do? 49 At the butcher's mutton \u7f8a\u8089 teak \u725b\u6392 a piece of steak pork tell sb.sth \u544a\u8bc9\u67d0\u4eba\u67d0\u4e8b I don't know either either vs too \u524d\u8005\u7528\u4e8e\u5426\u5b9a\u53e5\u3001\u540e\u8005\u7528\u5728\u80af\u5b9a\u53e5 at the butcher's at the doctor's at the hairdresser's Are you ....? vs Do you ...? Are you + \u975e\u52a8\u8bcd? Is she/he/it....? Do you + \u52a8\u8bcd? Does she/he/it....? Are you busy? Are you a techaer? Are you at home? Do you sleep well? Do you make the bed? Do you have breakfast? \u4e09\u5355: \u7b2c\u4e09\u4eba\u79f0\u5355\u6570(she\u3001he\u3001it\uff0c\u4eba\u7684\u540d\u5b57\u3001\u4eba\u7684\u79f0\u547c\u3001\u5355\u4e2a\u7269\u4f53\u3001\u4e0d\u53ef\u6570\u540d\u8bcd) \u793c\u8c8c\u56de\u590d: Yes please No, thank you \u4e00\u822c\u73b0\u5728\u65f6: 1. \u4f55\u65f6\u7528 \u7ecf\u5e38\u7684\u72b6\u6001 \u4e60\u60ef\u7684\u52a8\u4f5c \u771f\u7406(\u5ba2\u89c2\u4e8b\u5b9e) \u7ed3\u6784 \u7ecf\u5e38\u7684\u72b6\u6001 \u4e3b\u8bed + is/am/are \u4e60\u60ef\u7684\u52a8\u4f5c \u4e3b\u8bed + \u52a8\u8bcd \u771f\u7406 \u4e3b\u8bed + is/am/are or \u4e3b\u8bed + \u52a8\u8bcd They are very bad They often cheat in the exams They earth is round The sun rises in the east \u540e\u9762\u63a5\u7684\u52a8\u8bcd: * \u4e3b\u8bed\u4e3a\u975e\u4e09\u5355 + \u52a8\u8bcd\u539f\u578b * \u4e3b\u8bed\u4e3a\u4e09\u5355 + \u52a8\u8bcds\\es \u53d8\u7591\u95ee\u53e5: They drink beer every night Do they drink beer every night? He loves his girlfriend very much Does he love his girlfriend very much? 51 A pleasant climate \u540d\u8bcd + y => \u5f62\u5bb9\u8bcd rain -> rainy cloud -> cloudy snow -> snowy luck -> lucky sun -> sunny What is the climate like? What is the weather like? What is your new boss like? How are you? How is the climate? Hos is the wealther? How is your new job? How is your English? in(\u5728...\u91cc\u9762\uff0c\u5728\u4e00\u4e2a\u8f83\u5927\u7684\u5730\u65b9) vs on(\u5728...\u4e0a\u9762\uff0c\u5728...\u65c1\u8fb9\uff0c\u9760\u8fd1) vs at(\u7528\u4e8e\u8f83\u5c0f\u4e14\u5177\u4f53\u7684\u5730\u70b9\u6216\u95e8\u724c\u53f7\u524d) \u548c\u65f6\u95f4\u642d\u914d 1. in \u901a\u5e38\u548c\u5927\u6bb5\u65f6\u95f4\uff0c in Jan\u3001in Feb\u3001in Mar\u3001in spring\u3001in summer\u3001in autumn\u3001in the monring(\u56fa\u5b9a\u642d\u914d) 2. on \u548c\u67d0\u4e00\u5929\u642d\u914d\uff0c on Monday 3. \u4e0e\u5206\u949f\u548c\u5c0f\u65f6\u642d\u914d at noon(\u56fa\u5b9a\u642d\u914d) at night(\u56fa\u5b9a\u642d\u914d) this\u5f00\u5934\u7684\u65f6\u95f4\u4e0d\u4f7f\u7528\u4ecb\u8bcd this moring\u3001this week last\u5f00\u5934\u7684\u65f6\u95f4\u4e0d\u4f7f\u7528\u4ecb\u8bcd last night\u3001last week\u3001last month next\u5f00\u5934\u7684\u65f6\u95f4\u4e0d\u4f7f\u7528\u4ecb\u8bcd next time\u3001next week \u526f\u8bcd: \u5728\u53e5\u5b50\u4e2d\u4e13\u95e8\u4fee\u9970\u3001\u5ffd\u60a0\u5f62\u5bb9\u8bcd\u3001\u52a8\u8bcd\u4ee5\u53ca\u5176\u4ed6\u526f\u8bcd(\u5f62\u5bb9\u8bcd\u3001\u52a8\u8bcd\u540e) I am very tired (\u4fee\u9970\u5f62\u5bb9\u8bcd) I like English best (\u4fee\u9970\u52a8\u8bcd) I work very hard (\u4fee\u9970\u526f\u8bcd) Beijing is my favorite city -> I like Beijing best Spring is my favorite city -> He likes spring best \u4fee\u9970\u52a8\u8bcd\u7684\u8bcd\u662f\u526f\u8bcd \u9891\u5ea6\u526f\u8bcd \u4e3b\u8981\u662f\u7528\u6765\u4fee\u9970\u52a8\u8bcd\u7684\uff0c\u653e\u5728\u52a8\u8bcd\u524d\u3001\u60c5\u6001\u52a8\u8bcd\u548cbe\u52a8\u8bcd\u540e\u3001sometimes\u4f8b\u5916\u90fd\u53ef\u4ee5\uff0c\u8fd8\u53ef\u4ee5\u653e\u5728\u5c45\u9996\u8868\u5f3a\u8c03 always (100%) usually (90%) often (60%) sometimes (30%) seldom (5%) never (0%) 53 An interesting climate mild food \u6e05\u6de1\u7684\u98df\u7269 East,west,home is beast \u91d1\u7a9d\u94f6\u7a9d\u4e0d\u5982\u81ea\u5df1\u7684\u8349\u7a9d wet \u6f6e\u6e7f water - wash - wine - wave - well - weep - woman The neights are short, and days are long 55 The Sawyer family supper \u665a\u9910 dinner \u6b63\u9910 Good evening \u665a\u4e0a\u597d Good night \u665a\u5b89 eventing dress \u665a\u793c\u670d arrive in Beijing(\u5927\u5730\u70b9) arrive at school (\u5c0f\u5730\u70b9) arrive at the airport (\u5c0f\u5730\u70b9) arrive at bus station(\u5c0f\u5730\u70b9) \u53ef\u6570\u540d\u8bcd\u590d\u6570 vs \u52a8\u8bcd\u4e09\u5355 +s books teachers dogs vs walks answers begs +es boes watches dishes vs passes washes teaches \u8f85\u97f3+y\uff0c\u53bby\u53d8i + es city cities\u3001lady\u3001ladies vs study\u3001studies\u3001try tryes the \u59d3\u540ds \u8868\u793a\u4e00\u5bb6\u4eba\uff0c\u7279\u6307\u592b\u5987\u4e24 I am going to work vs I go to work I usually finish my work at 5 Let's go shopping after work 57 An unusual day A: \u4e00\u822c\u73b0\u5728\u65f6 vs B: \u73b0\u5728\u8fdb\u884c\u65f6 \u4f7f\u7528\u60c5\u51b5\u4e0d\u540c \u4e00\u822c\u73b0\u5728\u65f6: \u4e60\u60ef\u7684\u72b6\u6001\u3001\u7ecf\u5e38\u7684\u52a8\u4f5c\u3001\u771f\u7406 \u73b0\u5728\u8fdb\u884c\u65f6: \u6b64\u65f6\u6b64\u523b\u6b63\u5728\u505a\uff0c\u4e00\u6bb5\u65f6\u95f4\u5185\u4e00\u76f4 \u7ed3\u6784\u4e0d\u540c \u4e00\u822c\u73b0\u5728: \u4e3b\u8bed + is\\am\\are, \u4e3b\u8bed + v. \u73b0\u5728\u8fdb\u884c\u65f6: \u4e3b\u8bed + is\\am\\are + doing \u65f6\u95f4\u72b6\u8bed\u4e0d\u540c \u4e00\u822c\u73b0\u5728: every...\u3001always, usually\uff0c often\uff0csometimes... \u73b0\u5728\u8fdb\u884c: now\u3001at the monment I usually have launch at 12:00. But I am having lauch now at 2:00 59 Is that all? Is that all? \u5c31\u8fd9\u4e9b\u5417? \u57fa\u6570\u8bcd teen \u5341\u51e0\u5c81\u3001\u9752\u5c11\u5e74 thirteen\u3001fourteen\u3001fifteen\u3001sixteen\u3001seventeen\u3001eighteen\u3001nighteen twenty twenty-one thirty thirty-one forty forty-one fifty fifty-one seventy seventy-one eighty eighty-one ninety hundred one hundred two hundred hundred and + \u5341/\u4e2a(999 -> nine hundred and ninety-nine) thousand one thousand two thousand thouand and + \u767e/\u5341\uff0f\u4e2a ten thousand \u4e00\u4e07 one million \u4e00\u767e\u4e07 millionaire \u767e\u4e07\u5bcc\u7fc1 \u5e8f\u6570\u8bcd first\u3001second\u3001third\u3001fourth\u3001fifth\u3001sixth\u3001seventh\u3001eighth\u3001ninth\u3001tenth\u3001eleventh\u3001twelfth thirteenth\u3001fourteenth\u3001fifteenth\u3001sizteenth\u3001.... twentieth \u7b2c\u4e8c\u5341 61 A bad cold tongue \u611f\u5b98\u52a8\u8bcd -> \u534a\u7cfb\u52a8\u8bcd(\u6709\u4e09\u5355\u590d\u6570\u3001\u8fc7\u53bb\u5f0f...\u548c\u5b9e\u4e49\u52a8\u8bcd\u6709\u76f8\u540c\u7684\u6027\u8d28\uff0c\u7528\u5f62\u5bb9\u8bcd\u4fee\u9970\uff0c\u5b9e\u4e49\u52a8\u8bcd\u7528\u526f\u8bcd\u4fee\u9970) taste feel sound smell look listen in bed \u751f\u75c5\u5367\u5e8a in the bed \u8eba\u5728\u5e8a\u4e0a \u6253\u7535\u8bdd\u7ed9\u67d0\u4eba: call sb phonse sb give sb a call give sb a phone headcache \u5934\u75bc earache \u8033\u6735\u75bc backache \u80cc\u75bc flu \u6d41\u884c\u6027\u611f\u5192 temperature \u6e29\u5ea6 medicine \u836f measles \u9ebb\u75b9 63 Thank you, doctor certainly \u5f53\u7136 remain \u7ee7\u7eed\u3001\u4fdd\u6301 yet \u8fd8\u3001\u4ecd come upstairs \u4e0a\u697c or go upstairs rich \u6cb9\u817b\u7684 have(has) \u62e5\u6709 \u5403\u559d \u60a3\u3001\u751f\u3001\u5f97\u3001\u6709 have + a + \u540d(\u52a8\u4f5c\uff0c\u884c\u4e3a) \u4ece\u4e8b\u8fdb\u884c... (have a rest\u3001have a talk) \u7ecf\u5386 have a party\u3001have a class \u60c5be\u540e\u5b9a\u8bcd\u524d\u3001\u53e5\u9996\u53e5\u5c3e\u8868\u5f3a\u8c03 64 Don't ...! You mustn't ...! match \u706b\u67f4 so \u5982\u6b64\u5730 lean out of \u8eab\u4f53\u63a2\u51fa lean \u503e\u659c\u3001\u4f9d\u9760\u3001\u503e\u5411 noise \u55a7\u95f9\u58f0 play with matches \u73a9\u706b\u67f4 make a noise \u53d1\u51fa\u54cd\u58f0 \u52a8\u8bcd\u7684\u5f62\u5f0f: \u52a8\u8bcd\u539f\u578b walk \u7b2c\u4e09\u4eba\u79f0\u5355\u6570 walks \u73b0\u5728\u5206\u8bcd walking \u7948\u4f7f\u53e5\u4e2d\u7684\u52a8\u8bcd\u8981\u7528\u539f\u578b Don't drop it be going to + \u52a8\u8bcd\u539f\u578b \u4e00\u822c\u5c06\u6765\u65f6 \u60c5\u6001\u52a8\u8bcd\u540e\u63a5\u52a8\u8bcd\u539f\u578b 65 Not a baby \u53cd\u8eab\u4ee3\u8bcd\u7684\u76ee\u7684\u662f\u5f3a\u8c03\u4e3b\u8bed\uff0c\u4ee3\u8bcd\u662f\u7528\u6765\u4ee3\u66ff\u4e3b\u8bed\u7684\u8bcd He himself sent me a gift(\u5f3a\u8c03\u662f\u4ed6\u4eb2\u81ea\u9001\u7ed9\u6211\u7684\u793c\u7269) \u4ecb\u8bcd + \u53cd\u8eab\u4ee3\u8bcd the key to the front door \u524d\u95e8\u94a5\u5319 enjoy\u540e\u9762\u5f80\u5f80\u63a5\u4e00\u4e2a\u53cd\u8eab\u4ee3\u8bcd by oneself \u72ec\u81ea learn sth by himself \u81ea\u5b66 help oneself \u968f\u610f enjoy oneself \u73a9\u7684\u5f00\u5fc3 must/can + be + \u975e\u52a8\u8bcd He can be here for a long time They must be here at 9:00 \u53cd\u8eab\u4ee3\u8bcd: \u5355\u6570: myself\u3001yourself\u3001(himself\u3001herself\u3001itself) \u590d\u6570: ourselves\u3001yourselves\u3001themselves 66 What's the time? 7:30 half past seven half to eight 4:20 four twenty twenty past four 10:15 ten fifteen 10:15 fifteen past ten a quarter past ten 2:45 three quarter past two 2:55 two fifty-five five to three fifty-five past two 7:30 seven thirty thirty past seven half past seven half to eight two quarters past seven 67 The weekend \u4e3b\u8bed + \u52a8\u8bcd(\u65f6\u6001) + \u5176\u4ed6\u6210\u4efd \u4e3b\u8bed + am/is/are + \u52a8\u8bcding \u73b0\u5728\u8fdb\u884c\u65f6 \u4e3b\u8bed + am/is/are + going to + \u52a8\u8bcd\u539f\u578b \u4e00\u822c\u5c06\u6765\u65f6 \u4e3b\u8bed + was/was/were + \u52a8\u8bcd\u8fc7\u53bb\u5f0f \u4e00\u822c\u8fc7\u53bb\u65f6 \u52a8\u8bcd\u7684\u8fc7\u53bb\u5f0f\u5f62\u5f0f\uff0c\u5206\u4e3a\u4e24\u5927\u7c7b\uff1a \u89c4\u5219\u52a8\u8bcd \u52a8\u8bcd => ed walk -> walked stay -> stayed rain -> rained \u4e0d\u53d1\u97f3\u7684\u52a8\u8bcde\u7ed3\u5c3e => d arrive -> arrived move -> moved smoke -> smoked \u8f85\u97f3\u7ed3\u5c3e => i + ed study -> studied try -> tryied cry ->cryied \u8f85\u97f3 + 1\u5143\u97f3(\u91cd\u5ea6\u97f3\u8282) + \u8f85\u97f3() => \u53cc\u5199\u8f85\u97f3 + ed open(\u91cd\u97f3\u5728o\uff0c\u4e0d\u5728e) -> opened stop -> stopped slip -> slipped regret -> regretted \u4e0d\u89c4\u5219\u52a8\u8bcd go -> went say -> siad read -> read put -> put make -> made see -> saw \u8fc7\u53bb\u5f0f\u7684\u53d1\u97f3\u95ee\u9898: \u6e05\u8f85\u97f3(\u58f0\u5e26\u4e0d\u9707\u52a8) + ed /t/ walk -> walked watch -> watched help -> helped \u6d4a\u8f85\u97f3 & \u5143\u97f3 + ed /d/ open -> opened play -> played /t/ & /d/ + ed /id/ want -> wanted need -> needed aren't you lucky! => \u5426\u5b9a\u7591\u95ee\u53e5\u5f62\u5f0f\u7684\u611f\u53f9\u53e5\uff0c\u4e3a\u7684\u662f\u52a0\u5f3a\u8bed\u6c14\uff0c\u8868\u793a\u5f3a\u6709\u529b\u7684\u80af\u5b9a \u4f60\u4eec\u771f\u5e78\u8fd0 absent from \u7f3a\u5e2d absent from school absent from work How are you all keeping? => How are you? for the weekend \u662f\u6307\u5468\u672b\u8fd9\u51e0\u5929\u7684\u65f6\u95f4\u3001at the weekend\u662f\u5f3a\u8c03\u65f6\u95f4\u7684\u67d0\u4e00\u70b9\u3002 69 The car race hundreds of ....\u6570\u4ee5\u767e\u8ba1\u7684.... the year of the snake It is the year of the snake and it was the year of the dragon on the way to school(\u540d\u8bcd\u9700\u8981\u4ecb\u8bcd\u6765\u8fde\u63a5) on the way home(\u526f\u8bcd\uff0c\u76f4\u63a5\u4fee\u9970) by the way No way stationer \u6587\u5177\u5546 in the race \u53c2\u52a0\u6bd4\u8d5b at the race \u89c2\u770b\u6bd4\u8d5b \u6570\u5b57\u5728\u540e\u9762 Line 10 Room 61 Platform 19 five other(\u901a\u5e38\u76f4\u63a5\u63a5\u540d\u8bcd) cars \u5176\u4ed6\u4e94\u8f86\u8f66 My wife and I(\u81ea\u5df1\u653e\u5728\u540e\u9762) were at the race at vs on vs in at + \u70b9 on + \u5929 in + \u6708\u3001\u5b63\u3001\u5e74 There be \u53e5\u578b\u7684\u8fc7\u53bb\u5f0f There be + (was, were) + \u5730\u70b9 \u7591\u95ee\u53e5\u5c06 was/were\u63d0\u5230\u6700\u524d\u9762 \u5206\u7c7b: 1. There was + \u5355\u6570\u540d\u8bcd 2. There were + \u590d\u6570\u540d\u8bcd \u6709 \u62e5\u6709 have \u5b58\u5728 there be 71 He's awful awful \u8ba9\u4eba\u8ba8\u538c\u7684\u3001\u574f\u7684 once\u3001twice\u3001three times (\u4e00\u6b21\u3001\u4e8c\u6b21\u3001\u4e09\u6b21....) says(\u4e09\u5355) \u53d1\u97f3\u662f /sez/ very nice to see you again say \u5f3a\u8c03\u8bf4\u8bdd\u7684\u5185\u5bb9 speak \u7a81\u51fa\u8bf4\u8bdd\u7684\u65b9\u5f0f\u6216\u52a8\u4f5c\u672c\u8eab speak loudly\u3001speak slowly\u3001speak English she said sorry to me The day before yeasterday \u524d\u5929 The night after next at six o'clock yesterday eventing (\u5c0f\u65f6\u95f4\u5728\u524d) He was in the office Was he in the office? \u4e00\u822c\u7591\u95ee\u53e5\uff0cbe\u52a8\u8bcd\u63d0\u524d\u5373\u53ef He wasn't in the office \u5426\u5b9a\u8bcd Where was he? \u4e0d\u662f\u9488\u5bf9\u4e3b\u8bed\u63d0\u95ee\u7684\uff0c\u52a8\u8bcd\u63d0\u524d \u7279\u6b8a\u7591\u95ee\u53e5 Who was in the office \u9488\u5bf9\u4e3b\u8bed\u63d0\u95ee\uff0c\u52a8\u8bcd\u4e0d\u63d0\u524d \u7279\u6b8a\u7591\u95ee\u53e5 There was a car race in our town in 1998 Was there a car race in our town in 1998? There wasn't a car race in our town in 1998 What was there in our town in 1998? He went to school yesterday Did he go to school yesterday (Do\u4f1a\u5c06\u539f\u5148\u7684\u52a8\u8bcd\u8bed\u6cd5\u6210\u5206\u5438\u6536\u8fc7\u6765) He did't go to shcool yesterday When did he go to shcool? Where did he go yesterday? What did he do yesterday? Who went to school yesterday? He likes coffee? -> Does he like coffee? \u60c5\u6001\u52a8\u8bcd\u6ca1\u6709\u6570\u548c\u4eba\u79f0\u7684\u53d8\u5316 73 The way to King Street suddently bus stop a green hand \u65b0\u624b hurriedly \u5306\u5fd9\u5730 thirstily \u53e3\u6e34\u5730 greet \u95ee\u5019\uff0c\u6253\u62db\u547c greet to sb \u5411\u67d0\u4eba\u6253\u62db\u547c smile(\u5fae\u7b11) vs laugh(\u5927\u7b11) He said and smiled She is telling me a story with a smile They are talking and laughing speak vs say say \u5f3a\u8c03\u8bf4\u8bdd\u7684\u5185\u5bb9 speak \u7a81\u51fa\u8bf4\u8bdd\u7684\u65b9\u5f0f\u6216\u52a8\u4f5c\u672c\u8eab \u8fc7\u53bb\u5f0f go to -> went to lose her way -> lost her way see -> saw say -> said smile -> smiled do not -> did not speak -> spoke is -> was put -> put take -> took open -> opened find -> found read -> read she does not know ... very well He does not know Beijing very well I know xxx very well take out \u62ff\u51fa take sth out of \u4ece...\u62ff\u51fa\u6765 I do not speak English I cannot speak English \u526f\u8bcd\u53d8\u5316: \u4e00\u822c\u76f4\u63a5 + ly quickly \u8f85 + y\u7ed3\u5c3e -> \u53d8y\u4e3ai + ly lazy->lazily, happy->happily \u4ee5ll\u7ed3\u5c3e\uff0c\u76f4\u63a5+y fully \u8f85\u97f3 + le\uff0ce\u53d8\u4e3ay : able->ably\uff0csingle->singly \u5143\u97f3 + e\u7ed3\u5c3e \uff0c\u53bbe + ly : true->truly ly\u7ed3\u5c3e\uff0c\u4e0d\u662f\u526f\u8bcd\uff0c\u662f\u5f62\u5bb9\u8bcd lovely \u53ef\u7231\u7684 deadly \u6551\u547d\u7684 friendly \u53cb\u597d\u7684 \u53e5\u5b50\u7ec4\u7ec7\u7684\u4e94\u4e2a\u6b65\u9aa4: \u8c01\u3001\u5e72\u4e86\u4ec0\u4e48\u3001\u5982\u4f55\u5e72\u7684\u3001\u5728\u54ea\u5e72\u7684\u3001\u4f55\u65f6\u5e72\u7684 \u4ed6\u6bcf\u5929\u5f00\u5fc3\u5730\u5728\u5bb6\u7b49\u5979 He waits for he happily at home every day \u6211\u7a81\u7136\u5728\u6559\u5ba4\u53d1\u73b0\u4e00\u4e2a\u4e0d\u8ba4\u8bc6\u7684\u4eba I find a stranger suddenly in the classroom \u4ed6\u4e0a\u5468\u5306\u5fd9\u5730\u79bb\u5f00 He left hurriedly last week \u6211\u6628\u5929\u5fd9\u788c\u5730\u5728\u5546\u573a\u4e70\u4e86\u5f88\u591a\u978b I bought many shoes busily in the mall yesterday 75 Uncomfortable shoes ago \u4ee5\u524d\uff0c\u5e38\u548c\u8fc7\u53bb\u5f0f\u642d\u914d pair a pair of scissors \u526a\u5200 trousers \u88e4\u5b50 fashion out of fashion \u8fc7\u65f6 in fashion now \u7559\u884c uncomfortable untidy unhappy unwell wear \u7a7f\u7740 (\u5f3a\u8c03\u72b6\u6001) put on \u7a7f\u4e0a (\u5f3a\u8c03\u52a8\u4f5c) \u7b2c\u4e09\u4eba\u79f0\u5355\u6570\u3001\u53c8\u79f0\u4e00\u822c\u73b0\u5728\u65f6\u4e09\u5355\uff0c\u4ec5\u5728\u4e00\u822c\u73b0\u5728\u65f6\u6709\u6548\uff0c\u8fc7\u53bb\u5f0f\u6ca1\u6709\u4e09\u5355\u7684\u6982\u5ff5 She put the book in the bag yesterday put \u662f\u8fc7\u53bb\u5f0f(yesterday)\u3001\u6240\u6709\u4e0d\u7528\u5199\u6210puts\u3001 \u60c5\u6001\u52a8\u8bcd\u540e\u9762\u63a5\u52a8\u8bcd\u539f\u578b She drinks some tea every day They drink some tea every day He can drink some coffee He drank a cup of coffee yesterday \u4ecb\u8bcd + \u540d\u8bcd/\u4ee3\u8bcd -> \u4ecb\u8bcd\u77ed\u8bed\uff0c\u901a\u5e38\u4f5c\u4e3a\u5730\u70b9\u72b6\u8bed\u3001\u5b9a\u8bed(\u5bf9\u4eba\u548c\u4e8b\u7269\u8fdb\u884c\u9650\u5b9a\u548c\u63cf\u8ff0) \u4f5c\u4e3a\u5b9a\u8bed\u65f6\u8981\u653e\u5728\u4fee\u9970\u7684\u8bcd\u4e4b\u540e \u540d\u8bcd\u6240\u6709\u683c\u5c31\u662f\u5b9a\u8bed Mary's room Tom's bike of our village on the table in the room in our town A friend in need is a friend indeed \u5728\u9700\u8981\u7684\u65f6\u5019\u51fa\u73b0\u7684\u670b\u53cb\uff0c\u624d\u771f\u7684\u662f\u670b\u53cb 77 Terrible toothache appointment \u7ea6\u4f1a\u3001\u9884\u7ea6 urgent \u7d27\u6025\u7684\u3001\u7d27\u8feb\u7684 urgent to do \u5426\u5b9a\u7591\u95ee\u53e5: \u4e00\u822c\u7591\u95ee\u53e5\u7684\u95ee\u8bcd + not\u7684\u7f29\u7565\u5f0f Are you ok? -> Aren't you ok? Do you know that? -> Don't you know that? Can you wait? -> Can't you wait? \u4f55\u65f6\u7528? \u8868\u8fbe\u5f3a\u8c03 Aren't you lucky! \u8868\u8fbe\u60c5\u7eea Don't you love me? \u7ec4\u7ec7\u6b65\u9aa4: \u4e00\u822c\u7591\u95ee\u53e5(\u5148\u770b\u8bcd\u6027 + \u518d\u770b\u4eba\u79f0) + not \u96be\u9053\u5979\u4e0d\u6f02\u4eae(\u5f62\u5bb9\u8bcd\uff0c\u9700\u8981\u4f7f\u7528\u7cfb\u52a8\u8bcd)\u5417\uff1f Is she beautiful? Isn't she beautiful? \u96be\u9053\u5979(\u7b2c\u4e09\u4eba\u79f0\u5355\u6570\uff0c\u4e09\u5355\u5f62\u5f0f)\u6ca1\u6709(\u52a8\u8bcd\uff0c\u9700\u8981\u4f7f\u7528\u52a9\u52a8\u8bcdDo)\u7537\u670b\u53cb\u5417? Does she have a boyfriend? Doesn't she have a boyfriend? \u96be\u9053\u4f60\u6628\u5929\u6ca1\u53bb\u7ea6\u4f1a(\u52a8\u8bcd)\u5417? Did you have a date yesterday? Didn't you have a date yesterday? \u96be\u9053\u4f60\u5c31\u4e0d\u80fd(\u60c5\u6001\u52a8\u8bcd)\u6e29\u67d4\u4e00\u70b9\u5417? Can you be tender? Can't you be tender? 79 Carol's shopping list make \u5236\u9020 \u5236\u4f5c make a film \u4ea7\u751f\u3001\u5f15\u8d77 make a noise \u5199 \u6323 have got\u3001has got (\u56fa\u5b9a\u7ed3\u6784\uff0c\u82f1\u5f0f\u82f1\u8bed) \u62e5\u6709 == have or has (\u7f8e\u5f0f\u82f1\u8bed) He has got a new bike => He's got a new bike has\u4e5f\u7f29\u5199\u6210 He's\u4e86 many vs much vs a lot of many \u4e3b\u8981\u7528\u4e8e\u7591\u95ee\u53e5\u548c\u5426\u5b9a\u53e5\u4e2d\u3001\u653e\u5728\u53ef\u6570\u540d\u8bcd\u524d much \u7528\u4e8e\u7591\u95ee\u53e5\u548c\u5426\u5b9a\u53e5\u4e2d\uff0c\u653e\u5728\u4e0d\u53ef\u6570\u540d\u8bcd\u524d a lot of \u8bb8\u591a\uff0c\u7528\u5728\u80af\u5b9a\u53e5\u4e2d\uff0c\u65e2\u53ef\u7528\u4e8e\u4e0d\u53ef\u6570\u540d\u8bcd\uff0c\u4e5f\u53ef\u4ee5\u7528\u4e8e\u53ef\u6570\u540d\u8bcd I have got a new bike (have \u89c6\u4e3a\u52a9\u52a8\u8bcd\uff0c\u7f8e\u5f0f\u82f1\u8bed\u4e2d\u7684have\u4e0d\u80fd\u89c6\u4e3a\u52a9\u52a8\u8bcd) Have i got a new bike?\u3001 Yes I have I haven't got a new bike What have you got? \u8fc7\u53bb\u65f6\u6001\u4e0b\uff0c\u4e00\u822c\u53ea\u7528had\u3001\u4e0d\u7528got\uff0c\u65e0\u8bba\u82f1\u5f0f\u82f1\u8bed\u8fd8\u662f\u7f8e\u5f0f\u82f1\u8bed \u7528not\u6216no\u6784\u6210\u7684\u5426\u5b9a\u53e5\u4e2d\uff0c\u8981\u7528or\u8fde\u63a5\u5bf9\u7b49\u7684\u8bcd \u90e8\u5206\u5426\u5b9a (much\u548cmany \u5728\u5426\u5b9a\u53e5\u4e2d\u8868\u793a\u90e8\u5206\u5426\u5b9a)\uff0c\u5b8c\u5168\u5426\u5b9a(any\uff0c\u65e0\u8bba\u53ef\u6570\u8fd8\u662f\u4e0d\u53ef\u6570) \u6211\u4eec\u7684\u725b\u5976\u4e0d\u591a We haven't got much milk \u4ed6\u4eec\u7684\u82f9\u679c\u4e0d\u591a\u4e86 They don't haven many apple \u5979\u7684\u5de7\u514b\u529b\u4e0d\u591a\u4e86 She hasn't got much chocolate \u4ed6\u7684\u9e21\u86cb\u4e0d\u591a\u4e86 He hasn't got many eggs 81 Roast beef and patatoes Sam's here sam\u6765\u4e86\uff0c\u8868\u793axxx\u6765\u4e86 Have a cigarette \u62bd\u6839\u70df I nearly die Then no \u90a3\u5c31\u7b97\u4e86\u5427 breakfast\u65e9\u9910\u3001lunch\u5348\u9910\u3001dinner\u665a\u9910\u3001\u6b63\u9910 roast \u70e4\u7684\u3001roast duck\u70e4\u9e2d have a haircut \u53bb\u7406\u53d1 dinner party \u5bb4\u4f1a holiday(\u82f1\u5f0f)\u3001vocation(\u7f8e\u5f0f) biscuit \u5c0f\u70b9\u5fc3\u3001\u997c\u5e72 have: 1. \u5b9e\u4e49\u52a8\u8bcd has\u3001had * \u62e5\u6709 I have a close friend in Beijing * \u751f\u75c5 * \u5403\u3001\u559d\u3001\u73a9\u3001\u4e50\u3001\u505a \u6d17\u6fa1(have a bath)\u3001have a swim\u3001have a haircut\u3001have a party 2. \u73b0\u5728\u5b8c\u6210\u5f0f(\u4e3b\u8bed + have(has) + done)\uff0c\u65e0\u610f\u4e49\uff0c\u53ea\u80fd\u7528\u6765\u505a\u73b0\u5728\u5b8c\u6210\u65f6 83 Going to holidy mess \u6742\u4e71\u3001\u51cc\u4e71 untidy suitcase \u624b\u63d0\u7bb1 \u73b0\u5728\u5b8c\u6210\u65f6: \u4e3b\u8bed + have/has + \u52a8\u8bcd\u7684\u8fc7\u53bb\u5206\u8bcd + \u5176\u4ed6\u6210\u5206 \u8868\u793a\u5728\u8fc7\u53bb\u4e0d\u786e\u5b9a\u7684\u65f6\u95f4\u91cc\u53d1\u751f\u7684\uff0c\u5e76\u4e0e\u73b0\u5728\u6709\u7740\u67d0\u79cd\u8054\u7cfb\u7684\u52a8\u4f5c \u8868\u793a\u5f00\u59cb\u4e0e\u8fc7\u53bb\u5e76\u6301\u7eed\u5230\u73b0\u5728\u7684\u52a8\u4f5c I have(\u52a9\u52a8\u8bcd) finished my work Have you finished my work? Yes I have\u3001No, I haven't I haven't finished my work What have you finished? Who has finished the work? \u52a8\u8bcd\u539f\u578b -> \u8fc7\u53bb\u5206\u8bcd: \u4e0d\u89c4\u5219\u52a8\u8bcd: go\u3001went\u3001gone read\u3001read\u3001read put\u3001put\u3001put is been \u89c4\u5219\u52a8\u8bcd: \u548c\u5982\u4f55\u53d8\u6210\u8fc7\u53bb\u5f0f\u4e00\u81f4 * \u52a8\u8bcd + ed worked * \u52a8\u8bcd + d arrived * \u8f85\u97f3 + ied -> study studied * \u8f85\u97f3 + 1\u5143\u97f3 + 1\u8f85\u97f3 \u8bf4\u8bdd\u4eba\u4e3b\u89c2\u4e0a\u5f3a\u8c03\u8fc7\u53bb\u7684\u52a8\u4f5c\u6216\u72b6\u6001\u7684\u5ef6\u7eed\u6027\uff0c\u5176\u6301\u7eed\u5230\u73b0\u5728 \u6211\u5b66\u8fc7\u82f1\u8bed \u4e00\u822c\u8fc7\u53bb\u5f0f \u6211\u5b66\u82f1\u8bed\u5341\u5e74\u4e86\u3002 \u73b0\u5728\u5b8c\u6210\u65f6 \u8a00\u4e4b\u8fc7\u53bb\u3001\u610f\u5728\u5f53\u4e0b \u8981\u4e0d\u8981\u548c\u6211\u4eec\u4e00\u8d77\u5403\u665a\u996d? \u4e0d\u3001\u8c22\u8c22\uff0c\u6211\u5df2\u7ecf\u5403\u8fc7\u4e86\uff0c\u73b0\u5728 \u5177\u4f53\u7684\u3001\u8868\u8fc7\u53bb\u7684\u65f6\u95f4\u72b6\u8bed\u5f80\u5f80\u4e0d\u80fd\u7528\u5728\u73b0\u5728\u5b8c\u6210\u65f6\u7684\u53e5\u5b50 yesterday the day before yesterday ago at 4:00/6:30... ..... 85 Paris in the spring cinema \u7535\u5f71\u9662 just now \u521a\u521a(\u4e00\u822c\u8fc7\u53bb) just (\u73b0\u5728\u5b8c\u6210\u65f6) \u5939\u7740\uff0c\u5728\u82f1\u6587\u4e2d\u8868\u793a\u7684\u662f\u4ecb\u8bcd\uff0c\u5e76\u4e0d\u662f\u52a8\u8bcd\uff0c\u7528between\u8868\u793a have been to ... \u5230\u8fc7... He has been there \u5230\u8fc7\u90a3\u91cc What's on? \u4e0a\u6f14\u4e86\u4ec0\u4e48\u7535\u5f71 \u4e3b\u8bed + have/has + been + \u975e\u52a8\u8bcd been to \u53bb\u8fc7 gone to \u53bb\u4e86 \u526f\u8bcd\u53ef\u4ee5\u76f4\u63a5\u8ddf\u5728\u52a8\u8bcd\u540e\u9762\u4fee\u9970\u52a8\u8bcd\uff0c\u540d\u8bcd\u5219\u9700\u8981\u96c6\u5408\u4ecb\u8bcd\u6765\u4fee\u9970\u52a8\u8bcd Have you ever been there(\u5730\u70b9\u526f\u8bcd\uff0c\u53ef\u4ee5\u76f4\u63a5\u4fee\u9970\u52a8\u8bcdthere)? Have you just been to the cinema \u6f02\u4eae: 1. nice 2. smart 3. lovely 4. good-looking 5. gorgeous never: \u4e00\u822c\u73b0\u5728\u65f6 He never(\u5b9e\u4e49\u52a8\u8bcd\u524d) gets up early She is never(\u7cfb\u52a8\u8bcd\u540e) late \u5b9e\u524d\u7cfb\u540e \u73b0\u5728\u5b8c\u6210\u65f6 I have never left \u6211\u4ece\u672a\u79bb\u5f00 I have never... \u73b0\u5728\u5b8c\u6210\u7684\u5426\u5b9a\u5f62\u5f0f \u4e00\u4e9b\u77ed\u8bed\u4e2d Never give up! Never fear! Never mind! \u5b8c\u5168\u6ca1\u5173\u7cfb ever: \u7b49\u540c\u4e8ealways Honesty ever pays \u8bda\u5b9e\u6c38\u8fdc\u6709\u56de\u62a5 \u4e00\u822c\u8fc7\u53bb(\u7591\u95ee\u53e5\u4e2d) Did you ever see such a man? \u73b0\u5728\u5b8c\u6210(\u7591\u95ee\u53e5\u4e2d) Have you ever....? \u53e3\u8bed\u4e2d Don't ever do it! = Never do it! \u4e00\u822c\u8fc7\u53bb\u65f6 vs \u73b0\u5728\u5b8c\u6210\u65f6 \u7ed3\u6784 \u73b0\u5728\u5b8c\u6210: \u4e3b\u8bed + have/has + done \u4e00\u822c\u8fc7\u53bb: \u4e3b\u8bed + was/were/did \u7528\u6cd5 \u73b0\u5728\u5b8c\u6210: \u8fc7\u53bb\u53d1\u751f\u3001\u5f71\u54cd\u73b0\u5728 \u4e00\u822c\u8fc7\u53bb: \u8fc7\u53bb\u53d1\u751f\u3001\u4e0e\u73b0\u5728\u65e0\u5173 \u65f6\u95f4\u72b6\u8bed \u73b0\u5728\u5b8c\u6210\u65f6: just\u3001already\u3001before\u3001never\u3001ever\u3001yet \u4e00\u822c\u8fc7\u5f0f: yesterday\u3001last..\u3001...ago\u3001just now \u53e3\u8bed\u529f\u80fd \u73b0\u5728\u5b8c\u6210\u65f6: \u5f15\u8d77\u8bdd\u9898 \u4e00\u822c\u8fc7\u53bb: \u5177\u4f53\u8c08\u8bba Have you ever...? 87 A car crash yet: \u526f\u8bcd\u3001\u7591\u95ee\u53e5\u5c3e\u8868\u793a \"\u5df2\u7ecf\"\u3001\u5426\u5b9a\u53e5\u5c3e\u8868\u793a \"\u8fd8\" Example: Is my car ready yet? \u6211\u7684\u8f66\u5df2\u7ecf\u51c6\u5907\u597d\u4e86\u5417? yet vs already Has he arrived already? Have you read this book already? licence plate number \u8f66\u724c\u53f7 attendant \u63a5\u5f85\u5458 lamp \u706f post \u90ae\u653f\u3001\u67f1\u3001\u6746 89 I believe that this house is for sale May I have a look at it, please? I've lived here for twenty years I have been here since 1976 How much does this house cose? It's worth every penny of it Women always have the last word have the last word \u8bf4\u4e86\u7b97 believe \u76f8\u4fe1\u3001\u8ba4\u4e3a think feel \u611f\u89c9\u3001\u8ba4\u4e3a hold \u63e1\u4f4f\u3001\u575a\u6301\u8ba4\u4e3a consider \u8003\u8651\u3001\u8ba4\u4e3a \u8f6e\u6362\u4e0d\u540c\u7684\u8bcd\u6765\u5199\u4f5c\uff0c\u800c\u4e0d\u662f\u4ece\u5934\u5230\u5c3e\u5c31\u4e00\u4e2a\u8bcd\u3002 I think ..... I also believe I still feel ... Do you consider so? May I ...? How long \u591a\u4e45 since \u81ea\u4ece 1. since + \u65f6\u95f4\u70b9 She has been in Beijing since 2004 2. since + n She hasn't been out since the accident sale \u5356(\u540d\u8bcd) big sale because: 1. because + of + n 2. because + \u53e5\u5b50","title":"Note"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/note/#_1","text":"in \u5728...\u91cc\u9762 on \u5728...\u4e0a\u9762\u3001\u5728...\u65c1\u8fb9\uff1b\u9760\u8fd1\uff0c\u5728\u5de6/\u53f3\u3001put on(\u7a7f\u4e0a)\u3001trun on(\u6253\u5f00) under over \u5728..\u4e0a\u65b9\uff0c\u4e0d\u63a5\u89e6\u3001\u7ffb\u8d8a across \u4ece...\u7684\u4e00\u8fb9\u5230\u53e6\u4e00\u8fb9 in the sun under the tree on the tree \u957f\u5728\u6811\u4e0a in the tree \u5728\u6811\u4e0a on the board \u5728\u7532\u677f\u4e0a There is a window in the wall \u5899\u4e0a\u6709\u526f\u753b The desk near the window \u662f\u4e0d\u6b63\u786e\u7684\uff0cThe desk is near the window She with her friends\u4e0d\u6b63\u786e\uff0cShe is with her friends for: \u4e3a\u4e86...\u67d0\u4eba\u800c.. It's for you \u5bf9\u4e8e\u67d0\u4eba\u6765\u8bf4... Math is so difficult for me \u8868\u539f\u56e0... What are you sorry for? \u957f\u8fbe... I study Yoga for two years","title":"\u4ecb\u8bcd"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/note/#_2","text":"\u53ef\u6570\u540d\u8bcd(C) \u4e0d\u53ef\u6570\u540d\u8bcd(U) \u53ef\u6570&\u4e0d\u53ef\u6570 \u4e00\u822c\u53ef\u6570\u540d\u8bcd + s \u6e05\u8f85\u97f3 + s -> /s/ books\u3001bikes\u3001cups\u3001truths \u6d4a\u8f85\u97f3&\u5143\u97f3 + s -> /z/ pens\u3001girls\u3001teachers\u3001door /t/ + s -> /ts/ cats\u3001hats\u3001shirts /d/ + s -> /dz/ beds\u3001hands\u3001friends\u3001birds box -> boxes buzz -> buzzes dish -> dishes garage -> garages watch -> watches bridge -> bridges \u4e00\u822c\u60c5\u51b5\u5728\u8bcd\u5c3e\u76f4\u63a5\u52a0 -s \u4ee5 -s , -x , -ch , -sh \u7ed3\u5c3e\u7684\u540d\u8bcd, \u5728\u8bcd\u5c3e\u52a0 -es glass -> glasses box -> boxes watch -> watches brush -> brushes bench -> benches \u4ee5\u8f85\u97f3\u5b57\u6bcd\u52a0-y \u7ed3\u5c3e\u7684\u540d\u8bcd, \u628a-y \u6539\u4e3a-i, \u518d\u52a0-es story -> stories country -> countries \u4ee5-o \u7ed3\u5c3e\u7684\u540d\u8bcd\u53d8\u4e3a\u590d\u6570\u65f6, \u5e38\u5728\u8bcd\u5c3e\u52a0-s\uff0c\u4f46\u6709\u4e9b\u540d\u8bcd\u8981\u52a0-es \u5143\u97f3\u5b57\u6bcd + o\u7ed3\u5c3e\u52a0es \u8f85\u97f3\u5b57\u6bcd + o\u7ed3\u5c3e\u52a0s Negro -> Negroes hero -> heroes potato -> potatoes tomato -> tomatoes radio -> radios \u7f29\u5199\u4e00\u822c + s photo -> photos (photograph) kilo -> kilos (kilogram) \u4ee5 -f \u6216 -fe \u7ed3\u5c3e\u7684\u540d\u8bcd\u53d8\u4e3a\u590d\u6570\u65f6, \u4e00\u822c\u76f4\u63a5\u52a0 -s , \u4f46\u6709\u4e9b\u4ee5 -f \u6216 -fe \u7ed3\u5c3e\u7684\u540d\u8bcd\u9700\u628a f \u6216 fe \u53bb\u6389, \u52a0 -ves self \u2014> selves life -> lives thief \u2014> thieves wife -> wives knife -> knives loaf -> loaves leaf \u2014> leaves shelf -> shelves wolf -> wolves half -> halves \u5408\u6210\u540d\u8bcd\u53d8\u590d\u6570\u65f6, \u901a\u5e38\u53ea\u5c06\u91cc\u9762\u6240\u542b\u7684\u4e3b\u4f53\u540d\u8bcd\u53d8\u4e3a\u590d\u6570, \u5982\u679c\u6ca1\u6709\u4e3b\u4f53\u540d\u8bcd, \u5219\u5c06\u6700\u540e\u4e00\u90e8\u5206\u53d8\u4e3a\u590d\u6570 son-in-law\u2014sons-in-law storyteller\u2014storytellers \"man/woman+n.\"\u53d8\u590d\u6570\u65f6, \u4f5c\u5b9a\u8bed\u7684 man/woman \u548c\u4e2d\u5fc3\u8bcd\u90fd\u8981\u53d8\u590d\u6570 man teacher -> men teachers woman engineer -> women engineers \u53d8\u5185\u90e8\u5143\u97f3 man -> men woman -> women foot -> feet tooth -> teeth \u7279\u6b8a child -> children \u5355\u6570\u540d\u8bcd + is ... \u590d\u6570\u540d\u8bcd + are ... Her passport is green The men are keyboard operations This assistant is busy Our classroom is large","title":"\u540d\u8bcd\u7684\u6570"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/note/#_3","text":"\u4e0d\u53ef\u4ee5\u6570\u7684\u3001\u4e0d\u53ef\u4ee5\u8ba1\u7b97\u7684\u540d\u8bcd \u4e0d\u53ef\u6570\u540d\u8bcd: \u6240\u6709\u6db2\u4f53\u7684\u4e1c\u897f \u7269\u8d28\u540d\u8bcd soap\\bread\\chocolate\\rice\\tobacco \u62bd\u8c61\u540d\u8bcd love\\friendship\\work\\homework \u4e0d\u53ef\u6570\u540d\u8bcd\u7684\u7279\u70b9: \u524d\u9762\u4e0d\u80fd\u52a0one\u3001two\u3001three \u524d\u9762\u4e0d\u53ef\u4ee5\u52a0a\\an \u540e\u9762\u4e0d\u53ef\u4ee5\u52a0s\u3001\u6c38\u8fdc\u90fd\u662f\u5355\u6570 \u4e8e\u91cf\u8bcd\u642d\u914d: a piece of bread a loaf of bread a bar of soap a bottle of cola a tin of cola","title":"\u53ef\u6570/\u4e0d\u53ef\u6570"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/note/#_4","text":"a piece of \u4e00\u7247 a loaf of \u4e00\u6761 a bar of \u4e00\u5757 a bottle of \u4e00\u74f6 a pound of \u4e00\u78c5 a tin of \u4e00\u542c a cup of \u4e00\u676f a box of \u4e00\u76d2 a spoon of \u4e00\u52fa","title":"\u91cf\u8bcd"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/note/#_5","text":"\u540e\u9762\u5fc5\u987b\u52a0\u540d\u8bcd my\u3001your\u3001his\u3001her\u3001its\u3001our\u3001your\u3001their","title":"\u5f62\u5bb9\u6027\u7269\u4e3b\u4ee3\u8bcd"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/note/#be","text":"am: I am a doctor \u56fa\u5b9a\u642d\u914d\uff0c\u8fd9\u662f\u52a8\u8bcd\u73b0\u5728\u65f6\u7b2c\u4e00\u4eba\u79f0\u5355\u6570 are: be\u52a8\u8bcd\u73b0\u5728\u65f6\u590d\u6570 \u4e8e\u7b2c\u4e8c\u4eba\u79f0\u6216\u590d\u6570\u4eba\u79f0\u642d\u914d Your are....\u3001we are...\u3001They are...\u3001 is: \u4e3b\u8bed\u65f6\u7b2c\u4e09\u4eba\u79f0\u5355\u6570\u3001He is...\u3001She is....\u3001It is.....\u3001The book is....","title":"be\u52a8\u8bcd"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/note/#_6","text":"\u4ee3\u8bcd\uff0c\u7528\u6765\u4ee3\u66ff\u540d\u8bcd\u3002 \u4eba\u79f0\u4ee3\u8bcd(\u4f60\u3001\u6211\u3001\u4ed6) \u7b2c\u4e00\u4eba\u79f0 I(\u5355\u6570\u5f62\u5f0f)\u3001we(\u590d\u6570\u5f62\u5f0f) \u4e3b\u683c\u5f62\u5f0f| me\u3001us \u5bbe\u683c\u5f62\u5f0f \u7b2c\u4e8c\u4eba\u79f0 you(\u5355\u590d\u6570\u540c\u578b) \u5bbe\u683c\u548c\u4e3b\u683c\u540c\u578b \u7b2c\u4e09\u4eba\u79f0 he\u3001she\u3001it\u3001They(\u590d\u6570\u5f62\u5f0f) \u4e3b\u683c\u5f62\u5f0f| him\u3001her\u3001them \u5bbe\u683c\u5f62\u5f0f \u9664\u4e86\u7b2c\u4e00\u4eba\u79f0\u3001\u7b2c\u4e8c\u4eba\u79f0\u5916\u5176\u4ed6\u90fd\u662f\u7b2c\u4e09\u4eba\u79f0\u3001\u4e0d\u4ec5\u4ec5\u65f6\u4e0a\u9762\u63d0\u5230 \u9648\u8ff0\u53e5\u4e2d\uff0c\u52a8\u8bcd\u524d\u9762\u7528\u4eba\u79f0\u4ee3\u8bcd\u7528\u4e3b\u683c\u3001\u540e\u9762\u7528\u5bbe\u683c Example: I like you I like them You love me They love her \u82f1\u8bed\u4eba\u79f0\u987a\u5e8f: 1. \u5355\u6570\u4eba\u79f0\u9075\u5faa\u7b2c\u4e8c\u4eba\u79f0\u3001\u7b2c\u4e09\u4eba\u79f0\u3001\u7b2c\u4e00\u4eba\u79f0\u7684\u987a\u5e8f You, he and I must clan up the classroom 2. \u590d\u6570\u4eba\u79f0\u9075\u5faa\u7b2c\u4e00\u4eba\u79f0\u3001\u7b2c\u4e8c\u4eba\u79f0\u3001\u7b2c\u4e09\u4eba\u79f0\u7684\u987a\u5e8f We\uff0cyou and they must clean up the classroom 3. \u5f53\u627f\u8ba4\u9519\u8bef\u7684\u65f6\u5019\uff0c\u65e0\u8bba\u5355\u590d\u6570\u4e00\u5f8b 123\u7684\u987a\u5e8f I he and you are sorry for being late","title":"\u4ee3\u8bcd"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/note/#_7","text":"\u4e00\u79cd\u6240\u5c5e\u5173\u7cfb \u540d\u8bcd's + \u540d\u8bcd This is Mike's car That is Tom's watch This is the boy's father That is Mary's dress That is the bird's song \u540d\u8bcd(s) \u53d1\u97f3/z/ \u540d\u8bcd(s)'s + \u540d\u8bcd \u540d\u8bcd(s)'s book Tomas's book or Tomas' book Jones's car or Jones' car Hopkins's bike or Hopkins' bike \u540d\u8bcd(s) \u590d\u6570 \u540d\u8bcd(s)'s + \u540d\u8bcd The teachers' reading-room \u540d\u8bcd's + \u540d\u8bcd(\u53ef\u7701\u7565) \u540d\u8bcd's This shirt is Tim's shirt. This shirt is Tim's Is this shirt Tim's?","title":"\u540d\u8bcd\u6240\u6709\u683c"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/note/#_8","text":"\u4fee\u9970\u5f62\u5bb9\u8bcd(\u5f62\u5bb9\u8bcd\u524d) I am tired I am very tired I am so tired I am too tired I am awfully tired very\u3001so\u3001too\u3001awfully \u90fd\u662f\u526f\u8bcd \u4fee\u9970\u52a8\u8bcd (\u653e\u5728\u52a8\u8bcd\u540e\u9762) I love you very much I love you awfully \u4fee\u9970\u526f\u8bcd I swim well I know him well","title":"\u526f\u8bcd"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/note/#_9","text":"\u9650\u5b9a\u3001\u8bf4\u660e\u540d\u8bcd\u6216\u8005\u4ee3\u8bcd\u7684\u54c1\u8d28\u4e0e\u7279\u5f81\u7684\u3002\u6bd4\u5982: Mike's car\uff0c\u5176\u4e2dMike's\u662f\u5b9a\u8bed\uff0c\u4fee\u9970car I want a red(\u5b9a\u8bed) shirt The Tall(\u5b9a\u8bed) boy is my friend His(\u5b9a\u8bed) father is a doctor \u5b9a\u8bed\u524d\u7f6e\u7684\u8fd9\u79cd\u5f62\u5f0f\u548c\u6211\u4eec\u7684\u601d\u7ef4\u65b9\u5f0f\u662f\u4e00\u81f4\u7684\u3002 \u5b9a\u8bed: 1. \u88ab\u5b9a\u8bed\u9650\u5b9a\u7684\u8bcd of \u5b9a\u8bed 2. \u5b9a\u8bed's \u88ab\u9650\u5b9a\u7684\u8bcd \u4f5c\u5b9a\u8bed\u7684\u540d\u8bcd\u662f\u6709\u751f\u547d\u7684\u65f6\u5019\uff0c\u5f80\u5f80\u91c7\u7528\u540d\u8bcd\u6240\u6709\u683c's\u7684\u5f62\u5f0f \u4f5c\u5b9a\u8bed\u7684\u540d\u8bcd\u662f\u65e0\u751f\u547d\u7684\u65f6\u5019\uff0c\u5f80\u5f80\u91c7\u7528of\u7684\u5f62\u5f0f","title":"\u5b9a\u8bed"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/note/#_10","text":"\u80af\u5b9a\u53e5 \u4e3b\u8bed + \u52a8\u8bcd + \u5176\u5b83\u6210\u4efd \u5426\u5b9a\u53e5 \u4e3b\u8bed + \u52a8\u8bcd + not + \u5176\u5b83\u6210\u4efd \u4e00\u822c\u7591\u95ee yes/no question\uff0c\u4e00\u822c\u4ee5yes/no\u6765\u56de\u7b54 \u7279\u6b8a\u7591\u95ee\u53e5 \u7279\u6b8a\u7591\u95ee\u8bcd\u5f00\u5934\u3001\u90fd\u662f\u4ee5wh\u5f00\u5934\uff0c\u4e0d\u80fd\u76f4\u63a5\u7528yes/no\u6765\u56de\u7b54 This is Miss Sophie Dupont? \u6539\u6210\u4e00\u822c\u7591\u95ee\u53e5(\u52a8\u8bcd\u6362\u5230\u4e3b\u8bed\u4e4b\u524d): Is this Miss Sophie Dupont? \u7279\u6b8a\u7591\u95ee\u53e5 \u4e0d\u7b49\u4e8e \u7279\u6b8a\u7591\u95ee\u8bcd + \u4e00\u822c\u7591\u95ee\u53e5(\u52a8\u8bcd + \u4e3b\u8bed) ? Who is climbing the tree ? What is in it ? \u91cc\u9762\u662f\u4ec0\u4e48\u4e1c\u897f What is on ? Who served you ? I don't know what you are talking about? Example: Your name is Bob Is your name Bob? \u4e00\u822c\u7591\u95ee\u53e5 \u4f60\u7684\u540d\u5b57\u662f\u4ec0\u4e48? \u4e0d\u80fd\u7528yes/no\u6765\u56de\u7b54 \u5982\u4f55\u8f6c\u6362\u4e3a\u7279\u6b8a\u7591\u95ee\u53e5? \u627e\u5230\u80af\u5b9a\u53e5\u4e2d\u88ab\u63d0\u95ee\u7684\u90e8\u5206 \u6839\u636e\u53e5\u610f\u9009\u62e9\u6700\u5408\u9002\u7684\u7279\u6b8a\u7591\u95ee\u8bcd \u5c06\u7279\u6b8a\u7591\u95ee\u8bcd\u7f6e\u4e8e\u53e5\u9996 \u8be5\u7279\u6b8a\u7591\u95ee\u53e5\u4e0d\u9488\u5bf9\u80af\u5b9a\u53e5\u7684\u4e3b\u8bed\u63d0\u95ee\u65f6\uff0c\u52a8\u8bcd\u653e\u5728\u4e3b\u8bed\u524d\u3002 \u6539\u7279\u6b8a\u7591\u95ee\u53e5\u662f\u9488\u5bf9\u4e3b\u8bed\u63d0\u95ee\u65f6\uff0c\u52a8\u8bcd\u4e0d\u7528\u63d0\u524d\u3001\u539f\u4f4d\u4e0d\u52a8 What is your name? Who is Bob? He is my teacher \u4ed6\u662f\u8c01: Who is he? \u8c01\u662f\u6211\u7684\u8001\u5e08: Who is my teacher? My book is on the table? \u6211\u7684\u4e66\u5728\u54ea\u91cc? Where is my book? \u4ec0\u4e48\u5728\u684c\u5b50\u4e0a\u9762? What is on the table? You are French? \u8c01\u662f\u6cd5\u56fd\u4eba: Who is French? (who\u662f\u7b2c\u4e09\u4eba\u79f0\u5355\u6570) Hey\u3001Hi\u3001Hello \u95ee\u597d How is your mother? How is the weather? How are you? \u56de\u7b54: very well\u3001Thank you and you\u3001not bad\u3001very bad\u3001terrible well \u8eab\u4f53\u597d Thanks a lot \u975e\u5e38\u611f\u8c22 Thankyou very much Look at... \u770b... I see him in the street A fat cat \u66b4\u53d1\u6237 The girl is very hot \u8fd9\u4e2a\u5973\u5b69\u975e\u5e38\u6027\u611f","title":"\u53e5\u5b50\u7684\u79cd\u7c7b"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/note/#_11","text":"this\u3001these\u3001that\u3001those","title":"\u6307\u793a\u4ee3\u8bcd"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/note/#_12","text":"give\u3001teach\u3001write\u3001send\u3001offer\u3001post\u3001read teach you English write him a letter send her an e-mail offer you a job read me this lettle post him a letter shell her a new car \u7ed9\u5979\u5e26\u6765\u4e00\u4e9b\u82b1\u5427 Bring her some flower \u7ed9\u6211\u8bb2\u4e2a\u82f1\u8bed\u6545\u4e8b\u5427 Tell me an English story \u628a\u90a3\u672c\u4e66\u9012\u7ed9\u6211 Hand me that book \u628a\u90a3\u672c\u4e66\u7ed9\u6211\u62ff\u8fc7\u6765\u77a7\u4e00\u77a7\u3001\u770b\u4e00\u770b Show me that book \u7ed9\u6211\u4e70\u4e00\u6735\u82b1\u5427 Buy me a flower \u52a8\u8bcd+\u4ee3\u8bcd+\u540d\u8bcd \u82f1\u6587\u4e2d\u4e00\u4e2a\u53e5\u5b50\u4e00\u822c\u6700\u591a\u53ea\u4f1a\u51fa\u73b0\u4e00\u4e2a\u53e5\u5b50","title":"\u53cc\u5bbe\u8bed\u52a8\u8bcd"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/note/#_13","text":"\u4e00\u8f85\u4e00\u5143\u3001\u524d\u8f85\u540e\u5143\u53ef\u4ee5\u4e00\u8d77\u8fde\u8bfb An empty","title":"\u8fde\u8bfb"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/note/#_14","text":"What colour's your....? Is this your shirt? Look at... Are you a teacher? How are you today? Nice to meet you What make is it? What's your job? -> What is your job? what are their jobs? \u590d\u6570\u5f62\u5f0f Tied and thirsty There be(\u5b58\u5728) + \u4e3b\u8bed Where is it? Are these your....? \u8fd9\u4e9b\u662f\u4f60\u7684....\u561b? What colour are your...? \u4f60\u7684...\u662f\u4ec0\u4e48\u989c\u8272? \u590d\u6570\u5f62\u5f0f What must I do? // \u6211\u8be5\u505a\u70b9\u5565\u5462? What is he doing? // \u4ed6\u6b63\u5728\u505a\u4ec0\u4e48 I beg your pardon? What about this dress? // \u8fd9\u4ef6\u8863\u670d\u600e\u4e48\u6837? It is + adj + \u65f6\u95f4 // It is fine day today I am off today \u6211\u4eca\u5929\u4e0d\u4e0a\u73ed What are you going to do ? \u4f60\u51c6\u5907\u505a\u4ec0\u4e48? What are you doing now? \u4f60\u73b0\u5728\u6b63\u5728\u505a\u4ec0\u4e48? It is not very heavy \u4e0d\u662f\u975e\u5e38... what's in it? \u91cc\u9762\u6709\u4ec0\u4e48 do with \u5904\u7406 What are you going to do with there empty bottles? \u67d0\u5730\u5b58\u5728\u67d0\u4eba\u6216\u67d0\u7269 There is a book on the table. There is a pen in my bag There is a student in the classroom There is a teacher in the office There is a traffic jam on the road There is no power in my cell phone. There is truth in wine \u9152\u4e2d\u6709\u771f\u60c5 There is no place like home \u5929\u6daf\u65e0\u5904\u4f3c\u5f52\u6240 There is a witness(\u76ee\u51fb\u8005) everywhere \u82e5\u8981\u4eba\u4e0d\u77e5\u9664\u975e\u5df1\u83ab\u4e3a There is no royal way to learning \u5b66\u95ee\u65e0\u6377\u5f84 Where there is a will\uff0cthere is a way \u6709\u5fd7\u8005\u4e8b\u7adf\u6210 There is no smoke without fire \u65e0\u98ce\u4e0d\u8d77\u6d6a There is no best but better There are spots in the sun \u4eba\u65e0\u5b8c\u4eba \u6240\u5728\u4f4d\u7f6e\u3001\u989c\u8272\u3001\u5177\u4f53\u4f4d\u7f6e\u3001\u72b6\u6001 There is a bed in the bedroom The bed is green It is in the middle of the room And it is very clean \u6211\u6709\u5f88\u591a\u94b1 \u62e5\u6709\u7684\u5173\u7cfb\uff0c\u7528have \u8857\u4e0a\u6709\u5f88\u591a\u8f66 \u5b58\u5728\u7684\u5173\u7cfb\uff0c\u7528There be There are + \u590d\u6570\u540d\u8bcd / There is + \u5355\u6570\u540d\u8bcd There is a cooker in the kitchen => A cooker is in the kitchen there \u4e3b\u8c13\u5bbe+\u5bbe\u8865 I find the room is dark -> I find the room dark(\u5bbe\u8bed\u8865\u8db3\u8bed) We must keep the classroom clean Histories make mem wise Poems make mem witty Math make mem subtle","title":"\u53e5\u578b"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/note/#some-and-any","text":"some\\any + \u590d\u6570\u540d\u8bcd\u6216\u4e0d\u53ef\u6570\u540d\u8bcd\u65f6\u65f6\u4e00\u4e9b\u7684\u610f\u601d\uff0csome\u7528\u5728\u80af\u5b9a\u53e5\u4e2d\uff0cany\u7528\u5728\u5426\u5b9a\u3001\u7591\u95ee\u53e5\u4e2d\u3002 Is there a + \u53ef\u6570\u540d\u8bcd Is there any + \u4e0d\u53ef\u6570\u540d\u8bcd \u4f46\u662f\u5728\u8868\u8bf7\u6c42\u3001\u5efa\u8bae\u7684\u7591\u95ee\u53e5\u4e2d\u7528some any + \u5355\u6570\u540d\u8bcd\uff0c some\u7ffb\u8bd1\u4e3a\u67d0\u4e00\uff0cany\u7ffb\u8bd1\u4e3a\u4efb\u4e00 Some day, he can be some one You can buy it in any supermarket","title":"some and any"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/note/#_15","text":"customs n \u6d77\u5173 custom \u4e60\u60ef\u3001customer \u987e\u5ba2 officer \u5b98\u5458 CEO Chief Executive Officer police officer nationality \u56fd\u7c4d nation \u56fd\u5bb6\u3001\u6c11\u65cf national \u56fd\u5bb6\u7684 girl \u5973\u5b69\u3001\u83c7\u51c9 ex-\u524d\u7f00\uff0c\u8868\u793a\u524d... ex-wife \u524d\u59bb passport n \u62a4\u7167 pass v \u901a\u8fc7\u3001port \u6e2f\u53e3\u3001seaport\u3001airport \u98de\u673a\u573a\u3001visa n \u7b7e\u8bc1 brown adj \u68d5\u8272\u7684 brown sugar \u7ea2\u8272 You look brown afetr this summer \u6691\u5047\u8fc7\u540e\u6652\u9ed1\u4e86 tourist n \u65c5\u6e38\u8005 terrorist \u6050\u6016\u8005 grey \u7070\u8272\u7684 grey\u3001gray(\u7f8e\u5f0f\u62fc\u5199) yellow adj yellow race \u9ec4\u79cd\u4eba I am Asian \u4e0d\u80fd\u8bf4 I am yellow race black adj black tea \u7ea2\u8336 orange adj \u6a58\u9ec4\u8272 emplyee \u96c7\u5458 employ \u96c7\u4f63 employer \u96c7\u4f63\u8005 trainer \u57f9\u8bad\u8005 trainee \u88ab\u57f9\u8bad\u8005 hard-working good-looking \u597d\u770b\u7684 easy-going \u597d\u76f8\u5904\u7684 sales rep \u63a8\u9500\u5458 light \u8f7b\u7684 thirsty \u6e34 thirty 30 thirteen 13 jam \u679c\u9171\u3001\u5835\u585e boy cowboy \u725b\u4ed4 busboy \u9910\u9986\u670d\u52a1\u751f sit down sit down please have a seat, please carpet \u5730\u6bef empty An empty \u53ef\u4ee5\u8fde\u8bfb empty\u7684\u9996\u5b57\u6bcd\u662f\u539f\u56e0\u3001An\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u662f\u8f85\u97f3\uff0c\u8f85\u97f3\u548c\u5143\u97f3\u53ef\u4ee5\u8fde\u8bfb glass\u3001box\u3001cup\u3001bottle\u3001tin knife\u3001fork\u3001spoon k\u548cn\u5728\u4e00\u8d77\u7684\u65f6\u5019\uff0ck\u4e0d\u53d1\u97f3\uff0c\u4f8b\u5982:know shelf \u67b6\u5b50 \u590d\u6570shelves bookshelf\u3001shelf life \u4fdd\u8d28\u671f desk\u3001table tea table\u3001office desk\u3001school desk plate \u76d8\u5b50 cupboard cigarette \u9999\u70df cigar \u96ea\u8304 television \u7535\u89c6\u673a floor \u5730\u677f dressing \u68b3\u5986\u53f0 magazine \u6742\u5fd7 newspaper stereo \u7acb\u4f53\u58f0\u97f3\u54cd refrigerator/fridge \u7535\u51b0\u7bb1 electric \u5e26\u7535\u7684\uff0c\u53ef\u901a\u7535\u7684 bottle \u74f6\u5b50 trousers \u957f\u88e4 shelf \u67b6\u5b50 take off/put on \u8131\u6389/\u7a7f\u4e0a sharpen \u524a\u5c16 en \u540e\u7f00\uff0c\u4f7f\u5f62\u5bb9\u8bcd\u53d8\u6210\u52a8\u8bcd turn on/turn off (\u5e26\u7535\u7684\u8bbe\u5907) shut/open (\u975e\u5e26\u7535\u8bbe\u5907) untidy \u4e71\uff0c\u4e0d\u6574\u9f50 air \u4f7f...\u901a\u98ce\uff0c\u6362\u6362\u7a7a\u6c14 sweep \u626b dust \u626b\u63cf\u7070\u5c18 wardrobe \u8863\u67dc put yours clothes on the wardrobe bathroom/restroom/washroom/toilet \u6d17\u624b\u95f4 sunhat\u3001sunglasss\u3001sunblock shine \u7167\u8000 shave \u522e\u8138\u3001shaver\u522e\u80e1\u5200 village valley hill \u4e18\u9675\u3001\u5c71 along\u3001bank(\u6cb3\u5cb8) off \u79bb\u5f00 vase take (\u5e26\u8d70)vs bring(\u5e26\u6765) sugar \u767d\u7802\u7cd6 candy \u7cd6\u679c tabacco \u70df\u8349\uff0ccigarette \u9999\u70df cent \u7f8e\u5206","title":"\u5355\u8bcd"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/note/#_16","text":"big mouth \u5927\u5634\u5df4 small change \u96f6\u94b1 small talk \u95f2\u804a light rain \u5c0f\u96e8 light snow \u5c0f\u96ea long time no see \u597d\u4e45\u4e0d\u89c1 grandfather clock \u8001\u5ea7\u949f Great-grandfather \u66fe\u7956\u7236 a full stop \u53e5\u53f7 legwork \u8dd1\u817f\u5de5\u4f5c boil the ocean \u597d\u9ad8\u9a9b\u8fdc make the bed \u6574\u7406\u5e8a\u94fa over the bridge \u8fc7\u6865 dream boat \u68a6\u4e2d\u60c5\u4eba 20% OFF 8\u6298\u4f18\u60e0 do with There we are \u5c31\u653e\u5728\u90a3\u5427\uff0c\u653e\u597d\u4e86 in front of \u5728...\u4e4b\u524d(\u4e24\u4e2a\u76f8\u5bf9\u72ec\u7acb\u7684\u4e2a\u4f53\u4e4b\u95f4\u7684\u5173\u7cfb)\uff0cin the front of(\u4e00\u4e2a\u7269\u4f53\u7684\u524d\u7aef) sugar coat \u59d4\u5a49","title":"\u77ed\u8bed"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/note/#_17","text":"\u65f6\u6001 = \u65f6\u95f4 + \u72b6\u6001 \u65f6\u95f4: \u8fc7\u53bb\u3001\u73b0\u5728\u3001\u5c06\u6765 \u65f6\u6001: \u4e00\u822c\u3001\u8fdb\u884c\u3001\u5b8c\u6210 \u52a8\u4f5c\u53d1\u751f\u7684\u65f6\u95f4 \u4e3b\u8bed + \u52a8\u8bcd + \u5176\u5b83\u6210\u4efd \u4e00\u517116\u79cd\u65f6\u6001 \u73b0\u5728\u8fdb\u884c\u65f6(\u76ee\u524d\u6b63\u5728\u53d1\u751f\u7684\u52a8\u4f5c) \u4e3b\u8bed + am/is/are + \u52a8\u8bcd-ing(\u52a8\u8bcd\u7684\u73b0\u5728\u5206\u8bcd) \u52a8\u8bcd\u76f4\u63a5\u52a0ing walking\u3001reading\u3001seeing\u3001going \u52a8\u8bcd\u4ee5\u4e0d\u53d1\u97f3\u7684\u5b57\u6bcde\u7ed3\u5c3e\uff0c\u53bb\u6389e\u52a0ing coming\u3001making\u3001smoking \u52a8\u8bcd\u7684\u62fc\u5199\u662f\uff0c\u8f85\u97f3 + 1\u5143\u97f3 + 1\u8f85\u97f3 \u7ed3\u5c3e\uff0c\u540c\u65f6\u8be5\u5143\u97f3\u5b57\u6bcd\u5728\u5355\u8bcd\u4e2d\u5904\u4e8e\u91cd\u8bfb\u97f3\u8282\uff0c\u6b64\u4e8b\u65f6\u53cc\u5199\u8f85\u97f3\u5b57\u6bcd\u52a0ing sitting\u3001running\u3001swimming\u3001regretting I am sleeping(\u4e0d\u6b63\u786e\u7684\uff0c\u6b63\u5728\u7761\u89c9\u7684\u60c5\u51b5\u4e0b\uff0c\u600e\u4e48\u4f1a\u548c\u522b\u4eba\u4ea4\u8c08\u5462) I am watching TV We are cleaning the room She is playing the guita He is typing a letter They are swimming in the river \u53d8\u6210\u4e00\u822c\u7591\u95ee\u53e5: She is watching TV -> Is she watching TV? They are swimming in the river -> Are they swimming in the river? \u53d8\u6210\u5426\u5b9a\u53e5 She is watching TV -> She isn't watching TV \u53d8\u6210\u7279\u6b8a\u7591\u95ee\u53e5 She is watching TV -> Who is watching TV? She is watching TV -> What is she doing? \u4e00\u822c\u5c06\u6765\u65f6 (\u73b0\u5728\u5bf9\u4e8e\u672a\u6765\u7684\u6253\u7b97) bo going to \u9884\u5148\u8ba1\u5212\u548c\u6253\u7b97\u8981\u505a\u7684\u4e8b \u4e3b + is/am/are + going to + \u540e\u9762\u63a5\u52a8\u8bcd\u539f\u884c / be going to be + (adj n prep)\u7b49 I am going to shopping this weekend He is going to sell the car \u53e3\u8bed\u4e2d be going to = be gonna","title":"\u65f6\u6001"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/note/#_18","text":"Don't + \u52a8\u8bcd\u5706\u5f62 Don't Speak Don't enter Don't kiss me Don't smoke","title":"\u7948\u4f7f\u53e5"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/note/#_19","text":"\u4eca\u5929\u7684\u5929\u6c14\u771f\u597d\u3002\u5929\u7a7a\u4e2d\u98d8\u7740\u51e0\u6735\u767d\u4e91\uff0c\u4f46\u662f\u9633\u5173\u707f\u70c2\u3002Lucy\u548c\u5979\u7684\u7537\u670b\u53cb\u5728\u4e00\u5757\u513f\u3002\u4ed6\u4eec\u6b63\u5728\u5f00\u8f66\u3002Lucy\u6b63\u5728\u770b\u4e00\u53ea\u6f02\u4eae\u7684\u5c0f\u9e1f\u3002\u5c0f\u9e1f\u6b63\u4ece\u5929\u4e0a\u98de\u8fc7\u3002 \u4e00\u4e9b\u4eba\u6b63\u4ece\u5929\u6865\u4e0a\u8d70\u8fc7\u3002\u4ed6\u4eec\u5f88\u5fd9\u3002 It is fine today\uff0cThere are some clouds in the sky, But the sun is shining. Lucy is with her boyfriend. They are driving. Lucy is looking at a beautiful bird. The bird is flying in the sky. Some people are walking over the brideg. They are busy It's vs its\u7684\u533a\u522b","title":"\u5199\u4f5c"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/note/#41-pennys-bag","text":"a loaf of a bar of a pound of tobacco cheese it's certaintly not for me! \u5f53\u7136\u4e0d\u4f1a\u662f\u7ed9\u4f60\u7684 What's in it? \u91cc\u9762\u662f\u4ec0\u4e48\u4e1c\u897f","title":"41 Penny's bag"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/note/#43-hurry-up","text":"electric up \u901a\u7535 teapot \u8336\u58f6 pot \u9505\u3001\u7f50\uff0c\u5bb9\u5668 flow pot \u82b1\u76c6 hot pot\u706b\u9505 boil \u6cb8\u817e\u5f00(\u4e0d\u53ca\u7269\u52a8\u8bcd) The kettle is boiling (\u6c34\u58f6\u5f00\u4e86\uff0c\u73b0\u5728\u8fdb\u884c\u65f6) boil \u716e(\u53ca\u7269\u4e1c\u897f\uff0c\u53ef\u4ee5\u63a5\u53cc\u5bbe\u8bed) Please boil me an egg Please boil an egg for me oil \u6cb9(\u6c7d\u6cb9\u3001\u98df\u7528\u6cb9) pil painting \u6cb9\u753b housewife -> housewives(\u590d\u6570) some(\u7528\u5728\u80af\u5b9a\u53e5) vs any(\u5426\u5b9a\u53e5) + \u53ef\u6570\u540d\u6b21\u590d\u6570\u6216\u4e0d\u53ef\u6570\u540d\u6b21\uff0c\u4e0d\u80fd\u63a5\u53ef\u6570\u540d\u6b21\u7684\u5355\u6570\u5f62\u5f0f any \u82e5\u5e72\u3001\u4efb\u4f55 Is there any(\u4efb\u4f55) beer in the bolle? -> No, there isn't any(\u4ee3\u8bcd) There are some books on the table? Are there any books on the table? There aren't any book on the table? \u5982\u679c\u662f\u4e00\u4e2a\u8868\u793a\u8bf7\u6c42\u3001\u5efa\u8bae\u3001\u53cd\u95ee\u7684\u7591\u95ee\u53e5\uff0c\u6216\u5e0c\u671b\u5f97\u5230\u5bf9\u65b9\u80af\u5b9a\u7b54\u6848\u624d\u63d0\u51fa\u7684\u7591\u95ee\u53e5\u53ef\u4ee5\u7528some Shall I have some coffee? What about some tea? Why don't we have some beer? Are these some students in the classroom? \u5728\u4e00\u4e2a\u8868\u793a\u90e8\u5206\u5426\u5b9a\u7684\u5426\u5b9a\u53e5\u4e2d\u53ef\u4ee5\u7528some Some of them are not Chinese over there \u5728\u90a3\u8fb9 hurry up \u8d76\u5feb => quickly get up \u8d77\u5e8a eat up \u5403\u5149\u3001\u5403\u5b8c speed up \u5feb\u4e00\u70b9 speak up \u5927\u70b9\u58f0(speak loudly) shut up \u95ed\u5634 wait up \u7b49\u4e00\u7b49 slow down \u6162\u70b9 calm down \u51b7\u9759 sit down \u5750\u4e0b put that down \u653e\u4e0b calm: adj. \u9759\u7684\uff0c\u5e73\u9759\u7684\uff1b\u6c89\u7740\u7684 vt. \u4f7f\u5e73\u9759\uff1b\u4f7f\u9547\u5b9a vi. \u5e73\u9759\u4e0b\u6765\uff1b\u9547\u5b9a\u4e0b\u6765 n. \u98ce\u5e73\u6d6a\u9759 in the front of vs in the front of in front of \u5728...\u4e4b\u524d(\u4e24\u4e2a\u76f8\u5bf9\u72ec\u7acb\u7684\u4e2a\u4f53\u4e4b\u95f4\u7684\u5173\u7cfb)\uff0cin the front of(\u4e00\u4e2a\u7269\u4f53\u7684\u524d\u7aef) \u60c5\u6001\u52a8\u8bcd: can(\u80fd\u529b\uff0c\u5141\u8bb8\u3001\u8bf7\u6c42\uff0c\u8981\u6c42)\u3001must\u3001\u5fc5\u987b\u653e\u5728\u52a8\u8bcd\u7684\u524d\u9762\u3001\u6b64\u65f6\u6539\u52a8\u8bcd\u5fc5\u987b\u91c7\u7528\u52a8\u8bcd\u539f\u578b He must go no We must study English She must be in the office \u8f6c\u53d8\u4e3a\u4e00\u822c\u7591\u95ee\u53e5\uff0c\u9700\u8981\u5c06\u60c5\u6001\u52a8\u8bcd\u653e\u5728\u5c45\u9996\u6216\u8005\u4e3b\u8bed\u524d\u9762 Must he go now? \u8f6c\u53d8\u4e3a\u5426\u5b9a\u53e5\uff0c\u5c06must\u53d8\u6210needn't\u3001mustn't \u8f6c\u53d8\u4e3a\u7279\u6b8a\u7591\u95ee\u53e5\uff0c\u9488\u5bf9\u4e3b\u8bed\u63d0\u95ee\uff0c\u5c31\u662f\u9009\u597d\u7591\u95ee\u8bcd\uff0c\u5269\u4e0b\u4e0d\u53d8\uff0c\u5426\u5219\u5c31\u9700\u8981\u5c06\u60c5\u6001\u52a8\u8bcd\u653e\u5728\u4e3b\u8bed\u524d\u9762\uff0c\u7136\u540e\u52a0\u7591\u95ee\u8bcd What must we do? She must be in the office 1. Must she be in the office? 2. She mustn't be in the office 3. Where must she be? \u82f1\u8bed\u4e2d\u4e60\u60ef\u4ee5\u7b2c\u4e00\u4eba\u79f0\u4e3a\u4e3b\u4f53\uff0c\u4e2d\u6587\u5219\u4e0d\u662f Can you bring me some water, please? -> Can I have some water, please? Can I have your name? Can I help you? Can I have your e-mail address? Can I use your bike? Can I have your order? Can I speak to Tom please? Can I have a look at your cell phone? Can you speak English(\u4f60\u4f1a\u82f1\u8bed\u5417\uff0c\u4fa7\u91cd\u8be2\u95ee\u5bf9\u65b9\u6709\u6ca1\u6709\u8fd9\u4e2a\u80fd\u529b\uff0c\u5177\u6709\u6311\u6218\u7684\u610f\u5473)? Do you speak English? \u66f4\u793c\u8c8c","title":"43 Hurry up"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/note/#45-the-bosss-letter","text":"wait a minute \u7b49\u4e00\u4f1a ask the way \u95ee\u8def his handwriteing is very nice \u4ed6\u7684\u5b57\u5199\u7684\u5f88\u597d lift \u4e3e\u8d77\u3001\u62ff\u8d77\u3001\u7535\u68af(\u76f4\u68af) Can you lift this heavy case? a minute \u4e00\u4f1a Can you come here a minute please? next door \u5728\u9694\u58c1 next-door \u9694\u58c1\u7684 adj She is next door \u5979\u5728\u9694\u58c1 There is a shcool next door to the park \u548c\u4ec0\u4e48\u76f8\u90bb next door to ... The next door girl is very beautiful \u653e\u5728\u540d\u8bcd\u7684\u524d\u9762\u505a\u4fee\u9970 \u60c5\u6001\u52a8\u8bcd \u8868\u793a\u60c5\u611f\u548c\u6001\u5ea6\u7684\u8bcd(can\u3001must\u3001may....) \u7528\u6cd5: +\u52a8\u8bcd\uff0c\u4e14\u539f\u578b \u6ca1\u6709\u5355\u590d\u6570\u548c\u4eba\u79f0\u4e4b\u5206 You must go out Can you please stand up? \u7591\u95ee\u53e5: can \u76f4\u63a5\u63d0\u524d\u53d8\u6210\u7591\u95ee\u53e5 Tom can swim well -> Can tom swim well \u5426\u5b9a\u53e5: can->can't\u3001cannot must->mustn't(\u7981\u6b62\uff0c\u8bed\u6c14\u6781\u7aef\u5f3a) may->may not don't need \u6ca1\u5fc5\u8981 \u8fde\u7cfb\u52a8\u8bcd \u5b9e\u4e49\u52a8\u8bcd \u52a9\u52a8\u8bcd","title":"45 The boss's letter"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/note/#47-a-cup-of-coffee","text":"dislike \u4e0d\u559c\u6b22 I dislike coffee very much like \u559c\u6b22(v)\u3001\u50cf(prep) You look like your father Like father, like son \u6709\u5176\u7236\u5fc5\u6709\u5176\u5b50 Love me, love my dog \u7231\u5c4b\u53ca\u5c4b butter \u9ec4\u6cb9 butterfly \u8774\u8776 bread and buttle \u996d\u7897\u3001\u751f\u8ba1 Teaching is my bread and buttle \u6559\u4e66\u662f\u6211\u7684\u996d\u7897 pure \u7eaf\u51c0\u7684 honey \u8702\u871c ripe \u6210\u719f\u7684 choice \u4e0a\u7b49\u7684\u3001\u7cbe\u9009\u7684 Do you like books? \u5e76\u4e0d\u662fDo you like book? \u80af\u5b9a\u53e5 \u5426\u5b9a\u53e5 \u4e00\u822c\u7591\u95ee\u53e5 \u7279\u6b8a\u7591\u95ee\u53e5 \u80af\u5b9a\u53e5 -> \u4e00\u822c\u7591\u95ee\u53e5 (\u9700\u8981\u5c06\u52a8\u8bcd(be\u52a8\u8bcd\u3001\u60c5\u6001\u52a8\u8bcd\uff0c\u5982\u679c\u540c\u65f6\u51fa\u73b0\uff0c\u5de6\u4fa7\u52a8\u8bcd\u63d0\u524d)\u653e\u5728\u4e3b\u8bed\u4e4b\u524d) He must be in the office -> Must he be in the office \u65e2\u6ca1\u6709be\u52a8\u8bcd\u3001\u4e5f\u6ca1\u6709\u60c5\u6001\u52a8\u8bcd\u3001\u4e5f\u6ca1\u6709\u52a9\u52a8\u8bcd\u7684\u65f6\u5019\u9700\u8981\u7528do(\u52a9\u52a8\u8bcd)\u6765\u8f85\u52a9\u5b8c\u6210\u8f6c\u6362\u4e3a\u7591\u95ee\u53e5 I like coffee -> Do you like coffee? I must do my homework \u8fd9\u91cc\u7684do\u662f\u505a\u7684\u610f\u4e49\uff0c\u4e0d\u662f\u52a9\u52a8\u8bcd \u80af\u5b9a\u53e5 -> \u5426\u5b9a\u53e5 (\u5426\u5b9a\u8bcdnot\u3001\u6709be\u52a8\u8bcd\u65f6\u653e\u5728\u5176\u540e\uff0c\u6709\u60c5\u6001\u52a8\u8bcd\u653e\u5728\u5176\u540e\uff0c\u52a9\u52a8\u8bcd\u653e\u5728\u5176\u540e\uff0c\u540c\u65f6\u51fa\u73b0\uff0c\u653e\u5728\u6700\u5de6\u4fa7\u52a8\u8bcd\u540e) He is a teacher -> He isn't a teacher He must go now -> He nneedn't go now He must be in the office -> He needn't be in the office \u6ca1\u6709be\u3001\u60c5\u6001\u3001\u52a9\u52a8\u8bcd\u7684\u65f6\u5019\uff0c\u9700\u8981\u5f15\u5165do\uff0c\u7136\u540enot\u653e\u5728\u540e\u9762 I like coffee -> I don't like coffee \u80af\u5b9a\u53e5 -> \u7279\u6b8a\u7591\u95ee\u53e5 (\u4e0d\u9488\u5bf9\u4e3b\u8bed\u63d0\u95ee\u7684\u65f6\u5019\uff0c\u9700\u8981\u628a\u52a8\u8bcd\u63d0\u5230\u4e3b\u8bed\u4e4b\u524d\uff0c\u542b\u6709be\u52a8\u8bcd\u5c31\u63d0\u524d\u3001\u60c5\u6001\u52a8\u8bcd\u63d0\u524d\u3001\u52a9\u52a8\u8bcd\u63d0\u524d\uff0c\u90fd\u6ca1\u6709\u7684\u60c5\u51b5\u4f7f\u7528do\u653e\u5728\u4e3b\u8bed\u524d) He is a teacher -> who is he? He must go now -> When must he go? I can swim -> What can you do?","title":"47 A cup of coffee"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/note/#49-at-the-butchers","text":"mutton \u7f8a\u8089 teak \u725b\u6392 a piece of steak pork tell sb.sth \u544a\u8bc9\u67d0\u4eba\u67d0\u4e8b I don't know either either vs too \u524d\u8005\u7528\u4e8e\u5426\u5b9a\u53e5\u3001\u540e\u8005\u7528\u5728\u80af\u5b9a\u53e5 at the butcher's at the doctor's at the hairdresser's Are you ....? vs Do you ...? Are you + \u975e\u52a8\u8bcd? Is she/he/it....? Do you + \u52a8\u8bcd? Does she/he/it....? Are you busy? Are you a techaer? Are you at home? Do you sleep well? Do you make the bed? Do you have breakfast? \u4e09\u5355: \u7b2c\u4e09\u4eba\u79f0\u5355\u6570(she\u3001he\u3001it\uff0c\u4eba\u7684\u540d\u5b57\u3001\u4eba\u7684\u79f0\u547c\u3001\u5355\u4e2a\u7269\u4f53\u3001\u4e0d\u53ef\u6570\u540d\u8bcd) \u793c\u8c8c\u56de\u590d: Yes please No, thank you \u4e00\u822c\u73b0\u5728\u65f6: 1. \u4f55\u65f6\u7528 \u7ecf\u5e38\u7684\u72b6\u6001 \u4e60\u60ef\u7684\u52a8\u4f5c \u771f\u7406(\u5ba2\u89c2\u4e8b\u5b9e) \u7ed3\u6784 \u7ecf\u5e38\u7684\u72b6\u6001 \u4e3b\u8bed + is/am/are \u4e60\u60ef\u7684\u52a8\u4f5c \u4e3b\u8bed + \u52a8\u8bcd \u771f\u7406 \u4e3b\u8bed + is/am/are or \u4e3b\u8bed + \u52a8\u8bcd They are very bad They often cheat in the exams They earth is round The sun rises in the east \u540e\u9762\u63a5\u7684\u52a8\u8bcd: * \u4e3b\u8bed\u4e3a\u975e\u4e09\u5355 + \u52a8\u8bcd\u539f\u578b * \u4e3b\u8bed\u4e3a\u4e09\u5355 + \u52a8\u8bcds\\es \u53d8\u7591\u95ee\u53e5: They drink beer every night Do they drink beer every night? He loves his girlfriend very much Does he love his girlfriend very much?","title":"49 At the butcher's"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/note/#51-a-pleasant-climate","text":"\u540d\u8bcd + y => \u5f62\u5bb9\u8bcd rain -> rainy cloud -> cloudy snow -> snowy luck -> lucky sun -> sunny What is the climate like? What is the weather like? What is your new boss like? How are you? How is the climate? Hos is the wealther? How is your new job? How is your English? in(\u5728...\u91cc\u9762\uff0c\u5728\u4e00\u4e2a\u8f83\u5927\u7684\u5730\u65b9) vs on(\u5728...\u4e0a\u9762\uff0c\u5728...\u65c1\u8fb9\uff0c\u9760\u8fd1) vs at(\u7528\u4e8e\u8f83\u5c0f\u4e14\u5177\u4f53\u7684\u5730\u70b9\u6216\u95e8\u724c\u53f7\u524d) \u548c\u65f6\u95f4\u642d\u914d 1. in \u901a\u5e38\u548c\u5927\u6bb5\u65f6\u95f4\uff0c in Jan\u3001in Feb\u3001in Mar\u3001in spring\u3001in summer\u3001in autumn\u3001in the monring(\u56fa\u5b9a\u642d\u914d) 2. on \u548c\u67d0\u4e00\u5929\u642d\u914d\uff0c on Monday 3. \u4e0e\u5206\u949f\u548c\u5c0f\u65f6\u642d\u914d at noon(\u56fa\u5b9a\u642d\u914d) at night(\u56fa\u5b9a\u642d\u914d) this\u5f00\u5934\u7684\u65f6\u95f4\u4e0d\u4f7f\u7528\u4ecb\u8bcd this moring\u3001this week last\u5f00\u5934\u7684\u65f6\u95f4\u4e0d\u4f7f\u7528\u4ecb\u8bcd last night\u3001last week\u3001last month next\u5f00\u5934\u7684\u65f6\u95f4\u4e0d\u4f7f\u7528\u4ecb\u8bcd next time\u3001next week \u526f\u8bcd: \u5728\u53e5\u5b50\u4e2d\u4e13\u95e8\u4fee\u9970\u3001\u5ffd\u60a0\u5f62\u5bb9\u8bcd\u3001\u52a8\u8bcd\u4ee5\u53ca\u5176\u4ed6\u526f\u8bcd(\u5f62\u5bb9\u8bcd\u3001\u52a8\u8bcd\u540e) I am very tired (\u4fee\u9970\u5f62\u5bb9\u8bcd) I like English best (\u4fee\u9970\u52a8\u8bcd) I work very hard (\u4fee\u9970\u526f\u8bcd) Beijing is my favorite city -> I like Beijing best Spring is my favorite city -> He likes spring best \u4fee\u9970\u52a8\u8bcd\u7684\u8bcd\u662f\u526f\u8bcd \u9891\u5ea6\u526f\u8bcd \u4e3b\u8981\u662f\u7528\u6765\u4fee\u9970\u52a8\u8bcd\u7684\uff0c\u653e\u5728\u52a8\u8bcd\u524d\u3001\u60c5\u6001\u52a8\u8bcd\u548cbe\u52a8\u8bcd\u540e\u3001sometimes\u4f8b\u5916\u90fd\u53ef\u4ee5\uff0c\u8fd8\u53ef\u4ee5\u653e\u5728\u5c45\u9996\u8868\u5f3a\u8c03 always (100%) usually (90%) often (60%) sometimes (30%) seldom (5%) never (0%)","title":"51 A pleasant climate"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/note/#53-an-interesting-climate","text":"mild food \u6e05\u6de1\u7684\u98df\u7269 East,west,home is beast \u91d1\u7a9d\u94f6\u7a9d\u4e0d\u5982\u81ea\u5df1\u7684\u8349\u7a9d wet \u6f6e\u6e7f water - wash - wine - wave - well - weep - woman The neights are short, and days are long","title":"53 An interesting climate"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/note/#55-the-sawyer-family","text":"supper \u665a\u9910 dinner \u6b63\u9910 Good evening \u665a\u4e0a\u597d Good night \u665a\u5b89 eventing dress \u665a\u793c\u670d arrive in Beijing(\u5927\u5730\u70b9) arrive at school (\u5c0f\u5730\u70b9) arrive at the airport (\u5c0f\u5730\u70b9) arrive at bus station(\u5c0f\u5730\u70b9) \u53ef\u6570\u540d\u8bcd\u590d\u6570 vs \u52a8\u8bcd\u4e09\u5355 +s books teachers dogs vs walks answers begs +es boes watches dishes vs passes washes teaches \u8f85\u97f3+y\uff0c\u53bby\u53d8i + es city cities\u3001lady\u3001ladies vs study\u3001studies\u3001try tryes the \u59d3\u540ds \u8868\u793a\u4e00\u5bb6\u4eba\uff0c\u7279\u6307\u592b\u5987\u4e24 I am going to work vs I go to work I usually finish my work at 5 Let's go shopping after work","title":"55 The Sawyer family"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/note/#57-an-unusual-day","text":"A: \u4e00\u822c\u73b0\u5728\u65f6 vs B: \u73b0\u5728\u8fdb\u884c\u65f6 \u4f7f\u7528\u60c5\u51b5\u4e0d\u540c \u4e00\u822c\u73b0\u5728\u65f6: \u4e60\u60ef\u7684\u72b6\u6001\u3001\u7ecf\u5e38\u7684\u52a8\u4f5c\u3001\u771f\u7406 \u73b0\u5728\u8fdb\u884c\u65f6: \u6b64\u65f6\u6b64\u523b\u6b63\u5728\u505a\uff0c\u4e00\u6bb5\u65f6\u95f4\u5185\u4e00\u76f4 \u7ed3\u6784\u4e0d\u540c \u4e00\u822c\u73b0\u5728: \u4e3b\u8bed + is\\am\\are, \u4e3b\u8bed + v. \u73b0\u5728\u8fdb\u884c\u65f6: \u4e3b\u8bed + is\\am\\are + doing \u65f6\u95f4\u72b6\u8bed\u4e0d\u540c \u4e00\u822c\u73b0\u5728: every...\u3001always, usually\uff0c often\uff0csometimes... \u73b0\u5728\u8fdb\u884c: now\u3001at the monment I usually have launch at 12:00. But I am having lauch now at 2:00","title":"57 An unusual day"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/note/#59-is-that-all","text":"Is that all? \u5c31\u8fd9\u4e9b\u5417? \u57fa\u6570\u8bcd teen \u5341\u51e0\u5c81\u3001\u9752\u5c11\u5e74 thirteen\u3001fourteen\u3001fifteen\u3001sixteen\u3001seventeen\u3001eighteen\u3001nighteen twenty twenty-one thirty thirty-one forty forty-one fifty fifty-one seventy seventy-one eighty eighty-one ninety hundred one hundred two hundred hundred and + \u5341/\u4e2a(999 -> nine hundred and ninety-nine) thousand one thousand two thousand thouand and + \u767e/\u5341\uff0f\u4e2a ten thousand \u4e00\u4e07 one million \u4e00\u767e\u4e07 millionaire \u767e\u4e07\u5bcc\u7fc1 \u5e8f\u6570\u8bcd first\u3001second\u3001third\u3001fourth\u3001fifth\u3001sixth\u3001seventh\u3001eighth\u3001ninth\u3001tenth\u3001eleventh\u3001twelfth thirteenth\u3001fourteenth\u3001fifteenth\u3001sizteenth\u3001.... twentieth \u7b2c\u4e8c\u5341","title":"59 Is that all?"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/note/#61-a-bad-cold","text":"tongue \u611f\u5b98\u52a8\u8bcd -> \u534a\u7cfb\u52a8\u8bcd(\u6709\u4e09\u5355\u590d\u6570\u3001\u8fc7\u53bb\u5f0f...\u548c\u5b9e\u4e49\u52a8\u8bcd\u6709\u76f8\u540c\u7684\u6027\u8d28\uff0c\u7528\u5f62\u5bb9\u8bcd\u4fee\u9970\uff0c\u5b9e\u4e49\u52a8\u8bcd\u7528\u526f\u8bcd\u4fee\u9970) taste feel sound smell look listen in bed \u751f\u75c5\u5367\u5e8a in the bed \u8eba\u5728\u5e8a\u4e0a \u6253\u7535\u8bdd\u7ed9\u67d0\u4eba: call sb phonse sb give sb a call give sb a phone headcache \u5934\u75bc earache \u8033\u6735\u75bc backache \u80cc\u75bc flu \u6d41\u884c\u6027\u611f\u5192 temperature \u6e29\u5ea6 medicine \u836f measles \u9ebb\u75b9","title":"61 A bad cold"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/note/#63-thank-you-doctor","text":"certainly \u5f53\u7136 remain \u7ee7\u7eed\u3001\u4fdd\u6301 yet \u8fd8\u3001\u4ecd come upstairs \u4e0a\u697c or go upstairs rich \u6cb9\u817b\u7684 have(has) \u62e5\u6709 \u5403\u559d \u60a3\u3001\u751f\u3001\u5f97\u3001\u6709 have + a + \u540d(\u52a8\u4f5c\uff0c\u884c\u4e3a) \u4ece\u4e8b\u8fdb\u884c... (have a rest\u3001have a talk) \u7ecf\u5386 have a party\u3001have a class \u60c5be\u540e\u5b9a\u8bcd\u524d\u3001\u53e5\u9996\u53e5\u5c3e\u8868\u5f3a\u8c03","title":"63 Thank you, doctor"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/note/#64-dont-you-mustnt","text":"match \u706b\u67f4 so \u5982\u6b64\u5730 lean out of \u8eab\u4f53\u63a2\u51fa lean \u503e\u659c\u3001\u4f9d\u9760\u3001\u503e\u5411 noise \u55a7\u95f9\u58f0 play with matches \u73a9\u706b\u67f4 make a noise \u53d1\u51fa\u54cd\u58f0 \u52a8\u8bcd\u7684\u5f62\u5f0f: \u52a8\u8bcd\u539f\u578b walk \u7b2c\u4e09\u4eba\u79f0\u5355\u6570 walks \u73b0\u5728\u5206\u8bcd walking \u7948\u4f7f\u53e5\u4e2d\u7684\u52a8\u8bcd\u8981\u7528\u539f\u578b Don't drop it be going to + \u52a8\u8bcd\u539f\u578b \u4e00\u822c\u5c06\u6765\u65f6 \u60c5\u6001\u52a8\u8bcd\u540e\u63a5\u52a8\u8bcd\u539f\u578b","title":"64 Don't ...! You mustn't ...!"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/note/#65-not-a-baby","text":"\u53cd\u8eab\u4ee3\u8bcd\u7684\u76ee\u7684\u662f\u5f3a\u8c03\u4e3b\u8bed\uff0c\u4ee3\u8bcd\u662f\u7528\u6765\u4ee3\u66ff\u4e3b\u8bed\u7684\u8bcd He himself sent me a gift(\u5f3a\u8c03\u662f\u4ed6\u4eb2\u81ea\u9001\u7ed9\u6211\u7684\u793c\u7269) \u4ecb\u8bcd + \u53cd\u8eab\u4ee3\u8bcd the key to the front door \u524d\u95e8\u94a5\u5319 enjoy\u540e\u9762\u5f80\u5f80\u63a5\u4e00\u4e2a\u53cd\u8eab\u4ee3\u8bcd by oneself \u72ec\u81ea learn sth by himself \u81ea\u5b66 help oneself \u968f\u610f enjoy oneself \u73a9\u7684\u5f00\u5fc3 must/can + be + \u975e\u52a8\u8bcd He can be here for a long time They must be here at 9:00 \u53cd\u8eab\u4ee3\u8bcd: \u5355\u6570: myself\u3001yourself\u3001(himself\u3001herself\u3001itself) \u590d\u6570: ourselves\u3001yourselves\u3001themselves","title":"65 Not a baby"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/note/#66-whats-the-time","text":"7:30 half past seven half to eight 4:20 four twenty twenty past four 10:15 ten fifteen 10:15 fifteen past ten a quarter past ten 2:45 three quarter past two 2:55 two fifty-five five to three fifty-five past two 7:30 seven thirty thirty past seven half past seven half to eight two quarters past seven","title":"66 What's the time?"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/note/#67-the-weekend","text":"\u4e3b\u8bed + \u52a8\u8bcd(\u65f6\u6001) + \u5176\u4ed6\u6210\u4efd \u4e3b\u8bed + am/is/are + \u52a8\u8bcding \u73b0\u5728\u8fdb\u884c\u65f6 \u4e3b\u8bed + am/is/are + going to + \u52a8\u8bcd\u539f\u578b \u4e00\u822c\u5c06\u6765\u65f6 \u4e3b\u8bed + was/was/were + \u52a8\u8bcd\u8fc7\u53bb\u5f0f \u4e00\u822c\u8fc7\u53bb\u65f6 \u52a8\u8bcd\u7684\u8fc7\u53bb\u5f0f\u5f62\u5f0f\uff0c\u5206\u4e3a\u4e24\u5927\u7c7b\uff1a \u89c4\u5219\u52a8\u8bcd \u52a8\u8bcd => ed walk -> walked stay -> stayed rain -> rained \u4e0d\u53d1\u97f3\u7684\u52a8\u8bcde\u7ed3\u5c3e => d arrive -> arrived move -> moved smoke -> smoked \u8f85\u97f3\u7ed3\u5c3e => i + ed study -> studied try -> tryied cry ->cryied \u8f85\u97f3 + 1\u5143\u97f3(\u91cd\u5ea6\u97f3\u8282) + \u8f85\u97f3() => \u53cc\u5199\u8f85\u97f3 + ed open(\u91cd\u97f3\u5728o\uff0c\u4e0d\u5728e) -> opened stop -> stopped slip -> slipped regret -> regretted \u4e0d\u89c4\u5219\u52a8\u8bcd go -> went say -> siad read -> read put -> put make -> made see -> saw \u8fc7\u53bb\u5f0f\u7684\u53d1\u97f3\u95ee\u9898: \u6e05\u8f85\u97f3(\u58f0\u5e26\u4e0d\u9707\u52a8) + ed /t/ walk -> walked watch -> watched help -> helped \u6d4a\u8f85\u97f3 & \u5143\u97f3 + ed /d/ open -> opened play -> played /t/ & /d/ + ed /id/ want -> wanted need -> needed aren't you lucky! => \u5426\u5b9a\u7591\u95ee\u53e5\u5f62\u5f0f\u7684\u611f\u53f9\u53e5\uff0c\u4e3a\u7684\u662f\u52a0\u5f3a\u8bed\u6c14\uff0c\u8868\u793a\u5f3a\u6709\u529b\u7684\u80af\u5b9a \u4f60\u4eec\u771f\u5e78\u8fd0 absent from \u7f3a\u5e2d absent from school absent from work How are you all keeping? => How are you? for the weekend \u662f\u6307\u5468\u672b\u8fd9\u51e0\u5929\u7684\u65f6\u95f4\u3001at the weekend\u662f\u5f3a\u8c03\u65f6\u95f4\u7684\u67d0\u4e00\u70b9\u3002","title":"67  The weekend"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/note/#69-the-car-race","text":"hundreds of ....\u6570\u4ee5\u767e\u8ba1\u7684.... the year of the snake It is the year of the snake and it was the year of the dragon on the way to school(\u540d\u8bcd\u9700\u8981\u4ecb\u8bcd\u6765\u8fde\u63a5) on the way home(\u526f\u8bcd\uff0c\u76f4\u63a5\u4fee\u9970) by the way No way stationer \u6587\u5177\u5546 in the race \u53c2\u52a0\u6bd4\u8d5b at the race \u89c2\u770b\u6bd4\u8d5b \u6570\u5b57\u5728\u540e\u9762 Line 10 Room 61 Platform 19 five other(\u901a\u5e38\u76f4\u63a5\u63a5\u540d\u8bcd) cars \u5176\u4ed6\u4e94\u8f86\u8f66 My wife and I(\u81ea\u5df1\u653e\u5728\u540e\u9762) were at the race at vs on vs in at + \u70b9 on + \u5929 in + \u6708\u3001\u5b63\u3001\u5e74 There be \u53e5\u578b\u7684\u8fc7\u53bb\u5f0f There be + (was, were) + \u5730\u70b9 \u7591\u95ee\u53e5\u5c06 was/were\u63d0\u5230\u6700\u524d\u9762 \u5206\u7c7b: 1. There was + \u5355\u6570\u540d\u8bcd 2. There were + \u590d\u6570\u540d\u8bcd \u6709 \u62e5\u6709 have \u5b58\u5728 there be","title":"69 The car race"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/note/#71-hes-awful","text":"awful \u8ba9\u4eba\u8ba8\u538c\u7684\u3001\u574f\u7684 once\u3001twice\u3001three times (\u4e00\u6b21\u3001\u4e8c\u6b21\u3001\u4e09\u6b21....) says(\u4e09\u5355) \u53d1\u97f3\u662f /sez/ very nice to see you again say \u5f3a\u8c03\u8bf4\u8bdd\u7684\u5185\u5bb9 speak \u7a81\u51fa\u8bf4\u8bdd\u7684\u65b9\u5f0f\u6216\u52a8\u4f5c\u672c\u8eab speak loudly\u3001speak slowly\u3001speak English she said sorry to me The day before yeasterday \u524d\u5929 The night after next at six o'clock yesterday eventing (\u5c0f\u65f6\u95f4\u5728\u524d) He was in the office Was he in the office? \u4e00\u822c\u7591\u95ee\u53e5\uff0cbe\u52a8\u8bcd\u63d0\u524d\u5373\u53ef He wasn't in the office \u5426\u5b9a\u8bcd Where was he? \u4e0d\u662f\u9488\u5bf9\u4e3b\u8bed\u63d0\u95ee\u7684\uff0c\u52a8\u8bcd\u63d0\u524d \u7279\u6b8a\u7591\u95ee\u53e5 Who was in the office \u9488\u5bf9\u4e3b\u8bed\u63d0\u95ee\uff0c\u52a8\u8bcd\u4e0d\u63d0\u524d \u7279\u6b8a\u7591\u95ee\u53e5 There was a car race in our town in 1998 Was there a car race in our town in 1998? There wasn't a car race in our town in 1998 What was there in our town in 1998? He went to school yesterday Did he go to school yesterday (Do\u4f1a\u5c06\u539f\u5148\u7684\u52a8\u8bcd\u8bed\u6cd5\u6210\u5206\u5438\u6536\u8fc7\u6765) He did't go to shcool yesterday When did he go to shcool? Where did he go yesterday? What did he do yesterday? Who went to school yesterday? He likes coffee? -> Does he like coffee? \u60c5\u6001\u52a8\u8bcd\u6ca1\u6709\u6570\u548c\u4eba\u79f0\u7684\u53d8\u5316","title":"71 He's awful"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/note/#73-the-way-to-king-street","text":"suddently bus stop a green hand \u65b0\u624b hurriedly \u5306\u5fd9\u5730 thirstily \u53e3\u6e34\u5730 greet \u95ee\u5019\uff0c\u6253\u62db\u547c greet to sb \u5411\u67d0\u4eba\u6253\u62db\u547c smile(\u5fae\u7b11) vs laugh(\u5927\u7b11) He said and smiled She is telling me a story with a smile They are talking and laughing speak vs say say \u5f3a\u8c03\u8bf4\u8bdd\u7684\u5185\u5bb9 speak \u7a81\u51fa\u8bf4\u8bdd\u7684\u65b9\u5f0f\u6216\u52a8\u4f5c\u672c\u8eab \u8fc7\u53bb\u5f0f go to -> went to lose her way -> lost her way see -> saw say -> said smile -> smiled do not -> did not speak -> spoke is -> was put -> put take -> took open -> opened find -> found read -> read she does not know ... very well He does not know Beijing very well I know xxx very well take out \u62ff\u51fa take sth out of \u4ece...\u62ff\u51fa\u6765 I do not speak English I cannot speak English \u526f\u8bcd\u53d8\u5316: \u4e00\u822c\u76f4\u63a5 + ly quickly \u8f85 + y\u7ed3\u5c3e -> \u53d8y\u4e3ai + ly lazy->lazily, happy->happily \u4ee5ll\u7ed3\u5c3e\uff0c\u76f4\u63a5+y fully \u8f85\u97f3 + le\uff0ce\u53d8\u4e3ay : able->ably\uff0csingle->singly \u5143\u97f3 + e\u7ed3\u5c3e \uff0c\u53bbe + ly : true->truly ly\u7ed3\u5c3e\uff0c\u4e0d\u662f\u526f\u8bcd\uff0c\u662f\u5f62\u5bb9\u8bcd lovely \u53ef\u7231\u7684 deadly \u6551\u547d\u7684 friendly \u53cb\u597d\u7684 \u53e5\u5b50\u7ec4\u7ec7\u7684\u4e94\u4e2a\u6b65\u9aa4: \u8c01\u3001\u5e72\u4e86\u4ec0\u4e48\u3001\u5982\u4f55\u5e72\u7684\u3001\u5728\u54ea\u5e72\u7684\u3001\u4f55\u65f6\u5e72\u7684 \u4ed6\u6bcf\u5929\u5f00\u5fc3\u5730\u5728\u5bb6\u7b49\u5979 He waits for he happily at home every day \u6211\u7a81\u7136\u5728\u6559\u5ba4\u53d1\u73b0\u4e00\u4e2a\u4e0d\u8ba4\u8bc6\u7684\u4eba I find a stranger suddenly in the classroom \u4ed6\u4e0a\u5468\u5306\u5fd9\u5730\u79bb\u5f00 He left hurriedly last week \u6211\u6628\u5929\u5fd9\u788c\u5730\u5728\u5546\u573a\u4e70\u4e86\u5f88\u591a\u978b I bought many shoes busily in the mall yesterday","title":"73 The way to King Street"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/note/#75-uncomfortable-shoes","text":"ago \u4ee5\u524d\uff0c\u5e38\u548c\u8fc7\u53bb\u5f0f\u642d\u914d pair a pair of scissors \u526a\u5200 trousers \u88e4\u5b50 fashion out of fashion \u8fc7\u65f6 in fashion now \u7559\u884c uncomfortable untidy unhappy unwell wear \u7a7f\u7740 (\u5f3a\u8c03\u72b6\u6001) put on \u7a7f\u4e0a (\u5f3a\u8c03\u52a8\u4f5c) \u7b2c\u4e09\u4eba\u79f0\u5355\u6570\u3001\u53c8\u79f0\u4e00\u822c\u73b0\u5728\u65f6\u4e09\u5355\uff0c\u4ec5\u5728\u4e00\u822c\u73b0\u5728\u65f6\u6709\u6548\uff0c\u8fc7\u53bb\u5f0f\u6ca1\u6709\u4e09\u5355\u7684\u6982\u5ff5 She put the book in the bag yesterday put \u662f\u8fc7\u53bb\u5f0f(yesterday)\u3001\u6240\u6709\u4e0d\u7528\u5199\u6210puts\u3001 \u60c5\u6001\u52a8\u8bcd\u540e\u9762\u63a5\u52a8\u8bcd\u539f\u578b She drinks some tea every day They drink some tea every day He can drink some coffee He drank a cup of coffee yesterday \u4ecb\u8bcd + \u540d\u8bcd/\u4ee3\u8bcd -> \u4ecb\u8bcd\u77ed\u8bed\uff0c\u901a\u5e38\u4f5c\u4e3a\u5730\u70b9\u72b6\u8bed\u3001\u5b9a\u8bed(\u5bf9\u4eba\u548c\u4e8b\u7269\u8fdb\u884c\u9650\u5b9a\u548c\u63cf\u8ff0) \u4f5c\u4e3a\u5b9a\u8bed\u65f6\u8981\u653e\u5728\u4fee\u9970\u7684\u8bcd\u4e4b\u540e \u540d\u8bcd\u6240\u6709\u683c\u5c31\u662f\u5b9a\u8bed Mary's room Tom's bike of our village on the table in the room in our town A friend in need is a friend indeed \u5728\u9700\u8981\u7684\u65f6\u5019\u51fa\u73b0\u7684\u670b\u53cb\uff0c\u624d\u771f\u7684\u662f\u670b\u53cb","title":"75 Uncomfortable shoes"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/note/#77-terrible-toothache","text":"appointment \u7ea6\u4f1a\u3001\u9884\u7ea6 urgent \u7d27\u6025\u7684\u3001\u7d27\u8feb\u7684 urgent to do \u5426\u5b9a\u7591\u95ee\u53e5: \u4e00\u822c\u7591\u95ee\u53e5\u7684\u95ee\u8bcd + not\u7684\u7f29\u7565\u5f0f Are you ok? -> Aren't you ok? Do you know that? -> Don't you know that? Can you wait? -> Can't you wait? \u4f55\u65f6\u7528? \u8868\u8fbe\u5f3a\u8c03 Aren't you lucky! \u8868\u8fbe\u60c5\u7eea Don't you love me? \u7ec4\u7ec7\u6b65\u9aa4: \u4e00\u822c\u7591\u95ee\u53e5(\u5148\u770b\u8bcd\u6027 + \u518d\u770b\u4eba\u79f0) + not \u96be\u9053\u5979\u4e0d\u6f02\u4eae(\u5f62\u5bb9\u8bcd\uff0c\u9700\u8981\u4f7f\u7528\u7cfb\u52a8\u8bcd)\u5417\uff1f Is she beautiful? Isn't she beautiful? \u96be\u9053\u5979(\u7b2c\u4e09\u4eba\u79f0\u5355\u6570\uff0c\u4e09\u5355\u5f62\u5f0f)\u6ca1\u6709(\u52a8\u8bcd\uff0c\u9700\u8981\u4f7f\u7528\u52a9\u52a8\u8bcdDo)\u7537\u670b\u53cb\u5417? Does she have a boyfriend? Doesn't she have a boyfriend? \u96be\u9053\u4f60\u6628\u5929\u6ca1\u53bb\u7ea6\u4f1a(\u52a8\u8bcd)\u5417? Did you have a date yesterday? Didn't you have a date yesterday? \u96be\u9053\u4f60\u5c31\u4e0d\u80fd(\u60c5\u6001\u52a8\u8bcd)\u6e29\u67d4\u4e00\u70b9\u5417? Can you be tender? Can't you be tender?","title":"77 Terrible toothache"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/note/#79-carols-shopping-list","text":"make \u5236\u9020 \u5236\u4f5c make a film \u4ea7\u751f\u3001\u5f15\u8d77 make a noise \u5199 \u6323 have got\u3001has got (\u56fa\u5b9a\u7ed3\u6784\uff0c\u82f1\u5f0f\u82f1\u8bed) \u62e5\u6709 == have or has (\u7f8e\u5f0f\u82f1\u8bed) He has got a new bike => He's got a new bike has\u4e5f\u7f29\u5199\u6210 He's\u4e86 many vs much vs a lot of many \u4e3b\u8981\u7528\u4e8e\u7591\u95ee\u53e5\u548c\u5426\u5b9a\u53e5\u4e2d\u3001\u653e\u5728\u53ef\u6570\u540d\u8bcd\u524d much \u7528\u4e8e\u7591\u95ee\u53e5\u548c\u5426\u5b9a\u53e5\u4e2d\uff0c\u653e\u5728\u4e0d\u53ef\u6570\u540d\u8bcd\u524d a lot of \u8bb8\u591a\uff0c\u7528\u5728\u80af\u5b9a\u53e5\u4e2d\uff0c\u65e2\u53ef\u7528\u4e8e\u4e0d\u53ef\u6570\u540d\u8bcd\uff0c\u4e5f\u53ef\u4ee5\u7528\u4e8e\u53ef\u6570\u540d\u8bcd I have got a new bike (have \u89c6\u4e3a\u52a9\u52a8\u8bcd\uff0c\u7f8e\u5f0f\u82f1\u8bed\u4e2d\u7684have\u4e0d\u80fd\u89c6\u4e3a\u52a9\u52a8\u8bcd) Have i got a new bike?\u3001 Yes I have I haven't got a new bike What have you got? \u8fc7\u53bb\u65f6\u6001\u4e0b\uff0c\u4e00\u822c\u53ea\u7528had\u3001\u4e0d\u7528got\uff0c\u65e0\u8bba\u82f1\u5f0f\u82f1\u8bed\u8fd8\u662f\u7f8e\u5f0f\u82f1\u8bed \u7528not\u6216no\u6784\u6210\u7684\u5426\u5b9a\u53e5\u4e2d\uff0c\u8981\u7528or\u8fde\u63a5\u5bf9\u7b49\u7684\u8bcd \u90e8\u5206\u5426\u5b9a (much\u548cmany \u5728\u5426\u5b9a\u53e5\u4e2d\u8868\u793a\u90e8\u5206\u5426\u5b9a)\uff0c\u5b8c\u5168\u5426\u5b9a(any\uff0c\u65e0\u8bba\u53ef\u6570\u8fd8\u662f\u4e0d\u53ef\u6570) \u6211\u4eec\u7684\u725b\u5976\u4e0d\u591a We haven't got much milk \u4ed6\u4eec\u7684\u82f9\u679c\u4e0d\u591a\u4e86 They don't haven many apple \u5979\u7684\u5de7\u514b\u529b\u4e0d\u591a\u4e86 She hasn't got much chocolate \u4ed6\u7684\u9e21\u86cb\u4e0d\u591a\u4e86 He hasn't got many eggs","title":"79 Carol's shopping list"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/note/#81-roast-beef-and-patatoes","text":"Sam's here sam\u6765\u4e86\uff0c\u8868\u793axxx\u6765\u4e86 Have a cigarette \u62bd\u6839\u70df I nearly die Then no \u90a3\u5c31\u7b97\u4e86\u5427 breakfast\u65e9\u9910\u3001lunch\u5348\u9910\u3001dinner\u665a\u9910\u3001\u6b63\u9910 roast \u70e4\u7684\u3001roast duck\u70e4\u9e2d have a haircut \u53bb\u7406\u53d1 dinner party \u5bb4\u4f1a holiday(\u82f1\u5f0f)\u3001vocation(\u7f8e\u5f0f) biscuit \u5c0f\u70b9\u5fc3\u3001\u997c\u5e72 have: 1. \u5b9e\u4e49\u52a8\u8bcd has\u3001had * \u62e5\u6709 I have a close friend in Beijing * \u751f\u75c5 * \u5403\u3001\u559d\u3001\u73a9\u3001\u4e50\u3001\u505a \u6d17\u6fa1(have a bath)\u3001have a swim\u3001have a haircut\u3001have a party 2. \u73b0\u5728\u5b8c\u6210\u5f0f(\u4e3b\u8bed + have(has) + done)\uff0c\u65e0\u610f\u4e49\uff0c\u53ea\u80fd\u7528\u6765\u505a\u73b0\u5728\u5b8c\u6210\u65f6","title":"81 Roast beef and patatoes"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/note/#83-going-to-holidy","text":"mess \u6742\u4e71\u3001\u51cc\u4e71 untidy suitcase \u624b\u63d0\u7bb1 \u73b0\u5728\u5b8c\u6210\u65f6: \u4e3b\u8bed + have/has + \u52a8\u8bcd\u7684\u8fc7\u53bb\u5206\u8bcd + \u5176\u4ed6\u6210\u5206 \u8868\u793a\u5728\u8fc7\u53bb\u4e0d\u786e\u5b9a\u7684\u65f6\u95f4\u91cc\u53d1\u751f\u7684\uff0c\u5e76\u4e0e\u73b0\u5728\u6709\u7740\u67d0\u79cd\u8054\u7cfb\u7684\u52a8\u4f5c \u8868\u793a\u5f00\u59cb\u4e0e\u8fc7\u53bb\u5e76\u6301\u7eed\u5230\u73b0\u5728\u7684\u52a8\u4f5c I have(\u52a9\u52a8\u8bcd) finished my work Have you finished my work? Yes I have\u3001No, I haven't I haven't finished my work What have you finished? Who has finished the work? \u52a8\u8bcd\u539f\u578b -> \u8fc7\u53bb\u5206\u8bcd: \u4e0d\u89c4\u5219\u52a8\u8bcd: go\u3001went\u3001gone read\u3001read\u3001read put\u3001put\u3001put is been \u89c4\u5219\u52a8\u8bcd: \u548c\u5982\u4f55\u53d8\u6210\u8fc7\u53bb\u5f0f\u4e00\u81f4 * \u52a8\u8bcd + ed worked * \u52a8\u8bcd + d arrived * \u8f85\u97f3 + ied -> study studied * \u8f85\u97f3 + 1\u5143\u97f3 + 1\u8f85\u97f3 \u8bf4\u8bdd\u4eba\u4e3b\u89c2\u4e0a\u5f3a\u8c03\u8fc7\u53bb\u7684\u52a8\u4f5c\u6216\u72b6\u6001\u7684\u5ef6\u7eed\u6027\uff0c\u5176\u6301\u7eed\u5230\u73b0\u5728 \u6211\u5b66\u8fc7\u82f1\u8bed \u4e00\u822c\u8fc7\u53bb\u5f0f \u6211\u5b66\u82f1\u8bed\u5341\u5e74\u4e86\u3002 \u73b0\u5728\u5b8c\u6210\u65f6 \u8a00\u4e4b\u8fc7\u53bb\u3001\u610f\u5728\u5f53\u4e0b \u8981\u4e0d\u8981\u548c\u6211\u4eec\u4e00\u8d77\u5403\u665a\u996d? \u4e0d\u3001\u8c22\u8c22\uff0c\u6211\u5df2\u7ecf\u5403\u8fc7\u4e86\uff0c\u73b0\u5728 \u5177\u4f53\u7684\u3001\u8868\u8fc7\u53bb\u7684\u65f6\u95f4\u72b6\u8bed\u5f80\u5f80\u4e0d\u80fd\u7528\u5728\u73b0\u5728\u5b8c\u6210\u65f6\u7684\u53e5\u5b50 yesterday the day before yesterday ago at 4:00/6:30... .....","title":"83 Going to holidy"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/note/#85-paris-in-the-spring","text":"cinema \u7535\u5f71\u9662 just now \u521a\u521a(\u4e00\u822c\u8fc7\u53bb) just (\u73b0\u5728\u5b8c\u6210\u65f6) \u5939\u7740\uff0c\u5728\u82f1\u6587\u4e2d\u8868\u793a\u7684\u662f\u4ecb\u8bcd\uff0c\u5e76\u4e0d\u662f\u52a8\u8bcd\uff0c\u7528between\u8868\u793a have been to ... \u5230\u8fc7... He has been there \u5230\u8fc7\u90a3\u91cc What's on? \u4e0a\u6f14\u4e86\u4ec0\u4e48\u7535\u5f71 \u4e3b\u8bed + have/has + been + \u975e\u52a8\u8bcd been to \u53bb\u8fc7 gone to \u53bb\u4e86 \u526f\u8bcd\u53ef\u4ee5\u76f4\u63a5\u8ddf\u5728\u52a8\u8bcd\u540e\u9762\u4fee\u9970\u52a8\u8bcd\uff0c\u540d\u8bcd\u5219\u9700\u8981\u96c6\u5408\u4ecb\u8bcd\u6765\u4fee\u9970\u52a8\u8bcd Have you ever been there(\u5730\u70b9\u526f\u8bcd\uff0c\u53ef\u4ee5\u76f4\u63a5\u4fee\u9970\u52a8\u8bcdthere)? Have you just been to the cinema \u6f02\u4eae: 1. nice 2. smart 3. lovely 4. good-looking 5. gorgeous never: \u4e00\u822c\u73b0\u5728\u65f6 He never(\u5b9e\u4e49\u52a8\u8bcd\u524d) gets up early She is never(\u7cfb\u52a8\u8bcd\u540e) late \u5b9e\u524d\u7cfb\u540e \u73b0\u5728\u5b8c\u6210\u65f6 I have never left \u6211\u4ece\u672a\u79bb\u5f00 I have never... \u73b0\u5728\u5b8c\u6210\u7684\u5426\u5b9a\u5f62\u5f0f \u4e00\u4e9b\u77ed\u8bed\u4e2d Never give up! Never fear! Never mind! \u5b8c\u5168\u6ca1\u5173\u7cfb ever: \u7b49\u540c\u4e8ealways Honesty ever pays \u8bda\u5b9e\u6c38\u8fdc\u6709\u56de\u62a5 \u4e00\u822c\u8fc7\u53bb(\u7591\u95ee\u53e5\u4e2d) Did you ever see such a man? \u73b0\u5728\u5b8c\u6210(\u7591\u95ee\u53e5\u4e2d) Have you ever....? \u53e3\u8bed\u4e2d Don't ever do it! = Never do it! \u4e00\u822c\u8fc7\u53bb\u65f6 vs \u73b0\u5728\u5b8c\u6210\u65f6 \u7ed3\u6784 \u73b0\u5728\u5b8c\u6210: \u4e3b\u8bed + have/has + done \u4e00\u822c\u8fc7\u53bb: \u4e3b\u8bed + was/were/did \u7528\u6cd5 \u73b0\u5728\u5b8c\u6210: \u8fc7\u53bb\u53d1\u751f\u3001\u5f71\u54cd\u73b0\u5728 \u4e00\u822c\u8fc7\u53bb: \u8fc7\u53bb\u53d1\u751f\u3001\u4e0e\u73b0\u5728\u65e0\u5173 \u65f6\u95f4\u72b6\u8bed \u73b0\u5728\u5b8c\u6210\u65f6: just\u3001already\u3001before\u3001never\u3001ever\u3001yet \u4e00\u822c\u8fc7\u5f0f: yesterday\u3001last..\u3001...ago\u3001just now \u53e3\u8bed\u529f\u80fd \u73b0\u5728\u5b8c\u6210\u65f6: \u5f15\u8d77\u8bdd\u9898 \u4e00\u822c\u8fc7\u53bb: \u5177\u4f53\u8c08\u8bba Have you ever...?","title":"85 Paris in the spring"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/note/#87-a-car-crash","text":"yet: \u526f\u8bcd\u3001\u7591\u95ee\u53e5\u5c3e\u8868\u793a \"\u5df2\u7ecf\"\u3001\u5426\u5b9a\u53e5\u5c3e\u8868\u793a \"\u8fd8\" Example: Is my car ready yet? \u6211\u7684\u8f66\u5df2\u7ecf\u51c6\u5907\u597d\u4e86\u5417? yet vs already Has he arrived already? Have you read this book already? licence plate number \u8f66\u724c\u53f7 attendant \u63a5\u5f85\u5458 lamp \u706f post \u90ae\u653f\u3001\u67f1\u3001\u6746","title":"87 A car crash"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/note/#89","text":"I believe that this house is for sale May I have a look at it, please? I've lived here for twenty years I have been here since 1976 How much does this house cose? It's worth every penny of it Women always have the last word have the last word \u8bf4\u4e86\u7b97 believe \u76f8\u4fe1\u3001\u8ba4\u4e3a think feel \u611f\u89c9\u3001\u8ba4\u4e3a hold \u63e1\u4f4f\u3001\u575a\u6301\u8ba4\u4e3a consider \u8003\u8651\u3001\u8ba4\u4e3a \u8f6e\u6362\u4e0d\u540c\u7684\u8bcd\u6765\u5199\u4f5c\uff0c\u800c\u4e0d\u662f\u4ece\u5934\u5230\u5c3e\u5c31\u4e00\u4e2a\u8bcd\u3002 I think ..... I also believe I still feel ... Do you consider so? May I ...? How long \u591a\u4e45 since \u81ea\u4ece 1. since + \u65f6\u95f4\u70b9 She has been in Beijing since 2004 2. since + n She hasn't been out since the accident sale \u5356(\u540d\u8bcd) big sale because: 1. because + of + n 2. because + \u53e5\u5b50","title":"89"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class1/sentence/","text":"What about....? Where's sb? What's he/she/it doing? Is this your....? what make is it? what's your favorite....? What are you going to do with that/those .....? let me see if I understand As you can see \u5982\u4f60\u6240\u89c1 As we did with function template \u5c31\u50cf\u6211\u4eec\u5bf9\u51fd\u6570\u6a21\u7248\u505a\u7684\u90a3\u6837","title":"Sentence"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class2/kk/","text":"\u97f3\u6807","title":"Kk"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class2/note/","text":"Lesson1 A private conversation conversation \u540d\u8bcd\u3001\u8c08\u8bdd \u6211\u4eec\u8c08\u8bdd\u4e86\uff0c\u8fd9\u91cc\u7684\u8c08\u8bdd\u662f\u4e00\u6b21\u52a8\u4f5c\uff0c\u4f46\u662fconversation\u662f\u540d\u8bcd\uff0c\u4e0d\u80fd\u662fwe conversation\uff0c\u9700\u8981\u6709\u4e00\u4e2a\u52a8\u8bcd\u6765\u642d\u914d\u4fee\u9970\u4e0b \u53ef\u4ee5\u6539\u6210\u6211\u4eec\u6709\u4e86\u4e00\u6b21\u8c08\u8bdd\uff0cwe have a conversation \u7c7b\u4f3c\u7684\u5355\u8bcd\u8fd8\u6709decision\uff0c\u4e5f\u662f\u4e00\u4e2a\u540d\u8bcd\uff0c\u6211\u4eec\u505a\u4e86\u4e00\u4e2a\u51b3\u5b9a\uff0c\u4e0d\u80fd\u7528we decision\uff0c\u800c\u662f\u8981\u642d\u914d\u4e00\u4e2a\u52a8\u8bcd\uff0cwe make a decision th-\u7684\u53d1\u97f3 [\u03b8] \u548c [\u00f0] sink think\u7684\u53d1\u97f3\u4e0d\u540c angry \u751f\u6c14\u7684 \u5f62\u5bb9\u8bcd(\u4fee\u9970\u540d\u8bcd) the angry boy angrily \u751f\u6c14\u5730 \u526f\u8bcd(\u4fee\u9970\u52a8\u8bcd\u548c\u53e5\u5b50) the angry boy shouted angrily \u5f62\u5bb9\u8bcd\u540e\u9762\u52a0ly\u8868\u793a\u526f\u8bcd\uff0c\u7ed3\u5c3e\u662fy\u7684\u5316\u53d8\u6210i pay attention to sb/sth attract/catch/draw one's attatention \u5438\u5f15\u67d0\u4eba\u7684\u6ce8\u610f\u529b draw in fresh air \u8bf7\u6ce8\u610f->\u6211\u53ef\u4ee5\u62e5\u6709\u4f60\u7684\u6ce8\u610f\u529b\u5417? May I have your attention, please? Attention, please. bear/stand \u5bb9\u5fcd bear it \u8fde\u8bfb\uff0c\u7701\u53bbi\u7684\u8bfb\u97f3 \u53e5\u5b50: 1. \u6309\u7167\u7ed3\u6784\u5212\u5206 * \u7b80\u5355\u53e5 * \u5e76\u5217\u53e5 * \u590d\u5408\u53e5 \u6309\u7167\u7528\u9014\u5212\u5206 \u9648\u8ff0\u53e5 \u7591\u95ee\u53e5 \u7948\u4f7f\u53e5 \u611f\u53f9\u53e5 \u7b80\u5355\u53e5\u6784\u6210(\u6838\u5fc3\u5c31\u662f\u4e00\u4e3b\uff0c\u4e00\u8c13): * \u540d\u8bcd + \u52a8\u8bcd n + v => Birds fly(vi \u4e0d\u53ca\u7269\u52a8\u8bcd) * \u540d\u8bcd + \u52a8\u8bcd n + vt + n => I(\u4ee3\u8bcd\u3001\u4ee3\u66ff\u540d\u8bcd) love you \u4e3b\u8c13\u5bbe * \u4e3b + \u8c13 + \u5bbe + \u5bbe * \u4e3b + \u8c13 + \u5bbe + \u8865\u8bed * \u4e3b + \u7cfb + \u8868 \u52a8\u8bcd\u5982\u679c\u76f4\u63a5\u52a0\u4e86\u4ecb\u8bcd\uff0c\u5f80\u5f80\u8868\u793a\u8fd9\u4e2a\u52a8\u8bcd\u662f\u4e0d\u53ca\u7269\u52a8\u8bcd you ask me a questionn. \u4e3b\u8c13\u53cc\u5bbe I found HongGang beautiful. \u4e3b\u8c13\u5bbe\u8865 I very(\u526f\u8bcd) happy(\u5f62\u5bb9\u8bcd) \u7f3a\u5c11\u8c13\u8bed\u52a8\u8bcd\u3002I am very happy be \u52a8\u8bcd\u662f\u7cfb\u52a8\u8bcd\uff0c\u7528\u4e8e\u8054\u7cfb\u524d\u540e\u53e5\u5b50\uff0c\u6ca1\u6709\u5b9e\u610f \u7cfb\u52a8\u8bcd(\u9700\u8981\u7528\u5f62\u5bb9\u8bcd\u6765\u4fee\u9970): * be\u52a8\u8bcd (\u5355\u72ec\u51fa\u73b0) \u5f53\u548c\u5176\u4ed6\u52a8\u8bcd\u4e00\u8d77\u51fa\u73b0\u7684\u65f6\u5019\u662f\u52a9\u52a8\u8bcd I am(\u52a9\u52a8\u8bcd) studying english * get become turn go grow \"\u53d8\u5f97\" * look sound smell taste fell \u770b\u8d77\u6765/\u542c\u8d77\u6765/\u95fb\u8d77\u6765/\u54c1\u5c1d\u8d77\u6765/\u611f\u89c9\u8d77\u6765 \u628a\u4e00\u4e2a\u7b80\u5355\u53e5\u53d8\u590d\u6742\u7684\u51e0\u79cd\u65b9\u5f0f: Birds fly birds will fly birds will not fly Little(\u5f62\u5bb9\u8bcd\u4fee\u9970\u540d\u8bcd) birds fly happily (\u526f\u8bcd\u4fee\u9970\u52a8\u8bcd) In autumn birds fly in the sky (\u901a\u8fc7\u4ecb\u8bcd\u6765\u8868\u793a\u65f6\u95f4\u548c\u5730\u70b9) In autumn Little birds will fly happily in the sky \u6700\u540e: * in the end * at last * finally * eventually none of ... \u4ec0\u4e48\u4ec0\u4e48\u90fd\u4e0d\uff0c\u90fd\u6ca1\u6709 neither of ... \u610f\u4e49\u540c\u4e0a\uff0c\u4f46\u662f\u8868\u793a\u7684\u6570\u91cf\u8303\u56f4\u4e3a2 \u65f6\u95f4\u72b6\u8bed\u4fee\u9970\u53e5\u5b50\u53ef\u4ee5\u653e\u5728\u5c45\u9996\u3001\u53e5\u5c3e\u3001\u5c45\u4e2d Lesson2 Breakfast or lunch until prep \u540e\u9762\u63a5\u540d\u8bcd \u76f4\u5230....\u4e3a\u6b62 not .... until \u76f4\u5230....\u624d outside \u5728\u5916\u9762\u7684(adj)\uff0c\u5728...\u7684\u5916\u9762(\u4ecb\u8bcd) \u5916\u9762\u5916\u90e8(n) \u5728\u5916\u9762(adv) outside world outside the downtown area He seems gentle on the outside Please wait outsizde ring \u6253\u7535\u8bdd(v)\u3001\u6253\u7535\u8bdd\u6212\u6307(\u540d\u8bcd) repeat \u91cd\u590d(v) Would you please repeat it? Pardon? It was .... \u8868\u793a\u65f6\u95f4: It's 10 o'clock in the morning \u8868\u793a\u5929\u6c14: on \u8868\u793a\u5728\u67d0\u4e00\u5929 on Sunday on Monday Sundays \u590d\u6570\u8868\u793a\u7ecf\u5e38\u6027\u884c\u4e3a look out of \u671d..\u5916\u770b look out of the door look out \u5c0f\u5fc3\uff1b\u6ce8\u610f I looked out of ... They are hardworking young men. What + adj + n(\u4e0d\u53ef\u6570\u540d\u8bcd) + \u4e3b + \u8c13 + ! \u611f\u53f9\u53e5 What hardworking young men they are! We are enjoying delicious bread. What decision bread we are enjoying! How + adj/adv + \u4e3b + \u8c13 + ! The movies is amazing. How amazing the movie is! He works hard How hard he works! ring -> rang \u8fc7\u53bb\u65f6 ring -> ringing \u73b0\u5728\u8fdb\u884c\u65f6 by train by bike by air by car \u542b\u6709\u65f6\u95f4\u72b6\u8bed\u7684\u65f6\u5019\uff0c\u9700\u8981\u7528\u4e00\u822c\u73b0\u5728\u65f6 late\u672c\u8eab\u5c31\u662f\u526f\u8bcd\uff0clately\u662f\u6700\u8fd1\u7684\u610f\u601d Lesson 3 Please send me a card send send a letter send a message send me a card send a card to me send sth to sb send for doctor postcard post + card post office postcode postman postbox plat cards a credit card spoil: \u4f7f\u7d22\u7136\u65e0\u5473\uff0c\u635f\u574f\u3001\u5ba0\u574f\u3001\u6eba\u7231\u3001\u98df\u7269\u8150\u70c2\u3001\u7cbe\u795e\u4e0a\u7684\u635f\u574f spoiled spoilt \u8fc7\u53bb\u65f6 learn learned lerant dream dreamed dreamt Put the food in the fridge, or it will spoil soon He is arrival, spoil my holidays Postcards always spoil my holidays \u4e1c\u897f\u771f\u7684\u574f\u4e86: damage : \u53ef\u4ee5\u4fee\u590d\u7684\u635f\u574f destory : \u5f7b\u5e95\u65e0\u6cd5\u4fee\u590d\u7684\u635f\u574f\uff0c\u5927\u89c4\u6a21\u7684\uff0c ruin : \u957f\u65f6\u95f4\u7684\u3001\u4e00\u70b9\u70b9\u7684\uff0c\u5f7b\u5e95\u65e0\u6cd5\u4fee\u590d\u7684\u635f\u574f\uff0c\u6ef4\u6c34\u7a7f\u77f3 public: \u516c\u4f17\u3001\u5927\u4f17 The museum is open to the public on Sundays lend \u501f\u7ed9\u3001borrow \u501f\u5165 lend sb sth = lend sth to sb lend me a book = lend a book to me Can you lend me 200 Yuan? borrow sth(from sb) decision \u540d\u8bcd \u51b3\u5b9a It was my final decision Make a decision decide \u52a8\u8bcd \u51b3\u5b9a decide to do sth whole milk The whole thing makes me sick \u4e00\u822c\u8fc7\u53bb\u65f6: \u8c13\u8bed\u52a8\u8bcd \u53d8\u6210 \u8fc7\u53bb\u5f0f \u5b8c\u5168\u53d1\u751f\u5728\u8fc7\u53bb\u548c\u73b0\u5728\u65e0\u5173 She had a boyfriend Tom was a student You were happy you were not happy Where you happy? They had a meeting They did not have a meeting Did they hava a meeting? \u5bf9\u52a8\u4f5c\u7684\u52a8\u8bcd\u8fdb\u884c\u5426\u5b9a\u8981\u7528do/does/did not\uff0c\u5bf9be\u52a8\u8bcd\u548c\u5b8c\u6210\u65f6\u7684\u52a9\u8bcd(have/has/had)\u8fdb\u884c\u5426\u5b9a\u540e\u9762\u76f4\u63a5\u52a0not \u6709\u52a8\u8bcd\u7684\u60c5\u51b5\uff0c\u76f4\u63a5\u52a0not\uff0c\u6ca1\u6709\u52a8\u8bcd\u7684\uff0c\u6dfb\u52a0did\u52a9\u52a8\u8bcd \u8fc7\u53bb\u5f0f \u8fc7\u53bb\u5206\u8bcd looked looked taught taught went gone wrote written \u8fc7\u53bb\u5f0f \u53ea\u6709\u4e00\u4e2a\u7528\u9014\u5c31\u662f \u4e00\u822c\u8fc7\u53bb\u65f6 \u8fc7\u53bb\u5206\u8bcd \u5b8c\u6210\u65f6\u3001\u88ab\u52a8\u8bed\u6001\u3001\u975e\u8c13\u8bed\u52a8\u8bcd I have gone to Italy (\u5b8c\u6210\u65f6) I went go Italy (\u8fc7\u53bb\u65f6) \u4e3b\u8c13\u53cc\u5bbe \u540c\u65f6\u53ef\u4ee5\u52a0\u4eba\u548c\u7269\u7684\u52a8\u8bcd\uff0c\u53ef\u4ee5\u63a5\u53cc\u5bbe\u8bed\uff0c\u4e5f\u53ef\u4ee5\u53ea\u63a5\u4e00\u4e2a\u5bbe\u8bed to \u65b9\u5411\u3001for \u4e3a\u4e86 She gave me a book She geva a book to me I cooked him a meal I cooked a meal for him read \u7684\u8fc7\u53bb\u5f0f\u3001\u8fc7\u53bb\u5206\u8bcd\u90fd\u662fread\uff0c\u53d1\u97f3\u4e0d\u592a\u4e00\u6837 every day(\u53e5\u5b50) / everyday(\u5f62\u5bb9\u8bcd) everyday use \u6bcf\u65e5\u4f7f\u7528\uff0c\u5f62\u5bb9\u8bcd\u4fee\u9970\u540d\u8bcd get got(\u8fc7\u53bb\u5f0f) got/gotten (\u8fc7\u53bb\u5206\u8bcd) get up early/late stay up late \u71ac\u591c spent\u7684\u4e3b\u8bed\u5fc5\u987b\u662f\u4eba\uff0c\u53ef\u4ee5\u8868\u793a\u82b1\u65f6\u95f4\u548c\u91d1\u94b1 spend time/money + on sth/in doing sth Lesson 4 An exciting trip exciting adj \u4ee4\u4eba\u5e78\u798f\u7684 excite adj \u5174\u594b\u7684\u3001\u6fc0\u52a8\u7684 the excit children They are all excited(\u8fc7\u53bb\u5206\u8bcd\u3001\u88ab\u52a8\u8bed\u6001) by the news firm n \u5546\u884c\u3001\u516c\u53f8 different adj \u4e0d\u540c\u7684 They have different ideas The twin brothers are so different from each other center n \u4e2d\u5fc3 trade center shopping center in the center of \u5728...\u4e2d\u5fc3 abroad adv \u5728\u56fd\u5916 go aborad travel abroad study abroad live abroad receive an email from my professor I'd like you to meet my friend, james(\u540c\u4f4d\u8bed) \u540c\u4f4d\u8bed\uff0c\u5bf9\u524d\u4e00\u4e2a\u540d\u8bcd\u8d77\u5230\u89e3\u91ca\u8bf4\u660e before \u5b8c\u6210\u65f6\u6001 Sue hasn't heard of such a thing before never \u5b8c\u6210\u65f6\u6001 Sue has never heard of such a thing just \u4e00\u822c\u4e5f\u662f\u9700\u8981\u642d\u914d\u73b0\u5728\u5b8c\u6210\u65f6 for + \u65f6\u95f4\u6bb5 \u4e00\u822c\u9700\u8981\u7ed3\u5408\u73b0\u5728\u5b8c\u6210\u65f6 has been He has been in London for ten years. sine + \u65f6\u95f4\u70b9 \u4e00\u822c\u9700\u8981\u7ed3\u5408\u73b0\u5728\u5b8c\u6210\u65f6 I haven't met him since Monday already \u4e5f\u8868\u793a\u8981\u548c\u73b0\u5728\u5b8c\u6210\u65f6\u6001 I've already seen that film (\u80af\u5b9a\u53e5) Jane hasn't read that novel yet (\u5426\u5b9a\u53e5) \u5728\u4e00\u5bb6\u516c\u53f8\u5de5\u4f5c: wrok for work in work at a number of + \u53ef\u6570\u540d\u8bcd\u590d\u6570\u5f62\u5f0f have gone to \u5df2\u7ecf\u53bb\u4e86\u67d0\u5730(\u6216\u8005\u5728\u8def\u9014\u4e2d) have been to \u66fe\u7ecf\u53bb\u8fc7\u67d0\u5730(\u73b0\u5728\u4e0d\u5728\u4e86) have been in/at \u5df2\u5728\u67d0\u5730\u5f85\u4e86\u4e86\u5f88\u4e45\u4e86 He is finding this trip very exciting(\u5bbe\u8bed\u8865\u8db3\u8bed) \u5bbe\u8bed\u548c\u5bbe\u8bed\u8865\u8db3\u8bed\u6dfb\u52a0be\u52a8\u8bcd\u53ef\u4ee5\u6784\u6210\u53e5\u5b50 This trip is very exciting","title":"Note"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class2/note/#lesson1-a-private-conversation","text":"conversation \u540d\u8bcd\u3001\u8c08\u8bdd \u6211\u4eec\u8c08\u8bdd\u4e86\uff0c\u8fd9\u91cc\u7684\u8c08\u8bdd\u662f\u4e00\u6b21\u52a8\u4f5c\uff0c\u4f46\u662fconversation\u662f\u540d\u8bcd\uff0c\u4e0d\u80fd\u662fwe conversation\uff0c\u9700\u8981\u6709\u4e00\u4e2a\u52a8\u8bcd\u6765\u642d\u914d\u4fee\u9970\u4e0b \u53ef\u4ee5\u6539\u6210\u6211\u4eec\u6709\u4e86\u4e00\u6b21\u8c08\u8bdd\uff0cwe have a conversation \u7c7b\u4f3c\u7684\u5355\u8bcd\u8fd8\u6709decision\uff0c\u4e5f\u662f\u4e00\u4e2a\u540d\u8bcd\uff0c\u6211\u4eec\u505a\u4e86\u4e00\u4e2a\u51b3\u5b9a\uff0c\u4e0d\u80fd\u7528we decision\uff0c\u800c\u662f\u8981\u642d\u914d\u4e00\u4e2a\u52a8\u8bcd\uff0cwe make a decision th-\u7684\u53d1\u97f3 [\u03b8] \u548c [\u00f0] sink think\u7684\u53d1\u97f3\u4e0d\u540c angry \u751f\u6c14\u7684 \u5f62\u5bb9\u8bcd(\u4fee\u9970\u540d\u8bcd) the angry boy angrily \u751f\u6c14\u5730 \u526f\u8bcd(\u4fee\u9970\u52a8\u8bcd\u548c\u53e5\u5b50) the angry boy shouted angrily \u5f62\u5bb9\u8bcd\u540e\u9762\u52a0ly\u8868\u793a\u526f\u8bcd\uff0c\u7ed3\u5c3e\u662fy\u7684\u5316\u53d8\u6210i pay attention to sb/sth attract/catch/draw one's attatention \u5438\u5f15\u67d0\u4eba\u7684\u6ce8\u610f\u529b draw in fresh air \u8bf7\u6ce8\u610f->\u6211\u53ef\u4ee5\u62e5\u6709\u4f60\u7684\u6ce8\u610f\u529b\u5417? May I have your attention, please? Attention, please. bear/stand \u5bb9\u5fcd bear it \u8fde\u8bfb\uff0c\u7701\u53bbi\u7684\u8bfb\u97f3 \u53e5\u5b50: 1. \u6309\u7167\u7ed3\u6784\u5212\u5206 * \u7b80\u5355\u53e5 * \u5e76\u5217\u53e5 * \u590d\u5408\u53e5 \u6309\u7167\u7528\u9014\u5212\u5206 \u9648\u8ff0\u53e5 \u7591\u95ee\u53e5 \u7948\u4f7f\u53e5 \u611f\u53f9\u53e5 \u7b80\u5355\u53e5\u6784\u6210(\u6838\u5fc3\u5c31\u662f\u4e00\u4e3b\uff0c\u4e00\u8c13): * \u540d\u8bcd + \u52a8\u8bcd n + v => Birds fly(vi \u4e0d\u53ca\u7269\u52a8\u8bcd) * \u540d\u8bcd + \u52a8\u8bcd n + vt + n => I(\u4ee3\u8bcd\u3001\u4ee3\u66ff\u540d\u8bcd) love you \u4e3b\u8c13\u5bbe * \u4e3b + \u8c13 + \u5bbe + \u5bbe * \u4e3b + \u8c13 + \u5bbe + \u8865\u8bed * \u4e3b + \u7cfb + \u8868 \u52a8\u8bcd\u5982\u679c\u76f4\u63a5\u52a0\u4e86\u4ecb\u8bcd\uff0c\u5f80\u5f80\u8868\u793a\u8fd9\u4e2a\u52a8\u8bcd\u662f\u4e0d\u53ca\u7269\u52a8\u8bcd you ask me a questionn. \u4e3b\u8c13\u53cc\u5bbe I found HongGang beautiful. \u4e3b\u8c13\u5bbe\u8865 I very(\u526f\u8bcd) happy(\u5f62\u5bb9\u8bcd) \u7f3a\u5c11\u8c13\u8bed\u52a8\u8bcd\u3002I am very happy be \u52a8\u8bcd\u662f\u7cfb\u52a8\u8bcd\uff0c\u7528\u4e8e\u8054\u7cfb\u524d\u540e\u53e5\u5b50\uff0c\u6ca1\u6709\u5b9e\u610f \u7cfb\u52a8\u8bcd(\u9700\u8981\u7528\u5f62\u5bb9\u8bcd\u6765\u4fee\u9970): * be\u52a8\u8bcd (\u5355\u72ec\u51fa\u73b0) \u5f53\u548c\u5176\u4ed6\u52a8\u8bcd\u4e00\u8d77\u51fa\u73b0\u7684\u65f6\u5019\u662f\u52a9\u52a8\u8bcd I am(\u52a9\u52a8\u8bcd) studying english * get become turn go grow \"\u53d8\u5f97\" * look sound smell taste fell \u770b\u8d77\u6765/\u542c\u8d77\u6765/\u95fb\u8d77\u6765/\u54c1\u5c1d\u8d77\u6765/\u611f\u89c9\u8d77\u6765 \u628a\u4e00\u4e2a\u7b80\u5355\u53e5\u53d8\u590d\u6742\u7684\u51e0\u79cd\u65b9\u5f0f: Birds fly birds will fly birds will not fly Little(\u5f62\u5bb9\u8bcd\u4fee\u9970\u540d\u8bcd) birds fly happily (\u526f\u8bcd\u4fee\u9970\u52a8\u8bcd) In autumn birds fly in the sky (\u901a\u8fc7\u4ecb\u8bcd\u6765\u8868\u793a\u65f6\u95f4\u548c\u5730\u70b9) In autumn Little birds will fly happily in the sky \u6700\u540e: * in the end * at last * finally * eventually none of ... \u4ec0\u4e48\u4ec0\u4e48\u90fd\u4e0d\uff0c\u90fd\u6ca1\u6709 neither of ... \u610f\u4e49\u540c\u4e0a\uff0c\u4f46\u662f\u8868\u793a\u7684\u6570\u91cf\u8303\u56f4\u4e3a2 \u65f6\u95f4\u72b6\u8bed\u4fee\u9970\u53e5\u5b50\u53ef\u4ee5\u653e\u5728\u5c45\u9996\u3001\u53e5\u5c3e\u3001\u5c45\u4e2d","title":"Lesson1 A private conversation"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class2/note/#lesson2-breakfast-or-lunch","text":"until prep \u540e\u9762\u63a5\u540d\u8bcd \u76f4\u5230....\u4e3a\u6b62 not .... until \u76f4\u5230....\u624d outside \u5728\u5916\u9762\u7684(adj)\uff0c\u5728...\u7684\u5916\u9762(\u4ecb\u8bcd) \u5916\u9762\u5916\u90e8(n) \u5728\u5916\u9762(adv) outside world outside the downtown area He seems gentle on the outside Please wait outsizde ring \u6253\u7535\u8bdd(v)\u3001\u6253\u7535\u8bdd\u6212\u6307(\u540d\u8bcd) repeat \u91cd\u590d(v) Would you please repeat it? Pardon? It was .... \u8868\u793a\u65f6\u95f4: It's 10 o'clock in the morning \u8868\u793a\u5929\u6c14: on \u8868\u793a\u5728\u67d0\u4e00\u5929 on Sunday on Monday Sundays \u590d\u6570\u8868\u793a\u7ecf\u5e38\u6027\u884c\u4e3a look out of \u671d..\u5916\u770b look out of the door look out \u5c0f\u5fc3\uff1b\u6ce8\u610f I looked out of ... They are hardworking young men. What + adj + n(\u4e0d\u53ef\u6570\u540d\u8bcd) + \u4e3b + \u8c13 + ! \u611f\u53f9\u53e5 What hardworking young men they are! We are enjoying delicious bread. What decision bread we are enjoying! How + adj/adv + \u4e3b + \u8c13 + ! The movies is amazing. How amazing the movie is! He works hard How hard he works! ring -> rang \u8fc7\u53bb\u65f6 ring -> ringing \u73b0\u5728\u8fdb\u884c\u65f6 by train by bike by air by car \u542b\u6709\u65f6\u95f4\u72b6\u8bed\u7684\u65f6\u5019\uff0c\u9700\u8981\u7528\u4e00\u822c\u73b0\u5728\u65f6 late\u672c\u8eab\u5c31\u662f\u526f\u8bcd\uff0clately\u662f\u6700\u8fd1\u7684\u610f\u601d","title":"Lesson2 Breakfast or lunch"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class2/note/#lesson-3-please-send-me-a-card","text":"send send a letter send a message send me a card send a card to me send sth to sb send for doctor postcard post + card post office postcode postman postbox plat cards a credit card spoil: \u4f7f\u7d22\u7136\u65e0\u5473\uff0c\u635f\u574f\u3001\u5ba0\u574f\u3001\u6eba\u7231\u3001\u98df\u7269\u8150\u70c2\u3001\u7cbe\u795e\u4e0a\u7684\u635f\u574f spoiled spoilt \u8fc7\u53bb\u65f6 learn learned lerant dream dreamed dreamt Put the food in the fridge, or it will spoil soon He is arrival, spoil my holidays Postcards always spoil my holidays \u4e1c\u897f\u771f\u7684\u574f\u4e86: damage : \u53ef\u4ee5\u4fee\u590d\u7684\u635f\u574f destory : \u5f7b\u5e95\u65e0\u6cd5\u4fee\u590d\u7684\u635f\u574f\uff0c\u5927\u89c4\u6a21\u7684\uff0c ruin : \u957f\u65f6\u95f4\u7684\u3001\u4e00\u70b9\u70b9\u7684\uff0c\u5f7b\u5e95\u65e0\u6cd5\u4fee\u590d\u7684\u635f\u574f\uff0c\u6ef4\u6c34\u7a7f\u77f3 public: \u516c\u4f17\u3001\u5927\u4f17 The museum is open to the public on Sundays lend \u501f\u7ed9\u3001borrow \u501f\u5165 lend sb sth = lend sth to sb lend me a book = lend a book to me Can you lend me 200 Yuan? borrow sth(from sb) decision \u540d\u8bcd \u51b3\u5b9a It was my final decision Make a decision decide \u52a8\u8bcd \u51b3\u5b9a decide to do sth whole milk The whole thing makes me sick \u4e00\u822c\u8fc7\u53bb\u65f6: \u8c13\u8bed\u52a8\u8bcd \u53d8\u6210 \u8fc7\u53bb\u5f0f \u5b8c\u5168\u53d1\u751f\u5728\u8fc7\u53bb\u548c\u73b0\u5728\u65e0\u5173 She had a boyfriend Tom was a student You were happy you were not happy Where you happy? They had a meeting They did not have a meeting Did they hava a meeting? \u5bf9\u52a8\u4f5c\u7684\u52a8\u8bcd\u8fdb\u884c\u5426\u5b9a\u8981\u7528do/does/did not\uff0c\u5bf9be\u52a8\u8bcd\u548c\u5b8c\u6210\u65f6\u7684\u52a9\u8bcd(have/has/had)\u8fdb\u884c\u5426\u5b9a\u540e\u9762\u76f4\u63a5\u52a0not \u6709\u52a8\u8bcd\u7684\u60c5\u51b5\uff0c\u76f4\u63a5\u52a0not\uff0c\u6ca1\u6709\u52a8\u8bcd\u7684\uff0c\u6dfb\u52a0did\u52a9\u52a8\u8bcd \u8fc7\u53bb\u5f0f \u8fc7\u53bb\u5206\u8bcd looked looked taught taught went gone wrote written \u8fc7\u53bb\u5f0f \u53ea\u6709\u4e00\u4e2a\u7528\u9014\u5c31\u662f \u4e00\u822c\u8fc7\u53bb\u65f6 \u8fc7\u53bb\u5206\u8bcd \u5b8c\u6210\u65f6\u3001\u88ab\u52a8\u8bed\u6001\u3001\u975e\u8c13\u8bed\u52a8\u8bcd I have gone to Italy (\u5b8c\u6210\u65f6) I went go Italy (\u8fc7\u53bb\u65f6) \u4e3b\u8c13\u53cc\u5bbe \u540c\u65f6\u53ef\u4ee5\u52a0\u4eba\u548c\u7269\u7684\u52a8\u8bcd\uff0c\u53ef\u4ee5\u63a5\u53cc\u5bbe\u8bed\uff0c\u4e5f\u53ef\u4ee5\u53ea\u63a5\u4e00\u4e2a\u5bbe\u8bed to \u65b9\u5411\u3001for \u4e3a\u4e86 She gave me a book She geva a book to me I cooked him a meal I cooked a meal for him read \u7684\u8fc7\u53bb\u5f0f\u3001\u8fc7\u53bb\u5206\u8bcd\u90fd\u662fread\uff0c\u53d1\u97f3\u4e0d\u592a\u4e00\u6837 every day(\u53e5\u5b50) / everyday(\u5f62\u5bb9\u8bcd) everyday use \u6bcf\u65e5\u4f7f\u7528\uff0c\u5f62\u5bb9\u8bcd\u4fee\u9970\u540d\u8bcd get got(\u8fc7\u53bb\u5f0f) got/gotten (\u8fc7\u53bb\u5206\u8bcd) get up early/late stay up late \u71ac\u591c spent\u7684\u4e3b\u8bed\u5fc5\u987b\u662f\u4eba\uff0c\u53ef\u4ee5\u8868\u793a\u82b1\u65f6\u95f4\u548c\u91d1\u94b1 spend time/money + on sth/in doing sth","title":"Lesson 3 Please send me a card"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class2/note/#lesson-4-an-exciting-trip","text":"exciting adj \u4ee4\u4eba\u5e78\u798f\u7684 excite adj \u5174\u594b\u7684\u3001\u6fc0\u52a8\u7684 the excit children They are all excited(\u8fc7\u53bb\u5206\u8bcd\u3001\u88ab\u52a8\u8bed\u6001) by the news firm n \u5546\u884c\u3001\u516c\u53f8 different adj \u4e0d\u540c\u7684 They have different ideas The twin brothers are so different from each other center n \u4e2d\u5fc3 trade center shopping center in the center of \u5728...\u4e2d\u5fc3 abroad adv \u5728\u56fd\u5916 go aborad travel abroad study abroad live abroad receive an email from my professor I'd like you to meet my friend, james(\u540c\u4f4d\u8bed) \u540c\u4f4d\u8bed\uff0c\u5bf9\u524d\u4e00\u4e2a\u540d\u8bcd\u8d77\u5230\u89e3\u91ca\u8bf4\u660e before \u5b8c\u6210\u65f6\u6001 Sue hasn't heard of such a thing before never \u5b8c\u6210\u65f6\u6001 Sue has never heard of such a thing just \u4e00\u822c\u4e5f\u662f\u9700\u8981\u642d\u914d\u73b0\u5728\u5b8c\u6210\u65f6 for + \u65f6\u95f4\u6bb5 \u4e00\u822c\u9700\u8981\u7ed3\u5408\u73b0\u5728\u5b8c\u6210\u65f6 has been He has been in London for ten years. sine + \u65f6\u95f4\u70b9 \u4e00\u822c\u9700\u8981\u7ed3\u5408\u73b0\u5728\u5b8c\u6210\u65f6 I haven't met him since Monday already \u4e5f\u8868\u793a\u8981\u548c\u73b0\u5728\u5b8c\u6210\u65f6\u6001 I've already seen that film (\u80af\u5b9a\u53e5) Jane hasn't read that novel yet (\u5426\u5b9a\u53e5) \u5728\u4e00\u5bb6\u516c\u53f8\u5de5\u4f5c: wrok for work in work at a number of + \u53ef\u6570\u540d\u8bcd\u590d\u6570\u5f62\u5f0f have gone to \u5df2\u7ecf\u53bb\u4e86\u67d0\u5730(\u6216\u8005\u5728\u8def\u9014\u4e2d) have been to \u66fe\u7ecf\u53bb\u8fc7\u67d0\u5730(\u73b0\u5728\u4e0d\u5728\u4e86) have been in/at \u5df2\u5728\u67d0\u5730\u5f85\u4e86\u4e86\u5f88\u4e45\u4e86 He is finding this trip very exciting(\u5bbe\u8bed\u8865\u8db3\u8bed) \u5bbe\u8bed\u548c\u5bbe\u8bed\u8865\u8db3\u8bed\u6dfb\u52a0be\u52a8\u8bcd\u53ef\u4ee5\u6784\u6210\u53e5\u5b50 This trip is very exciting","title":"Lesson 4 An exciting trip"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/class2/sentence/","text":"It's none of your business It has nothing to do with you","title":"Sentence"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/hearing/","text":"Meeting at the Airport Hi, where are you?\uff0cI don't see you anywhere? I'am on the subway I'am finally arrivey where are you now? Ok, see you soon","title":"Index"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/hearing/#meeting-at-the-airport","text":"Hi, where are you?\uff0cI don't see you anywhere? I'am on the subway I'am finally arrivey where are you now? Ok, see you soon","title":"Meeting at the Airport"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/open-lan/","text":"what is ... like? ....\u662f\u4ec0\u4e48\u6837\u7684? What's the job like? What about the city? What are the best place to visit? Do you have + n ? / Do you have any + n(\u590d\u6570)? be up to \u4ece\u4e8b\u4e8e\u3001\u5fd9\u4e8e What are you up to this weekend? be going to + \u5730\u70b9\uff0c \u5373\u5c06\u53bb\u7684\u67d0\u5730 have a good time \u5ea6\u8fc7\u4e86\u6109\u5feb\u7684\u65f6\u95f4 \u975e\u5e38\u5730\u9053\u7684\u53e3\u8bed\u8868\u8fbe\u65b9\u5f0f(\u518d\u89c1) catch you later/see you later clear up \u4f7f...\u6e05\u695a Thanks for clearing that up you lost me would you mind + doing \u8bf7\u95ee\u4f60\u613f\u610f\u505axx\u5417? stopover and layover \u4e2d\u9014\u505c\u7559 both \u8981\u653e\u5728be\u52a8\u8bcd\u3001\u60c5\u6001\u52a8\u8bcd\u3001\u52a9\u52a8\u8bcd\u540e\uff0c\u5b9e\u4e49\u52a8\u8bcd\u524d we both like English we are both programmer How + \u5f62\u5bb9\u8bcd + is \u67d0\u4e8b/\u67d0\u7269? break \u4f11\u606f bread \u9762\u5305 breed \u57f9\u80b2 brake \u5239\u8f66 on the way \u5728\u8def\u4e0a in the way \u6321\u9053 by the way \u987a\u4fbf\u8bf4\u4e00\u58f0 in a way \u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a try on \u8bd5\u7a7f turn off \u5173\u95ed turn on \u6253\u5f00 make up \u5316\u5986 I'am almost finished my work. Only five more minutes \u6570\u5b57 + more \u8868\u793a\u8fd8\u9700\u8981\"\u989d\u5916\u7684\u591a\u5c11\" where did the time go? on the last day of school\uff0c\u800c\u4e0d\u662fin the last day of school\uff0c bench \u957f\u51f3 beach \u6c99\u6ee9 breach \u7834\u574f\u3001\u88c2\u53e3 breath \u547c\u5438 take a break take a step \u91c7\u53d6\u63aa\u65bd take a chance \u6293\u4f4f\u673a\u4f1a take a risk \u5192\u9669 abroad \u5230/\u5728\u56fd\u5916 aboard \u5728(\u4ea4\u901a\u5de5\u5177)\u4e0a\u3001\u767b\u4e0a(\u4ea4\u901a\u5de5\u5177) broad \u5bbd\u9614\u7684 blackboard \u9ed1\u677f take your time? \u6162\u6162\u6765 I'll want to \u5efa\u8bae....","title":"Index"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/syntax/","text":"\u540d\u8bcd \u6234\u5e3d\u5b50 \u540d\u8bcd\u524d\u901a\u5e38\u9700\u8981\u52a0\u51a0\u8bcd(a the an\u7b49) a girl the girl a city the city a station the station \u4e0d\u9700\u8981\u5e26\u5e3d\u5b50\u7684\u5730\u65b9: Sara \u4e00\u4e2a\u4eba\u7684\u540d\u8bcd\u524d\u4e0d\u9700\u8981\u52a0\u51a0\u8bcd Beijing \u5730\u540d Peking University \u540d\u8bcd\u7684\u5355\u590d\u6570 a girl -> girls a book -> books \u901a\u5e38\u672b\u5c3e\u52a0s\u5c31\u53ef\u4ee5\u53d8\u6210\u590d\u6570\u4e86\uff0c\u4f46\u662f\u6709\u4e00\u4e9b\u7279\u6b8a\u60c5\u51b5: \u4ee5s \\ sh \\ x \\ ch\u7ed3\u5c3e + es a bus -> buses a brush -> brushes a box -> boxes a bench -> benches \u4ee5f\\fe\u7ed3\u5c3e\u7684\u8981\u628af\\fe\u53d8\u6210ves\uff0c\u6709\u65f6\u4e5f\u4f1a+s a wife -> wives a shelf -> shelves a knife -> knives a leaf -> leaves \u7279\u6b8a\u60c5\u51b5\uff0c\u53ea\u52a0s a roof -> roofs a cliff -> cliffs \u6709\u65f6\u6709\u4e24\u79cd\u590d\u6570\u5f62\u5f0f a scarf -> scarfs\\scarves \u8f85\u97f3\u5b57\u6bcd+y\u7ed3\u5c3e\uff0c\u904dy\u4e3ai + es a baby -> babies a lady -> ladies a city -> cities a country -> countries \u4e91\u97f3 + o\u7ed3\u5c3e + s\\z\\ \u8f85\u97f3 + o\u7ed3\u5c3e + es\\z\\ a zoo -> zoos a radio -> radios a hero -> heroes a protato -> protatoes a tomato -> tomatoes \u4e0d\u89c4\u5219 a sheep -> sheep a deer -> deer a swine -> swine a fish -> fish a man -> men a woman -> women a tooth -> teeth a child -> children a mouse -> mice an ox -> oxen a phenomenon -> phenomena a formula -> formulae \u4e00\u822c\u4ee5\u590d\u6570\u5f62\u5f0f\u51fa\u73b0\u7684 jeans pants shorts pyjamas glasses \u540d\u8bcd\u7684\u53ef\u6570\u548c\u4e0d\u53ef\u6570 \u4e0d\u53ef\u4ee5\u6570\u7684\u3001\u4e0d\u53ef\u4ee5\u8ba1\u7b97\u7684\u540d\u8bcd \u6db2\u4f53\u72b6\u7684 water\\tea\\coffee\\milk\\beer... \u7269\u8d28\u540d\u8bcd: soap\\air\\chocolate\\rice \u62bd\u8c61\u540d\u8bcd: love/friendship\\enthusiasm","title":"Index"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/syntax/#_1","text":"\u6234\u5e3d\u5b50 \u540d\u8bcd\u524d\u901a\u5e38\u9700\u8981\u52a0\u51a0\u8bcd(a the an\u7b49) a girl the girl a city the city a station the station \u4e0d\u9700\u8981\u5e26\u5e3d\u5b50\u7684\u5730\u65b9: Sara \u4e00\u4e2a\u4eba\u7684\u540d\u8bcd\u524d\u4e0d\u9700\u8981\u52a0\u51a0\u8bcd Beijing \u5730\u540d Peking University \u540d\u8bcd\u7684\u5355\u590d\u6570 a girl -> girls a book -> books \u901a\u5e38\u672b\u5c3e\u52a0s\u5c31\u53ef\u4ee5\u53d8\u6210\u590d\u6570\u4e86\uff0c\u4f46\u662f\u6709\u4e00\u4e9b\u7279\u6b8a\u60c5\u51b5: \u4ee5s \\ sh \\ x \\ ch\u7ed3\u5c3e + es a bus -> buses a brush -> brushes a box -> boxes a bench -> benches \u4ee5f\\fe\u7ed3\u5c3e\u7684\u8981\u628af\\fe\u53d8\u6210ves\uff0c\u6709\u65f6\u4e5f\u4f1a+s a wife -> wives a shelf -> shelves a knife -> knives a leaf -> leaves \u7279\u6b8a\u60c5\u51b5\uff0c\u53ea\u52a0s a roof -> roofs a cliff -> cliffs \u6709\u65f6\u6709\u4e24\u79cd\u590d\u6570\u5f62\u5f0f a scarf -> scarfs\\scarves \u8f85\u97f3\u5b57\u6bcd+y\u7ed3\u5c3e\uff0c\u904dy\u4e3ai + es a baby -> babies a lady -> ladies a city -> cities a country -> countries \u4e91\u97f3 + o\u7ed3\u5c3e + s\\z\\ \u8f85\u97f3 + o\u7ed3\u5c3e + es\\z\\ a zoo -> zoos a radio -> radios a hero -> heroes a protato -> protatoes a tomato -> tomatoes \u4e0d\u89c4\u5219 a sheep -> sheep a deer -> deer a swine -> swine a fish -> fish a man -> men a woman -> women a tooth -> teeth a child -> children a mouse -> mice an ox -> oxen a phenomenon -> phenomena a formula -> formulae \u4e00\u822c\u4ee5\u590d\u6570\u5f62\u5f0f\u51fa\u73b0\u7684 jeans pants shorts pyjamas glasses \u540d\u8bcd\u7684\u53ef\u6570\u548c\u4e0d\u53ef\u6570 \u4e0d\u53ef\u4ee5\u6570\u7684\u3001\u4e0d\u53ef\u4ee5\u8ba1\u7b97\u7684\u540d\u8bcd \u6db2\u4f53\u72b6\u7684 water\\tea\\coffee\\milk\\beer... \u7269\u8d28\u540d\u8bcd: soap\\air\\chocolate\\rice \u62bd\u8c61\u540d\u8bcd: love/friendship\\enthusiasm","title":"\u540d\u8bcd"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/walk_for_us/","text":"Excuse me [\u026ak\u02c8skju\u02d0z] \u5176\u4e2ds\u540e\u9762\u7684k\u4f1a\u6d4a\u5316\u6210g \u6709\u793c\u8c8c\u7684\u5f15\u8d77\u6ce8\u610f \u6253\u65ad\u5bf9\u65b9\u8bf4\u8bdd\u800c\u62b1\u6b49 \u79bb\u5f00\u6216\u505c\u6b62\u4e0e\u5176\u4ea4\u8c08 \u501f\u8fc7 \u4e3a\u5931\u793c\u800c\u62b1\u6b49 \u8bf7\u518d\u8bf4\u4e00\u6b21 Excuse [\u026ak\u02c8skju\u02d0s] the mess \u8bf7\u539f\u8c05\u8fd9\u4e48\u4e71 name is \u8fde\u8bfb can you take photo for us? can i take photo with you? take a photo/photos + of(\u7ed9\u67d0\u4eba\u7167\u76f8)/for(\u5e2e\u67d0\u4eba\u7167\u76f8)/with(\u548c\u67d0\u4eba\u4e00\u8d77\u7167\u76f8) sb photographer little [\u02c8l\u026atl] go to the pictures/movies \u610f\u601d\u4e00\u6837 a picturesque village \u98ce\u666f\u5982\u753b What's it(t\u7701\u7565\u6389\u4e86) for? What for? = Why? It is for publication a best seller = It's a good read \u800c\u4e0d\u662f It's a good book It's worth reading a second time book a room/ticket call sth sb => I call it Famoly Album call sb names \u8fb1\u9a82\u67d0\u4eba call in sick \u6253\u7535\u8bdd\u8bf7\u75c5\u5047 call him names Album \u76f8\u518c That is good/excellent/wonderful/marvelous/brilliiant idea Everything is gonna be fine/Ok I really appreciate it/your help = I'm very grateful for it; And where do you live? We live in California When I was a boy of fifteen Live in fear/terror \u6d3b\u5728\u6050\u6016\u4e2d a live TV show a live animal We're living in California live [l\u026av; la\u026av] just a second Welcome home/back You're weclome just a sec/minute/moment Could you do me a favor? just give me hand Hold sb's hand => Please hold my hand Hold me close \u7d27\u7d27\u62b1\u7740\u6211 Hold on \u4e0d\u8981\u6302\u65ad\uff0c\u8bf7\u7a0d\u7b49 What's your point? Point out \u6307\u51fa\u6765 He came to the point be to the point A case in point is... It looks terrific on you","title":"Index"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/english/word_list/word/","text":"nothing more than WYSIWYG what you see is what you get FWIW ( for what it's worth )","title":"Word"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/paper/bitcask/","text":"\u7b80\u4ecb bitcask\u662f\u7531Basho\u63d0\u51fa\u7684\u6d77\u91cf\u5c0f\u6587\u4ef6\u5b58\u50a8\u573a\u666f\u559c\u7231\u7684\u4e00\u4e2a\u5b58\u50a8\u89e3\u51b3\u65b9\u6848\uff0c\u4e3b\u8981\u662f\u4e3a\u4e86\u89e3\u51b3\u4e0b\u9762\u51e0\u4e2a\u95ee\u9898\uff1a \u8bfb\u5199\u4f4e\u5ef6\u8fdf \u968f\u673a\u5199\u8bf7\u6c42\u7684\u78c1\u76d8\u9ad8\u541e\u5410\u91cf \u6545\u969c\u65f6\u7684\u5feb\u901f\u6062\u590d\u4e14\u4e0d\u4e22\u6570\u636e \u4f7f\u7528\u7b80\u5355 \u57fa\u672c\u6982\u5ff5 \u4e00\u4e2abitcask\u5b9e\u4f8b\u662f\u4e00\u4e2a\u76ee\u5f55\uff0c\u5728\u76ee\u5f55\u4e0b\u53ea\u6709\u4e00\u4e2a\u6587\u4ef6\u662f\u5904\u4e8e\u6d3b\u52a8\u72b6\u6001\uff0c\u5728\u6587\u4ef6\u5927\u5c0f\u8fbe\u5230\u4e00\u4e2a\u9600\u503c\u7684\u65f6\u5019\u5c31\u4f1a\u5173\u95ed\u6389\uff0c\u7136\u540e\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u6d3b\u52a8\u6587\u4ef6 \u6d3b\u52a8\u7684\u6587\u4ef6\u53ea\u4f1a\u8fdb\u884cappend\u5199\u5165\uff0c\u8fd9\u610f\u5473\u7740\u6587\u4ef6\u603b\u662f\u987a\u5e8f\u5199\u5165\u7684\uff0c\u5e76\u4e0d\u9700\u8981\u505a\u78c1\u76d8\u7684seek\uff0c\u683c\u5f0f\u5982\u4e0b: \u6bcf\u6b21\u5199\u5165\u90fd\u4f1a\u521b\u5efa\u4e00\u4e2a\u6761\u76eeappend\u5230\u6d3b\u52a8\u6587\u4ef6\u7684\u5c3e\u90e8\uff0c\u800c\u5220\u9664\u53ea\u662f\u7b80\u5355\u7684\u5199\u5165\u4e00\u4e2a\u5e26\u6709\u7279\u6b8a\u503c\u7684\u6761\u76ee\uff0c\u771f\u6b63\u7684\u5220\u9664\u5c06\u4f1a\u53d1\u751f\u5728\u4e0b\u4e00\u6b21\u5408\u5e76\u7684\u65f6\u5019\u3002 \u6bcf\u6b21append\u5b8c\u6210\u540e\uff0c\u5728\u5185\u5b58\u4e2d\u7684\u4e00\u4e2a\u53eb\u505a keydir \u7684\u7ed3\u6784\u5c31\u4f1a\u88ab\u66f4\u65b0\u3002\u4e00\u4e2a keydir \u5c31\u662f\u4e00\u4e2a\u7b80\u5355\u7684hashtable\uff0c\u4fdd\u5b58\u4e86\u6240\u6709\u7684key\u5bf9\u5e94\u7684 \u503c\u5927\u5c0f\u3001\u5728\u6587\u4ef6\u4e2d\u7684\u4f4d\u7f6e\uff0ctimestamp\u3001\u5b58\u50a8\u5728\u54ea\u4e2a\u6587\u4ef6\u4e2d\u7b49\u4fe1\u606f\uff0c\u683c\u5f0f\u5982\u4e0b: keydir \u59cb\u7ec8\u6307\u5411\u6700\u65b0\u7684\u6570\u636e\u6240\u5728\u7684\u4f4d\u7f6e\uff0c\u8001\u7684\u6570\u636e\u4ecd\u7136\u5728\u6587\u4ef6\u4e2d\u6ca1\u6709\u5220\u9664\uff0c\u76f4\u5230merge\u7684\u65f6\u5019\u624d\u4f1a\u5220\u6389\u3002\u501f\u52a9\u8fd9\u5957\u673a\u5236\uff0c\u8bfb\u53d6\u4e00\u4e2a\u503c\u662f\u975e\u5e38\u7b80\u5355\u7684\u3002 \u4e0b\u9762\u662f\u8bfb\u53d6\u4e00\u4e2akey\u7684\u8fc7\u7a0b: \u8fd9\u5957\u673a\u5236\u4f1a\u5360\u7528\u6bd4\u8f83\u591a\u7684\u78c1\u76d8\u7a7a\u95f4\uff0c\u56e0\u4e3a\u5199\u5165\u65b0\u7684\u503c\u540e\uff0c\u8001\u7684\u503c\u4ecd\u7136\u5728\u78c1\u76d8\u4e0a\u5417\uff0c\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u5c31\u5f15\u5165\u4e86megering\u7684\u80fd\u529b\uff0cmerge\u7684\u65f6\u5019\u4f1a\u8fed\u4ee3 \u6240\u6709\u4e0d\u6d3b\u52a8\u72b6\u6001\u7684\u6587\u4ef6\uff0c\u7136\u540e\u8fdb\u884c\u5408\u5e76\uff0c\u8f93\u51fa\u4e00\u7cfb\u5217\u7684\u6587\u4ef6\uff0c\u8fd9\u4e9b\u6587\u4ef6\u53ea\u4f1a\u5305\u542b\u6d3b\u8dc3\u7684\uff0c\u6700\u65b0\u7248\u672c\u7684\u6570\u636e\u3002\u7136\u540e\u4ea7\u751f\u4e00\u4e2ahint file\uff0c\u8fd9\u4e2a\u6587\u4ef6\u4e2d\u5305\u542b\u4e86 keydir\u7684\u4fe1\u606f\uff0c\u8fdb\u7a0b\u53ea\u9700\u8981\u52a0\u8f7d\u8fd9\u4e2a\u6587\u4ef6\u5c31\u53ef\u4ee5\u5feb\u901f\u7684\u6784\u5efa\u597dkeydir\u7ed3\u6784\uff0c","title":"Bitcask"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/paper/bitcask/#_1","text":"bitcask\u662f\u7531Basho\u63d0\u51fa\u7684\u6d77\u91cf\u5c0f\u6587\u4ef6\u5b58\u50a8\u573a\u666f\u559c\u7231\u7684\u4e00\u4e2a\u5b58\u50a8\u89e3\u51b3\u65b9\u6848\uff0c\u4e3b\u8981\u662f\u4e3a\u4e86\u89e3\u51b3\u4e0b\u9762\u51e0\u4e2a\u95ee\u9898\uff1a \u8bfb\u5199\u4f4e\u5ef6\u8fdf \u968f\u673a\u5199\u8bf7\u6c42\u7684\u78c1\u76d8\u9ad8\u541e\u5410\u91cf \u6545\u969c\u65f6\u7684\u5feb\u901f\u6062\u590d\u4e14\u4e0d\u4e22\u6570\u636e \u4f7f\u7528\u7b80\u5355","title":"\u7b80\u4ecb"},{"location":"%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/paper/bitcask/#_2","text":"\u4e00\u4e2abitcask\u5b9e\u4f8b\u662f\u4e00\u4e2a\u76ee\u5f55\uff0c\u5728\u76ee\u5f55\u4e0b\u53ea\u6709\u4e00\u4e2a\u6587\u4ef6\u662f\u5904\u4e8e\u6d3b\u52a8\u72b6\u6001\uff0c\u5728\u6587\u4ef6\u5927\u5c0f\u8fbe\u5230\u4e00\u4e2a\u9600\u503c\u7684\u65f6\u5019\u5c31\u4f1a\u5173\u95ed\u6389\uff0c\u7136\u540e\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u6d3b\u52a8\u6587\u4ef6 \u6d3b\u52a8\u7684\u6587\u4ef6\u53ea\u4f1a\u8fdb\u884cappend\u5199\u5165\uff0c\u8fd9\u610f\u5473\u7740\u6587\u4ef6\u603b\u662f\u987a\u5e8f\u5199\u5165\u7684\uff0c\u5e76\u4e0d\u9700\u8981\u505a\u78c1\u76d8\u7684seek\uff0c\u683c\u5f0f\u5982\u4e0b: \u6bcf\u6b21\u5199\u5165\u90fd\u4f1a\u521b\u5efa\u4e00\u4e2a\u6761\u76eeappend\u5230\u6d3b\u52a8\u6587\u4ef6\u7684\u5c3e\u90e8\uff0c\u800c\u5220\u9664\u53ea\u662f\u7b80\u5355\u7684\u5199\u5165\u4e00\u4e2a\u5e26\u6709\u7279\u6b8a\u503c\u7684\u6761\u76ee\uff0c\u771f\u6b63\u7684\u5220\u9664\u5c06\u4f1a\u53d1\u751f\u5728\u4e0b\u4e00\u6b21\u5408\u5e76\u7684\u65f6\u5019\u3002 \u6bcf\u6b21append\u5b8c\u6210\u540e\uff0c\u5728\u5185\u5b58\u4e2d\u7684\u4e00\u4e2a\u53eb\u505a keydir \u7684\u7ed3\u6784\u5c31\u4f1a\u88ab\u66f4\u65b0\u3002\u4e00\u4e2a keydir \u5c31\u662f\u4e00\u4e2a\u7b80\u5355\u7684hashtable\uff0c\u4fdd\u5b58\u4e86\u6240\u6709\u7684key\u5bf9\u5e94\u7684 \u503c\u5927\u5c0f\u3001\u5728\u6587\u4ef6\u4e2d\u7684\u4f4d\u7f6e\uff0ctimestamp\u3001\u5b58\u50a8\u5728\u54ea\u4e2a\u6587\u4ef6\u4e2d\u7b49\u4fe1\u606f\uff0c\u683c\u5f0f\u5982\u4e0b: keydir \u59cb\u7ec8\u6307\u5411\u6700\u65b0\u7684\u6570\u636e\u6240\u5728\u7684\u4f4d\u7f6e\uff0c\u8001\u7684\u6570\u636e\u4ecd\u7136\u5728\u6587\u4ef6\u4e2d\u6ca1\u6709\u5220\u9664\uff0c\u76f4\u5230merge\u7684\u65f6\u5019\u624d\u4f1a\u5220\u6389\u3002\u501f\u52a9\u8fd9\u5957\u673a\u5236\uff0c\u8bfb\u53d6\u4e00\u4e2a\u503c\u662f\u975e\u5e38\u7b80\u5355\u7684\u3002 \u4e0b\u9762\u662f\u8bfb\u53d6\u4e00\u4e2akey\u7684\u8fc7\u7a0b: \u8fd9\u5957\u673a\u5236\u4f1a\u5360\u7528\u6bd4\u8f83\u591a\u7684\u78c1\u76d8\u7a7a\u95f4\uff0c\u56e0\u4e3a\u5199\u5165\u65b0\u7684\u503c\u540e\uff0c\u8001\u7684\u503c\u4ecd\u7136\u5728\u78c1\u76d8\u4e0a\u5417\uff0c\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u5c31\u5f15\u5165\u4e86megering\u7684\u80fd\u529b\uff0cmerge\u7684\u65f6\u5019\u4f1a\u8fed\u4ee3 \u6240\u6709\u4e0d\u6d3b\u52a8\u72b6\u6001\u7684\u6587\u4ef6\uff0c\u7136\u540e\u8fdb\u884c\u5408\u5e76\uff0c\u8f93\u51fa\u4e00\u7cfb\u5217\u7684\u6587\u4ef6\uff0c\u8fd9\u4e9b\u6587\u4ef6\u53ea\u4f1a\u5305\u542b\u6d3b\u8dc3\u7684\uff0c\u6700\u65b0\u7248\u672c\u7684\u6570\u636e\u3002\u7136\u540e\u4ea7\u751f\u4e00\u4e2ahint file\uff0c\u8fd9\u4e2a\u6587\u4ef6\u4e2d\u5305\u542b\u4e86 keydir\u7684\u4fe1\u606f\uff0c\u8fdb\u7a0b\u53ea\u9700\u8981\u52a0\u8f7d\u8fd9\u4e2a\u6587\u4ef6\u5c31\u53ef\u4ee5\u5feb\u901f\u7684\u6784\u5efa\u597dkeydir\u7ed3\u6784\uff0c","title":"\u57fa\u672c\u6982\u5ff5"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/envoy/bootstrap/","text":"Bootstrap\u542f\u52a8\u8fc7\u7a0b\u5206\u6790 \u8f7d\u5165Bootstrap\u542f\u52a8yaml\u6587\u4ef6 \u8bbe\u7f6eheader prefix \u521d\u59cb\u5316stats\u3001\u8bbe\u7f6eTagProducer\u3001StatsMatcher\u3001HistogramSettings\u7b49 \u521b\u5efaServer stats \u6ce8\u518cassert action\u3001bug action \u8bbe\u7f6ehealthy check\u4e3afalse cluster manager\u5305\u542b\u4e86\u591a\u9636\u6bb5\u521d\u59cb\u5316\uff0c\u7b2c\u4e00\u9636\u6bb5\u8981\u521d\u59cb\u5316\u7684\u662fstatic/DNS clsuter\uff0c \u7136\u540e\u662f\u9884\u5148\u5b9a\u4e49\u7684\u9759\u6001\u7684EDS cluster\uff0c \u5982\u679c\u5305\u542b\u4e86CDS\u9700\u8981\u7b49\u5f85CDS\u6536\u5230\u4e00\u4e2aresponse\uff0c\u6216\u8005\u662f\u5931\u8d25\u7684\u54cd\u5e94\uff0c\u6700\u540e\u521d\u59cb\u5316CDS\uff0c\u63a5\u7740\u5f00\u59cb\u521d\u59cb\u5316CDS\u63d0\u4f9b\u7684Cluster\u3002 \u5982\u679c\u96c6\u7fa4\u63d0\u4f9b\u4e86\u5065\u5eb7\u68c0\u67e5\uff0cEnvoy\u8fd8\u4f1a\u8fdb\u884c\u4e00\u8f6e\u5065\u5eb7\u68c0\u67e5 \u7b49\u5230cluster manager\u521d\u59cb\u5316\u5b8c\u6bd5\u540e\uff0cRDS\u548cLDS\u5f00\u59cb\u521d\u59cb\u5316\uff0c\u76f4\u5230\u6536\u5230\u54cd\u5e94\u6216\u8005\u5931\u8d25\uff0c\u5728\u6b64\u4e4b\u524dEnvoy\u662f\u4e0d\u4f1a\u63a5\u53d7\u8fde\u63a5\u6765\u5904\u7406\u6d41\u91cf\u7684 \u5982\u679cLDS\u7684\u54cd\u5e94\u4e2d\u6f5c\u5165\u4e86RDS\u7684\u914d\u7f6e\uff0c\u90a3\u4e48\u8fd8\u9700\u8981\u7b49\u5f85RDS\u6536\u5230\u54cd\u5e94\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u88ab\u79f0\u4e3alistener warming \u4e0a\u8ff0\u6240\u6709\u6d41\u7a0b\u5b8c\u6bd5\u540e\uff0clistener\u5f00\u59cb\u63a5\u53d7\u6d41\u91cf\u3002 \u4e0a\u6587\u4e2d\u63d0\u5230\u7684\u6536\u5230\u54cd\u5e94\u6216\u8005\u5931\u8d25\uff0c\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6einitial_fetch_timeout.\u6765\u8bbe\u7f6e\u54cd\u5e94\u8d85\u65f6\u7684\u65f6\u5019\uff0c\u5982\u679cinitial_fetch_timeout\u540e\u8fd8\u6ca1\u6709\u6536\u5230\u54cd\u5e94\u5c31\u8df3\u8fc7\u5f53\u524d\u7684\u521d\u59cb\u5316\u9636\u6bb5\u3002","title":"Bootstrap\u542f\u52a8\u8fc7\u7a0b\u5206\u6790"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/envoy/bootstrap/#bootstrap","text":"\u8f7d\u5165Bootstrap\u542f\u52a8yaml\u6587\u4ef6 \u8bbe\u7f6eheader prefix \u521d\u59cb\u5316stats\u3001\u8bbe\u7f6eTagProducer\u3001StatsMatcher\u3001HistogramSettings\u7b49 \u521b\u5efaServer stats \u6ce8\u518cassert action\u3001bug action \u8bbe\u7f6ehealthy check\u4e3afalse cluster manager\u5305\u542b\u4e86\u591a\u9636\u6bb5\u521d\u59cb\u5316\uff0c\u7b2c\u4e00\u9636\u6bb5\u8981\u521d\u59cb\u5316\u7684\u662fstatic/DNS clsuter\uff0c \u7136\u540e\u662f\u9884\u5148\u5b9a\u4e49\u7684\u9759\u6001\u7684EDS cluster\uff0c \u5982\u679c\u5305\u542b\u4e86CDS\u9700\u8981\u7b49\u5f85CDS\u6536\u5230\u4e00\u4e2aresponse\uff0c\u6216\u8005\u662f\u5931\u8d25\u7684\u54cd\u5e94\uff0c\u6700\u540e\u521d\u59cb\u5316CDS\uff0c\u63a5\u7740\u5f00\u59cb\u521d\u59cb\u5316CDS\u63d0\u4f9b\u7684Cluster\u3002 \u5982\u679c\u96c6\u7fa4\u63d0\u4f9b\u4e86\u5065\u5eb7\u68c0\u67e5\uff0cEnvoy\u8fd8\u4f1a\u8fdb\u884c\u4e00\u8f6e\u5065\u5eb7\u68c0\u67e5 \u7b49\u5230cluster manager\u521d\u59cb\u5316\u5b8c\u6bd5\u540e\uff0cRDS\u548cLDS\u5f00\u59cb\u521d\u59cb\u5316\uff0c\u76f4\u5230\u6536\u5230\u54cd\u5e94\u6216\u8005\u5931\u8d25\uff0c\u5728\u6b64\u4e4b\u524dEnvoy\u662f\u4e0d\u4f1a\u63a5\u53d7\u8fde\u63a5\u6765\u5904\u7406\u6d41\u91cf\u7684 \u5982\u679cLDS\u7684\u54cd\u5e94\u4e2d\u6f5c\u5165\u4e86RDS\u7684\u914d\u7f6e\uff0c\u90a3\u4e48\u8fd8\u9700\u8981\u7b49\u5f85RDS\u6536\u5230\u54cd\u5e94\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u88ab\u79f0\u4e3alistener warming \u4e0a\u8ff0\u6240\u6709\u6d41\u7a0b\u5b8c\u6bd5\u540e\uff0clistener\u5f00\u59cb\u63a5\u53d7\u6d41\u91cf\u3002 \u4e0a\u6587\u4e2d\u63d0\u5230\u7684\u6536\u5230\u54cd\u5e94\u6216\u8005\u5931\u8d25\uff0c\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6einitial_fetch_timeout.\u6765\u8bbe\u7f6e\u54cd\u5e94\u8d85\u65f6\u7684\u65f6\u5019\uff0c\u5982\u679cinitial_fetch_timeout\u540e\u8fd8\u6ca1\u6709\u6536\u5230\u54cd\u5e94\u5c31\u8df3\u8fc7\u5f53\u524d\u7684\u521d\u59cb\u5316\u9636\u6bb5\u3002","title":"Bootstrap\u542f\u52a8\u8fc7\u7a0b\u5206\u6790"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/envoy/cluster/","text":"Cluster\u5206\u6790 \u5728Envoy\u4e2d Cluster \u8868\u793a\u7684\u662f\u4e00\u4e2a\u96c6\u7fa4\uff0c\u4e00\u4e2a\u96c6\u7fa4\u4e3b\u8981\u5305\u542b\u4e24\u4e2a\u90e8\u5206\u7684\u4fe1\u606f\uff0c\u4e00\u4e2a\u90e8\u5206\u662f\u8fd9\u4e2a\u96c6\u7fa4\u76f8\u5173\u7684\u914d\u7f6e\uff0c\u6bd4\u5982\u96c6\u7fa4\u7684\u540d\u5b57\u3001\u96c6\u7fa4\u4e0b\u673a\u5668\u5efa\u94fe\u7684\u8d85\u65f6\u65f6\u95f4\u3001\u8d1f\u8f7d\u5747\u8861\u7b56\u7565\u3001\u5efa\u7acb\u94fe\u63a5\u7528\u4ec0\u4e48\u534f\u8bae\u7b49\u7b49\u3002 \u53e6\u5916\u4e00\u4e2a\u90e8\u5206\u5219\u662f\u8fd9\u4e2a\u96c6\u7fa4\u4e0b\u6240\u5305\u542b\u7684\u673a\u5668\u5217\u8868\u3002\u4f8b\u5982\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 clusters : - name : statsd type : STATIC connect_timeout : 0.25s lb_policy : ROUND_ROBIN load_assignment : cluster_name : statsd endpoints : - lb_endpoints : - endpoint : address : socket_address : address : 127.0.0.1 port_value : 8125 protocol : TCP \u4e0a\u9762\u8fd9\u6bb5yaml\u5b9a\u4e49\u4e86\u4e00\u4e2a\u540d\u4e3astatsd\u7684\u96c6\u7fa4\uff0c\u8d1f\u8f7d\u5747\u8861\u7b56\u7565\u662f ROUND_ROBIN \u3001\u8fde\u63a5\u8d85\u65f6\u65f6\u95f4\u662f 0.25s \u3001\u8fd9\u4e2a\u96c6\u7fa4\u4e0b\u9762\u6709\u4e00\u4e2a\u673a\u5668\uff0c\u8fd9\u4e2a\u96c6\u7fa4\u7684\u7c7b\u578b\u662f STATIC \u3002\u6839\u636e\u8fd9\u6bb5 yaml Envoy\u5c31\u4f1a\u521b\u5efa\u4e00\u4e2a Cluster \u5bf9\u8c61\u3002 \u8fd9\u4e2aCluster\u5bf9\u8c61\u5e76\u975e\u662f\u4e00\u4e2a\u901a\u7528\u7684\u5bf9\u8c61\uff0c\u800c\u4e14\u6839\u636eyaml\u4e2d\u7684type\u5b57\u6bb5\uff0c\u627e\u5230\u5bf9\u8c61\u7c7b\u578b\u7684Cluster\u7684\u6784\u9020\u5de5\u5382\u51fd\u6570\u6765\u8fdb\u884c\u6784\u9020\u3002 \u800cSTRICT_DNS\u7c7b\u578b\u7684Cluster\u5219\u662f\u901a\u8fc7DNS\u67e5\u8be2\u6307\u5b9a\u57df\u540d\u6765\u83b7\u53d6\u673a\u5668\u5217\u8868\u7684\u3002\u800cEDS\u7c7b\u578b\u7684Cluster\u5219\u662f\u901a\u8fc7\u53d1\u9001EDS\u8bf7\u6c42\u7ed9\u63a7\u5236\u9762\u6765\u83b7\u53d6\u673a\u5668\u5217\u8868\u7684\u3002\u65e0\u8bba\u662f\u4f55\u79cd\u65b9\u5f0f\u83b7\u53d6\uff0c \u6700\u7ec8\u673a\u5668\u5217\u8868\u90fd\u662f\u5b58\u5728 envoy::config::endpoint::v3::ClusterLoadAssignment \u8fd9\u6837\u7684protobuf message\u4e2d\u7684\u3002 \u4e00\u4e2a\u96c6\u7fa4\u4e0b\u9762\u662f\u591a\u4e2a LocalityLbEndpoints \uff0c\u4e00\u4e2a LocalityLbEndpoints \u5305\u542b\u4e00\u4e2a Locality \u3001\u4e00\u4e2a\u4f18\u5148\u7ea7\u3001\u4e00\u4e2a\u533a\u57df\u7684\u6743\u91cd\u3001\u4ee5\u53ca\u4e00\u6279 LbEndpoint \u4e00\u4e2a LbEndpoint \u5305\u542b\u4e86\u4e00\u4e2a\u673a\u5668\u548c\u5bf9\u5e94\u7684\u5143\u6570\u636e\u548c\u6743\u91cd\u3002 \u4e00\u4e2a\u96c6\u7fa4\u4e0b\u9762\u53ef\u4ee5\u914d\u7f6e\u591a\u4e2aPriority\u548c\u591a\u4e2aLocality\uff0c\u6bcf\u4e00\u4e2aPriority\u548cLocality\u53ef\u4ee5\u5305\u542b\u4e00\u7ec4endpoint\uff0cPriority\u548cLocality\u662f\u591a\u5bf9\u591a\u7684\u5173\u7cfb \u4e5f\u5c31\u662f\u8bf4\u4e00\u4e2aPriority\u53ef\u4ee5\u5305\u542b\u591a\u4e2aLocality\u7684\u673a\u5668\u5217\u8868\uff0c\u4e00\u4e2aLocality\u4e5f\u53ef\u4ee5\u5305\u542b\u591a\u4e2apriority\uff0c\u5f53\u4e00\u4e2apriority\u4e2d\u7684\u4e3b\u673a\u4e0d\u53ef\u7528/\u4e0d\u5065\u5eb7\u7684\u65f6\u5019 \u4f1a\u53bb\u4ece\u4e0b\u4e00\u4e2apriority\u4e2d\u8fdb\u884c\u9009\u62e9\u3002 \u4e00\u4e2a\u96c6\u7fa4\u5305\u542b\u4e00\u4e2a PrioritySetImpl \uff0c\u5305\u542b\u4e86\u4e00\u4e2a\u96c6\u7fa4\u4e0b\u7684\u6240\u6709host\uff0c\u7136\u540e\u6309\u7167 priority \u7ef4\u5ea6\u5bf9\u7ed9\u5b9a\u96c6\u7fa4\u8fdb\u884c\u5206\u7ec4\uff0c\u4e00\u4e2a\u96c6\u7fa4\u4f1a\u6709\u591a\u4e2a Priority \u4e00\u4e2a PrioritySetImpl \u91cc\u9762\u5c31\u662f\u4e00\u4e2avector\uff0c\u7d22\u5f15\u5c31\u662f\u4f18\u5148\u7ea7\uff0c\u5185\u5bb9\u5c31\u662f\u8fd9\u4e2a\u4f18\u5148\u7ea7\u4e0b\u5bf9\u5e94\u7684 HostSetImpl PrioritySetImpl => std::vector<std::unique_ptr<HostSet>> host_sets_; \u4e00\u4e2a HostSetImpl \u5c31\u662f\u6309\u7167priority\u6765\u7ef4\u62a4\u4e00\u7ec4host\u96c6\u5408\uff0c\u6784\u9020\u51fd\u6570\u9700\u8981\u63d0\u4f9bpriority\uff0c\u7136\u540e\u901a\u8fc7updateHosts\u6765\u6dfb\u52a0host\u3002\u8fd9\u7ec4host\u53ef\u80fd\u6765\u81ea\u4e8e\u591a\u4e2a Locality HostSetImpl \u4f1a\u6839\u636e degraded \u3001 healthy \u3001 excluded \u7b49\u552f\u72ec\u5c06Host\u5206\u7c7b\uff0c\u7136\u540e\u9488\u5bf9\u6bcf\u4e00\u4e2a\u5206\u7c7b\u5c06Host\u6309\u7167 Locality \u8fdb\u884c\u5206\u7c7b\uff0c\u4e5f\u5c31\u662f\u901a\u8fc7 HostsPerLocalityImpl \u6765\u4fdd\u5b58 1 2 3 4 5 6 7 8 9 10 11 uint32_t priority_ ; uint32_t overprovisioning_factor_ ; HostVectorConstSharedPtr hosts_ ; HealthyHostVectorConstSharedPtr healthy_hosts_ ; DegradedHostVectorConstSharedPtr degraded_hosts_ ; ExcludedHostVectorConstSharedPtr excluded_hosts_ ; HostsPerLocalityConstSharedPtr hosts_per_locality_ { HostsPerLocalityImpl :: empty ()}; HostsPerLocalityConstSharedPtr healthy_hosts_per_locality_ { HostsPerLocalityImpl :: empty ()}; HostsPerLocalityConstSharedPtr degraded_hosts_per_locality_ { HostsPerLocalityImpl :: empty ()}; HostsPerLocalityConstSharedPtr excluded_hosts_per_locality_ { HostsPerLocalityImpl :: empty ()}; LocalityWeightsConstSharedPtr locality_weights_ ; \u4e00\u4e2a HostsPerLocalityImpl \u6309\u7167 locality \u7684\u7ef4\u5ea6\u7ec4\u7ec7host\u96c6\u5408\uff0c\u6838\u5fc3\u6570\u636e\u6210\u5458 std::vector<HostVector> \uff0c\u7b2c\u4e00\u4e2ahost\u96c6\u5408\u662flocal locality\u3002 1 2 // The first entry is for local hosts in the local locality. std :: vector < HostVector > hosts_per_locality_ ; \u4e00\u6b21host\u66f4\u65b0\u9700\u8981\u5c06\u6240\u6709\u7684host\u6309\u7167\u4f18\u5148\u7ea7\u3001locality\u3001healthy\u7b49\u7eac\u5ea6\u7ec4\u88c5\u6210\u5bf9\u5e94\u7684\u7ed3\u6784\uff0c\u800c PriorityStateManager \u5728\u5176\u4e2d\u5145\u5f53\u4e86\u91cd\u8981\u7684\u89d2\u8272\u3002 PriorityStateManager \u7ba1\u7406\u4e00\u4e2a\u96c6\u7fa4\u7684 PriorityState \uff0c\u800cPriorityState\u5219\u662f\u6309\u7167priority\u5206\u7ec4\u7ef4\u62a4\u7684\u4e00\u7ec4host\u548c\u5bf9\u5e94\u7684locality weight map\uff0c 1 2 3 using PriorityState = std :: vector < std :: pair < HostListPtr , LocalityWeightsMap >> ; using LocalityWeightsMap = std :: unordered_map < envoy :: config :: core :: v3 :: Locality , uint32_t , LocalityHash , LocalityEqualTo > ; \u66f4\u65b0host\u7684\u65f6\u5019\u5148\u7ed9\u8fd9\u6279host\u751f\u6210 PriorityState \uff0cvector\u7684\u4e0b\u6807\u662f\u4f18\u5148\u7ea7\uff0c\u4fdd\u5b58\u4e86\u4e00\u4e2a\u4f18\u5148\u7ea7\u4e0b\u7684\u6240\u6709host\uff0c\u4ee5\u53ca\u8fd9\u4e2a\u4f18\u5148\u7ea7\u5bf9\u5e94\u7684\u6240\u6709Locality\u548c\u6743\u91cd \u901a\u8fc7 PriorityStateManager::updateClusterPrioritySet \u5c31\u53ef\u4ee5\u66f4\u65b0\u96c6\u7fa4\u7684 PrioritySetImpl \u7684\u6307\u5b9a\u4f18\u5148\u7ea7\u4e0b\u7684\u6240\u6709Host\u3002\u8fd9\u4e2a\u51fd\u6570\u5185\u90e8\u4f1a\u901a\u8fc7 PriorityState \u62ff\u5230\u533a\u57df\u6743\u91cd \u7136\u540e\u5c06\u6240\u6709\u7684Host\u6309\u7167 Locality \u8fdb\u884c\u7ec4\u7ec7\u8d77\u6765\uff0c\u7136\u540e\u8ba1\u7b97\u51fa\u6bcf\u4e00\u4e2a Locality \u7684\u6743\u91cd\u3002\u6700\u540e\u8c03\u7528 PrioritySetImpl::updateHosts \u6765\u66f4\u65b0\u6307\u5b9a\u4f18\u5148\u7ea7\u7684Host\u3002 HostDescriptionImpl \u5bf9upstream\u4e3b\u673a\u7684\u4e00\u4e2a\u63cf\u8ff0\u63a5\u53e3\uff0c\u6bd4\u5982\u662f\u5426\u662fcanary\u3001metadata\u3001cluster\u3001healthChecjer\u3001hostname\u3001address\u7b49 HostImpl \u4ee3\u8868\u4e00\u4e2aupstream Host LocalityWeightsMap key\u662fLocality\uff0cvalue\u662f\u8fd9\u4e2aLocality\u7684\u6743\u91cd","title":"Cluster\u5206\u6790"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/envoy/cluster/#cluster","text":"\u5728Envoy\u4e2d Cluster \u8868\u793a\u7684\u662f\u4e00\u4e2a\u96c6\u7fa4\uff0c\u4e00\u4e2a\u96c6\u7fa4\u4e3b\u8981\u5305\u542b\u4e24\u4e2a\u90e8\u5206\u7684\u4fe1\u606f\uff0c\u4e00\u4e2a\u90e8\u5206\u662f\u8fd9\u4e2a\u96c6\u7fa4\u76f8\u5173\u7684\u914d\u7f6e\uff0c\u6bd4\u5982\u96c6\u7fa4\u7684\u540d\u5b57\u3001\u96c6\u7fa4\u4e0b\u673a\u5668\u5efa\u94fe\u7684\u8d85\u65f6\u65f6\u95f4\u3001\u8d1f\u8f7d\u5747\u8861\u7b56\u7565\u3001\u5efa\u7acb\u94fe\u63a5\u7528\u4ec0\u4e48\u534f\u8bae\u7b49\u7b49\u3002 \u53e6\u5916\u4e00\u4e2a\u90e8\u5206\u5219\u662f\u8fd9\u4e2a\u96c6\u7fa4\u4e0b\u6240\u5305\u542b\u7684\u673a\u5668\u5217\u8868\u3002\u4f8b\u5982\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 clusters : - name : statsd type : STATIC connect_timeout : 0.25s lb_policy : ROUND_ROBIN load_assignment : cluster_name : statsd endpoints : - lb_endpoints : - endpoint : address : socket_address : address : 127.0.0.1 port_value : 8125 protocol : TCP \u4e0a\u9762\u8fd9\u6bb5yaml\u5b9a\u4e49\u4e86\u4e00\u4e2a\u540d\u4e3astatsd\u7684\u96c6\u7fa4\uff0c\u8d1f\u8f7d\u5747\u8861\u7b56\u7565\u662f ROUND_ROBIN \u3001\u8fde\u63a5\u8d85\u65f6\u65f6\u95f4\u662f 0.25s \u3001\u8fd9\u4e2a\u96c6\u7fa4\u4e0b\u9762\u6709\u4e00\u4e2a\u673a\u5668\uff0c\u8fd9\u4e2a\u96c6\u7fa4\u7684\u7c7b\u578b\u662f STATIC \u3002\u6839\u636e\u8fd9\u6bb5 yaml Envoy\u5c31\u4f1a\u521b\u5efa\u4e00\u4e2a Cluster \u5bf9\u8c61\u3002 \u8fd9\u4e2aCluster\u5bf9\u8c61\u5e76\u975e\u662f\u4e00\u4e2a\u901a\u7528\u7684\u5bf9\u8c61\uff0c\u800c\u4e14\u6839\u636eyaml\u4e2d\u7684type\u5b57\u6bb5\uff0c\u627e\u5230\u5bf9\u8c61\u7c7b\u578b\u7684Cluster\u7684\u6784\u9020\u5de5\u5382\u51fd\u6570\u6765\u8fdb\u884c\u6784\u9020\u3002 \u800cSTRICT_DNS\u7c7b\u578b\u7684Cluster\u5219\u662f\u901a\u8fc7DNS\u67e5\u8be2\u6307\u5b9a\u57df\u540d\u6765\u83b7\u53d6\u673a\u5668\u5217\u8868\u7684\u3002\u800cEDS\u7c7b\u578b\u7684Cluster\u5219\u662f\u901a\u8fc7\u53d1\u9001EDS\u8bf7\u6c42\u7ed9\u63a7\u5236\u9762\u6765\u83b7\u53d6\u673a\u5668\u5217\u8868\u7684\u3002\u65e0\u8bba\u662f\u4f55\u79cd\u65b9\u5f0f\u83b7\u53d6\uff0c \u6700\u7ec8\u673a\u5668\u5217\u8868\u90fd\u662f\u5b58\u5728 envoy::config::endpoint::v3::ClusterLoadAssignment \u8fd9\u6837\u7684protobuf message\u4e2d\u7684\u3002 \u4e00\u4e2a\u96c6\u7fa4\u4e0b\u9762\u662f\u591a\u4e2a LocalityLbEndpoints \uff0c\u4e00\u4e2a LocalityLbEndpoints \u5305\u542b\u4e00\u4e2a Locality \u3001\u4e00\u4e2a\u4f18\u5148\u7ea7\u3001\u4e00\u4e2a\u533a\u57df\u7684\u6743\u91cd\u3001\u4ee5\u53ca\u4e00\u6279 LbEndpoint \u4e00\u4e2a LbEndpoint \u5305\u542b\u4e86\u4e00\u4e2a\u673a\u5668\u548c\u5bf9\u5e94\u7684\u5143\u6570\u636e\u548c\u6743\u91cd\u3002 \u4e00\u4e2a\u96c6\u7fa4\u4e0b\u9762\u53ef\u4ee5\u914d\u7f6e\u591a\u4e2aPriority\u548c\u591a\u4e2aLocality\uff0c\u6bcf\u4e00\u4e2aPriority\u548cLocality\u53ef\u4ee5\u5305\u542b\u4e00\u7ec4endpoint\uff0cPriority\u548cLocality\u662f\u591a\u5bf9\u591a\u7684\u5173\u7cfb \u4e5f\u5c31\u662f\u8bf4\u4e00\u4e2aPriority\u53ef\u4ee5\u5305\u542b\u591a\u4e2aLocality\u7684\u673a\u5668\u5217\u8868\uff0c\u4e00\u4e2aLocality\u4e5f\u53ef\u4ee5\u5305\u542b\u591a\u4e2apriority\uff0c\u5f53\u4e00\u4e2apriority\u4e2d\u7684\u4e3b\u673a\u4e0d\u53ef\u7528/\u4e0d\u5065\u5eb7\u7684\u65f6\u5019 \u4f1a\u53bb\u4ece\u4e0b\u4e00\u4e2apriority\u4e2d\u8fdb\u884c\u9009\u62e9\u3002 \u4e00\u4e2a\u96c6\u7fa4\u5305\u542b\u4e00\u4e2a PrioritySetImpl \uff0c\u5305\u542b\u4e86\u4e00\u4e2a\u96c6\u7fa4\u4e0b\u7684\u6240\u6709host\uff0c\u7136\u540e\u6309\u7167 priority \u7ef4\u5ea6\u5bf9\u7ed9\u5b9a\u96c6\u7fa4\u8fdb\u884c\u5206\u7ec4\uff0c\u4e00\u4e2a\u96c6\u7fa4\u4f1a\u6709\u591a\u4e2a Priority \u4e00\u4e2a PrioritySetImpl \u91cc\u9762\u5c31\u662f\u4e00\u4e2avector\uff0c\u7d22\u5f15\u5c31\u662f\u4f18\u5148\u7ea7\uff0c\u5185\u5bb9\u5c31\u662f\u8fd9\u4e2a\u4f18\u5148\u7ea7\u4e0b\u5bf9\u5e94\u7684 HostSetImpl PrioritySetImpl => std::vector<std::unique_ptr<HostSet>> host_sets_; \u4e00\u4e2a HostSetImpl \u5c31\u662f\u6309\u7167priority\u6765\u7ef4\u62a4\u4e00\u7ec4host\u96c6\u5408\uff0c\u6784\u9020\u51fd\u6570\u9700\u8981\u63d0\u4f9bpriority\uff0c\u7136\u540e\u901a\u8fc7updateHosts\u6765\u6dfb\u52a0host\u3002\u8fd9\u7ec4host\u53ef\u80fd\u6765\u81ea\u4e8e\u591a\u4e2a Locality HostSetImpl \u4f1a\u6839\u636e degraded \u3001 healthy \u3001 excluded \u7b49\u552f\u72ec\u5c06Host\u5206\u7c7b\uff0c\u7136\u540e\u9488\u5bf9\u6bcf\u4e00\u4e2a\u5206\u7c7b\u5c06Host\u6309\u7167 Locality \u8fdb\u884c\u5206\u7c7b\uff0c\u4e5f\u5c31\u662f\u901a\u8fc7 HostsPerLocalityImpl \u6765\u4fdd\u5b58 1 2 3 4 5 6 7 8 9 10 11 uint32_t priority_ ; uint32_t overprovisioning_factor_ ; HostVectorConstSharedPtr hosts_ ; HealthyHostVectorConstSharedPtr healthy_hosts_ ; DegradedHostVectorConstSharedPtr degraded_hosts_ ; ExcludedHostVectorConstSharedPtr excluded_hosts_ ; HostsPerLocalityConstSharedPtr hosts_per_locality_ { HostsPerLocalityImpl :: empty ()}; HostsPerLocalityConstSharedPtr healthy_hosts_per_locality_ { HostsPerLocalityImpl :: empty ()}; HostsPerLocalityConstSharedPtr degraded_hosts_per_locality_ { HostsPerLocalityImpl :: empty ()}; HostsPerLocalityConstSharedPtr excluded_hosts_per_locality_ { HostsPerLocalityImpl :: empty ()}; LocalityWeightsConstSharedPtr locality_weights_ ; \u4e00\u4e2a HostsPerLocalityImpl \u6309\u7167 locality \u7684\u7ef4\u5ea6\u7ec4\u7ec7host\u96c6\u5408\uff0c\u6838\u5fc3\u6570\u636e\u6210\u5458 std::vector<HostVector> \uff0c\u7b2c\u4e00\u4e2ahost\u96c6\u5408\u662flocal locality\u3002 1 2 // The first entry is for local hosts in the local locality. std :: vector < HostVector > hosts_per_locality_ ; \u4e00\u6b21host\u66f4\u65b0\u9700\u8981\u5c06\u6240\u6709\u7684host\u6309\u7167\u4f18\u5148\u7ea7\u3001locality\u3001healthy\u7b49\u7eac\u5ea6\u7ec4\u88c5\u6210\u5bf9\u5e94\u7684\u7ed3\u6784\uff0c\u800c PriorityStateManager \u5728\u5176\u4e2d\u5145\u5f53\u4e86\u91cd\u8981\u7684\u89d2\u8272\u3002 PriorityStateManager \u7ba1\u7406\u4e00\u4e2a\u96c6\u7fa4\u7684 PriorityState \uff0c\u800cPriorityState\u5219\u662f\u6309\u7167priority\u5206\u7ec4\u7ef4\u62a4\u7684\u4e00\u7ec4host\u548c\u5bf9\u5e94\u7684locality weight map\uff0c 1 2 3 using PriorityState = std :: vector < std :: pair < HostListPtr , LocalityWeightsMap >> ; using LocalityWeightsMap = std :: unordered_map < envoy :: config :: core :: v3 :: Locality , uint32_t , LocalityHash , LocalityEqualTo > ; \u66f4\u65b0host\u7684\u65f6\u5019\u5148\u7ed9\u8fd9\u6279host\u751f\u6210 PriorityState \uff0cvector\u7684\u4e0b\u6807\u662f\u4f18\u5148\u7ea7\uff0c\u4fdd\u5b58\u4e86\u4e00\u4e2a\u4f18\u5148\u7ea7\u4e0b\u7684\u6240\u6709host\uff0c\u4ee5\u53ca\u8fd9\u4e2a\u4f18\u5148\u7ea7\u5bf9\u5e94\u7684\u6240\u6709Locality\u548c\u6743\u91cd \u901a\u8fc7 PriorityStateManager::updateClusterPrioritySet \u5c31\u53ef\u4ee5\u66f4\u65b0\u96c6\u7fa4\u7684 PrioritySetImpl \u7684\u6307\u5b9a\u4f18\u5148\u7ea7\u4e0b\u7684\u6240\u6709Host\u3002\u8fd9\u4e2a\u51fd\u6570\u5185\u90e8\u4f1a\u901a\u8fc7 PriorityState \u62ff\u5230\u533a\u57df\u6743\u91cd \u7136\u540e\u5c06\u6240\u6709\u7684Host\u6309\u7167 Locality \u8fdb\u884c\u7ec4\u7ec7\u8d77\u6765\uff0c\u7136\u540e\u8ba1\u7b97\u51fa\u6bcf\u4e00\u4e2a Locality \u7684\u6743\u91cd\u3002\u6700\u540e\u8c03\u7528 PrioritySetImpl::updateHosts \u6765\u66f4\u65b0\u6307\u5b9a\u4f18\u5148\u7ea7\u7684Host\u3002 HostDescriptionImpl \u5bf9upstream\u4e3b\u673a\u7684\u4e00\u4e2a\u63cf\u8ff0\u63a5\u53e3\uff0c\u6bd4\u5982\u662f\u5426\u662fcanary\u3001metadata\u3001cluster\u3001healthChecjer\u3001hostname\u3001address\u7b49 HostImpl \u4ee3\u8868\u4e00\u4e2aupstream Host LocalityWeightsMap key\u662fLocality\uff0cvalue\u662f\u8fd9\u4e2aLocality\u7684\u6743\u91cd","title":"Cluster\u5206\u6790"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/envoy/cluster_manager/","text":"Cluster Manager\u521d\u59cb\u5316 \u6838\u5fc3\u63a5\u53e3\u4ecb\u7ecd ClusterManagerFactory \u901a\u8fc7\u8fd9\u4e2a\u63a5\u53e3\u53ef\u4ee5\u4eceProto\u6587\u4ef6\u4e2d\u521b\u5efa ClusterManager \uff0c\u521b\u5efa\u901a\u7528\u7684HTTP\u3001 TCP\u7b49\u8fde\u63a5\u6c60\u3001\u521b\u5efaCluster\u3001CDS\u3002 ProdClusterManagerFactory \u5b9e\u73b0\u4e86\u8fd9\u4e2a\u63a5\u53e3\u3002 \u901a\u8fc7\u8fd9\u4e2aFactory\u5c31\u53ef\u4ee5\u521b\u5efa\u6574\u4e2a ClusterManager \u6240\u9700\u8981\u7684\u4e00\u4e9b\u5fc5\u987b\u7684\u7ec4\u4ef6\u3002 ClusterManager \u7ba1\u7406\u6574\u4e2aCluster\uff0c\u901a\u8fc7\u8fd9\u4e2a\u63a5\u53e3\u6765\u65b0\u589e\u3001\u66f4\u65b0\u3001\u5220\u9664\u96c6\u7fa4\uff0c\u4e5f\u53ef\u4ee5\u83b7\u53d6\u5230\u6240\u6709\u7684 Clusters \uff0c\u4f46\u662f\u9700\u8981\u6ce8\u610f\u7684\u65f6\u5019\uff0c\u8fd9\u4e2a\u63a5\u53e3\u4e2d\u7684\u4e00\u4e9b\u65b9\u6cd5\u53ea\u80fd\u5728\u4e3b\u7ebf\u7a0b\u64cd\u4f5c\u5e76\u975e\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\uff0c \u53ea\u6709 getThreadLocalCluster \u65b9\u6cd5\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u5728worker\u7ebf\u7a0b\u4e2d\u5b89\u5168\u7684\u901a\u8fc7\u8fd9\u4e2a\u63a5\u53e3\u83b7\u53d6 ThreadLocalCluster \u7ed3\u6784\u3002 ThreadLocalCluster \u8fd9\u4e2a\u63a5\u53e3\u662f\u771f\u6b63\u66b4\u9732\u7ed9worker\u7ebf\u7a0b\u7684\uff0c\u8fd9\u4e2a\u8868\u793a\u7684\u662f\u4e00\u4e2a Cluster \uff0c\u901a\u8fc7\u8fd9\u4e2a\u63a5\u53e3\u53ef\u4ee5\u5b9e\u73b0\u521b\u5efa\u8fde\u63a5\u6c60\u3001\u83b7\u53d6 PrioritySet \u3001 ClusterInfo \u7b49\u4fe1\u606f\u3002 ClusterEntry \u5b9e\u73b0\u4e86\u8fd9\u4e2a\u63a5\u53e3\u3002 Cluster \u8fd9\u4e2a\u63a5\u53e3\u8868\u793a\u7684\u5c31\u662f\u4e00\u4e2a\u771f\u6b63\u7684Cluster\u5bf9\u8c61\uff0c\u5305\u542b\u4e86 Cluster \u5bf9\u8c61\u672c\u8eab\u4ee5\u53ca\u76f8\u5173\u7684 HealthChecker \u3001 Outlier::Detector \u3001 PrioritySet \u3002 \u901a\u8fc7\u8fd9\u4e2a\u63a5\u53e3\u53ef\u4ee5\u6765\u521d\u59cb\u5316\u8fd9\u4e2a\u96c6\u7fa4\u3002\u521d\u59cb\u5316\u7684\u8fc7\u7a0b\u5176\u5b9e\u5c31\u662f\u6839\u636e\u5bf9\u5e94\u96c6\u7fa4\u7684\u7c7b\u578b\u83b7\u53d6\u8fd9\u4e2a\u96c6\u7fa4\u4e0b\u7684\u673a\u5668\u8282\u70b9\u586b\u5145\u5230 PrioritySet \u4e2d\u3002 LoadBalancer \u8fd9\u4e2a\u662fLoad Balancer\u7684\u63a5\u53e3\uff0c\u7528\u4e8e\u4ece\u96c6\u7fa4\u4e2d\u6839\u636e\u914d\u7f6e\u7684\u7b56\u7565\u9009\u62e9\u4e3b\u673a\uff0c \u521d\u59cb\u5316\u8fc7\u7a0b \u542f\u52a8\u7684\u65f6\u5019\uff0c\u8f7d\u5165bootstrap\u914d\u7f6e\uff0c\u521b\u5efa ProdClusterManagerFactory 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 void InstanceImpl::initialize ( const Options & options , Network :: Address :: InstanceConstSharedPtr local_address , ComponentFactory & component_factory , ListenerHooks & hooks ) { ....... cluster_manager_factory_ = std :: make_unique < Upstream :: ProdClusterManagerFactory > ( * admin_ , Runtime :: LoaderSingleton :: get (), stats_store_ , thread_local_ , dns_resolver_ , * ssl_context_manager_ , * dispatcher_ , * local_info_ , * secret_manager_ , messageValidationContext (), * api_ , http_context_ , grpc_context_ , router_context_ , access_log_manager_ , * singleton_manager_ ); // Now the configuration gets parsed. The configuration may start setting // thread local data per above. See MainImpl::initialize() for why ConfigImpl // is constructed as part of the InstanceImpl and then populated once // cluster_manager_factory_ is available. config_ . initialize ( bootstrap_ , * this , * cluster_manager_factory_ ); ..... } \u4e0a\u9762\u4ee3\u7801\u4e2d\u7684\u7b2c15\u884c\u4f1a\u901a\u8fc7 ProdClusterManagerFactory \u5f00\u59cb\u521b\u5efa ClusterManager \u901a\u8fc7 ProdClusterManagerFactory \u7684 clusterManagerFromProto \u65b9\u6cd5\u521b\u5efa ClusterManager 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 ClusterManagerPtr ProdClusterManagerFactory::clusterManagerFromProto ( const envoy :: config :: bootstrap :: v3 :: Bootstrap & bootstrap ) { return ClusterManagerPtr { new ClusterManagerImpl ( bootstrap , * this , stats_ , tls_ , runtime_ , local_info_ , log_manager_ , main_thread_dispatcher_ , admin_ , validation_context_ , api_ , http_context_ , grpc_context_ , router_context_ )}; } void MainImpl::initialize ( const envoy :: config :: bootstrap :: v3 :: Bootstrap & bootstrap , Instance & server , Upstream :: ClusterManagerFactory & cluster_manager_factory ) { .... ENVOY_LOG ( info , \"loading {} cluster(s)\" , bootstrap . static_resources (). clusters (). size ()); cluster_manager_ = cluster_manager_factory . clusterManagerFromProto ( bootstrap ); .... } ClusterManagerImpl \u6784\u9020\u51fd\u6570\u5185\u90e8\u5f00\u59cb\u521b\u5efacds\u3001\u8f7d\u5165primary\u96c6\u7fa4\u3001static\u96c6\u7fa4\u7b49\u64cd\u4f5c\u3002 cluster\u7684load\u5206\u4e3a\u4e24\u4e2a\u9636\u6bb5\uff0c\u7b2c\u4e00\u9636\u6bb5\u4f1a\u8f7d\u5165\u6240\u6709\u7684primary\u96c6\u7fa4\uff0c\u7b2c\u4e8c\u9636\u6bb5\u624d\u4f1a\u8f7d\u5165secondary\u96c6\u7fa4\u3002 is_primary_cluster \u7528\u6765\u5224\u65ad\u4e00\u4e2a\u96c6\u7fa4\u662f\u5426\u662f primary \u96c6\u7fa4\u3002 \u76ee\u524d\u9664\u4e86EDS\u7c7b\u578b\u7684\u96c6\u7fa4\u5e76\u4e14\u4e0d\u662f\u57fa\u4e8e\u6587\u4ef6\u53d1\u73b0\u7684\u65b9\u5f0f\uff0c\u5176\u4ed6\u7684\u90fd\u662f primary \u96c6\u7fa4\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 // Cluster loading happens in two phases: first all the primary clusters are loaded, and then all // the secondary clusters are loaded. As it currently stands all non-EDS clusters and EDS which // load endpoint definition from file are primary and // (REST,GRPC,DELTA_GRPC) EDS clusters are secondary. This two phase // loading is done because in v2 configuration each EDS cluster individually sets up a // subscription. When this subscription is an API source the cluster will depend on a non-EDS // cluster, so the non-EDS clusters must be loaded first. auto is_primary_cluster = []( const envoy :: config :: cluster :: v3 :: Cluster & cluster ) -> bool { return cluster . type () != envoy :: config :: cluster :: v3 :: Cluster :: EDS || ( cluster . type () == envoy :: config :: cluster :: v3 :: Cluster :: EDS && cluster . eds_cluster_config (). eds_config (). config_source_specifier_case () == envoy :: config :: core :: v3 :: ConfigSource :: ConfigSourceSpecifierCase :: kPath ); }; \u5f00\u59cb\u8f7d\u5165primary\u96c6\u7fa4 \u4f18\u5148\u8f7d\u5165primary\u96c6\u7fa4\uff0c\u56e0\u4e3aSecondary\u96c6\u7fa4\u7684\u521d\u59cb\u5316\u53ef\u80fd\u4f1a\u4f9d\u8d56primary\u96c6\u7fa4\uff0c\u6bd4\u5982EDS\u7c7b\u578b\u7684Cluster\u5c31\u9700\u8981\u4f9d\u8d56\u4e00\u4e2aprimary\u7c7b\u578b\u7684xds\u96c6\u7fa4\u6765\u63d0\u4f9bxds server\u7684\u5730\u5740\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 // Build book-keeping for which clusters are primary. This is useful when we // invoke loadCluster() below and it needs the complete set of primaries. for ( const auto & cluster : bootstrap . static_resources (). clusters ()) { if ( is_primary_cluster ( cluster )) { primary_clusters_ . insert ( cluster . name ()); } } // Load all the primary clusters. for ( const auto & cluster : bootstrap . static_resources (). clusters ()) { if ( is_primary_cluster ( cluster )) { loadCluster ( cluster , \"\" , false , active_clusters_ ); } } \u5f00\u542f\u521b\u5efaadx\u901a\u9053\uff0c\u540e\u7eed\u8981\u5728\u8fd9\u4e2a\u901a\u9053\u4e0a\u521b\u5efacds api 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 // Now setup ADS if needed, this might rely on a primary cluster. // This is the only point where distinction between delta ADS and state-of-the-world ADS is made. // After here, we just have a GrpcMux interface held in ads_mux_, which hides // whether the backing implementation is delta or SotW. if ( dyn_resources . has_ads_config ()) { if ( dyn_resources . ads_config (). api_type () == envoy :: config :: core :: v3 :: ApiConfigSource :: DELTA_GRPC ) { ads_mux_ = std :: make_shared < Config :: NewGrpcMuxImpl > ( Config :: Utility :: factoryForGrpcApiConfigSource ( * async_client_manager_ , dyn_resources . ads_config (), stats , false ) -> create (), main_thread_dispatcher , * Protobuf :: DescriptorPool :: generated_pool () -> FindMethodByName ( Config :: Utility :: getAndCheckTransportVersion ( dyn_resources . ads_config ()) == envoy :: config :: core :: v3 :: ApiVersion :: V3 // TODO(htuch): consolidate with type_to_endpoint.cc, once we sort out the future // direction of that module re: https://github.com/envoyproxy/envoy/issues/10650. ? \"envoy.service.discovery.v3.AggregatedDiscoveryService.DeltaAggregatedResources\" : \"envoy.service.discovery.v2.AggregatedDiscoveryService.\" \"DeltaAggregatedResources\" ), Config :: Utility :: getAndCheckTransportVersion ( dyn_resources . ads_config ()), random_ , stats_ , Envoy :: Config :: Utility :: parseRateLimitSettings ( dyn_resources . ads_config ()), local_info ); } else { ads_mux_ = std :: make_shared < Config :: GrpcMuxImpl > ( local_info , Config :: Utility :: factoryForGrpcApiConfigSource ( * async_client_manager_ , dyn_resources . ads_config (), stats , false ) -> create (), main_thread_dispatcher , * Protobuf :: DescriptorPool :: generated_pool () -> FindMethodByName ( Config :: Utility :: getAndCheckTransportVersion ( dyn_resources . ads_config ()) == envoy :: config :: core :: v3 :: ApiVersion :: V3 // TODO(htuch): consolidate with type_to_endpoint.cc, once we sort out the future // direction of that module re: https://github.com/envoyproxy/envoy/issues/10650. ? \"envoy.service.discovery.v3.AggregatedDiscoveryService.\" \"StreamAggregatedResources\" : \"envoy.service.discovery.v2.AggregatedDiscoveryService.\" \"StreamAggregatedResources\" ), Config :: Utility :: getAndCheckTransportVersion ( dyn_resources . ads_config ()), random_ , stats_ , Envoy :: Config :: Utility :: parseRateLimitSettings ( dyn_resources . ads_config ()), bootstrap . dynamic_resources (). ads_config (). set_node_on_first_message_only ()); } } else { ads_mux_ = std :: make_unique < Config :: NullGrpcMuxImpl > (); } \u5f00\u59cb\u8f7d\u5165\u9759\u6001\u7684Secondary\u96c6\u7fa4 \u57fa\u4e8e\u6587\u4ef6\u7684\u8fd9\u79cdSecondary\u7c7b\u578b\u7684Cluster\u662f\u4e00\u4e2a\u4f8b\u5916\uff0c\u53ef\u4ee5\u4e0d\u4f9d\u8d56\u4efb\u4f55Primary Clusetr\u5c31\u53ef\u4ee5\u521d\u59cb\u5316\uff0c\u4e5f\u4e0d\u4f9d\u8d56xds\uff0c\u56e0\u6b64\u5728\u8fd9\u91cc\u5f52\u4e3aPrimary\u7c7b\u578b\u7684Cluster\u4f18\u5148\u521d\u59cb\u5316\u3002 1 2 3 4 5 6 7 8 9 10 11 ```C++ // After ADS is initialized, load EDS static clusters as EDS config may potentially need ADS. for (const auto& cluster : bootstrap.static_resources().clusters()) { // Now load all the secondary clusters. if (cluster.type() == envoy::config::cluster::v3::Cluster::EDS && cluster.eds_cluster_config().eds_config().config_source_specifier_case() != envoy::config::core::v3::ConfigSource::ConfigSourceSpecifierCase::kPath) { loadCluster(cluster, \"\", false, active_clusters_); } } ``` \u521b\u5efaLocalClusterParams\uff0c\u901a\u8fc7LocalClusterParams \u5982\u679c\u5b9a\u4e49\u4e86local cluster\u4f1a\u5728\u8fd9\u91cc\u8fdb\u884c\u521d\u59cb\u5316\uff0clocal cluster\u76ee\u7684\u4e3a\u4e86\u505azone aware\u7684load balancer\u3002\u6784\u5efaload balancer\u7684\u65f6\u5019\u9700\u8981\u7528\u5230\u3002 1 2 3 4 5 6 7 8 9 10 11 12 absl :: optional < ThreadLocalClusterManagerImpl :: LocalClusterParams > local_cluster_params ; if ( local_cluster_name_ ) { auto local_cluster = active_clusters_ . find ( local_cluster_name_ . value ()); if ( local_cluster == active_clusters_ . end ()) { throw EnvoyException ( fmt :: format ( \"local cluster '{}' must be defined\" , local_cluster_name_ . value ())); } local_cluster_params . emplace (); local_cluster_params -> info_ = local_cluster -> second -> cluster (). info (); local_cluster_params -> load_balancer_factory_ = local_cluster -> second -> loadBalancerFactory (); local_cluster -> second -> setAddedOrUpdated (); } \u521b\u5efa ThreadLocalClusterManagerImpl \uff0c\u8fd9\u4e2a\u7ed3\u6784\u662fThread Local\u7684\uff0c\u53ef\u4ee5\u5b89\u5168\u7684\u88abwork\u7ebf\u7a0b\u8bbf\u95ee\u3002 \u867d\u7136\u6211\u4eec\u6709 ClusterManager \u63a5\u53e3\uff0c\u4f46\u662f\u8fd9\u4e2a\u63a5\u53e3\u662f\u63d0\u4f9b\u4e2a\u4e3b\u7ebf\u7a0b\u7684\uff0c\u7528\u6765\u6dfb\u52a0\u3001\u66f4\u65b0\u3001\u5220\u9664\u96c6\u7fa4\u7684\uff0c\u5e76\u975e\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\u3002\u800c\u4e14\u6211\u4eec\u5728worker\u7ebf\u7a0b\u4e5f\u4e0d\u9700\u8981\u505a\u96c6\u7fa4\u7684\u6dfb\u52a0\u3001\u66f4\u65b0\u548c\u5220\u9664\u3002 \u56e0\u6b64\u8fd9\u91cc\u6709\u4e86 ThreadLocalClusterManagerImpl \uff0c\u4ed6\u5b9e\u73b0\u4e86 ThreadLocalCluster \u63a5\u53e3\uff0c\u5e76\u63d0\u4f9b\u4e86\u4e00\u4e9b\u6709\u9650\u7684\u4e00\u4e9b\u63a5\u53e3\u63d0\u4f9b\u7ed9worker\u7ebf\u7a0b\u6765\u8bbf\u95ee\u6211\u4eec\u7684Cluster\u3002 1 2 3 4 5 // Once the initial set of static bootstrap clusters are created (including the local cluster), // we can instantiate the thread local cluster manager. tls_ -> set ([ this , local_cluster_name ]( Event :: Dispatcher & dispatcher ) -> ThreadLocal :: ThreadLocalObjectSharedPtr { return std :: make_shared < ThreadLocalClusterManagerImpl > ( * this , dispatcher , local_cluster_name ); \u521b\u5efacds api \u8fd9\u91cc\u901a\u8fc7\u6211\u4eec\u7684 ClusterManagerFactory \u521b\u5efacds api\uff0c\u5728\u521d\u59cb\u5316Secondary Cluster\u7684\u65f6\u5019\u4f1a\u7528\u5230cds api\u3002 1 2 3 4 5 6 7 // We can now potentially create the CDS API once the backing cluster exists. if ( dyn_resources . has_cds_config ()) { cds_api_ = factory_ . createCds ( dyn_resources . cds_config (), * this ); init_helper_ . setCds ( cds_api_ . get ()); } else { init_helper_ . setCds ( nullptr ); } \u5f00\u59cb\u5bf9\u6240\u6709\u9759\u6001\u96c6\u7fa4\u8fdb\u884c\u521d\u59cb\u5316 \u5728\u6700\u540e\u904d\u5386\u6211\u4eec\u7684\u6240\u6709Primary\u96c6\u7fa4\uff0c\u5bf9\u8fd9\u4e9b\u96c6\u7fa4\u8fdb\u884c\u521d\u59cb\u5316\u3002 1 2 3 4 5 6 // Proceed to add all static bootstrap clusters to the init manager. This will immediately // initialize any primary clusters. Post-init processing further initializes any thread // aware load balancer and sets up the per-worker host set updates. for ( auto & cluster : active_clusters_ ) { init_helper_ . addCluster ( * cluster . second ); } Primary Cluster\u521d\u59cb\u5316\u5b8c\u6210\u540e\u4f1a\u8fdb\u884cRTDS\u7684\u521d\u59cb\u5316 \u56e0\u4e3a\u540e\u7eed\u7684\u5176\u4ed6\u7ec4\u4ef6\u5728\u8fdb\u884c\u521d\u59cb\u5316\u7684\u65f6\u5019\u4f1a\u4f9d\u8d56RTDS\uff0c\u56e0\u6b64\u9700\u8981\u5148\u521d\u59cb\u5316RTDS 1 2 3 4 5 6 clusterManager (). setPrimaryClustersInitializedCb ( [ this ]() { onClusterManagerPrimaryInitializationComplete (); }); void InstanceImpl::onClusterManagerPrimaryInitializationComplete () { // If RTDS was not configured the `onRuntimeReady` callback is immediately invoked. Runtime :: LoaderSingleton :: get (). startRtdsSubscriptions ([ this ]() { onRuntimeReady (); }); } RTDS\u521d\u59cb\u5316\u5b8c\u6210\u540e\u5f00\u59cb\u8fdb\u884cSecondary Cluster\u7684\u521d\u59cb\u5316 \u5728\u8fdb\u884cSecondary Cluster\u7684\u65f6\u5019\u4f1a\u901a\u8fc7 maybeFinishInitialize \u542f\u52a8cds\uff0c\u7136\u540e\u7b49\u5f85 Secondary Cluster \u5b8c\u6210\u521d\u59cb\u5316\u3002 Note maybeFinishInitialize \u7684\u521d\u59cb\u5316\u89c1\u4e0b\u6587\u5177\u4f53\u5206\u6790 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 void InstanceImpl::onRuntimeReady () { // Begin initializing secondary clusters after RTDS configuration has been applied. // Initializing can throw exceptions, so catch these. try { clusterManager (). initializeSecondaryClusters ( bootstrap_ ); } catch ( const EnvoyException & e ) { ENVOY_LOG ( warn , \"Skipping initialization of secondary cluster: {}\" , e . what ()); shutdown (); } ...... } void ClusterManagerImpl::initializeSecondaryClusters ( const envoy :: config :: bootstrap :: v3 :: Bootstrap & bootstrap ) { init_helper_ . startInitializingSecondaryClusters (); const auto & cm_config = bootstrap . cluster_manager (); if ( cm_config . has_load_stats_config ()) { const auto & load_stats_config = cm_config . load_stats_config (); load_stats_reporter_ = std :: make_unique < LoadStatsReporter > ( local_info_ , * this , stats_ , Config :: Utility :: factoryForGrpcApiConfigSource ( * async_client_manager_ , load_stats_config , stats_ , false ) -> create (), Config :: Utility :: getAndCheckTransportVersion ( load_stats_config ), dispatcher_ ); } } \u6838\u5fc3\u65b9\u6cd5\u548c\u7c7b\u5206\u6790 Note \u65e0\u8bba\u662fPrimary cluster\u3001\u8fd8\u662fSecondary Cluster\uff0c\u6700\u7ec8\u90fd\u662f\u901a\u8fc7loadCluster\u628aCluster Protobuf\u53d8\u6210Cluster\u5bf9\u8c61\u3002\u8fd9\u4e24\u8005\u7684\u533a\u522b\u5c31\u662f added_via_api \uff0c\u524d\u8005\u4e3afalse\u3001\u540e\u8005\u4e3atrue\u3002\u8fd9\u4e2a\u53c2\u6570\u8868\u660e\u662f\u5426\u662f\u901a\u8fc7API\u83b7\u53d6\u7684\u3002\u5f88\u660e\u663ePrimary\u90fd\u4e0d\u662f\u901a\u8fc7API\u6765\u83b7\u53d6\u7684\u3002 1 2 3 ClusterManagerImpl :: loadCluster ( const envoy :: config :: cluster :: v3 :: Cluster & cluster , const std :: string & version_info , bool added_via_api , ClusterMap & cluster_map ) \u8fd9\u4e2a\u65b9\u6cd5\u4e3b\u8981\u505a\u4e86\u4ee5\u4e0b\u51e0\u4ef6\u4e8b: \u901a\u8fc7ClusterManagerFactory\u4ee5\u53caCluster\u7684Protobuf\u6765\u521b\u5efa Cluster \u548c ThreadAwareLoadBalancer 1 2 3 4 std :: pair < ClusterSharedPtr , ThreadAwareLoadBalancerPtr > new_cluster_pair = factory_ . clusterFromProto ( cluster , * this , outlier_event_logger_ , added_via_api ); auto & new_cluster = new_cluster_pair . first ; Cluster & cluster_reference = * new_cluster ; Cluster \u662f\u5bf9\u96c6\u7fa4\u7684\u62bd\u8c61\uff0c\u800c ThreadAwareLoadBalancer \u5219\u662f\u5bf9\u8fd9\u4e2a\u96c6\u7fa4 Load Balancer \u7684\u62bd\u8c61\uff0c\u8fd9\u4e2aload balancer\u662f\u611f\u77e5\u7ebf\u7a0b\u7684\u3002 \u5728\u5b9e\u73b0\u81ea\u5b9a\u4e49\u96c6\u7fa4\u7684\u65f6\u5019\u9700\u8981\u81ea\u5df1\u6765\u5b9e\u73b0\uff0c\u76ee\u524dEnvoy\u4e2d\u53ea\u6709 Dynamic forward proxy \u3001 Aggregate \u3001 redis \u7b49\u4e09\u79cd\u7c7b\u4f3c\u7684\u96c6\u7fa4\u662f\u5b9e\u73b0\u4e86 ThreadAwareLoadBalancer \u63a5\u53e3\uff0c \u4ed6\u4eec\u6709\u81ea\u5df1\u4e13\u7528\u7684LoadBalancer\uff0c\u5176\u4ed6\u7684\u96c6\u7fa4\u7528\u7684\u90fd\u662fEnvoy\u5185\u7f6e\u7684\u7684\u51e0\u4e2a\u6807\u51c6Load Balancer\u5b9e\u73b0\u3002\u6bd4\u5982 Aggregate \u96c6\u7fa4\u7684\u6784\u9020\u51fd\u6570\u5982\u4e0b\uff0c\u4ed6\u521b\u5efa\u4e86 AggregateThreadAwareLoadBalancer \uff0c \u5c5e\u4e8e\u8fd9\u4e2a\u96c6\u7fa4\u7279\u6709\u7684LoadBalancer 1 2 3 4 5 6 7 8 9 10 11 12 13 14 std :: pair < Upstream :: ClusterImplBaseSharedPtr , Upstream :: ThreadAwareLoadBalancerPtr > ClusterFactory :: createClusterWithConfig ( const envoy :: config :: cluster :: v3 :: Cluster & cluster , const envoy :: extensions :: clusters :: aggregate :: v3 :: ClusterConfig & proto_config , Upstream :: ClusterFactoryContext & context , Server :: Configuration :: TransportSocketFactoryContextImpl & socket_factory_context , Stats :: ScopePtr && stats_scope ) { auto new_cluster = std :: make_shared < Cluster > ( cluster , proto_config , context . clusterManager (), context . runtime (), context . api (). randomGenerator (), socket_factory_context , std :: move ( stats_scope ), context . addedViaApi ()); auto lb = std :: make_unique < AggregateThreadAwareLoadBalancer > ( * new_cluster ); return std :: make_pair ( new_cluster , std :: move ( lb )); } \u8bbe\u7f6ehealthChecker\u3001outlierDetector\u7b49callback 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 if ( new_cluster -> healthChecker () != nullptr ) { new_cluster -> healthChecker () -> addHostCheckCompleteCb ( [ this ]( HostSharedPtr host , HealthTransition changed_state ) { if ( changed_state == HealthTransition :: Changed && host -> healthFlagGet ( Host :: HealthFlag :: FAILED_ACTIVE_HC )) { postThreadLocalHealthFailure ( host ); } }); } if ( new_cluster -> outlierDetector () != nullptr ) { new_cluster -> outlierDetector () -> addChangedStateCb ([ this ]( HostSharedPtr host ) { if ( host -> healthFlagGet ( Host :: HealthFlag :: FAILED_OUTLIER_CHECK )) { postThreadLocalHealthFailure ( host ); } }); } \u8fd9\u4e48\u505a\u7684\u76ee\u7684\u662f\u56e0\u4e3a\uff0c\u5f53\u5f00\u542f\u5065\u5eb7\u68c0\u67e5\u548c\u79bb\u7fa4\u68c0\u6d4b\u7684\u65f6\u5019\uff0c\u6709\u51fa\u73b0\u5f02\u5e38\u673a\u5668\u9700\u8981\u901a\u77e5\u6240\u6709\u7684\u7ebf\u7a0b\u8fdb\u884c\u8fde\u63a5\u7684\u5904\u7406\uff0c\u6bd4\u5982drain connection\u3001close conntions\u7136\u540e\u4ece\u8fde\u63a5\u6c60\u4e2d\u79fb\u9664\u7b49\u64cd\u4f5c\u3002 \u4eceClusterMap\u4e2d\u67e5\u627eCluster\uff0c\u5982\u679c\u5df2\u7ecf\u5b58\u5728\u5c31\u66ff\u6362\uff0c\u6ca1\u6709\u5219\u65b0\u589e 1 2 3 4 5 6 7 8 9 10 11 12 13 14 ClusterDataPtr result ; auto cluster_entry_it = cluster_map . find ( cluster_reference . info () -> name ()); if ( cluster_entry_it != cluster_map . end ()) { result = std :: exchange ( cluster_entry_it -> second , std :: make_unique < ClusterData > ( cluster , version_info , added_via_api , std :: move ( new_cluster ), time_source_ )); } else { bool inserted = false ; std :: tie ( cluster_entry_it , inserted ) = cluster_map . emplace ( cluster_reference . info () -> name (), std :: make_unique < ClusterData > ( cluster , version_info , added_via_api , std :: move ( new_cluster ), time_source_ )); ASSERT ( inserted ); } \u7ed9RingHash\u3001MaglevLoadBalancer\u7b49\u521b\u5efaThreadAware load balancer 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 // If an LB is thread aware, create it here. The LB is not initialized until cluster pre-init // finishes. For RingHash/Maglev don't create the LB here if subset balancing is enabled, // because the thread_aware_lb_ field takes precedence over the subset lb). if ( cluster_reference . info () -> lbType () == LoadBalancerType :: RingHash ) { if ( ! cluster_reference . info () -> lbSubsetInfo (). isEnabled ()) { cluster_entry_it -> second -> thread_aware_lb_ = std :: make_unique < RingHashLoadBalancer > ( cluster_reference . prioritySet (), cluster_reference . info () -> stats (), cluster_reference . info () -> statsScope (), runtime_ , random_ , cluster_reference . info () -> lbRingHashConfig (), cluster_reference . info () -> lbConfig ()); } } else if ( cluster_reference . info () -> lbType () == LoadBalancerType :: Maglev ) { if ( ! cluster_reference . info () -> lbSubsetInfo (). isEnabled ()) { cluster_entry_it -> second -> thread_aware_lb_ = std :: make_unique < MaglevLoadBalancer > ( cluster_reference . prioritySet (), cluster_reference . info () -> stats (), cluster_reference . info () -> statsScope (), runtime_ , random_ , cluster_reference . info () -> lbMaglevConfig (), cluster_reference . info () -> lbConfig ()); } } else if ( cluster_reference . info () -> lbType () == LoadBalancerType :: ClusterProvided ) { cluster_entry_it -> second -> thread_aware_lb_ = std :: move ( new_cluster_pair . second ); } Note Envoy\u7684Cluster\u521d\u59cb\u5316\u662f\u4e00\u4e2a\u72b6\u6001\u673a\u3001\u800c\u4e14\u8fd8\u662f\u4e00\u4e2a\u5f02\u6b65\u7684\u8fc7\u7a0b\uff0c\u6bcf\u4e00\u6b65\u7684\u521d\u59cb\u5316\u9700\u8981\u7b49\u5f85\u521d\u59cb\u5316\u5b8c\u6210\u624d\u80fd\u8fdb\u884c\u4e0b\u4e00\u6b65\u7684\u521d\u59cb\u5316\uff0c\u6240\u4ee5\u6211\u4eec\u4f1a\u770b\u5230\u4ee3\u7801\u4e2d\u7ecf\u5e38\u4f1a\u53bb\u8c03\u7528 maybeFinishInitialize \u6765\u5224\u65ad\u5f53\u524d\u662f\u5426\u5b8c\u6210\u4e86\u521d\u59cb\u5316\uff0c\u5e76\u8fdb\u884c\u72b6\u6001\u673a\u7684\u66f4\u65b0\u3002 1 void ClusterManagerInitHelper :: maybeFinishInitialize () \u5982\u679c\u8fd8\u6ca1\u6709\u8fdb\u884cPrimary Cluster\u7b49\u5f85\u8f7d\u5165\u4ee5\u53ca\u5728\u7b49\u5f85CdsApi\u521d\u59cb\u5316\uff0c\u5219\u76f4\u63a5\u8df3\u8fc7\u3002 1 2 3 4 5 6 // Do not do anything if we are still doing the initial static load or if we are waiting for // CDS initialize. ENVOY_LOG ( debug , \"maybe finish initialize state: {}\" , enumToInt ( state_ )); if ( state_ == State :: Loading || state_ == State :: WaitingToStartCdsInitialization ) { return ; } \u56e0\u4e3a\u5982\u679c\u5904\u4e8e\u8fd9\u4e24\u4e2a\u72b6\u6001\u7684\u8bdd\uff0c\u8868\u660e\u8fd8\u6ca1\u6709\u5f00\u59cb\u521d\u59cb\u5316Primary Cluster\u3001\u6216\u8005\u662f\u8fd8\u6ca1\u5f00\u59cb\u8fdb\u884cSecondary\u7684\u521d\u59cb\u5316\u3002 \u53ea\u6709\u7b49\u5f85Primary Cluster\u7684\u521d\u59cb\u5316\u6216\u8005\u662f\u7b49\u5f85Secondary Clusetr\u521d\u59cb\u5316\u8fd9\u4e24\u7c7b\u72b6\u6001\u624d\u9700\u8981\u7ee7\u7eed\u8fdb\u884c\u5224\u65ad 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 ASSERT ( state_ == State :: WaitingToStartSecondaryInitialization || state_ == State :: CdsInitialized || state_ == State :: WaitingForPrimaryInitializationToComplete ); ENVOY_LOG ( debug , \"maybe finish initialize primary init clusters empty: {}\" , primary_init_clusters_ . empty ()); // If we are still waiting for primary clusters to initialize, do nothing. if ( ! primary_init_clusters_ . empty ()) { return ; } else if ( state_ == State :: WaitingForPrimaryInitializationToComplete ) { state_ = State :: WaitingToStartSecondaryInitialization ; if ( primary_clusters_initialized_callback_ ) { primary_clusters_initialized_callback_ (); } return ; } \u9996\u5148\u5224\u65ad\u662f\u5426\u5b8c\u6210\u4e86Primary Cluster\u7684\u521d\u59cb\u5316\uff0cPrimary Cluster\u521d\u59cb\u5316\u5b8c\u6210\u7684\u6807\u5fd7\u5c31\u662fprimary_init_clusters_\u4e3a\u7a7a\uff0c\u56e0\u4e3a\u8f7d\u5165\u7684\u65f6\u5019\u4f1a\u628a\u6240\u6709\u7684Primary CLuster\u5b58\u8fdb\u53bb\uff0c \u7136\u540e\u904d\u5386\u8fd9\u4e2a\u5217\u8868\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u521d\u59cb\u5316\u5b8c\u6210\u7684\u8bdd\u5219\u4ece\u8fd9\u4e2a\u5217\u8868\u4e2d\u79fb\u9664\uff0c\u56e0\u6b64\u8fd9\u4e2a\u5217\u8868\u4e3a\u7a7a\u5c31\u8868\u660e\u521d\u59cb\u5316\u5b8c\u6210\u4e86\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 ClusterManagerInitHelper :: addCluster ( ClusterManagerCluster & cm_cluster ) { .... if ( cluster . initializePhase () == Cluster :: InitializePhase :: Primary ) { // Remove the previous cluster before the cluster object is destroyed. primary_init_clusters_ . remove_if ( [ name_to_remove = cluster . info () -> name ()]( ClusterManagerCluster * cluster_iter ) { return cluster_iter -> cluster (). info () -> name () == name_to_remove ; }); primary_init_clusters_ . push_back ( & cm_cluster ); cluster . initialize ( initialize_cb ); } void ClusterManagerInitHelper :: removeCluster ( ClusterManagerCluster & cluster ) { ..... // There is a remote edge case where we can remove a cluster via CDS that has not yet been // initialized. When called via the remove cluster API this code catches that case. std :: list < ClusterManagerCluster *>* cluster_list ; if ( cluster . cluster (). initializePhase () == Cluster :: InitializePhase :: Primary ) { cluster_list = & primary_init_clusters_ ; } else { ASSERT ( cluster . cluster (). initializePhase () == Cluster :: InitializePhase :: Secondary ); cluster_list = & secondary_init_clusters_ ; } // It is possible that the cluster we are removing has already been initialized, and is not // present in the initializer list. If so, this is fine. cluster_list -> remove ( & cluster ); } \u5982\u679cPrimary\u96c6\u7fa4\u90fd\u521d\u59cb\u5316\u5b8c\u6210\u4e86\uff0c\u90a3\u63a5\u4e0b\u6765\u5c31\u770b\u662f\u5426\u662f\u5728\u505aSecondary cluster\u7684\u521d\u59cb\u5316 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 // If we are still waiting for secondary clusters to initialize, see if we need to first call // initialize on them. This is only done once. ENVOY_LOG ( debug , \"maybe finish initialize secondary init clusters empty: {}\" , secondary_init_clusters_ . empty ()); if ( ! secondary_init_clusters_ . empty ()) { if ( ! started_secondary_initialize_ ) { ENVOY_LOG ( info , \"cm init: initializing secondary clusters\" ); // If the first CDS response doesn't have any primary cluster, ClusterLoadAssignment // should be already paused by CdsApiImpl::onConfigUpdate(). Need to check that to // avoid double pause ClusterLoadAssignment. Config :: ScopedResume maybe_resume_eds ; if ( cm_ . adsMux ()) { const auto type_urls = Config :: getAllVersionTypeUrls < envoy :: config :: endpoint :: v3 :: ClusterLoadAssignment > (); maybe_resume_eds = cm_ . adsMux () -> pause ( type_urls ); } initializeSecondaryClusters (); } return ; } secondary_init_clusters_ \u4e0d\u4e3a\u7a7a\u8868\u660eSecondary cluster\u8fd8\u6ca1\u6709\u5f00\u59cb\u521d\u59cb\u5316\u6216\u8005\u6ca1\u521d\u59cb\u5316\u5b8c\u6210\uff0c\u8fd9\u4e2a\u65f6\u5019\u5982\u679c started_secondary_initialize_ \u4e3afalse\uff0c\u8868\u660e \u6ca1\u6709\u5f00\u59cb\u521d\u59cb\u5316\u3002\u6b64\u65f6\u901a\u8fc7\u8c03\u7528 initializeSecondaryClusters \u5f00\u59cb\u6b63\u5728\u7684\u8fdb\u884cSecondary\u7684\u521d\u59cb\u5316\u3002 \u521d\u59cb\u5316CDS\uff0c\u5426\u5219\u6ca1\u6709\u62ff\u5230\u6240\u6709\u7684cluster\u6ca1\u529e\u6cd5\u8fdb\u884cSeondary cluster\u7684\u521d\u59cb\u5316 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // At this point, if we are doing static init, and we have CDS, start CDS init. Otherwise, move // directly to initialized. started_secondary_initialize_ = false ; ENVOY_LOG ( debug , \"maybe finish initialize cds api ready: {}\" , cds_ != nullptr ); if ( state_ == State :: WaitingToStartSecondaryInitialization && cds_ ) { ENVOY_LOG ( info , \"cm init: initializing cds\" ); state_ = State :: WaitingToStartCdsInitialization ; cds_ -> initialize (); } else { ENVOY_LOG ( info , \"cm init: all clusters initialized\" ); state_ = State :: AllClustersInitialized ; if ( initialized_callback_ ) { initialized_callback_ (); } } cds\u521d\u59cb\u5316\u5b8c\u6210\u540e\u4f1a\u53d1\u9001xds\u8bf7\u6c42\u7ed9\u63a7\u5236\u9762\u83b7\u53d6\u6240\u6709\u7684cluster\uff0c\u5f53\u6536\u5230\u6240\u6709\u7684cluster\u7684\u65f6\u5019\uff0c\u5c31\u89e6\u53d1cds\u8bbe\u7f6e\u7684callback\uff0c\u5728callback\u91cc\u9762\u4f1a\u518d\u6b21\u89e6\u53d1 maybeFinishInitialize \u8fd9\u4e2a\u65f6\u5019\u5c31\u8d70\u5230\u4e86\u6b65\u9aa43\u4e2d\u7684\u903b\u8f91\u4e86\u3002 1 2 3 4 5 6 7 8 9 10 11 void ClusterManagerInitHelper::setCds ( CdsApi * cds ) { ASSERT ( state_ == State :: Loading ); cds_ = cds ; if ( cds_ ) { cds_ -> setInitializedCb ([ this ]() -> void { ASSERT ( state_ == State :: WaitingToStartCdsInitialization ); state_ = State :: CdsInitialized ; maybeFinishInitialize (); }); } } \u6700\u540e\u603b\u7ed3\u4e0b\uff0cmaybeFinishInitialize\u7684\u51e0\u4e2a\u8c03\u7528\u65f6\u673a: \u52a0\u8f7d\u5b8c\u6240\u6709\u7684static cluster\u540e\u4f1a\u8c03\u7528\u4e00\u6b21 \u56e0\u4e3a\u9700\u8981\u8bbe\u7f6e\u8fdb\u5165\u5230Secondary cluster\u7684\u521d\u59cb\u5316\u7684\u72b6\u6001\uff0c\u5982\u679cPrimary Cluster\u5df2\u7ecf\u521d\u59cb\u5316\u5b8c\u6210\u4e86\uff0c\u90a3\u5c31\u76f4\u63a5\u8fd4\u56de\uff0c\u5e76\u6210\u529f\u8bbe\u7f6e WaitingToStartSecondaryInitialization \u72b6\u6001\u3002 \u5426\u5219\u5c31\u76f4\u63a5\u8fd4\u56de\u3002 1 2 3 4 5 6 7 void ClusterManagerInitHelper::onStaticLoadComplete () { ASSERT ( state_ == State :: Loading ); // After initialization of primary clusters has completed, transition to // waiting for signal to initialize secondary clusters and then CDS. state_ = State :: WaitingForPrimaryInitializationToComplete ; maybeFinishInitialize (); } \u4e00\u4e2a\u96c6\u7fa4\u521d\u59cb\u5316\u5b8c\u6210\u540e\uff0c\u4ece\u5217\u8868\u4e2d\u79fb\u9664Cluster\u65f6\u3002 Cluster\u521d\u59cb\u5316\u5b8c\u6210\u540e\u5c31\u4f1a\u8c03\u7528 removeCluster \u5c06Cluster\u4ece\u5217\u8868\u4e2d\u79fb\u9664\uff0c\u6240\u6709\u7684Cluster\u90fd\u521d\u59cb\u5316\u5b8c\u624d\u8ba4\u4e3a\u662f\u521d\u59cb\u5316\u5b8c\u6210\uff0c\u56e0\u6b64\u6bcf\u6b21\u4e00\u4e2aCluster\u521d\u59cb\u5316\u5b8c\u6210\u540e\u5c31 \u8c03\u7528\u4e00\u6b21 maybeFinishInitialize() \u5224\u65ad\u662f\u5426\u5b8c\u6210\u4e86\u521d\u59cb\u5316\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 void ClusterManagerInitHelper::removeCluster ( ClusterManagerCluster & cluster ) { if ( state_ == State :: AllClustersInitialized ) { return ; } // There is a remote edge case where we can remove a cluster via CDS that has not yet been // initialized. When called via the remove cluster API this code catches that case. std :: list < ClusterManagerCluster *>* cluster_list ; if ( cluster . cluster (). initializePhase () == Cluster :: InitializePhase :: Primary ) { cluster_list = & primary_init_clusters_ ; } else { ASSERT ( cluster . cluster (). initializePhase () == Cluster :: InitializePhase :: Secondary ); cluster_list = & secondary_init_clusters_ ; } // It is possible that the cluster we are removing has already been initialized, and is not // present in the initializer list. If so, this is fine. cluster_list -> remove ( & cluster ); ENVOY_LOG ( debug , \"cm init: init complete: cluster={} primary={} secondary={}\" , cluster . cluster (). info () -> name (), primary_init_clusters_ . size (), secondary_init_clusters_ . size ()); maybeFinishInitialize (); } \u5f00\u59cb\u8fdb\u884cSecondary Cluster\u521d\u59cb\u5316 Primary Cluster\u521d\u59cb\u5316\u5b8c\u6210\u540e\u4f1a\u5728\u5176callback\u4e2d\u5f00\u59cb\u7ee7\u7eed\u8fdb\u884cSecondary Cluster\u7684\u521d\u59cb\u5316\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 clusterManager (). setPrimaryClustersInitializedCb ( [ this ]() { onClusterManagerPrimaryInitializationComplete (); }); void InstanceImpl::onClusterManagerPrimaryInitializationComplete () { // If RTDS was not configured the `onRuntimeReady` callback is immediately invoked. Runtime :: LoaderSingleton :: get (). startRtdsSubscriptions ([ this ]() { onRuntimeReady (); }); } void InstanceImpl::onRuntimeReady () { // Begin initializing secondary clusters after RTDS configuration has been applied. // Initializing can throw exceptions, so catch these. try { clusterManager (). initializeSecondaryClusters ( bootstrap_ ); } catch ( const EnvoyException & e ) { ENVOY_LOG ( warn , \"Skipping initialization of secondary cluster: {}\" , e . what ()); shutdown (); } ....... } 1 2 3 4 5 void ClusterManagerInitHelper::startInitializingSecondaryClusters () { ASSERT ( state_ == State :: WaitingToStartSecondaryInitialization ); ENVOY_LOG ( debug , \"continue initializing secondary clusters\" ); maybeFinishInitialize (); } CDS\u521d\u59cb\u5316\u5b8c\u6210\u65f6 CDS\u5f00\u59cb\u521d\u59cb\u5316\uff0c\u521d\u59cb\u5316\u5b8c\u6210\u540e\u5728\u5176callback\u4e2d\u518d\u6b21\u8c03\u7528 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 void ClusterManagerInitHelper::maybeFinishInitialize () { // At this point, if we are doing static init, and we have CDS, start CDS init. Otherwise, move // directly to initialized. started_secondary_initialize_ = false ; ENVOY_LOG ( debug , \"maybe finish initialize cds api ready: {}\" , cds_ != nullptr ); if ( state_ == State :: WaitingToStartSecondaryInitialization && cds_ ) { ENVOY_LOG ( info , \"cm init: initializing cds\" ); state_ = State :: WaitingToStartCdsInitialization ; cds_ -> initialize (); ..... } void ClusterManagerInitHelper :: setCds ( CdsApi * cds ) { ASSERT ( state_ == State :: Loading ); cds_ = cds ; if ( cds_ ) { cds_ -> setInitializedCb ([ this ]() -> void { ASSERT ( state_ == State :: WaitingToStartCdsInitialization ); state_ = State :: CdsInitialized ; maybeFinishInitialize (); }); } } Note \u6bcf\u4e00\u4e2aCluster\u521d\u59cb\u5316\u5b8c\u6210\u540e\u90fd\u4f1a\u5728\u5176callback\u4e2d\u8c03\u7528\u8fd9\u4e2a\u65b9\u6cd5\u8fdb\u884cCluster\u989d\u5916\u7684\u521d\u59cb\u5316\u3002\u5728\u8fd9\u4e2a\u521d\u59cb\u5316\u4e2d\u4f1a\u6dfb\u52a0\u4e00\u4e9bcallback \u6700\u540e\u89e6\u53d1thread local cluster\u7684\u66f4\u65b0\uff0c\u4ee5\u786e\u4fdd\u6bcf\u4e00\u4e2athread\u90fd\u5305\u542b\u4e86\u6700\u65b0\u7684cluster\u5185\u5bb9\u4e86\u3002 1 void ClusterManagerImpl::onClusterInit ( ClusterManagerCluster & cm_cluster ); \u5982\u679c\u662f\u4e00\u4e2awarm cluster\u5219\u4f1a\u88ab\u8f6c\u6362\u6210active cluster 1 2 3 4 5 6 7 8 9 10 11 12 13 // This routine is called when a cluster has finished initializing. The cluster has not yet // been setup for cross-thread updates to avoid needless updates during initialization. The order // of operations here is important. We start by initializing the thread aware load balancer if // needed. This must happen first so cluster updates are heard first by the load balancer. // Also, it assures that all of clusters which this function is called should be always active. auto & cluster = cm_cluster . cluster (); auto cluster_data = warming_clusters_ . find ( cluster . info () -> name ()); // We have a situation that clusters will be immediately active, such as static and primary // cluster. So we must have this prevention logic here. if ( cluster_data != warming_clusters_ . end ()) { clusterWarmingToActive ( cluster . info () -> name ()); updateClusterCounts (); } \u5f00\u59cb\u521d\u59cb\u5316thread aware load balancer 1 2 3 4 5 cluster_data = active_clusters_ . find ( cluster . info () -> name ()); if ( cluster_data -> second -> thread_aware_lb_ != nullptr ) { cluster_data -> second -> thread_aware_lb_ -> initialize (); } \u8bbe\u7f6epriority set callback \u8fd9\u4e00\u6b65\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u5728host\u53d1\u751f\u53d8\u5316\u7684\u65f6\u5019\u505a\u4e00\u4e9b\u4e8b\u60c5\uff0c\u6bd4\u5982 addMemberUpdateCb \u4f1a\u5728host\u79fb\u9664\u7684\u65f6\u5019\u505a\u4e00\u4e9bdrain connection\u7684\u64cd\u4f5c\u3002 \u800c addPriorityUpdateCb \u5219\u9700\u8981\u89e6\u53d1ThreadLocalCluster\u7684\u66f4\u65b0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 // Now setup for cross-thread updates. cluster . prioritySet (). addMemberUpdateCb ( [ & cluster , this ]( const HostVector & , const HostVector & hosts_removed ) -> void { if ( cluster . info () -> lbConfig (). close_connections_on_host_set_change ()) { for ( const auto & host_set : cluster . prioritySet (). hostSetsPerPriority ()) { // This will drain all tcp and http connection pools. postThreadLocalDrainConnections ( cluster , host_set -> hosts ()); } } else { // TODO(snowp): Should this be subject to merge windows? // Whenever hosts are removed from the cluster, we make each TLS cluster drain it's // connection pools for the removed hosts. If `close_connections_on_host_set_change` is // enabled, this case will be covered by first `if` statement, where all // connection pools are drained. if ( ! hosts_removed . empty ()) { postThreadLocalDrainConnections ( cluster , hosts_removed ); } } }); cluster . prioritySet (). addPriorityUpdateCb ([ & cm_cluster , this ]( uint32_t priority , const HostVector & hosts_added , const HostVector & hosts_removed ) { // This fires when a cluster is about to have an updated member set. We need to send this // out to all of the thread local configurations. // Should we save this update and merge it with other updates? // // Note that we can only _safely_ merge updates that have no added/removed hosts. That is, // only those updates that signal a change in host healthcheck state, weight or metadata. // // We've discussed merging updates related to hosts being added/removed, but it's really // tricky to merge those given that downstream consumers of these updates expect to see the // full list of updates, not a condensed one. This is because they use the broadcasted // HostSharedPtrs within internal maps to track hosts. If we fail to broadcast the entire list // of removals, these maps will leak those HostSharedPtrs. // // See https://github.com/envoyproxy/envoy/pull/3941 for more context. bool scheduled = false ; const auto merge_timeout = PROTOBUF_GET_MS_OR_DEFAULT ( cm_cluster . cluster (). info () -> lbConfig (), update_merge_window , 1000 ); // Remember: we only merge updates with no adds/removes \u2014 just hc/weight/metadata changes. const bool is_mergeable = hosts_added . empty () && hosts_removed . empty (); if ( merge_timeout > 0 ) { // If this is not mergeable, we should cancel any scheduled updates since // we'll deliver it immediately. scheduled = scheduleUpdate ( cm_cluster , priority , is_mergeable , merge_timeout ); } // If an update was not scheduled for later, deliver it immediately. if ( ! scheduled ) { cm_stats_ . cluster_updated_ . inc (); postThreadLocalClusterUpdate ( cm_cluster , ThreadLocalClusterUpdateParams ( priority , hosts_added , hosts_removed )); } }); \u751f\u6210\u66f4\u65b0\u53c2\u6570\uff0c\u6700\u540e\u89e6\u53d1thread local cluster\u66f4\u65b0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // Finally, post updates cross-thread so the per-thread load balancers are ready. First we // populate any update information that may be available after cluster init. ThreadLocalClusterUpdateParams params ; for ( auto & host_set : cluster . prioritySet (). hostSetsPerPriority ()) { if ( host_set -> hosts (). empty ()) { continue ; } params . per_priority_update_params_ . emplace_back ( host_set -> priority (), host_set -> hosts (), HostVector {}); } // NOTE: In all cases *other* than the local cluster, this is when a cluster is added/updated // The local cluster must currently be statically defined and must exist prior to other // clusters being added/updated. We could gate the below update on hosts being available on // the cluster or the cluster not already existing, but the special logic is not worth it. postThreadLocalClusterUpdate ( cm_cluster , std :: move ( params )); Note \u4e00\u4e2aCluster\u521d\u59cb\u5316\u5b8c\u6210\u6216\u8005\u66f4\u65b0\u540e\uff0c\u9700\u8981\u66f4\u65b0\u6240\u6709\u7684Thread Local\u4e2d\uff0c\u8ba9\u6240\u6709\u7684Thread\u53ef\u4ee5\u62ff\u5230\u6700\u65b0\u7684Cluster 1 2 void ClusterManagerImpl::postThreadLocalClusterUpdate ( ClusterManagerCluster & cm_cluster , ThreadLocalClusterUpdateParams && params ); \u8bbe\u7f6e\u96c6\u7fa4\u7684 AddedOrUpdated \u4f4d\uff0c\u8868\u660e\u5df2\u7ecf\u66f4\u65b0\u4e86 1 2 3 4 5 bool add_or_update_cluster = false ; if ( ! cm_cluster . addedOrUpdated ()) { add_or_update_cluster = true ; cm_cluster . setAddedOrUpdated (); } \u5f00\u59cb\u751f\u6210update hosts params\u3001locality weight\u3001overprovision_factor\u7b49\u9700\u8981\u53c2\u6570 \u5404\u4e2athread\u4e2d\u7684Cluster Priority Set\u4f1a\u6839\u636e\u8fd9\u4e9b\u53c2\u6570\u6765\u8fdb\u884c\u66f4\u65b0\u3002 1 2 3 4 5 6 7 for ( auto & per_priority : params . per_priority_update_params_ ) { const auto & host_set = cm_cluster . cluster (). prioritySet (). hostSetsPerPriority ()[ per_priority . priority_ ]; per_priority . update_hosts_params_ = HostSetImpl :: updateHostsParams ( * host_set ); per_priority . locality_weights_ = host_set -> localityWeights (); per_priority . overprovisioning_factor_ = host_set -> overprovisioningFactor (); } \u5f00\u59cb\u5728\u5404\u4e2a\u7ebf\u7a0b\u4e2d\u8fd0\u884c \u5728ThreadLocal\u4e2d\u83b7\u53d6\u5230ThreadLocalClusterManagerImpl 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 tls_ . runOnAllThreads ( [ info = cm_cluster . cluster (). info (), params = std :: move ( params ), add_or_update_cluster , load_balancer_factory ]( OptRef < ThreadLocalClusterManagerImpl > cluster_manager ) { ThreadLocalClusterManagerImpl :: ClusterEntry * new_cluster = nullptr ; if ( add_or_update_cluster ) { if ( cluster_manager -> thread_local_clusters_ . count ( info -> name ()) > 0 ) { ENVOY_LOG ( debug , \"updating TLS cluster {}\" , info -> name ()); } else { ENVOY_LOG ( debug , \"adding TLS cluster {}\" , info -> name ()); } new_cluster = new ThreadLocalClusterManagerImpl :: ClusterEntry ( * cluster_manager , info , load_balancer_factory ); cluster_manager -> thread_local_clusters_ [ info -> name ()]. reset ( new_cluster ); } for ( const auto & per_priority : params . per_priority_update_params_ ) { cluster_manager -> updateClusterMembership ( info -> name (), per_priority . priority_ , per_priority . update_hosts_params_ , per_priority . locality_weights_ , per_priority . hosts_added_ , per_priority . hosts_removed_ , per_priority . overprovisioning_factor_ ); } if ( new_cluster != nullptr ) { for ( auto & cb : cluster_manager -> update_callbacks_ ) { cb -> onClusterAddOrUpdate ( * new_cluster ); } } });","title":"Cluster Manager\u521d\u59cb\u5316"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/envoy/cluster_manager/#cluster-manager","text":"","title":"Cluster Manager\u521d\u59cb\u5316"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/envoy/cluster_manager/#_1","text":"ClusterManagerFactory \u901a\u8fc7\u8fd9\u4e2a\u63a5\u53e3\u53ef\u4ee5\u4eceProto\u6587\u4ef6\u4e2d\u521b\u5efa ClusterManager \uff0c\u521b\u5efa\u901a\u7528\u7684HTTP\u3001 TCP\u7b49\u8fde\u63a5\u6c60\u3001\u521b\u5efaCluster\u3001CDS\u3002 ProdClusterManagerFactory \u5b9e\u73b0\u4e86\u8fd9\u4e2a\u63a5\u53e3\u3002 \u901a\u8fc7\u8fd9\u4e2aFactory\u5c31\u53ef\u4ee5\u521b\u5efa\u6574\u4e2a ClusterManager \u6240\u9700\u8981\u7684\u4e00\u4e9b\u5fc5\u987b\u7684\u7ec4\u4ef6\u3002 ClusterManager \u7ba1\u7406\u6574\u4e2aCluster\uff0c\u901a\u8fc7\u8fd9\u4e2a\u63a5\u53e3\u6765\u65b0\u589e\u3001\u66f4\u65b0\u3001\u5220\u9664\u96c6\u7fa4\uff0c\u4e5f\u53ef\u4ee5\u83b7\u53d6\u5230\u6240\u6709\u7684 Clusters \uff0c\u4f46\u662f\u9700\u8981\u6ce8\u610f\u7684\u65f6\u5019\uff0c\u8fd9\u4e2a\u63a5\u53e3\u4e2d\u7684\u4e00\u4e9b\u65b9\u6cd5\u53ea\u80fd\u5728\u4e3b\u7ebf\u7a0b\u64cd\u4f5c\u5e76\u975e\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\uff0c \u53ea\u6709 getThreadLocalCluster \u65b9\u6cd5\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u5728worker\u7ebf\u7a0b\u4e2d\u5b89\u5168\u7684\u901a\u8fc7\u8fd9\u4e2a\u63a5\u53e3\u83b7\u53d6 ThreadLocalCluster \u7ed3\u6784\u3002 ThreadLocalCluster \u8fd9\u4e2a\u63a5\u53e3\u662f\u771f\u6b63\u66b4\u9732\u7ed9worker\u7ebf\u7a0b\u7684\uff0c\u8fd9\u4e2a\u8868\u793a\u7684\u662f\u4e00\u4e2a Cluster \uff0c\u901a\u8fc7\u8fd9\u4e2a\u63a5\u53e3\u53ef\u4ee5\u5b9e\u73b0\u521b\u5efa\u8fde\u63a5\u6c60\u3001\u83b7\u53d6 PrioritySet \u3001 ClusterInfo \u7b49\u4fe1\u606f\u3002 ClusterEntry \u5b9e\u73b0\u4e86\u8fd9\u4e2a\u63a5\u53e3\u3002 Cluster \u8fd9\u4e2a\u63a5\u53e3\u8868\u793a\u7684\u5c31\u662f\u4e00\u4e2a\u771f\u6b63\u7684Cluster\u5bf9\u8c61\uff0c\u5305\u542b\u4e86 Cluster \u5bf9\u8c61\u672c\u8eab\u4ee5\u53ca\u76f8\u5173\u7684 HealthChecker \u3001 Outlier::Detector \u3001 PrioritySet \u3002 \u901a\u8fc7\u8fd9\u4e2a\u63a5\u53e3\u53ef\u4ee5\u6765\u521d\u59cb\u5316\u8fd9\u4e2a\u96c6\u7fa4\u3002\u521d\u59cb\u5316\u7684\u8fc7\u7a0b\u5176\u5b9e\u5c31\u662f\u6839\u636e\u5bf9\u5e94\u96c6\u7fa4\u7684\u7c7b\u578b\u83b7\u53d6\u8fd9\u4e2a\u96c6\u7fa4\u4e0b\u7684\u673a\u5668\u8282\u70b9\u586b\u5145\u5230 PrioritySet \u4e2d\u3002 LoadBalancer \u8fd9\u4e2a\u662fLoad Balancer\u7684\u63a5\u53e3\uff0c\u7528\u4e8e\u4ece\u96c6\u7fa4\u4e2d\u6839\u636e\u914d\u7f6e\u7684\u7b56\u7565\u9009\u62e9\u4e3b\u673a\uff0c","title":"\u6838\u5fc3\u63a5\u53e3\u4ecb\u7ecd"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/envoy/cluster_manager/#_2","text":"\u542f\u52a8\u7684\u65f6\u5019\uff0c\u8f7d\u5165bootstrap\u914d\u7f6e\uff0c\u521b\u5efa ProdClusterManagerFactory 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 void InstanceImpl::initialize ( const Options & options , Network :: Address :: InstanceConstSharedPtr local_address , ComponentFactory & component_factory , ListenerHooks & hooks ) { ....... cluster_manager_factory_ = std :: make_unique < Upstream :: ProdClusterManagerFactory > ( * admin_ , Runtime :: LoaderSingleton :: get (), stats_store_ , thread_local_ , dns_resolver_ , * ssl_context_manager_ , * dispatcher_ , * local_info_ , * secret_manager_ , messageValidationContext (), * api_ , http_context_ , grpc_context_ , router_context_ , access_log_manager_ , * singleton_manager_ ); // Now the configuration gets parsed. The configuration may start setting // thread local data per above. See MainImpl::initialize() for why ConfigImpl // is constructed as part of the InstanceImpl and then populated once // cluster_manager_factory_ is available. config_ . initialize ( bootstrap_ , * this , * cluster_manager_factory_ ); ..... } \u4e0a\u9762\u4ee3\u7801\u4e2d\u7684\u7b2c15\u884c\u4f1a\u901a\u8fc7 ProdClusterManagerFactory \u5f00\u59cb\u521b\u5efa ClusterManager \u901a\u8fc7 ProdClusterManagerFactory \u7684 clusterManagerFromProto \u65b9\u6cd5\u521b\u5efa ClusterManager 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 ClusterManagerPtr ProdClusterManagerFactory::clusterManagerFromProto ( const envoy :: config :: bootstrap :: v3 :: Bootstrap & bootstrap ) { return ClusterManagerPtr { new ClusterManagerImpl ( bootstrap , * this , stats_ , tls_ , runtime_ , local_info_ , log_manager_ , main_thread_dispatcher_ , admin_ , validation_context_ , api_ , http_context_ , grpc_context_ , router_context_ )}; } void MainImpl::initialize ( const envoy :: config :: bootstrap :: v3 :: Bootstrap & bootstrap , Instance & server , Upstream :: ClusterManagerFactory & cluster_manager_factory ) { .... ENVOY_LOG ( info , \"loading {} cluster(s)\" , bootstrap . static_resources (). clusters (). size ()); cluster_manager_ = cluster_manager_factory . clusterManagerFromProto ( bootstrap ); .... } ClusterManagerImpl \u6784\u9020\u51fd\u6570\u5185\u90e8\u5f00\u59cb\u521b\u5efacds\u3001\u8f7d\u5165primary\u96c6\u7fa4\u3001static\u96c6\u7fa4\u7b49\u64cd\u4f5c\u3002 cluster\u7684load\u5206\u4e3a\u4e24\u4e2a\u9636\u6bb5\uff0c\u7b2c\u4e00\u9636\u6bb5\u4f1a\u8f7d\u5165\u6240\u6709\u7684primary\u96c6\u7fa4\uff0c\u7b2c\u4e8c\u9636\u6bb5\u624d\u4f1a\u8f7d\u5165secondary\u96c6\u7fa4\u3002 is_primary_cluster \u7528\u6765\u5224\u65ad\u4e00\u4e2a\u96c6\u7fa4\u662f\u5426\u662f primary \u96c6\u7fa4\u3002 \u76ee\u524d\u9664\u4e86EDS\u7c7b\u578b\u7684\u96c6\u7fa4\u5e76\u4e14\u4e0d\u662f\u57fa\u4e8e\u6587\u4ef6\u53d1\u73b0\u7684\u65b9\u5f0f\uff0c\u5176\u4ed6\u7684\u90fd\u662f primary \u96c6\u7fa4\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 // Cluster loading happens in two phases: first all the primary clusters are loaded, and then all // the secondary clusters are loaded. As it currently stands all non-EDS clusters and EDS which // load endpoint definition from file are primary and // (REST,GRPC,DELTA_GRPC) EDS clusters are secondary. This two phase // loading is done because in v2 configuration each EDS cluster individually sets up a // subscription. When this subscription is an API source the cluster will depend on a non-EDS // cluster, so the non-EDS clusters must be loaded first. auto is_primary_cluster = []( const envoy :: config :: cluster :: v3 :: Cluster & cluster ) -> bool { return cluster . type () != envoy :: config :: cluster :: v3 :: Cluster :: EDS || ( cluster . type () == envoy :: config :: cluster :: v3 :: Cluster :: EDS && cluster . eds_cluster_config (). eds_config (). config_source_specifier_case () == envoy :: config :: core :: v3 :: ConfigSource :: ConfigSourceSpecifierCase :: kPath ); }; \u5f00\u59cb\u8f7d\u5165primary\u96c6\u7fa4 \u4f18\u5148\u8f7d\u5165primary\u96c6\u7fa4\uff0c\u56e0\u4e3aSecondary\u96c6\u7fa4\u7684\u521d\u59cb\u5316\u53ef\u80fd\u4f1a\u4f9d\u8d56primary\u96c6\u7fa4\uff0c\u6bd4\u5982EDS\u7c7b\u578b\u7684Cluster\u5c31\u9700\u8981\u4f9d\u8d56\u4e00\u4e2aprimary\u7c7b\u578b\u7684xds\u96c6\u7fa4\u6765\u63d0\u4f9bxds server\u7684\u5730\u5740\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 // Build book-keeping for which clusters are primary. This is useful when we // invoke loadCluster() below and it needs the complete set of primaries. for ( const auto & cluster : bootstrap . static_resources (). clusters ()) { if ( is_primary_cluster ( cluster )) { primary_clusters_ . insert ( cluster . name ()); } } // Load all the primary clusters. for ( const auto & cluster : bootstrap . static_resources (). clusters ()) { if ( is_primary_cluster ( cluster )) { loadCluster ( cluster , \"\" , false , active_clusters_ ); } } \u5f00\u542f\u521b\u5efaadx\u901a\u9053\uff0c\u540e\u7eed\u8981\u5728\u8fd9\u4e2a\u901a\u9053\u4e0a\u521b\u5efacds api 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 // Now setup ADS if needed, this might rely on a primary cluster. // This is the only point where distinction between delta ADS and state-of-the-world ADS is made. // After here, we just have a GrpcMux interface held in ads_mux_, which hides // whether the backing implementation is delta or SotW. if ( dyn_resources . has_ads_config ()) { if ( dyn_resources . ads_config (). api_type () == envoy :: config :: core :: v3 :: ApiConfigSource :: DELTA_GRPC ) { ads_mux_ = std :: make_shared < Config :: NewGrpcMuxImpl > ( Config :: Utility :: factoryForGrpcApiConfigSource ( * async_client_manager_ , dyn_resources . ads_config (), stats , false ) -> create (), main_thread_dispatcher , * Protobuf :: DescriptorPool :: generated_pool () -> FindMethodByName ( Config :: Utility :: getAndCheckTransportVersion ( dyn_resources . ads_config ()) == envoy :: config :: core :: v3 :: ApiVersion :: V3 // TODO(htuch): consolidate with type_to_endpoint.cc, once we sort out the future // direction of that module re: https://github.com/envoyproxy/envoy/issues/10650. ? \"envoy.service.discovery.v3.AggregatedDiscoveryService.DeltaAggregatedResources\" : \"envoy.service.discovery.v2.AggregatedDiscoveryService.\" \"DeltaAggregatedResources\" ), Config :: Utility :: getAndCheckTransportVersion ( dyn_resources . ads_config ()), random_ , stats_ , Envoy :: Config :: Utility :: parseRateLimitSettings ( dyn_resources . ads_config ()), local_info ); } else { ads_mux_ = std :: make_shared < Config :: GrpcMuxImpl > ( local_info , Config :: Utility :: factoryForGrpcApiConfigSource ( * async_client_manager_ , dyn_resources . ads_config (), stats , false ) -> create (), main_thread_dispatcher , * Protobuf :: DescriptorPool :: generated_pool () -> FindMethodByName ( Config :: Utility :: getAndCheckTransportVersion ( dyn_resources . ads_config ()) == envoy :: config :: core :: v3 :: ApiVersion :: V3 // TODO(htuch): consolidate with type_to_endpoint.cc, once we sort out the future // direction of that module re: https://github.com/envoyproxy/envoy/issues/10650. ? \"envoy.service.discovery.v3.AggregatedDiscoveryService.\" \"StreamAggregatedResources\" : \"envoy.service.discovery.v2.AggregatedDiscoveryService.\" \"StreamAggregatedResources\" ), Config :: Utility :: getAndCheckTransportVersion ( dyn_resources . ads_config ()), random_ , stats_ , Envoy :: Config :: Utility :: parseRateLimitSettings ( dyn_resources . ads_config ()), bootstrap . dynamic_resources (). ads_config (). set_node_on_first_message_only ()); } } else { ads_mux_ = std :: make_unique < Config :: NullGrpcMuxImpl > (); } \u5f00\u59cb\u8f7d\u5165\u9759\u6001\u7684Secondary\u96c6\u7fa4 \u57fa\u4e8e\u6587\u4ef6\u7684\u8fd9\u79cdSecondary\u7c7b\u578b\u7684Cluster\u662f\u4e00\u4e2a\u4f8b\u5916\uff0c\u53ef\u4ee5\u4e0d\u4f9d\u8d56\u4efb\u4f55Primary Clusetr\u5c31\u53ef\u4ee5\u521d\u59cb\u5316\uff0c\u4e5f\u4e0d\u4f9d\u8d56xds\uff0c\u56e0\u6b64\u5728\u8fd9\u91cc\u5f52\u4e3aPrimary\u7c7b\u578b\u7684Cluster\u4f18\u5148\u521d\u59cb\u5316\u3002 1 2 3 4 5 6 7 8 9 10 11 ```C++ // After ADS is initialized, load EDS static clusters as EDS config may potentially need ADS. for (const auto& cluster : bootstrap.static_resources().clusters()) { // Now load all the secondary clusters. if (cluster.type() == envoy::config::cluster::v3::Cluster::EDS && cluster.eds_cluster_config().eds_config().config_source_specifier_case() != envoy::config::core::v3::ConfigSource::ConfigSourceSpecifierCase::kPath) { loadCluster(cluster, \"\", false, active_clusters_); } } ``` \u521b\u5efaLocalClusterParams\uff0c\u901a\u8fc7LocalClusterParams \u5982\u679c\u5b9a\u4e49\u4e86local cluster\u4f1a\u5728\u8fd9\u91cc\u8fdb\u884c\u521d\u59cb\u5316\uff0clocal cluster\u76ee\u7684\u4e3a\u4e86\u505azone aware\u7684load balancer\u3002\u6784\u5efaload balancer\u7684\u65f6\u5019\u9700\u8981\u7528\u5230\u3002 1 2 3 4 5 6 7 8 9 10 11 12 absl :: optional < ThreadLocalClusterManagerImpl :: LocalClusterParams > local_cluster_params ; if ( local_cluster_name_ ) { auto local_cluster = active_clusters_ . find ( local_cluster_name_ . value ()); if ( local_cluster == active_clusters_ . end ()) { throw EnvoyException ( fmt :: format ( \"local cluster '{}' must be defined\" , local_cluster_name_ . value ())); } local_cluster_params . emplace (); local_cluster_params -> info_ = local_cluster -> second -> cluster (). info (); local_cluster_params -> load_balancer_factory_ = local_cluster -> second -> loadBalancerFactory (); local_cluster -> second -> setAddedOrUpdated (); } \u521b\u5efa ThreadLocalClusterManagerImpl \uff0c\u8fd9\u4e2a\u7ed3\u6784\u662fThread Local\u7684\uff0c\u53ef\u4ee5\u5b89\u5168\u7684\u88abwork\u7ebf\u7a0b\u8bbf\u95ee\u3002 \u867d\u7136\u6211\u4eec\u6709 ClusterManager \u63a5\u53e3\uff0c\u4f46\u662f\u8fd9\u4e2a\u63a5\u53e3\u662f\u63d0\u4f9b\u4e2a\u4e3b\u7ebf\u7a0b\u7684\uff0c\u7528\u6765\u6dfb\u52a0\u3001\u66f4\u65b0\u3001\u5220\u9664\u96c6\u7fa4\u7684\uff0c\u5e76\u975e\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\u3002\u800c\u4e14\u6211\u4eec\u5728worker\u7ebf\u7a0b\u4e5f\u4e0d\u9700\u8981\u505a\u96c6\u7fa4\u7684\u6dfb\u52a0\u3001\u66f4\u65b0\u548c\u5220\u9664\u3002 \u56e0\u6b64\u8fd9\u91cc\u6709\u4e86 ThreadLocalClusterManagerImpl \uff0c\u4ed6\u5b9e\u73b0\u4e86 ThreadLocalCluster \u63a5\u53e3\uff0c\u5e76\u63d0\u4f9b\u4e86\u4e00\u4e9b\u6709\u9650\u7684\u4e00\u4e9b\u63a5\u53e3\u63d0\u4f9b\u7ed9worker\u7ebf\u7a0b\u6765\u8bbf\u95ee\u6211\u4eec\u7684Cluster\u3002 1 2 3 4 5 // Once the initial set of static bootstrap clusters are created (including the local cluster), // we can instantiate the thread local cluster manager. tls_ -> set ([ this , local_cluster_name ]( Event :: Dispatcher & dispatcher ) -> ThreadLocal :: ThreadLocalObjectSharedPtr { return std :: make_shared < ThreadLocalClusterManagerImpl > ( * this , dispatcher , local_cluster_name ); \u521b\u5efacds api \u8fd9\u91cc\u901a\u8fc7\u6211\u4eec\u7684 ClusterManagerFactory \u521b\u5efacds api\uff0c\u5728\u521d\u59cb\u5316Secondary Cluster\u7684\u65f6\u5019\u4f1a\u7528\u5230cds api\u3002 1 2 3 4 5 6 7 // We can now potentially create the CDS API once the backing cluster exists. if ( dyn_resources . has_cds_config ()) { cds_api_ = factory_ . createCds ( dyn_resources . cds_config (), * this ); init_helper_ . setCds ( cds_api_ . get ()); } else { init_helper_ . setCds ( nullptr ); } \u5f00\u59cb\u5bf9\u6240\u6709\u9759\u6001\u96c6\u7fa4\u8fdb\u884c\u521d\u59cb\u5316 \u5728\u6700\u540e\u904d\u5386\u6211\u4eec\u7684\u6240\u6709Primary\u96c6\u7fa4\uff0c\u5bf9\u8fd9\u4e9b\u96c6\u7fa4\u8fdb\u884c\u521d\u59cb\u5316\u3002 1 2 3 4 5 6 // Proceed to add all static bootstrap clusters to the init manager. This will immediately // initialize any primary clusters. Post-init processing further initializes any thread // aware load balancer and sets up the per-worker host set updates. for ( auto & cluster : active_clusters_ ) { init_helper_ . addCluster ( * cluster . second ); } Primary Cluster\u521d\u59cb\u5316\u5b8c\u6210\u540e\u4f1a\u8fdb\u884cRTDS\u7684\u521d\u59cb\u5316 \u56e0\u4e3a\u540e\u7eed\u7684\u5176\u4ed6\u7ec4\u4ef6\u5728\u8fdb\u884c\u521d\u59cb\u5316\u7684\u65f6\u5019\u4f1a\u4f9d\u8d56RTDS\uff0c\u56e0\u6b64\u9700\u8981\u5148\u521d\u59cb\u5316RTDS 1 2 3 4 5 6 clusterManager (). setPrimaryClustersInitializedCb ( [ this ]() { onClusterManagerPrimaryInitializationComplete (); }); void InstanceImpl::onClusterManagerPrimaryInitializationComplete () { // If RTDS was not configured the `onRuntimeReady` callback is immediately invoked. Runtime :: LoaderSingleton :: get (). startRtdsSubscriptions ([ this ]() { onRuntimeReady (); }); } RTDS\u521d\u59cb\u5316\u5b8c\u6210\u540e\u5f00\u59cb\u8fdb\u884cSecondary Cluster\u7684\u521d\u59cb\u5316 \u5728\u8fdb\u884cSecondary Cluster\u7684\u65f6\u5019\u4f1a\u901a\u8fc7 maybeFinishInitialize \u542f\u52a8cds\uff0c\u7136\u540e\u7b49\u5f85 Secondary Cluster \u5b8c\u6210\u521d\u59cb\u5316\u3002 Note maybeFinishInitialize \u7684\u521d\u59cb\u5316\u89c1\u4e0b\u6587\u5177\u4f53\u5206\u6790 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 void InstanceImpl::onRuntimeReady () { // Begin initializing secondary clusters after RTDS configuration has been applied. // Initializing can throw exceptions, so catch these. try { clusterManager (). initializeSecondaryClusters ( bootstrap_ ); } catch ( const EnvoyException & e ) { ENVOY_LOG ( warn , \"Skipping initialization of secondary cluster: {}\" , e . what ()); shutdown (); } ...... } void ClusterManagerImpl::initializeSecondaryClusters ( const envoy :: config :: bootstrap :: v3 :: Bootstrap & bootstrap ) { init_helper_ . startInitializingSecondaryClusters (); const auto & cm_config = bootstrap . cluster_manager (); if ( cm_config . has_load_stats_config ()) { const auto & load_stats_config = cm_config . load_stats_config (); load_stats_reporter_ = std :: make_unique < LoadStatsReporter > ( local_info_ , * this , stats_ , Config :: Utility :: factoryForGrpcApiConfigSource ( * async_client_manager_ , load_stats_config , stats_ , false ) -> create (), Config :: Utility :: getAndCheckTransportVersion ( load_stats_config ), dispatcher_ ); } }","title":"\u521d\u59cb\u5316\u8fc7\u7a0b"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/envoy/cluster_manager/#_3","text":"Note \u65e0\u8bba\u662fPrimary cluster\u3001\u8fd8\u662fSecondary Cluster\uff0c\u6700\u7ec8\u90fd\u662f\u901a\u8fc7loadCluster\u628aCluster Protobuf\u53d8\u6210Cluster\u5bf9\u8c61\u3002\u8fd9\u4e24\u8005\u7684\u533a\u522b\u5c31\u662f added_via_api \uff0c\u524d\u8005\u4e3afalse\u3001\u540e\u8005\u4e3atrue\u3002\u8fd9\u4e2a\u53c2\u6570\u8868\u660e\u662f\u5426\u662f\u901a\u8fc7API\u83b7\u53d6\u7684\u3002\u5f88\u660e\u663ePrimary\u90fd\u4e0d\u662f\u901a\u8fc7API\u6765\u83b7\u53d6\u7684\u3002 1 2 3 ClusterManagerImpl :: loadCluster ( const envoy :: config :: cluster :: v3 :: Cluster & cluster , const std :: string & version_info , bool added_via_api , ClusterMap & cluster_map ) \u8fd9\u4e2a\u65b9\u6cd5\u4e3b\u8981\u505a\u4e86\u4ee5\u4e0b\u51e0\u4ef6\u4e8b: \u901a\u8fc7ClusterManagerFactory\u4ee5\u53caCluster\u7684Protobuf\u6765\u521b\u5efa Cluster \u548c ThreadAwareLoadBalancer 1 2 3 4 std :: pair < ClusterSharedPtr , ThreadAwareLoadBalancerPtr > new_cluster_pair = factory_ . clusterFromProto ( cluster , * this , outlier_event_logger_ , added_via_api ); auto & new_cluster = new_cluster_pair . first ; Cluster & cluster_reference = * new_cluster ; Cluster \u662f\u5bf9\u96c6\u7fa4\u7684\u62bd\u8c61\uff0c\u800c ThreadAwareLoadBalancer \u5219\u662f\u5bf9\u8fd9\u4e2a\u96c6\u7fa4 Load Balancer \u7684\u62bd\u8c61\uff0c\u8fd9\u4e2aload balancer\u662f\u611f\u77e5\u7ebf\u7a0b\u7684\u3002 \u5728\u5b9e\u73b0\u81ea\u5b9a\u4e49\u96c6\u7fa4\u7684\u65f6\u5019\u9700\u8981\u81ea\u5df1\u6765\u5b9e\u73b0\uff0c\u76ee\u524dEnvoy\u4e2d\u53ea\u6709 Dynamic forward proxy \u3001 Aggregate \u3001 redis \u7b49\u4e09\u79cd\u7c7b\u4f3c\u7684\u96c6\u7fa4\u662f\u5b9e\u73b0\u4e86 ThreadAwareLoadBalancer \u63a5\u53e3\uff0c \u4ed6\u4eec\u6709\u81ea\u5df1\u4e13\u7528\u7684LoadBalancer\uff0c\u5176\u4ed6\u7684\u96c6\u7fa4\u7528\u7684\u90fd\u662fEnvoy\u5185\u7f6e\u7684\u7684\u51e0\u4e2a\u6807\u51c6Load Balancer\u5b9e\u73b0\u3002\u6bd4\u5982 Aggregate \u96c6\u7fa4\u7684\u6784\u9020\u51fd\u6570\u5982\u4e0b\uff0c\u4ed6\u521b\u5efa\u4e86 AggregateThreadAwareLoadBalancer \uff0c \u5c5e\u4e8e\u8fd9\u4e2a\u96c6\u7fa4\u7279\u6709\u7684LoadBalancer 1 2 3 4 5 6 7 8 9 10 11 12 13 14 std :: pair < Upstream :: ClusterImplBaseSharedPtr , Upstream :: ThreadAwareLoadBalancerPtr > ClusterFactory :: createClusterWithConfig ( const envoy :: config :: cluster :: v3 :: Cluster & cluster , const envoy :: extensions :: clusters :: aggregate :: v3 :: ClusterConfig & proto_config , Upstream :: ClusterFactoryContext & context , Server :: Configuration :: TransportSocketFactoryContextImpl & socket_factory_context , Stats :: ScopePtr && stats_scope ) { auto new_cluster = std :: make_shared < Cluster > ( cluster , proto_config , context . clusterManager (), context . runtime (), context . api (). randomGenerator (), socket_factory_context , std :: move ( stats_scope ), context . addedViaApi ()); auto lb = std :: make_unique < AggregateThreadAwareLoadBalancer > ( * new_cluster ); return std :: make_pair ( new_cluster , std :: move ( lb )); } \u8bbe\u7f6ehealthChecker\u3001outlierDetector\u7b49callback 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 if ( new_cluster -> healthChecker () != nullptr ) { new_cluster -> healthChecker () -> addHostCheckCompleteCb ( [ this ]( HostSharedPtr host , HealthTransition changed_state ) { if ( changed_state == HealthTransition :: Changed && host -> healthFlagGet ( Host :: HealthFlag :: FAILED_ACTIVE_HC )) { postThreadLocalHealthFailure ( host ); } }); } if ( new_cluster -> outlierDetector () != nullptr ) { new_cluster -> outlierDetector () -> addChangedStateCb ([ this ]( HostSharedPtr host ) { if ( host -> healthFlagGet ( Host :: HealthFlag :: FAILED_OUTLIER_CHECK )) { postThreadLocalHealthFailure ( host ); } }); } \u8fd9\u4e48\u505a\u7684\u76ee\u7684\u662f\u56e0\u4e3a\uff0c\u5f53\u5f00\u542f\u5065\u5eb7\u68c0\u67e5\u548c\u79bb\u7fa4\u68c0\u6d4b\u7684\u65f6\u5019\uff0c\u6709\u51fa\u73b0\u5f02\u5e38\u673a\u5668\u9700\u8981\u901a\u77e5\u6240\u6709\u7684\u7ebf\u7a0b\u8fdb\u884c\u8fde\u63a5\u7684\u5904\u7406\uff0c\u6bd4\u5982drain connection\u3001close conntions\u7136\u540e\u4ece\u8fde\u63a5\u6c60\u4e2d\u79fb\u9664\u7b49\u64cd\u4f5c\u3002 \u4eceClusterMap\u4e2d\u67e5\u627eCluster\uff0c\u5982\u679c\u5df2\u7ecf\u5b58\u5728\u5c31\u66ff\u6362\uff0c\u6ca1\u6709\u5219\u65b0\u589e 1 2 3 4 5 6 7 8 9 10 11 12 13 14 ClusterDataPtr result ; auto cluster_entry_it = cluster_map . find ( cluster_reference . info () -> name ()); if ( cluster_entry_it != cluster_map . end ()) { result = std :: exchange ( cluster_entry_it -> second , std :: make_unique < ClusterData > ( cluster , version_info , added_via_api , std :: move ( new_cluster ), time_source_ )); } else { bool inserted = false ; std :: tie ( cluster_entry_it , inserted ) = cluster_map . emplace ( cluster_reference . info () -> name (), std :: make_unique < ClusterData > ( cluster , version_info , added_via_api , std :: move ( new_cluster ), time_source_ )); ASSERT ( inserted ); } \u7ed9RingHash\u3001MaglevLoadBalancer\u7b49\u521b\u5efaThreadAware load balancer 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 // If an LB is thread aware, create it here. The LB is not initialized until cluster pre-init // finishes. For RingHash/Maglev don't create the LB here if subset balancing is enabled, // because the thread_aware_lb_ field takes precedence over the subset lb). if ( cluster_reference . info () -> lbType () == LoadBalancerType :: RingHash ) { if ( ! cluster_reference . info () -> lbSubsetInfo (). isEnabled ()) { cluster_entry_it -> second -> thread_aware_lb_ = std :: make_unique < RingHashLoadBalancer > ( cluster_reference . prioritySet (), cluster_reference . info () -> stats (), cluster_reference . info () -> statsScope (), runtime_ , random_ , cluster_reference . info () -> lbRingHashConfig (), cluster_reference . info () -> lbConfig ()); } } else if ( cluster_reference . info () -> lbType () == LoadBalancerType :: Maglev ) { if ( ! cluster_reference . info () -> lbSubsetInfo (). isEnabled ()) { cluster_entry_it -> second -> thread_aware_lb_ = std :: make_unique < MaglevLoadBalancer > ( cluster_reference . prioritySet (), cluster_reference . info () -> stats (), cluster_reference . info () -> statsScope (), runtime_ , random_ , cluster_reference . info () -> lbMaglevConfig (), cluster_reference . info () -> lbConfig ()); } } else if ( cluster_reference . info () -> lbType () == LoadBalancerType :: ClusterProvided ) { cluster_entry_it -> second -> thread_aware_lb_ = std :: move ( new_cluster_pair . second ); } Note Envoy\u7684Cluster\u521d\u59cb\u5316\u662f\u4e00\u4e2a\u72b6\u6001\u673a\u3001\u800c\u4e14\u8fd8\u662f\u4e00\u4e2a\u5f02\u6b65\u7684\u8fc7\u7a0b\uff0c\u6bcf\u4e00\u6b65\u7684\u521d\u59cb\u5316\u9700\u8981\u7b49\u5f85\u521d\u59cb\u5316\u5b8c\u6210\u624d\u80fd\u8fdb\u884c\u4e0b\u4e00\u6b65\u7684\u521d\u59cb\u5316\uff0c\u6240\u4ee5\u6211\u4eec\u4f1a\u770b\u5230\u4ee3\u7801\u4e2d\u7ecf\u5e38\u4f1a\u53bb\u8c03\u7528 maybeFinishInitialize \u6765\u5224\u65ad\u5f53\u524d\u662f\u5426\u5b8c\u6210\u4e86\u521d\u59cb\u5316\uff0c\u5e76\u8fdb\u884c\u72b6\u6001\u673a\u7684\u66f4\u65b0\u3002 1 void ClusterManagerInitHelper :: maybeFinishInitialize () \u5982\u679c\u8fd8\u6ca1\u6709\u8fdb\u884cPrimary Cluster\u7b49\u5f85\u8f7d\u5165\u4ee5\u53ca\u5728\u7b49\u5f85CdsApi\u521d\u59cb\u5316\uff0c\u5219\u76f4\u63a5\u8df3\u8fc7\u3002 1 2 3 4 5 6 // Do not do anything if we are still doing the initial static load or if we are waiting for // CDS initialize. ENVOY_LOG ( debug , \"maybe finish initialize state: {}\" , enumToInt ( state_ )); if ( state_ == State :: Loading || state_ == State :: WaitingToStartCdsInitialization ) { return ; } \u56e0\u4e3a\u5982\u679c\u5904\u4e8e\u8fd9\u4e24\u4e2a\u72b6\u6001\u7684\u8bdd\uff0c\u8868\u660e\u8fd8\u6ca1\u6709\u5f00\u59cb\u521d\u59cb\u5316Primary Cluster\u3001\u6216\u8005\u662f\u8fd8\u6ca1\u5f00\u59cb\u8fdb\u884cSecondary\u7684\u521d\u59cb\u5316\u3002 \u53ea\u6709\u7b49\u5f85Primary Cluster\u7684\u521d\u59cb\u5316\u6216\u8005\u662f\u7b49\u5f85Secondary Clusetr\u521d\u59cb\u5316\u8fd9\u4e24\u7c7b\u72b6\u6001\u624d\u9700\u8981\u7ee7\u7eed\u8fdb\u884c\u5224\u65ad 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 ASSERT ( state_ == State :: WaitingToStartSecondaryInitialization || state_ == State :: CdsInitialized || state_ == State :: WaitingForPrimaryInitializationToComplete ); ENVOY_LOG ( debug , \"maybe finish initialize primary init clusters empty: {}\" , primary_init_clusters_ . empty ()); // If we are still waiting for primary clusters to initialize, do nothing. if ( ! primary_init_clusters_ . empty ()) { return ; } else if ( state_ == State :: WaitingForPrimaryInitializationToComplete ) { state_ = State :: WaitingToStartSecondaryInitialization ; if ( primary_clusters_initialized_callback_ ) { primary_clusters_initialized_callback_ (); } return ; } \u9996\u5148\u5224\u65ad\u662f\u5426\u5b8c\u6210\u4e86Primary Cluster\u7684\u521d\u59cb\u5316\uff0cPrimary Cluster\u521d\u59cb\u5316\u5b8c\u6210\u7684\u6807\u5fd7\u5c31\u662fprimary_init_clusters_\u4e3a\u7a7a\uff0c\u56e0\u4e3a\u8f7d\u5165\u7684\u65f6\u5019\u4f1a\u628a\u6240\u6709\u7684Primary CLuster\u5b58\u8fdb\u53bb\uff0c \u7136\u540e\u904d\u5386\u8fd9\u4e2a\u5217\u8868\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u521d\u59cb\u5316\u5b8c\u6210\u7684\u8bdd\u5219\u4ece\u8fd9\u4e2a\u5217\u8868\u4e2d\u79fb\u9664\uff0c\u56e0\u6b64\u8fd9\u4e2a\u5217\u8868\u4e3a\u7a7a\u5c31\u8868\u660e\u521d\u59cb\u5316\u5b8c\u6210\u4e86\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 ClusterManagerInitHelper :: addCluster ( ClusterManagerCluster & cm_cluster ) { .... if ( cluster . initializePhase () == Cluster :: InitializePhase :: Primary ) { // Remove the previous cluster before the cluster object is destroyed. primary_init_clusters_ . remove_if ( [ name_to_remove = cluster . info () -> name ()]( ClusterManagerCluster * cluster_iter ) { return cluster_iter -> cluster (). info () -> name () == name_to_remove ; }); primary_init_clusters_ . push_back ( & cm_cluster ); cluster . initialize ( initialize_cb ); } void ClusterManagerInitHelper :: removeCluster ( ClusterManagerCluster & cluster ) { ..... // There is a remote edge case where we can remove a cluster via CDS that has not yet been // initialized. When called via the remove cluster API this code catches that case. std :: list < ClusterManagerCluster *>* cluster_list ; if ( cluster . cluster (). initializePhase () == Cluster :: InitializePhase :: Primary ) { cluster_list = & primary_init_clusters_ ; } else { ASSERT ( cluster . cluster (). initializePhase () == Cluster :: InitializePhase :: Secondary ); cluster_list = & secondary_init_clusters_ ; } // It is possible that the cluster we are removing has already been initialized, and is not // present in the initializer list. If so, this is fine. cluster_list -> remove ( & cluster ); } \u5982\u679cPrimary\u96c6\u7fa4\u90fd\u521d\u59cb\u5316\u5b8c\u6210\u4e86\uff0c\u90a3\u63a5\u4e0b\u6765\u5c31\u770b\u662f\u5426\u662f\u5728\u505aSecondary cluster\u7684\u521d\u59cb\u5316 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 // If we are still waiting for secondary clusters to initialize, see if we need to first call // initialize on them. This is only done once. ENVOY_LOG ( debug , \"maybe finish initialize secondary init clusters empty: {}\" , secondary_init_clusters_ . empty ()); if ( ! secondary_init_clusters_ . empty ()) { if ( ! started_secondary_initialize_ ) { ENVOY_LOG ( info , \"cm init: initializing secondary clusters\" ); // If the first CDS response doesn't have any primary cluster, ClusterLoadAssignment // should be already paused by CdsApiImpl::onConfigUpdate(). Need to check that to // avoid double pause ClusterLoadAssignment. Config :: ScopedResume maybe_resume_eds ; if ( cm_ . adsMux ()) { const auto type_urls = Config :: getAllVersionTypeUrls < envoy :: config :: endpoint :: v3 :: ClusterLoadAssignment > (); maybe_resume_eds = cm_ . adsMux () -> pause ( type_urls ); } initializeSecondaryClusters (); } return ; } secondary_init_clusters_ \u4e0d\u4e3a\u7a7a\u8868\u660eSecondary cluster\u8fd8\u6ca1\u6709\u5f00\u59cb\u521d\u59cb\u5316\u6216\u8005\u6ca1\u521d\u59cb\u5316\u5b8c\u6210\uff0c\u8fd9\u4e2a\u65f6\u5019\u5982\u679c started_secondary_initialize_ \u4e3afalse\uff0c\u8868\u660e \u6ca1\u6709\u5f00\u59cb\u521d\u59cb\u5316\u3002\u6b64\u65f6\u901a\u8fc7\u8c03\u7528 initializeSecondaryClusters \u5f00\u59cb\u6b63\u5728\u7684\u8fdb\u884cSecondary\u7684\u521d\u59cb\u5316\u3002 \u521d\u59cb\u5316CDS\uff0c\u5426\u5219\u6ca1\u6709\u62ff\u5230\u6240\u6709\u7684cluster\u6ca1\u529e\u6cd5\u8fdb\u884cSeondary cluster\u7684\u521d\u59cb\u5316 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // At this point, if we are doing static init, and we have CDS, start CDS init. Otherwise, move // directly to initialized. started_secondary_initialize_ = false ; ENVOY_LOG ( debug , \"maybe finish initialize cds api ready: {}\" , cds_ != nullptr ); if ( state_ == State :: WaitingToStartSecondaryInitialization && cds_ ) { ENVOY_LOG ( info , \"cm init: initializing cds\" ); state_ = State :: WaitingToStartCdsInitialization ; cds_ -> initialize (); } else { ENVOY_LOG ( info , \"cm init: all clusters initialized\" ); state_ = State :: AllClustersInitialized ; if ( initialized_callback_ ) { initialized_callback_ (); } } cds\u521d\u59cb\u5316\u5b8c\u6210\u540e\u4f1a\u53d1\u9001xds\u8bf7\u6c42\u7ed9\u63a7\u5236\u9762\u83b7\u53d6\u6240\u6709\u7684cluster\uff0c\u5f53\u6536\u5230\u6240\u6709\u7684cluster\u7684\u65f6\u5019\uff0c\u5c31\u89e6\u53d1cds\u8bbe\u7f6e\u7684callback\uff0c\u5728callback\u91cc\u9762\u4f1a\u518d\u6b21\u89e6\u53d1 maybeFinishInitialize \u8fd9\u4e2a\u65f6\u5019\u5c31\u8d70\u5230\u4e86\u6b65\u9aa43\u4e2d\u7684\u903b\u8f91\u4e86\u3002 1 2 3 4 5 6 7 8 9 10 11 void ClusterManagerInitHelper::setCds ( CdsApi * cds ) { ASSERT ( state_ == State :: Loading ); cds_ = cds ; if ( cds_ ) { cds_ -> setInitializedCb ([ this ]() -> void { ASSERT ( state_ == State :: WaitingToStartCdsInitialization ); state_ = State :: CdsInitialized ; maybeFinishInitialize (); }); } } \u6700\u540e\u603b\u7ed3\u4e0b\uff0cmaybeFinishInitialize\u7684\u51e0\u4e2a\u8c03\u7528\u65f6\u673a: \u52a0\u8f7d\u5b8c\u6240\u6709\u7684static cluster\u540e\u4f1a\u8c03\u7528\u4e00\u6b21 \u56e0\u4e3a\u9700\u8981\u8bbe\u7f6e\u8fdb\u5165\u5230Secondary cluster\u7684\u521d\u59cb\u5316\u7684\u72b6\u6001\uff0c\u5982\u679cPrimary Cluster\u5df2\u7ecf\u521d\u59cb\u5316\u5b8c\u6210\u4e86\uff0c\u90a3\u5c31\u76f4\u63a5\u8fd4\u56de\uff0c\u5e76\u6210\u529f\u8bbe\u7f6e WaitingToStartSecondaryInitialization \u72b6\u6001\u3002 \u5426\u5219\u5c31\u76f4\u63a5\u8fd4\u56de\u3002 1 2 3 4 5 6 7 void ClusterManagerInitHelper::onStaticLoadComplete () { ASSERT ( state_ == State :: Loading ); // After initialization of primary clusters has completed, transition to // waiting for signal to initialize secondary clusters and then CDS. state_ = State :: WaitingForPrimaryInitializationToComplete ; maybeFinishInitialize (); } \u4e00\u4e2a\u96c6\u7fa4\u521d\u59cb\u5316\u5b8c\u6210\u540e\uff0c\u4ece\u5217\u8868\u4e2d\u79fb\u9664Cluster\u65f6\u3002 Cluster\u521d\u59cb\u5316\u5b8c\u6210\u540e\u5c31\u4f1a\u8c03\u7528 removeCluster \u5c06Cluster\u4ece\u5217\u8868\u4e2d\u79fb\u9664\uff0c\u6240\u6709\u7684Cluster\u90fd\u521d\u59cb\u5316\u5b8c\u624d\u8ba4\u4e3a\u662f\u521d\u59cb\u5316\u5b8c\u6210\uff0c\u56e0\u6b64\u6bcf\u6b21\u4e00\u4e2aCluster\u521d\u59cb\u5316\u5b8c\u6210\u540e\u5c31 \u8c03\u7528\u4e00\u6b21 maybeFinishInitialize() \u5224\u65ad\u662f\u5426\u5b8c\u6210\u4e86\u521d\u59cb\u5316\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 void ClusterManagerInitHelper::removeCluster ( ClusterManagerCluster & cluster ) { if ( state_ == State :: AllClustersInitialized ) { return ; } // There is a remote edge case where we can remove a cluster via CDS that has not yet been // initialized. When called via the remove cluster API this code catches that case. std :: list < ClusterManagerCluster *>* cluster_list ; if ( cluster . cluster (). initializePhase () == Cluster :: InitializePhase :: Primary ) { cluster_list = & primary_init_clusters_ ; } else { ASSERT ( cluster . cluster (). initializePhase () == Cluster :: InitializePhase :: Secondary ); cluster_list = & secondary_init_clusters_ ; } // It is possible that the cluster we are removing has already been initialized, and is not // present in the initializer list. If so, this is fine. cluster_list -> remove ( & cluster ); ENVOY_LOG ( debug , \"cm init: init complete: cluster={} primary={} secondary={}\" , cluster . cluster (). info () -> name (), primary_init_clusters_ . size (), secondary_init_clusters_ . size ()); maybeFinishInitialize (); } \u5f00\u59cb\u8fdb\u884cSecondary Cluster\u521d\u59cb\u5316 Primary Cluster\u521d\u59cb\u5316\u5b8c\u6210\u540e\u4f1a\u5728\u5176callback\u4e2d\u5f00\u59cb\u7ee7\u7eed\u8fdb\u884cSecondary Cluster\u7684\u521d\u59cb\u5316\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 clusterManager (). setPrimaryClustersInitializedCb ( [ this ]() { onClusterManagerPrimaryInitializationComplete (); }); void InstanceImpl::onClusterManagerPrimaryInitializationComplete () { // If RTDS was not configured the `onRuntimeReady` callback is immediately invoked. Runtime :: LoaderSingleton :: get (). startRtdsSubscriptions ([ this ]() { onRuntimeReady (); }); } void InstanceImpl::onRuntimeReady () { // Begin initializing secondary clusters after RTDS configuration has been applied. // Initializing can throw exceptions, so catch these. try { clusterManager (). initializeSecondaryClusters ( bootstrap_ ); } catch ( const EnvoyException & e ) { ENVOY_LOG ( warn , \"Skipping initialization of secondary cluster: {}\" , e . what ()); shutdown (); } ....... } 1 2 3 4 5 void ClusterManagerInitHelper::startInitializingSecondaryClusters () { ASSERT ( state_ == State :: WaitingToStartSecondaryInitialization ); ENVOY_LOG ( debug , \"continue initializing secondary clusters\" ); maybeFinishInitialize (); } CDS\u521d\u59cb\u5316\u5b8c\u6210\u65f6 CDS\u5f00\u59cb\u521d\u59cb\u5316\uff0c\u521d\u59cb\u5316\u5b8c\u6210\u540e\u5728\u5176callback\u4e2d\u518d\u6b21\u8c03\u7528 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 void ClusterManagerInitHelper::maybeFinishInitialize () { // At this point, if we are doing static init, and we have CDS, start CDS init. Otherwise, move // directly to initialized. started_secondary_initialize_ = false ; ENVOY_LOG ( debug , \"maybe finish initialize cds api ready: {}\" , cds_ != nullptr ); if ( state_ == State :: WaitingToStartSecondaryInitialization && cds_ ) { ENVOY_LOG ( info , \"cm init: initializing cds\" ); state_ = State :: WaitingToStartCdsInitialization ; cds_ -> initialize (); ..... } void ClusterManagerInitHelper :: setCds ( CdsApi * cds ) { ASSERT ( state_ == State :: Loading ); cds_ = cds ; if ( cds_ ) { cds_ -> setInitializedCb ([ this ]() -> void { ASSERT ( state_ == State :: WaitingToStartCdsInitialization ); state_ = State :: CdsInitialized ; maybeFinishInitialize (); }); } } Note \u6bcf\u4e00\u4e2aCluster\u521d\u59cb\u5316\u5b8c\u6210\u540e\u90fd\u4f1a\u5728\u5176callback\u4e2d\u8c03\u7528\u8fd9\u4e2a\u65b9\u6cd5\u8fdb\u884cCluster\u989d\u5916\u7684\u521d\u59cb\u5316\u3002\u5728\u8fd9\u4e2a\u521d\u59cb\u5316\u4e2d\u4f1a\u6dfb\u52a0\u4e00\u4e9bcallback \u6700\u540e\u89e6\u53d1thread local cluster\u7684\u66f4\u65b0\uff0c\u4ee5\u786e\u4fdd\u6bcf\u4e00\u4e2athread\u90fd\u5305\u542b\u4e86\u6700\u65b0\u7684cluster\u5185\u5bb9\u4e86\u3002 1 void ClusterManagerImpl::onClusterInit ( ClusterManagerCluster & cm_cluster ); \u5982\u679c\u662f\u4e00\u4e2awarm cluster\u5219\u4f1a\u88ab\u8f6c\u6362\u6210active cluster 1 2 3 4 5 6 7 8 9 10 11 12 13 // This routine is called when a cluster has finished initializing. The cluster has not yet // been setup for cross-thread updates to avoid needless updates during initialization. The order // of operations here is important. We start by initializing the thread aware load balancer if // needed. This must happen first so cluster updates are heard first by the load balancer. // Also, it assures that all of clusters which this function is called should be always active. auto & cluster = cm_cluster . cluster (); auto cluster_data = warming_clusters_ . find ( cluster . info () -> name ()); // We have a situation that clusters will be immediately active, such as static and primary // cluster. So we must have this prevention logic here. if ( cluster_data != warming_clusters_ . end ()) { clusterWarmingToActive ( cluster . info () -> name ()); updateClusterCounts (); } \u5f00\u59cb\u521d\u59cb\u5316thread aware load balancer 1 2 3 4 5 cluster_data = active_clusters_ . find ( cluster . info () -> name ()); if ( cluster_data -> second -> thread_aware_lb_ != nullptr ) { cluster_data -> second -> thread_aware_lb_ -> initialize (); } \u8bbe\u7f6epriority set callback \u8fd9\u4e00\u6b65\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u5728host\u53d1\u751f\u53d8\u5316\u7684\u65f6\u5019\u505a\u4e00\u4e9b\u4e8b\u60c5\uff0c\u6bd4\u5982 addMemberUpdateCb \u4f1a\u5728host\u79fb\u9664\u7684\u65f6\u5019\u505a\u4e00\u4e9bdrain connection\u7684\u64cd\u4f5c\u3002 \u800c addPriorityUpdateCb \u5219\u9700\u8981\u89e6\u53d1ThreadLocalCluster\u7684\u66f4\u65b0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 // Now setup for cross-thread updates. cluster . prioritySet (). addMemberUpdateCb ( [ & cluster , this ]( const HostVector & , const HostVector & hosts_removed ) -> void { if ( cluster . info () -> lbConfig (). close_connections_on_host_set_change ()) { for ( const auto & host_set : cluster . prioritySet (). hostSetsPerPriority ()) { // This will drain all tcp and http connection pools. postThreadLocalDrainConnections ( cluster , host_set -> hosts ()); } } else { // TODO(snowp): Should this be subject to merge windows? // Whenever hosts are removed from the cluster, we make each TLS cluster drain it's // connection pools for the removed hosts. If `close_connections_on_host_set_change` is // enabled, this case will be covered by first `if` statement, where all // connection pools are drained. if ( ! hosts_removed . empty ()) { postThreadLocalDrainConnections ( cluster , hosts_removed ); } } }); cluster . prioritySet (). addPriorityUpdateCb ([ & cm_cluster , this ]( uint32_t priority , const HostVector & hosts_added , const HostVector & hosts_removed ) { // This fires when a cluster is about to have an updated member set. We need to send this // out to all of the thread local configurations. // Should we save this update and merge it with other updates? // // Note that we can only _safely_ merge updates that have no added/removed hosts. That is, // only those updates that signal a change in host healthcheck state, weight or metadata. // // We've discussed merging updates related to hosts being added/removed, but it's really // tricky to merge those given that downstream consumers of these updates expect to see the // full list of updates, not a condensed one. This is because they use the broadcasted // HostSharedPtrs within internal maps to track hosts. If we fail to broadcast the entire list // of removals, these maps will leak those HostSharedPtrs. // // See https://github.com/envoyproxy/envoy/pull/3941 for more context. bool scheduled = false ; const auto merge_timeout = PROTOBUF_GET_MS_OR_DEFAULT ( cm_cluster . cluster (). info () -> lbConfig (), update_merge_window , 1000 ); // Remember: we only merge updates with no adds/removes \u2014 just hc/weight/metadata changes. const bool is_mergeable = hosts_added . empty () && hosts_removed . empty (); if ( merge_timeout > 0 ) { // If this is not mergeable, we should cancel any scheduled updates since // we'll deliver it immediately. scheduled = scheduleUpdate ( cm_cluster , priority , is_mergeable , merge_timeout ); } // If an update was not scheduled for later, deliver it immediately. if ( ! scheduled ) { cm_stats_ . cluster_updated_ . inc (); postThreadLocalClusterUpdate ( cm_cluster , ThreadLocalClusterUpdateParams ( priority , hosts_added , hosts_removed )); } }); \u751f\u6210\u66f4\u65b0\u53c2\u6570\uff0c\u6700\u540e\u89e6\u53d1thread local cluster\u66f4\u65b0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // Finally, post updates cross-thread so the per-thread load balancers are ready. First we // populate any update information that may be available after cluster init. ThreadLocalClusterUpdateParams params ; for ( auto & host_set : cluster . prioritySet (). hostSetsPerPriority ()) { if ( host_set -> hosts (). empty ()) { continue ; } params . per_priority_update_params_ . emplace_back ( host_set -> priority (), host_set -> hosts (), HostVector {}); } // NOTE: In all cases *other* than the local cluster, this is when a cluster is added/updated // The local cluster must currently be statically defined and must exist prior to other // clusters being added/updated. We could gate the below update on hosts being available on // the cluster or the cluster not already existing, but the special logic is not worth it. postThreadLocalClusterUpdate ( cm_cluster , std :: move ( params )); Note \u4e00\u4e2aCluster\u521d\u59cb\u5316\u5b8c\u6210\u6216\u8005\u66f4\u65b0\u540e\uff0c\u9700\u8981\u66f4\u65b0\u6240\u6709\u7684Thread Local\u4e2d\uff0c\u8ba9\u6240\u6709\u7684Thread\u53ef\u4ee5\u62ff\u5230\u6700\u65b0\u7684Cluster 1 2 void ClusterManagerImpl::postThreadLocalClusterUpdate ( ClusterManagerCluster & cm_cluster , ThreadLocalClusterUpdateParams && params ); \u8bbe\u7f6e\u96c6\u7fa4\u7684 AddedOrUpdated \u4f4d\uff0c\u8868\u660e\u5df2\u7ecf\u66f4\u65b0\u4e86 1 2 3 4 5 bool add_or_update_cluster = false ; if ( ! cm_cluster . addedOrUpdated ()) { add_or_update_cluster = true ; cm_cluster . setAddedOrUpdated (); } \u5f00\u59cb\u751f\u6210update hosts params\u3001locality weight\u3001overprovision_factor\u7b49\u9700\u8981\u53c2\u6570 \u5404\u4e2athread\u4e2d\u7684Cluster Priority Set\u4f1a\u6839\u636e\u8fd9\u4e9b\u53c2\u6570\u6765\u8fdb\u884c\u66f4\u65b0\u3002 1 2 3 4 5 6 7 for ( auto & per_priority : params . per_priority_update_params_ ) { const auto & host_set = cm_cluster . cluster (). prioritySet (). hostSetsPerPriority ()[ per_priority . priority_ ]; per_priority . update_hosts_params_ = HostSetImpl :: updateHostsParams ( * host_set ); per_priority . locality_weights_ = host_set -> localityWeights (); per_priority . overprovisioning_factor_ = host_set -> overprovisioningFactor (); } \u5f00\u59cb\u5728\u5404\u4e2a\u7ebf\u7a0b\u4e2d\u8fd0\u884c \u5728ThreadLocal\u4e2d\u83b7\u53d6\u5230ThreadLocalClusterManagerImpl 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 tls_ . runOnAllThreads ( [ info = cm_cluster . cluster (). info (), params = std :: move ( params ), add_or_update_cluster , load_balancer_factory ]( OptRef < ThreadLocalClusterManagerImpl > cluster_manager ) { ThreadLocalClusterManagerImpl :: ClusterEntry * new_cluster = nullptr ; if ( add_or_update_cluster ) { if ( cluster_manager -> thread_local_clusters_ . count ( info -> name ()) > 0 ) { ENVOY_LOG ( debug , \"updating TLS cluster {}\" , info -> name ()); } else { ENVOY_LOG ( debug , \"adding TLS cluster {}\" , info -> name ()); } new_cluster = new ThreadLocalClusterManagerImpl :: ClusterEntry ( * cluster_manager , info , load_balancer_factory ); cluster_manager -> thread_local_clusters_ [ info -> name ()]. reset ( new_cluster ); } for ( const auto & per_priority : params . per_priority_update_params_ ) { cluster_manager -> updateClusterMembership ( info -> name (), per_priority . priority_ , per_priority . update_hosts_params_ , per_priority . locality_weights_ , per_priority . hosts_added_ , per_priority . hosts_removed_ , per_priority . overprovisioning_factor_ ); } if ( new_cluster != nullptr ) { for ( auto & cb : cluster_manager -> update_callbacks_ ) { cb -> onClusterAddOrUpdate ( * new_cluster ); } } });","title":"\u6838\u5fc3\u65b9\u6cd5\u548c\u7c7b\u5206\u6790"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/envoy/dpdk/","text":"DPDK \u4e00\u4e9b\u5f00\u6e90\u5b9e\u73b0 mTCP IWIP Seastar F-Stack \u57fa\u4e8eOS\u5185\u6838\u7684\u8f6c\u53d1\u6280\u672f\u6709\u54ea\u4e9b\u95ee\u9898\uff1f \u5c40\u90e8\u6027(\u7f13\u5b58)\u5931\u6548\u7684\u95ee\u9898 \u7f51\u7edc\u5904\u7406\u5f80\u5f80\u8fd0\u884c\u5728\u591a\u6838\u73af\u5883\u4e2d\uff0c\u4e00\u4e2a\u6570\u636e\u5305\u7684\u751f\u547d\u5468\u671f\u53ef\u80fd\u4f1a\u8fd0\u8f6c\u5728\u591a\u4e2a\u6838\u4e0a\uff0c\u6bd4\u5982\u9a71\u52a8\u5904\u7406\u5728Core0\uff0c\u5185\u6838\u5904\u7406\u5728Core1\uff0c\u7528\u6237\u6001\u5904\u7406\u5728Core2\uff0c\u8fd9\u6837 \u8de8\u8d8a\u591a\u4e2a\u6838\u5fc3\uff0cCPU\u7f13\u5b58\u53ef\u80fd\u4f1a\u5931\u6548\u3002\u518d\u52a0\u4e0aNUMA\u7684\u5f71\u54cd\uff0c\u8fd9\u4e2a\u95ee\u9898\u53ef\u80fd\u4f1a\u66f4\u52a0\u4e25\u91cd\u3002 \u4e2d\u65ad\u5bfc\u81f4\u7684\u5f00\u9500\u548c\u9501 \u7f51\u53e3\u6536\u5230\u62a5\u6587\uff0c\u4f1a\u4ea7\u751f\u786c\u4ef6\u4e2d\u65ad\uff0c\u7ea7\u522b\u8d8a\u9ad8\uff0c\u53ef\u4ee5\u6253\u65ad\u76f8\u5bf9\u4f18\u5148\u7ea7\u8f83\u4f4e\u7684\u8f6f\u4e2d\u65ad\u548c\u5176\u4ed6\u7cfb\u7edf\u8c03\u7528\u3002\u8fd9\u4e9b\u786c\u4ef6\u4e2d\u65ad\u4f1a\u5bfc\u81f4\u7cfb\u7edf\u4e0a\u4e0b\u6587\u9891\u7e41\u5207\u6362\u3002\u540c\u65f6\u4efb\u52a1\u5207\u6362 \u5f80\u5f80\u5bf9\u5e94\u540c\u6b65\u548c\u52a0\u9501\u3002\u8fd9\u4e9b\u90fd\u4f1a\u5e26\u6765\u4e25\u91cd\u7684\u6d88\u8017\uff0c\u7279\u522b\u662f\u5927\u91cf\u77ed\ud83d\udd17\u4f1a\u5bfc\u81f4\u7cfb\u7edf\u6027\u80fd\u6025\u5267\u4e0b\u964d\u3002 \u5185\u5b58\u591a\u6b21\u62f7\u8d1d\u5bfc\u81f4\u7684\u5f00\u9500 \u57fa\u4e8eOS\u5185\u6838\u7684\u8f6c\u53d1\uff0c\u6570\u636e\u5305\u7684\u8def\u5f84\u662f: \u7f51\u53e3->DMA->\u5185\u6838\u7f13\u51b2\u533a->\u7528\u6237\u6001\u7a7a\u95f4\u3002 DPDK\u6280\u672f\u5e26\u6765\u7684\u6539\u53d8 \u7528\u6237\u6001\u9a71\u52a8\uff0c\u7ed5\u8fc7\u5185\u6838\u9a71\u52a8\u6536\u5305\uff0c\u51cf\u5c11\u5185\u5b58\u62f7\u8d1d \u652f\u6301 CPU \u4eb2\u548c\u6027\u7ed1\u5b9a\uff0c\u652f\u6301\u5bf9\u591a\u6838\u591a\u7ebf\u7a0b\u7684\u652f\u6491\uff0c\u6bcf\u4e2a\u6838\u5bf9\u5e94\u4e00\u4e2a\u514d\u9501\u961f\u5217\uff0c\u51cf\u5c11\u7ebf\u7a0b\u8c03\u5ea6\u548c\u9501\u7684\u6d88\u8017 \u5bf9 NUMA \u7684\u4f18\u5316\uff0c\u5c3d\u91cf\u5728\u5904\u7406\u65f6\u4e0d\u8de8 NUMA\u3002 \u5229\u7528 HugePage \u6280\u672f\uff0c\u51cf\u5c11 CacheMiss \u7684\u60c5\u51b5","title":"DPDK"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/envoy/dpdk/#dpdk","text":"","title":"DPDK"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/envoy/dpdk/#_1","text":"mTCP IWIP Seastar F-Stack","title":"\u4e00\u4e9b\u5f00\u6e90\u5b9e\u73b0"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/envoy/dpdk/#os","text":"\u5c40\u90e8\u6027(\u7f13\u5b58)\u5931\u6548\u7684\u95ee\u9898 \u7f51\u7edc\u5904\u7406\u5f80\u5f80\u8fd0\u884c\u5728\u591a\u6838\u73af\u5883\u4e2d\uff0c\u4e00\u4e2a\u6570\u636e\u5305\u7684\u751f\u547d\u5468\u671f\u53ef\u80fd\u4f1a\u8fd0\u8f6c\u5728\u591a\u4e2a\u6838\u4e0a\uff0c\u6bd4\u5982\u9a71\u52a8\u5904\u7406\u5728Core0\uff0c\u5185\u6838\u5904\u7406\u5728Core1\uff0c\u7528\u6237\u6001\u5904\u7406\u5728Core2\uff0c\u8fd9\u6837 \u8de8\u8d8a\u591a\u4e2a\u6838\u5fc3\uff0cCPU\u7f13\u5b58\u53ef\u80fd\u4f1a\u5931\u6548\u3002\u518d\u52a0\u4e0aNUMA\u7684\u5f71\u54cd\uff0c\u8fd9\u4e2a\u95ee\u9898\u53ef\u80fd\u4f1a\u66f4\u52a0\u4e25\u91cd\u3002 \u4e2d\u65ad\u5bfc\u81f4\u7684\u5f00\u9500\u548c\u9501 \u7f51\u53e3\u6536\u5230\u62a5\u6587\uff0c\u4f1a\u4ea7\u751f\u786c\u4ef6\u4e2d\u65ad\uff0c\u7ea7\u522b\u8d8a\u9ad8\uff0c\u53ef\u4ee5\u6253\u65ad\u76f8\u5bf9\u4f18\u5148\u7ea7\u8f83\u4f4e\u7684\u8f6f\u4e2d\u65ad\u548c\u5176\u4ed6\u7cfb\u7edf\u8c03\u7528\u3002\u8fd9\u4e9b\u786c\u4ef6\u4e2d\u65ad\u4f1a\u5bfc\u81f4\u7cfb\u7edf\u4e0a\u4e0b\u6587\u9891\u7e41\u5207\u6362\u3002\u540c\u65f6\u4efb\u52a1\u5207\u6362 \u5f80\u5f80\u5bf9\u5e94\u540c\u6b65\u548c\u52a0\u9501\u3002\u8fd9\u4e9b\u90fd\u4f1a\u5e26\u6765\u4e25\u91cd\u7684\u6d88\u8017\uff0c\u7279\u522b\u662f\u5927\u91cf\u77ed\ud83d\udd17\u4f1a\u5bfc\u81f4\u7cfb\u7edf\u6027\u80fd\u6025\u5267\u4e0b\u964d\u3002 \u5185\u5b58\u591a\u6b21\u62f7\u8d1d\u5bfc\u81f4\u7684\u5f00\u9500 \u57fa\u4e8eOS\u5185\u6838\u7684\u8f6c\u53d1\uff0c\u6570\u636e\u5305\u7684\u8def\u5f84\u662f: \u7f51\u53e3->DMA->\u5185\u6838\u7f13\u51b2\u533a->\u7528\u6237\u6001\u7a7a\u95f4\u3002","title":"\u57fa\u4e8eOS\u5185\u6838\u7684\u8f6c\u53d1\u6280\u672f\u6709\u54ea\u4e9b\u95ee\u9898\uff1f"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/envoy/dpdk/#dpdk_1","text":"\u7528\u6237\u6001\u9a71\u52a8\uff0c\u7ed5\u8fc7\u5185\u6838\u9a71\u52a8\u6536\u5305\uff0c\u51cf\u5c11\u5185\u5b58\u62f7\u8d1d \u652f\u6301 CPU \u4eb2\u548c\u6027\u7ed1\u5b9a\uff0c\u652f\u6301\u5bf9\u591a\u6838\u591a\u7ebf\u7a0b\u7684\u652f\u6491\uff0c\u6bcf\u4e2a\u6838\u5bf9\u5e94\u4e00\u4e2a\u514d\u9501\u961f\u5217\uff0c\u51cf\u5c11\u7ebf\u7a0b\u8c03\u5ea6\u548c\u9501\u7684\u6d88\u8017 \u5bf9 NUMA \u7684\u4f18\u5316\uff0c\u5c3d\u91cf\u5728\u5904\u7406\u65f6\u4e0d\u8de8 NUMA\u3002 \u5229\u7528 HugePage \u6280\u672f\uff0c\u51cf\u5c11 CacheMiss \u7684\u60c5\u51b5","title":"DPDK\u6280\u672f\u5e26\u6765\u7684\u6539\u53d8"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/envoy/drain_manager/","text":"Drain manager\u5206\u6790 \u57fa\u7840\u63a5\u53e3\u7c7b 1 2 3 4 5 6 7 8 9 10 11 12 13 // \u7f51\u7edc\u5c42\u7528\u6765\u51b3\u7b56\u4ec0\u4e48\u65f6\u5019\u6267\u884cdrain class DrainDecision { public : virtual ~ DrainDecision () {} // \u7528\u4e8e\u5224\u65ad\u4e00\u4e2a\u8fde\u63a5\u662f\u5426\u8981closed\u5e76\u4e14\u8fdb\u884cdrain\u5904\u7406 virtual bool drainClose () const PURE ; }; class DrainManager : public Network :: DrainDecision { public : virtual void startDrainSequence ( std :: function < void () > completion ) PURE ; virtual void startParentShutdownSequence () PURE ; }; DrainManagerImpl \u5b9e\u73b0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 class DrainManagerImpl : Logger :: Loggable < Logger :: Id :: main > , public DrainManager { public : DrainManagerImpl ( Instance & server , envoy :: api :: v2 :: Listener :: DrainType drain_type ); // Server::DrainManager bool drainClose () const override ; void startDrainSequence ( std :: function < void () > completion ) override ; void startParentShutdownSequence () override ; private : bool draining () const { return drain_tick_timer_ != nullptr ; } void drainSequenceTick (); Instance & server_ ; const envoy :: api :: v2 :: Listener :: DrainType drain_type_ ; Event :: TimerPtr drain_tick_timer_ ; std :: atomic < uint32_t > drain_time_completed_ {}; Event :: TimerPtr parent_shutdown_timer_ ; std :: function < void () > drain_sequence_completion_ ; }; // \u5c31\u662f\u4e00\u4e2atimer\uff0c\u6307\u5b9a\u7684\u65f6\u95f4\u5230\u8fbe\u540e\u5c31\u5f00\u59cb\u6267\u884cdrain callback void DrainManagerImpl::startDrainSequence ( std :: function < void () > completion ) { drain_sequence_completion_ = completion ; ASSERT ( ! drain_tick_timer_ ); drain_tick_timer_ = server_ . dispatcher (). createTimer ([ this ]() -> void { drainSequenceTick (); }); drainSequenceTick (); } // \u4e0d\u505c\u7684\u8ba1\u6570\u548c\u6253\u5370 void DrainManagerImpl::drainSequenceTick () { ENVOY_LOG ( trace , \"drain tick #{}\" , drain_time_completed_ . load ()); ASSERT ( drain_time_completed_ . load () < server_ . options (). drainTime (). count ()); ++ drain_time_completed_ ; if ( drain_time_completed_ . load () < server_ . options (). drainTime (). count ()) { drain_tick_timer_ -> enableTimer ( std :: chrono :: milliseconds ( 1000 )); } else if ( drain_sequence_completion_ ) { drain_sequence_completion_ (); } } // \u5728hotrestart\u7684\u65f6\u5019\uff0c\u5b50\u8fdb\u7a0b\u901a\u77e5\u7236\u8fdb\u7a0bclosing listener\u7136\u540e\u5f00\u59cb\u6267\u884cdrain void InstanceImpl::drainListeners () { ENVOY_LOG ( info , \"closing and draining listeners\" ); listener_manager_ -> stopListeners (); drain_manager_ -> startDrainSequence ( nullptr ); } ListenerImpl\u5b9e\u73b0\u4e86Network::DrainDecision\u63a5\u53e3 1 2 3 4 5 6 bool ListenerImpl::drainClose () const { // When a listener is draining, the \"drain close\" decision is the union of the per-listener drain // manager and the server wide drain manager. This allows individual listeners to be drained and // removed independently of a server-wide drain event (e.g., /healthcheck/fail or hot restart). return local_drain_manager_ -> drainClose () || parent_ . server_ . drainManager (). drainClose (); } http\u7684conn manager\u6bcf\u6b21\u5728\u5904\u7406\u8bf7\u6c42\u7684\u65f6\u5019\u4f1a\u6839\u636elistenerImpl\u7684drianClosed\u7684\u7ed3\u679c\u6765\u51b3\u5b9a\u662f\u5426\u8fdb\u884cdrain\u5904\u7406 1 2 3 4 5 6 7 8 9 10 11 12 // See if we want to drain/close the connection. Send the go away frame prior to encoding the // header block. if ( connection_manager_ . drain_state_ == DrainState :: NotDraining && connection_manager_ . drain_close_ . drainClose ()) { // This doesn't really do anything for HTTP/1.1 other then give the connection another boost // of time to race with incoming requests. It mainly just keeps the logic the same between // HTTP/1.1 and HTTP/2. connection_manager_ . startDrainSequence (); connection_manager_ . stats_ . named_ . downstream_cx_drain_close_ . inc (); ENVOY_STREAM_LOG ( debug , \"drain closing connection\" , * this ); } \u5982\u679c\u8981\u8fdb\u884cdrain\u5904\u7406\u5c31\u5f00\u59cb\u6267\u884cDrain 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 void ConnectionManagerImpl::startDrainSequence () { ASSERT ( drain_state_ == DrainState :: NotDraining ); drain_state_ = DrainState :: Draining ; // http1\u7684\u8bdd\u4ec0\u4e48\u90fd\u4e0d\u505a\uff0chttp2\u5219\u4f1a\u53d1\u9001GOAWAY\u8fdb\u884c\u4f18\u96c5\u5173\u95ed codec_ -> shutdownNotice (); drain_timer_ = read_callbacks_ -> connection (). dispatcher (). createTimer ( [ this ]() -> void { onDrainTimeout (); }); drain_timer_ -> enableTimer ( config_ . drainTimeout ()); } void ConnectionManagerImpl::onDrainTimeout () { ASSERT ( drain_state_ != DrainState :: NotDraining ); codec_ -> goAway (); drain_state_ = DrainState :: Closing ; checkForDeferredClose (); }","title":"Drain manager\u5206\u6790"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/envoy/drain_manager/#drain-manager","text":"\u57fa\u7840\u63a5\u53e3\u7c7b 1 2 3 4 5 6 7 8 9 10 11 12 13 // \u7f51\u7edc\u5c42\u7528\u6765\u51b3\u7b56\u4ec0\u4e48\u65f6\u5019\u6267\u884cdrain class DrainDecision { public : virtual ~ DrainDecision () {} // \u7528\u4e8e\u5224\u65ad\u4e00\u4e2a\u8fde\u63a5\u662f\u5426\u8981closed\u5e76\u4e14\u8fdb\u884cdrain\u5904\u7406 virtual bool drainClose () const PURE ; }; class DrainManager : public Network :: DrainDecision { public : virtual void startDrainSequence ( std :: function < void () > completion ) PURE ; virtual void startParentShutdownSequence () PURE ; }; DrainManagerImpl \u5b9e\u73b0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 class DrainManagerImpl : Logger :: Loggable < Logger :: Id :: main > , public DrainManager { public : DrainManagerImpl ( Instance & server , envoy :: api :: v2 :: Listener :: DrainType drain_type ); // Server::DrainManager bool drainClose () const override ; void startDrainSequence ( std :: function < void () > completion ) override ; void startParentShutdownSequence () override ; private : bool draining () const { return drain_tick_timer_ != nullptr ; } void drainSequenceTick (); Instance & server_ ; const envoy :: api :: v2 :: Listener :: DrainType drain_type_ ; Event :: TimerPtr drain_tick_timer_ ; std :: atomic < uint32_t > drain_time_completed_ {}; Event :: TimerPtr parent_shutdown_timer_ ; std :: function < void () > drain_sequence_completion_ ; }; // \u5c31\u662f\u4e00\u4e2atimer\uff0c\u6307\u5b9a\u7684\u65f6\u95f4\u5230\u8fbe\u540e\u5c31\u5f00\u59cb\u6267\u884cdrain callback void DrainManagerImpl::startDrainSequence ( std :: function < void () > completion ) { drain_sequence_completion_ = completion ; ASSERT ( ! drain_tick_timer_ ); drain_tick_timer_ = server_ . dispatcher (). createTimer ([ this ]() -> void { drainSequenceTick (); }); drainSequenceTick (); } // \u4e0d\u505c\u7684\u8ba1\u6570\u548c\u6253\u5370 void DrainManagerImpl::drainSequenceTick () { ENVOY_LOG ( trace , \"drain tick #{}\" , drain_time_completed_ . load ()); ASSERT ( drain_time_completed_ . load () < server_ . options (). drainTime (). count ()); ++ drain_time_completed_ ; if ( drain_time_completed_ . load () < server_ . options (). drainTime (). count ()) { drain_tick_timer_ -> enableTimer ( std :: chrono :: milliseconds ( 1000 )); } else if ( drain_sequence_completion_ ) { drain_sequence_completion_ (); } } // \u5728hotrestart\u7684\u65f6\u5019\uff0c\u5b50\u8fdb\u7a0b\u901a\u77e5\u7236\u8fdb\u7a0bclosing listener\u7136\u540e\u5f00\u59cb\u6267\u884cdrain void InstanceImpl::drainListeners () { ENVOY_LOG ( info , \"closing and draining listeners\" ); listener_manager_ -> stopListeners (); drain_manager_ -> startDrainSequence ( nullptr ); } ListenerImpl\u5b9e\u73b0\u4e86Network::DrainDecision\u63a5\u53e3 1 2 3 4 5 6 bool ListenerImpl::drainClose () const { // When a listener is draining, the \"drain close\" decision is the union of the per-listener drain // manager and the server wide drain manager. This allows individual listeners to be drained and // removed independently of a server-wide drain event (e.g., /healthcheck/fail or hot restart). return local_drain_manager_ -> drainClose () || parent_ . server_ . drainManager (). drainClose (); } http\u7684conn manager\u6bcf\u6b21\u5728\u5904\u7406\u8bf7\u6c42\u7684\u65f6\u5019\u4f1a\u6839\u636elistenerImpl\u7684drianClosed\u7684\u7ed3\u679c\u6765\u51b3\u5b9a\u662f\u5426\u8fdb\u884cdrain\u5904\u7406 1 2 3 4 5 6 7 8 9 10 11 12 // See if we want to drain/close the connection. Send the go away frame prior to encoding the // header block. if ( connection_manager_ . drain_state_ == DrainState :: NotDraining && connection_manager_ . drain_close_ . drainClose ()) { // This doesn't really do anything for HTTP/1.1 other then give the connection another boost // of time to race with incoming requests. It mainly just keeps the logic the same between // HTTP/1.1 and HTTP/2. connection_manager_ . startDrainSequence (); connection_manager_ . stats_ . named_ . downstream_cx_drain_close_ . inc (); ENVOY_STREAM_LOG ( debug , \"drain closing connection\" , * this ); } \u5982\u679c\u8981\u8fdb\u884cdrain\u5904\u7406\u5c31\u5f00\u59cb\u6267\u884cDrain 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 void ConnectionManagerImpl::startDrainSequence () { ASSERT ( drain_state_ == DrainState :: NotDraining ); drain_state_ = DrainState :: Draining ; // http1\u7684\u8bdd\u4ec0\u4e48\u90fd\u4e0d\u505a\uff0chttp2\u5219\u4f1a\u53d1\u9001GOAWAY\u8fdb\u884c\u4f18\u96c5\u5173\u95ed codec_ -> shutdownNotice (); drain_timer_ = read_callbacks_ -> connection (). dispatcher (). createTimer ( [ this ]() -> void { onDrainTimeout (); }); drain_timer_ -> enableTimer ( config_ . drainTimeout ()); } void ConnectionManagerImpl::onDrainTimeout () { ASSERT ( drain_state_ != DrainState :: NotDraining ); codec_ -> goAway (); drain_state_ = DrainState :: Closing ; checkForDeferredClose (); }","title":"Drain manager\u5206\u6790"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/envoy/eds/","text":"EDS\u66f4\u65b0\u8fc7\u7a0b\u5206\u6790 \u91cd\u8981\u51fd\u6570\u5206\u6790 HostSetImpl::updateHosts (\u9488\u5bf9\u5355\u4e2ahostset\u8fdb\u884c\u5168\u91cf\u66f4\u65b0) \u66f4\u65b0\u8fc7\u8f7d\u56e0\u5b50 \u66f4\u65b0 hosts_ \u3001 healthy_hosts \u3001 degraded_hosts \u3001 exluded_hosts \u3001 hosts_per_locality_ \u7b49\u7b49 \u66f4\u65b0locality weight rebuildLocalityScheduler \u6784\u5efa\u5065\u5eb7\u7684healthy_locality_scheduler rebuildLocalityScheduler \u6784\u5efadegraded\u7684degraded_loality_scheduler \u56de\u8c03PriorityUpdateCb\uff0c\u5bf9\u66f4\u65b0\u540e\u7684\u4fe1\u606f\u8fdb\u884c\u7edf\u8ba1 PrioritySetImpl::updateHosts (\u5305\u542b\u591a\u4e2a\u4f18\u5148\u7ea7\uff0c\u6bcf\u4e00\u4e2a\u4f18\u5148\u7ea7\u4e00\u4e2ahostset\uff0c\u53ef\u4ee5\u5355\u72ec\u66f4\u65b0\u67d0\u4e00\u4e2a\u4f18\u5148\u7ea7) \u53c2\u6570\u89e3\u6790: 1 2 3 4 5 6 1. `uint32_t priority` // \u8981\u66f4\u65b0\u7684hosts\u5c5e\u4e8e\u7684\u4f18\u5148\u7ea7 2. `UpdateHostsParams&& update_hosts_params` // \u8981\u66f4\u65b0\u7684hosts\u7684UpdateHostsParams\u7ed3\u6784(\u540e\u9762\u4f1a\u91cd\u70b9\u89e3\u91ca) 3. `LocalityWeightsConstSharedPtr locality_weights` // \u66f4\u65b0\u540e\u7684locality weight\u7ed3\u6784 4. `const HostVector& hosts_added` // \u8981\u6dfb\u52a0\u7684hosts 5. `const HostVector& hosts_removed` // \u8981\u79fb\u9664\u7684hosts 6. `absl::optional<uint32_t> overprovisioning_factor = absl::nullopt` // \u662f\u5426\u66f4\u65b0\u8fc7\u8f7d\u56e0\u5b50\uff0c\u4e0d\u9700\u8981\u7684\u8bdd\u5c31 \u95f4\u63a5\u7684\u8c03\u7528\u4e86HostSetImpl::updateHosts\uff0c\u5176\u4e2dupdate_hosts_params\u5305\u542b\u4e86\u6784\u9020\u4e00\u4e2ahostset\u6240\u9700\u8981\u7684\u5168\u90e8\u4fe1\u606f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 void PrioritySetImpl::updateHosts ( uint32_t priority , UpdateHostsParams && update_hosts_params , LocalityWeightsConstSharedPtr locality_weights , const HostVector & hosts_added , const HostVector & hosts_removed , absl :: optional < uint32_t > overprovisioning_factor ) { // Ensure that we have a HostSet for the given priority. getOrCreateHostSet ( priority , overprovisioning_factor ); static_cast < HostSetImpl *> ( host_sets_ [ priority ]. get ()) -> updateHosts ( std :: move ( update_hosts_params ), std :: move ( locality_weights ), hosts_added , hosts_removed , overprovisioning_factor ); if ( ! batch_update_ ) { runUpdateCallbacks ( hosts_added , hosts_removed ); } } 1 2 3 1. \u83b7\u53d6\u6216\u8005\u521b\u5efa\u6307\u5b9a\u4f18\u5148\u7ea7\u7684`HostSetImpl`\u7ed3\u6784 2. \u8c03\u7528HostSetImpl\u7684`updateHosts`\u65b9\u6cd5 3. \u662f\u5426\u662fbatch_update\uff0c\u5982\u679c\u4e0d\u662f\u5c31\u518d\u8c03\u7528`runUpdateCallbacks`\uff0c\u4f7f\u7528\u8005\u53ef\u4ee5\u6ce8\u518c\u8fdb\u884c\u56de\u8c03 Tip \u901a\u8fc7BatchUpdateScope\u8fdb\u884cupdate\u7684\uff0c\u5c31\u662fbatch_update\uff0c\u662f\u901a\u8fc7\u4e00\u4e2aPriorityStateManagle\u6765\u8fdb\u884c\u4e00\u6b21\u6027\u66f4\u65b0\u7684\u3002 runUpdateCallbacks \u53ea\u5728HostSet\u4e2d\u7684\u4e3b\u673a\u5b8c\u6574\u7684\u6dfb\u52a0\u548c\u5220\u9664\u624d\u4f1a\u89e6\u53d1\uff0c\u8fd9\u91cc\u9762\u7684callback\u662f\u901a\u8fc7addMemberUpdateCb\u6765\u6dfb\u52a0\u7684\uff0c\u4e0d\u533a\u5206\u4f18\u5148\u7ea7\u3002 runReferenceUpdateCallbacks \u662f\u5728HostSet\u4e2d\u7684\u4e3b\u673a\u8fdb\u884c\u5c40\u90e8\u7684\u6dfb\u52a0\u548c\u5220\u9664\u624d\u4f1a\u89e6\u53d1\uff0c\u8fd9\u91cc\u9762\u7684callback\u662f\u901a\u8fc7addPriorityUpdateCb\u6765\u6dfb\u52a0\u7684\uff0c\u662f\u533a\u5206\u4f18\u5148\u7ea7\u7684\u3002 PrioritySetImpl::BatchUpdateScope::updateHosts \u53c2\u6570\u89e3\u6790: priority update_hosts_params locality_weights hosts_added hosts_removed overprovisioning_factor 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 void PrioritySetImpl::BatchUpdateScope::updateHosts ( uint32_t priority , PrioritySet :: UpdateHostsParams && update_hosts_params , LocalityWeightsConstSharedPtr locality_weights , const HostVector & hosts_added , const HostVector & hosts_removed , absl :: optional < uint32_t > overprovisioning_factor ) { // We assume that each call updates a different priority. ASSERT ( priorities_ . find ( priority ) == priorities_ . end ()); priorities_ . insert ( priority ); for ( const auto & host : hosts_added ) { all_hosts_added_ . insert ( host ); } for ( const auto & host : hosts_removed ) { all_hosts_removed_ . insert ( host ); } parent_ . updateHosts ( priority , std :: move ( update_hosts_params ), locality_weights , hosts_added , hosts_removed , overprovisioning_factor ); } \u672c\u8d28\u4e0a\u548c PrioritySetImpl::updateHosts \u6ca1\u5565\u533a\u522b\uff0c\u53c2\u6570\u90fd\u662f\u900f\u4f20\u7684\uff0c\u53ea\u662f\u989d\u5916\u4fdd\u5b58\u4e86\u4f18\u5148\u7ea7\u3001\u548c\u8981\u6dfb\u52a0\u7684hosts\u3001\u8981\u79fb\u9664\u7684hosts \u8fd9\u4e48\u505a\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u53ef\u4ee5\u8ba1\u7b97\u6700\u7ec8\u7684\u65b0\u589ehosts\u548c\u5220\u9664\u7684hosts\uff0c\u7136\u540e\u56de\u8c03runUpdateCallbacks\uff0c\u56e0\u4e3a PrioritySetImpl::updateHosts \u4e00\u6b21 \u53ea\u80fd\u66f4\u65b0\u4e00\u4e2a\u4f18\u5148\u7ea7\u7684hosts\uff0c\u901a\u8fc7 BatchUpdateScope \u66b4\u9732\u51fa\u4e00\u4e2a\u76f8\u540c\u7684\u63a5\u53e3\u6765\u66f4\u65b0\uff0c\u6bcf\u6b21\u66f4\u65b0\u8bb0\u5f55\u65b0\u589e\u7684hosts\u548c\u79fb\u9664\u7684hosts\u3002 EdsClusterImpl::BatchUpdateHelper::batchUpdate \u53c2\u6570\u89e3\u6790 PrioritySet::HostUpdateCb& host_update_cb \u66f4\u65b0hosts \u57fa\u672c\u8fc7\u7a0b\u5206\u6790: \u521b\u5efaPriorityStateManager \u904d\u5386\u6240\u6709\u7684locality_lb_endpoint \u8c03\u7528initializePriorityFor\u8fdb\u884c\u4f18\u5148\u7ea7\u7684\u521d\u59cb\u5316 \u904d\u5386lb_endpoints\uff0c\u9488\u5bf9\u6bcf\u4e00\u4e2a\u4e3b\u673a\u901a\u8fc7registerHostForPriority\u8fdb\u884c\u4e3b\u673a\u7684\u6ce8\u518c \u83b7\u53d6PriorityStateManager\u4e2d\u7684priorityState\uff0c \u904d\u5386\u6240\u6709\u7684 PriorityState \u4ece PriorityState \u4e2d\u53d6\u51fa\u6bcf\u4e00\u4e2a\u4f18\u5148\u7ea7\u5185hosts\u8fdb\u884c updateHostsPerLocality PriorityStateManager::updateClusterPrioritySet \u901a\u8fc7updateDynamicHostList\u62ff\u5230\u6307\u5b9a\u4f18\u5148\u7ea7\u4e0b\u66f4\u65b0\u540e\u7684hosts\u5217\u8868\u3001hosts_add\u3001host_remove\u8fd8\u7b49\u8fdb\u884c\u6700\u7ec8\u7684\u66f4\u65b0 \u53c2\u6570\u89e3\u6790: const uint32_t priority // \u8981\u66f4\u65b0\u7684hosts\u6240\u5728\u4f18\u5148\u7ea7 HostVectorSharedPtr&& current_hosts // \u5f53\u524d\u66f4\u65b0\u5b8c\u6210\u540e\u7684\u6240\u6709hosts const absl::optional<HostVector>& hosts_added // \u6dfb\u52a0\u7684hosts const absl::optional<HostVector>& hosts_removed // \u5220\u9664\u7684hosts const absl::optional<Upstream::Host::HealthFlag> health_checker_flag // absl::optional<uint32_t> overprovisioning_factor // overprovisioning_factor \u57fa\u672c\u8fc7\u7a0b\u5206\u6790: \u5982\u679c\u8981\u66f4\u65b0\u7684\u4f18\u5148\u7ea7\u5df2\u7ecf\u5b58\u5728\uff0c\u5c31\u83b7\u53d6locality weight map\uff0c\u5426\u5219\u5c31\u521b\u5efa\u4e00\u4e2a\u7a7a\u7684locality weight map \u521b\u5efahosts_per_locality\u7ed3\u6784\uff0ckey\u662flocality\uff0cvalue\u662fhosts \u904d\u5386\u6240\u6709\u8981\u66f4\u65b0\u7684hosts \u7ed9\u6bcf\u4e00\u4e2ahosts\u8bbe\u7f6ehealth flag \u66f4\u65b0hosts_per_locality\u7ed3\u6784 \u904d\u5386hosts_per_locality \u5224\u65ad\u662f\u5426\u5305\u542b\u672c\u5730locality\uff0c\u6709\u7684\u8bdd\u5c31\u5c06\u672c\u5730locality\u7684hosts\u6dfb\u52a0\u5230\u5230per_locality vector\u4e2d \u5982\u679c\u5f00\u542f\u4e86locality weight lb\u7684\u8bdd\u5c31\u5c06\u672c\u5730locality weight map\u653e\u5230locality_weights\u4e2d\uff0c\u8bb0\u5f55\u6240\u6709\u7684locality\u7684weight\uff0c\u662f\u4e00\u4e2avector \u521b\u5efaHostsPerLocalityImpl\u5bf9\u8c61 \u8c03\u7528update_cb_\u7684updateHosts\u8fdb\u884c\u66f4\u65b0\uff0c\u5426\u5219\u5c31\u76f4\u63a5\u66f4\u65b0cluster\u5bf9\u8c61\u7684prioritySet().updateHosts\u65b9\u6cd5\u8fdb\u884c\u66f4\u65b0 EdsClusterImpl::updateHostsPerLocality \u66f4\u65b0\u6307\u5b9a\u4f18\u5148\u7ea7\u7684hosts\uff0c\u540c\u65f6\u4e5f\u4f1a\u66f4\u65b0locality weight map\u3001health flag\u3001 \u53c2\u6570\u89e3\u6790: const uint32_t priority // \u8981\u66f4\u65b0\u7684hosts\u7684\u4f18\u5148\u7ea7\uff0c const uint32_t overprovisioning_factor // \u8981\u66f4\u65b0\u7684hosts\u7684\u8fc7\u8f7d\u56e0\u5b50 const HostVector& new_hosts , // \u8981\u66f4\u65b0\u7684hosts LocalityWeightsMap& locality_weights_map // \u5df2\u7ecf\u5b58\u5728\u7684\u673a\u5668\u7684locality weight map LocalityWeightsMap& new_locality_weights_map , // \u8981\u66f4\u65b0\u7684hosts\u7684Locality weight map PriorityStateManager& priority_state_manager , // \u7528\u6765\u6784\u5efa\u66f4\u65b0hosts\u72b6\u6001\u7684 std::unordered_map<std::string, HostSharedPtr>& updated_hosts // \u7528\u6765\u5b58\u653e \u57fa\u672c\u8fc7\u7a0b\u5206\u6790: \u4ece\u5f53\u524d priority_set_ \u4e2d\u83b7\u53d6\u6307\u5b9a priority \u7684hosts\uff0c\u6ca1\u6709\u5c31\u65b0\u521b\u5efa \u62f7\u8d1d\u4e00\u4efd\u5f53\u524d priority \u7684hosts\uff0c\u4f20\u9012\u5230 updateDynamicHostList \u4e2d\u8fdb\u884c\u66f4\u65b0 \u5982\u679c\u7684\u786e\u6709\u66f4\u65b0\u3001\u6216\u8005overprovisioningFactor\u53d1\u751f\u4e86\u6539\u53d8\u3001\u6216\u8005locality weight map\u53d1\u751f\u4e86\u6539\u53d8\uff0c \u5c31\u8c03\u7528 priority_state_manager.updateClusterPrioritySet \u5bf9\u901a\u8fc7 updateDynamicHostList \u540e\u7684hosts\u8fdb\u884c\u66f4\u65b0 \u7136\u540e\u66f4\u65b0locality weights map BaseDynamicClusterImpl::updateDynamicHostList \u5bf9\u4e00\u4e2a\u65b0\u589e\u7684\u7684hosts\uff0c\u548c\u5df2\u7ecf\u5b58\u5728\u7684hosts\u8fdb\u884c\u5bf9\u6bd4\uff0c\u5df2\u7ecf\u5b58\u5728\u7684\u6839\u636e\u9700\u8981\u8fdb\u884c\u539f\u5730\u66f4\u65b0\uff0c\u4e0d\u5b58\u5728\u7684\u5c31\u8ba4\u4e3a\u662f\u65b0\u589e\u7684\uff0c \u6700\u540e\u5f97\u5230\u65b0\u589e\u7684hosts\u5217\u8868(hosts_added_to_current_priority)\uff0c\u5220\u9664\u7684hosts\u5217\u8868(hosts_removed_from_current_priority)\uff0c\u4ee5\u53ca\u6700\u540e\u66f4\u65b0\u5b8c\u7684hosts\u5217\u8868(current_priority_hosts)\u3002 \u53c2\u6570\u89e3\u6790: const HostVector& new_hosts // \u8981\u66f4\u65b0\u7684hosts\uff0c\u662fper priority HostVector& current_priority_hosts // \u5f53\u524d\u4f18\u5148\u7ea7\u4e0b\u5b58\u5728\u7684hosts HostVector& hosts_added_to_current_priority // \u66f4\u65b0\u540e\uff0c\u6dfb\u52a0\u5230\u5f53\u524d\u4f18\u5148\u7ea7\u7684\u673a\u5668 HostVector& hosts_removed_from_current_priority // \u66f4\u65b0\u540e\uff0c\u4ece\u5f53\u524d\u4f18\u5148\u7ea7\u79fb\u9664\u7684\u673a\u5668 HostMap& updated_hosts // \u7528\u6765\u8fc7\u6ee4\u91cd\u590d\u7684hosts\uff0c\u4fdd\u5b58\u5df2\u7ecf\u66f4\u65b0\u8fc7\u7684hosts\uff0c\u6700\u7ec8\u66ff\u6362all_hosts_ const HostMap& all_hosts // \u5f53\u524d\u96c6\u7fa4\u5b58\u5728\u7684\u6240\u6709\u4e3b\u673a PrioritySetImpl::batchHostUpdate 1 2 3 4 5 6 7 8 9 10 11 12 void PrioritySetImpl::batchHostUpdate ( BatchUpdateCb & callback ) { BatchUpdateScope scope ( * this ); // We wrap the update call with a lambda that tracks all the hosts that have been added/removed. callback . batchUpdate ( scope ); // Now that all the updates have been complete, we can compute the diff. HostVector net_hosts_added = filterHosts ( scope . all_hosts_added_ , scope . all_hosts_removed_ ); HostVector net_hosts_removed = filterHosts ( scope . all_hosts_removed_ , scope . all_hosts_added_ ); runUpdateCallbacks ( net_hosts_added , net_hosts_removed ); } \u8c03\u7528 BatchUpdateCb \u5b8c\u6210hosts\u7684\u66f4\u65b0\uff0c\u5f97\u5230\u6240\u6709\u589e\u52a0\u7684host\u548c\u79fb\u9664\u7684host\u7136\u540e\u56de\u8c03update callback\u5373\u53ef \u57fa\u672c\u8fc7\u7a0b\u5206\u6790: xDS\u63a5\u6536\u5230EDS\u914d\u7f6e\uff0c\u56de\u8c03 EdsClusterImpl::onConfigUpdate \u6784\u5efa BatchUpdateHelper \uff0c\u4f20\u9012\u7ed9 PrioritySet::batchHostUpdate \u8fdb\u884c\u6279\u91cf\u66f4\u65b0\uff0c\u66f4\u65b0\u5f53\u524dEDS\u7684PrioritySet 1 2 3 4 5 6 7 8 void EdsClusterImpl::onConfigUpdate ( const Protobuf :: RepeatedPtrField < ProtobufWkt :: Any >& resources , const std :: string & ) { .... // BatchUpdateHelper\u5b9e\u73b0\u4e86PrioritySet::BatchUpdateCb BatchUpdateHelper helper ( * this , cluster_load_assignment ); // batchHostUpdate\u5185\u90e8\u4f1a\u8c03\u7528helper->batchUpdate priority_set_ . batchHostUpdate ( helper ); } PrioritySet::batchHostUpdate \u5185\u90e8\u8c03\u7528 batchUpdate \u8fdb\u884c\u66f4\u65b0 \u8c03\u7528 EdsClusterImpl::BatchUpdateHelper::batchUpdate \u6784\u5efa PriorityStateManager \u901a\u8fc7PriorityStateManager\u6784\u5efaPriorityState\uff0c\u4e5f\u5c31\u662fhosts\u96c6\u5408\u548cLocalityWieghtMap \u904d\u5386\u65b0\u914d\u7f6e\u4e2d\u7684\u6240\u6709\u4f18\u5148\u7ea7\u8c03\u7528 EdsClusterImpl::updateHostsPerLocality \u66f4\u65b0\u5bf9\u5e94\u4f18\u5148\u7ea7\u7684HostSetImpl \u904d\u5386\u6240\u6709\u5f53\u524d\u914d\u7f6e\u4e2d\u5b58\u5728\u7684\u4f18\u5148\u7ea7\u8c03\u7528 EdsClusterImpl::updateHostsPerLocality \u66f4\u65b0\u5bf9\u5e94\u4f18\u5148\u7ea7\u7684HostSetImpl(\u5176\u5b9e\u5c31\u662f\u5220\u9664\uff0c\u56e0\u4e3a\u65b0\u914d\u7f6e\u4e2d\u6ca1\u6709\u8fd9\u4e2a\u4f18\u5148\u7ea7\u7684\u4efb\u4f55host) \u66f4\u65b0EdsClusterImpl\u4e2d\u5b58\u5728\u7684all_host_\u5217\u8868 \u5b8c\u6210\u914d\u7f6e\u6279\u91cf\u66f4\u65b0\uff0c\u521d\u59cb\u5316\u5b8c\u6210 HostSetImpl::partitionHosts \u901a\u8fc7\u4e0a\u9762\u7684\u8fc7\u7a0b\u53ef\u4ee5\u770b\u51fa\uff0c\u6838\u5fc3\u7684\u65b9\u6cd5\u5c31\u662f EdsClusterImpl::updateHostsPerLocality \uff0c\u9488\u5bf9\u5355\u4e2a\u4f18\u5148\u7ea7\u7684\u66f4\u65b0\u3002 \u904d\u5386\u6240\u6709\u8981\u589e\u52a0\u7684\u65b0hosts\uff0c\u4e5f\u5c31\u662fnew_hosts \u5224\u65adupdated_hosts\u4e2d\u662f\u5426\u5df2\u7ecf\u5b58\u5728\uff0c\u907f\u514d\u91cd\u590d\uff0c\u8fbe\u5230\u53bb\u91cd\u7684\u6548\u679c \u4eceall_hosts\u4e2d\u67e5\u627e\u662f\u5426\u662f\u5df2\u7ecf\u5b58\u5728\u7684host \u5982\u679c\u662f\uff0c\u5219\u6e05\u695a\u5f53\u524d\u673a\u5668\u7684 PENDING_DYNAMIC_REMOVAL \u6807\u5fd7 (Why?) \u5982\u679c\u5b58\u5728\u5065\u5eb7\u68c0\u67e5\u673a\u5236\u3001\u5e76\u4e14\u65b0\u6dfb\u52a0\u7684hosts\u548c\u5b58\u5728\u7684host\u4e24\u8005\u7684\u5065\u5eb7\u68c0\u67e5\u7684\u5730\u5740\u4e0d\u540c\uff0c\u5c31\u8ba4\u4e3a\u8df3\u8fc7host\u539f\u5730\u66f4\u65b0\u7684\u8fc7\u7a0b(Why?) \u5982\u679c\u8df3\u8fc7hosts\u539f\u5730\u66f4\u65b0\uff0c\u5219\u8bbe\u7f6emax_host_weight \u5982\u679c\u5b58\u5728\u5065\u5eb7\u68c0\u67e5\u673a\u5236\u5c31\u8bbe\u7f6eHealthFlag\u4e3a Host::HealthFlag::FAILED_ACTIVE_HC \u5982\u679c\u5f53\u524d\u96c6\u7fa4\u8fd8\u5728warm\u9636\u6bb5\uff0c\u5c31\u8bbe\u7f6eHealthFlag\u4e3a Host::HealthFlag::PENDING_ACTIVE_HC \uff0c\u8fd9\u662f\u56e0\u4e3a\u5982\u679c\u8bbe\u7f6e\u4e3a FAILED_ACTIVE_HC \u5c31\u4f1a\u8ba4\u4e3ahosts\u521d\u59cb\u5316\u5b8c\u6210\u4e86\uff0cwram\u9636\u6bb5\u5c31\u7ed3\u675f\u4e86 \u6b63\u5e38\u7684warm\u662f\u5305\u542b\u4e86\u5065\u5eb7\u68c0\u67e5\u7684\u8fc7\u7a0b\u7684\u3002 \u5c06hosts\u6dfb\u52a0\u5230updated_hosts\u4e2d \u5c06hosts\u6dfb\u52a0\u5230final_hosts\u4e2d \u5c06hosts\u6dfb\u52a0\u5230hosts_added_to_current_priority\uff0c\u8fd9\u662f\u786e\u5b9a\u8981\u6dfb\u52a0\u7684 \u5982\u679c\u4e0d\u8df3\u8fc7\u539f\u5730\u66f4\u65b0\uff0c\u5219\u6dfb\u52a0\u5230existing_hosts_for_current_priority\u4e2d \u66f4\u65b0max_host_weight \u66f4\u65b0\u73b0\u5b58\u7684hosts\u7684health flag\uff0c\u5224\u65ad\u662f\u5426\u4f1a\u56e0\u4e3a\u66f4\u65b0health flag\u5bfc\u81f4hosts changed(\u4e3b\u8981\u7684\u8861\u91cf\u6807\u51c6\u5c31\u662f\u66f4\u65b0\u524d\u540e\u7684\u5065\u5eb7\u72b6\u51b5\u662f\u5426\u53d1\u751f\u6539\u53d8\u4e86) \u5224\u65admetadata\u662f\u5426\u6539\u53d8\uff0c\u5e76\u66f4\u65b0metadata \u5224\u65ad\u4f18\u5148\u7ea7\u662f\u5426\u6539\u53d8\uff0c\u5e76\u66f4\u65b0\u4f18\u5148\u7ea7\uff0c\u5982\u679c\u4f18\u5148\u7ea7\u6539\u53d8\u4e86\uff0c\u5c31\u5c06hosts\u6dfb\u52a0\u5230hosts_added_to_current_priority\u4e2d (why? \u4e3a\u4ec0\u4e48\u4f1a\u53d1\u751f\u5462?) \u66f4\u65b0\u6743\u91cd \u5c06hosts\u6dfb\u52a0\u5230final_hosts\u4e2d \u5c06hosts\u6dfb\u52a0\u5230updated_hosts\u4e2d \u904d\u5386\u5f53\u524d\u4f18\u5148\u7ea7\u4e0b\u5b58\u5728\u7684hosts \u5982\u679c\u53d1\u73b0\u5728existing_hosts_for_current_priority\u4e2d\u5c31\u4eceexisting_hosts_for_current_priority\u548ccurrent_priority_hosts\u4e2d\u5220\u9664 \u5982\u679cexisting_hosts_for_current_priority\u4e0d\u4e3a\u7a7a\u5c31\u8868\u660ehosts changed\u4e86 (why?) \u5982\u679cdrainConnectionsOnHostRemoval\u6807\u5fd7\u6ca1\u6709\u5f00\u542f\uff0c\u5c31\u904d\u5386\u5269\u4e0b\u7684current_priority_hosts\uff0c\u627e\u5230\u90a3\u4e9b\u5065\u5eb7\u7684\u4e3b\u673a\uff0c\u66f4\u65b0max_host_weight\uff0c \u5e76\u6dfb\u52a0\u5230final_hosts\u548cupdated_hosts\u4e2d\uff0c\u5e76\u8bbe\u7f6ePENDING_DYNAMIC_REMOVAL\u6807\u5fd7 \u8bbe\u7f6e\u5f53\u524d\u96c6\u7fa4\u6700\u5927\u7684host weight current_priority_hosts\u5269\u4e0b\u7684\u673a\u5668\u88ab\u5f53\u4f5cremove\u7684hosts\uff0c\u6dfb\u52a0\u5230hosts_removed_from_current_priority\u4e2d \u5c06finall_host\u66f4\u65b0\u4e3acurrent_priority_hosts \u8fd4\u56de\u5f53\u524dhosts\u662f\u5426\u53d1\u751f\u4e86\u6539\u53d8","title":"EDS\u66f4\u65b0\u8fc7\u7a0b\u5206\u6790"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/envoy/eds/#eds","text":"","title":"EDS\u66f4\u65b0\u8fc7\u7a0b\u5206\u6790"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/envoy/eds/#_1","text":"HostSetImpl::updateHosts (\u9488\u5bf9\u5355\u4e2ahostset\u8fdb\u884c\u5168\u91cf\u66f4\u65b0) \u66f4\u65b0\u8fc7\u8f7d\u56e0\u5b50 \u66f4\u65b0 hosts_ \u3001 healthy_hosts \u3001 degraded_hosts \u3001 exluded_hosts \u3001 hosts_per_locality_ \u7b49\u7b49 \u66f4\u65b0locality weight rebuildLocalityScheduler \u6784\u5efa\u5065\u5eb7\u7684healthy_locality_scheduler rebuildLocalityScheduler \u6784\u5efadegraded\u7684degraded_loality_scheduler \u56de\u8c03PriorityUpdateCb\uff0c\u5bf9\u66f4\u65b0\u540e\u7684\u4fe1\u606f\u8fdb\u884c\u7edf\u8ba1 PrioritySetImpl::updateHosts (\u5305\u542b\u591a\u4e2a\u4f18\u5148\u7ea7\uff0c\u6bcf\u4e00\u4e2a\u4f18\u5148\u7ea7\u4e00\u4e2ahostset\uff0c\u53ef\u4ee5\u5355\u72ec\u66f4\u65b0\u67d0\u4e00\u4e2a\u4f18\u5148\u7ea7) \u53c2\u6570\u89e3\u6790: 1 2 3 4 5 6 1. `uint32_t priority` // \u8981\u66f4\u65b0\u7684hosts\u5c5e\u4e8e\u7684\u4f18\u5148\u7ea7 2. `UpdateHostsParams&& update_hosts_params` // \u8981\u66f4\u65b0\u7684hosts\u7684UpdateHostsParams\u7ed3\u6784(\u540e\u9762\u4f1a\u91cd\u70b9\u89e3\u91ca) 3. `LocalityWeightsConstSharedPtr locality_weights` // \u66f4\u65b0\u540e\u7684locality weight\u7ed3\u6784 4. `const HostVector& hosts_added` // \u8981\u6dfb\u52a0\u7684hosts 5. `const HostVector& hosts_removed` // \u8981\u79fb\u9664\u7684hosts 6. `absl::optional<uint32_t> overprovisioning_factor = absl::nullopt` // \u662f\u5426\u66f4\u65b0\u8fc7\u8f7d\u56e0\u5b50\uff0c\u4e0d\u9700\u8981\u7684\u8bdd\u5c31 \u95f4\u63a5\u7684\u8c03\u7528\u4e86HostSetImpl::updateHosts\uff0c\u5176\u4e2dupdate_hosts_params\u5305\u542b\u4e86\u6784\u9020\u4e00\u4e2ahostset\u6240\u9700\u8981\u7684\u5168\u90e8\u4fe1\u606f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 void PrioritySetImpl::updateHosts ( uint32_t priority , UpdateHostsParams && update_hosts_params , LocalityWeightsConstSharedPtr locality_weights , const HostVector & hosts_added , const HostVector & hosts_removed , absl :: optional < uint32_t > overprovisioning_factor ) { // Ensure that we have a HostSet for the given priority. getOrCreateHostSet ( priority , overprovisioning_factor ); static_cast < HostSetImpl *> ( host_sets_ [ priority ]. get ()) -> updateHosts ( std :: move ( update_hosts_params ), std :: move ( locality_weights ), hosts_added , hosts_removed , overprovisioning_factor ); if ( ! batch_update_ ) { runUpdateCallbacks ( hosts_added , hosts_removed ); } } 1 2 3 1. \u83b7\u53d6\u6216\u8005\u521b\u5efa\u6307\u5b9a\u4f18\u5148\u7ea7\u7684`HostSetImpl`\u7ed3\u6784 2. \u8c03\u7528HostSetImpl\u7684`updateHosts`\u65b9\u6cd5 3. \u662f\u5426\u662fbatch_update\uff0c\u5982\u679c\u4e0d\u662f\u5c31\u518d\u8c03\u7528`runUpdateCallbacks`\uff0c\u4f7f\u7528\u8005\u53ef\u4ee5\u6ce8\u518c\u8fdb\u884c\u56de\u8c03 Tip \u901a\u8fc7BatchUpdateScope\u8fdb\u884cupdate\u7684\uff0c\u5c31\u662fbatch_update\uff0c\u662f\u901a\u8fc7\u4e00\u4e2aPriorityStateManagle\u6765\u8fdb\u884c\u4e00\u6b21\u6027\u66f4\u65b0\u7684\u3002 runUpdateCallbacks \u53ea\u5728HostSet\u4e2d\u7684\u4e3b\u673a\u5b8c\u6574\u7684\u6dfb\u52a0\u548c\u5220\u9664\u624d\u4f1a\u89e6\u53d1\uff0c\u8fd9\u91cc\u9762\u7684callback\u662f\u901a\u8fc7addMemberUpdateCb\u6765\u6dfb\u52a0\u7684\uff0c\u4e0d\u533a\u5206\u4f18\u5148\u7ea7\u3002 runReferenceUpdateCallbacks \u662f\u5728HostSet\u4e2d\u7684\u4e3b\u673a\u8fdb\u884c\u5c40\u90e8\u7684\u6dfb\u52a0\u548c\u5220\u9664\u624d\u4f1a\u89e6\u53d1\uff0c\u8fd9\u91cc\u9762\u7684callback\u662f\u901a\u8fc7addPriorityUpdateCb\u6765\u6dfb\u52a0\u7684\uff0c\u662f\u533a\u5206\u4f18\u5148\u7ea7\u7684\u3002 PrioritySetImpl::BatchUpdateScope::updateHosts \u53c2\u6570\u89e3\u6790: priority update_hosts_params locality_weights hosts_added hosts_removed overprovisioning_factor 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 void PrioritySetImpl::BatchUpdateScope::updateHosts ( uint32_t priority , PrioritySet :: UpdateHostsParams && update_hosts_params , LocalityWeightsConstSharedPtr locality_weights , const HostVector & hosts_added , const HostVector & hosts_removed , absl :: optional < uint32_t > overprovisioning_factor ) { // We assume that each call updates a different priority. ASSERT ( priorities_ . find ( priority ) == priorities_ . end ()); priorities_ . insert ( priority ); for ( const auto & host : hosts_added ) { all_hosts_added_ . insert ( host ); } for ( const auto & host : hosts_removed ) { all_hosts_removed_ . insert ( host ); } parent_ . updateHosts ( priority , std :: move ( update_hosts_params ), locality_weights , hosts_added , hosts_removed , overprovisioning_factor ); } \u672c\u8d28\u4e0a\u548c PrioritySetImpl::updateHosts \u6ca1\u5565\u533a\u522b\uff0c\u53c2\u6570\u90fd\u662f\u900f\u4f20\u7684\uff0c\u53ea\u662f\u989d\u5916\u4fdd\u5b58\u4e86\u4f18\u5148\u7ea7\u3001\u548c\u8981\u6dfb\u52a0\u7684hosts\u3001\u8981\u79fb\u9664\u7684hosts \u8fd9\u4e48\u505a\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u53ef\u4ee5\u8ba1\u7b97\u6700\u7ec8\u7684\u65b0\u589ehosts\u548c\u5220\u9664\u7684hosts\uff0c\u7136\u540e\u56de\u8c03runUpdateCallbacks\uff0c\u56e0\u4e3a PrioritySetImpl::updateHosts \u4e00\u6b21 \u53ea\u80fd\u66f4\u65b0\u4e00\u4e2a\u4f18\u5148\u7ea7\u7684hosts\uff0c\u901a\u8fc7 BatchUpdateScope \u66b4\u9732\u51fa\u4e00\u4e2a\u76f8\u540c\u7684\u63a5\u53e3\u6765\u66f4\u65b0\uff0c\u6bcf\u6b21\u66f4\u65b0\u8bb0\u5f55\u65b0\u589e\u7684hosts\u548c\u79fb\u9664\u7684hosts\u3002 EdsClusterImpl::BatchUpdateHelper::batchUpdate \u53c2\u6570\u89e3\u6790 PrioritySet::HostUpdateCb& host_update_cb \u66f4\u65b0hosts \u57fa\u672c\u8fc7\u7a0b\u5206\u6790: \u521b\u5efaPriorityStateManager \u904d\u5386\u6240\u6709\u7684locality_lb_endpoint \u8c03\u7528initializePriorityFor\u8fdb\u884c\u4f18\u5148\u7ea7\u7684\u521d\u59cb\u5316 \u904d\u5386lb_endpoints\uff0c\u9488\u5bf9\u6bcf\u4e00\u4e2a\u4e3b\u673a\u901a\u8fc7registerHostForPriority\u8fdb\u884c\u4e3b\u673a\u7684\u6ce8\u518c \u83b7\u53d6PriorityStateManager\u4e2d\u7684priorityState\uff0c \u904d\u5386\u6240\u6709\u7684 PriorityState \u4ece PriorityState \u4e2d\u53d6\u51fa\u6bcf\u4e00\u4e2a\u4f18\u5148\u7ea7\u5185hosts\u8fdb\u884c updateHostsPerLocality PriorityStateManager::updateClusterPrioritySet \u901a\u8fc7updateDynamicHostList\u62ff\u5230\u6307\u5b9a\u4f18\u5148\u7ea7\u4e0b\u66f4\u65b0\u540e\u7684hosts\u5217\u8868\u3001hosts_add\u3001host_remove\u8fd8\u7b49\u8fdb\u884c\u6700\u7ec8\u7684\u66f4\u65b0 \u53c2\u6570\u89e3\u6790: const uint32_t priority // \u8981\u66f4\u65b0\u7684hosts\u6240\u5728\u4f18\u5148\u7ea7 HostVectorSharedPtr&& current_hosts // \u5f53\u524d\u66f4\u65b0\u5b8c\u6210\u540e\u7684\u6240\u6709hosts const absl::optional<HostVector>& hosts_added // \u6dfb\u52a0\u7684hosts const absl::optional<HostVector>& hosts_removed // \u5220\u9664\u7684hosts const absl::optional<Upstream::Host::HealthFlag> health_checker_flag // absl::optional<uint32_t> overprovisioning_factor // overprovisioning_factor \u57fa\u672c\u8fc7\u7a0b\u5206\u6790: \u5982\u679c\u8981\u66f4\u65b0\u7684\u4f18\u5148\u7ea7\u5df2\u7ecf\u5b58\u5728\uff0c\u5c31\u83b7\u53d6locality weight map\uff0c\u5426\u5219\u5c31\u521b\u5efa\u4e00\u4e2a\u7a7a\u7684locality weight map \u521b\u5efahosts_per_locality\u7ed3\u6784\uff0ckey\u662flocality\uff0cvalue\u662fhosts \u904d\u5386\u6240\u6709\u8981\u66f4\u65b0\u7684hosts \u7ed9\u6bcf\u4e00\u4e2ahosts\u8bbe\u7f6ehealth flag \u66f4\u65b0hosts_per_locality\u7ed3\u6784 \u904d\u5386hosts_per_locality \u5224\u65ad\u662f\u5426\u5305\u542b\u672c\u5730locality\uff0c\u6709\u7684\u8bdd\u5c31\u5c06\u672c\u5730locality\u7684hosts\u6dfb\u52a0\u5230\u5230per_locality vector\u4e2d \u5982\u679c\u5f00\u542f\u4e86locality weight lb\u7684\u8bdd\u5c31\u5c06\u672c\u5730locality weight map\u653e\u5230locality_weights\u4e2d\uff0c\u8bb0\u5f55\u6240\u6709\u7684locality\u7684weight\uff0c\u662f\u4e00\u4e2avector \u521b\u5efaHostsPerLocalityImpl\u5bf9\u8c61 \u8c03\u7528update_cb_\u7684updateHosts\u8fdb\u884c\u66f4\u65b0\uff0c\u5426\u5219\u5c31\u76f4\u63a5\u66f4\u65b0cluster\u5bf9\u8c61\u7684prioritySet().updateHosts\u65b9\u6cd5\u8fdb\u884c\u66f4\u65b0 EdsClusterImpl::updateHostsPerLocality \u66f4\u65b0\u6307\u5b9a\u4f18\u5148\u7ea7\u7684hosts\uff0c\u540c\u65f6\u4e5f\u4f1a\u66f4\u65b0locality weight map\u3001health flag\u3001 \u53c2\u6570\u89e3\u6790: const uint32_t priority // \u8981\u66f4\u65b0\u7684hosts\u7684\u4f18\u5148\u7ea7\uff0c const uint32_t overprovisioning_factor // \u8981\u66f4\u65b0\u7684hosts\u7684\u8fc7\u8f7d\u56e0\u5b50 const HostVector& new_hosts , // \u8981\u66f4\u65b0\u7684hosts LocalityWeightsMap& locality_weights_map // \u5df2\u7ecf\u5b58\u5728\u7684\u673a\u5668\u7684locality weight map LocalityWeightsMap& new_locality_weights_map , // \u8981\u66f4\u65b0\u7684hosts\u7684Locality weight map PriorityStateManager& priority_state_manager , // \u7528\u6765\u6784\u5efa\u66f4\u65b0hosts\u72b6\u6001\u7684 std::unordered_map<std::string, HostSharedPtr>& updated_hosts // \u7528\u6765\u5b58\u653e \u57fa\u672c\u8fc7\u7a0b\u5206\u6790: \u4ece\u5f53\u524d priority_set_ \u4e2d\u83b7\u53d6\u6307\u5b9a priority \u7684hosts\uff0c\u6ca1\u6709\u5c31\u65b0\u521b\u5efa \u62f7\u8d1d\u4e00\u4efd\u5f53\u524d priority \u7684hosts\uff0c\u4f20\u9012\u5230 updateDynamicHostList \u4e2d\u8fdb\u884c\u66f4\u65b0 \u5982\u679c\u7684\u786e\u6709\u66f4\u65b0\u3001\u6216\u8005overprovisioningFactor\u53d1\u751f\u4e86\u6539\u53d8\u3001\u6216\u8005locality weight map\u53d1\u751f\u4e86\u6539\u53d8\uff0c \u5c31\u8c03\u7528 priority_state_manager.updateClusterPrioritySet \u5bf9\u901a\u8fc7 updateDynamicHostList \u540e\u7684hosts\u8fdb\u884c\u66f4\u65b0 \u7136\u540e\u66f4\u65b0locality weights map BaseDynamicClusterImpl::updateDynamicHostList \u5bf9\u4e00\u4e2a\u65b0\u589e\u7684\u7684hosts\uff0c\u548c\u5df2\u7ecf\u5b58\u5728\u7684hosts\u8fdb\u884c\u5bf9\u6bd4\uff0c\u5df2\u7ecf\u5b58\u5728\u7684\u6839\u636e\u9700\u8981\u8fdb\u884c\u539f\u5730\u66f4\u65b0\uff0c\u4e0d\u5b58\u5728\u7684\u5c31\u8ba4\u4e3a\u662f\u65b0\u589e\u7684\uff0c \u6700\u540e\u5f97\u5230\u65b0\u589e\u7684hosts\u5217\u8868(hosts_added_to_current_priority)\uff0c\u5220\u9664\u7684hosts\u5217\u8868(hosts_removed_from_current_priority)\uff0c\u4ee5\u53ca\u6700\u540e\u66f4\u65b0\u5b8c\u7684hosts\u5217\u8868(current_priority_hosts)\u3002 \u53c2\u6570\u89e3\u6790: const HostVector& new_hosts // \u8981\u66f4\u65b0\u7684hosts\uff0c\u662fper priority HostVector& current_priority_hosts // \u5f53\u524d\u4f18\u5148\u7ea7\u4e0b\u5b58\u5728\u7684hosts HostVector& hosts_added_to_current_priority // \u66f4\u65b0\u540e\uff0c\u6dfb\u52a0\u5230\u5f53\u524d\u4f18\u5148\u7ea7\u7684\u673a\u5668 HostVector& hosts_removed_from_current_priority // \u66f4\u65b0\u540e\uff0c\u4ece\u5f53\u524d\u4f18\u5148\u7ea7\u79fb\u9664\u7684\u673a\u5668 HostMap& updated_hosts // \u7528\u6765\u8fc7\u6ee4\u91cd\u590d\u7684hosts\uff0c\u4fdd\u5b58\u5df2\u7ecf\u66f4\u65b0\u8fc7\u7684hosts\uff0c\u6700\u7ec8\u66ff\u6362all_hosts_ const HostMap& all_hosts // \u5f53\u524d\u96c6\u7fa4\u5b58\u5728\u7684\u6240\u6709\u4e3b\u673a PrioritySetImpl::batchHostUpdate 1 2 3 4 5 6 7 8 9 10 11 12 void PrioritySetImpl::batchHostUpdate ( BatchUpdateCb & callback ) { BatchUpdateScope scope ( * this ); // We wrap the update call with a lambda that tracks all the hosts that have been added/removed. callback . batchUpdate ( scope ); // Now that all the updates have been complete, we can compute the diff. HostVector net_hosts_added = filterHosts ( scope . all_hosts_added_ , scope . all_hosts_removed_ ); HostVector net_hosts_removed = filterHosts ( scope . all_hosts_removed_ , scope . all_hosts_added_ ); runUpdateCallbacks ( net_hosts_added , net_hosts_removed ); } \u8c03\u7528 BatchUpdateCb \u5b8c\u6210hosts\u7684\u66f4\u65b0\uff0c\u5f97\u5230\u6240\u6709\u589e\u52a0\u7684host\u548c\u79fb\u9664\u7684host\u7136\u540e\u56de\u8c03update callback\u5373\u53ef \u57fa\u672c\u8fc7\u7a0b\u5206\u6790: xDS\u63a5\u6536\u5230EDS\u914d\u7f6e\uff0c\u56de\u8c03 EdsClusterImpl::onConfigUpdate \u6784\u5efa BatchUpdateHelper \uff0c\u4f20\u9012\u7ed9 PrioritySet::batchHostUpdate \u8fdb\u884c\u6279\u91cf\u66f4\u65b0\uff0c\u66f4\u65b0\u5f53\u524dEDS\u7684PrioritySet 1 2 3 4 5 6 7 8 void EdsClusterImpl::onConfigUpdate ( const Protobuf :: RepeatedPtrField < ProtobufWkt :: Any >& resources , const std :: string & ) { .... // BatchUpdateHelper\u5b9e\u73b0\u4e86PrioritySet::BatchUpdateCb BatchUpdateHelper helper ( * this , cluster_load_assignment ); // batchHostUpdate\u5185\u90e8\u4f1a\u8c03\u7528helper->batchUpdate priority_set_ . batchHostUpdate ( helper ); } PrioritySet::batchHostUpdate \u5185\u90e8\u8c03\u7528 batchUpdate \u8fdb\u884c\u66f4\u65b0 \u8c03\u7528 EdsClusterImpl::BatchUpdateHelper::batchUpdate \u6784\u5efa PriorityStateManager \u901a\u8fc7PriorityStateManager\u6784\u5efaPriorityState\uff0c\u4e5f\u5c31\u662fhosts\u96c6\u5408\u548cLocalityWieghtMap \u904d\u5386\u65b0\u914d\u7f6e\u4e2d\u7684\u6240\u6709\u4f18\u5148\u7ea7\u8c03\u7528 EdsClusterImpl::updateHostsPerLocality \u66f4\u65b0\u5bf9\u5e94\u4f18\u5148\u7ea7\u7684HostSetImpl \u904d\u5386\u6240\u6709\u5f53\u524d\u914d\u7f6e\u4e2d\u5b58\u5728\u7684\u4f18\u5148\u7ea7\u8c03\u7528 EdsClusterImpl::updateHostsPerLocality \u66f4\u65b0\u5bf9\u5e94\u4f18\u5148\u7ea7\u7684HostSetImpl(\u5176\u5b9e\u5c31\u662f\u5220\u9664\uff0c\u56e0\u4e3a\u65b0\u914d\u7f6e\u4e2d\u6ca1\u6709\u8fd9\u4e2a\u4f18\u5148\u7ea7\u7684\u4efb\u4f55host) \u66f4\u65b0EdsClusterImpl\u4e2d\u5b58\u5728\u7684all_host_\u5217\u8868 \u5b8c\u6210\u914d\u7f6e\u6279\u91cf\u66f4\u65b0\uff0c\u521d\u59cb\u5316\u5b8c\u6210 HostSetImpl::partitionHosts \u901a\u8fc7\u4e0a\u9762\u7684\u8fc7\u7a0b\u53ef\u4ee5\u770b\u51fa\uff0c\u6838\u5fc3\u7684\u65b9\u6cd5\u5c31\u662f EdsClusterImpl::updateHostsPerLocality \uff0c\u9488\u5bf9\u5355\u4e2a\u4f18\u5148\u7ea7\u7684\u66f4\u65b0\u3002 \u904d\u5386\u6240\u6709\u8981\u589e\u52a0\u7684\u65b0hosts\uff0c\u4e5f\u5c31\u662fnew_hosts \u5224\u65adupdated_hosts\u4e2d\u662f\u5426\u5df2\u7ecf\u5b58\u5728\uff0c\u907f\u514d\u91cd\u590d\uff0c\u8fbe\u5230\u53bb\u91cd\u7684\u6548\u679c \u4eceall_hosts\u4e2d\u67e5\u627e\u662f\u5426\u662f\u5df2\u7ecf\u5b58\u5728\u7684host \u5982\u679c\u662f\uff0c\u5219\u6e05\u695a\u5f53\u524d\u673a\u5668\u7684 PENDING_DYNAMIC_REMOVAL \u6807\u5fd7 (Why?) \u5982\u679c\u5b58\u5728\u5065\u5eb7\u68c0\u67e5\u673a\u5236\u3001\u5e76\u4e14\u65b0\u6dfb\u52a0\u7684hosts\u548c\u5b58\u5728\u7684host\u4e24\u8005\u7684\u5065\u5eb7\u68c0\u67e5\u7684\u5730\u5740\u4e0d\u540c\uff0c\u5c31\u8ba4\u4e3a\u8df3\u8fc7host\u539f\u5730\u66f4\u65b0\u7684\u8fc7\u7a0b(Why?) \u5982\u679c\u8df3\u8fc7hosts\u539f\u5730\u66f4\u65b0\uff0c\u5219\u8bbe\u7f6emax_host_weight \u5982\u679c\u5b58\u5728\u5065\u5eb7\u68c0\u67e5\u673a\u5236\u5c31\u8bbe\u7f6eHealthFlag\u4e3a Host::HealthFlag::FAILED_ACTIVE_HC \u5982\u679c\u5f53\u524d\u96c6\u7fa4\u8fd8\u5728warm\u9636\u6bb5\uff0c\u5c31\u8bbe\u7f6eHealthFlag\u4e3a Host::HealthFlag::PENDING_ACTIVE_HC \uff0c\u8fd9\u662f\u56e0\u4e3a\u5982\u679c\u8bbe\u7f6e\u4e3a FAILED_ACTIVE_HC \u5c31\u4f1a\u8ba4\u4e3ahosts\u521d\u59cb\u5316\u5b8c\u6210\u4e86\uff0cwram\u9636\u6bb5\u5c31\u7ed3\u675f\u4e86 \u6b63\u5e38\u7684warm\u662f\u5305\u542b\u4e86\u5065\u5eb7\u68c0\u67e5\u7684\u8fc7\u7a0b\u7684\u3002 \u5c06hosts\u6dfb\u52a0\u5230updated_hosts\u4e2d \u5c06hosts\u6dfb\u52a0\u5230final_hosts\u4e2d \u5c06hosts\u6dfb\u52a0\u5230hosts_added_to_current_priority\uff0c\u8fd9\u662f\u786e\u5b9a\u8981\u6dfb\u52a0\u7684 \u5982\u679c\u4e0d\u8df3\u8fc7\u539f\u5730\u66f4\u65b0\uff0c\u5219\u6dfb\u52a0\u5230existing_hosts_for_current_priority\u4e2d \u66f4\u65b0max_host_weight \u66f4\u65b0\u73b0\u5b58\u7684hosts\u7684health flag\uff0c\u5224\u65ad\u662f\u5426\u4f1a\u56e0\u4e3a\u66f4\u65b0health flag\u5bfc\u81f4hosts changed(\u4e3b\u8981\u7684\u8861\u91cf\u6807\u51c6\u5c31\u662f\u66f4\u65b0\u524d\u540e\u7684\u5065\u5eb7\u72b6\u51b5\u662f\u5426\u53d1\u751f\u6539\u53d8\u4e86) \u5224\u65admetadata\u662f\u5426\u6539\u53d8\uff0c\u5e76\u66f4\u65b0metadata \u5224\u65ad\u4f18\u5148\u7ea7\u662f\u5426\u6539\u53d8\uff0c\u5e76\u66f4\u65b0\u4f18\u5148\u7ea7\uff0c\u5982\u679c\u4f18\u5148\u7ea7\u6539\u53d8\u4e86\uff0c\u5c31\u5c06hosts\u6dfb\u52a0\u5230hosts_added_to_current_priority\u4e2d (why? \u4e3a\u4ec0\u4e48\u4f1a\u53d1\u751f\u5462?) \u66f4\u65b0\u6743\u91cd \u5c06hosts\u6dfb\u52a0\u5230final_hosts\u4e2d \u5c06hosts\u6dfb\u52a0\u5230updated_hosts\u4e2d \u904d\u5386\u5f53\u524d\u4f18\u5148\u7ea7\u4e0b\u5b58\u5728\u7684hosts \u5982\u679c\u53d1\u73b0\u5728existing_hosts_for_current_priority\u4e2d\u5c31\u4eceexisting_hosts_for_current_priority\u548ccurrent_priority_hosts\u4e2d\u5220\u9664 \u5982\u679cexisting_hosts_for_current_priority\u4e0d\u4e3a\u7a7a\u5c31\u8868\u660ehosts changed\u4e86 (why?) \u5982\u679cdrainConnectionsOnHostRemoval\u6807\u5fd7\u6ca1\u6709\u5f00\u542f\uff0c\u5c31\u904d\u5386\u5269\u4e0b\u7684current_priority_hosts\uff0c\u627e\u5230\u90a3\u4e9b\u5065\u5eb7\u7684\u4e3b\u673a\uff0c\u66f4\u65b0max_host_weight\uff0c \u5e76\u6dfb\u52a0\u5230final_hosts\u548cupdated_hosts\u4e2d\uff0c\u5e76\u8bbe\u7f6ePENDING_DYNAMIC_REMOVAL\u6807\u5fd7 \u8bbe\u7f6e\u5f53\u524d\u96c6\u7fa4\u6700\u5927\u7684host weight current_priority_hosts\u5269\u4e0b\u7684\u673a\u5668\u88ab\u5f53\u4f5cremove\u7684hosts\uff0c\u6dfb\u52a0\u5230hosts_removed_from_current_priority\u4e2d \u5c06finall_host\u66f4\u65b0\u4e3acurrent_priority_hosts \u8fd4\u56de\u5f53\u524dhosts\u662f\u5426\u53d1\u751f\u4e86\u6539\u53d8","title":"\u91cd\u8981\u51fd\u6570\u5206\u6790"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/envoy/load_balancer/","text":"Load Balancer\u5206\u6790","title":"Load Balancer\u5206\u6790"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/envoy/load_balancer/#load-balancer","text":"","title":"Load Balancer\u5206\u6790"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/envoy/lua/","text":"Lua filter\u5b9e\u73b0\u5206\u6790 \u6838\u5fc3\u6570\u636e\u7ed3\u6784 ThreadLocalState \u901a\u8fc7\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u7ed9\u6bcf\u4e2aworker\u7ebf\u7a0b\u521b\u5efa\u5bf9\u5e94\u7684 lua_State \u7ed3\u6784 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 ThreadLocalState :: ThreadLocalState ( const std :: string & code , ThreadLocal :: SlotAllocator & tls ) : tls_slot_ ( ThreadLocal :: TypedSlot < LuaThreadLocal >:: makeUnique ( tls )) { // First verify that the supplied code can be parsed. CSmartPtr < lua_State , lua_close > state ( lua_open ()); RELEASE_ASSERT ( state . get () != nullptr , \"unable to create new Lua state object\" ); luaL_openlibs ( state . get ()); if ( 0 != luaL_dostring ( state . get (), code . c_str ())) { throw LuaException ( fmt :: format ( \"script load error: {}\" , lua_tostring ( state . get (), -1 ))); } // Now initialize on all threads. tls_slot_ -> set ([ code ]( Event :: Dispatcher & ) { return std :: make_shared < LuaThreadLocal > ( code ); }); } \u7c7b\u578b\u6ce8\u518c\uff0c\u7ed9\u6bcf\u4e2aworker\u7ebf\u7a0b\u7684 lua_State \u90fd\u6ce8\u518c\u4e00\u4e9b userData \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 template < class T > void registerType () { tls_slot_ -> runOnAllThreads ( // \u8c03\u7528\u5177\u4f53\u7c7b\u578b\u7684registerType\u9759\u6001\u65b9\u6cd5 []( OptRef < LuaThreadLocal > tls ) { T :: registerType ( tls -> state_ . get ()); }); } /** * Register a type with Lua. * @param state supplies the state to register with. */ static void registerType ( lua_State * state ) { std :: vector < luaL_Reg > to_register ; // Fetch all of the functions to be exported to Lua so that we can register them in the // metatable. ExportedFunctions functions = T :: exportedFunctions (); for ( auto function : functions ) { to_register . push_back ({ function . first , function . second }); } // Always register a __gc method so that we can run the object's destructor. We do this // manually because the memory is raw and was allocated by Lua. to_register . push_back ( { \"__gc\" , []( lua_State * state ) { T * object = alignAndCast < T > ( luaL_checkudata ( state , 1 , typeid ( T ). name ())); ENVOY_LOG ( trace , \"destroying {} at {}\" , typeid ( T ). name (), static_cast < void *> ( object )); object ->~ T (); return 0 ; }}); // Add the sentinel. to_register . push_back ({ nullptr , nullptr }); // Register the type by creating a new metatable, setting __index to itself, and then // performing the register. ENVOY_LOG ( debug , \"registering new type: {}\" , typeid ( T ). name ()); int rc = luaL_newmetatable ( state , typeid ( T ). name ()); ASSERT ( rc == 1 ); lua_pushvalue ( state , -1 ); lua_setfield ( state , -2 , \"__index\" ); luaL_register ( state , nullptr , to_register . data ()); } LuaThreadLocal \u6bcf\u4e2a\u7ebf\u7a0b\u7684thread local\u90fd\u4f1a\u4fdd\u5b58\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u4e2d\u4fdd\u5b58\u4e86 lus_State 1 2 3 4 5 6 ThreadLocalState :: LuaThreadLocal :: LuaThreadLocal ( const std :: string & code ) : state_ ( lua_open ()) { RELEASE_ASSERT ( state_ . get () != nullptr , \"unable to create new Lua state object\" ); luaL_openlibs ( state_ . get ()); int rc = luaL_dostring ( state_ . get (), code . c_str ()); ASSERT ( rc == 0 ); }","title":"Lua filter\u5b9e\u73b0\u5206\u6790"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/envoy/lua/#lua-filter","text":"","title":"Lua filter\u5b9e\u73b0\u5206\u6790"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/envoy/lua/#_1","text":"ThreadLocalState \u901a\u8fc7\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u7ed9\u6bcf\u4e2aworker\u7ebf\u7a0b\u521b\u5efa\u5bf9\u5e94\u7684 lua_State \u7ed3\u6784 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 ThreadLocalState :: ThreadLocalState ( const std :: string & code , ThreadLocal :: SlotAllocator & tls ) : tls_slot_ ( ThreadLocal :: TypedSlot < LuaThreadLocal >:: makeUnique ( tls )) { // First verify that the supplied code can be parsed. CSmartPtr < lua_State , lua_close > state ( lua_open ()); RELEASE_ASSERT ( state . get () != nullptr , \"unable to create new Lua state object\" ); luaL_openlibs ( state . get ()); if ( 0 != luaL_dostring ( state . get (), code . c_str ())) { throw LuaException ( fmt :: format ( \"script load error: {}\" , lua_tostring ( state . get (), -1 ))); } // Now initialize on all threads. tls_slot_ -> set ([ code ]( Event :: Dispatcher & ) { return std :: make_shared < LuaThreadLocal > ( code ); }); } \u7c7b\u578b\u6ce8\u518c\uff0c\u7ed9\u6bcf\u4e2aworker\u7ebf\u7a0b\u7684 lua_State \u90fd\u6ce8\u518c\u4e00\u4e9b userData \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 template < class T > void registerType () { tls_slot_ -> runOnAllThreads ( // \u8c03\u7528\u5177\u4f53\u7c7b\u578b\u7684registerType\u9759\u6001\u65b9\u6cd5 []( OptRef < LuaThreadLocal > tls ) { T :: registerType ( tls -> state_ . get ()); }); } /** * Register a type with Lua. * @param state supplies the state to register with. */ static void registerType ( lua_State * state ) { std :: vector < luaL_Reg > to_register ; // Fetch all of the functions to be exported to Lua so that we can register them in the // metatable. ExportedFunctions functions = T :: exportedFunctions (); for ( auto function : functions ) { to_register . push_back ({ function . first , function . second }); } // Always register a __gc method so that we can run the object's destructor. We do this // manually because the memory is raw and was allocated by Lua. to_register . push_back ( { \"__gc\" , []( lua_State * state ) { T * object = alignAndCast < T > ( luaL_checkudata ( state , 1 , typeid ( T ). name ())); ENVOY_LOG ( trace , \"destroying {} at {}\" , typeid ( T ). name (), static_cast < void *> ( object )); object ->~ T (); return 0 ; }}); // Add the sentinel. to_register . push_back ({ nullptr , nullptr }); // Register the type by creating a new metatable, setting __index to itself, and then // performing the register. ENVOY_LOG ( debug , \"registering new type: {}\" , typeid ( T ). name ()); int rc = luaL_newmetatable ( state , typeid ( T ). name ()); ASSERT ( rc == 1 ); lua_pushvalue ( state , -1 ); lua_setfield ( state , -2 , \"__index\" ); luaL_register ( state , nullptr , to_register . data ()); } LuaThreadLocal \u6bcf\u4e2a\u7ebf\u7a0b\u7684thread local\u90fd\u4f1a\u4fdd\u5b58\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u4e2d\u4fdd\u5b58\u4e86 lus_State 1 2 3 4 5 6 ThreadLocalState :: LuaThreadLocal :: LuaThreadLocal ( const std :: string & code ) : state_ ( lua_open ()) { RELEASE_ASSERT ( state_ . get () != nullptr , \"unable to create new Lua state object\" ); luaL_openlibs ( state_ . get ()); int rc = luaL_dostring ( state_ . get (), code . c_str ()); ASSERT ( rc == 0 ); }","title":"\u6838\u5fc3\u6570\u636e\u7ed3\u6784"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/envoy/overload_manager/","text":"Overload manager\u5206\u6790 \u6838\u5fc3\u6982\u5ff5: ResourceMonitors \u5185\u7f6e\u4e86\u4e00\u7cfb\u5217\u8981\u76d1\u63a7\u7684\u8d44\u6e90\uff0c\u76ee\u524d\u6709\u7684\u662fFixedHeap OverloadAction \u89e6\u53d1\u8d44\u6e90\u7684\u9650\u5236\u7684\u540e\uff0c\u53ef\u4ee5\u8fdb\u884c\u7684\u4e00\u7cfb\u5217action\uff0c\u63d0\u4f9b\u4e86isActive\u6765\u8868\u660e\u5f53\u524dAction\u662f\u5426\u6709\u6548(\u6709Trigger\u5c31\u662f\u6709\u6548\u7684) envoy.overload_actions.stop_accepting_requests envoy.overload_actions.disable_http_keepalive envoy.overload_actions.stop_accepting_connections envoy.overload_actions.shrink_heap Trigger \u6bcf\u4e00\u4e2aOverloadAction\u4f1a\u5305\u542b\u4e00\u4e2a\u89e6\u53d1\u5668\uff0c\u91cc\u9762\u8bbe\u7f6e\u4e86\u9600\u503c\uff0c\u63d0\u4f9b\u4e86isFired\u6765\u8868\u660e\u5f53\u524d\u89e6\u53d1\u5668\u662f\u5426\u89e6\u53d1\u4e86 Resource \u6bcf\u4e00\u4e2a\u8d44\u6e90Monitor\u548c\u4e00\u4e2aResource\u5173\u8054\u8d77\u6765 \u76f8\u5173\u7684stats failed_updates \u8d44\u6e90\u66f4\u65b0\u5931\u8d25\u7684\u6b21\u6570 skipped_updates \u5df2\u7ecf\u6709\u8d44\u6e90\u5728\u66f4\u65b0\u4e86\uff0c\u65b0\u7684\u8d44\u6e90\u66f4\u65b0\u5c31\u8df3\u8fc7 Setp1: \u5b9e\u73b0\u6838\u5fc3\u63a5\u53e3 1 2 3 4 5 6 7 8 9 10 11 class ResourceMonitor { public : virtual ~ ResourceMonitor () {} class Callbacks { public : virtual ~ Callbacks () {} virtual void onSuccess ( const ResourceUsage & usage ) = 0 ; // \u8d44\u6e90\u83b7\u53d6\u5931\u8d25\u7684\u65f6\u5019\uff0c\u6ca1\u529e\u6cd5\u66f4\u65b0\u8d44\u6e90\u5c31\u56de\u8c03onFailure virtual void onFailure ( const EnvoyException & error ) = 0 ; }; virtual void updateResourceUsage ( Callbacks & callbacks ) = 0 ; \u6bcf\u4e00\u7c7b\u8d44\u6e90\u9700\u8981\u53bb\u5b9e\u73b0\u8fd9\u4e2a\u63a5\u53e3\uff0c\u4f8b\u5982:FixedHeap 1 2 3 4 5 6 7 8 9 10 11 12 class FixedHeapMonitor : public Server :: ResourceMonitor { public : FixedHeapMonitor ( const envoy :: config :: resource_monitor :: fixed_heap :: v2alpha :: FixedHeapConfig & config , std :: unique_ptr < MemoryStatsReader > stats = std :: make_unique < MemoryStatsReader > ()); void updateResourceUsage ( Server :: ResourceMonitor :: Callbacks & callbacks ) override ; private : const uint64_t max_heap_ ; std :: unique_ptr < MemoryStatsReader > stats_ ; }; Setp2: \u5b9a\u671f\u56de\u8c03updateResourceUsage OverloadManagerImpl\u521d\u59cb\u5316\u7684\u65f6\u5019\uff0c\u4f1a\u5bf9\u5404\u79cd\u8d44\u6e90\u7684Monitor\u8fdb\u884c\u6784\u9020\u3001\u4ee5\u53caOverloadAction\u7b49 \u7136\u540e\u5f00\u59cb\u542f\u52a8timer\uff0c\u5b9a\u671f\u56de\u8c03updateResourceUsage\u63a5\u53e3\uff0c\u7136\u540e\u66f4\u65b0thread_local\u72b6\u6001\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 void OverloadManagerImpl::start () { ASSERT ( ! started_ ); started_ = true ; tls_ -> set ([]( Event :: Dispatcher & ) -> ThreadLocal :: ThreadLocalObjectSharedPtr { return std :: make_shared < ThreadLocalOverloadState > (); }); if ( resources_ . empty ()) { return ; } timer_ = dispatcher_ . createTimer ([ this ]() -> void { for ( auto & resource : resources_ ) { resource . second . update (); } timer_ -> enableTimer ( refresh_interval_ ); }); timer_ -> enableTimer ( refresh_interval_ ); }","title":"Overload manager\u5206\u6790"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/envoy/overload_manager/#overload-manager","text":"\u6838\u5fc3\u6982\u5ff5: ResourceMonitors \u5185\u7f6e\u4e86\u4e00\u7cfb\u5217\u8981\u76d1\u63a7\u7684\u8d44\u6e90\uff0c\u76ee\u524d\u6709\u7684\u662fFixedHeap OverloadAction \u89e6\u53d1\u8d44\u6e90\u7684\u9650\u5236\u7684\u540e\uff0c\u53ef\u4ee5\u8fdb\u884c\u7684\u4e00\u7cfb\u5217action\uff0c\u63d0\u4f9b\u4e86isActive\u6765\u8868\u660e\u5f53\u524dAction\u662f\u5426\u6709\u6548(\u6709Trigger\u5c31\u662f\u6709\u6548\u7684) envoy.overload_actions.stop_accepting_requests envoy.overload_actions.disable_http_keepalive envoy.overload_actions.stop_accepting_connections envoy.overload_actions.shrink_heap Trigger \u6bcf\u4e00\u4e2aOverloadAction\u4f1a\u5305\u542b\u4e00\u4e2a\u89e6\u53d1\u5668\uff0c\u91cc\u9762\u8bbe\u7f6e\u4e86\u9600\u503c\uff0c\u63d0\u4f9b\u4e86isFired\u6765\u8868\u660e\u5f53\u524d\u89e6\u53d1\u5668\u662f\u5426\u89e6\u53d1\u4e86 Resource \u6bcf\u4e00\u4e2a\u8d44\u6e90Monitor\u548c\u4e00\u4e2aResource\u5173\u8054\u8d77\u6765 \u76f8\u5173\u7684stats failed_updates \u8d44\u6e90\u66f4\u65b0\u5931\u8d25\u7684\u6b21\u6570 skipped_updates \u5df2\u7ecf\u6709\u8d44\u6e90\u5728\u66f4\u65b0\u4e86\uff0c\u65b0\u7684\u8d44\u6e90\u66f4\u65b0\u5c31\u8df3\u8fc7 Setp1: \u5b9e\u73b0\u6838\u5fc3\u63a5\u53e3 1 2 3 4 5 6 7 8 9 10 11 class ResourceMonitor { public : virtual ~ ResourceMonitor () {} class Callbacks { public : virtual ~ Callbacks () {} virtual void onSuccess ( const ResourceUsage & usage ) = 0 ; // \u8d44\u6e90\u83b7\u53d6\u5931\u8d25\u7684\u65f6\u5019\uff0c\u6ca1\u529e\u6cd5\u66f4\u65b0\u8d44\u6e90\u5c31\u56de\u8c03onFailure virtual void onFailure ( const EnvoyException & error ) = 0 ; }; virtual void updateResourceUsage ( Callbacks & callbacks ) = 0 ; \u6bcf\u4e00\u7c7b\u8d44\u6e90\u9700\u8981\u53bb\u5b9e\u73b0\u8fd9\u4e2a\u63a5\u53e3\uff0c\u4f8b\u5982:FixedHeap 1 2 3 4 5 6 7 8 9 10 11 12 class FixedHeapMonitor : public Server :: ResourceMonitor { public : FixedHeapMonitor ( const envoy :: config :: resource_monitor :: fixed_heap :: v2alpha :: FixedHeapConfig & config , std :: unique_ptr < MemoryStatsReader > stats = std :: make_unique < MemoryStatsReader > ()); void updateResourceUsage ( Server :: ResourceMonitor :: Callbacks & callbacks ) override ; private : const uint64_t max_heap_ ; std :: unique_ptr < MemoryStatsReader > stats_ ; }; Setp2: \u5b9a\u671f\u56de\u8c03updateResourceUsage OverloadManagerImpl\u521d\u59cb\u5316\u7684\u65f6\u5019\uff0c\u4f1a\u5bf9\u5404\u79cd\u8d44\u6e90\u7684Monitor\u8fdb\u884c\u6784\u9020\u3001\u4ee5\u53caOverloadAction\u7b49 \u7136\u540e\u5f00\u59cb\u542f\u52a8timer\uff0c\u5b9a\u671f\u56de\u8c03updateResourceUsage\u63a5\u53e3\uff0c\u7136\u540e\u66f4\u65b0thread_local\u72b6\u6001\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 void OverloadManagerImpl::start () { ASSERT ( ! started_ ); started_ = true ; tls_ -> set ([]( Event :: Dispatcher & ) -> ThreadLocal :: ThreadLocalObjectSharedPtr { return std :: make_shared < ThreadLocalOverloadState > (); }); if ( resources_ . empty ()) { return ; } timer_ = dispatcher_ . createTimer ([ this ]() -> void { for ( auto & resource : resources_ ) { resource . second . update (); } timer_ -> enableTimer ( refresh_interval_ ); }); timer_ -> enableTimer ( refresh_interval_ ); }","title":"Overload manager\u5206\u6790"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/envoy/proxy/","text":"Envoy\u6e90\u7801\u5206\u6790 \u7ebf\u7a0b\u6a21\u578b \u5355\u8fdb\u7a0b\u591a\u7ebf\u7a0b\u67b6\u6784\uff0c\u4e00\u4e2a\u4e3b\u7ebf\u7a0b\u63a7\u5236\u5404\u79cd\u96f6\u661f\u7684\u534f\u8c03\u4efb\u52a1\uff0c\u591a\u4e2aworker\u7ebf\u7a0b\u6267\u884clistening\u3001filtering\u3001\u548c\u6570\u636e\u8f6c\u53d1\u7b49\uff0c\u53ea\u8981\u4e00\u4e2a\u8fde\u63a5\u88ablistener\u63a5\u53d7\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8fde\u63a5\u4e0a \u6240\u6709\u7684\u5de5\u4f5c\u90fd\u662f\u5728\u4e00\u4e2a\u7ebf\u7a0b\u4e2d\u5b8c\u6210\u7684\u3002 \u70ed\u91cd\u542f \u8bf7\u6c42\u5173\u95edAdmin\u529f\u80fd\uff0c\u5e76\u5f00\u59cb\u63a5\u7ba1\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u662f\u975e\u539f\u5b50\u7684\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 restarter_ . shutdownParentAdmin ( info ); original_start_time_ = info . original_start_time_ ; admin_ = std :: make_unique < AdminImpl > ( initial_config . admin (). profilePath (), * this ); if ( initial_config . admin (). address ()) { if ( initial_config . admin (). accessLogPath (). empty ()) { throw EnvoyException ( \"An admin access log path is required for a listening server.\" ); } ENVOY_LOG ( info , \"admin address: {}\" , initial_config . admin (). address () -> asString ()); admin_ -> startHttpListener ( initial_config . admin (). accessLogPath (), options . adminAddressPath (), initial_config . admin (). address (), stats_store_ . createScope ( \"listener.admin.\" )); } else { ENVOY_LOG ( warn , \"No admin address given, so no admin HTTP server started.\" ); } \u521b\u5efaListenerManager\u3001ClusterManagerFactory\uff0c\u4e00\u4e9b\u7ba1\u7406\u6570\u636e\u7ed3\u6784 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 overload_manager_ = std :: make_unique < OverloadManagerImpl > ( dispatcher (), stats (), threadLocal (), bootstrap_ . overload_manager ()); // Workers get created first so they register for thread local updates. listener_manager_ = std :: make_unique < ListenerManagerImpl > ( * this , listener_component_factory_ , worker_factory_ , time_system_ ); // The main thread is also registered for thread local updates so that code that does not care // whether it runs on the main thread or on workers can still use TLS. thread_local_ . registerThread ( * dispatcher_ , true ); // We can now initialize stats for threading. stats_store_ . initializeThreading ( * dispatcher_ , thread_local_ ); // Runtime gets initialized before the main configuration since during main configuration // load things may grab a reference to the loader for later use. runtime_loader_ = component_factory . createRuntime ( * this , initial_config ); // Once we have runtime we can initialize the SSL context manager. ssl_context_manager_ = std :: make_unique < Ssl :: ContextManagerImpl > ( time_system_ ); cluster_manager_factory_ = std :: make_unique < Upstream :: ProdClusterManagerFactory > ( runtime (), stats (), threadLocal (), random (), dnsResolver (), sslContextManager (), dispatcher (), localInfo (), secretManager ()); Bootstrap\u521d\u59cb\u5316 1 2 3 4 5 // Now the configuration gets parsed. The configuration may start setting thread local data // per above. See MainImpl::initialize() for why we do this pointer dance. Configuration :: MainImpl * main_config = new Configuration :: MainImpl (); config_ . reset ( main_config ); main_config -> initialize ( bootstrap_ , * this , * cluster_manager_factory_ ); \u521d\u59cb\u5316\u9759\u6001secret \u521d\u59cb\u5316\u9759\u6001cluster \u521d\u59cb\u5316\u9759\u6001listener \u521d\u59cb\u5316ralimit service \u521d\u59cb\u5316tracing \u521d\u59cb\u5316sats sinks \u521b\u5efaLDS API\uff0c\u6ce8\u518cinit target 1 2 3 4 5 // Instruct the listener manager to create the LDS provider if needed. This must be done later // because various items do not yet exist when the listener manager is created. if ( bootstrap_ . dynamic_resources (). has_lds_config ()) { listener_manager_ -> createLdsApi ( bootstrap_ . dynamic_resources (). lds_config ()); } \u96c6\u7fa4\u521d\u59cb\u5316 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 // We need the RunHelper to be available to call from InstanceImpl::shutdown() below, so // we save it as a member variable. run_helper_ = std :: make_unique < RunHelper > ( * this , * dispatcher_ , clusterManager (), access_log_manager_ , init_manager_ , overloadManager (), [ this ]() -> void { startWorkers (); }); // starts. cm . setInitializedCb ([ & instance , & init_manager , & cm , workers_start_cb ]() { if ( instance . isShutdown ()) { return ; } // Pause RDS to ensure that we don't send any requests until we've // subscribed to all the RDS resources. The subscriptions happen in the init callbacks, // so we pause RDS until we've completed all the callbacks. cm . adsMux (). pause ( Config :: TypeUrl :: get (). RouteConfiguration ); ENVOY_LOG ( info , \"all clusters initialized. initializing init manager\" ); // Note: the lamda below should not capture \"this\" since the RunHelper object may // have been destructed by the time it gets executed. init_manager . initialize ([ & instance , workers_start_cb ]() { if ( instance . isShutdown ()) { return ; } workers_start_cb (); }); \u7b49\u96c6\u7fa4\u521d\u59cb\u5316\u5b8c\u6210\uff0c\u6267\u884cinit manager 1 2 3 4 5 6 7 8 9 // Note: the lamda below should not capture \"this\" since the RunHelper object may // have been destructed by the time it gets executed. init_manager . initialize ([ & instance , workers_start_cb ]() { if ( instance . isShutdown ()) { return ; } workers_start_cb (); }); \u4f1a\u7b49\u5230LDS\u3001RDS\u3001SDS\u7684\u7b2c\u4e00\u4e2a\u914d\u7f6e\u62ff\u5230\u8fd9\u4e2a\u521d\u59cb\u5316\u624d\u4f1a\u5b8c\u6210\uff0c\u7136\u540e\u8c03\u7528workers_start_cb \u5f00\u59cbworker\uff0c\u5f00\u542f\u63a5\u6536\u6d41\u91cf\uff0c\u5e76\u901a\u77e5\u8001\u8fdb\u7a0bdrain listener 1 2 3 4 5 6 7 8 void InstanceImpl::startWorkers () { listener_manager_ -> startWorkers ( * guard_dog_ ); // At this point we are ready to take traffic and all listening ports are up. Notify our parent // if applicable that they can stop listening and drain. restarter_ . drainParentListeners (); drain_manager_ -> startParentShutdownSequence (); } \u4e0d\u4e3b\u52a8\u8fc7\u5173\u95ed\u8fde\u63a5\uff0c\u8fde\u63a5\u7684\u5173\u95ed\u4f9d\u9760\u7a7a\u95f2\u65f6\u95f4\u3001\u88ab\u52a8\u5173\u95ed\u8fd8\u6709shutdown(\u4f9d\u8d56--parent-shutdown-time-s) \u6027\u80fd\u4f18\u5316 --disable-hot-restart \u5173\u95ed\u70ed\u91cd\u542f\uff0c\u907f\u514d\u4f7f\u7528\u5171\u4eab\u5185\u5b58\u5b58\u653estats\u7edf\u8ba1\u4fe1\u606f --concurrency \u548c\u7ed1\u5b9a\u7684\u6838\u5fc3\u6570\u4e00\u81f4\uff0c\u907f\u514d\u591a\u4e2aCPU\u5207\u6362\u5bfc\u81f4cache\u5931\u6548 \u5173\u95edstats\u7edf\u8ba1\u548c\u6dfb\u52a0\u81ea\u5b9a\u4e49header 1 2 3 4 5 http_filters : - name : envoy.router config : dynamic_stats : false suppress_envoy_headers : false \u5173\u95edcircuit_breakers 1 2 3 4 5 6 7 circuit_breakers : thresholds : - priority : HIGH max_connections : 1000000000 max_pending_requests : 1000000000 max_requests : 1000000000 max_retries : 1000000000 listener 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 { \"name\" : \"...\" , \"address\" : \"{...}\" , // lis tener f il ter \"filter_chains\" : [], // \u5e9f\u5f03\u4e86\uff0c\u6539\u7528origi nal ds t f il ter \"use_original_dst\" : \"{...}\" , // \u8bbe\u7f6ewri ter bu ffer \u7684\u5927\u5c0f\u9650\u5236\uff0c\u8fd9\u4e2a\u6307\u7684\u662fe n voy\u5fd8dow nstrea m\u3001\u6216\u8005\u5f80ups trea m\u5199\u5165\u6570\u636e\u7684bu ffer \u5927\u5c0f \"per_connection_buffer_limit_bytes\" : \"{...}\" , \"metadata\" : \"{...}\" , // lis tener \u4f55\u65f6\u6790\u6784\uff0c\u9ed8\u8ba4\u5728lis tener \u7684\u79fb\u9664\u548c\u4fee\u6539\u3001\u8fd8\u6709\u70ed\u91cd\u542f\u3001/heal t hcheck/ fa il\u7684\u65f6\u5019 // \u4e5f\u53ef\u4ee5\u8bbe\u7f6e\u4e3a\u4ec5\u4ec5\u5728lis tener \u7684\u79fb\u9664\u548c\u4fee\u6539\u3001\u8fd8\u6709\u70ed\u91cd\u542f\u7684\u65f6\u5019\u6790\u6784 \"drain_type\" : \"...\" , // lis tener f il ter \"listener_filters\" : [], \"listener_filters_timeout\" : \"{...}\" , // \"transparent\" : \"{...}\" , // \u53ef\u4ee5\u76d1\u542c\u5728\u4e00\u4e2a\u975e\u672c\u5730ip\u4e0a\uff0c\u901a\u5e38\u914d\u7f6eorigi nal ds t f il ter \u6765\u505alis tener \u7684\u5339\u914d // \u672c\u8d28\u4e0a\u5c31\u662f\u7ed9socke t \u8bbe\u7f6eIP_FREEBIND op t io n \u53c2\u6570 \"freebind\" : \"{...}\" , \"socket_options\" : [], // \u7b2c\u4e00\u6b21\u4e09\u6b21\u63e1\u624b\u751f\u6210cookie\u540e\uff0c\u7b2c\u4e8c\u6b21\u76f4\u63a5\u5e26\u7740cookie\u5c31\u907f\u514d\u4e86\u4e09\u6b21\u63e1\u624b\u3002 // \u8fd9\u4e2a\u53c2\u6570\u7528\u6765\u8bbe\u7f6eFAST OPEN\u7684\u961f\u5217\u957f\u5ea6\u3002 // \u5c31\u662f\u8bbe\u7f6esocke t \u7684TCP_FASTOPEN op t io n \u53c2\u6570 \"tcp_fast_open_queue_length\" : \"{...}\" } per_connection_buffer_limit_bytes 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 void ConnectionHandlerImpl::ActiveListener::newConnection ( Network :: ConnectionSocketPtr && socket ) { // Find matching filter chain. const auto filter_chain = config_ . filterChainManager (). findFilterChain ( * socket ); if ( filter_chain == nullptr ) { ENVOY_LOG_TO_LOGGER ( parent_ . logger_ , debug , \"closing connection: no matching filter chain found\" ); stats_ . no_filter_chain_match_ . inc (); socket -> close (); return ; } auto transport_socket = filter_chain -> transportSocketFactory (). createTransportSocket ( nullptr ); // \u521b\u5efa\u8fde\u63a5\u540e\uff0c\u8bbe\u7f6ebuffer limit Network :: ConnectionPtr new_connection = parent_ . dispatcher_ . createServerConnection ( std :: move ( socket ), std :: move ( transport_socket )); new_connection -> setBufferLimits ( config_ . perConnectionBufferLimitBytes ()); const bool empty_filter_chain = ! config_ . filterChainFactory (). createNetworkFilterChain ( * new_connection , filter_chain -> networkFilterFactories ()); if ( empty_filter_chain ) { ENVOY_CONN_LOG_TO_LOGGER ( parent_ . logger_ , debug , \"closing connection: no filters\" , * new_connection ); new_connection -> close ( Network :: ConnectionCloseType :: NoFlush ); return ; } onNewConnection ( std :: move ( new_connection )); } void ConnectionImpl::setBufferLimits ( uint32_t limit ) { read_buffer_limit_ = limit ; // \u5176\u5b9e\u5c31\u662f\u6ce8\u518c\u4e86\u4e00\u4e2awriter buffer\u7684\u6c34\u4f4d\u56de\u8c03 if ( limit > 0 ) { static_cast < Buffer :: WatermarkBuffer *> ( write_buffer_ . get ()) -> setWatermarks ( limit + 1 ); } } Reference: http://man7.org/linux/man-pages/man7/ip.7.html listener filter \u4f5c\u7528\u5728listen socket\u4e0a\uff0c\u5f53\u6709\u8fde\u63a5\u5230\u6765\u7684\u65f6\u5019\uff0c\u901a\u8fc7libevent\u4f1a\u89e6\u53d1\u53ef\u8bfb\u4e8b\u4ef6\uff0c\u8c03\u7528listen socket\u7684accept\u83b7\u53d6\u5230\u8fde\u63a5socket\u5c01\u88c5\u4e3aConnectionSocket\uff0c \u6700\u540e\u8c03\u7528ActiveListener::onAccept\uff0c\u5c06\u83b7\u53d6\u5230\u7684\u8fde\u63a5socket\u4f5c\u4e3a\u5176\u53c2\u6570\u3002 \u521b\u5efafilter chain continueFilterChain \u8c03\u7528filter chain \u5982\u679c\u6709filter\u8fd4\u56de\u4e86StopIteration\uff0c\u90a3\u4e48\u5c31\u5f00\u542ftimer\uff0c\u5728\u8fd9\u4e2a\u65f6\u95f4\u5185\u8fd8\u6ca1\u6709\u7ee7\u7eedcontinue\u5c31\u76f4\u63a5\u5173\u95ed\u5f53\u524dsocket filter\u8fd4\u56deStopIteration\u540e\uff0c\u8981\u7ee7\u7eed\u8fd0\u884c\u5269\u4e0b\u7684filter\u53ef\u4ee5\u56de\u8c03continueFilterChain \u6bd4\u5982proxy_protocol\u8fd9\u4e2alistener filter\u5f53\u63a5\u6536\u5230\u4e00\u4e2afilter\u540e\u4f1a\u6ce8\u518c\u8bfb\u4e8b\u4ef6\uff0c\u4ecesocket\u8bfb\u53d6proxy\u534f\u8bae\u5934\uff0c\u6240\u4ee5\u4f1a\u8fd4\u56deStopIteration \u7b49\u5230\u6709\u6570\u636e\u53ef\u8bfb\u7684\u65f6\u5019\uff0c\u5e76\u4e14\u8bfb\u5230\u4e86\u534f\u8bae\u5934\u624d\u4f1a\u56de\u8c03continueFilterChain\u7ee7\u7eed\u6267\u884c\u4e0b\u9762\u7684filter 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 void ConnectionHandlerImpl::ActiveListener::onAccept ( Network :: ConnectionSocketPtr && socket , bool hand_off_restored_destination_connections ) { auto active_socket = std :: make_unique < ActiveSocket > ( * this , std :: move ( socket ), hand_off_restored_destination_connections ); // Create and run the filters config_ . filterChainFactory (). createListenerFilterChain ( * active_socket ); active_socket -> continueFilterChain ( true ); // Move active_socket to the sockets_ list if filter iteration needs to continue later. // Otherwise we let active_socket be destructed when it goes out of scope. if ( active_socket -> iter_ != active_socket -> accept_filters_ . end ()) { // \u542f\u52a8\u4e86\u4e00\u4e2atimer\uff0c\u907f\u514dfilter\u957f\u65f6\u95f4\u4e0d\u8c03\u7528 active_socket -> startTimer (); active_socket -> moveIntoListBack ( std :: move ( active_socket ), sockets_ ); } } // \u5982\u679c\u8d85\u65f6\u5c31\u4ecesocket list\u4e2d\u79fb\u9664\u5f53\u524dsocket void ConnectionHandlerImpl::ActiveSocket::onTimeout () { listener_ . stats_ . downstream_pre_cx_timeout_ . inc (); ASSERT ( inserted ()); unlink (); } void ConnectionHandlerImpl::ActiveSocket::startTimer () { if ( listener_ . listener_filters_timeout_ . count () > 0 ) { timer_ = listener_ . parent_ . dispatcher_ . createTimer ([ this ]() -> void { onTimeout (); }); timer_ -> enableTimer ( listener_ . listener_filters_timeout_ ); } } \u76ee\u524d\u5b9e\u73b0\u7684listener filter\u4e3b\u8981\u6709 original_dst \u3001 original_src \u3001 proxy_protocol \u3001 tls_inspector \u7b49 original_dst filter \u4e00\u822c\u5e94\u7528\u4e8e\u901a\u8fc7iptables\u6216\u8005tproxy\u7684\u65b9\u5f0f\u5c06\u6d41\u91cf\u53d1\u9001\u7ed9envoy\uff0c\u5bfc\u81f4\u539f\u6765\u8981\u8bbf\u95ee\u7684\u5730\u5740\u4fe1\u606f\u4e22\u5931\uff0c\u4f46\u662f\u53ef\u4ee5\u901a\u8fc7\u4ecesocket\u4e2d\u83b7\u53d6\u5230\u8fd9\u4e9b\u4fe1\u606f\uff0c\u4ea4\u7ed9envoy\u505alisten\u8f6c\u53d1\u3002 \u4e3b\u8981\u5c31\u662f\u4ecesocket\u4e2d\u83b7\u53d6\u5230\u539f\u6765\u7684\u76ee\u7684\u5730\u5740\u4fe1\u606f ( getsockopt(fd, SOL_IP, SO_ORIGINAL_DST, &orig_addr, &addr_len) ) \u7136\u540e\u8bbe\u7f6esocket\u7684restore_local_address\u4e3a\u539f\u6765\u7684\u76ee\u7684\u5730\u5740 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 Network :: FilterStatus OriginalDstFilter::onAccept ( Network :: ListenerFilterCallbacks & cb ) { ENVOY_LOG ( debug , \"original_dst: New connection accepted\" ); Network :: ConnectionSocket & socket = cb . socket (); const Network :: Address :: Instance & local_address = * socket . localAddress (); if ( local_address . type () == Network :: Address :: Type :: Ip ) { Network :: Address :: InstanceConstSharedPtr original_local_address = getOriginalDst ( socket . ioHandle (). fd ()); // A listener that has the use_original_dst flag set to true can still receive // connections that are NOT redirected using iptables. If a connection was not redirected, // the address returned by getOriginalDst() matches the local address of the new socket. // In this case the listener handles the connection directly and does not hand it off. if ( original_local_address ) { // Restore the local address to the original one. socket . restoreLocalAddress ( original_local_address ); } } return Network :: FilterStatus :: Continue ; Reference: https://www.kernel.org/doc/Documentation/networking/tproxy.txt TODO(tianqian.zyf): \u4f8b\u5b50 original_src filter L3/L4 transparency\u7684\u542b\u4e49: L3\u8981\u6c42\u6e90IP\u53ef\u89c1\u3001L4\u8981\u6c42\u7aef\u53e3\u53ef\u89c1\uff0c\u8fd9\u4e2afilter\u7684\u76ee\u7684\u662f\u5c06\u539f\u5730\u5740\u4fe1\u606f\u900f\u4f20\u5230upstream\uff0c\u8ba9upstream\u53ef\u4ee5 \u83b7\u53d6\u5230\u771f\u5b9e\u7684\u6e90IP\u548c\u7aef\u53e3\u4fe1\u606f\u3002 TODO(tianqian.zyf): \u4f8b\u5b50 Reference: https://github.com/envoyproxy/envoy/pull/5255 Reference: https://docs.google.com/document/d/1md08XUBfVG9FwPUZixhR3f77dFRCVGJz2359plhzXxo/edit proxy_protocol filter \u5efa\u7acb\u8fde\u63a5\u540e\u53d1\u9001\u4e00\u6bb5\u6570\u636e\u6765\u4f20\u9012\u6e90\u5730\u5740\u548c\u7aef\u53e3\u4fe1\u606f\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 // \u8fde\u63a5\u5efa\u7acb\u540e\uff0c\u5f00\u59cb\u6ce8\u518c\u8bfb\u4e8b\u4ef6\uff0c\u8bfb\u53d6\u4f20\u9012\u8fc7\u6765\u7684\u6570\u636e\u3002 Network :: FilterStatus Filter::onAccept ( Network :: ListenerFilterCallbacks & cb ) { ENVOY_LOG ( debug , \"proxy_protocol: New connection accepted\" ); Network :: ConnectionSocket & socket = cb . socket (); ASSERT ( file_event_ . get () == nullptr ); file_event_ = cb . dispatcher (). createFileEvent ( socket . ioHandle (). fd (), [ this ]( uint32_t events ) { ASSERT ( events == Event :: FileReadyType :: Read ); onRead (); }, Event :: FileTriggerType :: Edge , Event :: FileReadyType :: Read ); cb_ = & cb ; return Network :: FilterStatus :: StopIteration ; } void Filter::onRead () { try { onReadWorker (); } catch ( const EnvoyException & ee ) { config_ -> stats_ . downstream_cx_proxy_proto_error_ . inc (); cb_ -> continueFilterChain ( false ); } } // \u8bfb\u53d6proxy\u5934\uff0c\u8fd9\u91cc\u7684\u8bfb\u53d6\u662f\u901a\u8fc7ioctl(fd, FIONREAD, &bytes_avail) \u6765\u83b7\u53d6\u7f13\u5b58\u4e2d\u7684\u6570\u636e\u5927\u5c0f , // \u7136\u540e\u901a\u8fc7MSG_PEEK\u7684\u65b9\u5f0f\u67e5\u770b\u6570\u636e\u3002\u5e76\u4e0d\u662f\u76f4\u63a5read\uff0c\u56e0\u4e3a\u4e00\u65e6\u4e0d\u662fproxy ptorocol\u534f\u8bae\u5934\u4f1a\u5bfc\u81f4\u6570\u636e\u4e0d\u5b8c\u6574(\u88ab\u8bfb\u8d70\u4e86)\u3002 void Filter::onReadWorker () { Network :: ConnectionSocket & socket = cb_ -> socket (); if (( ! proxy_protocol_header_ . has_value () && ! readProxyHeader ( socket . ioHandle (). fd ())) || ( proxy_protocol_header_ . has_value () && ! parseExtensions ( socket . ioHandle (). fd ()))) { // We return if a) we do not yet have the header, or b) we have the header but not yet all // the extension data. In both cases we'll be called again when the socket is ready to read // and pick up where we left off. return ; } .... // \u8bfb\u53d6\u5b8c\u6210\u540e\uff0c\u62ff\u5230\u83b7\u53d6\u7684\u6e90\u5730\u5740\u4fe1\u606f\u8fdb\u884c\u64cd\u4f5c\u3002 // Only set the local address if it really changed, and mark it as address being restored. if ( * proxy_protocol_header_ . value (). local_address_ != * socket . localAddress ()) { socket . restoreLocalAddress ( proxy_protocol_header_ . value (). local_address_ ); } socket . setRemoteAddress ( proxy_protocol_header_ . value (). remote_address_ ); .... } TODO(tianqian.zyf): \u4f8b\u5b50 Reference: https://www.haproxy.org/download/1.8/doc/proxy-protocol.txt TLS Inspector filter TLS Inspector listener filter allows detecting whether the transport appears to be TLS or plaintext, and if it is TLS, it detects the Server Name Indication and/or Application-Layer Protocol Negotiation from the client. This can be used to select a FilterChain via the server_names and/or application_protocols of a FilterChainMatch. \u6ce8\u518c\u8bfb\u6570\u636e\uff0c\u7b49\u5f85\u6570\u636e\u5230\u6765 \u89e3\u6790Client hello\u62a5\u6587 \u627e\u5230TLS\u4fe1\u606f\uff0c\u8bbe\u7f6eTransportSocket\u4e3aTls data sharing between filters Network level filters can also share state (static and dynamic) among themselves within the context of a single downstream connection Static State \u4e0d\u53ef\u53d8\u7684\u72b6\u6001\uff0c\u6307\u7684\u662f\u914d\u7f6e\u52a0\u8f7d\u7684\u65f6\u5019\u6307\u5b9a\u7684\u4e00\u4e9b\u72b6\u6001\u4fe1\u606f\uff0c\u4e3b\u8981\u6709\u4e09\u7c7bStatic State Metadata \u5728Envoy\u7684\u914d\u7f6e\u4e2d\u6709\u90e8\u5206\u5b57\u6bb5\u4f1a\u5305\u542bmetadata\u4fe1\u606f\uff0c\u6bd4\u5982listeners, routes, clusters\u7b49\uff0c\u5bf9\u5e94\u5230Protobuf\u5c31\u662f 1 2 3 4 5 message Metadata { // Key is the reverse DNS filter name, e.g. com.acme.widget. The envoy.* // namespace is reserved for Envoy's built-in filters. map < string , google . protobuf . Struct > filter_metadata = 1 ; } \u6bd4\u5982\u96c6\u7fa4\u7684\u6743\u91cd\u3001\u8d1f\u8f7d\u5747\u8861\u4e2d\u7684subset metadata\u4fe1\u606f\u7b49 Typed Metadata Metadata\u662f\u65e0\u7c7b\u578b\uff0c\u56e0\u6b64\u5728\u4f7f\u7528\u4e4b\u524d\u9700\u8981\u5c06\u5176\u8f6c\u6362\u4e3a\u5185\u90e8\u5b9a\u4e49\u7684\u5bf9\u8c61\uff0c\u6bcf\u6b21\u65b0\u5efa\u8fde\u63a5\u6216\u8005\u65b0\u7684\u8bf7\u6c42\u7684\u65f6\u5019\uff0c\u90fd\u9700\u8981\u91cd\u590d\u6267\u884c\uff0c\u5e26\u6765\u7684\u5f00\u9500\u662f\u4e0d\u5c0f\u7684\u3002 Typed Metadata\u5c31\u662f\u7528\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u53ef\u4ee5\u7ed9\u7279\u5b9a\u7684key\u6ce8\u518c\u4e00\u4e2a\u8f6c\u6362\u903b\u8f91\uff0c\u5bf9\u4e8e\u8f93\u5165\u7684Metadata\u5728\u914d\u7f6e\u52a0\u8f7d\u7684\u65f6\u5019\u5c31\u4f1a\u81ea\u52a8\u8f6c\u6362\u6210\u5bf9\u5e94\u7684\u5bf9\u8c61\u3002 \u8fd9\u6837\u5c31\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\uff0c\u907f\u514d\u6bcf\u6b21\u83b7\u53d6Metadata\u8fdb\u884c\u8f6c\u6362\u3002 1 2 class ClusterTypedMetadataFactory : public Envoy::Config::TypedMetadataFactory {}; class HttpRouteTypedMetadataFactory : public Envoy::Config::TypedMetadataFactory {}; HTTP Per-Route Filter Configuration per_filter_config\u5141\u8bb8HTTP filters\u53ef\u4ee5\u6709\u81ea\u5df1\u72ec\u7acb\u7684virtualhost\u548c\u8def\u7531\u914d\u7f6e Dynamic State \u7531\u6bcf\u4e00\u4e2a\u7f51\u7edc\u8fde\u63a5\u3001\u6216\u8005\u662f\u6bcf\u4e00\u4e2aHTTP stream\u4ea7\u751f\uff0c\u8fd9\u4e2a\u5bf9\u8c61\u5305\u542b\u4e86\u5f53\u524dTCP connection\u548cHTTP stream\u76f8\u5173\u7684\u4e00\u4e9b\u4fe1\u606f\u3002\u8fd9\u4e9b\u4fe1\u606f\u662f\u7531\u56fa\u5b9a\u7684\u5c5e\u6027\u7ec4\u6210\u7684\uff0c \u6bd4\u5982HTTP\u7684\u534f\u8bae\u3001\u8bf7\u6c42\u7684server name\u7b49\u7b49\u3002\u6b64\u5916\u8fd8\u63d0\u4f9b\u4e86\u5b58\u50a8typed objects\u7684\u80fd\u529b map<string, FilterState::Object> \uff0c\u7528\u4e8e\u7ed9\u7528\u6237\u63d0\u4f9b\u5b58\u50a8\u4e00\u4e9b\u81ea\u5b9a\u4e49\u4fe1\u606f\u7684\u3002 ConnectionImpl \u4e2d\u5305\u542b\u7684StreamInfo\uff0c\u7528\u4e8e\u5728\u8fde\u63a5\u7ea7\u522b\u5171\u4eab\u4e00\u4e9bState\uff0c Http::ConnectionManagerImpl::ActiveStream \u4e2d\u5305\u542b\u7684\u5219\u662fper stream\u3002 HTTP routing \u57fa\u4e8eVirtual hosts\u7684\u8def\u7531 \u524d\u7f00\u5339\u914d\u3001\u6216\u8005\u662f\u7cbe\u786e\u5339\u914d(\u5927\u5c0f\u5199\u654f\u611f\u6216\u8005\u4e0d\u654f\u611f\u90fd\u53ef\u4ee5)\uff0c\u76ee\u524d\u8fd8\u4e0d\u652f\u6301\u57fa\u4e8e\u6b63\u5219\u7684\u5339\u914d\u3002 TLS redirection Direct Response \u663e\u793a\u7684host\u91cd\u5199 \u81ea\u52a8\u6839\u636e\u9009\u62e9\u7684upstream\u7684DNS name\u8fdb\u884chost\u91cd\u5199 \u524d\u7f00\u91cd\u5199 \u57fa\u4e8e\u6b63\u5219\u8868\u8fbe\u5f0f\u6355\u83b7\u7ec4\u7684\u65b9\u5f0f\u8fdb\u884cpath\u91cd\u5199 \u8bf7\u6c42\u91cd\u8bd5(\u57fa\u4e8e\u914d\u7f6e\u548chttp header\u4e24\u79cd\u65b9\u5f0f) \u8bf7\u6c42\u8d85\u65f6\u63a7\u5236(\u57fa\u4e8e\u914d\u7f6e\u548chttp header\u4e24\u79cd\u65b9\u5f0f) Request hedging Traffic shifting Traffic splitting \u4efb\u4f55\u7684header match \u53ef\u4ee5\u6307\u5b9a\u865a\u62df\u96c6\u7fa4 \u57fa\u4e8e\u4f18\u5148\u7ea7\u7684\u8def\u7531 \u57fa\u4e8ehash policy\u7684\u8def\u7531 \u57fa\u4e8e\u7edd\u5bf9url\u7684\u4ee3\u7406\u8f6c\u53d1 Route Scope For example, for the following scoped route configuration, Envoy will look into the \u201caddr\u201d header value, split the header value by \u201c;\u201d first, and use the first value for key \u2018x-foo-key\u2019 as the scope key. If the \u201caddr\u201d header value is \u201cfoo=1;x-foo-key=127.0.0.1;x-bar-key=1.1.1.1\u201d, then \u201c127.0.0.1\u201d will be computed as the scope key to look up for corresponding route configuration. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 HttpConnectionManager config: scoped_routes: name: foo-scoped-routes scope_key_builder: fragments: - header_value_extractor: name: X-Route-Selector element_separator: , element: separator: = key: vip scoped_route_configurations_list/SRDS: (1) name: route-scope1 route_configuration_name: route-config1 key: fragments: - string_key: 172.10.10.20 (2) name: route-scope2 route_configuration_name: route-config2 key: fragments: - string_key: 172.20.20.30 GET / HTTP/1.1 Host: foo.com X-Route-Selector: vip=172.10.10.20 \u6700\u7ec8\u5339\u914d\u5230route-config1 \u6839\u636e scoped_routes \u83b7\u53d6\u8bf7\u6c42\u4e2d\u7684\u6307\u5b9a\u5b57\u6bb5\uff0c\u7136\u540e\u5207\u5272\u83b7\u53d6\u5230\u5bf9\u5e94\u7684value\uff0c\u7136\u540e\u62ff\u7740value\u548c\u5b9a\u4e49\u7684 scoped_route_configurations \u77e5\u9053\u8981\u4f7f\u7528\u7684\u8def\u7531\u914d\u7f6e\u540d\u79f0 \u91cd\u8bd5\u8bed\u4e49 1 2 3 4 5 6 7 8 9 10 11 12 { \"retry_on\" : \"...\" , \"num_retries\" : \"{...}\" , \"per_try_timeout\" : \"{...}\" , \"retry_priority\" : \"{...}\" , \"retry_host_predicate\" : [], \"host_selection_retry_max_attempts\" : \"...\" , \"retriable_status_codes\" : [], \"retry_back_off\" : \"{...}\" , \"retriable_headers\" : [], \"retriable_request_headers\" : [] } \u53ef\u4ee5\u914d\u7f6e\u91cd\u8bd5\u7684\u6700\u5927\u6b21\u6570\u3001\u91cd\u8bd5\u7684\u6761\u4ef6(\u53ef\u4ee5\u662f\u57fa\u4e8ereseponse code\u3001\u53ef\u4ee5\u662f\u7f51\u7edc\u7b49\u7b49)\uff0cRequest budgets\u53ef\u4ee5\u9632\u6b62\u5927\u91cf\u7684\u8bf7\u6c42\u91cd\u8bd5\u3001\u53ef\u4ee5\u8fdb\u884chost selection rerty 1 2 3 4 5 6 7 8 9 10 11 12 13 14 message DirectResponseAction { // Specifies the HTTP response status to be returned. uint32 status = 1 [( validate . rules ). uint32 = { gte : 100 , lt : 600 }]; // Specifies the content of the response body. If this setting is omitted, // no body is included in the generated response. // // .. note:: // // Headers can be specified using *response_headers_to_add* in the enclosing // :ref:`envoy_api_msg_route.Route`, :ref:`envoy_api_msg_RouteConfiguration` or // :ref:`envoy_api_msg_route.VirtualHost`. core . DataSource body = 2 ; } \u53ef\u4ee5\u6307\u5b9aresponse status code\u548cbody\uff0cbody\u53ef\u4ee5\u662f\u5185\u8054\u5b57\u7b26\u4e32\u6216\u8005\u662f\u4e00\u4e2a\u6587\u4ef6\u8def\u5f84\uff0c\u4f46\u662f\u90fd\u5fc5\u987b\u9650\u5236\u57284K\u4ee5\u5185\uff0c\u56e0\u4e3aEnvoy\u4f1a\u7f13\u5b58body\u3002 5. \u663e\u793a\u7684\u4e3b\u673a\u540d\u91cd\u5199 1 2 route . RouteAction : host_rewrite : \"....\" \u81ea\u52a8\u4e3b\u673a\u91cd\u5199 host header\u4f1a\u88ab\u91cd\u5199\u4e3a\u9009\u62e9\u7684cluster\u4e2d\u7684\u540d\u5b57\uff0c\u8981\u6c42cluster\u9700\u8981\u662fstrict_dns\u6216\u8005\u662flogical_dns\u7c7b\u578b\u3002 1 2 route . RouteAction : auto_host_rewrite : \"....\" // \u548chost_rewrite\u4e8c\u9009\u5176\u4e00 1 2 3 4 5 6 7 8 void Filter::UpstreamRequest::onPoolReady ( Http :: StreamEncoder & request_encoder , Upstream :: HostDescriptionConstSharedPtr host ) { ....... if ( parent_ . route_entry_ -> autoHostRewrite () && ! host -> hostname (). empty ()) { parent_ . downstream_headers_ -> Host () -> value ( host -> hostname ()); } ....... } \u524d\u7f00\u91cd\u5199 1 2 3 4 5 6 7 8 - match : prefix : \"/prefix/\" route : prefix_rewrite : \"/\" - match : prefix : \"/prefix\" route : prefix_rewrite : \"/\" \u7b2c\u4e00\u4e2a\u5c06 /prefix/ \u66ff\u6362\u4e3a / \uff0c\u7b2c\u4e8c\u4e2a\u5219\u662f\u5c06 /prefix \u66ff\u6362\u4e3a / \uff0c\u91cd\u5199\u5b8c\u6210\u540e\u4f1a\u5c06\u4e4b\u524d\u7684\u8def\u5f84\u653e\u5728 x-envoy-original-path header\u4e2d\u3002 \u8bf7\u6c42\u91cd\u8bd5 \u53ef\u4ee5\u57fa\u4e8e\u8bf7\u6c42\u4e2d\u643a\u5e26\u7684header\u6765\u5f00\u542f\u91cd\u8bd5\u3001\u4e5f\u53ef\u4ee5\u914d\u7f6e\u4e00\u4e2aVirtualHost\u7ea7\u522b\u7684\u91cd\u8bd5\u3001\u4e5f\u53ef\u4ee5\u662fRouteAction\u7ea7\u522b\u7684\u91cd\u8bd5\u3002\u5982\u679c\u4e0a\u6e38\u8fd4\u56de x-envoy-overloaded header \u90a3\u4e48\u5c31\u5173\u95ed\u91cd\u8bd5\u3002\u5982\u679cupstream\u8fd4\u56de\u7684header\u4e2d\u5e26\u6709 x-envoy-ratelimited \u4e5f\u8981\u7981\u6b62\u91cd\u8bd5\u3002 timeout \u9ed8\u8ba4\u7684\u8d85\u65f6\u65f6\u95f4\u662f15s\uff0c\u8fd9\u4e2a\u65f6\u95f4\u5305\u542b\u4e86\u4ecedownstream request\u63a5\u6536\u5230end stream\u5f00\u59cb\u5230\u5904\u7406\u5230upstream response\u54cd\u5e94\u7ed3\u675f\u8fd8\u5305\u62ec\u4e86\u6574\u4e2a\u91cd\u8bd5\u671f\u95f4\u7684\u65f6\u95f4\u3002\u53ef\u4ee5\u901a\u8fc7 x-envoy-upstream-rq-timeout-ms header\u6765\u8bbe\u7f6e\u8fd9\u4e2a\u503c\u3002 x-envoy-upstream-rq-per-try-timeout-ms \u901a\u8fc7\u8fd9\u4e2aheader\u6765\u53ef\u4ee5\u63a7\u5236\u5355\u8bcd\u54cd\u5e94\u7684\u8d85\u65f6\u65f6\u95f4 \u4e0d\u5305\u62ecretry\u3002 \u6d41\u91cf\u62c6\u5206/\u8f6c\u79fb 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 virtual_hosts : - name : www2 domains : - '*' routes : - match : prefix : / runtime_fraction : default_value : numerator : 50 denominator : HUNDRED runtime_key : routing.traffic_shift.helloworld route : cluster : helloworld_v1 - match : prefix : / route : cluster : helloworld_v2 Connection pooling HTTP/1.1 \u8fde\u63a5\u6c60\uff0c\u540c\u6b65\u7684\uff0c\u4e00\u4e2a\u8bf7\u6c42\u7ed1\u5b9a\u4e00\u4e2a\u8fde\u63a5\uff0c\u8fd9\u4e2a\u8fde\u63a5\u5904\u7406\u5b8c\u8fd9\u4e2a\u8bf7\u6c42\uff0c\u624d\u4f1a\u53d8\u6210\u53ef\u7528\u72b6\u6001\uff0c\u624d\u80fd\u5904\u7406\u4e0b\u4e00\u4e2a\u8bf7\u6c42\uff0c\u5355\u4e2adownstream\u65ad\u94fe\u53ea\u80fd\u5bfc\u81f4\u4e00\u4e2a\u8bf7\u6c42\u51fa\u95ee\u9898\u3002 HTTP2/2 \u4e00\u4e2aupstream host\u53ea\u4f1a\u5efa\u7acb\u4e00\u6761\u8fde\u63a5\uff0c\u4e0a\u6e38\u6240\u6709\u7684\u8bf7\u6c42\u90fd\u4f1a\u901a\u8fc7\u6574\u6761\u8fde\u63a5\u53d1\u9001\u5230upstream\u7684\u4e3b\u673a\uff0c\u5982\u679c\u6536\u5230GOAWAY frame\u6216\u8005\u5230\u8fbe\u6700\u5927\u6d41\u9650\u5236\uff0c\u90a3\u4e48\u8fde\u63a5\u6c60 \u4f1a\u91cd\u65b0\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u8fde\u63a5\uff0c\u7136\u540edrain\u6389\u6b63\u5728\u670d\u52a1\u7684\u8fde\u63a5\u3002 Runtime xDS REST and gRPC protocol Envoy\u652f\u6301\u901a\u8fc7\u6587\u4ef6\u7cfb\u7edf\u3001\u67e5\u8be2\u7ba1\u7406\u670d\u52a1\u5668\u7684\u65b9\u5f0f\u83b7\u53d6\u5404\u79cd\u7c7b\u578b\u7684\u52a8\u6001\u8d44\u6e90\u3002\u8fd9\u79cd\u53d1\u73b0\u670d\u52a1\u548c\u5176\u5bf9\u5e94\u7684API\u88ab\u79f0\u4e3axDS\uff0c\u8d44\u6e90\u9700\u8981\u901a\u8fc7\u6307\u5b9a\u4e00\u4e2a\u6587\u4ef6\u7cfb\u7edf\u8def\u5f84\u53bbwatch\u3001 \u6216\u8005\u521d\u59cb\u5316\u4e00\u4e2agrpc stream\u6216\u8005\u662f\u901a\u8fc7RESET-JSON URL\u8fdb\u884cpooling\u7684\u65b9\u5f0f\u8fdb\u884c\u8ba2\u9605\u3002\u540e\u4e24\u79cd\u65b9\u5f0f\u4f1a\u901a\u8fc7\u53d1\u9001\u4e00\u4e2a DiscoveryRequest \u8bf7\u6c42\u6765\u83b7\u53d6\u8d44\u6e90\uff0c \u7ba1\u7406\u670d\u52a1\u5668\u4f1a\u8fd4\u56de DiscoveryResponse \uff0c\u5176\u4e2d\u5305\u542b\u4e86\u8bf7\u6c42\u7684\u8d44\u6e90\u3002 \u76ee\u524d\u6709\u4e94\u79cd\u7c7b\u578b\u7684\u8d44\u6e90\uff0c\u5206\u522b\u5982\u4e0b: LDS: envoy.api.v2.Listener RDS: envoy.api.v2.RouteConfiguration CDS: envoy.api.v2.Cluster EDS: envoy.api.v2.ClusterLoadAssignment SDS: envoy.api.v2.Auth.Secret \u6bcf\u4e00\u4e2a\u7c7b\u578b\u7684\u8d44\u6e90\u90fd\u6709\u4e00\u4e2aURL\u6765\u552f\u4e00\u8868\u793a\uff0c\u5176\u5f62\u5f0f\u4e3a type.googleapis.com/<resource type> \u4e0b\u9762\u662f\u4e00\u4e2aDiscoveryRequest\u7684\u4f8b\u5b50: 1 2 3 4 5 6 7 version_info : node : { id : envoy } resource_names : - foo - bar type_url : type.googleapis.com/envoy.api.v2.ClusterLoadAssignment response_nonce : \u5176\u4e2d version_info \u53d6\u7684\u662f\u4e0a\u4e00\u6b21\u6210\u529f\u6536\u5230\u7684response\u4e2d\u643a\u5e26\u7684 version_info \u7684\u503c\uff0c\u5982\u679c\u662f\u7b2c\u4e00\u4e2a\u8bf7\u6c42\uff0c\u90a3\u4e48\u8fd9\u4e2a\u503c\u5c31\u662f\u7a7a\u7684\uff0c\u6bcf\u4e00\u4e2atype url\u7684 version_info \u662f\u72ec\u7acb\u7684\u3002 node \u5219\u662fEnvoy\u8282\u70b9\u7684\u76f8\u5173\u4fe1\u606f resource_names Envoy\u4e2d\u6bcf\u4e00\u7c7b\u8d44\u6e90\u90fd\u662f\u6709\u540d\u5b57\u7684\uff0c\u901a\u8fc7\u643a\u5e26\u8fd9\u4e2a\u5b57\u6bb5\u53ef\u4ee5\u544a\u8bc9\u7ba1\u7406\u670d\u52a1\u5668\u53ea\u8fd4\u56de\u5bf9\u5e94\u7684\u8d44\u6e90\u5373\u53ef\uff0c\u5982\u679c\u4e0d\u643a\u5e26\u5219\u8868\u793a\u9700\u8981\u83b7\u53d6\u8fd9\u7c7b\u8d44\u6e90\u7684\u5168\u90e8 type_url \u552f\u4e00\u6807\u8bc6\u4e00\u7c7b\u8d44\u6e90\u7684\uff0cADS\u9700\u8981\u8fd9\u4e2a\u5b57\u6bb5\u6765\u8bc6\u522b\u51fa\u8fd9\u4e2a\u8bf7\u6c42\u662f\u54ea\u79cd\u7c7b\u578b\u7684 response_nonce \u7528\u4e8e\u663e\u793a\u7684\u5bf9 DiscoverResponse \u505aack \u5982\u679c\u8bf7\u6c42\u88ab\u63a5\u6536\u4e86\uff0c\u90a3\u4e48envoy\u4f1a\u8fdb\u884cack\uff0c\u8fd4\u56de\u7684response_nonce\u5bf9\u5e94DiscoveryResponse\u4e2d\u7684nonce\uff0cversion_info\u5219\u5bf9\u5e94DiscoveryResponse\u4e2d\u7684version_info \u5982\u679c\u62d2\u7edd\u4e86DiscoveryResponse\u5219\u8fd4\u56de\u7684response_nonce\u5bf9\u5e94DiscoveryResponse\u4e2d\u7684nonce\uff0cversion_info\u5219\u5bf9\u5e94\u4e0a\u4e00\u6b21DiscoveryResponse\u4e2d\u7684version_info \u540c\u4e00\u65f6\u95f4\u6709\u591a\u4e2aDiscoveryRequest\u7684\u65f6\u5019\uff0cmangement server\u53ea\u4f1a\u5f71\u54cd\u6700\u540e\u7684\u4e00\u4e2aDiscoverRequest \u5982\u679c\u7ba1\u7406server\u8fd4\u56de\u7684response_nonce\u662f\u4e00\u4e2a\u65b0\u7684\u503c\uff0cEnvoy\u4f1a\u62d2\u7edd\u8fd9\u6b21\u8bf7\u6c42 If Envoy had instead rejected configuration update X, it would reply with error_detail populated and its previous version, which in this case was the empty initial version. The error_detail has more details around the exact error message populated in the message field: LDS/CDS\u7684resource_names\u4e00\u822c\u4e3a\u7a7a\uff0c\u8868\u793a\u83b7\u53d6\u6240\u6709\u7684cluster\u548clistener\u8d44\u6e90\uff0c\u800cEDS\u548cRDS\u4e00\u822c\u4f1a\u5e26\u4e0aresource name\u83b7\u53d6\u611f\u5174\u8da3\u7684\u8d44\u6e90\uff0c\u8fd9\u4e2aresource name\u6765\u81ea\u4e8eLDS\u548cCDS\u3002 \u5982\u679c\u4e00\u4e2aEDS\u6ca1\u6709\u5bf9\u5e94\u7684CDS\uff0c\u90a3\u4e48\u8fd9\u4e2aEDS\u662f\u65e0\u6548\u7684\uff0cEnvoy\u4f1a\u5ffd\u7565\u8fd9\u4e2aEDS\u3002 LDS\u548cCDS\u8bf7\u6c42\u5b58\u5728requesting wramming\u7684\u8fc7\u7a0b\uff0c\u8981\u6c42\u83b7\u53d6\u5230LDS\u548cEDS\u4ee5\u53ca\u4f9d\u8d56\u7684EDS\u548cRDS\uff0cEnvoy\u624d\u7b97\u521d\u59cb\u5316\u5b8c\u6210\u3002 xDS\u5bf9\u4e8e\u5404\u4e2a\u8d44\u6e90\u7684\u987a\u5e8f\u6ca1\u6709\u7ea6\u675f\uff0c\u56e0\u4e3a\u6bcf\u4e00\u4e2a\u8d44\u6e90\u90fd\u662f\u4e00\u4e2a\u5355\u72ec\u7684\u6d41\uff0c\u8d44\u6e90\u7684\u5230\u8fbe\u987a\u5e8f\u4f1a\u5bfc\u81f4\u6d41\u91cf\u5b58\u5728\u4e0b\u964d\u7684\u95ee\u9898\uff0c\u6bd4\u5982\uff0cLDS\u5c31\u7eea\u4e86\u4f46\u662f\u4f9d\u8d56\u7684CDS\u8fd8\u6ca1\u6709\u7ee7\u7eed\uff0c\u90a3\u4e48\u8fd9\u4f1a\u5bfc\u81f4\u8bf7\u6c42\u65e0\u6548\u3002 \u4f46\u662f\u5982\u679cCDS\u5148\u5c31\u7eea\uff0c\u7136\u540eLDS\u518d\u5c31\u7eea\u5c31\u53ef\u4ee5\u907f\u514d\u8fd9\u4e2a\u95ee\u9898\u4e86\u3002\u6240\u4ee5\u4e3a\u4e86\u907f\u514d\u56e0\u4e3a\u8d44\u6e90\u66f4\u65b0\u7684\u987a\u5e8f\u95ee\u9898\u5bfc\u81f4\u6d41\u91cf\u88abdrop\uff0c\u8981\u6c42\u8d44\u6e90\u66f4\u65b0\u7684\u987a\u5e8f\u5982\u4e0b: CDS updates (if any) must always be pushed first. EDS updates (if any) must arrive after CDS updates for the respective clusters. LDS updates must arrive after corresponding CDS/EDS updates. RDS updates related to the newly added listeners must arrive after CDS/EDS/LDS updates. VHDS updates (if any) related to the newly added RouteConfigurations must arrive after RDS updates. Stale CDS clusters and related EDS endpoints (ones no longer being referenced) can then be removed. \u4e3a\u4e86\u4fdd\u8bc1\u8d44\u6e90\u8bf7\u6c42\u7684\u987a\u5e8f\u53ef\u4ee5\u6309\u7167\u4e0a\u8ff0\u5b9a\u4e49\u7684\u987a\u5e8f\uff0c\u9700\u8981\u5c06\u6240\u6709\u7684\u8d44\u6e90\u8bf7\u6c42\u548c\u54cd\u5e94\u63a7\u5236\u5728\u540c\u4e00\u4e2a\u6d41\u4e2d\u3002 xDS\u4e2d\u8d44\u6e90\u7684\u66f4\u65b0\u662f\u6ca1\u529e\u6cd5\u5355\u72ec\u63a8\u9001\u7684\uff0c\u6bcf\u6b21\u63a8\u9001\u7684\u8d44\u6e90\u90fd\u662f\u5168\u91cf\u7684\uff0c\u5373\u4f7f\u5176\u4e2d\u90e8\u5206\u8d44\u6e90\u53d1\u751f\u4e86\u53d8\u66f4\uff0c\u90fd\u662f\u5168\u91cf\u4e0b\u53d1\uff0cenvoy\u5219\u4f1a\u8fdb\u884c\u8d44\u6e90\u5bf9\u6bd4\uff0c\u6709\u53d8\u66f4\u7684\u5219\u8fdb\u884c\u5e94\u7528\u3002 \u8fd9\u6837\u5e26\u6765\u7684\u4f20\u8f93\u6d88\u8017\u8fd8\u662f\u86ee\u5927\u7684\uff0c\u4e3a\u6b64\u6709\u4e86 Incremental xDS \uff0c\u53ea\u4e0b\u53d1\u6709\u53d8\u66f4\u7684\u8d44\u6e90\u3002 Incremental xDS \u4e00\u822c\u7528\u5728\u4ee5\u4e0b\u51e0\u4e2a\u573a\u666f: Initial message in a xDS bidirectional gRPC stream. As an ACK or NACK response to a previous DeltaDiscoveryResponse. In this case the response_nonce is set to the nonce value in the Response. ACK or NACK is determined by the absence or presence of error_detail. Spontaneous DeltaDiscoveryRequest from the client. This can be done to dynamically add or remove elements from the tracked resource_names set. In this case response_nonce must be omitted. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 DeltaDiscoveryRequest { \"node\" : \"{...}\" , \"type_url\" : \"...\" , \"resource_names_subscribe\" : [] , \"resource_names_unsubscribe\" : [] , \"initial_resource_versions\" : \"{...}\" , \"response_nonce\" : \"...\" , \"error_detail\" : \"{...}\" } DeltaDiscoveryResponse { \"system_version_info\" : \"...\" , \"resources\" : [], \"type_url\" : \"...\" , \"removed_resources\" : [], \"nonce\" : \"...\" } \u76ee\u524d\u589e\u91cf\u7684xDS\u53ea\u6709grpc\u7248\u672c\u7684\uff0c\u6ca1\u6709REST\u7248\u672c\uff0c\u8981\u6c42 response_nonce \u5b57\u6bb5\u5fc5\u987b\u6210\u5bf9\u51fa\u73b0\uff0c\u800c\u5168\u91cfxDS\u5219\u4e0d\u9700\u8981\uff0c system_version_info \u5b57\u6bb5\u7528\u4e8edebug\u76ee\u7684\u3002 DeltaDiscoveryRequest \u7528\u4e8e\u51e0\u4e2a\u573a\u666f: xDS\u5efa\u7acb\u540e\u53d1\u8d77\u7684\u7b2c\u4e00\u6b21\u8bf7\u6c42 \u4f5c\u4e3aACK/NACK\u5bf9\u4e8e\u524d\u4e00\u4e2a DeltaDiscoveryResponse \u8fdb\u884c\u54cd\u5e94\uff0c\u5176response_nonce\u7684\u503c\u4e3a\u524d\u4e00\u4e2a DeltaDiscoveryResponse \u4e2d\u7684\u503c\uff0c\u81f3\u4e8e\u662fACK\u8fd8\u662fNACK\u53d6\u51b3\u4e8e error_detail \u662f\u5426\u5b58\u5728 client\u4e3b\u52a8\u53d1\u8d77 DeltaDiscoveryRequest \u8bf7\u6c42\uff0c\u7528\u4e8e\u52a8\u6001\u6dfb\u52a0\u548c\u79fb\u9664\u8ddf\u8e2a\u7684\u8d44\u6e90\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b response_nonce \u5fc5\u987b\u4e3a\u7a7a \u54ea\u4e9b\u60c5\u51b5\u9700\u8981\u52a8\u6001\u6dfb\u52a0\u548c\u79fb\u9664\u8ddf\u8e2a\u7684\u8d44\u6e90? \u5f53\u53d1\u751f\u8fde\u63a5\u6bb5\u6389\u7684\u60c5\u51b5\u4e0b\uff0c\u5ba2\u6237\u7aef\u91cd\u65b0\u8fde\u63a5\u540e\u9700\u8981\u544a\u77e5\u81ea\u5df1\u6240\u62e5\u6709\u7684\u8d44\u6e90\u540d(initial_resource_versions)\uff0c\u5f53\u5ba2\u6237\u7aef\u4e0d\u518d\u5bf9\u67d0\u4e9b\u8d44\u6e90\u611f\u5174\u8da3\u7684\u65f6\u5019\u9700\u8981\u5728 resource_names_unsubscribe \u4e2d\u5217\u51fa\u6765 Reference: 1. https://github.com/envoyproxy/envoy/blob/master/api/XDS_PROTOCOL.md 2. https://developers.google.com/protocol-buffers/docs/proto3#any Envoy\u751f\u547d\u5468\u671fcallback https://github.com/envoyproxy/envoy/pull/6254 Envoy\u56db\u5c42filter\u6267\u884c\u94fe Downstream\u8fde\u63a5\u5efa\u7acb\u540e\uff0c\u5f00\u59cb\u521b\u5efafilter\uff0c\u7136\u540e\u521d\u59cb\u5316filter \u56de\u8c03onNewConnection \u56de\u8c03onData 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 bool FilterManagerImpl::initializeReadFilters () { if ( upstream_filters_ . empty ()) { return false ; } // \u521d\u59cb\u5316\u5b8c\u6210\u540e\uff0c\u5f00\u59cb\u4ece\u5934\u5f00\u59cb\u6267\u884cfilter onContinueReading ( nullptr ); return true ; } // \u4f20\u5165\u7684\u662fnullptr\u7684\u65f6\u5019\uff0c\u4ece\u5934\u5f00\u59cb\u6267\u884cfilter\u7684 // \u8bbe\u7f6einitialized_\u6807\u5fd7\u4e3atrue // \u56de\u8c03onNewConnection\uff0c\u5982\u679c\u662f\u8fd4\u56destop\u5c31\u505c\u6b62\u8fd0\u884c\u4e86 // \u7b49\u5f85filter\u8fd4\u56de\u901a\u8fc7ReadFilterCallbacks\u56de\u8c03onContinueReading\u6765\u7ee7\u7eed\u6267\u884c void FilterManagerImpl::onContinueReading ( ActiveReadFilter * filter ) { std :: list < ActiveReadFilterPtr >:: iterator entry ; if ( ! filter ) { entry = upstream_filters_ . begin (); } else { entry = std :: next ( filter -> entry ()); } for (; entry != upstream_filters_ . end (); entry ++ ) { if ( ! ( * entry ) -> initialized_ ) { ( * entry ) -> initialized_ = true ; FilterStatus status = ( * entry ) -> filter_ -> onNewConnection (); if ( status == FilterStatus :: StopIteration ) { return ; } } BufferSource :: StreamBuffer read_buffer = buffer_source_ . getReadBuffer (); if ( read_buffer . buffer . length () > 0 || read_buffer . end_stream ) { FilterStatus status = ( * entry ) -> filter_ -> onData ( read_buffer . buffer , read_buffer . end_stream ); if ( status == FilterStatus :: StopIteration ) { return ; } } } } Example: \u6709\u4e09\u4e2afilter\u3001\u5176\u4e2d\u4efb\u4f55\u4e00\u4e2afilter\u5176\u4e2d\u7684\u4e00\u4e2acallback\u8fd4\u56deStopIteration\u90a3\u4e48\u6574\u4e2a\u6d41\u7a0b\u5c31\u505c\u6b62\u4e86\uff0c\u9700\u8981\u7b49\u5f85\u8c03\u7528onContinueReading\u624d\u80fd\u7ee7\u7eed \u6267\u884c\u4e0b\u4e00\u4e2acallback\u65b9\u6cd5\u3002 FilterA::onNewConnection FilterA::onData FilterB::onNewConnection FilterB::onData FilterC::onNewConnection FilterC::onData \u6267\u884c\u987a\u5e8f\u4e3a: FilterA::onNewConnection->FilterA::onData->FilterB::onNewConnection->FilterB::onData->FilterC::onNewConnection->FilterC::onData \u4efb\u4f55\u4e00\u4e2acallback\u8fd4\u56deStopIteration\u6574\u4e2a\u6d41\u7a0b\u5c31\u4e0d\u4f1a\u7ee7\u7eed\u5f80\u4e0b\u8d70\u4e86\uff0c\u9700\u8981\u7b49\u5f85\u5bf9\u5e94\u7684filter\u56de\u8c03onContinueReading\uff0c\u8fd9\u6837\u5c31\u4f1a\u5e26\u6765\u4e00\u4e2a\u95ee\u9898\uff0c\u4e00\u65e6\u505c\u6b62filter chain \u7ee7\u7eed\u5f80\u4e0b\u8d70\uff0c\u90a3\u4e48\u7f51\u7edc\u5c42\u4f9d\u7136\u4f1a\u6536\u6570\u636e\u5b58\u5728\u5185\u90e8buffer\u91cc\u9762\uff0c\u8fd9\u4f1a\u5bfc\u81f4\u5185\u5b58\u4e0a\u6da8\uff0c\u56e0\u6b64TCP PROXY\u4e2d\u4f1a\u5728\u8c03\u7528onNewConnection\u7684\u65f6\u5019\u5148\u5173\u95ed\u8bfb\uff0c\u7136\u540e\u548cupstream\u5efa\u7acb\u8fde\u63a5 \u8fde\u63a5\u5efa\u7acb\u540e\u624d\u4f1a\u5f00\u542f\u8bfb\uff0c\u9632\u6b62\u5185\u5b58\u88ab\u6253\u7206\u3002 Envoy internal header Load balancer \u5b9e\u73b0\u589e\u91cf\u66f4\u65b0\u7684\u601d\u8def : \u9ed8\u8ba4Config Server\u83b7\u53d6\u5230Host\u5305\u542b\u4e86ip\u3001\u6240\u5728\u673a\u623f\u3001\u5355\u5143\u3001machine group\u3001\u6743\u91cd\u8fd8\u6709\u4e00\u4e9bmetadata\u7b49\uff0c\u90fd\u662f\u673a\u5668\u7eac\u5ea6\u7684\u4fe1\u606f\uff0c\u9664\u4e86\u8fd9\u4e9b\u4fe1\u606f\u5916\uff0cEnvoy\u8fd8\u9700\u8981\u4f18\u5148\u7ea7\u4fe1\u606f\u3001\u673a\u5668\u5065\u5eb7\u72b6\u51b5\u7b49 \u76ee\u524d\u53ef\u4ee5\u9ed8\u8ba4\u4f7f\u7528\u4f18\u5148\u7ea70\u4ee3\u66ff \u3002\u9664\u4e86\u8fd9\u4e9b\u673a\u5668\u7eac\u5ea6\u7684\u4fe1\u606f\u5916\uff0c\u8fd8\u9700\u8981\u6709\u670d\u52a1\u7eac\u5ea6\u7684\u4fe1\u606f(\u4e5f\u53ef\u4ee5\u79f0\u4e3a\u96c6\u7fa4\u7eac\u5ea6\u7684\u4fe1\u606f)\uff0c\u6bd4\u5982\u533a\u57df\u6743\u91cd(\u6bcf\u4e2a\u533a\u57df\u7684\u6743\u91cd)\u3001\u8fc7\u8f7d\u56e0\u5b50\u3001Endpoint\u8fc7\u671f\u65f6\u95f4\u7b49\u3002\u76ee\u524d\u8fd9\u4e2a\u90e8\u5206\u53ef\u4ee5\u4e0d\u5b9e\u73b0\uff0c \u7b49\u5f00\u59cb\u652f\u6301\u8fd9\u7c7b\u529f\u80fd\u7684\u65f6\u5019\u518d\u5355\u72ec\u901a\u8fc7Config Server\u7684SDK\u901a\u77e5\u6211\u8fd9\u7c7b\u5143\u4fe1\u606f\u53d1\u751f\u4e86\u6539\u53d8\u3002\u8fd9\u4e2a\u65f6\u5019\u5c31\u53ef\u4ee5\u66f4\u65b0Locality weight\uff0c\u4fee\u6539 PriorityState \u4ee5\u53ca\u8fc7\u8f7d\u56e0\u5b50\u7b49\u3002\u8fd9\u4e2a\u65f6\u5019\u5c31\u9700\u8981\u89e6\u53d1forch rebuild(\u91cd\u65b0\u5efa\u7acbLB)\u3002 \u5224\u65adhost\u662f\u65b0\u589e\u8fd8\u662fupdated \u5982\u679c\u662fupdate\u5219\u5148\u6e05\u9664 PENDING_DYNAMIC_REMOVAL \uff0c\u56e0\u4e3a\u9a6c\u4e0a\u8981\u52a0\u56de\u6765\u4e86\u3002 \u5224\u65ad\u662f\u5426\u9700\u8981\u539f\u5730\u66f4\u65b0 (\u6709\u5065\u5eb7\u68c0\u67e5\u3001\u5e76\u4e14\u5065\u5eb7\u68c0\u67e5\u7684\u5730\u5740\u4e0d\u540c\uff0c\u8fd9\u4e2a\u65f6\u5019\u4e0d\u80fd\u8df3\u8fc7\u539f\u5730\u66f4\u65b0\uff0c\u5fc5\u987b\u8981\u66f4\u65b0) \u5982\u679c\u662f\u539f\u5730\u66f4\u65b0 \u5224\u65ad\u5065\u5eb7\u72b6\u6001\u662f\u5426\u53d1\u751f\u4e86\u53d8\u5316\uff0c\u6709\u53d8\u5316\u7684\u8bdd\u90fd\u4f1a\u5bfc\u81f4forch rebuild metadata\u53d8\u5316\u4e5f\u9700\u8981\u5bfc\u81f4forch rebuild(config server\u6700\u597d\u76f4\u63a5\u544a\u77e5\u6211metadata\u53d1\u751f\u4e86\u53d8\u5316)\uff0c\u5e76\u66f4\u65b0host\u7684metadata \u4f18\u5148\u7ea7\u53d1\u751f\u4e86\u6539\u53d8\uff0c\u9700\u8981\u66f4\u65b0\u5bf9\u5e94\u673a\u5668\u7684\u4f18\u5148\u7ea7\uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u673a\u5668\u6dfb\u52a0\u5230\u5f53\u524d\u4f18\u5148\u7ea7\u7684\u5217\u8868\u4e2d \u5982\u679c\u4e0d\u662f\u539f\u5730\u66f4\u65b0 \u6dfb\u52a0host\u5230\u5f53\u524d\u4f18\u5148\u7ea7 \u5982\u679c\u5065\u5eb7\u68c0\u67e5\u5f00\u542f\u7684\u8bdd\uff0c\u5148\u8bbe\u7f6e\u8fd9\u4e2a\u673a\u5668\u4e3aFAILED_ACTIVE_AC \u7136\u540e\u770b\u662f\u5426\u662fwarmHosts\uff0c\u5982\u679c\u662f\u5c31\u8bbe\u7f6e\u4e3aPENDING_ACTIVE_HC \u4e00\u4e2a\u4e3b\u673a\u53d1\u751f\u53d8\u5316\u4e86\uff0c\u6709\u51e0\u79cd\u60c5\u51b5: \u65b0ip\u7684\u6dfb\u52a0 \u8001ip\u7684\u5220\u9664 \u673a\u623f\u3001\u5355\u5143\u7b49locality\u53d1\u751f\u4e86\u53d8\u5316 (\u8fd9\u4e2a\u4e0d\u8003\u8651\uff0c\u8fd9\u4e2a\u5982\u679c\u53d1\u751f\u4e86\u53d8\u5316\u4f1a\u4ea7\u751f\u6dfb\u52a0ip\u548c\u5220\u9664ip\u4e24\u4e2a\u4e8b\u4ef6) \u5065\u5eb7\u72b6\u6001\u53d1\u751f\u4e86\u53d8\u5316 \u4f18\u5148\u7ea7\u53d1\u751f\u4e86\u53d8\u5316 \u5143\u4fe1\u606f\u53d1\u751f\u4e86\u53d8\u5316 \u5065\u5eb7\u72b6\u6001\u3001\u4f18\u5148\u7ea7\u3001\u5143\u4fe1\u606f\u53d1\u751f\u53d8\u5316\u66f4\u65b0host\u5373\u53ef Config Server Cluster\u8ba1\u7b97\u903b\u8f91: \u6309\u7167\u4f18\u5148\u7ea7\u5c06added_host\u548cremoved_hosts\u4ee5\u4f18\u5148\u7ea7\u4e3a\u7eac\u5ea6\u5206\u6210\u4e00\u4e2a\u4e2ahost vector \u53d6\u51fa\u4e00\u4e2a\u4f18\u5148\u7ea7\u5f80all_host_\u4e2d\u67e5\u627e\u5982\u679c\u662f\u65b0\u6dfb\u52a0\u7684\u5c31\u653e\u5230hosts_added_to_current_priority\u4e2d(\u5e76\u6267\u884chealthy check\u76f8\u5173\u7684flag\u8bbe\u7f6e) \u5982\u679c\u4e0d\u662f\u65b0\u7684host\u90a3\u5c31\u770b\u662f\u5426\u505a\u539f\u5730\u66f4\u65b0\uff0c\u5982\u679c\u662f\u539f\u5730\u66f4\u65b0\u5c31\u76f4\u63a5\u66f4\u65b0\u5c31\u597d\u4e86\uff0c\u5426\u5219\u5c31\u628a\u8fd9\u4e2a\u673a\u5668\u653e\u5230hosts_added_to_current_priority\u4e2d \u5982\u679c\u53d1\u751f\u4e86\u4f18\u5148\u7ea7\u6539\u53d8\uff0c\u90a3\u4e48\u4e0d\u5149\u5149\u8981\u66f4\u65b0\u673a\u5668\u7684\u4f18\u5148\u7ea7\u8fd8\u9700\u8981\u5c06\u8fd9\u4e2a\u673a\u5668\u6dfb\u52a0\u5230hosts_added_to_current_priority\u5217\u8868\u4e2d\uff0c\u7136\u540e\u5bf9\u5e94\u7684\u8981\u4ece \u8fd9\u4e2a\u673a\u5668\u539f\u6765\u6240\u5728\u4f18\u5148\u7ea7\u4e2d\u8fdb\u884c\u5220\u9664\u3002(\u8fd9\u4e2a\u6211\u4eec\u5360\u65f6\u4e0d\u5904\u7406\uff0c\u5bf9\u4e8e\u589e\u91cf\u7684\u573a\u666f\uff0c\u53ef\u4ee5\u7b80\u5355\u7684\u5c06\u4fee\u6539\u524d\u7684\u4f18\u5148\u7ea7\u7684\u673a\u5668\u653e\u5230removed\u5217\u8868\u4e2d) \u66f4\u65b0host_change\uff0c\u5982\u679c\u90fd\u662f\u539f\u5730\u66f4\u65b0\uff0c\u90a3\u4e48\u5f88\u81ea\u7136host_change\u4e3afalse\u3001\u4f18\u5148\u7ea7\u53d1\u751f\u53d8\u5316\u4e86\u4e5f\u662f\u4e3atrue\u3001metadata\u53d8\u5316\u4e86\u4e5f\u662ftrue \u9700\u8981\u5c06\u6240\u6709host_change\u4e3atrue\u7684\u573a\u666f\u68b3\u7406\u51fa\u6765\uff0c\u7528\u4e8erebuild lb\u3002 \u62ff\u5230\u5f53\u524d\u4f18\u5148\u7ea7\u7684host\uff0c\u5c06hosts_added_to_current_priority\u8ffd\u52a0\u5230\u5f53\u524d\u4f18\u5148\u7ea7\u7684\u5217\u8868\u4e2d\uff0c\u53e6\u5916\u9700\u8981\u8003\u8651\u4e00\u4e2a\u7279\u6b8a\u7684case: host\u662f\u5b58\u5728\u7684\uff0c\u4f46\u662f\u5065\u5eb7\u68c0\u67e5\u5730\u5740\u53d1\u751f\u4e86\u6539\u53d8\uff0c\u90a3\u4e48\u8fd9\u4e2a\u673a\u5668\u9700\u8981\u5bf9\u5f53\u524d\u4f18\u5148\u7ea7\u7684host\u505a\u66ff\u6362\u800c\u4e0d\u662f\u8ffd\u52a0\u4e86\u3002 \u8c03\u7528updateClusterPrioritySet\u8fdb\u884c\u66f4\u65b0\u3002 \u5982\u679clocality weight\u53d1\u751f\u4e86\u6539\u53d8\u5c31\u8bbe\u7f6ehost_change\u4e3atrue updateClusterPrioritySet\u4ecd\u7136\u662f\u5168\u91cfhost\u8fdb\u884c\u8ba1\u7b97(\u8ba1\u7b97\u51faper locality\u7684\u7ed3\u6784)\uff0c\u80fd\u5426\u518d\u5ea6\u4f18\u5316? TODO LocalityWeightMap\u53d1\u751f\u6539\u53d8\u9700\u8981rebuild\uff0c\u8fd9\u4e2a\u5982\u4f55\u8bc6\u522b\u51fa\u6765? Config Server SDK\u5bf9\u4e8elocality weight\u7684\u53d8\u5316\u5355\u72ec\u901a\u77e5\uff0c\u7136\u540e\u6211\u6765\u66f4\u65b0PriorityState\u7ed3\u6784 1 2 3 4 5 6 ClusterLoadAssignment.Policy { \"drop_overloads\" : [] , \"overprovisioning_factor\" : \"{...}\" , \"endpoint_stale_after\" : \"{...}\" } overprovisioning_factor\u4e00\u4e2a\u8fc7\u5ea6\u914d\u7f6e\u7684\u56e0\u5b50\uff0c\u9ed8\u8ba4\u662f140\uff0c\u5f53\u4e00\u4e2apriority\u6216\u8005\u4e00\u4e2alocality\u4e2d\u7684\u5065\u5eb7\u4e3b\u673a\u767e\u5206\u6bd4\u4e58\u4ee5\u8fd9\u4e2a\u56e0\u5b50\u5c0f\u4e8e100\uff0c\u90a3\u4e48\u5c31\u8ba4\u4e3a\u8fd9\u4e2apriority\u6216\u8005locality\u662f\u4e0d\u5065\u5eb7\u7684\u3002 Degraded endpoints Envoy\u652f\u6301\u5c06\u67d0\u4e9bendpoint\u6807\u8bb0\u4e3adegraded\u7684\uff0c\u8fd9\u79cd\u7c7b\u578b\u7684endpoint\u53ef\u4ee5\u63a5\u6536\u6d41\u91cf\uff0c\u4f46\u662f\u53ea\u6709\u5728\u6ca1\u6709\u8db3\u591f\u7684\u5065\u5eb7\u673a\u5668\u7684\u65f6\u5019\u624d\u4f1a\u63a5\u6536\u6d41\u91cf\u6765\u5904\u7406 \u4e0a\u6e38\u4e3b\u673a\u901a\u8fc7\u5728\u8fd4\u56de\u7684header\u4e2d\u6dfb\u52a0 x-envoy-degraded \u5934\u6765\u8868\u660e\u5f53\u524d\u7684\u5065\u5eb7\u68c0\u67e5\u7684\u4e3b\u673a\u662fdegraded\u3002 Priority levels \u5f53\u67d0\u4e00\u4e2aPriority\u662f\u5065\u5eb7\u7684\uff0c\u90a3\u4e48\u4f1a\u63a5\u6536\u5168\u90e8\u6d41\u91cf\uff0c\u4f46\u662f\u5982\u679c\u53d1\u73b0\u6d41\u8fd9\u4e2aPriority\u662f\u4e0d\u5065\u5eb7\u7684\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u6309\u7167100%\u6bd4\u5c06\u6d41\u91cf\u6253\u5230\u4e0b\u4e00\u4e2a\u4f18\u5148\u7ea7\u3002 \u6bd4\u5982\u5065\u5eb7\u7a0b\u5ea6\u662f71%\uff0c\u90a3\u4e480.71 * 140\u7ea6\u7b49\u4e8e99%\uff0c\u90a3\u4e48\u8fd9\u4e2aPriorit\u5c31\u63a5\u653699%\u7684\u6d41\u91cf\uff0c\u5269\u4e0b\u76841%\u6d41\u91cf\u5c31\u53d1\u9001\u5230\u4e0b\u4e00\u4e2aPriority\u3002\u5982\u679c\u6240\u6709\u7684Priority\u52a0\u8d77\u6765\u7684\u5065\u5eb7\u7a0b\u5ea6\u4e0d\u6ee1\u8db3100%\uff0c\u8fd8\u9700\u8981 \u5c06\u6d41\u91cf\u6309\u6bd4\u4f8b\u7f29\u653e\u3002\u6bd4\u5982\u6709\u4e24\u4e2aPriority\uff0c\u7b2c\u4e00\u4e2aPriority\u7684\u5065\u5eb7\u7a0b\u5ea6\u662f20%\uff0c\u7b2c\u4e8c\u4e2a\u662f30%\uff0c\u603b\u7684\u5065\u5eb7\u7a0b\u5ea6\u53ea\u670950%\uff0c\u90a3\u4e48\u6d41\u91cf\u5c31\u4f1a\u5f80\u7b2c\u4e00\u4e2aPriority\u625340\uff0c\u7b2c\u4e8c\u4e2aPriority\u625360%\uff0c\u800c\u4e0d\u662f 0.2 * 140\u7684\u6d41\u91cf\u6253\u5230\u7b2c\u4e00\u4e2aPriority\u4e86\u3002 Panic threshold \u6b63\u5e38\u60c5\u51b5\u4e0bEnvoy\u505a\u8d1f\u8f7d\u5747\u8861\u7684\u65f6\u5019\uff0c\u4f1a\u8003\u8651\u5230healthy\u548cdegraded\u7684\u673a\u5668\u6240\u5360\u7684\u6bd4\u4f8b\u3002\u4f46\u662f\u5982\u679c\u8fd9\u4e2a\u6bd4\u4f8b\u592a\u4f4e\u7684\u60c5\u51b5\u4e0b\uff0cEnvoy\u5219\u4e0d\u8003\u8651\u5065\u5eb7\u72b6\u51b5\u4f1a\u5728\u6240\u6709\u7684\u673a\u5668\u4e0a\u8fdb\u884cbalancer\uff0c\u800c\u8fd9\u4e2a\u88ab\u79f0\u4e3apanic\uff0c \u8fd9\u4e2a\u6bd4\u4f8b\u662fpanic\u9600\u503c\uff0c\u9ed8\u8ba4\u662f50%\u3002\u5982\u679chost\u7684\u5065\u5eb7\u7a0b\u5ea6\u4f4e\u4e8e72%\u5c31\u4f1a\u5c06\u6d41\u91cf\u6253\u5411\u4f4e\u4e00\u7ea7\u7684Priority\uff0c\u5982\u679c\u6240\u6709\u7684Priority\u7684\u5065\u5eb7\u7a0b\u5e8f\u7a0b\u5ea6\u6bd4\u4f8b\u52a0\u8d77\u6765\u5c11\u4e8e100%\uff0c\u90a3\u4e48\u54ea\u4e2a\u4f18\u5148\u7ea7\u4f4e\u4e8e50%\uff0c\u90a3\u4e48\u8fd9\u4e2a\u4f18\u5148\u7ea7 \u5c31\u5904\u4e8epanic\u6a21\u5f0f\uff0c\u6d41\u91cf\u662f\u53d1\u5230\u8fd9\u4e2aPriority\u4e0b\u6240\u6709\u7684\u673a\u5668\u3002\u5982\u679c\u6240\u6709\u7684Priority\u7684\u5065\u5eb7\u7a0b\u5e8f\u7a0b\u5ea6\u6bd4\u4f8b\u52a0\u8d77\u6765\u7b49\u4e8e\u6216\u5927\u4e8e100%\u5c31\u90fd\u4e0d\u4f1a\u51fa\u73b0panic\u6a21\u5f0f\uff0c\u5373\u4f7f\u67d0\u4e9bPriority\u7684\u5065\u5eb7\u7a0b\u5ea6\u662f\u5c0f\u4e8e50%\u7684\u3002 Zone aware routing \u8981\u6c42\u59cb\u53d1\u96c6\u7fa4\u548cupstream\u96c6\u7fa4\u4e0d\u662fpanic mode Zone aware routing\u662f\u5f00\u542f\u7684(\u914d\u7f6e\u4e2d\u7684 routing_enabled \u5b57\u6bb5\u8868\u793a\u8fdb\u884czone aware\u7684\u8bf7\u6c42\u767e\u5206\u767e\uff0c\u9ed8\u8ba4\u662f100%) \u59cb\u53d1\u96c6\u7fa4\u548cupstream\u96c6\u7fa4\u6709\u76f8\u540c\u7684zone\u6570\u91cf upstream\u96c6\u7fa4\u6709\u8db3\u591f\u7684\u673a\u5668( min_cluster_size zone aware\u96c6\u7fa4\u7684\u6700\u5c0f\u5927\u5c0f) \u5982\u679c\u59cb\u53d1\u96c6\u7fa4\u4e2d\u7684\u672c\u5730zone\u5360\u6bd4\u8981\u6bd4upstream\u96c6\u7fa4\u4e2d\u7684\u672c\u5730zone\u5360\u6bd4\u9ad8\u7684\u8bdd\uff0c\u90a3\u4e48Envoy\u4f1a\u6309\u7167\u672c\u5730zone\u6240\u5728\u5360\u6bd4\u4f8b\u53ea\u8f6c\u53d1\u90e8\u5206\u6d41\u91cf\u5230upstream\u96c6\u7fa4\u4e2d\uff0c\u5269\u4f59\u7684\u6d41\u91cf\u8fdb\u884c\u8de8\u533a\u57df\u8f6c\u53d1 \u5982\u679c\u59cb\u53d1\u96c6\u7fa4\u4e2d\u7684\u672c\u5730zone\u5360\u6bd4\u8981\u6bd4upstream\u96c6\u7fa4\u4e2d\u7684\u672c\u5730zone\u5360\u6bd4\u5c0f\u7684\u8bdd\uff0c\u6240\u6709\u7684\u6d41\u91cf\u90fd\u4f1a\u76f4\u63a5\u6253\u5230upstream\u4e2d\u7684\u672c\u5730zone \u9700\u8981\u5b9a\u4e00\u4e2a\u4e00\u4e2a\u672c\u5730\u96c6\u7fa4\uff0c\u8fd9\u4e2a\u96c6\u7fa4\u5c31\u662fEnvoy\u7f51\u683c\u7ec4\u6210\u7684\u96c6\u7fa4 1 2 cluster_manager : local_cluster_name : \"local_cluster_name\" 1 2 3 4 { \"routing_enabled\" : \"{...}\" , \"min_cluster_size\" : \"{...}\" } Load Ststs reporter 1 2 3 4 5 6 7 config.bootstrap.v2.ClusterManager : { \"local_cluster_name\" : \"...\" , \"outlier_detection\" : \"{...}\" , \"upstream_bind_config\" : \"{...}\" , \"load_stats_config\" : \"{...}\" } load_stats_config \u7528\u4e8e\u914d\u7f6e\u7ba1\u7406\u96c6\u7fa4\uff0c\u542f\u52a8\u7684\u65f6\u5019\uff0c\u4f1a\u7b49\u5f85\u7ba1\u7406\u5e73\u9762\u53d1\u9001LoadStatsResponse\uff0c\u54cd\u5e94\u4e2d\u5e26\u6709\u9700\u8981\u83b7\u53d6stats\u7684\u96c6\u7fa4\u540d\u8bcd\u5217\u8868\uff0cEnvoy\u4f1a\u5b9a\u65f6\u5c06\u8fd9\u4e9b\u96c6\u7fa4\u7684stats\u4fe1\u606f\u53d1\u9001\u5230\u63a7\u5236\u5e73\u9762\u3002 IP Transparency \u5c06Downstream\u7684remote address\u4f20\u9012\u5230upstream HTTP Headers \u901a\u8fc7x-forwarded-for\u5934\uff0c\u4ec5\u652f\u6301HTTP\u534f\u8bae Proxy Protocol TCP\u5efa\u7acb\u8fde\u63a5\u7684\u65f6\u5019\uff0c\u5c06\u6e90\u5730\u5740\u4fe1\u606f\u4f20\u9012\u8fc7\u6765\uff0c\u9700\u8981upstream\u7684\u4e3b\u673a\u652f\u6301 Original Source Listener Filter Envoy\u901a\u8fc7socket\u53ef\u4ee5\u62ff\u5230\u8fdc\u7a0b\u7684\u5730\u5740\u4e5f\u53ef\u4ee5\u501f\u52a9Proxy Protocol\u62ff\u5230downstream\u7684\u5730\u5740\u4fe1\u606f\u3001\u7136\u540e\u628a\u5730\u5740\u4fe1\u606f\u8bbe\u7f6e\u5230upstream\u7684socket\u4e2d\uff0cupstream\u5728\u8fd4\u56de\u7684\u65f6\u5019 \u9700\u8981\u5c06\u5176\u6d41\u91cf\u6307\u5411envoy\uff0c\u8fd9\u91cc\u9700\u8981\u8ba9Envoy\u548cupstream\u90e8\u7f72\u5728\u4e00\u8d77\uff0c\u7136\u540e\u4f7f\u7528iptables\u6765\u5b8c\u6210\u3002 TODO(tianqian.zyf): \u4f8b\u5b50 istio-iptables.sh \u5206\u6790 -p \u6307\u5b9aenvoy\u7684\u7aef\u53e3\uff0c\u9ed8\u8ba4\u662f15001\uff0c\u6307\u7684\u662f\u62e6\u622a\u5230\u7684\u6d41\u91cf\u5c06\u5bfc\u5165\u5230\u54ea\u4e2a\u7aef\u53e3\uff0c\u9ed8\u8ba4\u662f15001 -u \u6307\u5b9aUID\uff0cEffective UID\u7b49\u4e8e\u6307\u5b9a\u7684\u8fd9\u4e2aUID\u7684\u7a0b\u5e8f\u6d41\u91cf\u4e0d\u88ab\u62e6\u622a\uff0c\u9ed8\u8ba4\u662f1337 -g \u6307\u5b9aGID\uff0cEffective GID\u7b49\u4e8e\u6307\u5b9a\u7684\u8fd9\u4e2aGID\u7684\u7a0b\u5e8f\u6d41\u91cf\u4e0d\u88ab\u62e6\u622a\uff0c\u9ed8\u8ba4\u662f1337 -m \u6307\u5b9a\u6d41\u91cf\u62e6\u622a\u7684\u6a21\u5f0f\uff0cREDIRECT\u8fd8\u662fTPROXY -b \u6307\u5b9a\u54ea\u4e9binbound\u7684\u7aef\u53e3\u88ab\u91cd\u5b9a\u5411\u5230Envoy\u4e2d\uff0c\u591a\u4e2a\u7aef\u53e3\u6309\u7167\u9017\u53f7\u5206\u5272\uff0c\u9ed8\u8ba4\u662f\u6240\u6709\u7684\u6d41\u91cf\u3002 -d \u6392\u9664\u54ea\u4e9binbound\u7aef\u53e3\u4e0d\u8fdb\u884c\u6d41\u91cf\u7684\u91cd\u5b9a\u5411 -i \u6307\u5b9aIP CIDR\u8fdb\u884coutbound\u7684\u6d41\u91cf\u91cd\u5b9a\u5411 -x \u6392\u67e5\u54ea\u4e9bIP\u4e0d\u8fdb\u884coutbound\u7684\u6d41\u91cf\u91cd\u5b9a\u5411 -k \u4ece\u54ea\u4e2a\u865a\u62df\u53e3\u51fa\u53bb\u7684\u6d41\u91cf\u88ab\u8ba4\u4e3a\u662foutbound \u547d\u4ee4\u884c\u53c2\u6570 --allow-unknown-fields \u5173\u95edprotobuf\u9a8c\u8bc1\uff0c\u5ffd\u7565\u65b0\u589e\u5b57\u6bb5\uff0c\u6838\u5fc3\u5b9e\u73b0\u5c31\u662f message.GetReflection()->GetUnknownFields 1 2 3 4 5 6 7 8 9 10 11 12 13 allow_unknown_fields_ = allow_unknown_fields . getValue (); if ( allow_unknown_fields_ ) { MessageUtil :: proto_unknown_fields = ProtoUnknownFieldsMode :: Allow ; } // \u6838\u5fc3\u5b9e\u73b0 static void checkUnknownFields ( const Protobuf :: Message & message ) { if ( MessageUtil :: proto_unknown_fields == ProtoUnknownFieldsMode :: Strict && ! message . GetReflection () -> GetUnknownFields ( message ). empty ()) { throw EnvoyException ( \"Protobuf message (type \" + message . GetTypeName () + \") has unknown fields\" ); } } --enable-mutex-tracing \u4e3b\u8981\u662f\u5229\u7528\u4e86absl\u5e93\u63d0\u4f9b\u7684 RegisterMutexTracer \uff0c\u5c06tracer\u4fe1\u606f\u901a\u8fc7callback\u7684\u65b9\u5f0f\u66b4\u9732\u51fa\u6765 1 2 3 4 5 6 7 8 9 10 MutexTracerImpl & MutexTracerImpl::getOrCreateTracer () { if ( singleton_ == nullptr ) { singleton_ = new MutexTracerImpl ; // There's no easy way to unregister a hook. Luckily, this hook is innocuous enough that it // seems safe to leave it registered during testing, even though this technically breaks // hermeticity. absl :: RegisterMutexTracer ( & Envoy :: MutexTracerImpl :: contentionHook ); } return * singleton_ ; } --drain-time-s 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 // \u8fde\u63a5\u4e2d\u6709\u6d41\u91cf\u7684\u65f6\u5019\u624d\u4f1a\u5b9e\u9645\u8d70\u5230\u8fd9\u6bb5\u4ee3\u7801\uff0c\u7136\u540e\u8fdb\u884cDrain\u5904\u7406 void ConnectionManagerImpl::ActiveStream::encodeHeaders ( ActiveStreamEncoderFilter * filter , HeaderMap & headers , bool end_stream ) { ..... // See if we want to drain/close the connection. Send the go away frame prior to encoding the // header block. if ( connection_manager_ . drain_state_ == DrainState :: NotDraining && connection_manager_ . drain_close_ . drainClose ()) { // This doesn't really do anything for HTTP/1.1 other then give the connection another boost // of time to race with incoming requests. It mainly just keeps the logic the same between // HTTP/1.1 and HTTP/2. connection_manager_ . startDrainSequence (); connection_manager_ . stats_ . named_ . downstream_cx_drain_close_ . inc (); ENVOY_STREAM_LOG ( debug , \"drain closing connection\" , * this ); } ....... } void ConnectionManagerImpl::startDrainSequence () { ASSERT ( drain_state_ == DrainState :: NotDraining ); drain_state_ = DrainState :: Draining ; codec_ -> shutdownNotice (); drain_timer_ = read_callbacks_ -> connection (). dispatcher (). createTimer ( [ this ]() -> void { onDrainTimeout (); }); drain_timer_ -> enableTimer ( config_ . drainTimeout ()); } // Drain \u8d85\u65f6\u65f6\u95f4\uff0c\u9ed8\u8ba4\u662f5000ms\uff0c\u5982\u679c\u662fhttp2\u7684\u534f\u8bae\u4f1a\u5148\u53d1\u4e00\u4e2agoAway\u534f\u8bae\u5e27\uff0c\u5982\u679c\u662fhttp\u534f\u8bae\u5c31\u4ec0\u4e48\u90fd\u4e0d\u505a void ConnectionManagerImpl::onDrainTimeout () { ASSERT ( drain_state_ != DrainState :: NotDraining ); codec_ -> goAway (); drain_state_ = DrainState :: Closing ; checkForDeferredClose (); } // \u6700\u540e\u4f1a\u8c03\u7528close void ConnectionManagerImpl::checkForDeferredClose () { if ( drain_state_ == DrainState :: Closing && streams_ . empty () && ! codec_ -> wantsToWrite ()) { read_callbacks_ -> connection (). close ( Network :: ConnectionCloseType :: FlushWriteAndDelay ); } } --file-flush-interval-msec access log\u6587\u4ef6\u7684\u5237\u76d8\u95f4\u9694 xDS resource patching \u76ee\u524dendpoint\u6574\u4f53\u662f\u4e00\u4e2aresource\uff0cxDS\u7684\u589e\u91cf\u53ea\u80fd\u662fresource\u7c92\u5ea6\u7684\u589e\u52a0\u548c\u51cf\u5c11\uff0c\u5bf9\u4e8eendpoint\u6765\u8bf4\uff0c\u4ed6\u6574\u4f53\u5c31\u662f\u4e00\u4e2aresource\uff0c\u505a\u4e0d\u4e86\u589e\u91cf\u7684\u52a0\u548c\u51cf\u5c11\uff0c\u56e0\u6b64\u793e\u533a\u63d0\u51fa\u4e86xDS resource patching\u7684\u673a\u5236 \u53ef\u4ee5\u9488\u5bf9\u4e00\u4e2aresource\u5185\u90e8\u505amerge\u3001add\u3001remove\u3001modtify\u7b49\u64cd\u4f5c\uff0c\u76ee\u524d\u8fd8\u5728review\u4e2d\u3002 https://github.com/envoyproxy/envoy/issues/8400 rebalance \u7528\u4e8e\u5728\u591a\u4e2aworker\u7ebf\u7a0b\u4e4b\u95f4\u5e73\u8861\u8fde\u63a5\u6570\uff0c\u76ee\u524d\u4f7f\u7528\u7684epoll\u7684\u65b9\u5f0f\u5185\u6838\u7684\u5206\u914d\u7b56\u7565\u662fLIFO\uff0c\u4f1a\u5bfc\u81f4\u8fde\u63a5\u4f1a\u5206\u914d\u5230\u56fa\u5b9a\u7684\u524d\u51e0\u4e2aworker\u7ebf\u7a0b\u4e2d\uff0c\u8fd9\u4e2a\u5728\u5927\u591a\u6570\u60c5\u51b5\u662fOK\u7684\uff0c\u4f46\u662f\u5bf9\u4e8eenvoy egress http2 \u8fd9\u79cd\u5c11\u91cf\u957f\u8fde\u63a5\u7684\u573a\u666f\u6765\u8bf4\u5e76\u4e0d\u662f\u592a\u9002\u5408\uff0c\u8fd9\u79cd\u573a\u666f\u8fde\u63a5\u6570\u5e76\u4e0d\u591a\uff0c\u4f46\u662f\u8fde\u63a5\u4e0a\u7684\u8d1f\u8f7d\u5f88\u5927\u3002 https://github.com/envoyproxy/envoy/pull/8422 https://blog.cloudflare.com/the-sad-state-of-linux-socket-balancing/ HTTP dynamic forward proxy \u76ee\u524dEnvoy\u662f\u652f\u6301dynamic forward(istio\u4f7f\u7528\u8fd9\u4e2a\u80fd\u529b\u505aegress)\uff0c\u8fd9\u662f\u901a\u8fc7iptables\u6765\u5b9e\u73b0\u7684\uff0c\u901a\u8fc7iptables\u4fdd\u7559\u5b9e\u9645\u8981\u8bbf\u95ee\u7684\u771f\u5b9eip(\u4e5f\u53ef\u4ee5\u662f\u901a\u8fc7http\u7684header x-envoy-original-dst-host \u6765\u4f20\u9012)\uff0c\u7136\u540e\u901a\u8fc7\u8fd9\u4e2aip\u52a8\u6001\u6dfb\u52a0\u5230cluster\u4e2d\uff0c\u4f46\u8fd9\u4e2a\u65b9\u6848\u5e76\u4e0d\u901a\u7528\u4f9d\u8d56iptables\uff0cHTTP dynamic forward proxy\u5219\u662f\u4f7f\u7528http host header\u8fdb\u884c\u52a8\u6001dns\u89e3\u6790\uff0c\u7136\u540e\u901a\u8fc7\u65b0\u589e\u7684cluster type(dynamic_forward_proxy)\u6765\u5b9e\u73b0\u5c06\u52a8\u6001\u89e3\u6790\u7684DNS\u7ed3\u679c\u653e\u5230\u96c6\u7fa4\u4e2d\u5e76\u628a\u89e3\u6790\u7ed3\u679c\u7f13\u5b58\u8d77\u6765\uff0c\u5f53\u7b2c\u4e00\u6b21\u8bf7\u6c42\u7684\u65f6\u5019\u6ca1\u6709\u5bf9\u5e94\u7684DNS\u89e3\u6790\u7ed3\u679c\u65f6\uff0c\u4f1a\u901a\u8fc7\u65b0\u589e\u7684http dynamic forward proxy filter\u4e2d\u65ad\u5f53\u524d\u7684\u8bf7\u6c42\uff0c\u7136\u540e\u5f02\u6b65\u8fdb\u884cDNS\u89e3\u6790\uff0c\u7b49\u89e3\u6790\u5b8c\u6210\u540e\u518d\u7ee7\u7eed\u8f6c\u53d1\u8bf7\u6c42\u3002\u540e\u7eed\u8bf7\u6c42\u8fdb\u6765\u7684\u65f6\u5019\uff0c\u76f4\u63a5\u4f7f\u7528DNS\u7684\u7f13\u5b58\u7ed3\u679c\u8fdb\u884c\u8bf7\u6c42\u8f6c\u53d1\u3002 https://github.com/envoyproxy/envoy/pull/7307 on-demand VHDS RouteConfiguration \u4e0b\u9762\u5305\u542b\u4e86 route.VirtualHost \uff0c route.VirtualHost \u91cc\u9762\u518d\u5305\u542bRoute\u548cAction\uff0cistio\u521b\u5efavirtual service\u7684\u65f6\u5019\uff0c\u4f1a\u5bfc\u81f4\u6574\u4e2a RouteConfiguration \u90fd\u53d1\u751f\u66f4\u65b0\uff0c\u5b9e\u9645\u53ea\u662f\u65b0\u589e\u4e00\u4e2a VirtualHost \u6216\u8005\uff0c\u662f\u66f4\u65b0\u4e00\u4e2a VirtualHost \u6761\u76ee\u3002\u901a\u8fc7VHDS\u53ef\u4ee5\u5c06 RouteConfiguration \u548c VirtualHost \u89e3\u8026\u3002\u7ed3\u5408\u5dee\u91cf\u66f4\u65b0\u8fd8\u53ef\u4ee5\u505a\u5230\u6309\u9700\u66f4\u65b0\u3002\u6b64\u5916\u8fd9\u91cc\u7684on-demand\u6307\u7684\u662f\u5f53\u53d1\u8d77\u8bf7\u6c42\u7684\u65f6\u5019\uff0c\u4f1a\u901a\u8fc7on-demand filter\u53bb\u670d\u52a1\u7aef\u67e5\u8be2\u5bf9\u5e94\u7684\u8def\u7531\u6761\u76ee\uff0c\u7136\u540e\u5408\u5e76\u5230 RouteConfiguration \u4e2d\uff0c\u800c\u4e0d\u662f\u4e00\u6b21\u6027\u5168\u4e0b\u53d1\u4e0b\u6765\u3002 https://github.com/envoyproxy/envoy/pull/8617 stats symbol\u4f18\u5316 \u5f15\u5165symbol tables\uff0c\u5c06\u4e00\u4e2ametrics\u6309\u7167\".\"\u53f7\u5206\u5272\u6210\u591a\u4e2a\u90e8\u5206\uff0c\u6bcf\u4e00\u4e2a\u90e8\u5206\u8fdb\u884c\u7f16\u7801\u5b58\u5728symbol table\u4e2d\uff0c\u5e76\u5206\u914d\u4e00\u4e2asymbol id\uff0c\u91cd\u590d\u5f15\u7528\u76f8\u540c\u7684\u90e8\u5206\u4ec5\u9700\u8981\u4fdd\u5b58symbol id\uff0c\u901a\u8fc7\u8fd9\u4e2aid\u6765\u627e\u5230\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u3002 https://github.com/envoyproxy/envoy/pull/5321 wasm \u76ee\u524dwasm\u4e3b\u8981\u662fgoogle\u7684\u4eba\u5728\u4e3b\u5bfc\uff0c\u6709\u4e00\u4e2a\u72ec\u7acb\u7684\u4ed3\u5e93envoy-wasm\uff0c\u76ee\u524distio\u5df2\u7ecf\u5728\u4f7f\u7528\u8fd9\u4e2a\u4ed3\u5e93\u505a\u4e00\u4e9b\u5b9e\u9a8c\u6027\u7684\u529f\u80fd\uff0c\u5c06mixer\u7684\u90e8\u5206\u80fd\u529b\u901a\u8fc7wasm\u7684\u65b9\u5f0f\u6765\u63d0\u4f9b\uff0c\u4e0e\u6b64\u540c\u65f6wasm\u7684\u4ee3\u7801\u4e5f\u5728\u540c\u6b65\u63d0\u4ea4\u5230 Envoy\u5b98\u65b9\u793e\u533a\uff0c\u4e00\u65e6\u5168\u90e8\u5408\u5e76\u8fdb\u53bb\uff0cistio\u4f1a\u5c06\u4ed3\u5e93\u91cd\u65b0\u6307\u5411envoy\u5b98\u65b9\u6602\u54ed\u3002 https://github.com/envoyproxy/envoy/pulls?utf8=%E2%9C%93&q=wasm https://istio.io/docs/ops/telemetry/in-proxy-service-telemetry/ adaptive concurrency \u53c2\u8003Netflix\u2019s concurrency limits Java library.\u7684\u7b97\u6cd5\u5b9e\u73b0\u4e86\u4e00\u4e2a\u4e03\u5c42\u7684http filter\uff0c\u7528\u6765\u505a\u81ea\u9002\u5e94\u7684\u5e76\u53d1\u9650\u6d41\u3002 https://github.com/envoyproxy/envoy/pull/8582 https://github.com/envoyproxy/envoy/issues/7789 https://github.com/Netflix/concurrency-limits The adaptive concurrency filter dynamically adjusts the allowed number of requests that can be outstanding (concurrency) to all hosts in a given cluster at any time. Concurrency values are calculated using latency sampling of completed requests and comparing the measured samples in a time window against the expected latency for hosts in the cluster. \u4e00\u4e2ahttp filter\uff0c\u7528\u4e8e\u52a8\u6001\u8c03\u6574\u5141\u8bb8\u53d1\u51fa\u53bb\u7684\u8bf7\u6c42\uff0c\u5e76\u53d1\u5ea6\u901a\u8fc7\u5bf9\u5df2\u5b8c\u6210\u8bf7\u6c42\u7684\u5ef6\u8fdf\u91c7\u6837\u548c\u4e00\u4e2a\u65f6\u95f4\u7a97\u53e3\u4e2d\u6d4b\u91cf\u7684\u6837\u672c\u8fdb\u884c\u6bd4\u8f83\uff0c\u7fa4\u96c6\u4e2d\u4e3b\u673a\u7684\u9884\u671f\u5ef6\u8fdf\u3002 Gradient Controller: \u68af\u5ea6\u63a7\u5236\u5668\u6839\u636e\u5b9a\u671f\u6d4b\u91cf\u7684\u7406\u60f3round-trip\u65f6\u95f4 Concurrency Controllers: \u5b9e\u73b0\u4e86\u4e00\u4e2a\u7b97\u6cd5\uff0c\u7528\u4e8e\u5bf9\u6bcf\u4e00\u4e2a\u8bf7\u6c42\u8d1f\u8d23\u8f6c\u53d1\u7684\u51b3\u7b56\uff0c\u5e76\u8bb0\u5f55\u5ef6\u8fdf\u7528\u6765\u8ba1\u7b97\u5e76\u53d1\u9650\u5236 Grpc & xDS \u4ece\u6700\u4e0a\u5c42\u5f00\u59cb\u5206\u6790(\u4ee5cds\u4e3a\u4f8b): cds_api\u521b\u5efa\u8ba2\u9605\u5668 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class CdsApiImpl : public CdsApi , Config :: SubscriptionCallbacks , Logger :: Loggable < Logger :: Id :: upstream > { private : std :: unique_ptr < Config :: Subscription > subscription_ ; } CdsApiImpl :: CdsApiImpl ( const envoy :: config :: core :: v3alpha :: ConfigSource & cds_config , ClusterManager & cm , Stats :: Scope & scope , ProtobufMessage :: ValidationVisitor & validation_visitor ) : cm_ ( cm ), scope_ ( scope . createScope ( \"cluster_manager.cds.\" )), validation_visitor_ ( validation_visitor ) { // \u901a\u8fc7SubscriptionFactory\u6765\u521b\u5efa\u7684 subscription_ = cm_ . subscriptionFactory (). subscriptionFromConfigSource ( cds_config , loadTypeUrl ( cds_config . resource_api_version ()), * scope_ , * this ); } \u8fd4\u56de\u7684\u662f\u4e00\u4e2a Subscription \uff0cCDS\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2a\u63a5\u53e3\u8bbe\u7f6e\u548c\u66f4\u65b0\u8981\u8ba2\u9605\u7684\u8d44\u6e90\u540d 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Subscription { public : virtual ~ Subscription () = default ; /** * Start a configuration subscription asynchronously. This should be called once and will continue * to fetch throughout the lifetime of the Subscription object. * @param resources set of resource names to fetch. */ virtual void start ( const std :: set < std :: string >& resource_names ) PURE ; /** * Update the resources to fetch. * @param resources vector of resource names to fetch. It's a (not unordered_)set so that it can * be passed to std::set_difference, which must be given sorted collections. */ virtual void updateResourceInterest ( const std :: set < std :: string >& update_to_these_names ) PURE ; }; \u5b9e\u9645\u4e0a\u662f\u521b\u5efa\u4e86 GrpcMuxSubscriptionImpl \uff0c\u5e76\u5c06 CdsApiImpl \u4f20\u7ed9 GrpcMuxSubscriptionImpl \u901a\u8fc7 SubscriptionCallbacks \u5c06\u8ba2\u9605\u5230\u7684\u5185\u5bb9\u56de\u8c03\u7ed9 CdsApiImpl 1 2 3 4 5 6 7 8 9 10 11 12 case envoy :: config :: core :: v3alpha :: ConfigSource :: ConfigSourceSpecifierCase :: kAds : { if ( cm_ . adsMux () -> isDelta ()) { result = std :: make_unique < DeltaSubscriptionImpl > ( cm_ . adsMux (), type_url , callbacks , stats , Utility :: configSourceInitialFetchTimeout ( config ), true ); } else { result = std :: make_unique < GrpcMuxSubscriptionImpl > ( cm_ . adsMux (), callbacks , stats , type_url , dispatcher_ , Utility :: configSourceInitialFetchTimeout ( config )); } break ; } SubscriptionCallbacks\u7ee7\u627f\u4e86 SubscriptionCallbacks \u548c Subscription 1 2 3 4 5 6 7 8 class GrpcMuxSubscriptionImpl : public Subscription , GrpcMuxCallbacks , Logger :: Loggable < Logger :: Id :: config > { private : GrpcMuxSharedPtr grpc_mux_ ; SubscriptionCallbacks & callbacks_ ; GrpcMuxWatchPtr watch_ {}; } GrpcMuxCallbacks\u672c\u8d28\u4e0a\u548cSubscriptionCallbacks\u662f\u4e00\u6837\u7684\uff0c GrpcMuxSubscriptionImpl \u901a\u8fc7\u5e95\u5c42\u7684 GrpcMuxSharedPtr (\u5b83\u4f1a\u56de\u8c03GrpcMuxCallbacks\u628a\u6536\u5230\u7684\u5185\u5bb9\u8fd4\u56de\u7ed9GrpcMuxSubscriptionImpl) GrpcMuxSubscriptionImpl\u518d\u8c03\u7528 SubscriptionCallbacks \u628a\u6536\u5230\u7684\u5185\u5bb9\u900f\u4f20\u7ed9\u4e0a\u5c42\u7684CDS API\u3002 1 2 3 4 5 6 7 void GrpcMuxSubscriptionImpl::onConfigUpdate ( const Protobuf :: RepeatedPtrField < ProtobufWkt :: Any >& resources , const std :: string & version_info ) { ....... callbacks_ . onConfigUpdate ( resources , version_info ); ....... } \u63a5\u4e0b\u6765\u770b\u4e0b\u8fd9\u4e2a GrpcMuxWatchPtr watch_{}; \uff0c\u5b83\u662f\u901a\u8fc7 grpc_mux_ \u521b\u5efa\u7684\u3002\u53ef\u4ee5\u901a\u8fc7 GrpcMuxWatch \u6765\u53d6\u6d88\u8ba2\u9605\u3002 1 2 3 4 5 6 7 8 9 watch_ = grpc_mux_ -> subscribe ( type_url_ , resources , * this ); /** * Handle on an muxed gRPC subscription. The subscription is canceled on destruction. */ class GrpcMuxWatch { public : virtual ~ GrpcMuxWatch () = default ; }; \u6700\u540e\u5c31\u5269\u4e0b\u6700\u4e3a\u6838\u5fc3\u7684 grpc_mux_ \u4e86\uff0c\u5b83\u662f\u901a\u8fc7 cm_.adsMux() \u521b\u5efa\u51fa\u6765\u7684\u3002\u662fClusterManagerImpl\u7684\u6210\u5458\uff0c\u770b\u8d77\u6765\u662f\u6240\u6709\u4e0a\u5c42\u7684xDS\u8ba2\u9605\u662f\u590d\u7528\u540c\u4e00\u4e2a GrpcMuxSharedPtr \u4e86 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 class ClusterManagerImpl : public ClusterManager , Logger :: Loggable < Logger :: Id :: upstream > { public : Config :: GrpcMuxSharedPtr adsMux () override { return ads_mux_ ; } private : Config :: GrpcMuxSharedPtr ads_mux_ ; } ads_mux_ = std :: make_shared < Config :: GrpcMuxImpl > ( local_info , Config :: Utility :: factoryForGrpcApiConfigSource ( * async_client_manager_ , dyn_resources . ads_config (), stats ) -> create (), main_thread_dispatcher , * Protobuf :: DescriptorPool :: generated_pool () -> FindMethodByName ( dyn_resources . ads_config (). transport_api_version () == envoy :: config :: core :: v3alpha :: ApiVersion :: V3ALPHA ? \"envoy.service.discovery.v3alpha.AggregatedDiscoveryService.\" \"StreamAggregatedResources\" : \"envoy.service.discovery.v2.AggregatedDiscoveryService.\" \"StreamAggregatedResources\" ), random_ , stats_ , Envoy :: Config :: Utility :: parseRateLimitSettings ( dyn_resources . ads_config ()), bootstrap . dynamic_resources (). ads_config (). set_node_on_first_message_only ()); \u5176\u5b9e\u73b0\u5305\u542b\u4e86\u591a\u4e2a\uff0c\u53ef\u80fd\u662f\u589e\u91cf\u5b9e\u73b0NewGrpcMuxImpl\u3001\u4e5f\u6709\u53ef\u80fd\u662f\u5168\u91cf\u5b9e\u73b0GrpcMuxImpl\u3001\u6216\u8005\u662f\u7a7a\u5b9e\u73b0NullGrpcMuxImpl\uff0c\u6211\u4eec\u4e3b\u8981\u770b\u4e0b GrpcMuxImpl \u7684\u5b9e\u73b0 1 2 3 4 5 6 7 8 9 10 class GrpcMuxImpl : public GrpcMux , public GrpcStreamCallbacks < envoy :: service :: discovery :: v3alpha :: DiscoveryResponse > , public Logger :: Loggable < Logger :: Id :: config > { private : GrpcStream < envoy :: service :: discovery :: v3alpha :: DiscoveryRequest , envoy :: service :: discovery :: v3alpha :: DiscoveryResponse > grpc_stream_ ; } \u6838\u5fc3\u662fgrpc_stream_\uff0c\u901a\u8fc7GrpcStream\u53ef\u4ee5\u53d1\u9001\u3001\u5efa\u7acbstream\u6d41 GrpcStream Grpc\u4e2d\u7684\u4e00\u4e2a\u6d41\u662f\u5bf9 Grpc::AsyncStream \u7684\u5c01\u88c5\uff0c\u7ee7\u627f\u81ea Grpc::AsyncStreamCallbacks \uff0c\u63d0\u4f9b\u4e86\u4e00\u4e2a void onReceiveMessage(std::unique_ptr<ResponseProto>&& message) override \u63a5\u53e3 \u7528\u4e8e\u8fd4\u56de\u6536\u5230\u7684message\uff0c\u7ec4\u5408\u4e86 Grpc::AsyncClient \u7528\u6765\u521b\u5efa Grpc::AsyncStream \uff0c\u63d0\u4f9b\u4e86sendMessage\u6765\u53d1\u9001 stream \uff0c\u540c\u65f6\u4e5f\u63d0\u4f9b\u4e86 onReceiveMessage \uff0c\u5f53\u6536\u5230message\u540e\uff0c\u56de\u8c03 GrpcStreamCallbacks \u7684onDiscoveryResponse\u65b9\u6cd5 Grpc::AsyncStreamCallbacks \u63d0\u4f9b\u4e86 onReceiveMessage \u7684\u56de\u8c03\uff0c\u901a\u8fc7 Grpc::AsyncStream \u53d1\u51famessage\u540e\uff0c\u901a\u8fc7\u8fd9\u4e2acallback\u83b7\u5f97\u8fd4\u56de\u7684\u6d88\u606f Grpc::AsyncClient grpc Client \u6765\u521b\u5efa\u4e00\u4e2a Grpc::AsyncStream GrpcStreamCallbacks \uff0c\u63d0\u4f9b\u4e86\u51e0\u4e2a\u548cstream\u76f8\u5173\u7684callback 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 template < class ResponseProto > class GrpcStreamCallbacks { public : virtual ~ GrpcStreamCallbacks () = default ; /** * For the GrpcStream to prompt the context to take appropriate action in response to the * gRPC stream having been successfully established. */ virtual void onStreamEstablished () PURE ; /** * For the GrpcStream to prompt the context to take appropriate action in response to * failure to establish the gRPC stream. */ virtual void onEstablishmentFailure () PURE ; /** * For the GrpcStream to pass received protos to the context. */ virtual void onDiscoveryResponse ( std :: unique_ptr < ResponseProto >&& message ) PURE ; /** * For the GrpcStream to call when its rate limiting logic allows more requests to be sent. */ virtual void onWriteable () PURE ; }; GrpcSubscriptionImpl Config::Subscription \u6240\u6709\u8ba2\u9605\u7684\u62bd\u8c61\u63a5\u53e3\uff0c\u63d0\u4f9b\u4e86start\u548cupdateResourceInterest\u6765\u66f4\u65b0\u8d44\u6e90\u7684\u8ba2\u9605\uff0c\u76ee\u524d\u6709\u51e0\u4e2a\u5b9e\u73b0: GrpcSubscriptionImpl \u5bf9\u5e94xDS GrpcMuxSubscriptionImpl \u5bf9\u5e94ADS DeltaSubscriptionImpl \u589e\u91cfxDS GrpcMuxSubscriptionImpl \u589e\u91cfADS HttpSubscriptionImpl REST SubscriptionCallbacks \u63d0\u4f9b onConfigUpdate \u3001 onConfigUpdateFailed \u3001 resourceName \u7b49\u56de\u8c03\uff0c\u6bcf\u4e00\u4e2axDS\u7c7b\u578b\u90fd\u7ee7\u627f\u8fd9\u4e2acallback\u7528\u6765\u63a5\u6536\u914d\u7f6e\u66f4\u65b0\u7684\u901a\u77e5 GrpcMux \u7528\u6765\u7ba1\u7406\u5355\u4e2astream\u4e0a\u7684\u591a\u4e2a\u8ba2\u9605\u7684\uff0c\u5178\u578b\u7684\u5c31\u662fADS stream\u4e0a\u5904\u7406EDS\u3001CDS\u3001LDS\u7b49\u8ba2\u9605\uff0c\u4e3b\u8981\u662f\u63d0\u4f9b\u4e86start\u3001pause\u3001resume\u3001addOrUpdateWatch\u7b49\u7b49 GrpcMuxWatch GrpcMuxWatchImpl \u7ee7\u627f GrpcMuxWatch \u6bcf\u8ba2\u9605\u4e00\u6b21\u8d44\u6e90\u5c31\u521b\u5efa\u4e00\u4e2a GrpcMuxWatchImpl \uff0c\u6790\u6784\u7684\u65f6\u5019\u53ef\u4ee5\u7528\u6765\u8fdb\u884ccancel\u8d44\u6e90\u8ba2\u9605\u3002 GrpcMuxCallbacks \u6838\u5fc3\u7684ADS\u56de\u8c03\uff0c\u7528\u4e8e\u5bf9\u63a5\u6536\u5230\u7684xDS\u8d44\u6e90\u8fdb\u884c\u5bf9\u5e94\u7684\u56de\u8c03\uff0c\u6838\u5fc3\u63a5\u53e3\u662f: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 /** * A grouping of callbacks that a GrpcMux should provide to its GrpcStream. */ class GrpcMuxCallbacks { public : virtual ~ GrpcMuxCallbacks () = default ; /** * Called when a configuration update is received. * @param resources vector of fetched resources corresponding to the configuration update. * @param version_info update version. * @throw EnvoyException with reason if the configuration is rejected. Otherwise the configuration * is accepted. Accepted configurations have their version_info reflected in subsequent * requests. */ virtual void onConfigUpdate ( const Protobuf :: RepeatedPtrField < ProtobufWkt :: Any >& resources , const std :: string & version_info ) PURE ; /** * Called when either the subscription is unable to fetch a config update or when onConfigUpdate * invokes an exception. * @param reason supplies the update failure reason. * @param e supplies any exception data on why the fetch failed. May be nullptr. */ virtual void onConfigUpdateFailed ( Envoy :: Config :: ConfigUpdateFailureReason reason , const EnvoyException * e ) PURE ; /** * Obtain the \"name\" of a v2 API resource in a google.protobuf.Any, e.g. the route config name for * a RouteConfiguration, based on the underlying resource type. */ virtual std :: string resourceName ( const ProtobufWkt :: Any & resource ) PURE ; }; \u7b49\u4e8eSubscriptionCallbacks\uff0c\u4e24\u8005\u662f\u4e00\u81f4\u7684\uff0c\u542b\u4e49\u76f8\u540c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 class Subscription { public : virtual ~ Subscription () = default ; /** * Start a configuration subscription asynchronously. This should be called once and will continue * to fetch throughout the lifetime of the Subscription object. * @param resources set of resource names to fetch. */ virtual void start ( const std :: set < std :: string >& resource_names ) PURE ; /** * Update the resources to fetch. * @param resources vector of resource names to fetch. It's a (not unordered_)set so that it can * be passed to std::set_difference, which must be given sorted collections. */ virtual void updateResourceInterest ( const std :: set < std :: string >& update_to_these_names ) PURE ; }; class SubscriptionCallbacks { public : virtual ~ SubscriptionCallbacks () = default ; virtual void onConfigUpdate ( const Protobuf :: RepeatedPtrField < ProtobufWkt :: Any >& resources , const std :: string & version_info ) PURE ; virtual void onConfigUpdate ( const Protobuf :: RepeatedPtrField < envoy :: service :: discovery :: v3alpha :: Resource >& added_resources , const Protobuf :: RepeatedPtrField < std :: string >& removed_resources , const std :: string & system_version_info ) PURE ; virtual void onConfigUpdateFailed ( ConfigUpdateFailureReason reason , const EnvoyException * e ) PURE ; virtual std :: string resourceName ( const ProtobufWkt :: Any & resource ) PURE ; }; \u6240\u6709\u7684\u4e0a\u5c42API(LDS/CDS/EDS/..)\u7b49\u90fd\u7ee7\u627f\u4e86 SubscriptionCallbacks \u7528\u4e8e\u83b7\u53d6\u8ba2\u9605\u5230\u7684\u6570\u636e\u3002 GrpcMuxSubscriptionImpl\u7ee7\u627fGrpcMuxCallbacks\u548cSubscription\u53ef\u4ee5\u7ed9\u4e0a\u5c42API(CDS/LDS/EDS...)\u7b49\u63d0\u4f9b\u8d44\u6e90\u8ba2\u9605\u7684\u63a5\u53e3(Subscription)\u6765\u8ba2\u9605\u8d44\u6e90 \u6bcf\u4e00\u7c7b\u8d44\u6e90\u90fd\u9700\u8981\u6709\u4e00\u4e2aGrpcMuxSubscriptionImpl\u7c7b\uff0c\u8fd9\u4e2a\u7c7b\u8d1f\u8d23\u63d0\u4f9b\u8d44\u6e90\u8ba2\u9605\u3001\u66f4\u65b0\u8d44\u6e90\u7b49\uff0c\u8fd8\u6709\u5c06\u8ba2\u9605\u7684\u5185\u5bb9\u56de\u8c03\u7ed9\u4e0a\u5c42API 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 class SubscriptionFactory { public : virtual ~ SubscriptionFactory () = default ; /** * Subscription factory interface. * * @param config envoy::api::v2::core::ConfigSource to construct from. * @param type_url type URL for the resource being subscribed to. * @param scope stats scope for any stats tracked by the subscription. * @param callbacks the callbacks needed by all Subscription objects, to deliver config updates. * The callbacks must not result in the deletion of the Subscription object. * @return SubscriptionPtr subscription object corresponding for config and type_url. */ virtual SubscriptionPtr subscriptionFromConfigSource ( const envoy :: config :: core :: v3alpha :: ConfigSource & config , absl :: string_view type_url , Stats :: Scope & scope , SubscriptionCallbacks & callbacks ) PURE ; }; case envoy :: config :: core :: v3alpha :: ConfigSource :: ConfigSourceSpecifierCase :: kAds : { if ( cm_ . adsMux () -> isDelta ()) { result = std :: make_unique < DeltaSubscriptionImpl > ( cm_ . adsMux (), type_url , callbacks , stats , Utility :: configSourceInitialFetchTimeout ( config ), true ); } else { result = std :: make_unique < GrpcMuxSubscriptionImpl > ( cm_ . adsMux (), callbacks , stats , type_url , dispatcher_ , Utility :: configSourceInitialFetchTimeout ( config )); } break ; } \u9488\u5bf9\u6bcf\u4e00\u4e2atype_url\u7684\u8d44\u6e90\u90fd\u521b\u5efa\u4e00\u4e2a\u8ba2\u9605\u5668\uff0c\u7b49\u5f85\u5185\u5bb9\u56de\u8c03\u3002\u5b9e\u9645\u8ba2\u9605\u5668\u5c31\u662fGrpcMuxSubscriptionImpl\u5bf9\u8c61\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u770b\u4e0b GrpcMuxSubscriptionImpl \u5bf9\u8c61 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 class GrpcMuxSubscriptionImpl : public Subscription , GrpcMuxCallbacks , Logger :: Loggable < Logger :: Id :: config > { public : GrpcMuxSubscriptionImpl ( GrpcMuxSharedPtr grpc_mux , SubscriptionCallbacks & callbacks , SubscriptionStats stats , absl :: string_view type_url , Event :: Dispatcher & dispatcher , std :: chrono :: milliseconds init_fetch_timeout ); // Config::Subscription void start ( const std :: set < std :: string >& resource_names ) override ; void updateResourceInterest ( const std :: set < std :: string >& update_to_these_names ) override ; // Config::GrpcMuxCallbacks void onConfigUpdate ( const Protobuf :: RepeatedPtrField < ProtobufWkt :: Any >& resources , const std :: string & version_info ) override ; void onConfigUpdateFailed ( Envoy :: Config :: ConfigUpdateFailureReason reason , const EnvoyException * e ) override ; std :: string resourceName ( const ProtobufWkt :: Any & resource ) override ; private : void disableInitFetchTimeoutTimer (); GrpcMuxSharedPtr grpc_mux_ ; SubscriptionCallbacks & callbacks_ ; SubscriptionStats stats_ ; const std :: string type_url_ ; GrpcMuxWatchPtr watch_ {}; Event :: Dispatcher & dispatcher_ ; std :: chrono :: milliseconds init_fetch_timeout_ ; Event :: TimerPtr init_fetch_timeout_timer_ ; }; \u7ec4\u5408\u4e86GrpcMuxSharedPtr(NewGrpcMuxImpl)\u589e\u91cf\u5b9e\u73b0\u3001\u6216\u8005(GrpcMuxImpl)\u5168\u91cf\u5b9e\u73b0 GrpcMuxImpl \u901a\u8fc7\u8c03\u7528\u5e95\u5c42\u7684 GrpcStream \u6765\u53d1\u9001stream\uff0c\u540c\u65f6\u7ee7\u627f\u4e86 GrpcStreamCallbacks \u7528\u6765\u63a5\u6536stream\u8fd4\u56de\u7684message 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class GrpcMuxImpl : public GrpcMux , public GrpcStreamCallbacks < envoy :: service :: discovery :: v3alpha :: DiscoveryResponse > , public Logger :: Loggable < Logger :: Id :: config > { private : GrpcStream < envoy :: service :: discovery :: v3alpha :: DiscoveryRequest , envoy :: service :: discovery :: v3alpha :: DiscoveryResponse > grpc_stream_ ; } class GrpcStream : public Grpc :: AsyncStreamCallbacks < ResponseProto > , public Logger :: Loggable < Logger :: Id :: config > { private : Grpc :: AsyncClient < RequestProto , ResponseProto > async_client_ ; Grpc :: AsyncStream < RequestProto > stream_ {}; } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 /** * Manage one or more gRPC subscriptions on a single stream to management server. This can be used * for a single xDS API, e.g. EDS, or to combined multiple xDS APIs for ADS. */ class GrpcMux { public : virtual ~ GrpcMux () = default ; virtual void start () PURE ; virtual GrpcMuxWatchPtr subscribe ( const std :: string & type_url , const std :: set < std :: string >& resources , GrpcMuxCallbacks & callbacks ) PURE ; virtual void pause ( const std :: string & type_url ) PURE ; virtual void resume ( const std :: string & type_url ) PURE ; virtual bool isDelta () const PURE ; // For delta virtual Watch * addOrUpdateWatch ( const std :: string & type_url , Watch * watch , const std :: set < std :: string >& resources , SubscriptionCallbacks & callbacks , std :: chrono :: milliseconds init_fetch_timeout ) PURE ; virtual void removeWatch ( const std :: string & type_url , Watch * watch ) PURE ; virtual bool paused ( const std :: string & type_url ) const PURE ; }; InitManager WatcherHandle \u3001 Mannager \u3001 Target \u3001 TargetHandle \u3001 Watcher \u3001 WatcherHandle \u4e00\u4e2aWatcherImpl\u6301\u6709\u4e00\u4e2aReadyFn\u7684\u56de\u8c03\uff0c\u901a\u8fc7WatcherImpl\u53ef\u4ee5\u521b\u5efaWatcherHandle\u6301\u6709\u5bf9ReadyFn\u7684\u5f31\u56de\u8c03\u3002 TargetImpl\u548cTargetHandleImpl\u548cWatcherImpl\u548cWatcherHandle\u7c7b\u4f3c\uff0c\u53ea\u662f\u524d\u8005\u662f\u6301\u6709ReadyFn\u540e\u8005\u662f\u6301\u6709InternalInitalizeFn grpc client \u57fa\u672c\u6982\u5ff5\u89e3\u91ca: AsyncRequest An in-flight gRPC unary RPC. \u5355\u5411\u7684grpc\u8bf7\u6c42\uff0c\u53ef\u80fd\u6b63\u5728\u53d1\u9001\u4e2d\uff0c\u53ef\u4ee5cancel\u6389 RawAsyncStream An in-flight gRPC stream. \u901a\u8fc7grpc stream\u6765\u53d1\u9001\u8bf7\u6c42 RawAsyncRequestCallbacks RawAsyncStreamCallbacks RawAsyncClient \u53d1\u9001grpc\u8bf7\u6c42\uff0c\u5f02\u6b65\u63a5\u6536\u54cd\u5e94 AsyncClientImpl \u7ee7\u627f\u81eaRawAsyncClient\uff0c\u5177\u5907\u53d1\u9001\u5355\u5411grpc\u6d88\u606f\uff0c\u8fd4\u56de\u4e00\u4e2aAsyncRequest\uff0c\u53ef\u4ee5\u5bf9\u8fd9\u4e2a\u8bf7\u6c42\u505acancel\uff0cresponse\u901a\u8fc7RawAsyncRequestCallbacks\u8fd4\u56de \u4e5f\u53ef\u4ee5\u53d1\u9001grpc stream\uff0c\u8fd4\u56de\u4e00\u4e2aRawAsyncStream\uff0c\u4e00\u4e2astream\uff0c\u901a\u8fc7\u8fd9\u4e2astream\u53ef\u4ee5\u53d1\u9001\u6d88\u606f\uff0cresponse\u901a\u8fc7RawAsyncStreamCallbacks\u8fd4\u56de Envoy \u6027\u80fd\u4f18\u5316 Http filter status \u5206\u4e3a\u4e24\u7c7b: FilterHeadersStatus Continue StopIteration // \u505c\u6b62\u5bf9\u4e0b\u9762\u7684filter\u8fdb\u884citerate\uff0c\u9664\u975e\u4e3b\u52a8\u8c03\u7528continueDecoding()/continueEncoding()\u6765\u7ee7\u7eed ContinueAndEndStream // \u7ee7\u7eediterate\u4e0b\u9762\u7684filter\uff0c\u4f46\u662f\u5ffd\u7565\u540e\u7eed\u7684data\u548ctrailer StopAllIterationAndBuffer // \u505c\u6b62iterate\u4e0b\u9762\u7684filter\uff0c\u4f46\u662f\u4f1a\u7ee7\u7eedbuffer\u540e\u7eed\u7684data\uff0c\u8fbe\u5230buffer\u7684\u9650\u5236\u540e\u4f1a\u8fd4\u56de401\u6216500 StopAllIterationAndWatermark // \u505c\u6b62iterate\u4e0b\u9762\u7684filter\uff0c\u4f46\u662f\u4f1a\u7ee7\u7eedbuffer\u540e\u7eed\u7684data\uff0c\u76f4\u5230\u89e6\u53d1high watermark FilterDataStatus Continue StopIterationAndBuffer StopIterationAndWatermark StopIterationNoBuffer FilterTrailersStatus Continue StopIteration FilterMetadataStatus Continue ## TLS\u8bc1\u4e66 yaml static_resources: listeners: - address: socket_address: address: 0.0.0.0 port_value: 443 filter_chains: - filters: - name: envoy.filters.network.http_connection_manager typed_config: \"@type\": type.googleapis.com/envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager codec_type: auto stat_prefix: ingress_http route_config: name: local_route virtual_hosts: - name: backend domains: - \"*\" routes: - match: prefix: \"/\" route: cluster: service1 http_filters: - name: envoy.filters.http.router typed_config: {} # \u670d\u52a1\u7aef\u9a8c\u8bc1 transport_socket: name: envoy.transport_socket.tls typed_config: \"@type\": type.googleapis.com/envoy.api.v2.auth.DownstreamTlsContext common_tls_context: # \u8bc1\u4e66\u76f8\u5173\u7684\u4fe1\u606f tls_certificates: # \u8bc1\u4e66 - certificate_chain: { filename: \"/root/gateway/api.alimesh.alibaba-inc.com_SHA256withRSA_EC.crt\" } # \u79c1\u94a5 private_key: { filename: \"/root/gateway/api.alimesh.alibaba-inc.com_SHA256withRSA_EC.key\" } # \u5ba2\u6237\u7aef\u9a8c\u8bc1 validation_context: trusted_ca: # \u9a8c\u8bc1\u5ba2\u6237\u7aef\u8bc1\u4e66\u7684root ca\uff0c\u4e00\u822c\u7528\u7cfb\u7edf\u7684\u5c31\u8db3\u591f filename: \"/etc/ssl/certs/ca-certificates.crt\" # \u9a8c\u8bc1\u6a21\u5f0f(Peer certificate verification mode.)\uff0c\u9ed8\u8ba4\u5ba2\u6237\u7aef\u8bc1\u4e66\u5fc5\u987b\u662f\u7ecf\u8fc7\u6307\u5b9aCA\u5217\u8868\u4e2d\u7684CA\u8fdb\u884c\u9a8c\u8bc1\u7684 trust_chain_verification: ACCEPT_UNTRUSTED require_client_certificate: false clusters: - name: service1 connect_timeout: 0.25s type: strict_dns lb_policy: round_robin transport_socket: name: envoy.transport_socket.tls typed_config: \"@type\": type.googleapis.com/envoy.api.v2.auth.UpstreamTlsContext CommonTlsContext: validation_context: trust_chain_verification: ACCEPT_UNTRUSTED load_assignment: cluster_name: service1 endpoints: - lb_endpoints: - endpoint: address: socket_address: address: 127.0.0.1 port_value: 9999 admin: access_log_path: \"/dev/null\" address: socket_address: address: 0.0.0.0 port_value: 8001 ## xDS transport next steps Collections: \u6ca1\u6709\u4e00\u79cd\u901a\u7528\u673a\u5236\u6765\u9009\u62e9\u8d44\u6e90\u5b50\u96c6\uff0c\u5927\u5bb6\u73b0\u5728\u666e\u904d\u7684\u505a\u6cd5\u662f\u901a\u8fc7\u5728Node\u4e2d\u6dfb\u52a0\u4e00\u4e9b\u4fe1\u606f\u8ba9\u63a7\u5236\u9762\u53ef\u4ee5\u8fdb\u884c\u8ba1\u7b97\u5b50\u96c6\u3002\u4f46\u662f\u8fd9\u79cd\u65b9\u5f0f\u4e0d\u901a\u7528\u3002Envoy\u5e0c\u671b\u5f15\u5165namesapce\u673a\u5236\u6765\u9009\u62e9\u5b50\u96c6 \u66f4\u901a\u7528\u7684\u65b9\u6cd5\u53ef\u4ee5\u662f\u5f15\u5165\u4e00\u4e2akey/value\u5c5e\u6027\u96c6\u5408\u53bb\u9009\u62e9\u8bf7\u6c42\u7684\u8d44\u6e90\uff0c\u5bf9\u4e8e\u589e\u91cfxDS\u6765\u8bf4\u4e5f\u662f\u6709\u610f\u4e49\u7684\u3002 Ref: https://github.com/envoyproxy/envoy/pull/10689 https://github.com/envoyproxy/envoy/issues/10373 Resource immutability: xDS\u76ee\u524d\u6ca1\u6709\u4e00\u4e2a\u4e0d\u53ef\u4ee5\u53d8\u7684\u8d44\u6e90\u540d\u5230\u8d44\u6e90\u7684\u6620\u5c04\u5173\u7cfb\uff0c\u76ee\u524d\u662f\u63a7\u5236\u9762\u7ed3\u5408Node\u4fe1\u606f\u6765\u751f\u6210\u6216\u8005\u4fee\u6539\u8d44\u6e90\u540d\uff0c\u4e24\u4e2a\u5ba2\u6237\u7aef\u53ef\u80fd\u770b\u5230\u76f8\u540c\u8d44\u6e90\u540d\u7684\u4e0d\u540c\u8d44\u6e90\uff0c\u8fd9\u5bf9\u4e8exDS Cache\u5e76\u4e0d\u4f18\u5316 \u540c\u65f6\u8fd9\u79cd\u884c\u4e3a\u4e5f\u4f1a\u5f71\u54cd\u591a\u63a7\u5236\u9762\u7684\u8054\u90a6\uff0c\u4e0d\u540c\u7684\u63a7\u5236\u9762\u5fc5\u987b\u5177\u6709\u4e00\u4e2a\u5168\u5c40\u7684\u8d44\u6e90\u547d\u540d\u65b9\u5f0f\u3002 Ref: https://docs.google.com/document/d/1X9fFzqBZzrSmx2d0NkmjDW2tc8ysbLQS9LaRQRxdJZU/edit?disco=AAAAGQ_84vU&ts=5e61532c&usp_dm=false Per-xDS type resource name semantics: VHDS\u7684\u8d44\u6e90\u540d\u662f\u4e00\u79cd\u7279\u6b8a\u7ed3\u6784\uff0c\u683c\u5f0f\u8981\u6c42\u4e3a <route configuration name>/<host entry> \uff0c\u8fd9\u5141\u8bb8\u63a7\u5236\u9762\u6839\u636e\u8fd9\u79cd\u683c\u5f0f\u6765\u67e5\u8be2\u6307\u5b9a\u8def\u7531\u914d\u7f6e\u4e2dvirtual host\u4e2d\u7684entry \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8d44\u6e90\u540d\u5176\u5b9e\u5c31\u662f\u626e\u6f14\u4e86namesapce\u7684\u89d2\u8272\u3002\u5728\u672a\u6765\u5176\u4ed6\u7684\u8d44\u6e90\u7c7b\u578b\u7684\u540d\u5b57\u5c06\u53ef\u80fd\u9700\u8981\u67d0\u79cd\u7ed3\u6784\uff0c\u7406\u60f3\u7684\u8d44\u6e90\u547d\u540d\u65b9\u6848\u5c06\u5141\u8bb8\u7ed3\u6784\uff0c\u540c\u65f6\u7559\u7ed9\u63a7\u5236\u5e73\u9762\u4e00\u4e9b\u81ea\u7531\uff0c\u4ee5\u4fbf\u5728\u9700\u8981\u65f6\u7ee7\u7eed\u4f7f\u7528\u4e0d\u900f\u660e\u547d\u540d\uff0c\u800c\u4e0d\u662f\u5c06\u4e0d\u900f\u660e\u548c\u7ed3\u6784\u5316\u5f62\u5f0f\u4efb\u610f\u6df7\u5408\u5728\u4e00\u8d77\u3002 Flat representation: \u73b0\u5982\u4eca\uff0c\u8d44\u6e90\u6807\u8bc6\u5df2\u6210\u4e3a\u8d44\u6e90\u540d\u79f0\uff0c\u8282\u70b9\u4fe1\u606f\uff0cConfigSource\u7684\u6743\u9650\uff0cURL\u7c7b\u578b\u548c\u7248\u672c\u7684\u5927\u6742\u70e9\u3002 \u5728\u65e0\u6cd5\u5904\u7406\u76f8\u5173proto3\u6d88\u606f\u7684\u4eba\u5458\u6216\u7cfb\u7edf\u4e4b\u95f4\u8fdb\u884c\u901a\u4fe1\u65f6\uff0c\u6ca1\u6709\u6807\u51c6\u683c\u5f0f\u53ef\u4ee5\u5bf9\u8fd9\u4e9b\u4fe1\u606f\u8fdb\u884c\u7b80\u660e\u7684\u7f16\u7801\u3002 URI\u63d0\u4f9b\u4e86\u4e00\u79cd\u5f3a\u5927\u7684\u7b26\u5408\u6807\u51c6\u7684\u65b9\u5f0f\u6765\u6307\u5b9a\u6b64\u4fe1\u606f\u3002\u672a\u6765\u7684xDS\u8d44\u6e90\u547d\u540d\u65b9\u6848\u5c06\u53d7\u76ca\u4e8e\u5177\u6709\u89c4\u8303\u7684URI\u8868\u793a\uff08\u9664\u4e86\u89c4\u8303\u7684proto3\u5b9a\u4e49\uff09 Implicit resource payload naming \u867d\u7136\u5728\u589e\u91cf\u53d1\u73b0\u4e2d\uff0c\u6211\u4eec\u5728DeltaDiscoveryResponse\u4e2d\u7684\u201c\u8d44\u6e90\u201d\u6d88\u606f\u4e2d\u6709\u660e\u786e\u63d0\u4f9b\u7684\u8d44\u6e90\u540d\u79f0\uff0c\u4f46SotW\u8d44\u6e90\u6709\u6548\u8d1f\u8f7d\u5374\u4e0d\u662f\u8fd9\u79cd\u60c5\u51b5\u3002\u8fd9\u610f\u5473\u7740xDS\u4ee3\u7406\uff0c\u7f13\u5b58\u548c\u5176\u4ed6\u4e2d\u4ecb\u5fc5\u987b\u5177\u6709\u6309\u8d44\u6e90\u7c7b\u578b\u7684\u8bc6\u522b\u548c\u53cd\u5e8f\u5217\u5316\u624d\u80fd\u77e5\u9053\u6b63\u5728\u4f20\u9012\u7684\u8d44\u6e90\u6709\u6548\u8d1f\u8f7d\u3002\u6211\u4eec\u9700\u8981\u4e3aDiscoveryResponses\u4e2d\u7684SotW\u8d44\u6e90\u547d\u540d\u63d0\u4f9b\u66f4\u597d\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u53ef\u80fd\u4f1a\u5f03\u7528\u73b0\u6709\u7684\u91cd\u590d\u7684Any\uff0c\u5e76\u7528v3 / v4 xDS\u4e2d\u7684\u91cd\u590d\u7684Resource\u4ee3\u66ff\u3002 Aliasing VHDS\u4e3axDS\u5f15\u5165\u4e86\u522b\u540d\uff0c\u56e0\u4e3a\u540c\u4e00\u4e2a\u865a\u62df\u4e3b\u673a\u8d44\u6e90\u53ef\u80fd\u4f1a\u88ab\u591a\u4e2a\u540d\u79f0\uff08\u4f8b\u5982\uff0c routeConfigA / foo.com\uff0crouteConfigA / bar.com\uff09\u4f7f\u7528\u3002\u6b64\u673a\u5236\u5c1a\u672a\u5728xDS\u7684\u5176\u4ed6\u5730\u65b9\u5e7f\u6cdb\u4f7f\u7528\uff0c\u56e0\u6b64\u7528\u66f4\u901a\u7528\u7684\u66ff\u4ee3\u5b83\u662f\u7406\u60f3\u7684\u3002\u4e00\u4e2a\u6709\u5438\u5f15\u529b\u7684\u66ff\u4ee3\u65b9\u6848\uff08\u5c06\u5728\u4e0b\u9762\u7684\u8054\u5408\u8ba8\u8bba\u4e2d\u7528\u4e8e\u5176\u4ed6\u76ee\u7684\uff09\u4e5f\u5c06\u5bf9xDS\u5f15\u5165\u91cd\u5b9a\u5411\u529f\u80fd\u3002\u5f53\u67e5\u8be2routeConfigA / foo.com\u6216routeConfigA / bar.com\u65f6\uff0c\u7ba1\u7406\u670d\u52a1\u5668\u53ef\u80fd\u4f1a\u53d1\u51fa\u91cd\u5b9a\u5411\uff0c\u5bfc\u81f4xDS\u5ba2\u6237\u7aef\u83b7\u53d6\u67d0\u4e9bCanonicalVirtualHost\u8d44\u6e90\u3002\u901a\u8fc7\u6d88\u9664\u6982\u5ff5\u4e0a\u7684\u590d\u6742\u6027\uff0c\u8fd9\u7b80\u5316\u4e86xDS\u63a7\u5236\u5e73\u9762\u7684\u8981\u6c42\u3002 \u81ea\u5b9a\u4e49cluster\u5b9e\u73b0\u7684\u5173\u952e\u70b9 \u5982\u679c\u8fd9\u4e2acluster\u9700\u8981\u4f9d\u8d56\u5176\u4ed6cluster\u624d\u80fd\u83b7\u53d6\u5230\u5730\u5740\u4fe1\u606f\uff0c\u90a3\u4e48\u8fd9\u4e2acluster\u7684initializa phase\u9700\u8981\u8bbe\u7f6e\u4e3aSecondary\uff0c\u5426\u5219\u662fPrimary 1 2 3 4 // Upstream::Cluster Upstream :: Cluster :: InitializePhase initializePhase () const override { return Upstream :: Cluster :: InitializePhase :: Primary ; } cluster \u7684\u521d\u59cb\u5316\u9700\u8981\u653e\u5230 startPreInit \u4e2d\uff0c\u521d\u59cb\u5316\u5b8c\u6210\u540e\u9700\u8981\u8c03\u7528 onPreInitComplete \u6765\u5b8c\u6210\u521d\u59cb\u5316\uff0c\u6700\u597d\u505a\u4e00\u4e2a\u8d85\u65f6\u63a7\u5236 1 2 // Upstream::ClusterImplBase void startPreInit () override ; host\u66f4\u65b0\u7684\u65f6\u5019\u9700\u8981\u6309\u7167\u4f18\u5148\u7ea7\u4e3a\u7eac\u5ea6\u6765\u8fdb\u884c\u66f4\u65b0\uff0c\u5e76\u6309\u7167\u4f18\u5148\u7ea7\u7eac\u5ea6\u7edf\u8ba1locality weight map\uff0c\u901a\u8fc7PriorityStateManager\u6765\u7ba1\u7406 PriorityStateManager \u5728\u521d\u59cb\u5316\u4f18\u5148\u7ea7\u7684\u65f6\u5019\u4f1a\u81ea\u52a8\u6784\u5efa\u597dlocality weight map 1 2 3 4 5 6 7 8 9 10 11 12 13 14 void PriorityStateManager::initializePriorityFor ( const envoy :: api :: v2 :: endpoint :: LocalityLbEndpoints & locality_lb_endpoint ) { const uint32_t priority = locality_lb_endpoint . priority (); if ( priority_state_ . size () <= priority ) { priority_state_ . resize ( priority + 1 ); } if ( priority_state_ [ priority ]. first == nullptr ) { priority_state_ [ priority ]. first = std :: make_unique < HostVector > (); } if ( locality_lb_endpoint . has_locality () && locality_lb_endpoint . has_load_balancing_weight ()) { priority_state_ [ priority ]. second [ locality_lb_endpoint . locality ()] = locality_lb_endpoint . load_balancing_weight (). value (); } } \u8ba1\u7b97host\u53d8\u66f4(\u589e\u52a0\u591a\u5c11\u3001\u51cf\u5c11\u591a\u5c11\uff0c\u53d1\u751f\u53d8\u5316)\uff0c\u5982\u679c\u6ca1\u6709host\u53d8\u66f4\uff0c\u4f46\u662f\u5176\u4ed6\u7684\u4e00\u4e9b\u4fe1\u606f\u53d1\u751f\u4e86\u53d8\u66f4\u4e5f\u9700\u8981\u8fdb\u884clb\u91cd\u5efa 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 const auto & host_set = priority_set_ . getOrCreateHostSet ( priority , overprovisioning_factor ); HostVectorSharedPtr current_hosts_copy ( new HostVector ( host_set . hosts ())); HostVector hosts_added ; HostVector hosts_removed ; // We need to trigger updateHosts with the new host vectors if they have changed. We also do this // when the locality weight map or the overprovisioning factor. Note calling updateDynamicHostList // is responsible for both determining whether there was a change and to perform the actual update // to current_hosts_copy, so it must be called even if we know that we need to update (e.g. if the // overprovisioning factor changes). // TODO(htuch): We eagerly update all the host sets here on weight changes, which isn't great, // since this has the knock on effect that we rebuild the load balancers and locality scheduler. // We could make this happen lazily, as we do for host-level weight updates, where as things age // out of the locality scheduler, we discover their new weights. We don't currently have a shared // object for locality weights that we can update here, we should add something like this to // improve performance and scalability of locality weight updates. const bool hosts_updated = updateDynamicHostList ( new_hosts , * current_hosts_copy , hosts_added , hosts_removed , updated_hosts , all_hosts_ ); if ( hosts_updated || host_set . overprovisioningFactor () != overprovisioning_factor || locality_weights_map != new_locality_weights_map ) { ASSERT ( std :: all_of ( current_hosts_copy -> begin (), current_hosts_copy -> end (), [ & ]( const auto & host ) { return host -> priority () == priority ; })); locality_weights_map = new_locality_weights_map ; ENVOY_LOG ( debug , \"EDS hosts or locality weights changed for cluster: {} current hosts {} priority {}\" , info_ -> name (), host_set . hosts (). size (), host_set . priority ()); // lb \u91cd\u5efa priority_state_manager . updateClusterPrioritySet ( priority , std :: move ( current_hosts_copy ), hosts_added , hosts_removed , absl :: nullopt , overprovisioning_factor ); return true ; } return false ; locality_weight_map\u53d1\u751f\u53d8\u5316 overprovisioning_factor\u53d1\u751f\u53d8\u5316 host\u53d1\u751f\u53d8\u66f4(\u65b0\u589e\u3001\u5220\u9664)\uff0chost\u6ca1\u6709\u53d8\u66f4\uff0c\u4f46\u662f\u6709\u4e00\u4e9b\u4fe1\u606f\u53d1\u751f\u4e86\u53d8\u5316) Host\u4fe1\u606f\u53d1\u751f\u53d8\u5316 host\u4f18\u5148\u7ea7\u53d8\u5316 host metadata\u53d8\u5316 host\u914d\u7f6e\u7684\u5065\u5eb7\u5730\u5740\u53d1\u751f\u4e86\u53d8\u5316 \u8fd9\u4e9b\u90fd\u4f1a\u5bfc\u81f4lb\u91cd\u5efa\uff0c\u9700\u8981\u66f4\u65b0priorityset\uff0c\u5373\u4f7f\u6ca1\u6709\u4efb\u4f55\u673a\u5668\u53d1\u751f\u53d8\u5316 lb\u91cd\u5efa\u548cpriority set\u66f4\u65b0 \u901a\u8fc7priority_state_manager\u7684updateClusterPrioritySet\u65b9\u6cd5\u53ef\u4ee5\u66f4\u65b0priorityset\u5e76\u91cd\u5efalb 1 2 3 priority_state_manager . updateClusterPrioritySet ( priority , std :: move ( current_hosts_copy ), hosts_added , hosts_removed , absl :: nullopt , overprovisioning_factor ); \u8fd9\u4e2a\u65b9\u6cd5\u4e3b\u8981\u505a\u4e86\u51e0\u4ef6\u4e8b: \u6839\u636elocality weight map\u8fd8\u6709\u662f\u5426\u5f00\u542fzone aware\u8def\u7531\u6765\u6784\u5efaLocalityWeights lb \u6309\u7167locality\u7eac\u5ea6\u5c06\u673a\u5668\u7ec4\u7ec7\u8d77\u6765\uff0c\u5e76\u6700\u7ec8\u6784\u5efaHostsPerLocalityImpl \u8c03\u7528priorityset\u7684updateHosts\u65b9\u6cd5\u66f4\u65b0priority set\uff0c\u5e76\u4f20\u5165\u8ba1\u7b97\u51fa\u6765\u7684\u65b0\u589e\u3001\u548c\u5220\u9664host\u7528\u6765\u8fdb\u884c\u901a\u77e5 \u5904\u7406\u5065\u5eb7\u68c0\u67e5 \u8fde\u63a5\u6c60 FilterChain FilterChainFactory\u63a5\u53e3\uff0c\u901a\u8fc7\u8fd9\u4e2a\u63a5\u53e3\u53ef\u4ee5\u521b\u5efaNetwork filter chain\u3001Listener filter chain\u3001Udp listener filter chain 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 /** * Creates a chain of network filters for a new connection. */ class FilterChainFactory { public : virtual ~ FilterChainFactory () = default ; /** * Called to create the network filter chain. * @param connection supplies the connection to create the chain on. * @param filter_factories supplies a list of filter factories to create the chain from. * @return true if filter chain was created successfully. Otherwise * false, e.g. filter chain is empty. */ virtual bool createNetworkFilterChain ( Connection & connection , const std :: vector < FilterFactoryCb >& filter_factories ) PURE ; /** * Called to create the listener filter chain. * @param listener supplies the listener to create the chain on. * @return true if filter chain was created successfully. Otherwise false. */ virtual bool createListenerFilterChain ( ListenerFilterManager & listener ) PURE ; /** * Called to create a Udp Listener Filter Chain object * * @param udp_listener supplies the listener to create the chain on. * @param callbacks supplies the callbacks needed to create a filter. */ virtual void createUdpListenerFilterChain ( UdpListenerFilterManager & udp_listener , UdpReadFilterCallbacks & callbacks ) PURE ; }; Extension Config Discovery Service","title":"Envoy\u6e90\u7801\u5206\u6790"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/envoy/proxy/#envoy","text":"","title":"Envoy\u6e90\u7801\u5206\u6790"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/envoy/proxy/#_1","text":"\u5355\u8fdb\u7a0b\u591a\u7ebf\u7a0b\u67b6\u6784\uff0c\u4e00\u4e2a\u4e3b\u7ebf\u7a0b\u63a7\u5236\u5404\u79cd\u96f6\u661f\u7684\u534f\u8c03\u4efb\u52a1\uff0c\u591a\u4e2aworker\u7ebf\u7a0b\u6267\u884clistening\u3001filtering\u3001\u548c\u6570\u636e\u8f6c\u53d1\u7b49\uff0c\u53ea\u8981\u4e00\u4e2a\u8fde\u63a5\u88ablistener\u63a5\u53d7\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8fde\u63a5\u4e0a \u6240\u6709\u7684\u5de5\u4f5c\u90fd\u662f\u5728\u4e00\u4e2a\u7ebf\u7a0b\u4e2d\u5b8c\u6210\u7684\u3002","title":"\u7ebf\u7a0b\u6a21\u578b"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/envoy/proxy/#_2","text":"\u8bf7\u6c42\u5173\u95edAdmin\u529f\u80fd\uff0c\u5e76\u5f00\u59cb\u63a5\u7ba1\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u662f\u975e\u539f\u5b50\u7684\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 restarter_ . shutdownParentAdmin ( info ); original_start_time_ = info . original_start_time_ ; admin_ = std :: make_unique < AdminImpl > ( initial_config . admin (). profilePath (), * this ); if ( initial_config . admin (). address ()) { if ( initial_config . admin (). accessLogPath (). empty ()) { throw EnvoyException ( \"An admin access log path is required for a listening server.\" ); } ENVOY_LOG ( info , \"admin address: {}\" , initial_config . admin (). address () -> asString ()); admin_ -> startHttpListener ( initial_config . admin (). accessLogPath (), options . adminAddressPath (), initial_config . admin (). address (), stats_store_ . createScope ( \"listener.admin.\" )); } else { ENVOY_LOG ( warn , \"No admin address given, so no admin HTTP server started.\" ); } \u521b\u5efaListenerManager\u3001ClusterManagerFactory\uff0c\u4e00\u4e9b\u7ba1\u7406\u6570\u636e\u7ed3\u6784 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 overload_manager_ = std :: make_unique < OverloadManagerImpl > ( dispatcher (), stats (), threadLocal (), bootstrap_ . overload_manager ()); // Workers get created first so they register for thread local updates. listener_manager_ = std :: make_unique < ListenerManagerImpl > ( * this , listener_component_factory_ , worker_factory_ , time_system_ ); // The main thread is also registered for thread local updates so that code that does not care // whether it runs on the main thread or on workers can still use TLS. thread_local_ . registerThread ( * dispatcher_ , true ); // We can now initialize stats for threading. stats_store_ . initializeThreading ( * dispatcher_ , thread_local_ ); // Runtime gets initialized before the main configuration since during main configuration // load things may grab a reference to the loader for later use. runtime_loader_ = component_factory . createRuntime ( * this , initial_config ); // Once we have runtime we can initialize the SSL context manager. ssl_context_manager_ = std :: make_unique < Ssl :: ContextManagerImpl > ( time_system_ ); cluster_manager_factory_ = std :: make_unique < Upstream :: ProdClusterManagerFactory > ( runtime (), stats (), threadLocal (), random (), dnsResolver (), sslContextManager (), dispatcher (), localInfo (), secretManager ()); Bootstrap\u521d\u59cb\u5316 1 2 3 4 5 // Now the configuration gets parsed. The configuration may start setting thread local data // per above. See MainImpl::initialize() for why we do this pointer dance. Configuration :: MainImpl * main_config = new Configuration :: MainImpl (); config_ . reset ( main_config ); main_config -> initialize ( bootstrap_ , * this , * cluster_manager_factory_ ); \u521d\u59cb\u5316\u9759\u6001secret \u521d\u59cb\u5316\u9759\u6001cluster \u521d\u59cb\u5316\u9759\u6001listener \u521d\u59cb\u5316ralimit service \u521d\u59cb\u5316tracing \u521d\u59cb\u5316sats sinks \u521b\u5efaLDS API\uff0c\u6ce8\u518cinit target 1 2 3 4 5 // Instruct the listener manager to create the LDS provider if needed. This must be done later // because various items do not yet exist when the listener manager is created. if ( bootstrap_ . dynamic_resources (). has_lds_config ()) { listener_manager_ -> createLdsApi ( bootstrap_ . dynamic_resources (). lds_config ()); } \u96c6\u7fa4\u521d\u59cb\u5316 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 // We need the RunHelper to be available to call from InstanceImpl::shutdown() below, so // we save it as a member variable. run_helper_ = std :: make_unique < RunHelper > ( * this , * dispatcher_ , clusterManager (), access_log_manager_ , init_manager_ , overloadManager (), [ this ]() -> void { startWorkers (); }); // starts. cm . setInitializedCb ([ & instance , & init_manager , & cm , workers_start_cb ]() { if ( instance . isShutdown ()) { return ; } // Pause RDS to ensure that we don't send any requests until we've // subscribed to all the RDS resources. The subscriptions happen in the init callbacks, // so we pause RDS until we've completed all the callbacks. cm . adsMux (). pause ( Config :: TypeUrl :: get (). RouteConfiguration ); ENVOY_LOG ( info , \"all clusters initialized. initializing init manager\" ); // Note: the lamda below should not capture \"this\" since the RunHelper object may // have been destructed by the time it gets executed. init_manager . initialize ([ & instance , workers_start_cb ]() { if ( instance . isShutdown ()) { return ; } workers_start_cb (); }); \u7b49\u96c6\u7fa4\u521d\u59cb\u5316\u5b8c\u6210\uff0c\u6267\u884cinit manager 1 2 3 4 5 6 7 8 9 // Note: the lamda below should not capture \"this\" since the RunHelper object may // have been destructed by the time it gets executed. init_manager . initialize ([ & instance , workers_start_cb ]() { if ( instance . isShutdown ()) { return ; } workers_start_cb (); }); \u4f1a\u7b49\u5230LDS\u3001RDS\u3001SDS\u7684\u7b2c\u4e00\u4e2a\u914d\u7f6e\u62ff\u5230\u8fd9\u4e2a\u521d\u59cb\u5316\u624d\u4f1a\u5b8c\u6210\uff0c\u7136\u540e\u8c03\u7528workers_start_cb \u5f00\u59cbworker\uff0c\u5f00\u542f\u63a5\u6536\u6d41\u91cf\uff0c\u5e76\u901a\u77e5\u8001\u8fdb\u7a0bdrain listener 1 2 3 4 5 6 7 8 void InstanceImpl::startWorkers () { listener_manager_ -> startWorkers ( * guard_dog_ ); // At this point we are ready to take traffic and all listening ports are up. Notify our parent // if applicable that they can stop listening and drain. restarter_ . drainParentListeners (); drain_manager_ -> startParentShutdownSequence (); } \u4e0d\u4e3b\u52a8\u8fc7\u5173\u95ed\u8fde\u63a5\uff0c\u8fde\u63a5\u7684\u5173\u95ed\u4f9d\u9760\u7a7a\u95f2\u65f6\u95f4\u3001\u88ab\u52a8\u5173\u95ed\u8fd8\u6709shutdown(\u4f9d\u8d56--parent-shutdown-time-s)","title":"\u70ed\u91cd\u542f"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/envoy/proxy/#_3","text":"--disable-hot-restart \u5173\u95ed\u70ed\u91cd\u542f\uff0c\u907f\u514d\u4f7f\u7528\u5171\u4eab\u5185\u5b58\u5b58\u653estats\u7edf\u8ba1\u4fe1\u606f --concurrency \u548c\u7ed1\u5b9a\u7684\u6838\u5fc3\u6570\u4e00\u81f4\uff0c\u907f\u514d\u591a\u4e2aCPU\u5207\u6362\u5bfc\u81f4cache\u5931\u6548 \u5173\u95edstats\u7edf\u8ba1\u548c\u6dfb\u52a0\u81ea\u5b9a\u4e49header 1 2 3 4 5 http_filters : - name : envoy.router config : dynamic_stats : false suppress_envoy_headers : false \u5173\u95edcircuit_breakers 1 2 3 4 5 6 7 circuit_breakers : thresholds : - priority : HIGH max_connections : 1000000000 max_pending_requests : 1000000000 max_requests : 1000000000 max_retries : 1000000000","title":"\u6027\u80fd\u4f18\u5316"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/envoy/proxy/#listener","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 { \"name\" : \"...\" , \"address\" : \"{...}\" , // lis tener f il ter \"filter_chains\" : [], // \u5e9f\u5f03\u4e86\uff0c\u6539\u7528origi nal ds t f il ter \"use_original_dst\" : \"{...}\" , // \u8bbe\u7f6ewri ter bu ffer \u7684\u5927\u5c0f\u9650\u5236\uff0c\u8fd9\u4e2a\u6307\u7684\u662fe n voy\u5fd8dow nstrea m\u3001\u6216\u8005\u5f80ups trea m\u5199\u5165\u6570\u636e\u7684bu ffer \u5927\u5c0f \"per_connection_buffer_limit_bytes\" : \"{...}\" , \"metadata\" : \"{...}\" , // lis tener \u4f55\u65f6\u6790\u6784\uff0c\u9ed8\u8ba4\u5728lis tener \u7684\u79fb\u9664\u548c\u4fee\u6539\u3001\u8fd8\u6709\u70ed\u91cd\u542f\u3001/heal t hcheck/ fa il\u7684\u65f6\u5019 // \u4e5f\u53ef\u4ee5\u8bbe\u7f6e\u4e3a\u4ec5\u4ec5\u5728lis tener \u7684\u79fb\u9664\u548c\u4fee\u6539\u3001\u8fd8\u6709\u70ed\u91cd\u542f\u7684\u65f6\u5019\u6790\u6784 \"drain_type\" : \"...\" , // lis tener f il ter \"listener_filters\" : [], \"listener_filters_timeout\" : \"{...}\" , // \"transparent\" : \"{...}\" , // \u53ef\u4ee5\u76d1\u542c\u5728\u4e00\u4e2a\u975e\u672c\u5730ip\u4e0a\uff0c\u901a\u5e38\u914d\u7f6eorigi nal ds t f il ter \u6765\u505alis tener \u7684\u5339\u914d // \u672c\u8d28\u4e0a\u5c31\u662f\u7ed9socke t \u8bbe\u7f6eIP_FREEBIND op t io n \u53c2\u6570 \"freebind\" : \"{...}\" , \"socket_options\" : [], // \u7b2c\u4e00\u6b21\u4e09\u6b21\u63e1\u624b\u751f\u6210cookie\u540e\uff0c\u7b2c\u4e8c\u6b21\u76f4\u63a5\u5e26\u7740cookie\u5c31\u907f\u514d\u4e86\u4e09\u6b21\u63e1\u624b\u3002 // \u8fd9\u4e2a\u53c2\u6570\u7528\u6765\u8bbe\u7f6eFAST OPEN\u7684\u961f\u5217\u957f\u5ea6\u3002 // \u5c31\u662f\u8bbe\u7f6esocke t \u7684TCP_FASTOPEN op t io n \u53c2\u6570 \"tcp_fast_open_queue_length\" : \"{...}\" } per_connection_buffer_limit_bytes 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 void ConnectionHandlerImpl::ActiveListener::newConnection ( Network :: ConnectionSocketPtr && socket ) { // Find matching filter chain. const auto filter_chain = config_ . filterChainManager (). findFilterChain ( * socket ); if ( filter_chain == nullptr ) { ENVOY_LOG_TO_LOGGER ( parent_ . logger_ , debug , \"closing connection: no matching filter chain found\" ); stats_ . no_filter_chain_match_ . inc (); socket -> close (); return ; } auto transport_socket = filter_chain -> transportSocketFactory (). createTransportSocket ( nullptr ); // \u521b\u5efa\u8fde\u63a5\u540e\uff0c\u8bbe\u7f6ebuffer limit Network :: ConnectionPtr new_connection = parent_ . dispatcher_ . createServerConnection ( std :: move ( socket ), std :: move ( transport_socket )); new_connection -> setBufferLimits ( config_ . perConnectionBufferLimitBytes ()); const bool empty_filter_chain = ! config_ . filterChainFactory (). createNetworkFilterChain ( * new_connection , filter_chain -> networkFilterFactories ()); if ( empty_filter_chain ) { ENVOY_CONN_LOG_TO_LOGGER ( parent_ . logger_ , debug , \"closing connection: no filters\" , * new_connection ); new_connection -> close ( Network :: ConnectionCloseType :: NoFlush ); return ; } onNewConnection ( std :: move ( new_connection )); } void ConnectionImpl::setBufferLimits ( uint32_t limit ) { read_buffer_limit_ = limit ; // \u5176\u5b9e\u5c31\u662f\u6ce8\u518c\u4e86\u4e00\u4e2awriter buffer\u7684\u6c34\u4f4d\u56de\u8c03 if ( limit > 0 ) { static_cast < Buffer :: WatermarkBuffer *> ( write_buffer_ . get ()) -> setWatermarks ( limit + 1 ); } } Reference: http://man7.org/linux/man-pages/man7/ip.7.html","title":"listener"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/envoy/proxy/#listener-filter","text":"\u4f5c\u7528\u5728listen socket\u4e0a\uff0c\u5f53\u6709\u8fde\u63a5\u5230\u6765\u7684\u65f6\u5019\uff0c\u901a\u8fc7libevent\u4f1a\u89e6\u53d1\u53ef\u8bfb\u4e8b\u4ef6\uff0c\u8c03\u7528listen socket\u7684accept\u83b7\u53d6\u5230\u8fde\u63a5socket\u5c01\u88c5\u4e3aConnectionSocket\uff0c \u6700\u540e\u8c03\u7528ActiveListener::onAccept\uff0c\u5c06\u83b7\u53d6\u5230\u7684\u8fde\u63a5socket\u4f5c\u4e3a\u5176\u53c2\u6570\u3002 \u521b\u5efafilter chain continueFilterChain \u8c03\u7528filter chain \u5982\u679c\u6709filter\u8fd4\u56de\u4e86StopIteration\uff0c\u90a3\u4e48\u5c31\u5f00\u542ftimer\uff0c\u5728\u8fd9\u4e2a\u65f6\u95f4\u5185\u8fd8\u6ca1\u6709\u7ee7\u7eedcontinue\u5c31\u76f4\u63a5\u5173\u95ed\u5f53\u524dsocket filter\u8fd4\u56deStopIteration\u540e\uff0c\u8981\u7ee7\u7eed\u8fd0\u884c\u5269\u4e0b\u7684filter\u53ef\u4ee5\u56de\u8c03continueFilterChain \u6bd4\u5982proxy_protocol\u8fd9\u4e2alistener filter\u5f53\u63a5\u6536\u5230\u4e00\u4e2afilter\u540e\u4f1a\u6ce8\u518c\u8bfb\u4e8b\u4ef6\uff0c\u4ecesocket\u8bfb\u53d6proxy\u534f\u8bae\u5934\uff0c\u6240\u4ee5\u4f1a\u8fd4\u56deStopIteration \u7b49\u5230\u6709\u6570\u636e\u53ef\u8bfb\u7684\u65f6\u5019\uff0c\u5e76\u4e14\u8bfb\u5230\u4e86\u534f\u8bae\u5934\u624d\u4f1a\u56de\u8c03continueFilterChain\u7ee7\u7eed\u6267\u884c\u4e0b\u9762\u7684filter 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 void ConnectionHandlerImpl::ActiveListener::onAccept ( Network :: ConnectionSocketPtr && socket , bool hand_off_restored_destination_connections ) { auto active_socket = std :: make_unique < ActiveSocket > ( * this , std :: move ( socket ), hand_off_restored_destination_connections ); // Create and run the filters config_ . filterChainFactory (). createListenerFilterChain ( * active_socket ); active_socket -> continueFilterChain ( true ); // Move active_socket to the sockets_ list if filter iteration needs to continue later. // Otherwise we let active_socket be destructed when it goes out of scope. if ( active_socket -> iter_ != active_socket -> accept_filters_ . end ()) { // \u542f\u52a8\u4e86\u4e00\u4e2atimer\uff0c\u907f\u514dfilter\u957f\u65f6\u95f4\u4e0d\u8c03\u7528 active_socket -> startTimer (); active_socket -> moveIntoListBack ( std :: move ( active_socket ), sockets_ ); } } // \u5982\u679c\u8d85\u65f6\u5c31\u4ecesocket list\u4e2d\u79fb\u9664\u5f53\u524dsocket void ConnectionHandlerImpl::ActiveSocket::onTimeout () { listener_ . stats_ . downstream_pre_cx_timeout_ . inc (); ASSERT ( inserted ()); unlink (); } void ConnectionHandlerImpl::ActiveSocket::startTimer () { if ( listener_ . listener_filters_timeout_ . count () > 0 ) { timer_ = listener_ . parent_ . dispatcher_ . createTimer ([ this ]() -> void { onTimeout (); }); timer_ -> enableTimer ( listener_ . listener_filters_timeout_ ); } } \u76ee\u524d\u5b9e\u73b0\u7684listener filter\u4e3b\u8981\u6709 original_dst \u3001 original_src \u3001 proxy_protocol \u3001 tls_inspector \u7b49","title":"listener filter"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/envoy/proxy/#original_dst-filter","text":"\u4e00\u822c\u5e94\u7528\u4e8e\u901a\u8fc7iptables\u6216\u8005tproxy\u7684\u65b9\u5f0f\u5c06\u6d41\u91cf\u53d1\u9001\u7ed9envoy\uff0c\u5bfc\u81f4\u539f\u6765\u8981\u8bbf\u95ee\u7684\u5730\u5740\u4fe1\u606f\u4e22\u5931\uff0c\u4f46\u662f\u53ef\u4ee5\u901a\u8fc7\u4ecesocket\u4e2d\u83b7\u53d6\u5230\u8fd9\u4e9b\u4fe1\u606f\uff0c\u4ea4\u7ed9envoy\u505alisten\u8f6c\u53d1\u3002 \u4e3b\u8981\u5c31\u662f\u4ecesocket\u4e2d\u83b7\u53d6\u5230\u539f\u6765\u7684\u76ee\u7684\u5730\u5740\u4fe1\u606f ( getsockopt(fd, SOL_IP, SO_ORIGINAL_DST, &orig_addr, &addr_len) ) \u7136\u540e\u8bbe\u7f6esocket\u7684restore_local_address\u4e3a\u539f\u6765\u7684\u76ee\u7684\u5730\u5740 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 Network :: FilterStatus OriginalDstFilter::onAccept ( Network :: ListenerFilterCallbacks & cb ) { ENVOY_LOG ( debug , \"original_dst: New connection accepted\" ); Network :: ConnectionSocket & socket = cb . socket (); const Network :: Address :: Instance & local_address = * socket . localAddress (); if ( local_address . type () == Network :: Address :: Type :: Ip ) { Network :: Address :: InstanceConstSharedPtr original_local_address = getOriginalDst ( socket . ioHandle (). fd ()); // A listener that has the use_original_dst flag set to true can still receive // connections that are NOT redirected using iptables. If a connection was not redirected, // the address returned by getOriginalDst() matches the local address of the new socket. // In this case the listener handles the connection directly and does not hand it off. if ( original_local_address ) { // Restore the local address to the original one. socket . restoreLocalAddress ( original_local_address ); } } return Network :: FilterStatus :: Continue ; Reference: https://www.kernel.org/doc/Documentation/networking/tproxy.txt TODO(tianqian.zyf): \u4f8b\u5b50","title":"original_dst filter"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/envoy/proxy/#original_src-filter","text":"L3/L4 transparency\u7684\u542b\u4e49: L3\u8981\u6c42\u6e90IP\u53ef\u89c1\u3001L4\u8981\u6c42\u7aef\u53e3\u53ef\u89c1\uff0c\u8fd9\u4e2afilter\u7684\u76ee\u7684\u662f\u5c06\u539f\u5730\u5740\u4fe1\u606f\u900f\u4f20\u5230upstream\uff0c\u8ba9upstream\u53ef\u4ee5 \u83b7\u53d6\u5230\u771f\u5b9e\u7684\u6e90IP\u548c\u7aef\u53e3\u4fe1\u606f\u3002 TODO(tianqian.zyf): \u4f8b\u5b50 Reference: https://github.com/envoyproxy/envoy/pull/5255 Reference: https://docs.google.com/document/d/1md08XUBfVG9FwPUZixhR3f77dFRCVGJz2359plhzXxo/edit","title":"original_src filter"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/envoy/proxy/#proxy_protocol-filter","text":"\u5efa\u7acb\u8fde\u63a5\u540e\u53d1\u9001\u4e00\u6bb5\u6570\u636e\u6765\u4f20\u9012\u6e90\u5730\u5740\u548c\u7aef\u53e3\u4fe1\u606f\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 // \u8fde\u63a5\u5efa\u7acb\u540e\uff0c\u5f00\u59cb\u6ce8\u518c\u8bfb\u4e8b\u4ef6\uff0c\u8bfb\u53d6\u4f20\u9012\u8fc7\u6765\u7684\u6570\u636e\u3002 Network :: FilterStatus Filter::onAccept ( Network :: ListenerFilterCallbacks & cb ) { ENVOY_LOG ( debug , \"proxy_protocol: New connection accepted\" ); Network :: ConnectionSocket & socket = cb . socket (); ASSERT ( file_event_ . get () == nullptr ); file_event_ = cb . dispatcher (). createFileEvent ( socket . ioHandle (). fd (), [ this ]( uint32_t events ) { ASSERT ( events == Event :: FileReadyType :: Read ); onRead (); }, Event :: FileTriggerType :: Edge , Event :: FileReadyType :: Read ); cb_ = & cb ; return Network :: FilterStatus :: StopIteration ; } void Filter::onRead () { try { onReadWorker (); } catch ( const EnvoyException & ee ) { config_ -> stats_ . downstream_cx_proxy_proto_error_ . inc (); cb_ -> continueFilterChain ( false ); } } // \u8bfb\u53d6proxy\u5934\uff0c\u8fd9\u91cc\u7684\u8bfb\u53d6\u662f\u901a\u8fc7ioctl(fd, FIONREAD, &bytes_avail) \u6765\u83b7\u53d6\u7f13\u5b58\u4e2d\u7684\u6570\u636e\u5927\u5c0f , // \u7136\u540e\u901a\u8fc7MSG_PEEK\u7684\u65b9\u5f0f\u67e5\u770b\u6570\u636e\u3002\u5e76\u4e0d\u662f\u76f4\u63a5read\uff0c\u56e0\u4e3a\u4e00\u65e6\u4e0d\u662fproxy ptorocol\u534f\u8bae\u5934\u4f1a\u5bfc\u81f4\u6570\u636e\u4e0d\u5b8c\u6574(\u88ab\u8bfb\u8d70\u4e86)\u3002 void Filter::onReadWorker () { Network :: ConnectionSocket & socket = cb_ -> socket (); if (( ! proxy_protocol_header_ . has_value () && ! readProxyHeader ( socket . ioHandle (). fd ())) || ( proxy_protocol_header_ . has_value () && ! parseExtensions ( socket . ioHandle (). fd ()))) { // We return if a) we do not yet have the header, or b) we have the header but not yet all // the extension data. In both cases we'll be called again when the socket is ready to read // and pick up where we left off. return ; } .... // \u8bfb\u53d6\u5b8c\u6210\u540e\uff0c\u62ff\u5230\u83b7\u53d6\u7684\u6e90\u5730\u5740\u4fe1\u606f\u8fdb\u884c\u64cd\u4f5c\u3002 // Only set the local address if it really changed, and mark it as address being restored. if ( * proxy_protocol_header_ . value (). local_address_ != * socket . localAddress ()) { socket . restoreLocalAddress ( proxy_protocol_header_ . value (). local_address_ ); } socket . setRemoteAddress ( proxy_protocol_header_ . value (). remote_address_ ); .... } TODO(tianqian.zyf): \u4f8b\u5b50 Reference: https://www.haproxy.org/download/1.8/doc/proxy-protocol.txt","title":"proxy_protocol filter"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/envoy/proxy/#tls-inspector-filter","text":"TLS Inspector listener filter allows detecting whether the transport appears to be TLS or plaintext, and if it is TLS, it detects the Server Name Indication and/or Application-Layer Protocol Negotiation from the client. This can be used to select a FilterChain via the server_names and/or application_protocols of a FilterChainMatch. \u6ce8\u518c\u8bfb\u6570\u636e\uff0c\u7b49\u5f85\u6570\u636e\u5230\u6765 \u89e3\u6790Client hello\u62a5\u6587 \u627e\u5230TLS\u4fe1\u606f\uff0c\u8bbe\u7f6eTransportSocket\u4e3aTls","title":"TLS Inspector filter"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/envoy/proxy/#data-sharing-between-filters","text":"Network level filters can also share state (static and dynamic) among themselves within the context of a single downstream connection Static State \u4e0d\u53ef\u53d8\u7684\u72b6\u6001\uff0c\u6307\u7684\u662f\u914d\u7f6e\u52a0\u8f7d\u7684\u65f6\u5019\u6307\u5b9a\u7684\u4e00\u4e9b\u72b6\u6001\u4fe1\u606f\uff0c\u4e3b\u8981\u6709\u4e09\u7c7bStatic State Metadata \u5728Envoy\u7684\u914d\u7f6e\u4e2d\u6709\u90e8\u5206\u5b57\u6bb5\u4f1a\u5305\u542bmetadata\u4fe1\u606f\uff0c\u6bd4\u5982listeners, routes, clusters\u7b49\uff0c\u5bf9\u5e94\u5230Protobuf\u5c31\u662f 1 2 3 4 5 message Metadata { // Key is the reverse DNS filter name, e.g. com.acme.widget. The envoy.* // namespace is reserved for Envoy's built-in filters. map < string , google . protobuf . Struct > filter_metadata = 1 ; } \u6bd4\u5982\u96c6\u7fa4\u7684\u6743\u91cd\u3001\u8d1f\u8f7d\u5747\u8861\u4e2d\u7684subset metadata\u4fe1\u606f\u7b49 Typed Metadata Metadata\u662f\u65e0\u7c7b\u578b\uff0c\u56e0\u6b64\u5728\u4f7f\u7528\u4e4b\u524d\u9700\u8981\u5c06\u5176\u8f6c\u6362\u4e3a\u5185\u90e8\u5b9a\u4e49\u7684\u5bf9\u8c61\uff0c\u6bcf\u6b21\u65b0\u5efa\u8fde\u63a5\u6216\u8005\u65b0\u7684\u8bf7\u6c42\u7684\u65f6\u5019\uff0c\u90fd\u9700\u8981\u91cd\u590d\u6267\u884c\uff0c\u5e26\u6765\u7684\u5f00\u9500\u662f\u4e0d\u5c0f\u7684\u3002 Typed Metadata\u5c31\u662f\u7528\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u53ef\u4ee5\u7ed9\u7279\u5b9a\u7684key\u6ce8\u518c\u4e00\u4e2a\u8f6c\u6362\u903b\u8f91\uff0c\u5bf9\u4e8e\u8f93\u5165\u7684Metadata\u5728\u914d\u7f6e\u52a0\u8f7d\u7684\u65f6\u5019\u5c31\u4f1a\u81ea\u52a8\u8f6c\u6362\u6210\u5bf9\u5e94\u7684\u5bf9\u8c61\u3002 \u8fd9\u6837\u5c31\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\uff0c\u907f\u514d\u6bcf\u6b21\u83b7\u53d6Metadata\u8fdb\u884c\u8f6c\u6362\u3002 1 2 class ClusterTypedMetadataFactory : public Envoy::Config::TypedMetadataFactory {}; class HttpRouteTypedMetadataFactory : public Envoy::Config::TypedMetadataFactory {}; HTTP Per-Route Filter Configuration per_filter_config\u5141\u8bb8HTTP filters\u53ef\u4ee5\u6709\u81ea\u5df1\u72ec\u7acb\u7684virtualhost\u548c\u8def\u7531\u914d\u7f6e Dynamic State \u7531\u6bcf\u4e00\u4e2a\u7f51\u7edc\u8fde\u63a5\u3001\u6216\u8005\u662f\u6bcf\u4e00\u4e2aHTTP stream\u4ea7\u751f\uff0c\u8fd9\u4e2a\u5bf9\u8c61\u5305\u542b\u4e86\u5f53\u524dTCP connection\u548cHTTP stream\u76f8\u5173\u7684\u4e00\u4e9b\u4fe1\u606f\u3002\u8fd9\u4e9b\u4fe1\u606f\u662f\u7531\u56fa\u5b9a\u7684\u5c5e\u6027\u7ec4\u6210\u7684\uff0c \u6bd4\u5982HTTP\u7684\u534f\u8bae\u3001\u8bf7\u6c42\u7684server name\u7b49\u7b49\u3002\u6b64\u5916\u8fd8\u63d0\u4f9b\u4e86\u5b58\u50a8typed objects\u7684\u80fd\u529b map<string, FilterState::Object> \uff0c\u7528\u4e8e\u7ed9\u7528\u6237\u63d0\u4f9b\u5b58\u50a8\u4e00\u4e9b\u81ea\u5b9a\u4e49\u4fe1\u606f\u7684\u3002 ConnectionImpl \u4e2d\u5305\u542b\u7684StreamInfo\uff0c\u7528\u4e8e\u5728\u8fde\u63a5\u7ea7\u522b\u5171\u4eab\u4e00\u4e9bState\uff0c Http::ConnectionManagerImpl::ActiveStream \u4e2d\u5305\u542b\u7684\u5219\u662fper stream\u3002","title":"data sharing between filters"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/envoy/proxy/#http-routing","text":"\u57fa\u4e8eVirtual hosts\u7684\u8def\u7531 \u524d\u7f00\u5339\u914d\u3001\u6216\u8005\u662f\u7cbe\u786e\u5339\u914d(\u5927\u5c0f\u5199\u654f\u611f\u6216\u8005\u4e0d\u654f\u611f\u90fd\u53ef\u4ee5)\uff0c\u76ee\u524d\u8fd8\u4e0d\u652f\u6301\u57fa\u4e8e\u6b63\u5219\u7684\u5339\u914d\u3002 TLS redirection Direct Response \u663e\u793a\u7684host\u91cd\u5199 \u81ea\u52a8\u6839\u636e\u9009\u62e9\u7684upstream\u7684DNS name\u8fdb\u884chost\u91cd\u5199 \u524d\u7f00\u91cd\u5199 \u57fa\u4e8e\u6b63\u5219\u8868\u8fbe\u5f0f\u6355\u83b7\u7ec4\u7684\u65b9\u5f0f\u8fdb\u884cpath\u91cd\u5199 \u8bf7\u6c42\u91cd\u8bd5(\u57fa\u4e8e\u914d\u7f6e\u548chttp header\u4e24\u79cd\u65b9\u5f0f) \u8bf7\u6c42\u8d85\u65f6\u63a7\u5236(\u57fa\u4e8e\u914d\u7f6e\u548chttp header\u4e24\u79cd\u65b9\u5f0f) Request hedging Traffic shifting Traffic splitting \u4efb\u4f55\u7684header match \u53ef\u4ee5\u6307\u5b9a\u865a\u62df\u96c6\u7fa4 \u57fa\u4e8e\u4f18\u5148\u7ea7\u7684\u8def\u7531 \u57fa\u4e8ehash policy\u7684\u8def\u7531 \u57fa\u4e8e\u7edd\u5bf9url\u7684\u4ee3\u7406\u8f6c\u53d1 Route Scope For example, for the following scoped route configuration, Envoy will look into the \u201caddr\u201d header value, split the header value by \u201c;\u201d first, and use the first value for key \u2018x-foo-key\u2019 as the scope key. If the \u201caddr\u201d header value is \u201cfoo=1;x-foo-key=127.0.0.1;x-bar-key=1.1.1.1\u201d, then \u201c127.0.0.1\u201d will be computed as the scope key to look up for corresponding route configuration. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 HttpConnectionManager config: scoped_routes: name: foo-scoped-routes scope_key_builder: fragments: - header_value_extractor: name: X-Route-Selector element_separator: , element: separator: = key: vip scoped_route_configurations_list/SRDS: (1) name: route-scope1 route_configuration_name: route-config1 key: fragments: - string_key: 172.10.10.20 (2) name: route-scope2 route_configuration_name: route-config2 key: fragments: - string_key: 172.20.20.30 GET / HTTP/1.1 Host: foo.com X-Route-Selector: vip=172.10.10.20 \u6700\u7ec8\u5339\u914d\u5230route-config1 \u6839\u636e scoped_routes \u83b7\u53d6\u8bf7\u6c42\u4e2d\u7684\u6307\u5b9a\u5b57\u6bb5\uff0c\u7136\u540e\u5207\u5272\u83b7\u53d6\u5230\u5bf9\u5e94\u7684value\uff0c\u7136\u540e\u62ff\u7740value\u548c\u5b9a\u4e49\u7684 scoped_route_configurations \u77e5\u9053\u8981\u4f7f\u7528\u7684\u8def\u7531\u914d\u7f6e\u540d\u79f0 \u91cd\u8bd5\u8bed\u4e49 1 2 3 4 5 6 7 8 9 10 11 12 { \"retry_on\" : \"...\" , \"num_retries\" : \"{...}\" , \"per_try_timeout\" : \"{...}\" , \"retry_priority\" : \"{...}\" , \"retry_host_predicate\" : [], \"host_selection_retry_max_attempts\" : \"...\" , \"retriable_status_codes\" : [], \"retry_back_off\" : \"{...}\" , \"retriable_headers\" : [], \"retriable_request_headers\" : [] } \u53ef\u4ee5\u914d\u7f6e\u91cd\u8bd5\u7684\u6700\u5927\u6b21\u6570\u3001\u91cd\u8bd5\u7684\u6761\u4ef6(\u53ef\u4ee5\u662f\u57fa\u4e8ereseponse code\u3001\u53ef\u4ee5\u662f\u7f51\u7edc\u7b49\u7b49)\uff0cRequest budgets\u53ef\u4ee5\u9632\u6b62\u5927\u91cf\u7684\u8bf7\u6c42\u91cd\u8bd5\u3001\u53ef\u4ee5\u8fdb\u884chost selection rerty 1 2 3 4 5 6 7 8 9 10 11 12 13 14 message DirectResponseAction { // Specifies the HTTP response status to be returned. uint32 status = 1 [( validate . rules ). uint32 = { gte : 100 , lt : 600 }]; // Specifies the content of the response body. If this setting is omitted, // no body is included in the generated response. // // .. note:: // // Headers can be specified using *response_headers_to_add* in the enclosing // :ref:`envoy_api_msg_route.Route`, :ref:`envoy_api_msg_RouteConfiguration` or // :ref:`envoy_api_msg_route.VirtualHost`. core . DataSource body = 2 ; } \u53ef\u4ee5\u6307\u5b9aresponse status code\u548cbody\uff0cbody\u53ef\u4ee5\u662f\u5185\u8054\u5b57\u7b26\u4e32\u6216\u8005\u662f\u4e00\u4e2a\u6587\u4ef6\u8def\u5f84\uff0c\u4f46\u662f\u90fd\u5fc5\u987b\u9650\u5236\u57284K\u4ee5\u5185\uff0c\u56e0\u4e3aEnvoy\u4f1a\u7f13\u5b58body\u3002 5. \u663e\u793a\u7684\u4e3b\u673a\u540d\u91cd\u5199 1 2 route . RouteAction : host_rewrite : \"....\" \u81ea\u52a8\u4e3b\u673a\u91cd\u5199 host header\u4f1a\u88ab\u91cd\u5199\u4e3a\u9009\u62e9\u7684cluster\u4e2d\u7684\u540d\u5b57\uff0c\u8981\u6c42cluster\u9700\u8981\u662fstrict_dns\u6216\u8005\u662flogical_dns\u7c7b\u578b\u3002 1 2 route . RouteAction : auto_host_rewrite : \"....\" // \u548chost_rewrite\u4e8c\u9009\u5176\u4e00 1 2 3 4 5 6 7 8 void Filter::UpstreamRequest::onPoolReady ( Http :: StreamEncoder & request_encoder , Upstream :: HostDescriptionConstSharedPtr host ) { ....... if ( parent_ . route_entry_ -> autoHostRewrite () && ! host -> hostname (). empty ()) { parent_ . downstream_headers_ -> Host () -> value ( host -> hostname ()); } ....... } \u524d\u7f00\u91cd\u5199 1 2 3 4 5 6 7 8 - match : prefix : \"/prefix/\" route : prefix_rewrite : \"/\" - match : prefix : \"/prefix\" route : prefix_rewrite : \"/\" \u7b2c\u4e00\u4e2a\u5c06 /prefix/ \u66ff\u6362\u4e3a / \uff0c\u7b2c\u4e8c\u4e2a\u5219\u662f\u5c06 /prefix \u66ff\u6362\u4e3a / \uff0c\u91cd\u5199\u5b8c\u6210\u540e\u4f1a\u5c06\u4e4b\u524d\u7684\u8def\u5f84\u653e\u5728 x-envoy-original-path header\u4e2d\u3002 \u8bf7\u6c42\u91cd\u8bd5 \u53ef\u4ee5\u57fa\u4e8e\u8bf7\u6c42\u4e2d\u643a\u5e26\u7684header\u6765\u5f00\u542f\u91cd\u8bd5\u3001\u4e5f\u53ef\u4ee5\u914d\u7f6e\u4e00\u4e2aVirtualHost\u7ea7\u522b\u7684\u91cd\u8bd5\u3001\u4e5f\u53ef\u4ee5\u662fRouteAction\u7ea7\u522b\u7684\u91cd\u8bd5\u3002\u5982\u679c\u4e0a\u6e38\u8fd4\u56de x-envoy-overloaded header \u90a3\u4e48\u5c31\u5173\u95ed\u91cd\u8bd5\u3002\u5982\u679cupstream\u8fd4\u56de\u7684header\u4e2d\u5e26\u6709 x-envoy-ratelimited \u4e5f\u8981\u7981\u6b62\u91cd\u8bd5\u3002 timeout \u9ed8\u8ba4\u7684\u8d85\u65f6\u65f6\u95f4\u662f15s\uff0c\u8fd9\u4e2a\u65f6\u95f4\u5305\u542b\u4e86\u4ecedownstream request\u63a5\u6536\u5230end stream\u5f00\u59cb\u5230\u5904\u7406\u5230upstream response\u54cd\u5e94\u7ed3\u675f\u8fd8\u5305\u62ec\u4e86\u6574\u4e2a\u91cd\u8bd5\u671f\u95f4\u7684\u65f6\u95f4\u3002\u53ef\u4ee5\u901a\u8fc7 x-envoy-upstream-rq-timeout-ms header\u6765\u8bbe\u7f6e\u8fd9\u4e2a\u503c\u3002 x-envoy-upstream-rq-per-try-timeout-ms \u901a\u8fc7\u8fd9\u4e2aheader\u6765\u53ef\u4ee5\u63a7\u5236\u5355\u8bcd\u54cd\u5e94\u7684\u8d85\u65f6\u65f6\u95f4 \u4e0d\u5305\u62ecretry\u3002 \u6d41\u91cf\u62c6\u5206/\u8f6c\u79fb 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 virtual_hosts : - name : www2 domains : - '*' routes : - match : prefix : / runtime_fraction : default_value : numerator : 50 denominator : HUNDRED runtime_key : routing.traffic_shift.helloworld route : cluster : helloworld_v1 - match : prefix : / route : cluster : helloworld_v2","title":"HTTP routing"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/envoy/proxy/#connection-pooling","text":"HTTP/1.1 \u8fde\u63a5\u6c60\uff0c\u540c\u6b65\u7684\uff0c\u4e00\u4e2a\u8bf7\u6c42\u7ed1\u5b9a\u4e00\u4e2a\u8fde\u63a5\uff0c\u8fd9\u4e2a\u8fde\u63a5\u5904\u7406\u5b8c\u8fd9\u4e2a\u8bf7\u6c42\uff0c\u624d\u4f1a\u53d8\u6210\u53ef\u7528\u72b6\u6001\uff0c\u624d\u80fd\u5904\u7406\u4e0b\u4e00\u4e2a\u8bf7\u6c42\uff0c\u5355\u4e2adownstream\u65ad\u94fe\u53ea\u80fd\u5bfc\u81f4\u4e00\u4e2a\u8bf7\u6c42\u51fa\u95ee\u9898\u3002 HTTP2/2 \u4e00\u4e2aupstream host\u53ea\u4f1a\u5efa\u7acb\u4e00\u6761\u8fde\u63a5\uff0c\u4e0a\u6e38\u6240\u6709\u7684\u8bf7\u6c42\u90fd\u4f1a\u901a\u8fc7\u6574\u6761\u8fde\u63a5\u53d1\u9001\u5230upstream\u7684\u4e3b\u673a\uff0c\u5982\u679c\u6536\u5230GOAWAY frame\u6216\u8005\u5230\u8fbe\u6700\u5927\u6d41\u9650\u5236\uff0c\u90a3\u4e48\u8fde\u63a5\u6c60 \u4f1a\u91cd\u65b0\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u8fde\u63a5\uff0c\u7136\u540edrain\u6389\u6b63\u5728\u670d\u52a1\u7684\u8fde\u63a5\u3002","title":"Connection pooling"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/envoy/proxy/#runtime","text":"","title":"Runtime"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/envoy/proxy/#xds-rest-and-grpc-protocol","text":"Envoy\u652f\u6301\u901a\u8fc7\u6587\u4ef6\u7cfb\u7edf\u3001\u67e5\u8be2\u7ba1\u7406\u670d\u52a1\u5668\u7684\u65b9\u5f0f\u83b7\u53d6\u5404\u79cd\u7c7b\u578b\u7684\u52a8\u6001\u8d44\u6e90\u3002\u8fd9\u79cd\u53d1\u73b0\u670d\u52a1\u548c\u5176\u5bf9\u5e94\u7684API\u88ab\u79f0\u4e3axDS\uff0c\u8d44\u6e90\u9700\u8981\u901a\u8fc7\u6307\u5b9a\u4e00\u4e2a\u6587\u4ef6\u7cfb\u7edf\u8def\u5f84\u53bbwatch\u3001 \u6216\u8005\u521d\u59cb\u5316\u4e00\u4e2agrpc stream\u6216\u8005\u662f\u901a\u8fc7RESET-JSON URL\u8fdb\u884cpooling\u7684\u65b9\u5f0f\u8fdb\u884c\u8ba2\u9605\u3002\u540e\u4e24\u79cd\u65b9\u5f0f\u4f1a\u901a\u8fc7\u53d1\u9001\u4e00\u4e2a DiscoveryRequest \u8bf7\u6c42\u6765\u83b7\u53d6\u8d44\u6e90\uff0c \u7ba1\u7406\u670d\u52a1\u5668\u4f1a\u8fd4\u56de DiscoveryResponse \uff0c\u5176\u4e2d\u5305\u542b\u4e86\u8bf7\u6c42\u7684\u8d44\u6e90\u3002 \u76ee\u524d\u6709\u4e94\u79cd\u7c7b\u578b\u7684\u8d44\u6e90\uff0c\u5206\u522b\u5982\u4e0b: LDS: envoy.api.v2.Listener RDS: envoy.api.v2.RouteConfiguration CDS: envoy.api.v2.Cluster EDS: envoy.api.v2.ClusterLoadAssignment SDS: envoy.api.v2.Auth.Secret \u6bcf\u4e00\u4e2a\u7c7b\u578b\u7684\u8d44\u6e90\u90fd\u6709\u4e00\u4e2aURL\u6765\u552f\u4e00\u8868\u793a\uff0c\u5176\u5f62\u5f0f\u4e3a type.googleapis.com/<resource type> \u4e0b\u9762\u662f\u4e00\u4e2aDiscoveryRequest\u7684\u4f8b\u5b50: 1 2 3 4 5 6 7 version_info : node : { id : envoy } resource_names : - foo - bar type_url : type.googleapis.com/envoy.api.v2.ClusterLoadAssignment response_nonce : \u5176\u4e2d version_info \u53d6\u7684\u662f\u4e0a\u4e00\u6b21\u6210\u529f\u6536\u5230\u7684response\u4e2d\u643a\u5e26\u7684 version_info \u7684\u503c\uff0c\u5982\u679c\u662f\u7b2c\u4e00\u4e2a\u8bf7\u6c42\uff0c\u90a3\u4e48\u8fd9\u4e2a\u503c\u5c31\u662f\u7a7a\u7684\uff0c\u6bcf\u4e00\u4e2atype url\u7684 version_info \u662f\u72ec\u7acb\u7684\u3002 node \u5219\u662fEnvoy\u8282\u70b9\u7684\u76f8\u5173\u4fe1\u606f resource_names Envoy\u4e2d\u6bcf\u4e00\u7c7b\u8d44\u6e90\u90fd\u662f\u6709\u540d\u5b57\u7684\uff0c\u901a\u8fc7\u643a\u5e26\u8fd9\u4e2a\u5b57\u6bb5\u53ef\u4ee5\u544a\u8bc9\u7ba1\u7406\u670d\u52a1\u5668\u53ea\u8fd4\u56de\u5bf9\u5e94\u7684\u8d44\u6e90\u5373\u53ef\uff0c\u5982\u679c\u4e0d\u643a\u5e26\u5219\u8868\u793a\u9700\u8981\u83b7\u53d6\u8fd9\u7c7b\u8d44\u6e90\u7684\u5168\u90e8 type_url \u552f\u4e00\u6807\u8bc6\u4e00\u7c7b\u8d44\u6e90\u7684\uff0cADS\u9700\u8981\u8fd9\u4e2a\u5b57\u6bb5\u6765\u8bc6\u522b\u51fa\u8fd9\u4e2a\u8bf7\u6c42\u662f\u54ea\u79cd\u7c7b\u578b\u7684 response_nonce \u7528\u4e8e\u663e\u793a\u7684\u5bf9 DiscoverResponse \u505aack \u5982\u679c\u8bf7\u6c42\u88ab\u63a5\u6536\u4e86\uff0c\u90a3\u4e48envoy\u4f1a\u8fdb\u884cack\uff0c\u8fd4\u56de\u7684response_nonce\u5bf9\u5e94DiscoveryResponse\u4e2d\u7684nonce\uff0cversion_info\u5219\u5bf9\u5e94DiscoveryResponse\u4e2d\u7684version_info \u5982\u679c\u62d2\u7edd\u4e86DiscoveryResponse\u5219\u8fd4\u56de\u7684response_nonce\u5bf9\u5e94DiscoveryResponse\u4e2d\u7684nonce\uff0cversion_info\u5219\u5bf9\u5e94\u4e0a\u4e00\u6b21DiscoveryResponse\u4e2d\u7684version_info \u540c\u4e00\u65f6\u95f4\u6709\u591a\u4e2aDiscoveryRequest\u7684\u65f6\u5019\uff0cmangement server\u53ea\u4f1a\u5f71\u54cd\u6700\u540e\u7684\u4e00\u4e2aDiscoverRequest \u5982\u679c\u7ba1\u7406server\u8fd4\u56de\u7684response_nonce\u662f\u4e00\u4e2a\u65b0\u7684\u503c\uff0cEnvoy\u4f1a\u62d2\u7edd\u8fd9\u6b21\u8bf7\u6c42 If Envoy had instead rejected configuration update X, it would reply with error_detail populated and its previous version, which in this case was the empty initial version. The error_detail has more details around the exact error message populated in the message field: LDS/CDS\u7684resource_names\u4e00\u822c\u4e3a\u7a7a\uff0c\u8868\u793a\u83b7\u53d6\u6240\u6709\u7684cluster\u548clistener\u8d44\u6e90\uff0c\u800cEDS\u548cRDS\u4e00\u822c\u4f1a\u5e26\u4e0aresource name\u83b7\u53d6\u611f\u5174\u8da3\u7684\u8d44\u6e90\uff0c\u8fd9\u4e2aresource name\u6765\u81ea\u4e8eLDS\u548cCDS\u3002 \u5982\u679c\u4e00\u4e2aEDS\u6ca1\u6709\u5bf9\u5e94\u7684CDS\uff0c\u90a3\u4e48\u8fd9\u4e2aEDS\u662f\u65e0\u6548\u7684\uff0cEnvoy\u4f1a\u5ffd\u7565\u8fd9\u4e2aEDS\u3002 LDS\u548cCDS\u8bf7\u6c42\u5b58\u5728requesting wramming\u7684\u8fc7\u7a0b\uff0c\u8981\u6c42\u83b7\u53d6\u5230LDS\u548cEDS\u4ee5\u53ca\u4f9d\u8d56\u7684EDS\u548cRDS\uff0cEnvoy\u624d\u7b97\u521d\u59cb\u5316\u5b8c\u6210\u3002 xDS\u5bf9\u4e8e\u5404\u4e2a\u8d44\u6e90\u7684\u987a\u5e8f\u6ca1\u6709\u7ea6\u675f\uff0c\u56e0\u4e3a\u6bcf\u4e00\u4e2a\u8d44\u6e90\u90fd\u662f\u4e00\u4e2a\u5355\u72ec\u7684\u6d41\uff0c\u8d44\u6e90\u7684\u5230\u8fbe\u987a\u5e8f\u4f1a\u5bfc\u81f4\u6d41\u91cf\u5b58\u5728\u4e0b\u964d\u7684\u95ee\u9898\uff0c\u6bd4\u5982\uff0cLDS\u5c31\u7eea\u4e86\u4f46\u662f\u4f9d\u8d56\u7684CDS\u8fd8\u6ca1\u6709\u7ee7\u7eed\uff0c\u90a3\u4e48\u8fd9\u4f1a\u5bfc\u81f4\u8bf7\u6c42\u65e0\u6548\u3002 \u4f46\u662f\u5982\u679cCDS\u5148\u5c31\u7eea\uff0c\u7136\u540eLDS\u518d\u5c31\u7eea\u5c31\u53ef\u4ee5\u907f\u514d\u8fd9\u4e2a\u95ee\u9898\u4e86\u3002\u6240\u4ee5\u4e3a\u4e86\u907f\u514d\u56e0\u4e3a\u8d44\u6e90\u66f4\u65b0\u7684\u987a\u5e8f\u95ee\u9898\u5bfc\u81f4\u6d41\u91cf\u88abdrop\uff0c\u8981\u6c42\u8d44\u6e90\u66f4\u65b0\u7684\u987a\u5e8f\u5982\u4e0b: CDS updates (if any) must always be pushed first. EDS updates (if any) must arrive after CDS updates for the respective clusters. LDS updates must arrive after corresponding CDS/EDS updates. RDS updates related to the newly added listeners must arrive after CDS/EDS/LDS updates. VHDS updates (if any) related to the newly added RouteConfigurations must arrive after RDS updates. Stale CDS clusters and related EDS endpoints (ones no longer being referenced) can then be removed. \u4e3a\u4e86\u4fdd\u8bc1\u8d44\u6e90\u8bf7\u6c42\u7684\u987a\u5e8f\u53ef\u4ee5\u6309\u7167\u4e0a\u8ff0\u5b9a\u4e49\u7684\u987a\u5e8f\uff0c\u9700\u8981\u5c06\u6240\u6709\u7684\u8d44\u6e90\u8bf7\u6c42\u548c\u54cd\u5e94\u63a7\u5236\u5728\u540c\u4e00\u4e2a\u6d41\u4e2d\u3002 xDS\u4e2d\u8d44\u6e90\u7684\u66f4\u65b0\u662f\u6ca1\u529e\u6cd5\u5355\u72ec\u63a8\u9001\u7684\uff0c\u6bcf\u6b21\u63a8\u9001\u7684\u8d44\u6e90\u90fd\u662f\u5168\u91cf\u7684\uff0c\u5373\u4f7f\u5176\u4e2d\u90e8\u5206\u8d44\u6e90\u53d1\u751f\u4e86\u53d8\u66f4\uff0c\u90fd\u662f\u5168\u91cf\u4e0b\u53d1\uff0cenvoy\u5219\u4f1a\u8fdb\u884c\u8d44\u6e90\u5bf9\u6bd4\uff0c\u6709\u53d8\u66f4\u7684\u5219\u8fdb\u884c\u5e94\u7528\u3002 \u8fd9\u6837\u5e26\u6765\u7684\u4f20\u8f93\u6d88\u8017\u8fd8\u662f\u86ee\u5927\u7684\uff0c\u4e3a\u6b64\u6709\u4e86 Incremental xDS \uff0c\u53ea\u4e0b\u53d1\u6709\u53d8\u66f4\u7684\u8d44\u6e90\u3002 Incremental xDS \u4e00\u822c\u7528\u5728\u4ee5\u4e0b\u51e0\u4e2a\u573a\u666f: Initial message in a xDS bidirectional gRPC stream. As an ACK or NACK response to a previous DeltaDiscoveryResponse. In this case the response_nonce is set to the nonce value in the Response. ACK or NACK is determined by the absence or presence of error_detail. Spontaneous DeltaDiscoveryRequest from the client. This can be done to dynamically add or remove elements from the tracked resource_names set. In this case response_nonce must be omitted. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 DeltaDiscoveryRequest { \"node\" : \"{...}\" , \"type_url\" : \"...\" , \"resource_names_subscribe\" : [] , \"resource_names_unsubscribe\" : [] , \"initial_resource_versions\" : \"{...}\" , \"response_nonce\" : \"...\" , \"error_detail\" : \"{...}\" } DeltaDiscoveryResponse { \"system_version_info\" : \"...\" , \"resources\" : [], \"type_url\" : \"...\" , \"removed_resources\" : [], \"nonce\" : \"...\" } \u76ee\u524d\u589e\u91cf\u7684xDS\u53ea\u6709grpc\u7248\u672c\u7684\uff0c\u6ca1\u6709REST\u7248\u672c\uff0c\u8981\u6c42 response_nonce \u5b57\u6bb5\u5fc5\u987b\u6210\u5bf9\u51fa\u73b0\uff0c\u800c\u5168\u91cfxDS\u5219\u4e0d\u9700\u8981\uff0c system_version_info \u5b57\u6bb5\u7528\u4e8edebug\u76ee\u7684\u3002 DeltaDiscoveryRequest \u7528\u4e8e\u51e0\u4e2a\u573a\u666f: xDS\u5efa\u7acb\u540e\u53d1\u8d77\u7684\u7b2c\u4e00\u6b21\u8bf7\u6c42 \u4f5c\u4e3aACK/NACK\u5bf9\u4e8e\u524d\u4e00\u4e2a DeltaDiscoveryResponse \u8fdb\u884c\u54cd\u5e94\uff0c\u5176response_nonce\u7684\u503c\u4e3a\u524d\u4e00\u4e2a DeltaDiscoveryResponse \u4e2d\u7684\u503c\uff0c\u81f3\u4e8e\u662fACK\u8fd8\u662fNACK\u53d6\u51b3\u4e8e error_detail \u662f\u5426\u5b58\u5728 client\u4e3b\u52a8\u53d1\u8d77 DeltaDiscoveryRequest \u8bf7\u6c42\uff0c\u7528\u4e8e\u52a8\u6001\u6dfb\u52a0\u548c\u79fb\u9664\u8ddf\u8e2a\u7684\u8d44\u6e90\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b response_nonce \u5fc5\u987b\u4e3a\u7a7a \u54ea\u4e9b\u60c5\u51b5\u9700\u8981\u52a8\u6001\u6dfb\u52a0\u548c\u79fb\u9664\u8ddf\u8e2a\u7684\u8d44\u6e90? \u5f53\u53d1\u751f\u8fde\u63a5\u6bb5\u6389\u7684\u60c5\u51b5\u4e0b\uff0c\u5ba2\u6237\u7aef\u91cd\u65b0\u8fde\u63a5\u540e\u9700\u8981\u544a\u77e5\u81ea\u5df1\u6240\u62e5\u6709\u7684\u8d44\u6e90\u540d(initial_resource_versions)\uff0c\u5f53\u5ba2\u6237\u7aef\u4e0d\u518d\u5bf9\u67d0\u4e9b\u8d44\u6e90\u611f\u5174\u8da3\u7684\u65f6\u5019\u9700\u8981\u5728 resource_names_unsubscribe \u4e2d\u5217\u51fa\u6765 Reference: 1. https://github.com/envoyproxy/envoy/blob/master/api/XDS_PROTOCOL.md 2. https://developers.google.com/protocol-buffers/docs/proto3#any","title":"xDS REST and gRPC protocol"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/envoy/proxy/#envoycallback","text":"https://github.com/envoyproxy/envoy/pull/6254","title":"Envoy\u751f\u547d\u5468\u671fcallback"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/envoy/proxy/#envoyfilter","text":"Downstream\u8fde\u63a5\u5efa\u7acb\u540e\uff0c\u5f00\u59cb\u521b\u5efafilter\uff0c\u7136\u540e\u521d\u59cb\u5316filter \u56de\u8c03onNewConnection \u56de\u8c03onData 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 bool FilterManagerImpl::initializeReadFilters () { if ( upstream_filters_ . empty ()) { return false ; } // \u521d\u59cb\u5316\u5b8c\u6210\u540e\uff0c\u5f00\u59cb\u4ece\u5934\u5f00\u59cb\u6267\u884cfilter onContinueReading ( nullptr ); return true ; } // \u4f20\u5165\u7684\u662fnullptr\u7684\u65f6\u5019\uff0c\u4ece\u5934\u5f00\u59cb\u6267\u884cfilter\u7684 // \u8bbe\u7f6einitialized_\u6807\u5fd7\u4e3atrue // \u56de\u8c03onNewConnection\uff0c\u5982\u679c\u662f\u8fd4\u56destop\u5c31\u505c\u6b62\u8fd0\u884c\u4e86 // \u7b49\u5f85filter\u8fd4\u56de\u901a\u8fc7ReadFilterCallbacks\u56de\u8c03onContinueReading\u6765\u7ee7\u7eed\u6267\u884c void FilterManagerImpl::onContinueReading ( ActiveReadFilter * filter ) { std :: list < ActiveReadFilterPtr >:: iterator entry ; if ( ! filter ) { entry = upstream_filters_ . begin (); } else { entry = std :: next ( filter -> entry ()); } for (; entry != upstream_filters_ . end (); entry ++ ) { if ( ! ( * entry ) -> initialized_ ) { ( * entry ) -> initialized_ = true ; FilterStatus status = ( * entry ) -> filter_ -> onNewConnection (); if ( status == FilterStatus :: StopIteration ) { return ; } } BufferSource :: StreamBuffer read_buffer = buffer_source_ . getReadBuffer (); if ( read_buffer . buffer . length () > 0 || read_buffer . end_stream ) { FilterStatus status = ( * entry ) -> filter_ -> onData ( read_buffer . buffer , read_buffer . end_stream ); if ( status == FilterStatus :: StopIteration ) { return ; } } } } Example: \u6709\u4e09\u4e2afilter\u3001\u5176\u4e2d\u4efb\u4f55\u4e00\u4e2afilter\u5176\u4e2d\u7684\u4e00\u4e2acallback\u8fd4\u56deStopIteration\u90a3\u4e48\u6574\u4e2a\u6d41\u7a0b\u5c31\u505c\u6b62\u4e86\uff0c\u9700\u8981\u7b49\u5f85\u8c03\u7528onContinueReading\u624d\u80fd\u7ee7\u7eed \u6267\u884c\u4e0b\u4e00\u4e2acallback\u65b9\u6cd5\u3002 FilterA::onNewConnection FilterA::onData FilterB::onNewConnection FilterB::onData FilterC::onNewConnection FilterC::onData \u6267\u884c\u987a\u5e8f\u4e3a: FilterA::onNewConnection->FilterA::onData->FilterB::onNewConnection->FilterB::onData->FilterC::onNewConnection->FilterC::onData \u4efb\u4f55\u4e00\u4e2acallback\u8fd4\u56deStopIteration\u6574\u4e2a\u6d41\u7a0b\u5c31\u4e0d\u4f1a\u7ee7\u7eed\u5f80\u4e0b\u8d70\u4e86\uff0c\u9700\u8981\u7b49\u5f85\u5bf9\u5e94\u7684filter\u56de\u8c03onContinueReading\uff0c\u8fd9\u6837\u5c31\u4f1a\u5e26\u6765\u4e00\u4e2a\u95ee\u9898\uff0c\u4e00\u65e6\u505c\u6b62filter chain \u7ee7\u7eed\u5f80\u4e0b\u8d70\uff0c\u90a3\u4e48\u7f51\u7edc\u5c42\u4f9d\u7136\u4f1a\u6536\u6570\u636e\u5b58\u5728\u5185\u90e8buffer\u91cc\u9762\uff0c\u8fd9\u4f1a\u5bfc\u81f4\u5185\u5b58\u4e0a\u6da8\uff0c\u56e0\u6b64TCP PROXY\u4e2d\u4f1a\u5728\u8c03\u7528onNewConnection\u7684\u65f6\u5019\u5148\u5173\u95ed\u8bfb\uff0c\u7136\u540e\u548cupstream\u5efa\u7acb\u8fde\u63a5 \u8fde\u63a5\u5efa\u7acb\u540e\u624d\u4f1a\u5f00\u542f\u8bfb\uff0c\u9632\u6b62\u5185\u5b58\u88ab\u6253\u7206\u3002","title":"Envoy\u56db\u5c42filter\u6267\u884c\u94fe"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/envoy/proxy/#envoy-internal-header","text":"","title":"Envoy internal header"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/envoy/proxy/#load-balancer","text":"\u5b9e\u73b0\u589e\u91cf\u66f4\u65b0\u7684\u601d\u8def : \u9ed8\u8ba4Config Server\u83b7\u53d6\u5230Host\u5305\u542b\u4e86ip\u3001\u6240\u5728\u673a\u623f\u3001\u5355\u5143\u3001machine group\u3001\u6743\u91cd\u8fd8\u6709\u4e00\u4e9bmetadata\u7b49\uff0c\u90fd\u662f\u673a\u5668\u7eac\u5ea6\u7684\u4fe1\u606f\uff0c\u9664\u4e86\u8fd9\u4e9b\u4fe1\u606f\u5916\uff0cEnvoy\u8fd8\u9700\u8981\u4f18\u5148\u7ea7\u4fe1\u606f\u3001\u673a\u5668\u5065\u5eb7\u72b6\u51b5\u7b49 \u76ee\u524d\u53ef\u4ee5\u9ed8\u8ba4\u4f7f\u7528\u4f18\u5148\u7ea70\u4ee3\u66ff \u3002\u9664\u4e86\u8fd9\u4e9b\u673a\u5668\u7eac\u5ea6\u7684\u4fe1\u606f\u5916\uff0c\u8fd8\u9700\u8981\u6709\u670d\u52a1\u7eac\u5ea6\u7684\u4fe1\u606f(\u4e5f\u53ef\u4ee5\u79f0\u4e3a\u96c6\u7fa4\u7eac\u5ea6\u7684\u4fe1\u606f)\uff0c\u6bd4\u5982\u533a\u57df\u6743\u91cd(\u6bcf\u4e2a\u533a\u57df\u7684\u6743\u91cd)\u3001\u8fc7\u8f7d\u56e0\u5b50\u3001Endpoint\u8fc7\u671f\u65f6\u95f4\u7b49\u3002\u76ee\u524d\u8fd9\u4e2a\u90e8\u5206\u53ef\u4ee5\u4e0d\u5b9e\u73b0\uff0c \u7b49\u5f00\u59cb\u652f\u6301\u8fd9\u7c7b\u529f\u80fd\u7684\u65f6\u5019\u518d\u5355\u72ec\u901a\u8fc7Config Server\u7684SDK\u901a\u77e5\u6211\u8fd9\u7c7b\u5143\u4fe1\u606f\u53d1\u751f\u4e86\u6539\u53d8\u3002\u8fd9\u4e2a\u65f6\u5019\u5c31\u53ef\u4ee5\u66f4\u65b0Locality weight\uff0c\u4fee\u6539 PriorityState \u4ee5\u53ca\u8fc7\u8f7d\u56e0\u5b50\u7b49\u3002\u8fd9\u4e2a\u65f6\u5019\u5c31\u9700\u8981\u89e6\u53d1forch rebuild(\u91cd\u65b0\u5efa\u7acbLB)\u3002 \u5224\u65adhost\u662f\u65b0\u589e\u8fd8\u662fupdated \u5982\u679c\u662fupdate\u5219\u5148\u6e05\u9664 PENDING_DYNAMIC_REMOVAL \uff0c\u56e0\u4e3a\u9a6c\u4e0a\u8981\u52a0\u56de\u6765\u4e86\u3002 \u5224\u65ad\u662f\u5426\u9700\u8981\u539f\u5730\u66f4\u65b0 (\u6709\u5065\u5eb7\u68c0\u67e5\u3001\u5e76\u4e14\u5065\u5eb7\u68c0\u67e5\u7684\u5730\u5740\u4e0d\u540c\uff0c\u8fd9\u4e2a\u65f6\u5019\u4e0d\u80fd\u8df3\u8fc7\u539f\u5730\u66f4\u65b0\uff0c\u5fc5\u987b\u8981\u66f4\u65b0) \u5982\u679c\u662f\u539f\u5730\u66f4\u65b0 \u5224\u65ad\u5065\u5eb7\u72b6\u6001\u662f\u5426\u53d1\u751f\u4e86\u53d8\u5316\uff0c\u6709\u53d8\u5316\u7684\u8bdd\u90fd\u4f1a\u5bfc\u81f4forch rebuild metadata\u53d8\u5316\u4e5f\u9700\u8981\u5bfc\u81f4forch rebuild(config server\u6700\u597d\u76f4\u63a5\u544a\u77e5\u6211metadata\u53d1\u751f\u4e86\u53d8\u5316)\uff0c\u5e76\u66f4\u65b0host\u7684metadata \u4f18\u5148\u7ea7\u53d1\u751f\u4e86\u6539\u53d8\uff0c\u9700\u8981\u66f4\u65b0\u5bf9\u5e94\u673a\u5668\u7684\u4f18\u5148\u7ea7\uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u673a\u5668\u6dfb\u52a0\u5230\u5f53\u524d\u4f18\u5148\u7ea7\u7684\u5217\u8868\u4e2d \u5982\u679c\u4e0d\u662f\u539f\u5730\u66f4\u65b0 \u6dfb\u52a0host\u5230\u5f53\u524d\u4f18\u5148\u7ea7 \u5982\u679c\u5065\u5eb7\u68c0\u67e5\u5f00\u542f\u7684\u8bdd\uff0c\u5148\u8bbe\u7f6e\u8fd9\u4e2a\u673a\u5668\u4e3aFAILED_ACTIVE_AC \u7136\u540e\u770b\u662f\u5426\u662fwarmHosts\uff0c\u5982\u679c\u662f\u5c31\u8bbe\u7f6e\u4e3aPENDING_ACTIVE_HC \u4e00\u4e2a\u4e3b\u673a\u53d1\u751f\u53d8\u5316\u4e86\uff0c\u6709\u51e0\u79cd\u60c5\u51b5: \u65b0ip\u7684\u6dfb\u52a0 \u8001ip\u7684\u5220\u9664 \u673a\u623f\u3001\u5355\u5143\u7b49locality\u53d1\u751f\u4e86\u53d8\u5316 (\u8fd9\u4e2a\u4e0d\u8003\u8651\uff0c\u8fd9\u4e2a\u5982\u679c\u53d1\u751f\u4e86\u53d8\u5316\u4f1a\u4ea7\u751f\u6dfb\u52a0ip\u548c\u5220\u9664ip\u4e24\u4e2a\u4e8b\u4ef6) \u5065\u5eb7\u72b6\u6001\u53d1\u751f\u4e86\u53d8\u5316 \u4f18\u5148\u7ea7\u53d1\u751f\u4e86\u53d8\u5316 \u5143\u4fe1\u606f\u53d1\u751f\u4e86\u53d8\u5316 \u5065\u5eb7\u72b6\u6001\u3001\u4f18\u5148\u7ea7\u3001\u5143\u4fe1\u606f\u53d1\u751f\u53d8\u5316\u66f4\u65b0host\u5373\u53ef Config Server Cluster\u8ba1\u7b97\u903b\u8f91: \u6309\u7167\u4f18\u5148\u7ea7\u5c06added_host\u548cremoved_hosts\u4ee5\u4f18\u5148\u7ea7\u4e3a\u7eac\u5ea6\u5206\u6210\u4e00\u4e2a\u4e2ahost vector \u53d6\u51fa\u4e00\u4e2a\u4f18\u5148\u7ea7\u5f80all_host_\u4e2d\u67e5\u627e\u5982\u679c\u662f\u65b0\u6dfb\u52a0\u7684\u5c31\u653e\u5230hosts_added_to_current_priority\u4e2d(\u5e76\u6267\u884chealthy check\u76f8\u5173\u7684flag\u8bbe\u7f6e) \u5982\u679c\u4e0d\u662f\u65b0\u7684host\u90a3\u5c31\u770b\u662f\u5426\u505a\u539f\u5730\u66f4\u65b0\uff0c\u5982\u679c\u662f\u539f\u5730\u66f4\u65b0\u5c31\u76f4\u63a5\u66f4\u65b0\u5c31\u597d\u4e86\uff0c\u5426\u5219\u5c31\u628a\u8fd9\u4e2a\u673a\u5668\u653e\u5230hosts_added_to_current_priority\u4e2d \u5982\u679c\u53d1\u751f\u4e86\u4f18\u5148\u7ea7\u6539\u53d8\uff0c\u90a3\u4e48\u4e0d\u5149\u5149\u8981\u66f4\u65b0\u673a\u5668\u7684\u4f18\u5148\u7ea7\u8fd8\u9700\u8981\u5c06\u8fd9\u4e2a\u673a\u5668\u6dfb\u52a0\u5230hosts_added_to_current_priority\u5217\u8868\u4e2d\uff0c\u7136\u540e\u5bf9\u5e94\u7684\u8981\u4ece \u8fd9\u4e2a\u673a\u5668\u539f\u6765\u6240\u5728\u4f18\u5148\u7ea7\u4e2d\u8fdb\u884c\u5220\u9664\u3002(\u8fd9\u4e2a\u6211\u4eec\u5360\u65f6\u4e0d\u5904\u7406\uff0c\u5bf9\u4e8e\u589e\u91cf\u7684\u573a\u666f\uff0c\u53ef\u4ee5\u7b80\u5355\u7684\u5c06\u4fee\u6539\u524d\u7684\u4f18\u5148\u7ea7\u7684\u673a\u5668\u653e\u5230removed\u5217\u8868\u4e2d) \u66f4\u65b0host_change\uff0c\u5982\u679c\u90fd\u662f\u539f\u5730\u66f4\u65b0\uff0c\u90a3\u4e48\u5f88\u81ea\u7136host_change\u4e3afalse\u3001\u4f18\u5148\u7ea7\u53d1\u751f\u53d8\u5316\u4e86\u4e5f\u662f\u4e3atrue\u3001metadata\u53d8\u5316\u4e86\u4e5f\u662ftrue \u9700\u8981\u5c06\u6240\u6709host_change\u4e3atrue\u7684\u573a\u666f\u68b3\u7406\u51fa\u6765\uff0c\u7528\u4e8erebuild lb\u3002 \u62ff\u5230\u5f53\u524d\u4f18\u5148\u7ea7\u7684host\uff0c\u5c06hosts_added_to_current_priority\u8ffd\u52a0\u5230\u5f53\u524d\u4f18\u5148\u7ea7\u7684\u5217\u8868\u4e2d\uff0c\u53e6\u5916\u9700\u8981\u8003\u8651\u4e00\u4e2a\u7279\u6b8a\u7684case: host\u662f\u5b58\u5728\u7684\uff0c\u4f46\u662f\u5065\u5eb7\u68c0\u67e5\u5730\u5740\u53d1\u751f\u4e86\u6539\u53d8\uff0c\u90a3\u4e48\u8fd9\u4e2a\u673a\u5668\u9700\u8981\u5bf9\u5f53\u524d\u4f18\u5148\u7ea7\u7684host\u505a\u66ff\u6362\u800c\u4e0d\u662f\u8ffd\u52a0\u4e86\u3002 \u8c03\u7528updateClusterPrioritySet\u8fdb\u884c\u66f4\u65b0\u3002 \u5982\u679clocality weight\u53d1\u751f\u4e86\u6539\u53d8\u5c31\u8bbe\u7f6ehost_change\u4e3atrue updateClusterPrioritySet\u4ecd\u7136\u662f\u5168\u91cfhost\u8fdb\u884c\u8ba1\u7b97(\u8ba1\u7b97\u51faper locality\u7684\u7ed3\u6784)\uff0c\u80fd\u5426\u518d\u5ea6\u4f18\u5316? TODO LocalityWeightMap\u53d1\u751f\u6539\u53d8\u9700\u8981rebuild\uff0c\u8fd9\u4e2a\u5982\u4f55\u8bc6\u522b\u51fa\u6765? Config Server SDK\u5bf9\u4e8elocality weight\u7684\u53d8\u5316\u5355\u72ec\u901a\u77e5\uff0c\u7136\u540e\u6211\u6765\u66f4\u65b0PriorityState\u7ed3\u6784 1 2 3 4 5 6 ClusterLoadAssignment.Policy { \"drop_overloads\" : [] , \"overprovisioning_factor\" : \"{...}\" , \"endpoint_stale_after\" : \"{...}\" } overprovisioning_factor\u4e00\u4e2a\u8fc7\u5ea6\u914d\u7f6e\u7684\u56e0\u5b50\uff0c\u9ed8\u8ba4\u662f140\uff0c\u5f53\u4e00\u4e2apriority\u6216\u8005\u4e00\u4e2alocality\u4e2d\u7684\u5065\u5eb7\u4e3b\u673a\u767e\u5206\u6bd4\u4e58\u4ee5\u8fd9\u4e2a\u56e0\u5b50\u5c0f\u4e8e100\uff0c\u90a3\u4e48\u5c31\u8ba4\u4e3a\u8fd9\u4e2apriority\u6216\u8005locality\u662f\u4e0d\u5065\u5eb7\u7684\u3002","title":"Load balancer"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/envoy/proxy/#degraded-endpoints","text":"Envoy\u652f\u6301\u5c06\u67d0\u4e9bendpoint\u6807\u8bb0\u4e3adegraded\u7684\uff0c\u8fd9\u79cd\u7c7b\u578b\u7684endpoint\u53ef\u4ee5\u63a5\u6536\u6d41\u91cf\uff0c\u4f46\u662f\u53ea\u6709\u5728\u6ca1\u6709\u8db3\u591f\u7684\u5065\u5eb7\u673a\u5668\u7684\u65f6\u5019\u624d\u4f1a\u63a5\u6536\u6d41\u91cf\u6765\u5904\u7406 \u4e0a\u6e38\u4e3b\u673a\u901a\u8fc7\u5728\u8fd4\u56de\u7684header\u4e2d\u6dfb\u52a0 x-envoy-degraded \u5934\u6765\u8868\u660e\u5f53\u524d\u7684\u5065\u5eb7\u68c0\u67e5\u7684\u4e3b\u673a\u662fdegraded\u3002","title":"Degraded endpoints"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/envoy/proxy/#priority-levels","text":"\u5f53\u67d0\u4e00\u4e2aPriority\u662f\u5065\u5eb7\u7684\uff0c\u90a3\u4e48\u4f1a\u63a5\u6536\u5168\u90e8\u6d41\u91cf\uff0c\u4f46\u662f\u5982\u679c\u53d1\u73b0\u6d41\u8fd9\u4e2aPriority\u662f\u4e0d\u5065\u5eb7\u7684\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u6309\u7167100%\u6bd4\u5c06\u6d41\u91cf\u6253\u5230\u4e0b\u4e00\u4e2a\u4f18\u5148\u7ea7\u3002 \u6bd4\u5982\u5065\u5eb7\u7a0b\u5ea6\u662f71%\uff0c\u90a3\u4e480.71 * 140\u7ea6\u7b49\u4e8e99%\uff0c\u90a3\u4e48\u8fd9\u4e2aPriorit\u5c31\u63a5\u653699%\u7684\u6d41\u91cf\uff0c\u5269\u4e0b\u76841%\u6d41\u91cf\u5c31\u53d1\u9001\u5230\u4e0b\u4e00\u4e2aPriority\u3002\u5982\u679c\u6240\u6709\u7684Priority\u52a0\u8d77\u6765\u7684\u5065\u5eb7\u7a0b\u5ea6\u4e0d\u6ee1\u8db3100%\uff0c\u8fd8\u9700\u8981 \u5c06\u6d41\u91cf\u6309\u6bd4\u4f8b\u7f29\u653e\u3002\u6bd4\u5982\u6709\u4e24\u4e2aPriority\uff0c\u7b2c\u4e00\u4e2aPriority\u7684\u5065\u5eb7\u7a0b\u5ea6\u662f20%\uff0c\u7b2c\u4e8c\u4e2a\u662f30%\uff0c\u603b\u7684\u5065\u5eb7\u7a0b\u5ea6\u53ea\u670950%\uff0c\u90a3\u4e48\u6d41\u91cf\u5c31\u4f1a\u5f80\u7b2c\u4e00\u4e2aPriority\u625340\uff0c\u7b2c\u4e8c\u4e2aPriority\u625360%\uff0c\u800c\u4e0d\u662f 0.2 * 140\u7684\u6d41\u91cf\u6253\u5230\u7b2c\u4e00\u4e2aPriority\u4e86\u3002","title":"Priority levels"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/envoy/proxy/#panic-threshold","text":"\u6b63\u5e38\u60c5\u51b5\u4e0bEnvoy\u505a\u8d1f\u8f7d\u5747\u8861\u7684\u65f6\u5019\uff0c\u4f1a\u8003\u8651\u5230healthy\u548cdegraded\u7684\u673a\u5668\u6240\u5360\u7684\u6bd4\u4f8b\u3002\u4f46\u662f\u5982\u679c\u8fd9\u4e2a\u6bd4\u4f8b\u592a\u4f4e\u7684\u60c5\u51b5\u4e0b\uff0cEnvoy\u5219\u4e0d\u8003\u8651\u5065\u5eb7\u72b6\u51b5\u4f1a\u5728\u6240\u6709\u7684\u673a\u5668\u4e0a\u8fdb\u884cbalancer\uff0c\u800c\u8fd9\u4e2a\u88ab\u79f0\u4e3apanic\uff0c \u8fd9\u4e2a\u6bd4\u4f8b\u662fpanic\u9600\u503c\uff0c\u9ed8\u8ba4\u662f50%\u3002\u5982\u679chost\u7684\u5065\u5eb7\u7a0b\u5ea6\u4f4e\u4e8e72%\u5c31\u4f1a\u5c06\u6d41\u91cf\u6253\u5411\u4f4e\u4e00\u7ea7\u7684Priority\uff0c\u5982\u679c\u6240\u6709\u7684Priority\u7684\u5065\u5eb7\u7a0b\u5e8f\u7a0b\u5ea6\u6bd4\u4f8b\u52a0\u8d77\u6765\u5c11\u4e8e100%\uff0c\u90a3\u4e48\u54ea\u4e2a\u4f18\u5148\u7ea7\u4f4e\u4e8e50%\uff0c\u90a3\u4e48\u8fd9\u4e2a\u4f18\u5148\u7ea7 \u5c31\u5904\u4e8epanic\u6a21\u5f0f\uff0c\u6d41\u91cf\u662f\u53d1\u5230\u8fd9\u4e2aPriority\u4e0b\u6240\u6709\u7684\u673a\u5668\u3002\u5982\u679c\u6240\u6709\u7684Priority\u7684\u5065\u5eb7\u7a0b\u5e8f\u7a0b\u5ea6\u6bd4\u4f8b\u52a0\u8d77\u6765\u7b49\u4e8e\u6216\u5927\u4e8e100%\u5c31\u90fd\u4e0d\u4f1a\u51fa\u73b0panic\u6a21\u5f0f\uff0c\u5373\u4f7f\u67d0\u4e9bPriority\u7684\u5065\u5eb7\u7a0b\u5ea6\u662f\u5c0f\u4e8e50%\u7684\u3002","title":"Panic threshold"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/envoy/proxy/#zone-aware-routing","text":"\u8981\u6c42\u59cb\u53d1\u96c6\u7fa4\u548cupstream\u96c6\u7fa4\u4e0d\u662fpanic mode Zone aware routing\u662f\u5f00\u542f\u7684(\u914d\u7f6e\u4e2d\u7684 routing_enabled \u5b57\u6bb5\u8868\u793a\u8fdb\u884czone aware\u7684\u8bf7\u6c42\u767e\u5206\u767e\uff0c\u9ed8\u8ba4\u662f100%) \u59cb\u53d1\u96c6\u7fa4\u548cupstream\u96c6\u7fa4\u6709\u76f8\u540c\u7684zone\u6570\u91cf upstream\u96c6\u7fa4\u6709\u8db3\u591f\u7684\u673a\u5668( min_cluster_size zone aware\u96c6\u7fa4\u7684\u6700\u5c0f\u5927\u5c0f) \u5982\u679c\u59cb\u53d1\u96c6\u7fa4\u4e2d\u7684\u672c\u5730zone\u5360\u6bd4\u8981\u6bd4upstream\u96c6\u7fa4\u4e2d\u7684\u672c\u5730zone\u5360\u6bd4\u9ad8\u7684\u8bdd\uff0c\u90a3\u4e48Envoy\u4f1a\u6309\u7167\u672c\u5730zone\u6240\u5728\u5360\u6bd4\u4f8b\u53ea\u8f6c\u53d1\u90e8\u5206\u6d41\u91cf\u5230upstream\u96c6\u7fa4\u4e2d\uff0c\u5269\u4f59\u7684\u6d41\u91cf\u8fdb\u884c\u8de8\u533a\u57df\u8f6c\u53d1 \u5982\u679c\u59cb\u53d1\u96c6\u7fa4\u4e2d\u7684\u672c\u5730zone\u5360\u6bd4\u8981\u6bd4upstream\u96c6\u7fa4\u4e2d\u7684\u672c\u5730zone\u5360\u6bd4\u5c0f\u7684\u8bdd\uff0c\u6240\u6709\u7684\u6d41\u91cf\u90fd\u4f1a\u76f4\u63a5\u6253\u5230upstream\u4e2d\u7684\u672c\u5730zone \u9700\u8981\u5b9a\u4e00\u4e2a\u4e00\u4e2a\u672c\u5730\u96c6\u7fa4\uff0c\u8fd9\u4e2a\u96c6\u7fa4\u5c31\u662fEnvoy\u7f51\u683c\u7ec4\u6210\u7684\u96c6\u7fa4 1 2 cluster_manager : local_cluster_name : \"local_cluster_name\" 1 2 3 4 { \"routing_enabled\" : \"{...}\" , \"min_cluster_size\" : \"{...}\" }","title":"Zone aware routing"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/envoy/proxy/#load-ststs-reporter","text":"1 2 3 4 5 6 7 config.bootstrap.v2.ClusterManager : { \"local_cluster_name\" : \"...\" , \"outlier_detection\" : \"{...}\" , \"upstream_bind_config\" : \"{...}\" , \"load_stats_config\" : \"{...}\" } load_stats_config \u7528\u4e8e\u914d\u7f6e\u7ba1\u7406\u96c6\u7fa4\uff0c\u542f\u52a8\u7684\u65f6\u5019\uff0c\u4f1a\u7b49\u5f85\u7ba1\u7406\u5e73\u9762\u53d1\u9001LoadStatsResponse\uff0c\u54cd\u5e94\u4e2d\u5e26\u6709\u9700\u8981\u83b7\u53d6stats\u7684\u96c6\u7fa4\u540d\u8bcd\u5217\u8868\uff0cEnvoy\u4f1a\u5b9a\u65f6\u5c06\u8fd9\u4e9b\u96c6\u7fa4\u7684stats\u4fe1\u606f\u53d1\u9001\u5230\u63a7\u5236\u5e73\u9762\u3002","title":"Load Ststs reporter"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/envoy/proxy/#ip-transparency","text":"\u5c06Downstream\u7684remote address\u4f20\u9012\u5230upstream HTTP Headers \u901a\u8fc7x-forwarded-for\u5934\uff0c\u4ec5\u652f\u6301HTTP\u534f\u8bae Proxy Protocol TCP\u5efa\u7acb\u8fde\u63a5\u7684\u65f6\u5019\uff0c\u5c06\u6e90\u5730\u5740\u4fe1\u606f\u4f20\u9012\u8fc7\u6765\uff0c\u9700\u8981upstream\u7684\u4e3b\u673a\u652f\u6301 Original Source Listener Filter Envoy\u901a\u8fc7socket\u53ef\u4ee5\u62ff\u5230\u8fdc\u7a0b\u7684\u5730\u5740\u4e5f\u53ef\u4ee5\u501f\u52a9Proxy Protocol\u62ff\u5230downstream\u7684\u5730\u5740\u4fe1\u606f\u3001\u7136\u540e\u628a\u5730\u5740\u4fe1\u606f\u8bbe\u7f6e\u5230upstream\u7684socket\u4e2d\uff0cupstream\u5728\u8fd4\u56de\u7684\u65f6\u5019 \u9700\u8981\u5c06\u5176\u6d41\u91cf\u6307\u5411envoy\uff0c\u8fd9\u91cc\u9700\u8981\u8ba9Envoy\u548cupstream\u90e8\u7f72\u5728\u4e00\u8d77\uff0c\u7136\u540e\u4f7f\u7528iptables\u6765\u5b8c\u6210\u3002 TODO(tianqian.zyf): \u4f8b\u5b50","title":"IP Transparency"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/envoy/proxy/#istio-iptablessh","text":"-p \u6307\u5b9aenvoy\u7684\u7aef\u53e3\uff0c\u9ed8\u8ba4\u662f15001\uff0c\u6307\u7684\u662f\u62e6\u622a\u5230\u7684\u6d41\u91cf\u5c06\u5bfc\u5165\u5230\u54ea\u4e2a\u7aef\u53e3\uff0c\u9ed8\u8ba4\u662f15001 -u \u6307\u5b9aUID\uff0cEffective UID\u7b49\u4e8e\u6307\u5b9a\u7684\u8fd9\u4e2aUID\u7684\u7a0b\u5e8f\u6d41\u91cf\u4e0d\u88ab\u62e6\u622a\uff0c\u9ed8\u8ba4\u662f1337 -g \u6307\u5b9aGID\uff0cEffective GID\u7b49\u4e8e\u6307\u5b9a\u7684\u8fd9\u4e2aGID\u7684\u7a0b\u5e8f\u6d41\u91cf\u4e0d\u88ab\u62e6\u622a\uff0c\u9ed8\u8ba4\u662f1337 -m \u6307\u5b9a\u6d41\u91cf\u62e6\u622a\u7684\u6a21\u5f0f\uff0cREDIRECT\u8fd8\u662fTPROXY -b \u6307\u5b9a\u54ea\u4e9binbound\u7684\u7aef\u53e3\u88ab\u91cd\u5b9a\u5411\u5230Envoy\u4e2d\uff0c\u591a\u4e2a\u7aef\u53e3\u6309\u7167\u9017\u53f7\u5206\u5272\uff0c\u9ed8\u8ba4\u662f\u6240\u6709\u7684\u6d41\u91cf\u3002 -d \u6392\u9664\u54ea\u4e9binbound\u7aef\u53e3\u4e0d\u8fdb\u884c\u6d41\u91cf\u7684\u91cd\u5b9a\u5411 -i \u6307\u5b9aIP CIDR\u8fdb\u884coutbound\u7684\u6d41\u91cf\u91cd\u5b9a\u5411 -x \u6392\u67e5\u54ea\u4e9bIP\u4e0d\u8fdb\u884coutbound\u7684\u6d41\u91cf\u91cd\u5b9a\u5411 -k \u4ece\u54ea\u4e2a\u865a\u62df\u53e3\u51fa\u53bb\u7684\u6d41\u91cf\u88ab\u8ba4\u4e3a\u662foutbound","title":"istio-iptables.sh \u5206\u6790"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/envoy/proxy/#_4","text":"--allow-unknown-fields \u5173\u95edprotobuf\u9a8c\u8bc1\uff0c\u5ffd\u7565\u65b0\u589e\u5b57\u6bb5\uff0c\u6838\u5fc3\u5b9e\u73b0\u5c31\u662f message.GetReflection()->GetUnknownFields 1 2 3 4 5 6 7 8 9 10 11 12 13 allow_unknown_fields_ = allow_unknown_fields . getValue (); if ( allow_unknown_fields_ ) { MessageUtil :: proto_unknown_fields = ProtoUnknownFieldsMode :: Allow ; } // \u6838\u5fc3\u5b9e\u73b0 static void checkUnknownFields ( const Protobuf :: Message & message ) { if ( MessageUtil :: proto_unknown_fields == ProtoUnknownFieldsMode :: Strict && ! message . GetReflection () -> GetUnknownFields ( message ). empty ()) { throw EnvoyException ( \"Protobuf message (type \" + message . GetTypeName () + \") has unknown fields\" ); } } --enable-mutex-tracing \u4e3b\u8981\u662f\u5229\u7528\u4e86absl\u5e93\u63d0\u4f9b\u7684 RegisterMutexTracer \uff0c\u5c06tracer\u4fe1\u606f\u901a\u8fc7callback\u7684\u65b9\u5f0f\u66b4\u9732\u51fa\u6765 1 2 3 4 5 6 7 8 9 10 MutexTracerImpl & MutexTracerImpl::getOrCreateTracer () { if ( singleton_ == nullptr ) { singleton_ = new MutexTracerImpl ; // There's no easy way to unregister a hook. Luckily, this hook is innocuous enough that it // seems safe to leave it registered during testing, even though this technically breaks // hermeticity. absl :: RegisterMutexTracer ( & Envoy :: MutexTracerImpl :: contentionHook ); } return * singleton_ ; } --drain-time-s 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 // \u8fde\u63a5\u4e2d\u6709\u6d41\u91cf\u7684\u65f6\u5019\u624d\u4f1a\u5b9e\u9645\u8d70\u5230\u8fd9\u6bb5\u4ee3\u7801\uff0c\u7136\u540e\u8fdb\u884cDrain\u5904\u7406 void ConnectionManagerImpl::ActiveStream::encodeHeaders ( ActiveStreamEncoderFilter * filter , HeaderMap & headers , bool end_stream ) { ..... // See if we want to drain/close the connection. Send the go away frame prior to encoding the // header block. if ( connection_manager_ . drain_state_ == DrainState :: NotDraining && connection_manager_ . drain_close_ . drainClose ()) { // This doesn't really do anything for HTTP/1.1 other then give the connection another boost // of time to race with incoming requests. It mainly just keeps the logic the same between // HTTP/1.1 and HTTP/2. connection_manager_ . startDrainSequence (); connection_manager_ . stats_ . named_ . downstream_cx_drain_close_ . inc (); ENVOY_STREAM_LOG ( debug , \"drain closing connection\" , * this ); } ....... } void ConnectionManagerImpl::startDrainSequence () { ASSERT ( drain_state_ == DrainState :: NotDraining ); drain_state_ = DrainState :: Draining ; codec_ -> shutdownNotice (); drain_timer_ = read_callbacks_ -> connection (). dispatcher (). createTimer ( [ this ]() -> void { onDrainTimeout (); }); drain_timer_ -> enableTimer ( config_ . drainTimeout ()); } // Drain \u8d85\u65f6\u65f6\u95f4\uff0c\u9ed8\u8ba4\u662f5000ms\uff0c\u5982\u679c\u662fhttp2\u7684\u534f\u8bae\u4f1a\u5148\u53d1\u4e00\u4e2agoAway\u534f\u8bae\u5e27\uff0c\u5982\u679c\u662fhttp\u534f\u8bae\u5c31\u4ec0\u4e48\u90fd\u4e0d\u505a void ConnectionManagerImpl::onDrainTimeout () { ASSERT ( drain_state_ != DrainState :: NotDraining ); codec_ -> goAway (); drain_state_ = DrainState :: Closing ; checkForDeferredClose (); } // \u6700\u540e\u4f1a\u8c03\u7528close void ConnectionManagerImpl::checkForDeferredClose () { if ( drain_state_ == DrainState :: Closing && streams_ . empty () && ! codec_ -> wantsToWrite ()) { read_callbacks_ -> connection (). close ( Network :: ConnectionCloseType :: FlushWriteAndDelay ); } } --file-flush-interval-msec access log\u6587\u4ef6\u7684\u5237\u76d8\u95f4\u9694","title":"\u547d\u4ee4\u884c\u53c2\u6570"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/envoy/proxy/#xds-resource-patching","text":"\u76ee\u524dendpoint\u6574\u4f53\u662f\u4e00\u4e2aresource\uff0cxDS\u7684\u589e\u91cf\u53ea\u80fd\u662fresource\u7c92\u5ea6\u7684\u589e\u52a0\u548c\u51cf\u5c11\uff0c\u5bf9\u4e8eendpoint\u6765\u8bf4\uff0c\u4ed6\u6574\u4f53\u5c31\u662f\u4e00\u4e2aresource\uff0c\u505a\u4e0d\u4e86\u589e\u91cf\u7684\u52a0\u548c\u51cf\u5c11\uff0c\u56e0\u6b64\u793e\u533a\u63d0\u51fa\u4e86xDS resource patching\u7684\u673a\u5236 \u53ef\u4ee5\u9488\u5bf9\u4e00\u4e2aresource\u5185\u90e8\u505amerge\u3001add\u3001remove\u3001modtify\u7b49\u64cd\u4f5c\uff0c\u76ee\u524d\u8fd8\u5728review\u4e2d\u3002 https://github.com/envoyproxy/envoy/issues/8400","title":"xDS resource patching"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/envoy/proxy/#rebalance","text":"\u7528\u4e8e\u5728\u591a\u4e2aworker\u7ebf\u7a0b\u4e4b\u95f4\u5e73\u8861\u8fde\u63a5\u6570\uff0c\u76ee\u524d\u4f7f\u7528\u7684epoll\u7684\u65b9\u5f0f\u5185\u6838\u7684\u5206\u914d\u7b56\u7565\u662fLIFO\uff0c\u4f1a\u5bfc\u81f4\u8fde\u63a5\u4f1a\u5206\u914d\u5230\u56fa\u5b9a\u7684\u524d\u51e0\u4e2aworker\u7ebf\u7a0b\u4e2d\uff0c\u8fd9\u4e2a\u5728\u5927\u591a\u6570\u60c5\u51b5\u662fOK\u7684\uff0c\u4f46\u662f\u5bf9\u4e8eenvoy egress http2 \u8fd9\u79cd\u5c11\u91cf\u957f\u8fde\u63a5\u7684\u573a\u666f\u6765\u8bf4\u5e76\u4e0d\u662f\u592a\u9002\u5408\uff0c\u8fd9\u79cd\u573a\u666f\u8fde\u63a5\u6570\u5e76\u4e0d\u591a\uff0c\u4f46\u662f\u8fde\u63a5\u4e0a\u7684\u8d1f\u8f7d\u5f88\u5927\u3002 https://github.com/envoyproxy/envoy/pull/8422 https://blog.cloudflare.com/the-sad-state-of-linux-socket-balancing/","title":"rebalance"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/envoy/proxy/#http-dynamic-forward-proxy","text":"\u76ee\u524dEnvoy\u662f\u652f\u6301dynamic forward(istio\u4f7f\u7528\u8fd9\u4e2a\u80fd\u529b\u505aegress)\uff0c\u8fd9\u662f\u901a\u8fc7iptables\u6765\u5b9e\u73b0\u7684\uff0c\u901a\u8fc7iptables\u4fdd\u7559\u5b9e\u9645\u8981\u8bbf\u95ee\u7684\u771f\u5b9eip(\u4e5f\u53ef\u4ee5\u662f\u901a\u8fc7http\u7684header x-envoy-original-dst-host \u6765\u4f20\u9012)\uff0c\u7136\u540e\u901a\u8fc7\u8fd9\u4e2aip\u52a8\u6001\u6dfb\u52a0\u5230cluster\u4e2d\uff0c\u4f46\u8fd9\u4e2a\u65b9\u6848\u5e76\u4e0d\u901a\u7528\u4f9d\u8d56iptables\uff0cHTTP dynamic forward proxy\u5219\u662f\u4f7f\u7528http host header\u8fdb\u884c\u52a8\u6001dns\u89e3\u6790\uff0c\u7136\u540e\u901a\u8fc7\u65b0\u589e\u7684cluster type(dynamic_forward_proxy)\u6765\u5b9e\u73b0\u5c06\u52a8\u6001\u89e3\u6790\u7684DNS\u7ed3\u679c\u653e\u5230\u96c6\u7fa4\u4e2d\u5e76\u628a\u89e3\u6790\u7ed3\u679c\u7f13\u5b58\u8d77\u6765\uff0c\u5f53\u7b2c\u4e00\u6b21\u8bf7\u6c42\u7684\u65f6\u5019\u6ca1\u6709\u5bf9\u5e94\u7684DNS\u89e3\u6790\u7ed3\u679c\u65f6\uff0c\u4f1a\u901a\u8fc7\u65b0\u589e\u7684http dynamic forward proxy filter\u4e2d\u65ad\u5f53\u524d\u7684\u8bf7\u6c42\uff0c\u7136\u540e\u5f02\u6b65\u8fdb\u884cDNS\u89e3\u6790\uff0c\u7b49\u89e3\u6790\u5b8c\u6210\u540e\u518d\u7ee7\u7eed\u8f6c\u53d1\u8bf7\u6c42\u3002\u540e\u7eed\u8bf7\u6c42\u8fdb\u6765\u7684\u65f6\u5019\uff0c\u76f4\u63a5\u4f7f\u7528DNS\u7684\u7f13\u5b58\u7ed3\u679c\u8fdb\u884c\u8bf7\u6c42\u8f6c\u53d1\u3002 https://github.com/envoyproxy/envoy/pull/7307","title":"HTTP dynamic forward proxy"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/envoy/proxy/#on-demand-vhds","text":"RouteConfiguration \u4e0b\u9762\u5305\u542b\u4e86 route.VirtualHost \uff0c route.VirtualHost \u91cc\u9762\u518d\u5305\u542bRoute\u548cAction\uff0cistio\u521b\u5efavirtual service\u7684\u65f6\u5019\uff0c\u4f1a\u5bfc\u81f4\u6574\u4e2a RouteConfiguration \u90fd\u53d1\u751f\u66f4\u65b0\uff0c\u5b9e\u9645\u53ea\u662f\u65b0\u589e\u4e00\u4e2a VirtualHost \u6216\u8005\uff0c\u662f\u66f4\u65b0\u4e00\u4e2a VirtualHost \u6761\u76ee\u3002\u901a\u8fc7VHDS\u53ef\u4ee5\u5c06 RouteConfiguration \u548c VirtualHost \u89e3\u8026\u3002\u7ed3\u5408\u5dee\u91cf\u66f4\u65b0\u8fd8\u53ef\u4ee5\u505a\u5230\u6309\u9700\u66f4\u65b0\u3002\u6b64\u5916\u8fd9\u91cc\u7684on-demand\u6307\u7684\u662f\u5f53\u53d1\u8d77\u8bf7\u6c42\u7684\u65f6\u5019\uff0c\u4f1a\u901a\u8fc7on-demand filter\u53bb\u670d\u52a1\u7aef\u67e5\u8be2\u5bf9\u5e94\u7684\u8def\u7531\u6761\u76ee\uff0c\u7136\u540e\u5408\u5e76\u5230 RouteConfiguration \u4e2d\uff0c\u800c\u4e0d\u662f\u4e00\u6b21\u6027\u5168\u4e0b\u53d1\u4e0b\u6765\u3002 https://github.com/envoyproxy/envoy/pull/8617","title":"on-demand VHDS"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/envoy/proxy/#stats-symbol","text":"\u5f15\u5165symbol tables\uff0c\u5c06\u4e00\u4e2ametrics\u6309\u7167\".\"\u53f7\u5206\u5272\u6210\u591a\u4e2a\u90e8\u5206\uff0c\u6bcf\u4e00\u4e2a\u90e8\u5206\u8fdb\u884c\u7f16\u7801\u5b58\u5728symbol table\u4e2d\uff0c\u5e76\u5206\u914d\u4e00\u4e2asymbol id\uff0c\u91cd\u590d\u5f15\u7528\u76f8\u540c\u7684\u90e8\u5206\u4ec5\u9700\u8981\u4fdd\u5b58symbol id\uff0c\u901a\u8fc7\u8fd9\u4e2aid\u6765\u627e\u5230\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u3002 https://github.com/envoyproxy/envoy/pull/5321","title":"stats symbol\u4f18\u5316"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/envoy/proxy/#wasm","text":"\u76ee\u524dwasm\u4e3b\u8981\u662fgoogle\u7684\u4eba\u5728\u4e3b\u5bfc\uff0c\u6709\u4e00\u4e2a\u72ec\u7acb\u7684\u4ed3\u5e93envoy-wasm\uff0c\u76ee\u524distio\u5df2\u7ecf\u5728\u4f7f\u7528\u8fd9\u4e2a\u4ed3\u5e93\u505a\u4e00\u4e9b\u5b9e\u9a8c\u6027\u7684\u529f\u80fd\uff0c\u5c06mixer\u7684\u90e8\u5206\u80fd\u529b\u901a\u8fc7wasm\u7684\u65b9\u5f0f\u6765\u63d0\u4f9b\uff0c\u4e0e\u6b64\u540c\u65f6wasm\u7684\u4ee3\u7801\u4e5f\u5728\u540c\u6b65\u63d0\u4ea4\u5230 Envoy\u5b98\u65b9\u793e\u533a\uff0c\u4e00\u65e6\u5168\u90e8\u5408\u5e76\u8fdb\u53bb\uff0cistio\u4f1a\u5c06\u4ed3\u5e93\u91cd\u65b0\u6307\u5411envoy\u5b98\u65b9\u6602\u54ed\u3002 https://github.com/envoyproxy/envoy/pulls?utf8=%E2%9C%93&q=wasm https://istio.io/docs/ops/telemetry/in-proxy-service-telemetry/","title":"wasm"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/envoy/proxy/#adaptive-concurrency","text":"\u53c2\u8003Netflix\u2019s concurrency limits Java library.\u7684\u7b97\u6cd5\u5b9e\u73b0\u4e86\u4e00\u4e2a\u4e03\u5c42\u7684http filter\uff0c\u7528\u6765\u505a\u81ea\u9002\u5e94\u7684\u5e76\u53d1\u9650\u6d41\u3002 https://github.com/envoyproxy/envoy/pull/8582 https://github.com/envoyproxy/envoy/issues/7789 https://github.com/Netflix/concurrency-limits The adaptive concurrency filter dynamically adjusts the allowed number of requests that can be outstanding (concurrency) to all hosts in a given cluster at any time. Concurrency values are calculated using latency sampling of completed requests and comparing the measured samples in a time window against the expected latency for hosts in the cluster. \u4e00\u4e2ahttp filter\uff0c\u7528\u4e8e\u52a8\u6001\u8c03\u6574\u5141\u8bb8\u53d1\u51fa\u53bb\u7684\u8bf7\u6c42\uff0c\u5e76\u53d1\u5ea6\u901a\u8fc7\u5bf9\u5df2\u5b8c\u6210\u8bf7\u6c42\u7684\u5ef6\u8fdf\u91c7\u6837\u548c\u4e00\u4e2a\u65f6\u95f4\u7a97\u53e3\u4e2d\u6d4b\u91cf\u7684\u6837\u672c\u8fdb\u884c\u6bd4\u8f83\uff0c\u7fa4\u96c6\u4e2d\u4e3b\u673a\u7684\u9884\u671f\u5ef6\u8fdf\u3002 Gradient Controller: \u68af\u5ea6\u63a7\u5236\u5668\u6839\u636e\u5b9a\u671f\u6d4b\u91cf\u7684\u7406\u60f3round-trip\u65f6\u95f4 Concurrency Controllers: \u5b9e\u73b0\u4e86\u4e00\u4e2a\u7b97\u6cd5\uff0c\u7528\u4e8e\u5bf9\u6bcf\u4e00\u4e2a\u8bf7\u6c42\u8d1f\u8d23\u8f6c\u53d1\u7684\u51b3\u7b56\uff0c\u5e76\u8bb0\u5f55\u5ef6\u8fdf\u7528\u6765\u8ba1\u7b97\u5e76\u53d1\u9650\u5236","title":"adaptive concurrency"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/envoy/proxy/#grpc-xds","text":"\u4ece\u6700\u4e0a\u5c42\u5f00\u59cb\u5206\u6790(\u4ee5cds\u4e3a\u4f8b): cds_api\u521b\u5efa\u8ba2\u9605\u5668 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class CdsApiImpl : public CdsApi , Config :: SubscriptionCallbacks , Logger :: Loggable < Logger :: Id :: upstream > { private : std :: unique_ptr < Config :: Subscription > subscription_ ; } CdsApiImpl :: CdsApiImpl ( const envoy :: config :: core :: v3alpha :: ConfigSource & cds_config , ClusterManager & cm , Stats :: Scope & scope , ProtobufMessage :: ValidationVisitor & validation_visitor ) : cm_ ( cm ), scope_ ( scope . createScope ( \"cluster_manager.cds.\" )), validation_visitor_ ( validation_visitor ) { // \u901a\u8fc7SubscriptionFactory\u6765\u521b\u5efa\u7684 subscription_ = cm_ . subscriptionFactory (). subscriptionFromConfigSource ( cds_config , loadTypeUrl ( cds_config . resource_api_version ()), * scope_ , * this ); } \u8fd4\u56de\u7684\u662f\u4e00\u4e2a Subscription \uff0cCDS\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2a\u63a5\u53e3\u8bbe\u7f6e\u548c\u66f4\u65b0\u8981\u8ba2\u9605\u7684\u8d44\u6e90\u540d 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Subscription { public : virtual ~ Subscription () = default ; /** * Start a configuration subscription asynchronously. This should be called once and will continue * to fetch throughout the lifetime of the Subscription object. * @param resources set of resource names to fetch. */ virtual void start ( const std :: set < std :: string >& resource_names ) PURE ; /** * Update the resources to fetch. * @param resources vector of resource names to fetch. It's a (not unordered_)set so that it can * be passed to std::set_difference, which must be given sorted collections. */ virtual void updateResourceInterest ( const std :: set < std :: string >& update_to_these_names ) PURE ; }; \u5b9e\u9645\u4e0a\u662f\u521b\u5efa\u4e86 GrpcMuxSubscriptionImpl \uff0c\u5e76\u5c06 CdsApiImpl \u4f20\u7ed9 GrpcMuxSubscriptionImpl \u901a\u8fc7 SubscriptionCallbacks \u5c06\u8ba2\u9605\u5230\u7684\u5185\u5bb9\u56de\u8c03\u7ed9 CdsApiImpl 1 2 3 4 5 6 7 8 9 10 11 12 case envoy :: config :: core :: v3alpha :: ConfigSource :: ConfigSourceSpecifierCase :: kAds : { if ( cm_ . adsMux () -> isDelta ()) { result = std :: make_unique < DeltaSubscriptionImpl > ( cm_ . adsMux (), type_url , callbacks , stats , Utility :: configSourceInitialFetchTimeout ( config ), true ); } else { result = std :: make_unique < GrpcMuxSubscriptionImpl > ( cm_ . adsMux (), callbacks , stats , type_url , dispatcher_ , Utility :: configSourceInitialFetchTimeout ( config )); } break ; } SubscriptionCallbacks\u7ee7\u627f\u4e86 SubscriptionCallbacks \u548c Subscription 1 2 3 4 5 6 7 8 class GrpcMuxSubscriptionImpl : public Subscription , GrpcMuxCallbacks , Logger :: Loggable < Logger :: Id :: config > { private : GrpcMuxSharedPtr grpc_mux_ ; SubscriptionCallbacks & callbacks_ ; GrpcMuxWatchPtr watch_ {}; } GrpcMuxCallbacks\u672c\u8d28\u4e0a\u548cSubscriptionCallbacks\u662f\u4e00\u6837\u7684\uff0c GrpcMuxSubscriptionImpl \u901a\u8fc7\u5e95\u5c42\u7684 GrpcMuxSharedPtr (\u5b83\u4f1a\u56de\u8c03GrpcMuxCallbacks\u628a\u6536\u5230\u7684\u5185\u5bb9\u8fd4\u56de\u7ed9GrpcMuxSubscriptionImpl) GrpcMuxSubscriptionImpl\u518d\u8c03\u7528 SubscriptionCallbacks \u628a\u6536\u5230\u7684\u5185\u5bb9\u900f\u4f20\u7ed9\u4e0a\u5c42\u7684CDS API\u3002 1 2 3 4 5 6 7 void GrpcMuxSubscriptionImpl::onConfigUpdate ( const Protobuf :: RepeatedPtrField < ProtobufWkt :: Any >& resources , const std :: string & version_info ) { ....... callbacks_ . onConfigUpdate ( resources , version_info ); ....... } \u63a5\u4e0b\u6765\u770b\u4e0b\u8fd9\u4e2a GrpcMuxWatchPtr watch_{}; \uff0c\u5b83\u662f\u901a\u8fc7 grpc_mux_ \u521b\u5efa\u7684\u3002\u53ef\u4ee5\u901a\u8fc7 GrpcMuxWatch \u6765\u53d6\u6d88\u8ba2\u9605\u3002 1 2 3 4 5 6 7 8 9 watch_ = grpc_mux_ -> subscribe ( type_url_ , resources , * this ); /** * Handle on an muxed gRPC subscription. The subscription is canceled on destruction. */ class GrpcMuxWatch { public : virtual ~ GrpcMuxWatch () = default ; }; \u6700\u540e\u5c31\u5269\u4e0b\u6700\u4e3a\u6838\u5fc3\u7684 grpc_mux_ \u4e86\uff0c\u5b83\u662f\u901a\u8fc7 cm_.adsMux() \u521b\u5efa\u51fa\u6765\u7684\u3002\u662fClusterManagerImpl\u7684\u6210\u5458\uff0c\u770b\u8d77\u6765\u662f\u6240\u6709\u4e0a\u5c42\u7684xDS\u8ba2\u9605\u662f\u590d\u7528\u540c\u4e00\u4e2a GrpcMuxSharedPtr \u4e86 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 class ClusterManagerImpl : public ClusterManager , Logger :: Loggable < Logger :: Id :: upstream > { public : Config :: GrpcMuxSharedPtr adsMux () override { return ads_mux_ ; } private : Config :: GrpcMuxSharedPtr ads_mux_ ; } ads_mux_ = std :: make_shared < Config :: GrpcMuxImpl > ( local_info , Config :: Utility :: factoryForGrpcApiConfigSource ( * async_client_manager_ , dyn_resources . ads_config (), stats ) -> create (), main_thread_dispatcher , * Protobuf :: DescriptorPool :: generated_pool () -> FindMethodByName ( dyn_resources . ads_config (). transport_api_version () == envoy :: config :: core :: v3alpha :: ApiVersion :: V3ALPHA ? \"envoy.service.discovery.v3alpha.AggregatedDiscoveryService.\" \"StreamAggregatedResources\" : \"envoy.service.discovery.v2.AggregatedDiscoveryService.\" \"StreamAggregatedResources\" ), random_ , stats_ , Envoy :: Config :: Utility :: parseRateLimitSettings ( dyn_resources . ads_config ()), bootstrap . dynamic_resources (). ads_config (). set_node_on_first_message_only ()); \u5176\u5b9e\u73b0\u5305\u542b\u4e86\u591a\u4e2a\uff0c\u53ef\u80fd\u662f\u589e\u91cf\u5b9e\u73b0NewGrpcMuxImpl\u3001\u4e5f\u6709\u53ef\u80fd\u662f\u5168\u91cf\u5b9e\u73b0GrpcMuxImpl\u3001\u6216\u8005\u662f\u7a7a\u5b9e\u73b0NullGrpcMuxImpl\uff0c\u6211\u4eec\u4e3b\u8981\u770b\u4e0b GrpcMuxImpl \u7684\u5b9e\u73b0 1 2 3 4 5 6 7 8 9 10 class GrpcMuxImpl : public GrpcMux , public GrpcStreamCallbacks < envoy :: service :: discovery :: v3alpha :: DiscoveryResponse > , public Logger :: Loggable < Logger :: Id :: config > { private : GrpcStream < envoy :: service :: discovery :: v3alpha :: DiscoveryRequest , envoy :: service :: discovery :: v3alpha :: DiscoveryResponse > grpc_stream_ ; } \u6838\u5fc3\u662fgrpc_stream_\uff0c\u901a\u8fc7GrpcStream\u53ef\u4ee5\u53d1\u9001\u3001\u5efa\u7acbstream\u6d41 GrpcStream Grpc\u4e2d\u7684\u4e00\u4e2a\u6d41\u662f\u5bf9 Grpc::AsyncStream \u7684\u5c01\u88c5\uff0c\u7ee7\u627f\u81ea Grpc::AsyncStreamCallbacks \uff0c\u63d0\u4f9b\u4e86\u4e00\u4e2a void onReceiveMessage(std::unique_ptr<ResponseProto>&& message) override \u63a5\u53e3 \u7528\u4e8e\u8fd4\u56de\u6536\u5230\u7684message\uff0c\u7ec4\u5408\u4e86 Grpc::AsyncClient \u7528\u6765\u521b\u5efa Grpc::AsyncStream \uff0c\u63d0\u4f9b\u4e86sendMessage\u6765\u53d1\u9001 stream \uff0c\u540c\u65f6\u4e5f\u63d0\u4f9b\u4e86 onReceiveMessage \uff0c\u5f53\u6536\u5230message\u540e\uff0c\u56de\u8c03 GrpcStreamCallbacks \u7684onDiscoveryResponse\u65b9\u6cd5 Grpc::AsyncStreamCallbacks \u63d0\u4f9b\u4e86 onReceiveMessage \u7684\u56de\u8c03\uff0c\u901a\u8fc7 Grpc::AsyncStream \u53d1\u51famessage\u540e\uff0c\u901a\u8fc7\u8fd9\u4e2acallback\u83b7\u5f97\u8fd4\u56de\u7684\u6d88\u606f Grpc::AsyncClient grpc Client \u6765\u521b\u5efa\u4e00\u4e2a Grpc::AsyncStream GrpcStreamCallbacks \uff0c\u63d0\u4f9b\u4e86\u51e0\u4e2a\u548cstream\u76f8\u5173\u7684callback 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 template < class ResponseProto > class GrpcStreamCallbacks { public : virtual ~ GrpcStreamCallbacks () = default ; /** * For the GrpcStream to prompt the context to take appropriate action in response to the * gRPC stream having been successfully established. */ virtual void onStreamEstablished () PURE ; /** * For the GrpcStream to prompt the context to take appropriate action in response to * failure to establish the gRPC stream. */ virtual void onEstablishmentFailure () PURE ; /** * For the GrpcStream to pass received protos to the context. */ virtual void onDiscoveryResponse ( std :: unique_ptr < ResponseProto >&& message ) PURE ; /** * For the GrpcStream to call when its rate limiting logic allows more requests to be sent. */ virtual void onWriteable () PURE ; }; GrpcSubscriptionImpl Config::Subscription \u6240\u6709\u8ba2\u9605\u7684\u62bd\u8c61\u63a5\u53e3\uff0c\u63d0\u4f9b\u4e86start\u548cupdateResourceInterest\u6765\u66f4\u65b0\u8d44\u6e90\u7684\u8ba2\u9605\uff0c\u76ee\u524d\u6709\u51e0\u4e2a\u5b9e\u73b0: GrpcSubscriptionImpl \u5bf9\u5e94xDS GrpcMuxSubscriptionImpl \u5bf9\u5e94ADS DeltaSubscriptionImpl \u589e\u91cfxDS GrpcMuxSubscriptionImpl \u589e\u91cfADS HttpSubscriptionImpl REST SubscriptionCallbacks \u63d0\u4f9b onConfigUpdate \u3001 onConfigUpdateFailed \u3001 resourceName \u7b49\u56de\u8c03\uff0c\u6bcf\u4e00\u4e2axDS\u7c7b\u578b\u90fd\u7ee7\u627f\u8fd9\u4e2acallback\u7528\u6765\u63a5\u6536\u914d\u7f6e\u66f4\u65b0\u7684\u901a\u77e5 GrpcMux \u7528\u6765\u7ba1\u7406\u5355\u4e2astream\u4e0a\u7684\u591a\u4e2a\u8ba2\u9605\u7684\uff0c\u5178\u578b\u7684\u5c31\u662fADS stream\u4e0a\u5904\u7406EDS\u3001CDS\u3001LDS\u7b49\u8ba2\u9605\uff0c\u4e3b\u8981\u662f\u63d0\u4f9b\u4e86start\u3001pause\u3001resume\u3001addOrUpdateWatch\u7b49\u7b49 GrpcMuxWatch GrpcMuxWatchImpl \u7ee7\u627f GrpcMuxWatch \u6bcf\u8ba2\u9605\u4e00\u6b21\u8d44\u6e90\u5c31\u521b\u5efa\u4e00\u4e2a GrpcMuxWatchImpl \uff0c\u6790\u6784\u7684\u65f6\u5019\u53ef\u4ee5\u7528\u6765\u8fdb\u884ccancel\u8d44\u6e90\u8ba2\u9605\u3002 GrpcMuxCallbacks \u6838\u5fc3\u7684ADS\u56de\u8c03\uff0c\u7528\u4e8e\u5bf9\u63a5\u6536\u5230\u7684xDS\u8d44\u6e90\u8fdb\u884c\u5bf9\u5e94\u7684\u56de\u8c03\uff0c\u6838\u5fc3\u63a5\u53e3\u662f: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 /** * A grouping of callbacks that a GrpcMux should provide to its GrpcStream. */ class GrpcMuxCallbacks { public : virtual ~ GrpcMuxCallbacks () = default ; /** * Called when a configuration update is received. * @param resources vector of fetched resources corresponding to the configuration update. * @param version_info update version. * @throw EnvoyException with reason if the configuration is rejected. Otherwise the configuration * is accepted. Accepted configurations have their version_info reflected in subsequent * requests. */ virtual void onConfigUpdate ( const Protobuf :: RepeatedPtrField < ProtobufWkt :: Any >& resources , const std :: string & version_info ) PURE ; /** * Called when either the subscription is unable to fetch a config update or when onConfigUpdate * invokes an exception. * @param reason supplies the update failure reason. * @param e supplies any exception data on why the fetch failed. May be nullptr. */ virtual void onConfigUpdateFailed ( Envoy :: Config :: ConfigUpdateFailureReason reason , const EnvoyException * e ) PURE ; /** * Obtain the \"name\" of a v2 API resource in a google.protobuf.Any, e.g. the route config name for * a RouteConfiguration, based on the underlying resource type. */ virtual std :: string resourceName ( const ProtobufWkt :: Any & resource ) PURE ; }; \u7b49\u4e8eSubscriptionCallbacks\uff0c\u4e24\u8005\u662f\u4e00\u81f4\u7684\uff0c\u542b\u4e49\u76f8\u540c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 class Subscription { public : virtual ~ Subscription () = default ; /** * Start a configuration subscription asynchronously. This should be called once and will continue * to fetch throughout the lifetime of the Subscription object. * @param resources set of resource names to fetch. */ virtual void start ( const std :: set < std :: string >& resource_names ) PURE ; /** * Update the resources to fetch. * @param resources vector of resource names to fetch. It's a (not unordered_)set so that it can * be passed to std::set_difference, which must be given sorted collections. */ virtual void updateResourceInterest ( const std :: set < std :: string >& update_to_these_names ) PURE ; }; class SubscriptionCallbacks { public : virtual ~ SubscriptionCallbacks () = default ; virtual void onConfigUpdate ( const Protobuf :: RepeatedPtrField < ProtobufWkt :: Any >& resources , const std :: string & version_info ) PURE ; virtual void onConfigUpdate ( const Protobuf :: RepeatedPtrField < envoy :: service :: discovery :: v3alpha :: Resource >& added_resources , const Protobuf :: RepeatedPtrField < std :: string >& removed_resources , const std :: string & system_version_info ) PURE ; virtual void onConfigUpdateFailed ( ConfigUpdateFailureReason reason , const EnvoyException * e ) PURE ; virtual std :: string resourceName ( const ProtobufWkt :: Any & resource ) PURE ; }; \u6240\u6709\u7684\u4e0a\u5c42API(LDS/CDS/EDS/..)\u7b49\u90fd\u7ee7\u627f\u4e86 SubscriptionCallbacks \u7528\u4e8e\u83b7\u53d6\u8ba2\u9605\u5230\u7684\u6570\u636e\u3002 GrpcMuxSubscriptionImpl\u7ee7\u627fGrpcMuxCallbacks\u548cSubscription\u53ef\u4ee5\u7ed9\u4e0a\u5c42API(CDS/LDS/EDS...)\u7b49\u63d0\u4f9b\u8d44\u6e90\u8ba2\u9605\u7684\u63a5\u53e3(Subscription)\u6765\u8ba2\u9605\u8d44\u6e90 \u6bcf\u4e00\u7c7b\u8d44\u6e90\u90fd\u9700\u8981\u6709\u4e00\u4e2aGrpcMuxSubscriptionImpl\u7c7b\uff0c\u8fd9\u4e2a\u7c7b\u8d1f\u8d23\u63d0\u4f9b\u8d44\u6e90\u8ba2\u9605\u3001\u66f4\u65b0\u8d44\u6e90\u7b49\uff0c\u8fd8\u6709\u5c06\u8ba2\u9605\u7684\u5185\u5bb9\u56de\u8c03\u7ed9\u4e0a\u5c42API 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 class SubscriptionFactory { public : virtual ~ SubscriptionFactory () = default ; /** * Subscription factory interface. * * @param config envoy::api::v2::core::ConfigSource to construct from. * @param type_url type URL for the resource being subscribed to. * @param scope stats scope for any stats tracked by the subscription. * @param callbacks the callbacks needed by all Subscription objects, to deliver config updates. * The callbacks must not result in the deletion of the Subscription object. * @return SubscriptionPtr subscription object corresponding for config and type_url. */ virtual SubscriptionPtr subscriptionFromConfigSource ( const envoy :: config :: core :: v3alpha :: ConfigSource & config , absl :: string_view type_url , Stats :: Scope & scope , SubscriptionCallbacks & callbacks ) PURE ; }; case envoy :: config :: core :: v3alpha :: ConfigSource :: ConfigSourceSpecifierCase :: kAds : { if ( cm_ . adsMux () -> isDelta ()) { result = std :: make_unique < DeltaSubscriptionImpl > ( cm_ . adsMux (), type_url , callbacks , stats , Utility :: configSourceInitialFetchTimeout ( config ), true ); } else { result = std :: make_unique < GrpcMuxSubscriptionImpl > ( cm_ . adsMux (), callbacks , stats , type_url , dispatcher_ , Utility :: configSourceInitialFetchTimeout ( config )); } break ; } \u9488\u5bf9\u6bcf\u4e00\u4e2atype_url\u7684\u8d44\u6e90\u90fd\u521b\u5efa\u4e00\u4e2a\u8ba2\u9605\u5668\uff0c\u7b49\u5f85\u5185\u5bb9\u56de\u8c03\u3002\u5b9e\u9645\u8ba2\u9605\u5668\u5c31\u662fGrpcMuxSubscriptionImpl\u5bf9\u8c61\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u770b\u4e0b GrpcMuxSubscriptionImpl \u5bf9\u8c61 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 class GrpcMuxSubscriptionImpl : public Subscription , GrpcMuxCallbacks , Logger :: Loggable < Logger :: Id :: config > { public : GrpcMuxSubscriptionImpl ( GrpcMuxSharedPtr grpc_mux , SubscriptionCallbacks & callbacks , SubscriptionStats stats , absl :: string_view type_url , Event :: Dispatcher & dispatcher , std :: chrono :: milliseconds init_fetch_timeout ); // Config::Subscription void start ( const std :: set < std :: string >& resource_names ) override ; void updateResourceInterest ( const std :: set < std :: string >& update_to_these_names ) override ; // Config::GrpcMuxCallbacks void onConfigUpdate ( const Protobuf :: RepeatedPtrField < ProtobufWkt :: Any >& resources , const std :: string & version_info ) override ; void onConfigUpdateFailed ( Envoy :: Config :: ConfigUpdateFailureReason reason , const EnvoyException * e ) override ; std :: string resourceName ( const ProtobufWkt :: Any & resource ) override ; private : void disableInitFetchTimeoutTimer (); GrpcMuxSharedPtr grpc_mux_ ; SubscriptionCallbacks & callbacks_ ; SubscriptionStats stats_ ; const std :: string type_url_ ; GrpcMuxWatchPtr watch_ {}; Event :: Dispatcher & dispatcher_ ; std :: chrono :: milliseconds init_fetch_timeout_ ; Event :: TimerPtr init_fetch_timeout_timer_ ; }; \u7ec4\u5408\u4e86GrpcMuxSharedPtr(NewGrpcMuxImpl)\u589e\u91cf\u5b9e\u73b0\u3001\u6216\u8005(GrpcMuxImpl)\u5168\u91cf\u5b9e\u73b0 GrpcMuxImpl \u901a\u8fc7\u8c03\u7528\u5e95\u5c42\u7684 GrpcStream \u6765\u53d1\u9001stream\uff0c\u540c\u65f6\u7ee7\u627f\u4e86 GrpcStreamCallbacks \u7528\u6765\u63a5\u6536stream\u8fd4\u56de\u7684message 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class GrpcMuxImpl : public GrpcMux , public GrpcStreamCallbacks < envoy :: service :: discovery :: v3alpha :: DiscoveryResponse > , public Logger :: Loggable < Logger :: Id :: config > { private : GrpcStream < envoy :: service :: discovery :: v3alpha :: DiscoveryRequest , envoy :: service :: discovery :: v3alpha :: DiscoveryResponse > grpc_stream_ ; } class GrpcStream : public Grpc :: AsyncStreamCallbacks < ResponseProto > , public Logger :: Loggable < Logger :: Id :: config > { private : Grpc :: AsyncClient < RequestProto , ResponseProto > async_client_ ; Grpc :: AsyncStream < RequestProto > stream_ {}; } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 /** * Manage one or more gRPC subscriptions on a single stream to management server. This can be used * for a single xDS API, e.g. EDS, or to combined multiple xDS APIs for ADS. */ class GrpcMux { public : virtual ~ GrpcMux () = default ; virtual void start () PURE ; virtual GrpcMuxWatchPtr subscribe ( const std :: string & type_url , const std :: set < std :: string >& resources , GrpcMuxCallbacks & callbacks ) PURE ; virtual void pause ( const std :: string & type_url ) PURE ; virtual void resume ( const std :: string & type_url ) PURE ; virtual bool isDelta () const PURE ; // For delta virtual Watch * addOrUpdateWatch ( const std :: string & type_url , Watch * watch , const std :: set < std :: string >& resources , SubscriptionCallbacks & callbacks , std :: chrono :: milliseconds init_fetch_timeout ) PURE ; virtual void removeWatch ( const std :: string & type_url , Watch * watch ) PURE ; virtual bool paused ( const std :: string & type_url ) const PURE ; };","title":"Grpc &amp; xDS"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/envoy/proxy/#initmanager","text":"WatcherHandle \u3001 Mannager \u3001 Target \u3001 TargetHandle \u3001 Watcher \u3001 WatcherHandle \u4e00\u4e2aWatcherImpl\u6301\u6709\u4e00\u4e2aReadyFn\u7684\u56de\u8c03\uff0c\u901a\u8fc7WatcherImpl\u53ef\u4ee5\u521b\u5efaWatcherHandle\u6301\u6709\u5bf9ReadyFn\u7684\u5f31\u56de\u8c03\u3002 TargetImpl\u548cTargetHandleImpl\u548cWatcherImpl\u548cWatcherHandle\u7c7b\u4f3c\uff0c\u53ea\u662f\u524d\u8005\u662f\u6301\u6709ReadyFn\u540e\u8005\u662f\u6301\u6709InternalInitalizeFn","title":"InitManager"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/envoy/proxy/#grpc-client","text":"\u57fa\u672c\u6982\u5ff5\u89e3\u91ca: AsyncRequest An in-flight gRPC unary RPC. \u5355\u5411\u7684grpc\u8bf7\u6c42\uff0c\u53ef\u80fd\u6b63\u5728\u53d1\u9001\u4e2d\uff0c\u53ef\u4ee5cancel\u6389 RawAsyncStream An in-flight gRPC stream. \u901a\u8fc7grpc stream\u6765\u53d1\u9001\u8bf7\u6c42 RawAsyncRequestCallbacks RawAsyncStreamCallbacks RawAsyncClient \u53d1\u9001grpc\u8bf7\u6c42\uff0c\u5f02\u6b65\u63a5\u6536\u54cd\u5e94 AsyncClientImpl \u7ee7\u627f\u81eaRawAsyncClient\uff0c\u5177\u5907\u53d1\u9001\u5355\u5411grpc\u6d88\u606f\uff0c\u8fd4\u56de\u4e00\u4e2aAsyncRequest\uff0c\u53ef\u4ee5\u5bf9\u8fd9\u4e2a\u8bf7\u6c42\u505acancel\uff0cresponse\u901a\u8fc7RawAsyncRequestCallbacks\u8fd4\u56de \u4e5f\u53ef\u4ee5\u53d1\u9001grpc stream\uff0c\u8fd4\u56de\u4e00\u4e2aRawAsyncStream\uff0c\u4e00\u4e2astream\uff0c\u901a\u8fc7\u8fd9\u4e2astream\u53ef\u4ee5\u53d1\u9001\u6d88\u606f\uff0cresponse\u901a\u8fc7RawAsyncStreamCallbacks\u8fd4\u56de","title":"grpc client"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/envoy/proxy/#envoy_1","text":"","title":"Envoy \u6027\u80fd\u4f18\u5316"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/envoy/proxy/#http-filter-status","text":"\u5206\u4e3a\u4e24\u7c7b: FilterHeadersStatus Continue StopIteration // \u505c\u6b62\u5bf9\u4e0b\u9762\u7684filter\u8fdb\u884citerate\uff0c\u9664\u975e\u4e3b\u52a8\u8c03\u7528continueDecoding()/continueEncoding()\u6765\u7ee7\u7eed ContinueAndEndStream // \u7ee7\u7eediterate\u4e0b\u9762\u7684filter\uff0c\u4f46\u662f\u5ffd\u7565\u540e\u7eed\u7684data\u548ctrailer StopAllIterationAndBuffer // \u505c\u6b62iterate\u4e0b\u9762\u7684filter\uff0c\u4f46\u662f\u4f1a\u7ee7\u7eedbuffer\u540e\u7eed\u7684data\uff0c\u8fbe\u5230buffer\u7684\u9650\u5236\u540e\u4f1a\u8fd4\u56de401\u6216500 StopAllIterationAndWatermark // \u505c\u6b62iterate\u4e0b\u9762\u7684filter\uff0c\u4f46\u662f\u4f1a\u7ee7\u7eedbuffer\u540e\u7eed\u7684data\uff0c\u76f4\u5230\u89e6\u53d1high watermark FilterDataStatus Continue StopIterationAndBuffer StopIterationAndWatermark StopIterationNoBuffer FilterTrailersStatus Continue StopIteration FilterMetadataStatus Continue ## TLS\u8bc1\u4e66 yaml static_resources: listeners: - address: socket_address: address: 0.0.0.0 port_value: 443 filter_chains: - filters: - name: envoy.filters.network.http_connection_manager typed_config: \"@type\": type.googleapis.com/envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager codec_type: auto stat_prefix: ingress_http route_config: name: local_route virtual_hosts: - name: backend domains: - \"*\" routes: - match: prefix: \"/\" route: cluster: service1 http_filters: - name: envoy.filters.http.router typed_config: {} # \u670d\u52a1\u7aef\u9a8c\u8bc1 transport_socket: name: envoy.transport_socket.tls typed_config: \"@type\": type.googleapis.com/envoy.api.v2.auth.DownstreamTlsContext common_tls_context: # \u8bc1\u4e66\u76f8\u5173\u7684\u4fe1\u606f tls_certificates: # \u8bc1\u4e66 - certificate_chain: { filename: \"/root/gateway/api.alimesh.alibaba-inc.com_SHA256withRSA_EC.crt\" } # \u79c1\u94a5 private_key: { filename: \"/root/gateway/api.alimesh.alibaba-inc.com_SHA256withRSA_EC.key\" } # \u5ba2\u6237\u7aef\u9a8c\u8bc1 validation_context: trusted_ca: # \u9a8c\u8bc1\u5ba2\u6237\u7aef\u8bc1\u4e66\u7684root ca\uff0c\u4e00\u822c\u7528\u7cfb\u7edf\u7684\u5c31\u8db3\u591f filename: \"/etc/ssl/certs/ca-certificates.crt\" # \u9a8c\u8bc1\u6a21\u5f0f(Peer certificate verification mode.)\uff0c\u9ed8\u8ba4\u5ba2\u6237\u7aef\u8bc1\u4e66\u5fc5\u987b\u662f\u7ecf\u8fc7\u6307\u5b9aCA\u5217\u8868\u4e2d\u7684CA\u8fdb\u884c\u9a8c\u8bc1\u7684 trust_chain_verification: ACCEPT_UNTRUSTED require_client_certificate: false clusters: - name: service1 connect_timeout: 0.25s type: strict_dns lb_policy: round_robin transport_socket: name: envoy.transport_socket.tls typed_config: \"@type\": type.googleapis.com/envoy.api.v2.auth.UpstreamTlsContext CommonTlsContext: validation_context: trust_chain_verification: ACCEPT_UNTRUSTED load_assignment: cluster_name: service1 endpoints: - lb_endpoints: - endpoint: address: socket_address: address: 127.0.0.1 port_value: 9999 admin: access_log_path: \"/dev/null\" address: socket_address: address: 0.0.0.0 port_value: 8001 ## xDS transport next steps Collections: \u6ca1\u6709\u4e00\u79cd\u901a\u7528\u673a\u5236\u6765\u9009\u62e9\u8d44\u6e90\u5b50\u96c6\uff0c\u5927\u5bb6\u73b0\u5728\u666e\u904d\u7684\u505a\u6cd5\u662f\u901a\u8fc7\u5728Node\u4e2d\u6dfb\u52a0\u4e00\u4e9b\u4fe1\u606f\u8ba9\u63a7\u5236\u9762\u53ef\u4ee5\u8fdb\u884c\u8ba1\u7b97\u5b50\u96c6\u3002\u4f46\u662f\u8fd9\u79cd\u65b9\u5f0f\u4e0d\u901a\u7528\u3002Envoy\u5e0c\u671b\u5f15\u5165namesapce\u673a\u5236\u6765\u9009\u62e9\u5b50\u96c6 \u66f4\u901a\u7528\u7684\u65b9\u6cd5\u53ef\u4ee5\u662f\u5f15\u5165\u4e00\u4e2akey/value\u5c5e\u6027\u96c6\u5408\u53bb\u9009\u62e9\u8bf7\u6c42\u7684\u8d44\u6e90\uff0c\u5bf9\u4e8e\u589e\u91cfxDS\u6765\u8bf4\u4e5f\u662f\u6709\u610f\u4e49\u7684\u3002 Ref: https://github.com/envoyproxy/envoy/pull/10689 https://github.com/envoyproxy/envoy/issues/10373 Resource immutability: xDS\u76ee\u524d\u6ca1\u6709\u4e00\u4e2a\u4e0d\u53ef\u4ee5\u53d8\u7684\u8d44\u6e90\u540d\u5230\u8d44\u6e90\u7684\u6620\u5c04\u5173\u7cfb\uff0c\u76ee\u524d\u662f\u63a7\u5236\u9762\u7ed3\u5408Node\u4fe1\u606f\u6765\u751f\u6210\u6216\u8005\u4fee\u6539\u8d44\u6e90\u540d\uff0c\u4e24\u4e2a\u5ba2\u6237\u7aef\u53ef\u80fd\u770b\u5230\u76f8\u540c\u8d44\u6e90\u540d\u7684\u4e0d\u540c\u8d44\u6e90\uff0c\u8fd9\u5bf9\u4e8exDS Cache\u5e76\u4e0d\u4f18\u5316 \u540c\u65f6\u8fd9\u79cd\u884c\u4e3a\u4e5f\u4f1a\u5f71\u54cd\u591a\u63a7\u5236\u9762\u7684\u8054\u90a6\uff0c\u4e0d\u540c\u7684\u63a7\u5236\u9762\u5fc5\u987b\u5177\u6709\u4e00\u4e2a\u5168\u5c40\u7684\u8d44\u6e90\u547d\u540d\u65b9\u5f0f\u3002 Ref: https://docs.google.com/document/d/1X9fFzqBZzrSmx2d0NkmjDW2tc8ysbLQS9LaRQRxdJZU/edit?disco=AAAAGQ_84vU&ts=5e61532c&usp_dm=false Per-xDS type resource name semantics: VHDS\u7684\u8d44\u6e90\u540d\u662f\u4e00\u79cd\u7279\u6b8a\u7ed3\u6784\uff0c\u683c\u5f0f\u8981\u6c42\u4e3a <route configuration name>/<host entry> \uff0c\u8fd9\u5141\u8bb8\u63a7\u5236\u9762\u6839\u636e\u8fd9\u79cd\u683c\u5f0f\u6765\u67e5\u8be2\u6307\u5b9a\u8def\u7531\u914d\u7f6e\u4e2dvirtual host\u4e2d\u7684entry \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8d44\u6e90\u540d\u5176\u5b9e\u5c31\u662f\u626e\u6f14\u4e86namesapce\u7684\u89d2\u8272\u3002\u5728\u672a\u6765\u5176\u4ed6\u7684\u8d44\u6e90\u7c7b\u578b\u7684\u540d\u5b57\u5c06\u53ef\u80fd\u9700\u8981\u67d0\u79cd\u7ed3\u6784\uff0c\u7406\u60f3\u7684\u8d44\u6e90\u547d\u540d\u65b9\u6848\u5c06\u5141\u8bb8\u7ed3\u6784\uff0c\u540c\u65f6\u7559\u7ed9\u63a7\u5236\u5e73\u9762\u4e00\u4e9b\u81ea\u7531\uff0c\u4ee5\u4fbf\u5728\u9700\u8981\u65f6\u7ee7\u7eed\u4f7f\u7528\u4e0d\u900f\u660e\u547d\u540d\uff0c\u800c\u4e0d\u662f\u5c06\u4e0d\u900f\u660e\u548c\u7ed3\u6784\u5316\u5f62\u5f0f\u4efb\u610f\u6df7\u5408\u5728\u4e00\u8d77\u3002 Flat representation: \u73b0\u5982\u4eca\uff0c\u8d44\u6e90\u6807\u8bc6\u5df2\u6210\u4e3a\u8d44\u6e90\u540d\u79f0\uff0c\u8282\u70b9\u4fe1\u606f\uff0cConfigSource\u7684\u6743\u9650\uff0cURL\u7c7b\u578b\u548c\u7248\u672c\u7684\u5927\u6742\u70e9\u3002 \u5728\u65e0\u6cd5\u5904\u7406\u76f8\u5173proto3\u6d88\u606f\u7684\u4eba\u5458\u6216\u7cfb\u7edf\u4e4b\u95f4\u8fdb\u884c\u901a\u4fe1\u65f6\uff0c\u6ca1\u6709\u6807\u51c6\u683c\u5f0f\u53ef\u4ee5\u5bf9\u8fd9\u4e9b\u4fe1\u606f\u8fdb\u884c\u7b80\u660e\u7684\u7f16\u7801\u3002 URI\u63d0\u4f9b\u4e86\u4e00\u79cd\u5f3a\u5927\u7684\u7b26\u5408\u6807\u51c6\u7684\u65b9\u5f0f\u6765\u6307\u5b9a\u6b64\u4fe1\u606f\u3002\u672a\u6765\u7684xDS\u8d44\u6e90\u547d\u540d\u65b9\u6848\u5c06\u53d7\u76ca\u4e8e\u5177\u6709\u89c4\u8303\u7684URI\u8868\u793a\uff08\u9664\u4e86\u89c4\u8303\u7684proto3\u5b9a\u4e49\uff09 Implicit resource payload naming \u867d\u7136\u5728\u589e\u91cf\u53d1\u73b0\u4e2d\uff0c\u6211\u4eec\u5728DeltaDiscoveryResponse\u4e2d\u7684\u201c\u8d44\u6e90\u201d\u6d88\u606f\u4e2d\u6709\u660e\u786e\u63d0\u4f9b\u7684\u8d44\u6e90\u540d\u79f0\uff0c\u4f46SotW\u8d44\u6e90\u6709\u6548\u8d1f\u8f7d\u5374\u4e0d\u662f\u8fd9\u79cd\u60c5\u51b5\u3002\u8fd9\u610f\u5473\u7740xDS\u4ee3\u7406\uff0c\u7f13\u5b58\u548c\u5176\u4ed6\u4e2d\u4ecb\u5fc5\u987b\u5177\u6709\u6309\u8d44\u6e90\u7c7b\u578b\u7684\u8bc6\u522b\u548c\u53cd\u5e8f\u5217\u5316\u624d\u80fd\u77e5\u9053\u6b63\u5728\u4f20\u9012\u7684\u8d44\u6e90\u6709\u6548\u8d1f\u8f7d\u3002\u6211\u4eec\u9700\u8981\u4e3aDiscoveryResponses\u4e2d\u7684SotW\u8d44\u6e90\u547d\u540d\u63d0\u4f9b\u66f4\u597d\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u53ef\u80fd\u4f1a\u5f03\u7528\u73b0\u6709\u7684\u91cd\u590d\u7684Any\uff0c\u5e76\u7528v3 / v4 xDS\u4e2d\u7684\u91cd\u590d\u7684Resource\u4ee3\u66ff\u3002 Aliasing VHDS\u4e3axDS\u5f15\u5165\u4e86\u522b\u540d\uff0c\u56e0\u4e3a\u540c\u4e00\u4e2a\u865a\u62df\u4e3b\u673a\u8d44\u6e90\u53ef\u80fd\u4f1a\u88ab\u591a\u4e2a\u540d\u79f0\uff08\u4f8b\u5982\uff0c routeConfigA / foo.com\uff0crouteConfigA / bar.com\uff09\u4f7f\u7528\u3002\u6b64\u673a\u5236\u5c1a\u672a\u5728xDS\u7684\u5176\u4ed6\u5730\u65b9\u5e7f\u6cdb\u4f7f\u7528\uff0c\u56e0\u6b64\u7528\u66f4\u901a\u7528\u7684\u66ff\u4ee3\u5b83\u662f\u7406\u60f3\u7684\u3002\u4e00\u4e2a\u6709\u5438\u5f15\u529b\u7684\u66ff\u4ee3\u65b9\u6848\uff08\u5c06\u5728\u4e0b\u9762\u7684\u8054\u5408\u8ba8\u8bba\u4e2d\u7528\u4e8e\u5176\u4ed6\u76ee\u7684\uff09\u4e5f\u5c06\u5bf9xDS\u5f15\u5165\u91cd\u5b9a\u5411\u529f\u80fd\u3002\u5f53\u67e5\u8be2routeConfigA / foo.com\u6216routeConfigA / bar.com\u65f6\uff0c\u7ba1\u7406\u670d\u52a1\u5668\u53ef\u80fd\u4f1a\u53d1\u51fa\u91cd\u5b9a\u5411\uff0c\u5bfc\u81f4xDS\u5ba2\u6237\u7aef\u83b7\u53d6\u67d0\u4e9bCanonicalVirtualHost\u8d44\u6e90\u3002\u901a\u8fc7\u6d88\u9664\u6982\u5ff5\u4e0a\u7684\u590d\u6742\u6027\uff0c\u8fd9\u7b80\u5316\u4e86xDS\u63a7\u5236\u5e73\u9762\u7684\u8981\u6c42\u3002","title":"Http filter status"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/envoy/proxy/#cluster","text":"\u5982\u679c\u8fd9\u4e2acluster\u9700\u8981\u4f9d\u8d56\u5176\u4ed6cluster\u624d\u80fd\u83b7\u53d6\u5230\u5730\u5740\u4fe1\u606f\uff0c\u90a3\u4e48\u8fd9\u4e2acluster\u7684initializa phase\u9700\u8981\u8bbe\u7f6e\u4e3aSecondary\uff0c\u5426\u5219\u662fPrimary 1 2 3 4 // Upstream::Cluster Upstream :: Cluster :: InitializePhase initializePhase () const override { return Upstream :: Cluster :: InitializePhase :: Primary ; } cluster \u7684\u521d\u59cb\u5316\u9700\u8981\u653e\u5230 startPreInit \u4e2d\uff0c\u521d\u59cb\u5316\u5b8c\u6210\u540e\u9700\u8981\u8c03\u7528 onPreInitComplete \u6765\u5b8c\u6210\u521d\u59cb\u5316\uff0c\u6700\u597d\u505a\u4e00\u4e2a\u8d85\u65f6\u63a7\u5236 1 2 // Upstream::ClusterImplBase void startPreInit () override ; host\u66f4\u65b0\u7684\u65f6\u5019\u9700\u8981\u6309\u7167\u4f18\u5148\u7ea7\u4e3a\u7eac\u5ea6\u6765\u8fdb\u884c\u66f4\u65b0\uff0c\u5e76\u6309\u7167\u4f18\u5148\u7ea7\u7eac\u5ea6\u7edf\u8ba1locality weight map\uff0c\u901a\u8fc7PriorityStateManager\u6765\u7ba1\u7406 PriorityStateManager \u5728\u521d\u59cb\u5316\u4f18\u5148\u7ea7\u7684\u65f6\u5019\u4f1a\u81ea\u52a8\u6784\u5efa\u597dlocality weight map 1 2 3 4 5 6 7 8 9 10 11 12 13 14 void PriorityStateManager::initializePriorityFor ( const envoy :: api :: v2 :: endpoint :: LocalityLbEndpoints & locality_lb_endpoint ) { const uint32_t priority = locality_lb_endpoint . priority (); if ( priority_state_ . size () <= priority ) { priority_state_ . resize ( priority + 1 ); } if ( priority_state_ [ priority ]. first == nullptr ) { priority_state_ [ priority ]. first = std :: make_unique < HostVector > (); } if ( locality_lb_endpoint . has_locality () && locality_lb_endpoint . has_load_balancing_weight ()) { priority_state_ [ priority ]. second [ locality_lb_endpoint . locality ()] = locality_lb_endpoint . load_balancing_weight (). value (); } } \u8ba1\u7b97host\u53d8\u66f4(\u589e\u52a0\u591a\u5c11\u3001\u51cf\u5c11\u591a\u5c11\uff0c\u53d1\u751f\u53d8\u5316)\uff0c\u5982\u679c\u6ca1\u6709host\u53d8\u66f4\uff0c\u4f46\u662f\u5176\u4ed6\u7684\u4e00\u4e9b\u4fe1\u606f\u53d1\u751f\u4e86\u53d8\u66f4\u4e5f\u9700\u8981\u8fdb\u884clb\u91cd\u5efa 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 const auto & host_set = priority_set_ . getOrCreateHostSet ( priority , overprovisioning_factor ); HostVectorSharedPtr current_hosts_copy ( new HostVector ( host_set . hosts ())); HostVector hosts_added ; HostVector hosts_removed ; // We need to trigger updateHosts with the new host vectors if they have changed. We also do this // when the locality weight map or the overprovisioning factor. Note calling updateDynamicHostList // is responsible for both determining whether there was a change and to perform the actual update // to current_hosts_copy, so it must be called even if we know that we need to update (e.g. if the // overprovisioning factor changes). // TODO(htuch): We eagerly update all the host sets here on weight changes, which isn't great, // since this has the knock on effect that we rebuild the load balancers and locality scheduler. // We could make this happen lazily, as we do for host-level weight updates, where as things age // out of the locality scheduler, we discover their new weights. We don't currently have a shared // object for locality weights that we can update here, we should add something like this to // improve performance and scalability of locality weight updates. const bool hosts_updated = updateDynamicHostList ( new_hosts , * current_hosts_copy , hosts_added , hosts_removed , updated_hosts , all_hosts_ ); if ( hosts_updated || host_set . overprovisioningFactor () != overprovisioning_factor || locality_weights_map != new_locality_weights_map ) { ASSERT ( std :: all_of ( current_hosts_copy -> begin (), current_hosts_copy -> end (), [ & ]( const auto & host ) { return host -> priority () == priority ; })); locality_weights_map = new_locality_weights_map ; ENVOY_LOG ( debug , \"EDS hosts or locality weights changed for cluster: {} current hosts {} priority {}\" , info_ -> name (), host_set . hosts (). size (), host_set . priority ()); // lb \u91cd\u5efa priority_state_manager . updateClusterPrioritySet ( priority , std :: move ( current_hosts_copy ), hosts_added , hosts_removed , absl :: nullopt , overprovisioning_factor ); return true ; } return false ; locality_weight_map\u53d1\u751f\u53d8\u5316 overprovisioning_factor\u53d1\u751f\u53d8\u5316 host\u53d1\u751f\u53d8\u66f4(\u65b0\u589e\u3001\u5220\u9664)\uff0chost\u6ca1\u6709\u53d8\u66f4\uff0c\u4f46\u662f\u6709\u4e00\u4e9b\u4fe1\u606f\u53d1\u751f\u4e86\u53d8\u5316) Host\u4fe1\u606f\u53d1\u751f\u53d8\u5316 host\u4f18\u5148\u7ea7\u53d8\u5316 host metadata\u53d8\u5316 host\u914d\u7f6e\u7684\u5065\u5eb7\u5730\u5740\u53d1\u751f\u4e86\u53d8\u5316 \u8fd9\u4e9b\u90fd\u4f1a\u5bfc\u81f4lb\u91cd\u5efa\uff0c\u9700\u8981\u66f4\u65b0priorityset\uff0c\u5373\u4f7f\u6ca1\u6709\u4efb\u4f55\u673a\u5668\u53d1\u751f\u53d8\u5316 lb\u91cd\u5efa\u548cpriority set\u66f4\u65b0 \u901a\u8fc7priority_state_manager\u7684updateClusterPrioritySet\u65b9\u6cd5\u53ef\u4ee5\u66f4\u65b0priorityset\u5e76\u91cd\u5efalb 1 2 3 priority_state_manager . updateClusterPrioritySet ( priority , std :: move ( current_hosts_copy ), hosts_added , hosts_removed , absl :: nullopt , overprovisioning_factor ); \u8fd9\u4e2a\u65b9\u6cd5\u4e3b\u8981\u505a\u4e86\u51e0\u4ef6\u4e8b: \u6839\u636elocality weight map\u8fd8\u6709\u662f\u5426\u5f00\u542fzone aware\u8def\u7531\u6765\u6784\u5efaLocalityWeights lb \u6309\u7167locality\u7eac\u5ea6\u5c06\u673a\u5668\u7ec4\u7ec7\u8d77\u6765\uff0c\u5e76\u6700\u7ec8\u6784\u5efaHostsPerLocalityImpl \u8c03\u7528priorityset\u7684updateHosts\u65b9\u6cd5\u66f4\u65b0priority set\uff0c\u5e76\u4f20\u5165\u8ba1\u7b97\u51fa\u6765\u7684\u65b0\u589e\u3001\u548c\u5220\u9664host\u7528\u6765\u8fdb\u884c\u901a\u77e5 \u5904\u7406\u5065\u5eb7\u68c0\u67e5","title":"\u81ea\u5b9a\u4e49cluster\u5b9e\u73b0\u7684\u5173\u952e\u70b9"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/envoy/proxy/#_5","text":"","title":"\u8fde\u63a5\u6c60"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/envoy/proxy/#filterchain","text":"FilterChainFactory\u63a5\u53e3\uff0c\u901a\u8fc7\u8fd9\u4e2a\u63a5\u53e3\u53ef\u4ee5\u521b\u5efaNetwork filter chain\u3001Listener filter chain\u3001Udp listener filter chain 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 /** * Creates a chain of network filters for a new connection. */ class FilterChainFactory { public : virtual ~ FilterChainFactory () = default ; /** * Called to create the network filter chain. * @param connection supplies the connection to create the chain on. * @param filter_factories supplies a list of filter factories to create the chain from. * @return true if filter chain was created successfully. Otherwise * false, e.g. filter chain is empty. */ virtual bool createNetworkFilterChain ( Connection & connection , const std :: vector < FilterFactoryCb >& filter_factories ) PURE ; /** * Called to create the listener filter chain. * @param listener supplies the listener to create the chain on. * @return true if filter chain was created successfully. Otherwise false. */ virtual bool createListenerFilterChain ( ListenerFilterManager & listener ) PURE ; /** * Called to create a Udp Listener Filter Chain object * * @param udp_listener supplies the listener to create the chain on. * @param callbacks supplies the callbacks needed to create a filter. */ virtual void createUdpListenerFilterChain ( UdpListenerFilterManager & udp_listener , UdpReadFilterCallbacks & callbacks ) PURE ; };","title":"FilterChain"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/envoy/proxy/#extension-config-discovery-service","text":"","title":"Extension Config Discovery Service"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/envoy/stats_symbol/","text":"Stats Symbol\u5206\u6790 Stats\u6309\u7167 . \u53f7\u5206\u5272\uff0c\u6bcf\u4e00\u6bb5\u88ab\u79f0\u4e3a\u4e00\u4e2a Symbol \uff0c\u90fd\u4f1a\u5206\u914d\u4e00\u4e2aSymbol\uff0c\u76f8\u540c\u7684\u5219\u5171\u7528\u4e00\u4e2a Symbol 1 using Symbol = uint32_t ; SymbolTable \u4f1a\u6839\u636e\u4e0b\u9762\u4e24\u4e2amap\u505aname\u5230Symbol\u7684\u6620\u5c04 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 struct SharedSymbol { SharedSymbol ( Symbol symbol ) : symbol_ ( symbol ), ref_count_ ( 1 ) {} Symbol symbol_ ; // \u8bb0\u5f55Symbol\u88ab\u5f15\u7528\u7684\u6b21\u6570\uff0c\u5f53\u5f15\u7528\u6b21\u6570\u4e3a0\u7684\u65f6\u5019\u624d\u4f1a\u5220\u9664 uint32_t ref_count_ ; }; // Bitmap implementation. // The encode map stores both the symbol and the ref count of that symbol. // Using absl::string_view lets us only store the complete string once, in the decode map. // \u6839\u636estats name\u67e5\u8be2\u5bf9\u5e94\u7684symbol using EncodeMap = absl :: flat_hash_map < absl :: string_view , SharedSymbol , StringViewHash > ; // \u6839\u636esymbol\u67e5\u8be2\u5bf9\u5e94\u7684stats name using DecodeMap = absl :: flat_hash_map < Symbol , InlineStringPtr > ; EncodeMap encode_map_ GUARDED_BY ( lock_ ); DecodeMap decode_map_ GUARDED_BY ( lock_ ); \u628astats\u4e2d\u7684\u4e00\u6bb5\u6dfb\u52a0\u5230SymbolTable\u7684\u8fc7\u7a0b\u5982\u4e0b: \u5c06stat name \u8fdb\u884cEncoding \u521b\u5efa\u6307\u5b9a\u5927\u5c0f\u7684Storage \u5c06Encoding\u540e\u7684\u5185\u5bb9\u5b58\u653e\u5230Storage\u4e2d 1 2 3 4 5 6 7 8 9 SymbolTable :: StoragePtr SymbolTableImpl::encode ( absl :: string_view name ) { Encoding encoding ; // \u5c06stat\u6309\u7167.\u53f7\u5207\u5272\u6210\u4e00\u4e2a\u4e2atoken\uff0c\u7136\u540e\u653e\u5230Encoding\u4e2d addTokensToEncoding ( name , encoding ); // \u63a5\u7740\u521b\u5efa\u4e00\u4e2aStorage\u5b58\u50a8stats\u7f16\u7801\u540e\u7684\u5185\u5bb9 auto bytes = std :: make_unique < Storage > ( encoding . bytesRequired ()); encoding . moveToStorage ( bytes . get ()); return bytes ; } \u4e00\u4e2aStorage\u5c31\u662f\u4e00\u4e2a uint_8 \u7684\u6570\u7ec4\uff0c addTokensToEncoding \u4f1a\u5c06stats name\u6309\u7167.\u53f7\u5207\u5272\u6210\u4e00\u4e2a\u4e2atoken\u653e\u5230Encoding\u4e2d 1 2 using Storage = uint8_t []; using StoragePtr = std :: unique_ptr < Storage > ; \u8fd9\u4e2a\u662fstats name\u8fdb\u884cEncoding\u7684\u8fc7\u7a0b absl::StrSplit(name, '.') \u5207\u5272stats name symbols.push_back(toSymbol(token)) \u6bcf\u4e00\u4e2astat name\u901a\u8fc7 toSymbol \u8f6c\u6362\u4e3aSymbol\u5b58\u8d77\u6765 encoding.addSymbol(symbol) \u5c06\u6240\u6709\u7684Symbol\u6dfb\u52a0\u5230Encoding\u4e2d\u8fdb\u884c\u7f16\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 void SymbolTableImpl::addTokensToEncoding ( const absl :: string_view name , Encoding & encoding ) { if ( name . empty ()) { return ; } // We want to hold the lock for the minimum amount of time, so we do the // string-splitting and prepare a temp vector of Symbol first. const std :: vector < absl :: string_view > tokens = absl :: StrSplit ( name , '.' ); std :: vector < Symbol > symbols ; symbols . reserve ( tokens . size ()); // Now take the lock and populate the Symbol objects, which involves bumping // ref-counts in this. { Thread :: LockGuard lock ( lock_ ); for ( auto & token : tokens ) { symbols . push_back ( toSymbol ( token )); } } // Now efficiently encode the array of 32-bit symbols into a uint8_t array. for ( Symbol symbol : symbols ) { encoding . addSymbol ( symbol ); } } toSymbol \u7684\u5b9e\u73b0\u5c31\u4f9d\u8d56\u4e0a\u6587\u4e2d\u63d0\u5230\u7684 EncodeMap \u8868\uff0cstats\u7684\u6bcf\u4e00\u6bb5\u90fd\u8981\u53bb\u67e5\u8be2\u8fd9\u4e2amap\uff0c\u5982\u679c\u5df2\u7ecf\u5b58\u5728\u5c31\u76f4\u63a5\u8fd4\u56de\u5bf9\u5e94\u7684Symbol \u5426\u5219\u5c31\u521b\u5efa\u4e00\u4e2aSymbol\u3002Symbol\u672c\u8d28\u4e0a\u5c31\u662f\u4e00\u4e2a\u9012\u589e\u7684 uin32_t \u7c7b\u578b\u7684\u6574\u6570\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 Symbol SymbolTableImpl::toSymbol ( absl :: string_view sv ) { Symbol result ; auto encode_find = encode_map_ . find ( sv ); // If the string segment doesn't already exist, if ( encode_find == encode_map_ . end ()) { // We create the actual string, place it in the decode_map_, and then insert // a string_view pointing to it in the encode_map_. This allows us to only // store the string once. We use unique_ptr so copies are not made as // flat_hash_map moves values around. InlineStringPtr str = InlineString :: create ( sv ); auto encode_insert = encode_map_ . insert ({ str -> toStringView (), SharedSymbol ( next_symbol_ )}); ASSERT ( encode_insert . second ); auto decode_insert = decode_map_ . insert ({ next_symbol_ , std :: move ( str )}); ASSERT ( decode_insert . second ); result = next_symbol_ ; newSymbol (); } else { // If the insertion didn't take place, return the actual value at that location and up the // refcount at that location result = encode_find -> second . symbol_ ; ++ ( encode_find -> second . ref_count_ ); } return result ; } \u4e0a\u9762\u4ee3\u7801\u4e2d\u4e2d\u7684 next_symbol_ \u59cb\u7ec8\u6307\u5411\u4e0b\u4e00\u6b21\u5206\u914d\u7684\u65f6\u5019\u8981\u4f7f\u7528\u7684 Symbol \uff0c\u662f\u901a\u8fc7 newSymbol \u751f\u6210\u7684 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 // pool_\u5b9a\u4e49 std :: stack < Symbol > pool_ void SymbolTableImpl :: newSymbol () EXCLUSIVE_LOCKS_REQUIRED ( lock_ ) { if ( pool_ . empty ()) { next_symbol_ = ++ monotonic_counter_ ; } else { next_symbol_ = pool_ . top (); pool_ . pop (); } // This should catch integer overflow for the new symbol. ASSERT ( monotonic_counter_ != 0 ); } void SymbolTableImpl :: free ( const StatName & stat_name ) { // Before taking the lock, decode the array of symbols from the SymbolTable::Storage. const SymbolVec symbols = Encoding :: decodeSymbols ( stat_name . data (), stat_name . dataSize ()); Thread :: LockGuard lock ( lock_ ); for ( Symbol symbol : symbols ) { auto decode_search = decode_map_ . find ( symbol ); ASSERT ( decode_search != decode_map_ . end ()); auto encode_search = encode_map_ . find ( decode_search -> second -> toStringView ()); ASSERT ( encode_search != encode_map_ . end ()); // If that was the last remaining client usage of the symbol, erase the // current mappings and add the now-unused symbol to the reuse pool. // // The \"if (--EXPR.ref_count_)\" pattern speeds up BM_CreateRace by 20% in // symbol_table_speed_test.cc, relative to breaking out the decrement into a // separate step, likely due to the non-trivial dereferences in EXPR. if ( -- encode_search -> second . ref_count_ == 0 ) { decode_map_ . erase ( decode_search ); encode_map_ . erase ( encode_search ); // \u56de\u6536Symbol pool_ . push ( symbol ); } } } \u5f53\u5206\u914d\u7684 Symbol \u88ab\u56de\u6536\u7684\u65f6\u5019\u5c31\u4f1a\u901a\u8fc7\u653e\u5230pool_\u4e2d\u4e0b\u6b21\u5c31\u53ef\u4ee5\u590d\u7528\u4e86\uff0c\u8fd9\u4e2a\u673a\u5236\u7c7b\u4f3clinux\u5185\u6838\u4e2d\u7684 inode \u5206\u914d\u4e00\u6837\u3002 \u5230\u6b64\u4e3a\u6b62 Symbol \u5230stat name\u7684\u6620\u5c04\u5173\u7cfb\uff0c\u4ee5\u53ca Symbol \u7684\u5206\u914d\u548c\u91ca\u653e\u5c31\u8bb2\u6e05\u695a\u4e86\uff0c\u4e0b\u4e00\u6b65\u5c31\u662f\u5c06\u8fd9\u4e9b Symbol \u8fdb\u4e00\u6b65 Encoding\u6765 \u51cf\u5c11\u5b58\u50a8\u7684\u5927\u5c0f\u3002 \u5728 addTokensToEncoding \u7684\u5b9e\u73b0\u4e2d\u7684\u6700\u540e\u4e00\u6b65\u5c31\u662f\u901a\u8fc7 Encoding::addSymbol \u65b9\u6cd5\u5c06\u4e00\u4e2astats\u4ea7\u751f\u7684\u6240\u6709Symbol\u8fdb\u884cEncoding\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 static const uint32_t SpilloverMask = 0x80 ; static const uint32_t Low7Bits = 0x7f ; std :: vector < uint8_t > vec_ ; void SymbolTableImpl::Encoding::addSymbol ( Symbol symbol ) { // UTF-8-like encoding where a value 127 or less gets written as a single // byte. For higher values we write the low-order 7 bits with a 1 in // the high-order bit. Then we right-shift 7 bits and keep adding more bytes // until we have consumed all the non-zero bits in symbol. // // When decoding, we stop consuming uint8_t when we see a uint8_t with // high-order bit 0. do { if ( symbol < ( 1 << 7 )) { vec_ . push_back ( symbol ); // symbols <= 127 get encoded in one byte. } else { vec_ . push_back (( symbol & Low7Bits ) | SpilloverMask ); // symbols >= 128 need spillover bytes. } symbol >>= 7 ; } while ( symbol != 0 ); } \u6574\u4e2a\u7f16\u7801\u7684\u8fc7\u7a0b\u7c7b\u4f3c\u4e8e UTF-8 \u7f16\u7801\uff0c\u4f1a\u6839\u636e Symbol \u672c\u8eab\u7684\u503c\u5927\u5c0f\u6765\u51b3\u5b9a\u662f\u4f7f\u7528\u591a\u5c11\u4e2a\u5b57\u8282\u6765\u5b58\u50a8\uff0c\u5982\u679c\u662f\u5c0f\u4e8e128\u7684\u8bdd\uff0c\u90a3\u4e48\u5c31\u6309\u7167\u4e00\u4e2a\u5b57\u8282\u6765\u5b58\u50a8 \uff0c\u5982\u679c\u662f\u5927\u4e8e128\u90a3\u4e48\u5c31\u4f1a\u8fdb\u884c\u5207\u5272\u3002\u9996\u5148\u901a\u8fc7\u548c Low7Bits \u76f8\u4e0e\u62ff\u5230\u4f4e7\u4f4d\uff0c\u7136\u540e\u548c SpilloverMask \u76f8\u6216\u5c06\u6700\u9ad8\u4f4d\u8bbe\u7f6e\u4e3a1\u3002\u8fd9\u91cc\u6709\u4e2a\u7591\u95ee\u4e3a\u4ec0\u4e48\u662f\u5c0f\u4e8e128\u5c31\u7528 \u5355\u5b57\u8282\u5b58\u50a8\u5462?\u8fd9\u91cc\u4e3a\u4ec0\u4e48\u4e0d\u662f256\u5462?\uff0c vec_ \u7684\u7c7b\u578b\u5176\u5b9e\u662f uint8_t \u7684\uff0c\u5b8c\u5168\u53ef\u4ee5\u7528\u6765\u5b58\u50a8256\u3002\u4f46\u662f\u8fd9\u91cc\u53ea\u7528\u5230\u4e86\u4f4e7\u4f4d\uff0c\u6700\u9ad8\u7684\u90a3\u4e00\u4f4d\u662f\u7528\u6765\u8868\u793a\u8fd9\u4e2a Symbol \u662f\u5426 \u662f\u591a\u4e2a\u5b57\u8282\u7ec4\u6210\u8fd8\u662f\u4e00\u4e2a\u5b57\u8282\u7ec4\u6210\u7684\u3002\u5982\u679c\u662f0\u5c31\u8868\u793a\u8fd9\u4e2aSymbo\u662f\u4e00\u4e2a\u5355\u5b57\u8282\u7684\u3002\u6240\u4ee5\u5f53\u5305\u542b\u591a\u4e2a\u5b57\u8282\u7684\u65f6\u5019\uff0c\u9700\u8981\u548c SpilloverMask \u76f8\u6216\u5c06\u6700\u9ad8\u4f4d\u8bbe\u7f6e\u4e3a1\u6765\u8868\u793a\u662f\u591a\u5b57\u8282\u7684 Symbol \u3002 \u6700\u540e\u4e00\u4e2astat name\u88ab\u7f16\u7a0b\u6210\u4e86\u4e00\u4e2a std::vector<uint8_t> \uff0c\u7136\u540e\u901a\u8fc7 Encoding::moveToStorage \u65b9\u6cd5\u5c06\u6574\u4e2a std::vector<uint8_t> \u5b58\u653e\u5230 Storage \u4e2d 1 2 3 4 5 6 7 8 9 uint64_t SymbolTableImpl::Encoding::moveToStorage ( SymbolTable :: Storage symbol_array ) { const uint64_t sz = dataBytesRequired (); symbol_array = writeLengthReturningNext ( sz , symbol_array ); if ( sz != 0 ) { memcpy ( symbol_array , vec_ . data (), sz * sizeof ( uint8_t )); } vec_ . clear (); // Logically transfer ownership, enabling empty assert on destruct. return sz + StatNameSizeEncodingBytes ; } \u5230\u6b64\u4e3a\u6b62\u4e00\u4e2a Stat name \u88ab\u7f16\u7801\u6210\u4e86\u4e00\u4e2a Storage \uff0c\u8fd9\u4e2a Storage \u53ef\u4ee5\u88ab\u7528\u6765\u6784\u9020\u6210 StatName \u7ed3\u6784\uff0c\u4f46\u662f\u4e0d\u62e5\u6709Storage\u8fd9\u662f\u5bf9\u5176\u5f15\u7528\uff0c\u771f\u6b63\u62e5\u6709 Storage \u7684\u662f StatNameStorage \u800c StatLNameList \u5219\u662f\u5305\u542b\u4e86\u4e00\u7ec4\u987a\u5e8f\u7684 Stat Name \u7684\u5bb9\u5668\u3002 \u6700\u540e\u6765\u770b\u4e00\u4e2a\uff0c\u5982\u679c\u5c06\u4e00\u4e2a Symbol \u6570\u7ec4\u8f6c\u6362\u4e3a\u5bf9\u5e94\u7684 stat name \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 std :: string SymbolTableImpl::toString ( const StatName & stat_name ) const { return decodeSymbolVec ( Encoding :: decodeSymbols ( stat_name . data (), stat_name . dataSize ())); } SymbolVec SymbolTableImpl::Encoding::decodeSymbols ( const SymbolTable :: Storage array , uint64_t size ) { SymbolVec symbol_vec ; Symbol symbol = 0 ; for ( uint32_t shift = 0 ; size > 0 ; -- size , ++ array ) { uint32_t uc = static_cast < uint32_t > ( * array ); // Inverse addSymbol encoding, walking down the bytes, shifting them into // symbol, until a byte with a zero high order bit indicates this symbol is // complete and we can move to the next one. symbol |= ( uc & Low7Bits ) << shift ; if (( uc & SpilloverMask ) == 0 ) { symbol_vec . push_back ( symbol ); shift = 0 ; symbol = 0 ; } else { shift += 7 ; } } return symbol_vec ; } decodeSymbols \u4f1a\u5c06 Storage \u8f6c\u6362\u6210\u4e00\u4e2a SymbolVec \uff0c\u56e0\u4e3a\u4e00\u4e2a Storage \u53ef\u4ee5\u5305\u542b\u591a\u4e2a Symbol \u3002\u8f6c\u6362\u7684\u8fc7\u7a0b\u5982\u4e0b: \u6bcf\u6b21\u4eceStorage\u4e2d\u90a3\u4e00\u4e2a uint8_t \uff0c\u7136\u540e\u8f6c\u6362\u4e3a uint32_t \uff0c\u56e0\u4e3aSymbol\u7684\u7c7b\u578b\u5c31\u662f uint32_t \u63a5\u7740\u901a\u8fc7\u548c Low7Bits \u76f8\u6216\u62ff\u5230\u4f4e7\u4f4d\u7684\u503c \u5224\u65ad SpilloverMask \u4f4d\u662f\u5426\u662f0\uff0c\u5982\u679c\u662f0\u90a3\u5c31\u662f\u4e00\u4e2a\u5b8c\u6574\u7684 Symbol \u76f4\u63a5\u653e\u5230SymbolVec\u5373\u53ef \u5982\u679c\u662f1\u8868\u660e\uff0cSymbol\u8fd8\u8981\u7ee7\u7eed\u7ec4\u88c5\uff0c\u518d\u6b21\u8bfb\u53d6\u4e00\u4e2auint8_t\uff0c\u7136\u540e\u53d6\u4f4e7\u4f4d\uff0c\u8fd9\u4e2a\u65f6\u5019\uff0c\u9700\u8981\u5411\u5de6\u79fb\u52a87\u4f4d\uff0c\u56e0\u4e3aSymbol\u7684\u6bcf\u4e00\u4e2a\u90e8\u5206\u90fd\u662f7\u4f4d\u7ec4\u6210\uff0c\u4f9d\u6b21\u6392\u653e\u7684\u3002","title":"Stats Symbol\u5206\u6790"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/envoy/stats_symbol/#stats-symbol","text":"Stats\u6309\u7167 . \u53f7\u5206\u5272\uff0c\u6bcf\u4e00\u6bb5\u88ab\u79f0\u4e3a\u4e00\u4e2a Symbol \uff0c\u90fd\u4f1a\u5206\u914d\u4e00\u4e2aSymbol\uff0c\u76f8\u540c\u7684\u5219\u5171\u7528\u4e00\u4e2a Symbol 1 using Symbol = uint32_t ; SymbolTable \u4f1a\u6839\u636e\u4e0b\u9762\u4e24\u4e2amap\u505aname\u5230Symbol\u7684\u6620\u5c04 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 struct SharedSymbol { SharedSymbol ( Symbol symbol ) : symbol_ ( symbol ), ref_count_ ( 1 ) {} Symbol symbol_ ; // \u8bb0\u5f55Symbol\u88ab\u5f15\u7528\u7684\u6b21\u6570\uff0c\u5f53\u5f15\u7528\u6b21\u6570\u4e3a0\u7684\u65f6\u5019\u624d\u4f1a\u5220\u9664 uint32_t ref_count_ ; }; // Bitmap implementation. // The encode map stores both the symbol and the ref count of that symbol. // Using absl::string_view lets us only store the complete string once, in the decode map. // \u6839\u636estats name\u67e5\u8be2\u5bf9\u5e94\u7684symbol using EncodeMap = absl :: flat_hash_map < absl :: string_view , SharedSymbol , StringViewHash > ; // \u6839\u636esymbol\u67e5\u8be2\u5bf9\u5e94\u7684stats name using DecodeMap = absl :: flat_hash_map < Symbol , InlineStringPtr > ; EncodeMap encode_map_ GUARDED_BY ( lock_ ); DecodeMap decode_map_ GUARDED_BY ( lock_ ); \u628astats\u4e2d\u7684\u4e00\u6bb5\u6dfb\u52a0\u5230SymbolTable\u7684\u8fc7\u7a0b\u5982\u4e0b: \u5c06stat name \u8fdb\u884cEncoding \u521b\u5efa\u6307\u5b9a\u5927\u5c0f\u7684Storage \u5c06Encoding\u540e\u7684\u5185\u5bb9\u5b58\u653e\u5230Storage\u4e2d 1 2 3 4 5 6 7 8 9 SymbolTable :: StoragePtr SymbolTableImpl::encode ( absl :: string_view name ) { Encoding encoding ; // \u5c06stat\u6309\u7167.\u53f7\u5207\u5272\u6210\u4e00\u4e2a\u4e2atoken\uff0c\u7136\u540e\u653e\u5230Encoding\u4e2d addTokensToEncoding ( name , encoding ); // \u63a5\u7740\u521b\u5efa\u4e00\u4e2aStorage\u5b58\u50a8stats\u7f16\u7801\u540e\u7684\u5185\u5bb9 auto bytes = std :: make_unique < Storage > ( encoding . bytesRequired ()); encoding . moveToStorage ( bytes . get ()); return bytes ; } \u4e00\u4e2aStorage\u5c31\u662f\u4e00\u4e2a uint_8 \u7684\u6570\u7ec4\uff0c addTokensToEncoding \u4f1a\u5c06stats name\u6309\u7167.\u53f7\u5207\u5272\u6210\u4e00\u4e2a\u4e2atoken\u653e\u5230Encoding\u4e2d 1 2 using Storage = uint8_t []; using StoragePtr = std :: unique_ptr < Storage > ; \u8fd9\u4e2a\u662fstats name\u8fdb\u884cEncoding\u7684\u8fc7\u7a0b absl::StrSplit(name, '.') \u5207\u5272stats name symbols.push_back(toSymbol(token)) \u6bcf\u4e00\u4e2astat name\u901a\u8fc7 toSymbol \u8f6c\u6362\u4e3aSymbol\u5b58\u8d77\u6765 encoding.addSymbol(symbol) \u5c06\u6240\u6709\u7684Symbol\u6dfb\u52a0\u5230Encoding\u4e2d\u8fdb\u884c\u7f16\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 void SymbolTableImpl::addTokensToEncoding ( const absl :: string_view name , Encoding & encoding ) { if ( name . empty ()) { return ; } // We want to hold the lock for the minimum amount of time, so we do the // string-splitting and prepare a temp vector of Symbol first. const std :: vector < absl :: string_view > tokens = absl :: StrSplit ( name , '.' ); std :: vector < Symbol > symbols ; symbols . reserve ( tokens . size ()); // Now take the lock and populate the Symbol objects, which involves bumping // ref-counts in this. { Thread :: LockGuard lock ( lock_ ); for ( auto & token : tokens ) { symbols . push_back ( toSymbol ( token )); } } // Now efficiently encode the array of 32-bit symbols into a uint8_t array. for ( Symbol symbol : symbols ) { encoding . addSymbol ( symbol ); } } toSymbol \u7684\u5b9e\u73b0\u5c31\u4f9d\u8d56\u4e0a\u6587\u4e2d\u63d0\u5230\u7684 EncodeMap \u8868\uff0cstats\u7684\u6bcf\u4e00\u6bb5\u90fd\u8981\u53bb\u67e5\u8be2\u8fd9\u4e2amap\uff0c\u5982\u679c\u5df2\u7ecf\u5b58\u5728\u5c31\u76f4\u63a5\u8fd4\u56de\u5bf9\u5e94\u7684Symbol \u5426\u5219\u5c31\u521b\u5efa\u4e00\u4e2aSymbol\u3002Symbol\u672c\u8d28\u4e0a\u5c31\u662f\u4e00\u4e2a\u9012\u589e\u7684 uin32_t \u7c7b\u578b\u7684\u6574\u6570\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 Symbol SymbolTableImpl::toSymbol ( absl :: string_view sv ) { Symbol result ; auto encode_find = encode_map_ . find ( sv ); // If the string segment doesn't already exist, if ( encode_find == encode_map_ . end ()) { // We create the actual string, place it in the decode_map_, and then insert // a string_view pointing to it in the encode_map_. This allows us to only // store the string once. We use unique_ptr so copies are not made as // flat_hash_map moves values around. InlineStringPtr str = InlineString :: create ( sv ); auto encode_insert = encode_map_ . insert ({ str -> toStringView (), SharedSymbol ( next_symbol_ )}); ASSERT ( encode_insert . second ); auto decode_insert = decode_map_ . insert ({ next_symbol_ , std :: move ( str )}); ASSERT ( decode_insert . second ); result = next_symbol_ ; newSymbol (); } else { // If the insertion didn't take place, return the actual value at that location and up the // refcount at that location result = encode_find -> second . symbol_ ; ++ ( encode_find -> second . ref_count_ ); } return result ; } \u4e0a\u9762\u4ee3\u7801\u4e2d\u4e2d\u7684 next_symbol_ \u59cb\u7ec8\u6307\u5411\u4e0b\u4e00\u6b21\u5206\u914d\u7684\u65f6\u5019\u8981\u4f7f\u7528\u7684 Symbol \uff0c\u662f\u901a\u8fc7 newSymbol \u751f\u6210\u7684 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 // pool_\u5b9a\u4e49 std :: stack < Symbol > pool_ void SymbolTableImpl :: newSymbol () EXCLUSIVE_LOCKS_REQUIRED ( lock_ ) { if ( pool_ . empty ()) { next_symbol_ = ++ monotonic_counter_ ; } else { next_symbol_ = pool_ . top (); pool_ . pop (); } // This should catch integer overflow for the new symbol. ASSERT ( monotonic_counter_ != 0 ); } void SymbolTableImpl :: free ( const StatName & stat_name ) { // Before taking the lock, decode the array of symbols from the SymbolTable::Storage. const SymbolVec symbols = Encoding :: decodeSymbols ( stat_name . data (), stat_name . dataSize ()); Thread :: LockGuard lock ( lock_ ); for ( Symbol symbol : symbols ) { auto decode_search = decode_map_ . find ( symbol ); ASSERT ( decode_search != decode_map_ . end ()); auto encode_search = encode_map_ . find ( decode_search -> second -> toStringView ()); ASSERT ( encode_search != encode_map_ . end ()); // If that was the last remaining client usage of the symbol, erase the // current mappings and add the now-unused symbol to the reuse pool. // // The \"if (--EXPR.ref_count_)\" pattern speeds up BM_CreateRace by 20% in // symbol_table_speed_test.cc, relative to breaking out the decrement into a // separate step, likely due to the non-trivial dereferences in EXPR. if ( -- encode_search -> second . ref_count_ == 0 ) { decode_map_ . erase ( decode_search ); encode_map_ . erase ( encode_search ); // \u56de\u6536Symbol pool_ . push ( symbol ); } } } \u5f53\u5206\u914d\u7684 Symbol \u88ab\u56de\u6536\u7684\u65f6\u5019\u5c31\u4f1a\u901a\u8fc7\u653e\u5230pool_\u4e2d\u4e0b\u6b21\u5c31\u53ef\u4ee5\u590d\u7528\u4e86\uff0c\u8fd9\u4e2a\u673a\u5236\u7c7b\u4f3clinux\u5185\u6838\u4e2d\u7684 inode \u5206\u914d\u4e00\u6837\u3002 \u5230\u6b64\u4e3a\u6b62 Symbol \u5230stat name\u7684\u6620\u5c04\u5173\u7cfb\uff0c\u4ee5\u53ca Symbol \u7684\u5206\u914d\u548c\u91ca\u653e\u5c31\u8bb2\u6e05\u695a\u4e86\uff0c\u4e0b\u4e00\u6b65\u5c31\u662f\u5c06\u8fd9\u4e9b Symbol \u8fdb\u4e00\u6b65 Encoding\u6765 \u51cf\u5c11\u5b58\u50a8\u7684\u5927\u5c0f\u3002 \u5728 addTokensToEncoding \u7684\u5b9e\u73b0\u4e2d\u7684\u6700\u540e\u4e00\u6b65\u5c31\u662f\u901a\u8fc7 Encoding::addSymbol \u65b9\u6cd5\u5c06\u4e00\u4e2astats\u4ea7\u751f\u7684\u6240\u6709Symbol\u8fdb\u884cEncoding\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 static const uint32_t SpilloverMask = 0x80 ; static const uint32_t Low7Bits = 0x7f ; std :: vector < uint8_t > vec_ ; void SymbolTableImpl::Encoding::addSymbol ( Symbol symbol ) { // UTF-8-like encoding where a value 127 or less gets written as a single // byte. For higher values we write the low-order 7 bits with a 1 in // the high-order bit. Then we right-shift 7 bits and keep adding more bytes // until we have consumed all the non-zero bits in symbol. // // When decoding, we stop consuming uint8_t when we see a uint8_t with // high-order bit 0. do { if ( symbol < ( 1 << 7 )) { vec_ . push_back ( symbol ); // symbols <= 127 get encoded in one byte. } else { vec_ . push_back (( symbol & Low7Bits ) | SpilloverMask ); // symbols >= 128 need spillover bytes. } symbol >>= 7 ; } while ( symbol != 0 ); } \u6574\u4e2a\u7f16\u7801\u7684\u8fc7\u7a0b\u7c7b\u4f3c\u4e8e UTF-8 \u7f16\u7801\uff0c\u4f1a\u6839\u636e Symbol \u672c\u8eab\u7684\u503c\u5927\u5c0f\u6765\u51b3\u5b9a\u662f\u4f7f\u7528\u591a\u5c11\u4e2a\u5b57\u8282\u6765\u5b58\u50a8\uff0c\u5982\u679c\u662f\u5c0f\u4e8e128\u7684\u8bdd\uff0c\u90a3\u4e48\u5c31\u6309\u7167\u4e00\u4e2a\u5b57\u8282\u6765\u5b58\u50a8 \uff0c\u5982\u679c\u662f\u5927\u4e8e128\u90a3\u4e48\u5c31\u4f1a\u8fdb\u884c\u5207\u5272\u3002\u9996\u5148\u901a\u8fc7\u548c Low7Bits \u76f8\u4e0e\u62ff\u5230\u4f4e7\u4f4d\uff0c\u7136\u540e\u548c SpilloverMask \u76f8\u6216\u5c06\u6700\u9ad8\u4f4d\u8bbe\u7f6e\u4e3a1\u3002\u8fd9\u91cc\u6709\u4e2a\u7591\u95ee\u4e3a\u4ec0\u4e48\u662f\u5c0f\u4e8e128\u5c31\u7528 \u5355\u5b57\u8282\u5b58\u50a8\u5462?\u8fd9\u91cc\u4e3a\u4ec0\u4e48\u4e0d\u662f256\u5462?\uff0c vec_ \u7684\u7c7b\u578b\u5176\u5b9e\u662f uint8_t \u7684\uff0c\u5b8c\u5168\u53ef\u4ee5\u7528\u6765\u5b58\u50a8256\u3002\u4f46\u662f\u8fd9\u91cc\u53ea\u7528\u5230\u4e86\u4f4e7\u4f4d\uff0c\u6700\u9ad8\u7684\u90a3\u4e00\u4f4d\u662f\u7528\u6765\u8868\u793a\u8fd9\u4e2a Symbol \u662f\u5426 \u662f\u591a\u4e2a\u5b57\u8282\u7ec4\u6210\u8fd8\u662f\u4e00\u4e2a\u5b57\u8282\u7ec4\u6210\u7684\u3002\u5982\u679c\u662f0\u5c31\u8868\u793a\u8fd9\u4e2aSymbo\u662f\u4e00\u4e2a\u5355\u5b57\u8282\u7684\u3002\u6240\u4ee5\u5f53\u5305\u542b\u591a\u4e2a\u5b57\u8282\u7684\u65f6\u5019\uff0c\u9700\u8981\u548c SpilloverMask \u76f8\u6216\u5c06\u6700\u9ad8\u4f4d\u8bbe\u7f6e\u4e3a1\u6765\u8868\u793a\u662f\u591a\u5b57\u8282\u7684 Symbol \u3002 \u6700\u540e\u4e00\u4e2astat name\u88ab\u7f16\u7a0b\u6210\u4e86\u4e00\u4e2a std::vector<uint8_t> \uff0c\u7136\u540e\u901a\u8fc7 Encoding::moveToStorage \u65b9\u6cd5\u5c06\u6574\u4e2a std::vector<uint8_t> \u5b58\u653e\u5230 Storage \u4e2d 1 2 3 4 5 6 7 8 9 uint64_t SymbolTableImpl::Encoding::moveToStorage ( SymbolTable :: Storage symbol_array ) { const uint64_t sz = dataBytesRequired (); symbol_array = writeLengthReturningNext ( sz , symbol_array ); if ( sz != 0 ) { memcpy ( symbol_array , vec_ . data (), sz * sizeof ( uint8_t )); } vec_ . clear (); // Logically transfer ownership, enabling empty assert on destruct. return sz + StatNameSizeEncodingBytes ; } \u5230\u6b64\u4e3a\u6b62\u4e00\u4e2a Stat name \u88ab\u7f16\u7801\u6210\u4e86\u4e00\u4e2a Storage \uff0c\u8fd9\u4e2a Storage \u53ef\u4ee5\u88ab\u7528\u6765\u6784\u9020\u6210 StatName \u7ed3\u6784\uff0c\u4f46\u662f\u4e0d\u62e5\u6709Storage\u8fd9\u662f\u5bf9\u5176\u5f15\u7528\uff0c\u771f\u6b63\u62e5\u6709 Storage \u7684\u662f StatNameStorage \u800c StatLNameList \u5219\u662f\u5305\u542b\u4e86\u4e00\u7ec4\u987a\u5e8f\u7684 Stat Name \u7684\u5bb9\u5668\u3002 \u6700\u540e\u6765\u770b\u4e00\u4e2a\uff0c\u5982\u679c\u5c06\u4e00\u4e2a Symbol \u6570\u7ec4\u8f6c\u6362\u4e3a\u5bf9\u5e94\u7684 stat name \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 std :: string SymbolTableImpl::toString ( const StatName & stat_name ) const { return decodeSymbolVec ( Encoding :: decodeSymbols ( stat_name . data (), stat_name . dataSize ())); } SymbolVec SymbolTableImpl::Encoding::decodeSymbols ( const SymbolTable :: Storage array , uint64_t size ) { SymbolVec symbol_vec ; Symbol symbol = 0 ; for ( uint32_t shift = 0 ; size > 0 ; -- size , ++ array ) { uint32_t uc = static_cast < uint32_t > ( * array ); // Inverse addSymbol encoding, walking down the bytes, shifting them into // symbol, until a byte with a zero high order bit indicates this symbol is // complete and we can move to the next one. symbol |= ( uc & Low7Bits ) << shift ; if (( uc & SpilloverMask ) == 0 ) { symbol_vec . push_back ( symbol ); shift = 0 ; symbol = 0 ; } else { shift += 7 ; } } return symbol_vec ; } decodeSymbols \u4f1a\u5c06 Storage \u8f6c\u6362\u6210\u4e00\u4e2a SymbolVec \uff0c\u56e0\u4e3a\u4e00\u4e2a Storage \u53ef\u4ee5\u5305\u542b\u591a\u4e2a Symbol \u3002\u8f6c\u6362\u7684\u8fc7\u7a0b\u5982\u4e0b: \u6bcf\u6b21\u4eceStorage\u4e2d\u90a3\u4e00\u4e2a uint8_t \uff0c\u7136\u540e\u8f6c\u6362\u4e3a uint32_t \uff0c\u56e0\u4e3aSymbol\u7684\u7c7b\u578b\u5c31\u662f uint32_t \u63a5\u7740\u901a\u8fc7\u548c Low7Bits \u76f8\u6216\u62ff\u5230\u4f4e7\u4f4d\u7684\u503c \u5224\u65ad SpilloverMask \u4f4d\u662f\u5426\u662f0\uff0c\u5982\u679c\u662f0\u90a3\u5c31\u662f\u4e00\u4e2a\u5b8c\u6574\u7684 Symbol \u76f4\u63a5\u653e\u5230SymbolVec\u5373\u53ef \u5982\u679c\u662f1\u8868\u660e\uff0cSymbol\u8fd8\u8981\u7ee7\u7eed\u7ec4\u88c5\uff0c\u518d\u6b21\u8bfb\u53d6\u4e00\u4e2auint8_t\uff0c\u7136\u540e\u53d6\u4f4e7\u4f4d\uff0c\u8fd9\u4e2a\u65f6\u5019\uff0c\u9700\u8981\u5411\u5de6\u79fb\u52a87\u4f4d\uff0c\u56e0\u4e3aSymbol\u7684\u6bcf\u4e00\u4e2a\u90e8\u5206\u90fd\u662f7\u4f4d\u7ec4\u6210\uff0c\u4f9d\u6b21\u6392\u653e\u7684\u3002","title":"Stats Symbol\u5206\u6790"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/envoy/subset_lb/","text":"Subset Load Balancer\u5206\u6790 Subset\u672c\u8d28\u4e0a\u662f\u5c06\u4e00\u4e2a\u96c6\u7fa4\u62c6\u5206\u6210\u591a\u4e2a\u5b50\u96c6\uff0c\u5728Envoy\u4e2d\u8fd9\u4e2a\u5b50\u96c6\u79f0\u4e3asubset\uff0c\u800csubset\u7684\u5212\u5206\u662f\u6839\u636e\u6bcf\u4e00\u4e2aendpoint\u4e2d\u643a\u5e26\u7684metadata\u6765\u7ec4\u7ec7subset\u7684\u3002\u6709\u4e86\u8fd9\u4e9bsubset\u540e\uff0c\u5728\u8def\u7531\u65f6\u4f1a\u6839\u636e \u8bf7\u6c42\u4e2d\u643a\u5e26\u7684metadata\u6765\u9009\u62e9\u8def\u7531\u5230\u54ea\u4e2asubset\u96c6\u5408\u3002\u6700\u540e\u518d\u6839\u636e\u96c6\u7fa4\u6307\u5b9a\u7684\u8d1f\u8f7d\u5747\u8861\u7b97\u6cd5\u4ecesubset\u4e2d\u9009\u62e9\u4e00\u53f0\u673a\u5668\u3002 Subset\u914d\u7f6e\u5206\u6790 1 2 3 4 5 6 7 8 9 { \"fallback_policy\" : \"...\" , \"default_subset\" : \"{...}\" , \"subset_selectors\" : [], \"locality_weight_aware\" : \"...\" , \"scale_locality_weight\" : \"...\" , \"panic_mode_any\" : \"...\" , \"list_as_any\" : \"...\" } fallback_policy: NO_FALLBACK \u5982\u679c\u6ca1\u6709\u5339\u914d\u7684subset\u5c31\u5931\u8d25\uff0c\b\u8fd4\u56deno healthy upstream\u7c7b\u4f3c\u7684\u9519\u8bef\u3002 ANY_ENDPOINT \u5982\u679c\u6ca1\u6709\u5339\u914d\u7684subset\u5c31\u4ece\u6574\u4e2a\u96c6\u7fa4\u4e2d\u6309\u7167\u8d1f\u8f7d\u5747\u8861\u7684\u7b56\u7565\u6765\u9009\u62e9\u3002 DEFAULT_SUBSET \u5982\u679c\u6ca1\u6709\u5339\u914d\u7684subset\uff0c\u5c31\u4f7f\u7528\u9ed8\u8ba4\u914d\u7f6e\u7684subset\uff0c\u5982\u679c\u914d\u7f6e\u7684\u9ed8\u8ba4subset\u4e5f\u4e0d\u5b58\u5728\u5c31\u7b49\u540c\u4e8eNO_FALLBACK default_subset \u6307\u5b9a\u4e00\u4e2aset\u96c6\u5408\uff0c\u7528\u6765\u5728fallback\u7684\u65f6\u5019\uff0c\u8fdb\u884c\u9009\u62e9 locality_weight_aware subset_selectors \u7528\u6765\u8868\u660esubset\u5982\u4f55\u751f\u6210\uff0c\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\u5c31\u662f\u8868\u660e\u5e26\u6709a\u548cb\u7684metadata\u7684\u673a\u5668\u4f1a\u7ec4\u6210\u4e00\u4e2asubset\u3002\u5982\u679c\u4e00\u4e2a\u673a\u5668\u5e26\u6709a\u3001b\u3001x\u4e09\u4e2ametadata\uff0c \u90a3\u4e48\u8fd9\u53f0\u673a\u5668\u5c31\u4f1a\u5c5e\u4e8e\u4e24\u4e2asubset\u3002 1 2 3 4 5 6 { \"subset_selectors\" : [ { \"keys\" : [ \"a\" , \"b\" ] }, { \"keys\" : [ \"x\" ] } ] } * locality_weight_aware scale_locality_weight panic_mode_any \u9ed8\u8ba4\u5b50\u96c6\u4e0d\u4e3a\u7a7a\uff0c\u4f46\u662f\u901a\u8fc7fallback\u7b56\u7565\u4f7f\u7528\u9ed8\u8ba4\u5b50\u96c6\u7684\u65f6\u5019\uff0c\u4ecd\u7136\u6ca1\u6709\u9009\u62e9\u5230\u4e3b\u673a\uff0c\u90a3\u4e48\u901a\u8fc7\u8fd9\u4e2a\u9009\u9879\u4f1a\u4f7f\u5f97\u4ece\u6240\u6709\u673a\u5668\u4e2d\u9009\u62e9\u4e00\u53f0\u673a\u5668\u6765\u8fdb\u884c\u8def\u7531 1 2 3 4 5 6 7 8 if ( cluster -> lbSubsetInfo (). isEnabled ()) { lb_ = std :: make_unique < SubsetLoadBalancer > ( cluster -> lbType (), priority_set_ , parent_ . local_priority_set_ , cluster -> stats (), cluster -> statsScope (), parent . parent_ . runtime_ , parent . parent_ . random_ , cluster -> lbSubsetInfo (), cluster -> lbRingHashConfig (), cluster -> lbMaglevConfig (), cluster -> lbLeastRequestConfig (), cluster -> lbConfig ()); } ..... \u4f8b\u5b50 Example Endpoint stage version type xlarge e1 prod 1.0 std true e2 prod 1.0 std e3 prod 1.1 std e4 prod 1.1 std e5 prod 1.0 bigmem e6 prod 1.1 bigmem e7 dev 1.2-pre std Note: Only e1 has the \"xlarge\" metadata key. Given this CDS envoy::api::v2::Cluster : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 { \"name\" : \"c1\" , \"lb_policy\" : \"ROUND_ROBIN\" , \"lb_subset_config\" : { \"fallback_policy\" : \"DEFAULT_SUBSET\" , \"default_subset\" : { \"stage\" : \"prod\" , \"version\" : \"1.0\" , \"type\" : \"std\" }, \"subset_selectors\" : [ { \"keys\" : [ \"stage\" , \"type\" ] }, { \"keys\" : [ \"stage\" , \"version\" ] }, { \"keys\" : [ \"version\" ] }, { \"keys\" : [ \"xlarge\" , \"version\" ] }, ] } } \u4e0b\u9762\u8fd9\u4e9bsubset\u5c06\u4f1a\u751f\u6210: stage=prod, type=std (e1, e2, e3, e4) stage=prod, type=bigmem (e5, e6) stage=dev, type=std (e7) stage=prod, version=1.0 (e1, e2, e5) stage=prod, version=1.1 (e3, e4, e6) stage=dev, version=1.2-pre (e7) version=1.0 (e1, e2, e5) version=1.1 (e3, e4, e6) version=1.2-pre (e7) version=1.0, xlarge=true (e1) \u9ed8\u8ba4\u7684subset stage=prod, type=std, version=1.0 (e1, e2) Example: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 filter_chains : - filters : - name : envoy.http_connection_manager config : codec_type : auto stat_prefix : ingress_http route_config : name : local_route virtual_hosts : - name : backend domains : - \"*\" routes : - match : prefix : \"/\" route : cluster : service1 metadata_match : filter_metadata : envoy.lb : env : taobao http_filters : - name : envoy.router config : {} clusters : - name : service1 connect_timeout : 0.25s type : strict_dns lb_policy : round_robin lb_subset_config : fallback_policy : DEFAULT_SUBSET default_subset : env : \"taobao\" subset_selectors : - keys : - env load_assignment : cluster_name : service1 endpoints : lb_endpoints : - endpoint : address : socket_address : address : 127.0.0.1 port_value : 8081 metadata : filter_metadata : envoy.lb : env : hema - endpoint : address : socket_address : address : 127.0.0.1 port_value : 8082 metadata : filter_metadata : envoy.lb : env : taobao","title":"Subset Load Balancer\u5206\u6790"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/envoy/subset_lb/#subset-load-balancer","text":"Subset\u672c\u8d28\u4e0a\u662f\u5c06\u4e00\u4e2a\u96c6\u7fa4\u62c6\u5206\u6210\u591a\u4e2a\u5b50\u96c6\uff0c\u5728Envoy\u4e2d\u8fd9\u4e2a\u5b50\u96c6\u79f0\u4e3asubset\uff0c\u800csubset\u7684\u5212\u5206\u662f\u6839\u636e\u6bcf\u4e00\u4e2aendpoint\u4e2d\u643a\u5e26\u7684metadata\u6765\u7ec4\u7ec7subset\u7684\u3002\u6709\u4e86\u8fd9\u4e9bsubset\u540e\uff0c\u5728\u8def\u7531\u65f6\u4f1a\u6839\u636e \u8bf7\u6c42\u4e2d\u643a\u5e26\u7684metadata\u6765\u9009\u62e9\u8def\u7531\u5230\u54ea\u4e2asubset\u96c6\u5408\u3002\u6700\u540e\u518d\u6839\u636e\u96c6\u7fa4\u6307\u5b9a\u7684\u8d1f\u8f7d\u5747\u8861\u7b97\u6cd5\u4ecesubset\u4e2d\u9009\u62e9\u4e00\u53f0\u673a\u5668\u3002","title":"Subset Load Balancer\u5206\u6790"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/envoy/subset_lb/#subset","text":"1 2 3 4 5 6 7 8 9 { \"fallback_policy\" : \"...\" , \"default_subset\" : \"{...}\" , \"subset_selectors\" : [], \"locality_weight_aware\" : \"...\" , \"scale_locality_weight\" : \"...\" , \"panic_mode_any\" : \"...\" , \"list_as_any\" : \"...\" } fallback_policy: NO_FALLBACK \u5982\u679c\u6ca1\u6709\u5339\u914d\u7684subset\u5c31\u5931\u8d25\uff0c\b\u8fd4\u56deno healthy upstream\u7c7b\u4f3c\u7684\u9519\u8bef\u3002 ANY_ENDPOINT \u5982\u679c\u6ca1\u6709\u5339\u914d\u7684subset\u5c31\u4ece\u6574\u4e2a\u96c6\u7fa4\u4e2d\u6309\u7167\u8d1f\u8f7d\u5747\u8861\u7684\u7b56\u7565\u6765\u9009\u62e9\u3002 DEFAULT_SUBSET \u5982\u679c\u6ca1\u6709\u5339\u914d\u7684subset\uff0c\u5c31\u4f7f\u7528\u9ed8\u8ba4\u914d\u7f6e\u7684subset\uff0c\u5982\u679c\u914d\u7f6e\u7684\u9ed8\u8ba4subset\u4e5f\u4e0d\u5b58\u5728\u5c31\u7b49\u540c\u4e8eNO_FALLBACK default_subset \u6307\u5b9a\u4e00\u4e2aset\u96c6\u5408\uff0c\u7528\u6765\u5728fallback\u7684\u65f6\u5019\uff0c\u8fdb\u884c\u9009\u62e9 locality_weight_aware subset_selectors \u7528\u6765\u8868\u660esubset\u5982\u4f55\u751f\u6210\uff0c\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\u5c31\u662f\u8868\u660e\u5e26\u6709a\u548cb\u7684metadata\u7684\u673a\u5668\u4f1a\u7ec4\u6210\u4e00\u4e2asubset\u3002\u5982\u679c\u4e00\u4e2a\u673a\u5668\u5e26\u6709a\u3001b\u3001x\u4e09\u4e2ametadata\uff0c \u90a3\u4e48\u8fd9\u53f0\u673a\u5668\u5c31\u4f1a\u5c5e\u4e8e\u4e24\u4e2asubset\u3002 1 2 3 4 5 6 { \"subset_selectors\" : [ { \"keys\" : [ \"a\" , \"b\" ] }, { \"keys\" : [ \"x\" ] } ] } * locality_weight_aware scale_locality_weight panic_mode_any \u9ed8\u8ba4\u5b50\u96c6\u4e0d\u4e3a\u7a7a\uff0c\u4f46\u662f\u901a\u8fc7fallback\u7b56\u7565\u4f7f\u7528\u9ed8\u8ba4\u5b50\u96c6\u7684\u65f6\u5019\uff0c\u4ecd\u7136\u6ca1\u6709\u9009\u62e9\u5230\u4e3b\u673a\uff0c\u90a3\u4e48\u901a\u8fc7\u8fd9\u4e2a\u9009\u9879\u4f1a\u4f7f\u5f97\u4ece\u6240\u6709\u673a\u5668\u4e2d\u9009\u62e9\u4e00\u53f0\u673a\u5668\u6765\u8fdb\u884c\u8def\u7531 1 2 3 4 5 6 7 8 if ( cluster -> lbSubsetInfo (). isEnabled ()) { lb_ = std :: make_unique < SubsetLoadBalancer > ( cluster -> lbType (), priority_set_ , parent_ . local_priority_set_ , cluster -> stats (), cluster -> statsScope (), parent . parent_ . runtime_ , parent . parent_ . random_ , cluster -> lbSubsetInfo (), cluster -> lbRingHashConfig (), cluster -> lbMaglevConfig (), cluster -> lbLeastRequestConfig (), cluster -> lbConfig ()); } .....","title":"Subset\u914d\u7f6e\u5206\u6790"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/envoy/subset_lb/#_1","text":"Example Endpoint stage version type xlarge e1 prod 1.0 std true e2 prod 1.0 std e3 prod 1.1 std e4 prod 1.1 std e5 prod 1.0 bigmem e6 prod 1.1 bigmem e7 dev 1.2-pre std Note: Only e1 has the \"xlarge\" metadata key. Given this CDS envoy::api::v2::Cluster : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 { \"name\" : \"c1\" , \"lb_policy\" : \"ROUND_ROBIN\" , \"lb_subset_config\" : { \"fallback_policy\" : \"DEFAULT_SUBSET\" , \"default_subset\" : { \"stage\" : \"prod\" , \"version\" : \"1.0\" , \"type\" : \"std\" }, \"subset_selectors\" : [ { \"keys\" : [ \"stage\" , \"type\" ] }, { \"keys\" : [ \"stage\" , \"version\" ] }, { \"keys\" : [ \"version\" ] }, { \"keys\" : [ \"xlarge\" , \"version\" ] }, ] } } \u4e0b\u9762\u8fd9\u4e9bsubset\u5c06\u4f1a\u751f\u6210: stage=prod, type=std (e1, e2, e3, e4) stage=prod, type=bigmem (e5, e6) stage=dev, type=std (e7) stage=prod, version=1.0 (e1, e2, e5) stage=prod, version=1.1 (e3, e4, e6) stage=dev, version=1.2-pre (e7) version=1.0 (e1, e2, e5) version=1.1 (e3, e4, e6) version=1.2-pre (e7) version=1.0, xlarge=true (e1) \u9ed8\u8ba4\u7684subset stage=prod, type=std, version=1.0 (e1, e2) Example: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 filter_chains : - filters : - name : envoy.http_connection_manager config : codec_type : auto stat_prefix : ingress_http route_config : name : local_route virtual_hosts : - name : backend domains : - \"*\" routes : - match : prefix : \"/\" route : cluster : service1 metadata_match : filter_metadata : envoy.lb : env : taobao http_filters : - name : envoy.router config : {} clusters : - name : service1 connect_timeout : 0.25s type : strict_dns lb_policy : round_robin lb_subset_config : fallback_policy : DEFAULT_SUBSET default_subset : env : \"taobao\" subset_selectors : - keys : - env load_assignment : cluster_name : service1 endpoints : lb_endpoints : - endpoint : address : socket_address : address : 127.0.0.1 port_value : 8081 metadata : filter_metadata : envoy.lb : env : hema - endpoint : address : socket_address : address : 127.0.0.1 port_value : 8082 metadata : filter_metadata : envoy.lb : env : taobao","title":"\u4f8b\u5b50"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/envoy/wasm/","text":"Envoy Proxy Wasm\u5206\u6790 To implement a WASM filter Implement a root context class which inherits base root context class Implement a stream context class which inherits the base context class. Override context API methods to handle corresponding initialization and stream events from host. Register the root context and stream context. Root Context\u548cContext\u662fWASM Filter\u4e2d\u6bd4\u8f83\u5173\u952e\u7684\u4e24\u4e2a\u5bf9\u8c61\uff0c\u524d\u8005\u7528\u4e8eWASM\u5b9e\u4f8b\u4e4b\u95f4\u7684\u5168\u5c40\u5171\u4eab\uff0c\u800cContext\u5219\u662f\u548cStream\u76f8\u5173\u7684\u4e00\u4e2aContext\u8d2f\u7a7f\u6574\u4e2a\u8bf7\u6c42\u7684\u751f\u547d\u5468\u671f \u5728\u8fd9\u4e2a\u8bf7\u6c42\u4e4b\u4e0a\u7684\u5404\u4e2aWASM\u5b9e\u4f8b\u53ef\u4ee5\u5171\u4eab\u8fd9\u4e2aContext\uff0c\u4e0b\u9762\u8fd9\u5f20\u56fe\u662fWasm\u5b9e\u4f8b\u548cContext\u4e4b\u95f4\u7684\u5173\u7cfb\u3002 git Wasm\u5728Envoy\u5185\u90e8\u53c8\u5206\u4e3a\u4e24\u7c7b\uff0c\u4e00\u7c7b\u662f\u7528\u6765\u63d0\u4f9bService\u80fd\u529b\u7684\uff0c\u53e6\u5916\u4e00\u7c7b\u5219\u662f\u7528\u6765\u63d0\u4f9bSilo\u7684\uff0c\u67b6\u6784\u5982\u4e0b\u3002 \u542f\u52a8\u9636\u6bb5\u521b\u5efaWasm Service\uff0c\u4e00\u4e2aWasm Service\u5176\u5b9e\u5c31\u662fWasm VM\u5b9e\u4f8b\uff0c\u53ef\u4ee5\u8bbe\u7f6e\u4e3a\u5355\u4f8b\uff0c\u4e5f\u53ef\u4ee5\u8bbe\u7f6e\u4e3aper worker per Wasm VM \u6bcf\u4e00\u4e2aWasm VM\u4e0b\u9762\u53ef\u4ee5\u8fd0\u884c\u591a\u4e2aPlugin\u3002\u8fd9\u4e9bPlugin\u662f\u7528\u6765\u63d0\u4f9b\u670d\u52a1\u80fd\u529b\u7684\uff0c\u6bd4\u5982log\u3001metrics\u7b49\u7b49\uff0c\u548cWasm Http Filter\u3001Network Filter\u662f\u4e24\u7c7bWasm \u8fd9\u4e24\u8005\u4e4b\u95f4\u901a\u8fc7SharedData\u548cMessageQueue\u8fdb\u884c\u76f8\u4e92\u901a\u4fe1 1 2 3 4 5 6 7 8 9 10 11 // WasmService is configured as a built-in *envoy.wasm_service* :ref:`ServiceConfig // <envoy_api_msg_extensions.wasm.v3.WasmService>`. This opaque configuration will be used to // create a Wasm Service. message WasmService { // General plugin configuration. PluginConfig config = 1 ; // If true, create a single VM rather than creating one VM per worker. Such a singleton can // not be used with filters. bool singleton = 2 ; } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 void WasmServiceExtension::createWasm ( Server :: Configuration :: ServerFactoryContext & context ) { auto plugin = std :: make_shared < Common :: Wasm :: Plugin > ( config_ . config (), envoy :: config :: core :: v3 :: TrafficDirection :: UNSPECIFIED , context . localInfo (), nullptr ); auto callback = [ this , & context , plugin ]( Common :: Wasm :: WasmHandleSharedPtr base_wasm ) { if ( ! base_wasm ) { if ( plugin -> fail_open_ ) { ENVOY_LOG ( error , \"Unable to create Wasm service {}\" , plugin -> name_ ); } else { ENVOY_LOG ( critical , \"Unable to create Wasm service {}\" , plugin -> name_ ); } return ; } if ( config_ . singleton ()) { // Return a Wasm VM which will be stored as a singleton by the Server. wasm_service_ = std :: make_unique < WasmService > ( plugin , Common :: Wasm :: getOrCreateThreadLocalPlugin ( base_wasm , plugin , context . dispatcher ())); return ; } // Per-thread WASM VM. // NB: the Slot set() call doesn't complete inline, so all arguments must outlive this call. auto tls_slot = ThreadLocal :: TypedSlot < Common :: Wasm :: PluginHandle >:: makeUnique ( context . threadLocal ()); tls_slot -> set ([ base_wasm , plugin ]( Event :: Dispatcher & dispatcher ) { return Common :: Wasm :: getOrCreateThreadLocalPlugin ( base_wasm , plugin , dispatcher ); }); wasm_service_ = std :: make_unique < WasmService > ( plugin , std :: move ( tls_slot )); }; if ( ! Common :: Wasm :: createWasm ( plugin , context . scope (). createScope ( \"\" ), context . clusterManager (), context . initManager (), context . dispatcher (), context . api (), context . lifecycleNotifier (), remote_data_provider_ , std :: move ( callback ))) { // NB: throw if we get a synchronous configuration failures as this is how such failures are // reported to xDS. throw Common :: Wasm :: WasmException ( fmt :: format ( \"Unable to create Wasm service {}\" , plugin -> name_ )); } } 1 2 3 4 5 6 7 8 9 10 11 12 class WasmService { public : WasmService ( PluginSharedPtr plugin , PluginHandleSharedPtr singleton ) : plugin_ ( plugin ), singleton_ ( std :: move ( singleton )) {} WasmService ( PluginSharedPtr plugin , ThreadLocal :: TypedSlotPtr < PluginHandle >&& tls_slot ) : plugin_ ( plugin ), tls_slot_ ( std :: move ( tls_slot )) {} private : PluginSharedPtr plugin_ ; PluginHandleSharedPtr singleton_ ; ThreadLocal :: TypedSlotPtr < PluginHandle > tls_slot_ ; }; WasmService\u6301\u6709\u5bf9Plugin\u7684Handle\uff0cPlugin Handle\u6301\u6709Wasm Handle\u4e5f\u5c31\u662f Common::Wasm::WasmHandleSharedPtr \uff0c\u901a\u8fc7 getOrCreateThreadLocalPlugin \u6765\u521b\u5efa 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 PluginHandleSharedPtr getOrCreateThreadLocalPlugin ( const WasmHandleSharedPtr & base_wasm , const PluginSharedPtr & plugin , Event :: Dispatcher & dispatcher , CreateContextFn create_root_context_for_testing ) { if ( ! base_wasm ) { if ( ! plugin -> fail_open_ ) { ENVOY_LOG_TO_LOGGER ( Envoy :: Logger :: Registry :: getLog ( Envoy :: Logger :: Id :: wasm ), critical , \"Plugin configured to fail closed failed to load\" ); } return nullptr ; } return std :: static_pointer_cast < PluginHandle > ( proxy_wasm :: getOrCreateThreadLocalPlugin ( std :: static_pointer_cast < WasmHandle > ( base_wasm ), plugin , getCloneFactory ( getWasmExtension (), dispatcher , create_root_context_for_testing ), getPluginFactory ( getWasmExtension ()))); } Common::Wasm::createWasm \u521b\u5efa wasm vm\u5b9e\u4f8b\uff0c\u5185\u90e8\u8c03\u7528 Common::Wasm::createWasmInternal createWasmInternal\u4f1a\u6839\u636eConfig\u6765\u521b\u5efaWasm\u5b9e\u4f8b: wasm\u7684code\u662f\u5426\u6765\u81ea\u8fdc\u7a0b\uff0c\u5982\u679c\u662f\u5219\u4ece\u8fdc\u7a0b\u83b7\u53d6\uff0c\u5e76\u7ef4\u62a4code cache \u521b\u5efawasm stats \u6e05\u9664code cache\u7f13\u5b58 \u5982\u679c\u4e0d\u662f\u6765\u81ea\u8fdc\u7a0b\u5c31\u4ece\u672c\u5730\u52a0\u8f7d \u5982\u679c\u8fdc\u7a0b\u83b7\u53d6\u5931\u8d25\u5c31\u7ee7\u7eed\u83b7\u53d6\uff0c\u5e76\u8bbe\u7f6ecallback \u5982\u679c\u83b7\u53d6\u6210\u529f\u5c31\u76f4\u63a5\u6784\u5efaWasm \u521b\u5efavmKey\uff0c\u7528\u4e8e\u552f\u4e00\u8868\u793a\u4e00\u4e2awasm(\u76f8\u540c\u7684\u914d\u7f6e\uff0c\u4f46\u662fcode\u4e0d\u540c\u4e5f\u662f\u4e0d\u540c\u7684wasm vm) \u521b\u5efawasm \u4ecemap\u4e2d\u6839\u636evm_key\u67e5\u627e\u5bf9\u5e94\u7684wasm\uff0c\u67e5\u627e\u5230\u540e\u76f4\u63a5\u8fd4\u56de \u5982\u679c\u6ca1\u6709\u67e5\u627e\u5230\u5c31\u521b\u5efa\u4e00\u4e2aWasm \u5185\u90e8\u83b7\u53d6\u5230code\u540e\uff0c\u4f1a\u8c03\u7528 proxy_wasm::createWasm \u6765\u521b\u5efa\u6700\u7ec8\u7684wasm vm\u5b9e\u4f8b\uff0c\u6700\u7ec8\u521b\u5efa\u7684\u5b9e\u4f8b\u5c31\u662f Wasm \u4ee5\u4e00\u4e2aRust Example\u4e3a\u4f8b\uff0c\u6765\u5206\u6790\u4e0b\uff0c\u6574\u4e2a\u6d41\u7a0b: Rust SDK\u4e2d\u5b9a\u4e49\u4e86\u8bb8\u591a\u7531Envoy\u66b4\u9732\u7ed9Wasm\u7684\u65b9\u6cd5\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u53ea\u6709\u58f0\u660e\u6ca1\u6709\u5b9a\u4e49\uff0c\u5177\u4f53\u7684\u5b9e\u73b0\u5728Envoy\u4e2d\uff0c\u662f\u5728\u521b\u5efawasm\u7684\u65f6\u5019\u7531wasm\u8fdb\u884clink 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 extern \"C\" { fn proxy_log ( level : LogLevel , message_data : * const u8 , message_size : usize ) -> Status ; } pub fn log ( level : LogLevel , message : & str ) -> Result < (), Status > { unsafe { match proxy_log ( level , message . as_ptr (), message . len ()) { Status :: Ok => Ok (()), status => panic! ( \"unexpected status: {}\" , status as u32 ), } } } extern \"C\" { fn proxy_get_current_time_nanoseconds ( return_time : * mut u64 ) -> Status ; } pub fn get_current_time () -> Result < SystemTime , Status > { let mut return_time : u64 = 0 ; unsafe { match proxy_get_current_time_nanoseconds ( & mut return_time ) { Status :: Ok => Ok ( UNIX_EPOCH + Duration :: from_nanos ( return_time )), status => panic! ( \"unexpected status: {}\" , status as u32 ), } } } ...... \u62ff proxy_log \u4e3e\u4f8b\u6765\u8bf4\uff0c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 pub fn _start () { proxy_wasm :: set_log_level ( LogLevel :: Trace ); proxy_wasm :: set_root_context ( | _ | -> Box < dyn RootContext > { Box :: new ( HelloWorld ) }); } struct HelloWorld ; impl Context for HelloWorld {} impl RootContext for HelloWorld { fn on_vm_start ( & mut self , _ : usize ) -> bool { // \u5185\u90e8\u8c03\u7528proxy_log info ! ( \"Hello, World!\" ); self . set_tick_period ( Duration :: from_secs ( 5 )); true } fn on_tick ( & mut self ) { let datetime : DateTime < Utc > = self . get_current_time (). into (); info ! ( \"It's {}\" , datetime ); } } wasm\u63d2\u4ef6\u53ef\u4ee5\u76f4\u63a5\u8c03\u7528 proxy_log \u76f8\u5173\u7684\u65b9\u6cd5\uff0c\u8fd9\u4e2aproxy_log\u65b9\u6cd5\u662fhost\u73af\u5883\u6ce8\u518c\u8fdb\u6765\u7684\u3002 host\u73af\u5883\u6ce8\u518c proxy_log \u65b9\u6cd5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // Calls with the \"proxy_\" prefix. #define _REGISTER_PROXY(_fn) \\ wasm_vm_->registerCallback( \\ \"env\", \"proxy_\" #_fn, &exports::_fn, \\ &ConvertFunctionWordToUint32<decltype(exports::_fn), \\ exports::_fn>::convertFunctionWordToUint32); _REGISTER_PROXY ( log ); _REGISTER_PROXY ( get_status ); _REGISTER_PROXY ( set_property ); _REGISTER_PROXY ( get_property ); _REGISTER_PROXY ( continue_request ); _REGISTER_PROXY ( continue_response ); _REGISTER_PROXY ( send_local_response ); \u53ef\u4ee5\u770b\u51fa\uff0c\u5b9e\u9645\u4e0aproxy_log\u6700\u7ec8\u8c03\u7528\u7684\u662f exports::log \u65b9\u6cd5 exports::log 1 2 3 4 5 6 7 8 9 10 11 Word log ( void * raw_context , Word level , Word address , Word size ) { if ( level > static_cast < uint64_t > ( LogLevel :: Max )) { return WasmResult :: BadArgument ; } auto context = WASM_CONTEXT ( raw_context ); auto message = context -> wasmVm () -> getMemory ( address , size ); if ( ! message ) { return WasmResult :: InvalidMemoryAccess ; } return context -> log ( level , message . value ()); } \u6700\u7ec8\u8c03\u7528\u7684ContextBase\u7684log\u63a5\u53e3\uff0c\u8fd9\u4e2a\u63a5\u53e3\u6700\u7ec8\u7531Host\u73af\u5883Envoy\u6765\u5b9e\u73b0 \u6700\u7ec8\u5b9e\u73b0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 WasmResult Context::log ( uint32_t level , absl :: string_view message ) { switch ( static_cast < spdlog :: level :: level_enum > ( level )) { case spdlog :: level :: trace : ENVOY_LOG ( trace , \"wasm log{}: {}\" , log_prefix (), message ); return WasmResult :: Ok ; case spdlog :: level :: debug : ENVOY_LOG ( debug , \"wasm log{}: {}\" , log_prefix (), message ); return WasmResult :: Ok ; case spdlog :: level :: info : ENVOY_LOG ( info , \"wasm log{}: {}\" , log_prefix (), message ); return WasmResult :: Ok ; case spdlog :: level :: warn : ENVOY_LOG ( warn , \"wasm log{}: {}\" , log_prefix (), message ); return WasmResult :: Ok ; case spdlog :: level :: err : ENVOY_LOG ( error , \"wasm log{}: {}\" , log_prefix (), message ); return WasmResult :: Ok ; case spdlog :: level :: critical : ENVOY_LOG ( critical , \"wasm log{}: {}\" , log_prefix (), message ); return WasmResult :: Ok ; case spdlog :: level :: off : return WasmResult :: Ok ; } NOT_IMPLEMENTED_GCOVR_EXCL_LINE ; } \u63a5\u4e0b\u6765\u770b\u4e0b\u5982\u4f55\u8c03\u7528wasm\u4e2d\u7684\u4e00\u4e2a\u65b9\u6cd5 rust exmaple 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 #[no_mangle] pub fn _start () { proxy_wasm :: set_log_level ( LogLevel :: Trace ); proxy_wasm :: set_http_context ( | context_id , _ | -> Box < dyn HttpContext > { Box :: new ( HttpHeaders { context_id }) }); } struct HttpHeaders { context_id : u32 , } impl Context for HttpHeaders {} impl HttpContext for HttpHeaders { fn on_http_request_headers ( & mut self , _ : usize ) -> Action { for ( name , value ) in & self . get_http_request_headers () { trace ! ( \"#{} -> {}: {}\" , self . context_id , name , value ); } match self . get_http_request_header ( \":path\" ) { Some ( path ) if path == \"/hello\" => { self . send_http_response ( 200 , vec! [( \"Hello\" , \"World\" ), ( \"Powered-By\" , \"proxy-wasm\" )], Some ( b\"Hello, World! \\n \" ), ); Action :: Pause } _ => Action :: Continue , } } fn on_http_response_headers ( & mut self , _ : usize ) -> Action { for ( name , value ) in & self . get_http_response_headers () { trace ! ( \"#{} <- {}: {}\" , self . context_id , name , value ); } Action :: Continue } fn on_log ( & mut self ) { trace ! ( \"#{} completed.\" , self . context_id ); } } \u62ff on_http_request_headers \u4e3e\u4f8b\u6765\u8bf4\uff0c\u5f53\u4e00\u4e2a\u8bf7\u6c42\u8fdb\u6765\u7684\u65f6\u5019\uff0c\u5e76\u89e3\u6790\u5b8c\u6210\u540e\u4f1a\u8c03\u7528wasm\u63d2\u4ef6\u7684 on_http_request_headers \u63a5\u53e3\u3002 \u83b7\u53d6wasm\u4e2d\u7684\u6307\u5b9afunction 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 #define _GET_PROXY(_fn) wasm_vm_->getFunction(\"proxy_\" #_fn, &_fn##_); _GET_PROXY ( validate_configuration ); _GET_PROXY ( on_vm_start ); _GET_PROXY ( on_configure ); _GET_PROXY ( on_tick ); _GET_PROXY ( on_context_create ); _GET_PROXY ( on_new_connection ); _GET_PROXY ( on_downstream_data ); _GET_PROXY ( on_upstream_data ); _GET_PROXY ( on_downstream_connection_close ); _GET_PROXY ( on_upstream_connection_close ); _GET_PROXY ( on_request_headers ); _GET_PROXY ( on_request_body ); _GET_PROXY ( on_request_trailers ); _GET_PROXY ( on_request_metadata ); _GET_PROXY ( on_response_headers ); _GET_PROXY ( on_response_body ); _GET_PROXY ( on_response_trailers ); _GET_PROXY ( on_response_metadata ); _GET_PROXY ( on_http_call_response ); _GET_PROXY ( on_grpc_receive ); _GET_PROXY ( on_grpc_close ); _GET_PROXY ( on_grpc_receive_initial_metadata ); _GET_PROXY ( on_grpc_receive_trailing_metadata ); _GET_PROXY ( on_queue_ready ); _GET_PROXY ( on_done ); _GET_PROXY ( on_log ); _GET_PROXY ( on_delete ); #undef _GET_PROXY \u6700\u7ec8\u8c03\u7528\u4e0b\u9762\u7684\u4ee3\u7801\u5c06 on_http_request_headers_ \u51fd\u6570\u6307\u9488\u6307\u5411 1 2 3 4 5 6 #define _GET_MODULE_FUNCTION(T) \\ void getFunction(string_view function_name, T *f) override { \\ getModuleFunctionImpl(function_name, f); \\ }; FOR_ALL_WASM_VM_EXPORTS ( _GET_MODULE_FUNCTION ) #undef _GET_MODULE_FUNCTION 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #[no_mangle] pub extern \"C\" fn proxy_on_context_create ( context_id : u32 , root_context_id : u32 ) { DISPATCHER . with ( | dispatcher | dispatcher . on_create_context ( context_id , root_context_id )) } #[no_mangle] pub extern \"C\" fn proxy_on_done ( context_id : u32 ) -> bool { DISPATCHER . with ( | dispatcher | dispatcher . on_done ( context_id )) } #[no_mangle] pub extern \"C\" fn proxy_on_log ( context_id : u32 ) { DISPATCHER . with ( | dispatcher | dispatcher . on_log ( context_id )) } #[no_mangle] pub extern \"C\" fn proxy_on_delete ( context_id : u32 ) { DISPATCHER . with ( | dispatcher | dispatcher . on_delete ( context_id )) } \u57fa\u672c\u6982\u5ff5 Wasm::Context \u662fEnvoy\u548cwasm\u63d2\u4ef6\u7684\u6865\u6881\uff0cContext\u7ee7\u627f\u4e86Envoy\u5185\u90e8\u5404\u4e2a\u6269\u5c55\u70b9\u7684\u63a5\u53e3\uff0c\u5e76\u4e14\u5728\u6bcf\u4e00\u4e2aEnvoy\u7684\u6269\u5c55\u70b9\u4e0a\u90fd\u521b\u5efa\u4e86\u5bf9\u5e94\u7684wasm\u6269\u5c55\uff0c\u6bd4\u5982Http filter\u6269\u5c55\u7684\u5730\u65b9\u5c31\u4f1a\u6709\u4e00\u4e2awasm http filter\u6269\u5c55\u7684\u5b9e\u73b0\uff0c \u6700\u7ec8\u8fd4\u56de\u7684\u5c31\u662f\u8fd9\u4e2aContext\u5bf9\u8c61\uff0c\u5f53\u4e00\u4e2a\u8bf7\u6c42\u8fdb\u5165Envoy\u7684\u65f6\u5019\uff0c\u8d70\u5230wasm http filter\u5c31\u4f1a\u8c03\u7528Context\u7684decodeHeaders\u3001decodeData\u3001encodeData\u3001encodeHeaders\u7b49 \u4e00\u7cfb\u5217\u7684\u56de\u8c03\u65b9\u6cd5\uff0c\u5728\u8fd9\u4e9b\u56de\u8c03\u65b9\u6cd5\u4e2d\u4f1a\u95f4\u63a5\u7684\u8c03\u7528wasm\u63d2\u4ef6\u66b4\u9732\u51fa\u6765\u7684\u65b9\u6cd5\u3002\u540c\u6837Context\u4e2d\u4e5f\u5b9e\u73b0\u4e86\u4e00\u4e9b\u80fd\u529b\u63d0\u4f9b\u7ed9\u63d2\u4ef6\u6765\u8c03\u7528\u3002 1 2 3 4 5 6 7 8 class Context : public proxy_wasm :: ContextBase , public Logger :: Loggable < Logger :: Id :: wasm > , public AccessLog :: Instance , public Http :: StreamFilter , public Network :: ConnectionCallbacks , public Network :: Filter , public google :: api :: expr :: runtime :: BaseActivation , public std :: enable_shared_from_this < Context > { proxy_wasm::ContextBase \u662fVM host\u5b9e\u73b0\u90e8\u5206\u548cVM\u4e4b\u95f4\u7684\u6865\u6881\uff0c\u4e3b\u8981\u6709\u4e8c\u4e2a\u4f7f\u7528\u573a\u666f: \u901a\u8fc7\u7ee7\u627f\u8fd9\u4e2a\u63a5\u53e3\u6765\u63d0\u4f9bhost\u5b9e\u73b0\uff0cwasm\u5b9e\u4f8b\u5c31\u53ef\u4ee5\u901a\u8fc7ContextBase\u6765\u4f7f\u7528host\u63d0\u4f9b\u7684\u80fd\u529b\uff0c\u6bd4\u5982http\u3001grpc\u8c03\u7528\u3001metrics\u7b49 \u63d0\u4f9b\u7ed9host\u6765\u8c03\u7528wasm\u5b9e\u4f8b\u4e2d\u7684\u65b9\u6cd5\uff0c\u6bd4\u5982wasm\u901a\u8fc7host\u63d0\u4f9b\u7684\u80fd\u529b\u5f02\u6b65\u53d1\u8d77http\u8c03\u7528\uff0c\u5f53\u54cd\u5e94\u56de\u6765\u7684\u65f6\u5019\uff0chost\u9700\u8981\u8c03\u7528vm\u4e2d\u5bf9\u5e94\u7684\u65b9\u6cd5\uff0c\u5c06response\u4f20\u9012\u8fc7\u53bb\u3002 1 2 3 4 5 6 7 8 9 10 11 12 class ContextBase : public RootInterface , public HttpInterface , public NetworkInterface , public StreamInterface , public HeaderInterface , public HttpCallInterface , public GrpcCallInterface , public GrpcStreamInterface , public MetricsInterface , public SharedDataInterface , public SharedQueueInterface , public GeneralInterface { proxy_wasm::PluginBase \u5305\u542b\u4e86wasm\u63d2\u4ef6\u7684\u4e00\u4e9b\u4fe1\u606f\u6bd4\u5982\u3001name\u3001root_id\u3001vm_id\u3001plugin\u914d\u7f6e\u3001log_prefix\uff0c\u8fd9\u4e9b\u4fe1\u606f\u90fd\u662f\u4ece PluginConfig \u4e2d\u83b7\u53d6\u7684\uff0c\u662f\u7528\u4e8e\u914d\u7f6e\u7684\u3002 name: \u6bcf\u4e00\u4e2a\u63d2\u4ef6\u90fd\u6709\u4e00\u4e2a\u540d\u5b57\uff0c\u5728\u540c\u4e00\u4e2awasm VM\u4e2d\u662f\u552f\u4e00\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u540c\u4e00\u4e2aVM\u4e2d\u4e0d\u80fd\u6709\u591a\u4e2a\u76f8\u540cname\u7684\u63d2\u4ef6 root_id: \u5728\u4e00\u4e2awasm VM\u4e2d\u662f\u552f\u4e00\u7684\uff0c\u591a\u4e2a\u63d2\u4ef6\u53ef\u4ee5\u62e5\u6709\u76f8\u540c\u7684root_id\uff0c\u5bf9\u4e8e\u5177\u6709\u76f8\u540croot_id\u7684\u63d2\u4ef6\u6765\u8bf4\uff0c\u4ed6\u4eec\u4e4b\u95f4\u5171\u4eabContext\u548cRootContext\uff0c\u5982\u679c\u4e3a\u7a7a\uff0c\u90a3\u4e48\u6240\u6709\u7684\u63d2\u4ef6\u5171\u4eabContext vm_id: \u6839\u636ewasm code\u8fdb\u884chash\uff0c\u4e0d\u540c\u7684code\u4f7f\u7528\u4e0d\u540c\u7684vm\uff0c\u5982\u679ccode\u90fd\u662f\u4e00\u6837\u7684\uff0c\u90a3\u4e48\u5c31\u4f7f\u7528\u540c\u4e00\u4e2avm 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 struct PluginBase { PluginBase ( std :: string_view name , std :: string_view root_id , std :: string_view vm_id , std :: string_view runtime , std :: string_view plugin_configuration , bool fail_open ) : name_ ( std :: string ( name )), root_id_ ( std :: string ( root_id )), vm_id_ ( std :: string ( vm_id )), runtime_ ( std :: string ( runtime )), plugin_configuration_ ( plugin_configuration ), fail_open_ ( fail_open ), key_ ( root_id_ + \"||\" + plugin_configuration_ ), log_prefix_ ( makeLogPrefix ()) {} const std :: string name_ ; const std :: string root_id_ ; const std :: string vm_id_ ; const std :: string runtime_ ; const std :: string plugin_configuration_ ; const bool fail_open_ ; const std :: string & key () const { return key_ ; } const std :: string & log_prefix () const { return log_prefix_ ; } private : std :: string makeLogPrefix () const ; const std :: string key_ ; const std :: string log_prefix_ ; }; Common::Wasm::Plugin \u7ee7\u627f\u81ea proxy_wasm::PluginBase \uff0c\u5728PluginBase\u7684\u57fa\u7840\u4e0a\u589e\u52a0\u4e86\u989d\u5916\u7684\u4e00\u4e9b\u63d2\u4ef6\u9700\u8981\u7684\u4fe1\u606f\uff0c\u6bd4\u5982Metadata\u3001LocalInfo\u3001Direction\u7b49\u4fe1\u606f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 class Plugin : public proxy_wasm :: PluginBase { public : Plugin ( const envoy :: extensions :: wasm :: v3 :: PluginConfig & config , envoy :: config :: core :: v3 :: TrafficDirection direction , const LocalInfo :: LocalInfo & local_info , const envoy :: config :: core :: v3 :: Metadata * listener_metadata ) : PluginBase ( config . name (), config . root_id (), config . vm_config (). vm_id (), config . vm_config (). runtime (), MessageUtil :: anyToBytes ( config . configuration ()), config . fail_open ()), direction_ ( direction ), local_info_ ( local_info ), listener_metadata_ ( listener_metadata ), wasm_config_ ( std :: make_unique < WasmConfig > ( config )) {} envoy :: config :: core :: v3 :: TrafficDirection & direction () { return direction_ ; } const LocalInfo :: LocalInfo & localInfo () { return local_info_ ; } const envoy :: config :: core :: v3 :: Metadata * listenerMetadata () { return listener_metadata_ ; } WasmConfig & wasmConfig () { return * wasm_config_ ; } private : envoy :: config :: core :: v3 :: TrafficDirection direction_ ; const LocalInfo :: LocalInfo & local_info_ ; const envoy :: config :: core :: v3 :: Metadata * listener_metadata_ ; WasmConfigPtr wasm_config_ ; }; \u603b\u7ed3\u6765\u8bf4 Plugin \u5bf9\u8c61\u672c\u8eab\u53ea\u662f\u4e00\u4e2a\u5355\u7eaf\u7684\u914d\u7f6e\u7c7b\uff0c\u4fdd\u5b58\u4e86\u63d2\u4ef6\u6240\u9700\u8981\u7684\u4e00\u4e9b\u4fe1\u606f\u3002 Envoy::Extensions::Common::Wasm::PluginHandle \u662f\u5c06Plugin\u548cWasmHandle\u7ec4\u5408\u4e00\u8d77\u7684\u4e00\u4e2a\u5bf9\u8c61\uff0c\u5305\u542b\u4e86WasmHandle\u548cPlugin\u4e24\u8005\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class PluginHandle : public PluginHandleBase , public ThreadLocal :: ThreadLocalObject { public : explicit PluginHandle ( const WasmHandleSharedPtr & wasm_handle , const PluginSharedPtr & plugin ) : PluginHandleBase ( std :: static_pointer_cast < WasmHandleBase > ( wasm_handle ), std :: static_pointer_cast < PluginBase > ( plugin )), wasm_handle_ ( wasm_handle ), root_context_id_ ( wasm_handle -> wasm () -> getRootContext ( plugin , false ) -> id ()) {} WasmSharedPtr & wasm () { return wasm_handle_ -> wasm (); } WasmHandleSharedPtr & wasmHandleForTest () { return wasm_handle_ ; } uint32_t rootContextId () { return root_context_id_ ; } private : WasmHandleSharedPtr wasm_handle_ ; const uint32_t root_context_id_ ; }; PluginHandle\u7ee7\u627f\u4e86ThreadLocalObject\uff0c\u56e0\u6b64\u4ed6\u662f\u4e00\u4e2aTLS\u5bf9\u8c61\uff0c\u5176\u521b\u5efa\u8fc7\u7a0b\u5982\u4e0b: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 std :: shared_ptr < PluginHandleBase > getOrCreateThreadLocalPlugin ( std :: shared_ptr < WasmHandleBase > base_handle , std :: shared_ptr < PluginBase > plugin , WasmHandleCloneFactory clone_factory , PluginHandleFactory plugin_factory ) { // vm_key + || + plugin key\u6784\u9020\u4e86PluginHandle\u7684\u552f\u4e00\u6807\u8bc6 std :: string key ( std :: string ( base_handle -> wasm () -> vm_key ()) + \"||\" + plugin -> key ()); // Get existing thread-local Plugin handle. // \u5148\u67e5\u770b\u672c\u5730\u662f\u5426\u6709PluginHandle\uff0c\u6709\u7684\u8bdd\u76f4\u63a5\u8fd4\u56de\uff0c\u6ca1\u6709\u7684\u8bdd\u5f00\u59cb\u521b\u5efa auto it = local_plugins . find ( key ); if ( it != local_plugins . end ()) { auto plugin_handle = it -> second . lock (); if ( plugin_handle ) { return plugin_handle ; } // Remove stale entry. local_plugins . erase ( key ); } // \u5148\u521b\u5efa\u4e00\u4e2aWasmHandle\uff0c\u5b58\u5728\u5f53\u524d\u7684thread local\u4e2d\uff0c\u7136\u540e\u7528wasm handle\u521d\u59cb\u5316\u548c\u914d\u7f6eplugin\uff0c\u6700\u540e\u521b\u5efaPluginHandle // Get thread-local WasmVM. auto wasm_handle = getOrCreateThreadLocalWasm ( base_handle , clone_factory ); if ( ! wasm_handle ) { return nullptr ; } // Create and initialize new thread-local Plugin. auto plugin_context = wasm_handle -> wasm () -> start ( plugin ); if ( ! plugin_context ) { base_handle -> wasm () -> fail ( FailState :: StartFailed , \"Failed to start thread-local Wasm\" ); return nullptr ; } if ( ! wasm_handle -> wasm () -> configure ( plugin_context , plugin )) { base_handle -> wasm () -> fail ( FailState :: ConfigureFailed , \"Failed to configure thread-local Wasm plugin\" ); return nullptr ; } auto plugin_handle = plugin_factory ( wasm_handle , plugin ); local_plugins [ key ] = plugin_handle ; return plugin_handle ; } Envoy::Extension::Common::Wasm::Wasm Wasm VM\u5b9e\u4f8b\u4e86\uff0c\u8d1f\u8d23\u6267\u884cPlugin\uff0c\u7ee7\u627f\u81eaWasmBase\uff0c\u5b9e\u73b0\u4e86Wasm\u7684Envoy\u4fa7\u63a5\u53e3\uff0cEnvoy\u901a\u8fc7Wasm\u53ef\u4ee5\u8f7d\u5165Plugin\u3001\u521b\u5efaContext\u3001RootContext\u3001\u8c03\u7528Wasm Plugin\u4e2d\u66b4\u9732\u7684\u65b9\u6cd5\uff0c Context\u5bf9\u8c61\u5c31\u4f9d\u8d56Wasm\u5bf9\u8c61\u6765\u8c03\u7528Wasm\u63d2\u4ef6\u4e2d\u7684\u65b9\u6cd5\uff0c\u6240\u4ee5Context\u5bf9\u8c61\u7684\u6784\u9020\u4f9d\u8d56Wasm\u5bf9\u8c61\u3002 1 2 3 4 Context (); // Testing. Context ( Wasm * wasm ); // Vm Context. Context ( Wasm * wasm , const PluginSharedPtr & plugin ); // Root Context. Context ( Wasm * wasm , uint32_t root_context_id , const PluginSharedPtr & plugin ); // Stream context. Envoy::Extensions::Common::Wasm::WasmHandle 1 2 3 4 5 6 7 8 9 10 class WasmHandle : public WasmHandleBase , public ThreadLocal :: ThreadLocalObject { public : explicit WasmHandle ( const WasmSharedPtr & wasm ) : WasmHandleBase ( std :: static_pointer_cast < WasmBase > ( wasm )), wasm_ ( wasm ) {} WasmSharedPtr & wasm () { return wasm_ ; } private : WasmSharedPtr wasm_ ; }; WasmHandle \u5b9e\u9645\u4e0a\u5305\u542b\u4e86Wasm\uff0c\u662f\u5bf9Wasm\u7684\u5305\u88c5\uff0c\u540c\u65f6\u4ed6\u4e5f\u662f\u4e00\u4e2aTLS\u5bf9\u8c61\uff0c\u5728\u6bcf\u4e00\u4e2a\u7ebf\u7a0b\u90fd\u4f1a\u5b58\u4e00\u4efd\u3002 wasm\u5728Envoy\u7684\u6bcf\u4e00\u4e2a\u6269\u5c55\u70b9\u4e2d\u5b9e\u73b0\u4e86wasm plugin\uff0c\u4e5f\u5c31\u662f\u6838\u5fc3\u7684 Wasm::Plugin \uff0c\u7136\u540e\u5c06Plugin\u5bf9\u8c61\u653e\u5728Tls\u4e2d 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 FilterConfig :: FilterConfig ( const envoy :: extensions :: filters :: http :: wasm :: v3 :: Wasm & config , Server :: Configuration :: FactoryContext & context ) : tls_slot_ ( ThreadLocal :: TypedSlot < Common :: Wasm :: PluginHandle >:: makeUnique ( context . threadLocal ())) { plugin_ = std :: make_shared < Common :: Wasm :: Plugin > ( config . config (), context . direction (), context . localInfo (), & context . listenerMetadata ()); auto plugin = plugin_ ; auto callback = [ plugin , this ]( const Common :: Wasm :: WasmHandleSharedPtr & base_wasm ) { // NB: the Slot set() call doesn't complete inline, so all arguments must outlive this call. tls_slot_ -> set ([ base_wasm , plugin ]( Event :: Dispatcher & dispatcher ) { return Common :: Wasm :: getOrCreateThreadLocalPlugin ( base_wasm , plugin , dispatcher ); }); }; if ( ! Common :: Wasm :: createWasm ( plugin_ , context . scope (). createScope ( \"\" ), context . clusterManager (), context . initManager (), context . dispatcher (), context . api (), context . lifecycleNotifier (), remote_data_provider_ , std :: move ( callback ))) { throw Common :: Wasm :: WasmException ( fmt :: format ( \"Unable to create Wasm HTTP filter {}\" , plugin -> name_ )); } } WasmExtension \u5c06\u521b\u5efaWasm Handle\u5b9e\u4f8b\u3001\u514b\u9686Wasm\u5b9e\u4f8b\u3001\u521b\u5efaPluginHandle\uff0c\u521b\u5efastats\u3001stats\u7edf\u8ba1\u7b49\u5c01\u88c5\u6210\u63a5\u53e3\uff0c\u53ef\u4ee5\u6709\u591a\u79cd\u5b9e\u73b0\u3002\u9ed8\u8ba4\u5b9e\u73b0\u662f EnvoyWasm \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 class WasmExtension : Logger :: Loggable < Logger :: Id :: wasm > { public : WasmExtension () = default ; virtual ~ WasmExtension () = default ; virtual void initialize () = 0 ; virtual PluginHandleExtensionFactory pluginFactory () = 0 ; virtual WasmHandleExtensionFactory wasmFactory () = 0 ; virtual WasmHandleExtensionCloneFactory wasmCloneFactory () = 0 ; enum class WasmEvent : int { Ok , RemoteLoadCacheHit , RemoteLoadCacheNegativeHit , RemoteLoadCacheMiss , RemoteLoadCacheFetchSuccess , RemoteLoadCacheFetchFailure , UnableToCreateVM , UnableToCloneVM , MissingFunction , UnableToInitializeCode , StartFailed , ConfigureFailed , RuntimeError , }; virtual void onEvent ( WasmEvent event , const PluginSharedPtr & plugin ) = 0 ; virtual void onRemoteCacheEntriesChanged ( int remote_cache_entries ) = 0 ; virtual void createStats ( const Stats :: ScopeSharedPtr & scope , const PluginSharedPtr & plugin ) ABSL_EXCLUSIVE_LOCKS_REQUIRED ( mutex_ ) = 0 ; virtual void resetStats () ABSL_EXCLUSIVE_LOCKS_REQUIRED ( mutex_ ) = 0 ; // Delete stats pointers // NB: the Scope can become invalid if, for example, the owning FilterChain is deleted. When that // happens the stats must be recreated. This hook verifies the Scope of any existing stats and if // necessary recreates the stats with the newly provided scope. // This call takes out the mutex_ and calls createStats and possibly resetStats(). Stats :: ScopeSharedPtr lockAndCreateStats ( const Stats :: ScopeSharedPtr & scope , const PluginSharedPtr & plugin ); void resetStatsForTesting (); protected : absl :: Mutex mutex_ ; ScopeWeakPtr scope_ ; }; WasmVmIntegration 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 struct WasmVmIntegration { virtual ~ WasmVmIntegration () {} virtual WasmVmIntegration * clone () = 0 ; virtual proxy_wasm :: LogLevel getLogLevel () = 0 ; virtual void error ( std :: string_view message ) = 0 ; virtual void trace ( std :: string_view message ) = 0 ; // Get a NullVm implementation of a function. // @param function_name is the name of the function with the implementation specific prefix. // @param returns_word is true if the function returns a Word and false if it returns void. // @param number_of_arguments is the number of Word arguments to the function. // @param plugin is the Null VM plugin on which the function will be called. // @param ptr_to_function_return is the location to write the function e.g. of type // WasmCallWord<3>. // @return true if the function was found. ptr_to_function_return could still be set to nullptr // (of the correct type) if the function has no implementation. Returning true will prevent a // \"Missing getFunction\" error. virtual bool getNullVmFunction ( std :: string_view function_name , bool returns_word , int number_of_arguments , NullPlugin * plugin , void * ptr_to_function_return ) = 0 ; }; WasmVmIntegration WasmBase WasmVM \u4e00\u4e2aWasm VM\u9700\u8981\u5b9e\u73b0\u7684\u63a5\u53e3\uff0c Common::Wasm::createWasm createWasmInternal","title":"Envoy Proxy Wasm\u5206\u6790"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/envoy/wasm/#envoy-proxy-wasm","text":"","title":"Envoy Proxy Wasm\u5206\u6790"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/envoy/wasm/#to-implement-a-wasm-filter","text":"Implement a root context class which inherits base root context class Implement a stream context class which inherits the base context class. Override context API methods to handle corresponding initialization and stream events from host. Register the root context and stream context. Root Context\u548cContext\u662fWASM Filter\u4e2d\u6bd4\u8f83\u5173\u952e\u7684\u4e24\u4e2a\u5bf9\u8c61\uff0c\u524d\u8005\u7528\u4e8eWASM\u5b9e\u4f8b\u4e4b\u95f4\u7684\u5168\u5c40\u5171\u4eab\uff0c\u800cContext\u5219\u662f\u548cStream\u76f8\u5173\u7684\u4e00\u4e2aContext\u8d2f\u7a7f\u6574\u4e2a\u8bf7\u6c42\u7684\u751f\u547d\u5468\u671f \u5728\u8fd9\u4e2a\u8bf7\u6c42\u4e4b\u4e0a\u7684\u5404\u4e2aWASM\u5b9e\u4f8b\u53ef\u4ee5\u5171\u4eab\u8fd9\u4e2aContext\uff0c\u4e0b\u9762\u8fd9\u5f20\u56fe\u662fWasm\u5b9e\u4f8b\u548cContext\u4e4b\u95f4\u7684\u5173\u7cfb\u3002 git Wasm\u5728Envoy\u5185\u90e8\u53c8\u5206\u4e3a\u4e24\u7c7b\uff0c\u4e00\u7c7b\u662f\u7528\u6765\u63d0\u4f9bService\u80fd\u529b\u7684\uff0c\u53e6\u5916\u4e00\u7c7b\u5219\u662f\u7528\u6765\u63d0\u4f9bSilo\u7684\uff0c\u67b6\u6784\u5982\u4e0b\u3002 \u542f\u52a8\u9636\u6bb5\u521b\u5efaWasm Service\uff0c\u4e00\u4e2aWasm Service\u5176\u5b9e\u5c31\u662fWasm VM\u5b9e\u4f8b\uff0c\u53ef\u4ee5\u8bbe\u7f6e\u4e3a\u5355\u4f8b\uff0c\u4e5f\u53ef\u4ee5\u8bbe\u7f6e\u4e3aper worker per Wasm VM \u6bcf\u4e00\u4e2aWasm VM\u4e0b\u9762\u53ef\u4ee5\u8fd0\u884c\u591a\u4e2aPlugin\u3002\u8fd9\u4e9bPlugin\u662f\u7528\u6765\u63d0\u4f9b\u670d\u52a1\u80fd\u529b\u7684\uff0c\u6bd4\u5982log\u3001metrics\u7b49\u7b49\uff0c\u548cWasm Http Filter\u3001Network Filter\u662f\u4e24\u7c7bWasm \u8fd9\u4e24\u8005\u4e4b\u95f4\u901a\u8fc7SharedData\u548cMessageQueue\u8fdb\u884c\u76f8\u4e92\u901a\u4fe1 1 2 3 4 5 6 7 8 9 10 11 // WasmService is configured as a built-in *envoy.wasm_service* :ref:`ServiceConfig // <envoy_api_msg_extensions.wasm.v3.WasmService>`. This opaque configuration will be used to // create a Wasm Service. message WasmService { // General plugin configuration. PluginConfig config = 1 ; // If true, create a single VM rather than creating one VM per worker. Such a singleton can // not be used with filters. bool singleton = 2 ; } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 void WasmServiceExtension::createWasm ( Server :: Configuration :: ServerFactoryContext & context ) { auto plugin = std :: make_shared < Common :: Wasm :: Plugin > ( config_ . config (), envoy :: config :: core :: v3 :: TrafficDirection :: UNSPECIFIED , context . localInfo (), nullptr ); auto callback = [ this , & context , plugin ]( Common :: Wasm :: WasmHandleSharedPtr base_wasm ) { if ( ! base_wasm ) { if ( plugin -> fail_open_ ) { ENVOY_LOG ( error , \"Unable to create Wasm service {}\" , plugin -> name_ ); } else { ENVOY_LOG ( critical , \"Unable to create Wasm service {}\" , plugin -> name_ ); } return ; } if ( config_ . singleton ()) { // Return a Wasm VM which will be stored as a singleton by the Server. wasm_service_ = std :: make_unique < WasmService > ( plugin , Common :: Wasm :: getOrCreateThreadLocalPlugin ( base_wasm , plugin , context . dispatcher ())); return ; } // Per-thread WASM VM. // NB: the Slot set() call doesn't complete inline, so all arguments must outlive this call. auto tls_slot = ThreadLocal :: TypedSlot < Common :: Wasm :: PluginHandle >:: makeUnique ( context . threadLocal ()); tls_slot -> set ([ base_wasm , plugin ]( Event :: Dispatcher & dispatcher ) { return Common :: Wasm :: getOrCreateThreadLocalPlugin ( base_wasm , plugin , dispatcher ); }); wasm_service_ = std :: make_unique < WasmService > ( plugin , std :: move ( tls_slot )); }; if ( ! Common :: Wasm :: createWasm ( plugin , context . scope (). createScope ( \"\" ), context . clusterManager (), context . initManager (), context . dispatcher (), context . api (), context . lifecycleNotifier (), remote_data_provider_ , std :: move ( callback ))) { // NB: throw if we get a synchronous configuration failures as this is how such failures are // reported to xDS. throw Common :: Wasm :: WasmException ( fmt :: format ( \"Unable to create Wasm service {}\" , plugin -> name_ )); } } 1 2 3 4 5 6 7 8 9 10 11 12 class WasmService { public : WasmService ( PluginSharedPtr plugin , PluginHandleSharedPtr singleton ) : plugin_ ( plugin ), singleton_ ( std :: move ( singleton )) {} WasmService ( PluginSharedPtr plugin , ThreadLocal :: TypedSlotPtr < PluginHandle >&& tls_slot ) : plugin_ ( plugin ), tls_slot_ ( std :: move ( tls_slot )) {} private : PluginSharedPtr plugin_ ; PluginHandleSharedPtr singleton_ ; ThreadLocal :: TypedSlotPtr < PluginHandle > tls_slot_ ; }; WasmService\u6301\u6709\u5bf9Plugin\u7684Handle\uff0cPlugin Handle\u6301\u6709Wasm Handle\u4e5f\u5c31\u662f Common::Wasm::WasmHandleSharedPtr \uff0c\u901a\u8fc7 getOrCreateThreadLocalPlugin \u6765\u521b\u5efa 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 PluginHandleSharedPtr getOrCreateThreadLocalPlugin ( const WasmHandleSharedPtr & base_wasm , const PluginSharedPtr & plugin , Event :: Dispatcher & dispatcher , CreateContextFn create_root_context_for_testing ) { if ( ! base_wasm ) { if ( ! plugin -> fail_open_ ) { ENVOY_LOG_TO_LOGGER ( Envoy :: Logger :: Registry :: getLog ( Envoy :: Logger :: Id :: wasm ), critical , \"Plugin configured to fail closed failed to load\" ); } return nullptr ; } return std :: static_pointer_cast < PluginHandle > ( proxy_wasm :: getOrCreateThreadLocalPlugin ( std :: static_pointer_cast < WasmHandle > ( base_wasm ), plugin , getCloneFactory ( getWasmExtension (), dispatcher , create_root_context_for_testing ), getPluginFactory ( getWasmExtension ()))); } Common::Wasm::createWasm \u521b\u5efa wasm vm\u5b9e\u4f8b\uff0c\u5185\u90e8\u8c03\u7528 Common::Wasm::createWasmInternal createWasmInternal\u4f1a\u6839\u636eConfig\u6765\u521b\u5efaWasm\u5b9e\u4f8b: wasm\u7684code\u662f\u5426\u6765\u81ea\u8fdc\u7a0b\uff0c\u5982\u679c\u662f\u5219\u4ece\u8fdc\u7a0b\u83b7\u53d6\uff0c\u5e76\u7ef4\u62a4code cache \u521b\u5efawasm stats \u6e05\u9664code cache\u7f13\u5b58 \u5982\u679c\u4e0d\u662f\u6765\u81ea\u8fdc\u7a0b\u5c31\u4ece\u672c\u5730\u52a0\u8f7d \u5982\u679c\u8fdc\u7a0b\u83b7\u53d6\u5931\u8d25\u5c31\u7ee7\u7eed\u83b7\u53d6\uff0c\u5e76\u8bbe\u7f6ecallback \u5982\u679c\u83b7\u53d6\u6210\u529f\u5c31\u76f4\u63a5\u6784\u5efaWasm \u521b\u5efavmKey\uff0c\u7528\u4e8e\u552f\u4e00\u8868\u793a\u4e00\u4e2awasm(\u76f8\u540c\u7684\u914d\u7f6e\uff0c\u4f46\u662fcode\u4e0d\u540c\u4e5f\u662f\u4e0d\u540c\u7684wasm vm) \u521b\u5efawasm \u4ecemap\u4e2d\u6839\u636evm_key\u67e5\u627e\u5bf9\u5e94\u7684wasm\uff0c\u67e5\u627e\u5230\u540e\u76f4\u63a5\u8fd4\u56de \u5982\u679c\u6ca1\u6709\u67e5\u627e\u5230\u5c31\u521b\u5efa\u4e00\u4e2aWasm \u5185\u90e8\u83b7\u53d6\u5230code\u540e\uff0c\u4f1a\u8c03\u7528 proxy_wasm::createWasm \u6765\u521b\u5efa\u6700\u7ec8\u7684wasm vm\u5b9e\u4f8b\uff0c\u6700\u7ec8\u521b\u5efa\u7684\u5b9e\u4f8b\u5c31\u662f Wasm \u4ee5\u4e00\u4e2aRust Example\u4e3a\u4f8b\uff0c\u6765\u5206\u6790\u4e0b\uff0c\u6574\u4e2a\u6d41\u7a0b: Rust SDK\u4e2d\u5b9a\u4e49\u4e86\u8bb8\u591a\u7531Envoy\u66b4\u9732\u7ed9Wasm\u7684\u65b9\u6cd5\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u53ea\u6709\u58f0\u660e\u6ca1\u6709\u5b9a\u4e49\uff0c\u5177\u4f53\u7684\u5b9e\u73b0\u5728Envoy\u4e2d\uff0c\u662f\u5728\u521b\u5efawasm\u7684\u65f6\u5019\u7531wasm\u8fdb\u884clink 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 extern \"C\" { fn proxy_log ( level : LogLevel , message_data : * const u8 , message_size : usize ) -> Status ; } pub fn log ( level : LogLevel , message : & str ) -> Result < (), Status > { unsafe { match proxy_log ( level , message . as_ptr (), message . len ()) { Status :: Ok => Ok (()), status => panic! ( \"unexpected status: {}\" , status as u32 ), } } } extern \"C\" { fn proxy_get_current_time_nanoseconds ( return_time : * mut u64 ) -> Status ; } pub fn get_current_time () -> Result < SystemTime , Status > { let mut return_time : u64 = 0 ; unsafe { match proxy_get_current_time_nanoseconds ( & mut return_time ) { Status :: Ok => Ok ( UNIX_EPOCH + Duration :: from_nanos ( return_time )), status => panic! ( \"unexpected status: {}\" , status as u32 ), } } } ...... \u62ff proxy_log \u4e3e\u4f8b\u6765\u8bf4\uff0c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 pub fn _start () { proxy_wasm :: set_log_level ( LogLevel :: Trace ); proxy_wasm :: set_root_context ( | _ | -> Box < dyn RootContext > { Box :: new ( HelloWorld ) }); } struct HelloWorld ; impl Context for HelloWorld {} impl RootContext for HelloWorld { fn on_vm_start ( & mut self , _ : usize ) -> bool { // \u5185\u90e8\u8c03\u7528proxy_log info ! ( \"Hello, World!\" ); self . set_tick_period ( Duration :: from_secs ( 5 )); true } fn on_tick ( & mut self ) { let datetime : DateTime < Utc > = self . get_current_time (). into (); info ! ( \"It's {}\" , datetime ); } } wasm\u63d2\u4ef6\u53ef\u4ee5\u76f4\u63a5\u8c03\u7528 proxy_log \u76f8\u5173\u7684\u65b9\u6cd5\uff0c\u8fd9\u4e2aproxy_log\u65b9\u6cd5\u662fhost\u73af\u5883\u6ce8\u518c\u8fdb\u6765\u7684\u3002 host\u73af\u5883\u6ce8\u518c proxy_log \u65b9\u6cd5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // Calls with the \"proxy_\" prefix. #define _REGISTER_PROXY(_fn) \\ wasm_vm_->registerCallback( \\ \"env\", \"proxy_\" #_fn, &exports::_fn, \\ &ConvertFunctionWordToUint32<decltype(exports::_fn), \\ exports::_fn>::convertFunctionWordToUint32); _REGISTER_PROXY ( log ); _REGISTER_PROXY ( get_status ); _REGISTER_PROXY ( set_property ); _REGISTER_PROXY ( get_property ); _REGISTER_PROXY ( continue_request ); _REGISTER_PROXY ( continue_response ); _REGISTER_PROXY ( send_local_response ); \u53ef\u4ee5\u770b\u51fa\uff0c\u5b9e\u9645\u4e0aproxy_log\u6700\u7ec8\u8c03\u7528\u7684\u662f exports::log \u65b9\u6cd5 exports::log 1 2 3 4 5 6 7 8 9 10 11 Word log ( void * raw_context , Word level , Word address , Word size ) { if ( level > static_cast < uint64_t > ( LogLevel :: Max )) { return WasmResult :: BadArgument ; } auto context = WASM_CONTEXT ( raw_context ); auto message = context -> wasmVm () -> getMemory ( address , size ); if ( ! message ) { return WasmResult :: InvalidMemoryAccess ; } return context -> log ( level , message . value ()); } \u6700\u7ec8\u8c03\u7528\u7684ContextBase\u7684log\u63a5\u53e3\uff0c\u8fd9\u4e2a\u63a5\u53e3\u6700\u7ec8\u7531Host\u73af\u5883Envoy\u6765\u5b9e\u73b0 \u6700\u7ec8\u5b9e\u73b0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 WasmResult Context::log ( uint32_t level , absl :: string_view message ) { switch ( static_cast < spdlog :: level :: level_enum > ( level )) { case spdlog :: level :: trace : ENVOY_LOG ( trace , \"wasm log{}: {}\" , log_prefix (), message ); return WasmResult :: Ok ; case spdlog :: level :: debug : ENVOY_LOG ( debug , \"wasm log{}: {}\" , log_prefix (), message ); return WasmResult :: Ok ; case spdlog :: level :: info : ENVOY_LOG ( info , \"wasm log{}: {}\" , log_prefix (), message ); return WasmResult :: Ok ; case spdlog :: level :: warn : ENVOY_LOG ( warn , \"wasm log{}: {}\" , log_prefix (), message ); return WasmResult :: Ok ; case spdlog :: level :: err : ENVOY_LOG ( error , \"wasm log{}: {}\" , log_prefix (), message ); return WasmResult :: Ok ; case spdlog :: level :: critical : ENVOY_LOG ( critical , \"wasm log{}: {}\" , log_prefix (), message ); return WasmResult :: Ok ; case spdlog :: level :: off : return WasmResult :: Ok ; } NOT_IMPLEMENTED_GCOVR_EXCL_LINE ; } \u63a5\u4e0b\u6765\u770b\u4e0b\u5982\u4f55\u8c03\u7528wasm\u4e2d\u7684\u4e00\u4e2a\u65b9\u6cd5 rust exmaple 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 #[no_mangle] pub fn _start () { proxy_wasm :: set_log_level ( LogLevel :: Trace ); proxy_wasm :: set_http_context ( | context_id , _ | -> Box < dyn HttpContext > { Box :: new ( HttpHeaders { context_id }) }); } struct HttpHeaders { context_id : u32 , } impl Context for HttpHeaders {} impl HttpContext for HttpHeaders { fn on_http_request_headers ( & mut self , _ : usize ) -> Action { for ( name , value ) in & self . get_http_request_headers () { trace ! ( \"#{} -> {}: {}\" , self . context_id , name , value ); } match self . get_http_request_header ( \":path\" ) { Some ( path ) if path == \"/hello\" => { self . send_http_response ( 200 , vec! [( \"Hello\" , \"World\" ), ( \"Powered-By\" , \"proxy-wasm\" )], Some ( b\"Hello, World! \\n \" ), ); Action :: Pause } _ => Action :: Continue , } } fn on_http_response_headers ( & mut self , _ : usize ) -> Action { for ( name , value ) in & self . get_http_response_headers () { trace ! ( \"#{} <- {}: {}\" , self . context_id , name , value ); } Action :: Continue } fn on_log ( & mut self ) { trace ! ( \"#{} completed.\" , self . context_id ); } } \u62ff on_http_request_headers \u4e3e\u4f8b\u6765\u8bf4\uff0c\u5f53\u4e00\u4e2a\u8bf7\u6c42\u8fdb\u6765\u7684\u65f6\u5019\uff0c\u5e76\u89e3\u6790\u5b8c\u6210\u540e\u4f1a\u8c03\u7528wasm\u63d2\u4ef6\u7684 on_http_request_headers \u63a5\u53e3\u3002 \u83b7\u53d6wasm\u4e2d\u7684\u6307\u5b9afunction 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 #define _GET_PROXY(_fn) wasm_vm_->getFunction(\"proxy_\" #_fn, &_fn##_); _GET_PROXY ( validate_configuration ); _GET_PROXY ( on_vm_start ); _GET_PROXY ( on_configure ); _GET_PROXY ( on_tick ); _GET_PROXY ( on_context_create ); _GET_PROXY ( on_new_connection ); _GET_PROXY ( on_downstream_data ); _GET_PROXY ( on_upstream_data ); _GET_PROXY ( on_downstream_connection_close ); _GET_PROXY ( on_upstream_connection_close ); _GET_PROXY ( on_request_headers ); _GET_PROXY ( on_request_body ); _GET_PROXY ( on_request_trailers ); _GET_PROXY ( on_request_metadata ); _GET_PROXY ( on_response_headers ); _GET_PROXY ( on_response_body ); _GET_PROXY ( on_response_trailers ); _GET_PROXY ( on_response_metadata ); _GET_PROXY ( on_http_call_response ); _GET_PROXY ( on_grpc_receive ); _GET_PROXY ( on_grpc_close ); _GET_PROXY ( on_grpc_receive_initial_metadata ); _GET_PROXY ( on_grpc_receive_trailing_metadata ); _GET_PROXY ( on_queue_ready ); _GET_PROXY ( on_done ); _GET_PROXY ( on_log ); _GET_PROXY ( on_delete ); #undef _GET_PROXY \u6700\u7ec8\u8c03\u7528\u4e0b\u9762\u7684\u4ee3\u7801\u5c06 on_http_request_headers_ \u51fd\u6570\u6307\u9488\u6307\u5411 1 2 3 4 5 6 #define _GET_MODULE_FUNCTION(T) \\ void getFunction(string_view function_name, T *f) override { \\ getModuleFunctionImpl(function_name, f); \\ }; FOR_ALL_WASM_VM_EXPORTS ( _GET_MODULE_FUNCTION ) #undef _GET_MODULE_FUNCTION 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #[no_mangle] pub extern \"C\" fn proxy_on_context_create ( context_id : u32 , root_context_id : u32 ) { DISPATCHER . with ( | dispatcher | dispatcher . on_create_context ( context_id , root_context_id )) } #[no_mangle] pub extern \"C\" fn proxy_on_done ( context_id : u32 ) -> bool { DISPATCHER . with ( | dispatcher | dispatcher . on_done ( context_id )) } #[no_mangle] pub extern \"C\" fn proxy_on_log ( context_id : u32 ) { DISPATCHER . with ( | dispatcher | dispatcher . on_log ( context_id )) } #[no_mangle] pub extern \"C\" fn proxy_on_delete ( context_id : u32 ) { DISPATCHER . with ( | dispatcher | dispatcher . on_delete ( context_id )) }","title":"To implement a WASM filter"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/envoy/wasm/#_1","text":"Wasm::Context \u662fEnvoy\u548cwasm\u63d2\u4ef6\u7684\u6865\u6881\uff0cContext\u7ee7\u627f\u4e86Envoy\u5185\u90e8\u5404\u4e2a\u6269\u5c55\u70b9\u7684\u63a5\u53e3\uff0c\u5e76\u4e14\u5728\u6bcf\u4e00\u4e2aEnvoy\u7684\u6269\u5c55\u70b9\u4e0a\u90fd\u521b\u5efa\u4e86\u5bf9\u5e94\u7684wasm\u6269\u5c55\uff0c\u6bd4\u5982Http filter\u6269\u5c55\u7684\u5730\u65b9\u5c31\u4f1a\u6709\u4e00\u4e2awasm http filter\u6269\u5c55\u7684\u5b9e\u73b0\uff0c \u6700\u7ec8\u8fd4\u56de\u7684\u5c31\u662f\u8fd9\u4e2aContext\u5bf9\u8c61\uff0c\u5f53\u4e00\u4e2a\u8bf7\u6c42\u8fdb\u5165Envoy\u7684\u65f6\u5019\uff0c\u8d70\u5230wasm http filter\u5c31\u4f1a\u8c03\u7528Context\u7684decodeHeaders\u3001decodeData\u3001encodeData\u3001encodeHeaders\u7b49 \u4e00\u7cfb\u5217\u7684\u56de\u8c03\u65b9\u6cd5\uff0c\u5728\u8fd9\u4e9b\u56de\u8c03\u65b9\u6cd5\u4e2d\u4f1a\u95f4\u63a5\u7684\u8c03\u7528wasm\u63d2\u4ef6\u66b4\u9732\u51fa\u6765\u7684\u65b9\u6cd5\u3002\u540c\u6837Context\u4e2d\u4e5f\u5b9e\u73b0\u4e86\u4e00\u4e9b\u80fd\u529b\u63d0\u4f9b\u7ed9\u63d2\u4ef6\u6765\u8c03\u7528\u3002 1 2 3 4 5 6 7 8 class Context : public proxy_wasm :: ContextBase , public Logger :: Loggable < Logger :: Id :: wasm > , public AccessLog :: Instance , public Http :: StreamFilter , public Network :: ConnectionCallbacks , public Network :: Filter , public google :: api :: expr :: runtime :: BaseActivation , public std :: enable_shared_from_this < Context > { proxy_wasm::ContextBase \u662fVM host\u5b9e\u73b0\u90e8\u5206\u548cVM\u4e4b\u95f4\u7684\u6865\u6881\uff0c\u4e3b\u8981\u6709\u4e8c\u4e2a\u4f7f\u7528\u573a\u666f: \u901a\u8fc7\u7ee7\u627f\u8fd9\u4e2a\u63a5\u53e3\u6765\u63d0\u4f9bhost\u5b9e\u73b0\uff0cwasm\u5b9e\u4f8b\u5c31\u53ef\u4ee5\u901a\u8fc7ContextBase\u6765\u4f7f\u7528host\u63d0\u4f9b\u7684\u80fd\u529b\uff0c\u6bd4\u5982http\u3001grpc\u8c03\u7528\u3001metrics\u7b49 \u63d0\u4f9b\u7ed9host\u6765\u8c03\u7528wasm\u5b9e\u4f8b\u4e2d\u7684\u65b9\u6cd5\uff0c\u6bd4\u5982wasm\u901a\u8fc7host\u63d0\u4f9b\u7684\u80fd\u529b\u5f02\u6b65\u53d1\u8d77http\u8c03\u7528\uff0c\u5f53\u54cd\u5e94\u56de\u6765\u7684\u65f6\u5019\uff0chost\u9700\u8981\u8c03\u7528vm\u4e2d\u5bf9\u5e94\u7684\u65b9\u6cd5\uff0c\u5c06response\u4f20\u9012\u8fc7\u53bb\u3002 1 2 3 4 5 6 7 8 9 10 11 12 class ContextBase : public RootInterface , public HttpInterface , public NetworkInterface , public StreamInterface , public HeaderInterface , public HttpCallInterface , public GrpcCallInterface , public GrpcStreamInterface , public MetricsInterface , public SharedDataInterface , public SharedQueueInterface , public GeneralInterface { proxy_wasm::PluginBase \u5305\u542b\u4e86wasm\u63d2\u4ef6\u7684\u4e00\u4e9b\u4fe1\u606f\u6bd4\u5982\u3001name\u3001root_id\u3001vm_id\u3001plugin\u914d\u7f6e\u3001log_prefix\uff0c\u8fd9\u4e9b\u4fe1\u606f\u90fd\u662f\u4ece PluginConfig \u4e2d\u83b7\u53d6\u7684\uff0c\u662f\u7528\u4e8e\u914d\u7f6e\u7684\u3002 name: \u6bcf\u4e00\u4e2a\u63d2\u4ef6\u90fd\u6709\u4e00\u4e2a\u540d\u5b57\uff0c\u5728\u540c\u4e00\u4e2awasm VM\u4e2d\u662f\u552f\u4e00\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u540c\u4e00\u4e2aVM\u4e2d\u4e0d\u80fd\u6709\u591a\u4e2a\u76f8\u540cname\u7684\u63d2\u4ef6 root_id: \u5728\u4e00\u4e2awasm VM\u4e2d\u662f\u552f\u4e00\u7684\uff0c\u591a\u4e2a\u63d2\u4ef6\u53ef\u4ee5\u62e5\u6709\u76f8\u540c\u7684root_id\uff0c\u5bf9\u4e8e\u5177\u6709\u76f8\u540croot_id\u7684\u63d2\u4ef6\u6765\u8bf4\uff0c\u4ed6\u4eec\u4e4b\u95f4\u5171\u4eabContext\u548cRootContext\uff0c\u5982\u679c\u4e3a\u7a7a\uff0c\u90a3\u4e48\u6240\u6709\u7684\u63d2\u4ef6\u5171\u4eabContext vm_id: \u6839\u636ewasm code\u8fdb\u884chash\uff0c\u4e0d\u540c\u7684code\u4f7f\u7528\u4e0d\u540c\u7684vm\uff0c\u5982\u679ccode\u90fd\u662f\u4e00\u6837\u7684\uff0c\u90a3\u4e48\u5c31\u4f7f\u7528\u540c\u4e00\u4e2avm 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 struct PluginBase { PluginBase ( std :: string_view name , std :: string_view root_id , std :: string_view vm_id , std :: string_view runtime , std :: string_view plugin_configuration , bool fail_open ) : name_ ( std :: string ( name )), root_id_ ( std :: string ( root_id )), vm_id_ ( std :: string ( vm_id )), runtime_ ( std :: string ( runtime )), plugin_configuration_ ( plugin_configuration ), fail_open_ ( fail_open ), key_ ( root_id_ + \"||\" + plugin_configuration_ ), log_prefix_ ( makeLogPrefix ()) {} const std :: string name_ ; const std :: string root_id_ ; const std :: string vm_id_ ; const std :: string runtime_ ; const std :: string plugin_configuration_ ; const bool fail_open_ ; const std :: string & key () const { return key_ ; } const std :: string & log_prefix () const { return log_prefix_ ; } private : std :: string makeLogPrefix () const ; const std :: string key_ ; const std :: string log_prefix_ ; }; Common::Wasm::Plugin \u7ee7\u627f\u81ea proxy_wasm::PluginBase \uff0c\u5728PluginBase\u7684\u57fa\u7840\u4e0a\u589e\u52a0\u4e86\u989d\u5916\u7684\u4e00\u4e9b\u63d2\u4ef6\u9700\u8981\u7684\u4fe1\u606f\uff0c\u6bd4\u5982Metadata\u3001LocalInfo\u3001Direction\u7b49\u4fe1\u606f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 class Plugin : public proxy_wasm :: PluginBase { public : Plugin ( const envoy :: extensions :: wasm :: v3 :: PluginConfig & config , envoy :: config :: core :: v3 :: TrafficDirection direction , const LocalInfo :: LocalInfo & local_info , const envoy :: config :: core :: v3 :: Metadata * listener_metadata ) : PluginBase ( config . name (), config . root_id (), config . vm_config (). vm_id (), config . vm_config (). runtime (), MessageUtil :: anyToBytes ( config . configuration ()), config . fail_open ()), direction_ ( direction ), local_info_ ( local_info ), listener_metadata_ ( listener_metadata ), wasm_config_ ( std :: make_unique < WasmConfig > ( config )) {} envoy :: config :: core :: v3 :: TrafficDirection & direction () { return direction_ ; } const LocalInfo :: LocalInfo & localInfo () { return local_info_ ; } const envoy :: config :: core :: v3 :: Metadata * listenerMetadata () { return listener_metadata_ ; } WasmConfig & wasmConfig () { return * wasm_config_ ; } private : envoy :: config :: core :: v3 :: TrafficDirection direction_ ; const LocalInfo :: LocalInfo & local_info_ ; const envoy :: config :: core :: v3 :: Metadata * listener_metadata_ ; WasmConfigPtr wasm_config_ ; }; \u603b\u7ed3\u6765\u8bf4 Plugin \u5bf9\u8c61\u672c\u8eab\u53ea\u662f\u4e00\u4e2a\u5355\u7eaf\u7684\u914d\u7f6e\u7c7b\uff0c\u4fdd\u5b58\u4e86\u63d2\u4ef6\u6240\u9700\u8981\u7684\u4e00\u4e9b\u4fe1\u606f\u3002 Envoy::Extensions::Common::Wasm::PluginHandle \u662f\u5c06Plugin\u548cWasmHandle\u7ec4\u5408\u4e00\u8d77\u7684\u4e00\u4e2a\u5bf9\u8c61\uff0c\u5305\u542b\u4e86WasmHandle\u548cPlugin\u4e24\u8005\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class PluginHandle : public PluginHandleBase , public ThreadLocal :: ThreadLocalObject { public : explicit PluginHandle ( const WasmHandleSharedPtr & wasm_handle , const PluginSharedPtr & plugin ) : PluginHandleBase ( std :: static_pointer_cast < WasmHandleBase > ( wasm_handle ), std :: static_pointer_cast < PluginBase > ( plugin )), wasm_handle_ ( wasm_handle ), root_context_id_ ( wasm_handle -> wasm () -> getRootContext ( plugin , false ) -> id ()) {} WasmSharedPtr & wasm () { return wasm_handle_ -> wasm (); } WasmHandleSharedPtr & wasmHandleForTest () { return wasm_handle_ ; } uint32_t rootContextId () { return root_context_id_ ; } private : WasmHandleSharedPtr wasm_handle_ ; const uint32_t root_context_id_ ; }; PluginHandle\u7ee7\u627f\u4e86ThreadLocalObject\uff0c\u56e0\u6b64\u4ed6\u662f\u4e00\u4e2aTLS\u5bf9\u8c61\uff0c\u5176\u521b\u5efa\u8fc7\u7a0b\u5982\u4e0b: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 std :: shared_ptr < PluginHandleBase > getOrCreateThreadLocalPlugin ( std :: shared_ptr < WasmHandleBase > base_handle , std :: shared_ptr < PluginBase > plugin , WasmHandleCloneFactory clone_factory , PluginHandleFactory plugin_factory ) { // vm_key + || + plugin key\u6784\u9020\u4e86PluginHandle\u7684\u552f\u4e00\u6807\u8bc6 std :: string key ( std :: string ( base_handle -> wasm () -> vm_key ()) + \"||\" + plugin -> key ()); // Get existing thread-local Plugin handle. // \u5148\u67e5\u770b\u672c\u5730\u662f\u5426\u6709PluginHandle\uff0c\u6709\u7684\u8bdd\u76f4\u63a5\u8fd4\u56de\uff0c\u6ca1\u6709\u7684\u8bdd\u5f00\u59cb\u521b\u5efa auto it = local_plugins . find ( key ); if ( it != local_plugins . end ()) { auto plugin_handle = it -> second . lock (); if ( plugin_handle ) { return plugin_handle ; } // Remove stale entry. local_plugins . erase ( key ); } // \u5148\u521b\u5efa\u4e00\u4e2aWasmHandle\uff0c\u5b58\u5728\u5f53\u524d\u7684thread local\u4e2d\uff0c\u7136\u540e\u7528wasm handle\u521d\u59cb\u5316\u548c\u914d\u7f6eplugin\uff0c\u6700\u540e\u521b\u5efaPluginHandle // Get thread-local WasmVM. auto wasm_handle = getOrCreateThreadLocalWasm ( base_handle , clone_factory ); if ( ! wasm_handle ) { return nullptr ; } // Create and initialize new thread-local Plugin. auto plugin_context = wasm_handle -> wasm () -> start ( plugin ); if ( ! plugin_context ) { base_handle -> wasm () -> fail ( FailState :: StartFailed , \"Failed to start thread-local Wasm\" ); return nullptr ; } if ( ! wasm_handle -> wasm () -> configure ( plugin_context , plugin )) { base_handle -> wasm () -> fail ( FailState :: ConfigureFailed , \"Failed to configure thread-local Wasm plugin\" ); return nullptr ; } auto plugin_handle = plugin_factory ( wasm_handle , plugin ); local_plugins [ key ] = plugin_handle ; return plugin_handle ; } Envoy::Extension::Common::Wasm::Wasm Wasm VM\u5b9e\u4f8b\u4e86\uff0c\u8d1f\u8d23\u6267\u884cPlugin\uff0c\u7ee7\u627f\u81eaWasmBase\uff0c\u5b9e\u73b0\u4e86Wasm\u7684Envoy\u4fa7\u63a5\u53e3\uff0cEnvoy\u901a\u8fc7Wasm\u53ef\u4ee5\u8f7d\u5165Plugin\u3001\u521b\u5efaContext\u3001RootContext\u3001\u8c03\u7528Wasm Plugin\u4e2d\u66b4\u9732\u7684\u65b9\u6cd5\uff0c Context\u5bf9\u8c61\u5c31\u4f9d\u8d56Wasm\u5bf9\u8c61\u6765\u8c03\u7528Wasm\u63d2\u4ef6\u4e2d\u7684\u65b9\u6cd5\uff0c\u6240\u4ee5Context\u5bf9\u8c61\u7684\u6784\u9020\u4f9d\u8d56Wasm\u5bf9\u8c61\u3002 1 2 3 4 Context (); // Testing. Context ( Wasm * wasm ); // Vm Context. Context ( Wasm * wasm , const PluginSharedPtr & plugin ); // Root Context. Context ( Wasm * wasm , uint32_t root_context_id , const PluginSharedPtr & plugin ); // Stream context. Envoy::Extensions::Common::Wasm::WasmHandle 1 2 3 4 5 6 7 8 9 10 class WasmHandle : public WasmHandleBase , public ThreadLocal :: ThreadLocalObject { public : explicit WasmHandle ( const WasmSharedPtr & wasm ) : WasmHandleBase ( std :: static_pointer_cast < WasmBase > ( wasm )), wasm_ ( wasm ) {} WasmSharedPtr & wasm () { return wasm_ ; } private : WasmSharedPtr wasm_ ; }; WasmHandle \u5b9e\u9645\u4e0a\u5305\u542b\u4e86Wasm\uff0c\u662f\u5bf9Wasm\u7684\u5305\u88c5\uff0c\u540c\u65f6\u4ed6\u4e5f\u662f\u4e00\u4e2aTLS\u5bf9\u8c61\uff0c\u5728\u6bcf\u4e00\u4e2a\u7ebf\u7a0b\u90fd\u4f1a\u5b58\u4e00\u4efd\u3002 wasm\u5728Envoy\u7684\u6bcf\u4e00\u4e2a\u6269\u5c55\u70b9\u4e2d\u5b9e\u73b0\u4e86wasm plugin\uff0c\u4e5f\u5c31\u662f\u6838\u5fc3\u7684 Wasm::Plugin \uff0c\u7136\u540e\u5c06Plugin\u5bf9\u8c61\u653e\u5728Tls\u4e2d 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 FilterConfig :: FilterConfig ( const envoy :: extensions :: filters :: http :: wasm :: v3 :: Wasm & config , Server :: Configuration :: FactoryContext & context ) : tls_slot_ ( ThreadLocal :: TypedSlot < Common :: Wasm :: PluginHandle >:: makeUnique ( context . threadLocal ())) { plugin_ = std :: make_shared < Common :: Wasm :: Plugin > ( config . config (), context . direction (), context . localInfo (), & context . listenerMetadata ()); auto plugin = plugin_ ; auto callback = [ plugin , this ]( const Common :: Wasm :: WasmHandleSharedPtr & base_wasm ) { // NB: the Slot set() call doesn't complete inline, so all arguments must outlive this call. tls_slot_ -> set ([ base_wasm , plugin ]( Event :: Dispatcher & dispatcher ) { return Common :: Wasm :: getOrCreateThreadLocalPlugin ( base_wasm , plugin , dispatcher ); }); }; if ( ! Common :: Wasm :: createWasm ( plugin_ , context . scope (). createScope ( \"\" ), context . clusterManager (), context . initManager (), context . dispatcher (), context . api (), context . lifecycleNotifier (), remote_data_provider_ , std :: move ( callback ))) { throw Common :: Wasm :: WasmException ( fmt :: format ( \"Unable to create Wasm HTTP filter {}\" , plugin -> name_ )); } } WasmExtension \u5c06\u521b\u5efaWasm Handle\u5b9e\u4f8b\u3001\u514b\u9686Wasm\u5b9e\u4f8b\u3001\u521b\u5efaPluginHandle\uff0c\u521b\u5efastats\u3001stats\u7edf\u8ba1\u7b49\u5c01\u88c5\u6210\u63a5\u53e3\uff0c\u53ef\u4ee5\u6709\u591a\u79cd\u5b9e\u73b0\u3002\u9ed8\u8ba4\u5b9e\u73b0\u662f EnvoyWasm \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 class WasmExtension : Logger :: Loggable < Logger :: Id :: wasm > { public : WasmExtension () = default ; virtual ~ WasmExtension () = default ; virtual void initialize () = 0 ; virtual PluginHandleExtensionFactory pluginFactory () = 0 ; virtual WasmHandleExtensionFactory wasmFactory () = 0 ; virtual WasmHandleExtensionCloneFactory wasmCloneFactory () = 0 ; enum class WasmEvent : int { Ok , RemoteLoadCacheHit , RemoteLoadCacheNegativeHit , RemoteLoadCacheMiss , RemoteLoadCacheFetchSuccess , RemoteLoadCacheFetchFailure , UnableToCreateVM , UnableToCloneVM , MissingFunction , UnableToInitializeCode , StartFailed , ConfigureFailed , RuntimeError , }; virtual void onEvent ( WasmEvent event , const PluginSharedPtr & plugin ) = 0 ; virtual void onRemoteCacheEntriesChanged ( int remote_cache_entries ) = 0 ; virtual void createStats ( const Stats :: ScopeSharedPtr & scope , const PluginSharedPtr & plugin ) ABSL_EXCLUSIVE_LOCKS_REQUIRED ( mutex_ ) = 0 ; virtual void resetStats () ABSL_EXCLUSIVE_LOCKS_REQUIRED ( mutex_ ) = 0 ; // Delete stats pointers // NB: the Scope can become invalid if, for example, the owning FilterChain is deleted. When that // happens the stats must be recreated. This hook verifies the Scope of any existing stats and if // necessary recreates the stats with the newly provided scope. // This call takes out the mutex_ and calls createStats and possibly resetStats(). Stats :: ScopeSharedPtr lockAndCreateStats ( const Stats :: ScopeSharedPtr & scope , const PluginSharedPtr & plugin ); void resetStatsForTesting (); protected : absl :: Mutex mutex_ ; ScopeWeakPtr scope_ ; }; WasmVmIntegration 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 struct WasmVmIntegration { virtual ~ WasmVmIntegration () {} virtual WasmVmIntegration * clone () = 0 ; virtual proxy_wasm :: LogLevel getLogLevel () = 0 ; virtual void error ( std :: string_view message ) = 0 ; virtual void trace ( std :: string_view message ) = 0 ; // Get a NullVm implementation of a function. // @param function_name is the name of the function with the implementation specific prefix. // @param returns_word is true if the function returns a Word and false if it returns void. // @param number_of_arguments is the number of Word arguments to the function. // @param plugin is the Null VM plugin on which the function will be called. // @param ptr_to_function_return is the location to write the function e.g. of type // WasmCallWord<3>. // @return true if the function was found. ptr_to_function_return could still be set to nullptr // (of the correct type) if the function has no implementation. Returning true will prevent a // \"Missing getFunction\" error. virtual bool getNullVmFunction ( std :: string_view function_name , bool returns_word , int number_of_arguments , NullPlugin * plugin , void * ptr_to_function_return ) = 0 ; }; WasmVmIntegration WasmBase WasmVM \u4e00\u4e2aWasm VM\u9700\u8981\u5b9e\u73b0\u7684\u63a5\u53e3\uff0c Common::Wasm::createWasm createWasmInternal","title":"\u57fa\u672c\u6982\u5ff5"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/envoy/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%AE%9A%E4%B9%89Cluster/","text":"","title":"\u5982\u4f55\u5b9e\u73b0\u81ea\u5b9a\u4e49Cluster"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/kubernetes/","text":"Helm Chart \u4e00\u4e2aChart\u7684\u76ee\u5f55\u7ed3\u6784 1 2 3 4 5 6 mychart/ Chart.yaml values.yaml charts/ templates/ ...","title":"Helm"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/kubernetes/#helm","text":"","title":"Helm"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/kubernetes/#chart","text":"\u4e00\u4e2aChart\u7684\u76ee\u5f55\u7ed3\u6784 1 2 3 4 5 6 mychart/ Chart.yaml values.yaml charts/ templates/ ...","title":"Chart"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/kubernetes/basic/","text":"Kubeadm \u5b89\u88c5docker, systemctl starte docker.service\uff0c\u8bbe\u7f6eHTTPS_PROXY\u3001NO_PROXY \u5b89\u88c5kubernetes yum\u6e90 1 2 3 4 5 6 cat <<EOF > /etc/yum.repos.d/kubernetes.repo [kubernetes] name=Kubernetes baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/ enabled=1 gpgcheck=1 3. \u5b89\u88c5kubelet kubectl kubeadm\u7b49 4. \u7f16\u8f91 /etc/sysconfig/kubelet \u8bbe\u7f6e\u5176\u5ffd\u7565Swap\u542f\u7528\u7684\u9519\u8bef 1 2 KUBELET_EXTRA_ARGS=\"--fail-swap-on=false\" KUBE_PROXY_MODE=ipvs \u8bbe\u7f6edocker\u548ckubelet\u5f00\u673a\u81ea\u542f\u52a8 1 kubectl enable docker kubelet 6. kubeadm init --ignore-preflight-errors=Swap --pod-network-cidr=xxxx service-cidr=xxxx 7. \u53c2\u8003\u6b65\u9aa46\u5c06\u5176\u4ed6\u8282\u70b9\u52a0\u5165 Basic command kubectl run easy way to get started versatile kubectl create <resource> explicit, but lacks some features can't create a CronJob can't pass command-line arguments to deployments kubectl create -f foo.yaml or kubectl apply -f foo.yaml all features are available requires writing YAML 1 2 kubectl run --generator = run-pod/v1 nginx --image = nginx \u4ec5\u4ec5\u521b\u5efa\u51fapod\u5bb9\u5668 kubectl run nginx --image = nginx \u521b\u5efapod\u5bb9\u5668\u7684\u540c\u65f6\uff0c\u4f1a\u521b\u5efa\u4e00\u4e2a\u540d\u4e3anginx\u7684deployment --grace-period/--now \u8986\u76d6\u9ed8\u8ba4\u7684\u5bbd\u9650\u671f --cascade=false \u9ed8\u8ba4\u5220\u9664\u4e00\u79cd\u8d44\u6e90\uff0c\u4f1a\u5c06\u5176\u5173\u8054\u7684\u5176\u4ed6\u8d44\u6e90\u90fd\u5220\u9664\uff0c\u901a\u8fc7\u8fd9\u4e2a\u9009\u9879\u53ef\u4ee5\u8ba9\u5176\u4e0d\u5220\u9664\u5176\u5173\u8054\u7684\u8d44\u6e90 \u8d44\u6e90\u5bf9\u8c61 workload(\u5de5\u4f5c\u8d1f\u8f7d\u578b\u8d44\u6e90): Pod\u3001ReplicaSet\u3001Deplovment\u3001StatefulSet\u3001DaemonSet\u3001Job\u3001Cronjob \u670d\u52a1\u53d1\u73b0\u548c\u5747\u8861: Service\u3001Ingress \u914d\u7f6e\u4e0e\u5b58\u50a8: Volume\u3001CSI\u3001ConfigMap\u3001Secret\u3001DownwardAPI \u96c6\u7fa4\u7ea7\u8d44\u6e90: Namespace\u3001Node\u3001Role\u3001ClusterRole\u3001RoleBinding\u3001ClusterRoleBinding \u5143\u6570\u636e\u578b\u8d44\u6e90: HPA\u3001PodTemplate\u3001LimitRange \u6838\u5fc3\u76ee\u6807\u662f\u4e3a\u4e86\u66f4\u597d\u7684\u8fd0\u884c\u548c\u4e30\u5bccPod\u8d44\u6e90 \u8d44\u6e90\u5b9a\u4e49 ApiServer\u4ec5\u63a5\u6536JSON\u683c\u5f0f\u7684\u8d44\u6e90\u5b9a\u4e49:(yaml\u66f4\u6613\u8bfb\uff0c\u53ef\u4ee5\u65e0\u635f\u8f6c\u5316\u4e3aJSON) \u5927\u90e8\u5206\u8d44\u6e90\u7684\u914d\u7f6e\u6e05\u5355\u90fd\u7531\u4e94\u4e2a\u90e8\u5206\u7ec4\u6210: 1. apiVersion: group/version (kubectl api-versions\uff0c\u7701\u7565\u6389\u7ec4\u7684\u8bdd\u5c31\u662fcore\u7c7b\u578b\u7684\u6838\u5fc3\u7ec4) 2. kind: \u8d44\u6e90\u7c7b\u578b\uff0c\u5206\u4e3a\u5bf9\u8c61\u7c7b(Pod\u3001Namespace\u3001Depolyment\u7b49)\u3001\u5217\u8868\u7c7b(PodList\u3001NamespaceList)\u3001\u7b80\u5355\u7c7b 3. metadata: 1. name 2. namespace 3. labels 4. annotations 5. selflink: /api/GROUP/VERSION/namespaces/NAMESPACE/TYPE/NAME 4. spec: \u5b9a\u4e49\u671f\u671b\u7684\u72b6\u6001\uff0cdisired state (kubectl explain pods) 5. status: \u5f53\u524d\u72b6\u6001\uff0ccurrent state\uff0c\u672c\u5b57\u6bb5\u7531kubernetes\u96c6\u7fa4\u7ef4\u62a4 \u901a\u8fc7kubectl explain TYPE\u6765\u67e5\u770b\u8d44\u6e90\u5b9a\u4e49\u7684\u63cf\u8ff0\uff0c\u53ef\u4ee5\u5d4c\u5957\u67e5\u8be2kubectl explan TYPE.spec.xxx Example: apiVersion: v1 kind: Pod metadata: name: pod-demo namespace: default labels: app: myapp tier: fronted spec: containers: - name: myapp image: ikubernetes/myapp:v1 - name: busybox image: busybox:latest command: - \"bin/sh\" - \"-c\" - \"echo $(date) >> /tmp/txt; sleep 5\" attach\u5230\u5bb9\u5668\u4e2d kubectl exec -it POD -c CONTAINER -- cmd Pod\u8d44\u6e90 sepc.containers: <[]Object> - name image imagePullPolicy (Always(\u603b\u662f\u4e0b\u8f7d)\u3001Never(\u603b\u662f\u4f7f\u7528\u672c\u5730)\u3001IfNotPresent(\u5982\u679c\u672c\u5730\u6709\u5c31\u4f7f\u7528\uff0c\u5426\u5219\u5c31\u8fdc\u7a0b\u62c9)) \u5982\u679c\u6807\u7b7e\u662flatest\u5c31\u662fAlways\uff0c\u5426\u5219\u5c31\u662fIfNotPresent (\u4e0d\u80fd\u52a8\u6001\u66f4\u65b0) lifecycle: postStart: // \u5bb9\u5668\u542f\u52a8\u540e(ENTRYPOINT\u6267\u884c\u4e4b\u540e)\u7acb\u523b\u6267\u884c\u7684\u52a8\u4f5c\uff0c\u662f\u5f02\u6b65\u7684\uff0c\u5bb9\u5668\u7ee7\u7eed\u542f\u52a8 exec: command: [xxxx] preStop: // \u5bb9\u5668\u88ab\u6740\u6b7b\u4e4b\u524d\uff0c\u662f\u540c\u6b65\u7684\uff0c\u4f1a\u963b\u585e\u5f53\u524d\u5bb9\u5668\u6740\u6b7b\u7684\u6d41\u7a0b exec: command: [xxxx] ports: <[]Object> \u5bb9\u5668\u66b4\u9732\u7684\u7aef\u53e3\uff0c\u53ea\u662f\u4fe1\u606f\u66b4\u9732\uff0c\u901a\u8fc7yaml\u77e5\u9053\u8fd9\u4e2a\u5e94\u7528\u66b4\u9732\u4e86\u54ea\u4e9b\u7aef\u53e3 containerPort: hostIP: hostPort: name: protocol: \u9ed8\u8ba4TCP args: <[]string> \u5411entrypoint\u4f20\u9012\u53c2\u6570\uff0c\u4ee3\u66ff\u955c\u50cf\u4e2d\u7684CMD\u53c2\u6570 command: <[]string> \u76f8\u5f53\u4e8eentrypoint\uff0c\u662f\u4e0d\u4f1a\u8fd0\u884c\u5728shell\u4e2d\u7684\uff0c\u5982\u679c\u4e0d\u63d0\u4f9b\u5c31\u8fd0\u884c\u955c\u50cf\u4e2d\u7684entrypoint spec <[]Object> nodeSelector: \u9009\u62e9\u8981\u8fd0\u884c\u5728\u54ea\u7c7bnode\u4e0a nodeName: \u6307\u5b9a\u8981\u8fd0\u884c\u7684node\u673a\u5668\u4e0a hostPID: hostIPC: hostAliases: // \u5b9a\u4e49pod\u4e2d\u7684hosts\u6587\u4ef6\u91cc\u7684\u5185\u5bb9 - ip: \"10.1.2.3\" hostnames: - \"foo.remote\" - \"bar.remote\" shareProcessNamespace: true //\u5171\u4eabPID namespace hostNetwork: restartPolicy: Always(\u5931\u8d25\u540e\u4f1a\u4e0d\u65ad\u91cd\u65b0\u521b\u5efapod)\u3001OnFailure(\u542f\u52a8\u5931\u8d25\u540e\uff0c\u4f1a\u4e0d\u65ad\u91cd\u542fpod\u4e2d\u7684\u5bb9\u5668)\u3001Never\u3001Default to Always env: -name: value: metadata: annotations: \u7c7b\u4f3clabels\uff0c\u4e0d\u80fd\u7528\u4e8e\u6311\u9009\u8d44\u6e90\u5bf9\u8c61\uff0c\u4ec5\u7528\u4e8e\u4e3a\u5bf9\u8c61\u63d0\u4f9b\"\u5143\u6570\u636e\" Pod\u751f\u547d\u5468\u671f: 1. \u4e32\u884c\u6267\u884c\u591a\u4e2ainit\u521d\u59cb\u5316\u5bb9\u5668 2. \u4e3b\u5bb9\u5668\u8fd0\u884c 3. post start\uff0c\u4e3b\u5bb9\u5668\u8fd0\u884c\u540e\u53ef\u4ee5\u6267\u884c\u7684hook 4. pre stop \u4e3b\u5bb9\u5668\u9000\u51fa\u524d\u53ef\u4ee5\u6267\u884c\u7684hook 5. \u5b58\u6d3b\u72b6\u6001\u68c0\u6d4b liveness probe 6. \u670d\u52a1\u53ef\u7528\u72b6\u6001\u68c0\u6d4b readiess probe POD\u5e76\u4e0d\u652f\u6301\u539f\u5730\u66f4\u65b0\uff0c\u9700\u8981\u6709Deployment\u6765\u652f\u6301 \u72b6\u6001: 1. Pending // YAML\u6587\u4ef6\u63d0\u4ea4\u7ed9k8s\u997f\uff0cAPI\u5bf9\u8c61\u5df2\u7ecf\u521b\u5efa\u5e76\u4fdd\u5b58\u5728Etcd\u4e2d\uff0c\u4f46\u662fPod\u91cc\u9762\u6709\u4e9b\u5bb9\u5668\u56e0\u4e3a\u67d0\u79cd\u539f\u56e0\u4e0d\u80fd\u88ab\u987a\u5229\u521b\u5efa\u3002 2. Running // Pod\u5df2\u7ecf\u8c03\u5ea6\u6210\u529f\uff0c\u8ddf\u4e00\u4e2a\u5177\u4f53\u7684\u8282\u70b9\u7ed1\u5b9a\uff0c\u5b83\u5305\u542b\u7684\u5bb9\u5668\u90fd\u5df2\u7ecf\u521b\u5efa\u6210\u529f\u4e86\uff0c\u5e76\u4e14\u81f3\u5c11\u6709\u4e00\u4e2a\u6b63\u5728\u8fd0\u884c\u4e2d 3. Failed // Pod\u91cc\u9762\u81f3\u5c11\u6709\u4e00\u4e2a\u5bb9\u5668\u4ee5\u4e0d\u6b63\u5e38\u7684\u72b6\u6001(\u975e0\u7684\u8fd4\u56de\u7801)\u9000\u51fa\uff0c\u8fd9\u4e2a\u72b6\u6001\u7684\u51fa\u73b0\uff0c\u610f\u5473\u7740\u4f60\u5f97\u60f3\u529e\u6cd5Debug\u8fd9\u4e2a\u5bb9\u5668\u7684\u5e94\u7528\u3002 4. Succeeded // Pod\u91cc\u9762\u6240\u6709\u7684\u5bb9\u5668\u90fd\u6b63\u5e38\u8fd0\u884c\u5b8c\u6bd5\u4e86\uff0c\u5e76\u4e14\u5df2\u7ecf\u9000\u51fa\u4e86\u3002 5. Unknown // \u4e00\u4e2a\u5f02\u5e38\u7684\u72b6\u6001\uff0cPod\u7684\u72b6\u6001\u4e0d\u80fd\u6301\u7eed\u88abkubelet\u6c47\u62a5\u7ed9kube-apiserver\uff0c\u53ef\u80fd\u662f\u4e3b\u8282\u70b9master\u548ckubelet\u95f4\u7684\u901a\u4fe1\u51fa\u73b0\u4e86\u95ee\u9898 \u8fdb\u4e00\u6b65\u53c8\u53ef\u4ee5\u7ec6\u5206: PodScheduled\u3001Ready\u3001Initialized\uff0c\u4ee5\u53ca Unschedulable\uff0c\u7528\u6765\u63cf\u8ff0\u9020\u6210\u5f53\u524dStatus\u7684\u5177\u4f53\u539f\u56e0\u662f\u4ec0\u4e48? \u53ea\u8981Pod\u7684restartPolicy\u6307\u5b9a\u7684\u7b56\u7565\u5141\u8bb8\u91cd\u542f\u5f02\u5e38\u7684\u5bb9\u5668(\u6bd4\u5982: Always)\uff0c\u90a3\u4e48\u8fd9\u4e2aPod\u5c31\u4f1a\u4fdd\u6301Running\u72b6\u6001\uff0c\u5e76\u8fdb\u884c\u5bb9\u5668\u91cd\u542f\uff0c\u5426\u5219\u5c31\u4f1a\u8fdb\u7a0bFailed\u72b6\u6001 \u5bf9\u4e8e\u5305\u542b\u591a\u4e2a\u5bb9\u5668\u7684Pod\uff0c\u53ea\u6709\u5b83\u91cc\u9762\u6240\u6709\u7684\u5bb9\u5668\u90fd\u8fdb\u7a0b\u5f02\u5e38\u72b6\u6001\u540e\uff0cPod\u624d\u4f1a\u8fdb\u7a0bFailed\u72b6\u6001\uff0c\u5728\u6b64\u4e4b\u524dPod\u90fd\u662fRunning\u72b6\u6001\u3002\u6b64\u65f6Pod\u7684READY\u5b57\u6bb5\u4f1a\u663e\u793a\u6b63\u5e38\u5bb9\u5668\u7684\u4e2a\u6570 1 2 3 4 5 Image Entrypoint|Image Cmd|Container command|Container args|Command run [/ep-1] [foo bar] <not set> <not set> [ep-1 foo bar] [/ep-1] [foo bar] [/ep-2] <not set> [ep-2] [/ep-1] [foo bar] <not set> [zoo boo] [ep-1 zoo boo] [/ep-1] [foo bar] [/ep-2] [zoo boo] [ep-2 zoo boo] kubectl get pods --show-labels \u663e\u793a\u8d44\u6e90\u7684labels kubectl get pods -L app \u663e\u793a\u8d44\u6e90\u5bf9\u8c61\u7684\u65f6\u5019\uff0c\u663e\u793a\u5177\u6709app\u6807\u7b7e\u7684\u6807\u7b7e\u503c kubectl get pods -l app \u53ea\u663e\u793a\u542b\u6709app\u6807\u7b7e\u7684\u8d44\u6e90 kubectl label TYPE NAME LABEL\uff0c\u7ed9TYPE\u7c7b\u578b\u7684\u8d44\u6e90\u4e2d\u540d\u4e3aNAME\u7684\u8d44\u6e90\u8fdb\u884c\u6253\u6807 \u6807\u7b7e\u9009\u62e9\u5668: 1. \u7b49\u503c\u5173\u7cfb =, ==, != 2. \u96c6\u5408\u5173\u7cfb 1. KEY in (VALUE...) 2. KEY notin (VALUE...) 3. KEY 4. !KEY \u8bb8\u591a\u8d44\u6e90\u652f\u6301\u5185\u5d4c\u5b57\u6bb5\u5b9a\u4e49\u5176\u4f7f\u7528\u7684\u6807\u7b7e\u9009\u62e9\u5668: 1. matchLabels 2. matchExpressions \u63a2\u9488\u7c7b\u578b(livenessProbe\u3001readynessProb\u3001lifecyle): 1. ExecAction 2. TcpSocketAction 3. HTTPGetAction lifecyle\u542b\u6709postStart\u548cpreStop\u4e24\u4e2ahook Projected Volume \u6295\u5c04\u6570\u636e\u5377\uff0c\u662f\u4e3a\u5bb9\u5668\u63d0\u4f9b\u7684\u9884\u5148\u5b9a\u4e49\u597d\u7684\u6570\u636e Secret // \u52a0\u5bc6\u7684key/value\u6570\u636e ConfigMap // \u4e0d\u52a0\u5bc6\u7684\u914d\u7f6e\u6570\u636e Downward API // \u53ef\u4ee5\u5f15\u7528pod\u4e2d\u7684\u5143\u4fe1\u606f(\u6bd4\u5982label\u3001nodename\u3001hostIp\u3001namespace\u3001podip\u3001uid\u3001annotations\u7b49\u7b49) ServiceAccountToken // \u672c\u8d28\u4e0a\u662f\u4e00\u79cd\u7279\u6b8a\u7684Secret PodPreset\u7528\u4e8e\u7ed9\u5f00\u53d1\u4eba\u5458\u5199\u7684pod\u6dfb\u52a0\u4e00\u4e9b\u9884\u8bbe\u7684\u5b57\u6bb5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 apiVersion: settings.k8s.io/v1alpha1 kind: PodPreset metadata: name: allow-database spec: selector: matchLabels: role: frontend env: - name: DB_PORT value: \"6379\" volumeMounts: - mountPath: /cache name: cache-volume volumes: - name: cache-volume emptyDir: {} \u63a7\u5236\u5668 ReplicationController: \u5df2\u7ecf\u5e9f\u5f03 ReplicaSet: \u81ea\u52a8\u6269\u7f29\u5bb9 Deployment: \u63a7\u5236ReplicaSet\u6765\u95f4\u63a5\u7684\u63a7\u5236pods DaemonSet: Job: Crontab: StatefulSet ReplicaSet spec: replicas: \u526f\u672c\u6570\u91cf selector: \u9009\u62e9pod matchLabels: LABEL template: \u5bb9\u5668\u6a21\u7248 metadata: name: labels: \u548c\u4e0a\u9762\u7684\u6807\u7b7e\u9009\u62e9\u5668\u8981\u4e00\u81f4 LABEL spec: containers: -name: image: ports: -name: containerPort Deployment \u66f4\u65b0\u7684\u7c92\u5ea6(\u4e00\u6279\u66f4\u65b0\u591a\u5c11) \u66f4\u65b0\u7684\u8fc7\u7a0b\u662f\u5426\u5141\u8bb8\u8d85\u8fc7\u671f\u671b\u7684Pod\u6570\u91cf \u7070\u5ea6\u8fc7\u7a0b\u4e2d\u5360\u505c \u84dd\u8272\u90e8\u7f72 \u56de\u6eda example: apiVersion: apps/v1 kind: Deployment metadata: name: demo namespace: default labels: annotations: spec: replicas: 2 rollingUpdatesStrategy: strategy: \u66f4\u65b0\u7b56\u7565 rollingUpdate: maxSurge : \u6700\u591a\u53ef\u8d85\u8fc7\u7684\u5bb9\u5668\u6570\u91cf/\u6bd4\u4f8b maxUnavailable: \u6700\u591a\u4e0d\u53ef\u7528\u7684\u5bb9\u5668\u6570\u91cf type: Recreate|RollingUpdate revisionHistoryLimit: \u4fdd\u5b58\u7684\u5386\u53f2\u7248\u672c\u6570\u91cf selector: matchLabels: LABEL template: \u5bb9\u5668\u6a21\u7248 metadata: name: labels: LABEL spec: -name: image: ports: -name: containerPort CDR(Custom Defined Resources) 1.8+ Operator Helm \u7c7b\u4f3c\u4e8eYum kubectl apply \u58f0\u660e\u5f0f\uff0c\u540c\u4e00\u4efdyaml\u53ef\u4ee5apply\u591a\u6b21\uff0c\u6bcf\u6b21\u90fd\u4f1a\u8bb0\u5f55\u5728annotations\u4e2d kubectl get pods -w \u52a8\u6001\u76d1\u63a7 kubectl set image TYPE NAME=IMAGE-NAME kubectl rollout pause TYPE NAME \u505c\u6b62 kubectl rollout resume TYPE NAME \u6062\u590d kubectl rollout history TYPE NAME \u67e5\u770b\u66f4\u65b0\u5386\u53f2 kubectl rollout undo \u56de\u6eda kubectl patch TYPE -p '{}' kubectl rollout history TYPE NAME \u67e5\u770b\u56de\u6eda\u7684revision kubectl rollout undo TYPE NAME --to-revision=REVISION_NAME DaemonSet DaemonSet\u5728\u5b9e\u73b0\u7684\u65f6\u5019\u4f1a\u7ed9\u6bcf\u4e00\u4e2aPod\u52a0\u4e0a\u4e00\u4e2anodeAddinity\u4ece\u800c\u4fdd\u8bc1\u8fd9\u4e2aPod\u53ea\u4f1a\u5728\u6307\u5b9a\u7684\u8282\u70b9\u4e0a\u542f\u52a8 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 apiVersion : apps/v1 kind : DaemonSet metadata : name : fluentd-elasticsearch namespace : kube-system labels : k8s-app : fluentd-logging spec : selector : matchLabels : name : fluentd-elasticsearch template : metadata : labels : name : fluentd-elasticsearch spec : # \u9700\u8981\u6709\u4e00\u4e2a\u5bb9\u5fcd\u7684\u6c61\u70b9\uff0c\u53ef\u4ee5\u5728master\u4e0a\u5b89\u88c5\uff0c\u9ed8\u8ba4master\u662f\u4e0d\u4f1a\u8fdb\u884cpod\u8c03\u5ea6\u7684\u3002 # \u5f53\u4e00\u4e2a\u8282\u70b9\u6ca1\u6709\u5b89\u88c5\u7f51\u7edc\u63d2\u4ef6\u4f1a\u88ab\u8bbe\u7f6enode.kubernetes.io/network-unavailable\u6c61\u70b9 # \u6240\u4ee5\u5728\u5b89\u88c5\u7f51\u7edcagent\u63d2\u4ef6\u7684\u65f6\u5019\uff0c\u9700\u8981\u5bb9\u5fcd\u8fd9\u4e2a\u6c61\u70b9 tolerations : - key : node-role.kubernetes.io/master effect : NoSchedule containers : - name : fluentd-elasticsearch image : k8s.gcr.io/fluentd-elasticsearch:1.20 resources : limits : memory : 200Mi requests : cpu : 100m memory : 200Mi volumeMounts : - name : varlog mountPath : /var/log - name : varlibdockercontainers mountPath : /var/lib/docker/containers readOnly : true terminationGracePeriodSeconds : 30 volumes : - name : varlog hostPath : path : /var/log - name : varlibdockercontainers hostPath : path : /var/lib/docker/containers Service userspace: \u5148\u5230service ip\uff0c\u7136\u540e\u8f6c\u5230node\u4e0a\u7684kube-proxy\uff0c\u7531kube-proxy\u5411\u540e\u8f6c\u53d1 iptables: \u76f4\u63a5iptables\u8f6c\u53d1\uff0c\u4e0d\u9700\u8981kube-proxy ipvs: apiVersion: v1 kind: Service metadata: name: redis namespace: default spec: ports: name: nodePort: \u5728\u96c6\u7fa4\u5916\u88ab\u8bbf\u95ee\u7684port\uff0c\u9ed8\u8ba4\u4f1a\u81ea\u52a8\u5206\u914d\u7684 port: service ip\u4e0a\u7684port protocol: targetPort: \u5bb9\u5668\u4e2d\u7684port selector: externalName: ExternName\u7c7b\u578b: CNAME\u8bb0\u5f55\uff0c\u53ef\u4ee5\u88ab\u4e92\u8054\u7f51\u771f\u6b63\u89e3\u6790\u7684\uff0c\u7528\u4e8e\u8bbf\u95ee\u5916\u90e8\u670d\u52a1\uff0c\u5c06\u5916\u90e8\u670d\u52a1\u7684\u540d\u79f0\u6620\u5c04\u5230\u5185\u90e8\u670d\u52a1 clusterIP: \"None\"\u8868\u793aheadless\u7684\u670d\u52a1\uff0c\u670d\u52a1\u540d\u76f4\u63a5\u89e3\u6790\u4e3a\u540e\u7aef\u5bf9\u5e94\u7684pod sessionAddinity: None|ClientIP \u6839\u636e\u6e90IP\u6765\u8d1f\u8f7d\u5747\u8861\uff0c\u4fdd\u6301\u4f1a\u8bdd\u7c98\u6027 type: ExternName(CNAME\uff0c\u6307\u5411\u771f\u6b63\u7684FQDN), ClusterIP, NodePort, LoadBlancer Servive -> EndPoint\u8d44\u6e90\u5bf9\u8c61 -> Pod \u8d44\u6e90\u8bb0\u5f55: SVC_NAME.NS_NAME.DOMAIN.LTD (svc.cluster.local.) Ingress ingress controller\u548cDeployment\u4e0d\u76f8\u540c\uff0c\u4e0d\u5b58\u5728controller manager\uff0c\u662f\u72ec\u7acb\u5b58\u5728\u7684POD\u8d44\u6e90 /etc/sysconfig/kubelet \u6dfb\u52a0 KUBE_PROXY_MODE=ipvs \u6765\u8bbe\u7f6ekube-proxy\u7684\u5de5\u4f5c\u6a21\u5f0f\u4e3aIPVS ingress pod\u53ef\u4ee5\u76f4\u63a5\u590d\u7528\u5bbf\u4e3b\u673a\u5730\u5740\uff0c\u907f\u514dnodeIp:nodePort\u5230clusterIP:servicePort\u7684\u8f6c\u6362 1 2 kubectl create namespace xxx kubectl delete namespace xxx example: apiVersion: extensions/v1beta1 kind: Ingress metadata: name: xxx namespace: default annotations: kubernetes.io/ingress.class: \"nginx\" spec: backend: \u9ed8\u8ba4 serviceName: servivcePort: tls: hosts: - xxxx - xxxx secretName: rules: host: http paths: - path backend: serviceName: servicePort: \u81ea\u7b7e\u8bc1\u4e66: openssl genrsa -out tls.key 2048 openssl req -new -x509 -key tls.key -out tls.crt -subj /C=CN/ST=Beijijng/L=xxxxxx \u521b\u5efasecret\u5bf9\u8c61: kubectl create secret tls NAME --cert=PATH --key=PATH \u5b58\u50a8\u5377 emptyDir hostPath SAN(iSCSI)\u3001NAS\u3001\u5206\u5e03\u5f0f\u5b58\u50a8(glusterfs\u3001ceph-rdb\u3001cephfs)\u3001\u4e91\u5b58\u50a8(EBS\u3001OSS\u3001Azure Disk) example: \u57fa\u4e8e\u5bbf\u4e3b\u673a\u6765\u5171\u4eab\u5b58\u50a8 apiVersion: v1 kind: Pod metadata: name: NAME namespace: NAMESPACE spec: containers: - name image: volumeMounts: - name: mountPath: volumes: -name: hostPath: path: type: DirectoryOrCreate PVC: \u5c01\u88c5\u5b58\u50a8\u7684\u7ec6\u8282\uff0c\u4e5f\u662fk8s\u4e2d\u7684\u4e00\u4e2a\u8d44\u6e90 spec: accessModes: \u662fPV\u7684\u5b50\u96c6 resources: requests: storage: selector: strageClassName: volumeMode: volumeName: PV: apiVersion: v1 kind: PersistentVolume metadata: spec: \u548cpods.spec.volumes\u76f8\u540c reclamPolicy: retain\u3001recyle\u3001delete accessModes: capacity: storage: 20Gi PVC\u6839\u636erequests\u6765\u9009\u62e9PV\uff0cPV\u7684\u5927\u5c0f\u662f\u4e8b\u5148\u5206\u914d\u597d\u7684\u3002 PVC\u5982\u4f55\u8fdb\u884c\u52a8\u6001\u7684\u521b\u5efaPV\u5462? Dynamic Provisioning PVC\u627e\u5230StorageClass StorageClass\u5b58\u50a8\u63d2\u4ef6\u521b\u5efaPV \u914d\u7f6e\u5bb9\u5668\u5316\u5e94\u7528\u7684\u65b9\u5f0f: \u81ea\u5b9a\u4e49\u547d\u4ee4\u884c\u53c2\u6570 \u628a\u914d\u7f6e\u6587\u4ef6\u76f4\u63a5\u653e\u8fdb\u955c\u50cf \u73af\u5883\u53d8\u91cf spec.containers.env \u5b58\u50a8\u5377 ConfigMap \u73af\u5883\u53d8\u91cf \u76f4\u63a5\u5f53\u4f5c\u5b58\u50a8\u5377 apiVersion: binaryData: data: kind: metadata: kubectl create configmap NAME --from-file|--from-literal=KEY=VALUE kubectl get cm kubectl describe cm NAME pods.spec.containers.env.valueFrom.configMapKeyRef.{name, key, optional} \u53ea\u5728\u542f\u52a8\u7684\u65f6\u5019\u6709\u6548 pods.spec.containers.volumes.item \u6307\u5b9a\u54ea\u4e9bkey\u88ab\u6302\u8f7d secret docker registers general tls stateful \u7a33\u5b9a\u4e14\u552f\u4e00\u7684\u7f51\u7edc\u6807\u8bc6\u7b26 \u7a33\u5b9a\u4e14\u6301\u4e45\u7684\u5b58\u50a8 \u6709\u5e8f\u3001\u5e73\u6ed1\u5730\u90e8\u7f72\u548c\u6269\u5c55 \u6709\u5e8f\u3001\u5e73\u6ed1\u5730\u5220\u9664\u548c\u7ec8\u6b62 \u6709\u5e8f\u7684\u6eda\u52a8\u66f4\u65b0 \u4e09\u4e2a\u7ec4\u4ef6: headless service\u3001StatefulSet\u3001volumeClaimTemplate \u540d\u79f0\u89e3\u6790: pod_name.service_name.ns_name.svc.cluster.local controllerrevision \u4e13\u95e8\u8bb0\u5f55\u67d0\u79cdcontroller\u5bf9\u8c61\u7684\u7248\u672c\uff0c\u50cfstatefulset\u3001daemonset\u7684\u7248\u672c\u90fd\u662f\u901a\u8fc7\u8fd9\u4e2a\u5bf9\u8c61\u6765\u7ba1\u7406\u7684 \u8fd9\u4e2a\u5bf9\u8c61\u7684Data\u5b57\u6bb5\u4fdd\u5b58\u4e86\u8be5\u7248\u672c\u5bf9\u5e94\u7684\u5b8c\u6574\u7684DaemonSet\u7684API\u5bf9\u8c61\uff0c\u5e76\u4e14\u5728Annotation\u5b57\u6bb5\u4fdd\u5b58\u4e86\u521b\u5efa\u8fd9\u4e2a\u5bf9\u8c61\u6240\u4f7f\u7528\u7684kubectl \u547d\u4ee4 Job && CronJob 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 apiVersion : batch/v1 kind : Job metadata : name : pi spec : # \u8981\u5904\u7406\u7684\u4efb\u52a1\u6570\u76ee\u662f8 completions : 8 # \u540c\u65f6\u6267\u884c\u7684\u4efb\u52a1\u6570\u662f2 parallelism : 2 template : spec : containers : - name : pi image : resouer/ubuntu-bc command : [ \"sh\" , \"-c\" , \"echo 'scale=10000; 4*a(1)' | bc -l\" ] restartPolicy : Never # \u6700\u5927\u91cd\u8bd5\u6b21\u65704\u6b21(\u5f53\u4efb\u52a1\u6267\u884c\u5931\u8d25\u7684\u65f6\u5019\u8fdb\u884c\u91cd\u8bd5) backoffLimit : 4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 apiVersion : batch/v1beta1 kind : CronJob metadata : name : hello spec : # 1. concurrencyPolicy=Allow\uff0c\u8fd9\u4e5f\u662f\u9ed8\u8ba4\u60c5\u51b5\uff0c\u8fd9\u610f\u5473\u7740\u8fd9\u4e9b Job \u53ef\u4ee5\u540c\u65f6\u5b58\u5728; # 2. concurrencyPolicy=Forbid\uff0c\u8fd9\u610f\u5473\u7740\u4e0d\u4f1a\u521b\u5efa\u65b0\u7684 Pod\uff0c\u8be5\u521b\u5efa\u5468\u671f\u88ab\u8df3\u8fc7; # 3. concurrencyPolicy=Replace\uff0c\u8fd9\u610f\u5473\u7740\u65b0\u4ea7\u751f\u7684 Job \u4f1a\u66ff\u6362\u65e7\u7684\u3001\u6ca1\u6709\u6267\u884c\u5b8c\u7684 Job\u3002 concurrencyPolicy : Forbid # \u610f\u5473\u7740\u5728\u8fc7\u53bb 200 s \u91cc\uff0c\u5982\u679c miss \u7684\u6570\u76ee\u8fbe\u5230\u4e86 100 \u6b21\uff0c \u90a3\u4e48\u8fd9\u4e2a Job \u5c31\u4e0d\u4f1a\u88ab\u521b\u5efa\u6267\u884c\u4e86\u3002 startingDeadlineSeconds : 200 schedule : \"*/1 * * * *\" jobTemplate : spec : template : spec : containers : - name : hello image : busybox args : - /bin/sh - -c - date; echo Hello from the Kubernetes cluster restartPolicy : OnFailure Admission Controllers API\u5bf9\u8c61\u88ab\u63d0\u4ea4\u7ed9ApiServer\u540e\u505a\u7684\u4e00\u7cfb\u5217\u64cd\u4f5c\u88ab\u79f0\u4e3aAdmission Controllers\uff0c\u9700\u8981\u7ed9ApiServer\u7f16\u5199\u4ee3\u7801\u6765\u5b9e\u73b0\u529f\u80fd\uff0c\u9ed8\u8ba4ApiServer\u63d0\u4f9b\u4e86 \u8bb8\u591aAdmission Controllers\u63d2\u4ef6\uff0c\u4f46\u662f\u4ecd\u7136\u6ca1\u529e\u6cd5\u6ee1\u8db3\u4e00\u4e9b\u9700\u6c42\uff0c\u800c\u4e14\u6bcf\u6b21\u65b0\u589e\u63d2\u4ef6\u90fd\u9700\u8981\u91cd\u542f\u3002\u56e0\u6b64\u6709\u4e86Dynamic Admission Controllers\uff0c\u53ef\u4ee5\u70ed\u63d2\u62d4\u3002 Initializer\u63d2\u4ef6\u5c31\u662f\u5176\u4e2d\u4e00\u79cd\uff0c\u5728v1alpha1\u4e2d\u5b58\u5728\uff0c\u9ed8\u8ba4\u662fdisabled\u7684\u3002 \u58f0\u660e\u5f0fAPI \u4e00\u4e2aAPI\u5bf9\u8c61\u5728Etcd\u4e2d\u7684\u5b8c\u6574\u8d44\u6e90\u8def\u5f84: Group + Version + Resource\u7ec4\u6210 \u9ed8\u8ba4\u6838\u5fc3\u7ec4: /api\uff0c\u67e5\u627e\u7684\u65f6\u5019\u9ed8\u8ba4\u7701\u7565\uff0c\u6bd4\u5982Pod\u3001Node\u7b49\uff0c\u975e\u6838\u5fc3\u7684API\u5bf9\u8c61\u5219\u5728/apis\u8fd9\u4e2a\u5c42\u7ea7\u67e5\u627e \u4e00\u4e2a\u5bf9\u8c61\u63d0\u4ea4\u5230ApiServer\u7684\u5b8c\u6574\u8fc7\u7a0b: 1. \u53d1\u8d77POST\u8bf7\u6c42\uff0c\u53d1\u9001yaml\u5230ApiServer\u4e2d 2. \u8fc7\u6ee4\u8bf7\u6c42(\u6388\u6743\u3001\u8d85\u65f6\u3001\u5ba1\u8ba1) 3. Mux\u3001Routes 4. \u8f6c\u6362\u6210Super Version(API\u8d44\u6e90\u7c7b\u578b\u7684\u6240\u6709\u7248\u672c\u7684\u5168\u5b57\u6bb5\u5168\u96c6) 5. Admission\u548cValidation CRD \u4e00\u4e2aCRD\u8d44\u6e90\u5bf9\u8c61\uff0c\u8d44\u6e90\u7c7b\u578b\u662fNetwork\uff0c\u7ec4\u662fsamplecrd.k8s.io\uff0c\u7248\u672c\u662fv1 1 2 3 4 5 6 7 apiVersion : samplecrd.k8s.io/v1 kind : Network metadata : name : example-network spec : cidr : \"192.168.0.0/16\" gateway : \"192.168.0.1\" \u8d44\u6e90\u63cf\u8ff0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 apiVersion : apiextensions.k8s.io/v1beta1 kind : CustomResourceDefinition metadata : # \u8d44\u6e90\u540d(\u590d\u6570\u5f62\u5f0f).\u7ec4\u540d name : networks.samplecrd.k8s.io spec : # \u7ec4\u540d group : samplecrd.k8s.io # \u7248\u672c version : v1 names : # \u8d44\u6e90\u540d kind : Network # \u590d\u6570 plural : networks # \u4f5c\u7528\u57df scope : Namespaced \u64cd\u4f5cCRD\u8d44\u6e90: \u76ee\u5f55\u7ed3\u6784 1 2 3 4 5 6 7 8 9 10 11 12 13 14 controller.go crd network.yaml # CRD\u6587\u4ef6 example example-network # Network\u8d44\u6e90\u6587\u4ef6 main.go pkg apis samplecrd register.go v1 doc.go register.go types.go pkg/apis/samplecrd/register.go \u4e00\u4e9b\u5168\u5c40\u53d8\u91cf\u7684\u5b9a\u4e49\uff0c\u5b9a\u4e49GroupName\u3001Version\u7b49 1 2 3 4 5 6 package samplecrd const ( GroupName = \"samplecrd.k8s.io\" Version = \"v1\" ) RBAC Role: \u89d2\u8272\uff0c\u5b83\u5176\u5b9e\u5c31\u662f\u4e00\u7ec4\u89c4\u5219\uff0c\u5b9a\u4e49\u4e00\u7ec4\u5bf9Kubernetes API\u5bf9\u8c61\u7684\u64cd\u4f5c\u6743\u9650 Subject: \u88ab\u4f5c\u7528\u8005\uff0c \u65e2\u53ef\u4ee5\u662f\u4eba\u3001\u4e5f\u53ef\u4ee5\u662f\u673a\u5668\uff0c\u4e5f\u53ef\u4ee5\u662f\u4f60\u5728Kubernetes\u91cc\u5b9a\u4e49\u7684 \"\u7528\u6237\" RoleBinding: \u5b9a\u4e49\u4e86\u4f5c\u7528\u8005\u548c\u89d2\u8272\u7684\u7ed1\u5b9a\u5173\u7cfb ClusterRole\u548cClusterRoleBinding\u4f5c\u7528\u4e8e\u6574\u4e2a\u96c6\u7fa4\uff0c\u5728metadata\u4e2d\u4e0d\u9700\u8981\u6307\u5b9anamespace 1 2 3 4 5 6 7 8 9 kind : Role apiVersion : rbac.authorization.k8s.io/v1 metadata : namespace : mynamespace name : example-role rules : # \u9650\u5236\u54ea\u4e2aapi\u3001\u54ea\u4e2a\u8d44\u6e90\u7c7b\u578b\u3001\u5141\u8bb8\u7684\u64cd\u4f5c\u3002 - apiGroups : [ \"\" ] resources : [ \"pods\" ] verbs : [ \"get\" , \"watch\" , \"list\" ] \u5c06role\u7ed1\u5b9a\u5230k8s\u4e2d\u7684User 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 kind : RoleBinding apiVersion : rbac.authorization.k8s.io/v1 metadata : name : example-rolebinding namespace : mynamespace subjects : # \u6388\u6743\u7cfb\u7edf\u4e2d\u7684\u903b\u8f91\u6982\u5ff5\uff0c\u5b83\u9700\u8981\u901a\u8fc7\u5916\u90e8\u8ba4\u8bc1\u670d\u52a1\u6765\u8fdb\u884c\u6388\u6743 # \u8fd8\u53ef\u4ee5\u4f7f\u7528k8s\u7ba1\u7406\u7684\u5185\u7f6e\u7528\u6237\uff0c\u4e5f\u5c31\u662fServiceAccount - kind : User name : example-user # ? \u4e3a\u4ec0\u4e48\u8981\u52a0\u8fd9\u4e2aapiGroup # APIGroup holds the API group of the referenced subject. Defaults to \"\" for # ServiceAccount subjects. Defaults to \"rbac.authorization.k8s.io\" for User # and Group subjects. apiGroup : rbac.authorization.k8s.io # \u5f15\u7528role roleRef : kind : Role name : example-role apiGroup : rbac.authorization.k8s.io \u5bf9\u4e8eServiceCount\u6765\u8bf4\uff0ck8s\u4f1a\u7ed9\u6bcf\u4e00\u4e2aServiceCount\u81ea\u52a8\u521b\u5efa\u5e76\u5206\u914d\u4e00\u4e2aSecret\u5bf9\u8c61\u3002\u8fd9\u4e2a\u5bf9\u8c61\u5c31\u662f\u7528\u6765\u548cAPIServer\u8fdb\u884c\u4ea4\u4e92\u7684\u6388\u6743\u6587\u4ef6\uff0c\u4e00\u822c\u79f0\u4e3atoken \u7528\u6237\u7684POD\u53ef\u4ee5\u6307\u5b9a\u4f7f\u7528\u8fd9\u4e2aServiceCount\uff0c\u5426\u5219k8s\u4f1a\u628a\u4e00\u4e2a\u53ebdefault\u7684service count\u7ed1\u5b9a\u5230pod\u4e2d\u3002 1 2 3 4 5 6 7 8 9 10 apiVersion : v1 kind : Pod metadata : namespace : mynamespace name : sa-token-test spec : containers : - name : nginx image : nginx:1.7.9 serviceAccountName : example-sa \u4f7f\u7528ServiceCount Group 1 2 3 4 5 subjects : - kind : Group # system:serviceaccounts:<Namespace \u540d\u5b57> name : system:serviceaccounts:mynamespace apiGroup : rbac.authorization.k8s.io \u65e5\u5fd7\u6536\u96c6 Node\u4e0a\u90e8\u7f72logging agent\uff0c\u5c06\u65e5\u5fd7\u6587\u4ef6\u8f6c\u53d1\u5230\u540e\u7aef\u5b58\u50a8\u91cc\u9762\uff0c\u8981\u6c42\u5bb9\u5668\u4e2d\u7684\u5e94\u7528\u8f93\u51fa\u65e5\u5fd7\u5230stdout\u548cstderr SideCar\u5bb9\u5668\u5c06\u5e94\u7528\u5bb9\u5668\u4e2d\u7684\u65e5\u5fd7\u6587\u4ef6\u8f93\u51fa\u5230stdout\u548cstderr\uff0c\u7136\u540e\u518d\u6709logging agent\u91c7\u96c6 SideCar\u5bb9\u5668\u90e8\u7f72logging\u76f4\u63a5\u5c06\u5e94\u7528\u5bb9\u5668\u4ea7\u751f\u7684\u65e5\u5fd7\u6587\u4ef6\u91c7\u96c6\u5230\u8fdc\u7aef\u5b58\u50a8","title":"Basic"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/kubernetes/basic/#kubeadm","text":"\u5b89\u88c5docker, systemctl starte docker.service\uff0c\u8bbe\u7f6eHTTPS_PROXY\u3001NO_PROXY \u5b89\u88c5kubernetes yum\u6e90 1 2 3 4 5 6 cat <<EOF > /etc/yum.repos.d/kubernetes.repo [kubernetes] name=Kubernetes baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/ enabled=1 gpgcheck=1 3. \u5b89\u88c5kubelet kubectl kubeadm\u7b49 4. \u7f16\u8f91 /etc/sysconfig/kubelet \u8bbe\u7f6e\u5176\u5ffd\u7565Swap\u542f\u7528\u7684\u9519\u8bef 1 2 KUBELET_EXTRA_ARGS=\"--fail-swap-on=false\" KUBE_PROXY_MODE=ipvs \u8bbe\u7f6edocker\u548ckubelet\u5f00\u673a\u81ea\u542f\u52a8 1 kubectl enable docker kubelet 6. kubeadm init --ignore-preflight-errors=Swap --pod-network-cidr=xxxx service-cidr=xxxx 7. \u53c2\u8003\u6b65\u9aa46\u5c06\u5176\u4ed6\u8282\u70b9\u52a0\u5165","title":"Kubeadm"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/kubernetes/basic/#basic-command","text":"kubectl run easy way to get started versatile kubectl create <resource> explicit, but lacks some features can't create a CronJob can't pass command-line arguments to deployments kubectl create -f foo.yaml or kubectl apply -f foo.yaml all features are available requires writing YAML 1 2 kubectl run --generator = run-pod/v1 nginx --image = nginx \u4ec5\u4ec5\u521b\u5efa\u51fapod\u5bb9\u5668 kubectl run nginx --image = nginx \u521b\u5efapod\u5bb9\u5668\u7684\u540c\u65f6\uff0c\u4f1a\u521b\u5efa\u4e00\u4e2a\u540d\u4e3anginx\u7684deployment --grace-period/--now \u8986\u76d6\u9ed8\u8ba4\u7684\u5bbd\u9650\u671f --cascade=false \u9ed8\u8ba4\u5220\u9664\u4e00\u79cd\u8d44\u6e90\uff0c\u4f1a\u5c06\u5176\u5173\u8054\u7684\u5176\u4ed6\u8d44\u6e90\u90fd\u5220\u9664\uff0c\u901a\u8fc7\u8fd9\u4e2a\u9009\u9879\u53ef\u4ee5\u8ba9\u5176\u4e0d\u5220\u9664\u5176\u5173\u8054\u7684\u8d44\u6e90","title":"Basic command"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/kubernetes/basic/#_1","text":"workload(\u5de5\u4f5c\u8d1f\u8f7d\u578b\u8d44\u6e90): Pod\u3001ReplicaSet\u3001Deplovment\u3001StatefulSet\u3001DaemonSet\u3001Job\u3001Cronjob \u670d\u52a1\u53d1\u73b0\u548c\u5747\u8861: Service\u3001Ingress \u914d\u7f6e\u4e0e\u5b58\u50a8: Volume\u3001CSI\u3001ConfigMap\u3001Secret\u3001DownwardAPI \u96c6\u7fa4\u7ea7\u8d44\u6e90: Namespace\u3001Node\u3001Role\u3001ClusterRole\u3001RoleBinding\u3001ClusterRoleBinding \u5143\u6570\u636e\u578b\u8d44\u6e90: HPA\u3001PodTemplate\u3001LimitRange \u6838\u5fc3\u76ee\u6807\u662f\u4e3a\u4e86\u66f4\u597d\u7684\u8fd0\u884c\u548c\u4e30\u5bccPod\u8d44\u6e90","title":"\u8d44\u6e90\u5bf9\u8c61"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/kubernetes/basic/#_2","text":"ApiServer\u4ec5\u63a5\u6536JSON\u683c\u5f0f\u7684\u8d44\u6e90\u5b9a\u4e49:(yaml\u66f4\u6613\u8bfb\uff0c\u53ef\u4ee5\u65e0\u635f\u8f6c\u5316\u4e3aJSON) \u5927\u90e8\u5206\u8d44\u6e90\u7684\u914d\u7f6e\u6e05\u5355\u90fd\u7531\u4e94\u4e2a\u90e8\u5206\u7ec4\u6210: 1. apiVersion: group/version (kubectl api-versions\uff0c\u7701\u7565\u6389\u7ec4\u7684\u8bdd\u5c31\u662fcore\u7c7b\u578b\u7684\u6838\u5fc3\u7ec4) 2. kind: \u8d44\u6e90\u7c7b\u578b\uff0c\u5206\u4e3a\u5bf9\u8c61\u7c7b(Pod\u3001Namespace\u3001Depolyment\u7b49)\u3001\u5217\u8868\u7c7b(PodList\u3001NamespaceList)\u3001\u7b80\u5355\u7c7b 3. metadata: 1. name 2. namespace 3. labels 4. annotations 5. selflink: /api/GROUP/VERSION/namespaces/NAMESPACE/TYPE/NAME 4. spec: \u5b9a\u4e49\u671f\u671b\u7684\u72b6\u6001\uff0cdisired state (kubectl explain pods) 5. status: \u5f53\u524d\u72b6\u6001\uff0ccurrent state\uff0c\u672c\u5b57\u6bb5\u7531kubernetes\u96c6\u7fa4\u7ef4\u62a4 \u901a\u8fc7kubectl explain TYPE\u6765\u67e5\u770b\u8d44\u6e90\u5b9a\u4e49\u7684\u63cf\u8ff0\uff0c\u53ef\u4ee5\u5d4c\u5957\u67e5\u8be2kubectl explan TYPE.spec.xxx Example: apiVersion: v1 kind: Pod metadata: name: pod-demo namespace: default labels: app: myapp tier: fronted spec: containers: - name: myapp image: ikubernetes/myapp:v1 - name: busybox image: busybox:latest command: - \"bin/sh\" - \"-c\" - \"echo $(date) >> /tmp/txt; sleep 5\" attach\u5230\u5bb9\u5668\u4e2d kubectl exec -it POD -c CONTAINER -- cmd","title":"\u8d44\u6e90\u5b9a\u4e49"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/kubernetes/basic/#pod","text":"sepc.containers: <[]Object> - name image imagePullPolicy (Always(\u603b\u662f\u4e0b\u8f7d)\u3001Never(\u603b\u662f\u4f7f\u7528\u672c\u5730)\u3001IfNotPresent(\u5982\u679c\u672c\u5730\u6709\u5c31\u4f7f\u7528\uff0c\u5426\u5219\u5c31\u8fdc\u7a0b\u62c9)) \u5982\u679c\u6807\u7b7e\u662flatest\u5c31\u662fAlways\uff0c\u5426\u5219\u5c31\u662fIfNotPresent (\u4e0d\u80fd\u52a8\u6001\u66f4\u65b0) lifecycle: postStart: // \u5bb9\u5668\u542f\u52a8\u540e(ENTRYPOINT\u6267\u884c\u4e4b\u540e)\u7acb\u523b\u6267\u884c\u7684\u52a8\u4f5c\uff0c\u662f\u5f02\u6b65\u7684\uff0c\u5bb9\u5668\u7ee7\u7eed\u542f\u52a8 exec: command: [xxxx] preStop: // \u5bb9\u5668\u88ab\u6740\u6b7b\u4e4b\u524d\uff0c\u662f\u540c\u6b65\u7684\uff0c\u4f1a\u963b\u585e\u5f53\u524d\u5bb9\u5668\u6740\u6b7b\u7684\u6d41\u7a0b exec: command: [xxxx] ports: <[]Object> \u5bb9\u5668\u66b4\u9732\u7684\u7aef\u53e3\uff0c\u53ea\u662f\u4fe1\u606f\u66b4\u9732\uff0c\u901a\u8fc7yaml\u77e5\u9053\u8fd9\u4e2a\u5e94\u7528\u66b4\u9732\u4e86\u54ea\u4e9b\u7aef\u53e3 containerPort: hostIP: hostPort: name: protocol: \u9ed8\u8ba4TCP args: <[]string> \u5411entrypoint\u4f20\u9012\u53c2\u6570\uff0c\u4ee3\u66ff\u955c\u50cf\u4e2d\u7684CMD\u53c2\u6570 command: <[]string> \u76f8\u5f53\u4e8eentrypoint\uff0c\u662f\u4e0d\u4f1a\u8fd0\u884c\u5728shell\u4e2d\u7684\uff0c\u5982\u679c\u4e0d\u63d0\u4f9b\u5c31\u8fd0\u884c\u955c\u50cf\u4e2d\u7684entrypoint spec <[]Object> nodeSelector: \u9009\u62e9\u8981\u8fd0\u884c\u5728\u54ea\u7c7bnode\u4e0a nodeName: \u6307\u5b9a\u8981\u8fd0\u884c\u7684node\u673a\u5668\u4e0a hostPID: hostIPC: hostAliases: // \u5b9a\u4e49pod\u4e2d\u7684hosts\u6587\u4ef6\u91cc\u7684\u5185\u5bb9 - ip: \"10.1.2.3\" hostnames: - \"foo.remote\" - \"bar.remote\" shareProcessNamespace: true //\u5171\u4eabPID namespace hostNetwork: restartPolicy: Always(\u5931\u8d25\u540e\u4f1a\u4e0d\u65ad\u91cd\u65b0\u521b\u5efapod)\u3001OnFailure(\u542f\u52a8\u5931\u8d25\u540e\uff0c\u4f1a\u4e0d\u65ad\u91cd\u542fpod\u4e2d\u7684\u5bb9\u5668)\u3001Never\u3001Default to Always env: -name: value: metadata: annotations: \u7c7b\u4f3clabels\uff0c\u4e0d\u80fd\u7528\u4e8e\u6311\u9009\u8d44\u6e90\u5bf9\u8c61\uff0c\u4ec5\u7528\u4e8e\u4e3a\u5bf9\u8c61\u63d0\u4f9b\"\u5143\u6570\u636e\" Pod\u751f\u547d\u5468\u671f: 1. \u4e32\u884c\u6267\u884c\u591a\u4e2ainit\u521d\u59cb\u5316\u5bb9\u5668 2. \u4e3b\u5bb9\u5668\u8fd0\u884c 3. post start\uff0c\u4e3b\u5bb9\u5668\u8fd0\u884c\u540e\u53ef\u4ee5\u6267\u884c\u7684hook 4. pre stop \u4e3b\u5bb9\u5668\u9000\u51fa\u524d\u53ef\u4ee5\u6267\u884c\u7684hook 5. \u5b58\u6d3b\u72b6\u6001\u68c0\u6d4b liveness probe 6. \u670d\u52a1\u53ef\u7528\u72b6\u6001\u68c0\u6d4b readiess probe POD\u5e76\u4e0d\u652f\u6301\u539f\u5730\u66f4\u65b0\uff0c\u9700\u8981\u6709Deployment\u6765\u652f\u6301 \u72b6\u6001: 1. Pending // YAML\u6587\u4ef6\u63d0\u4ea4\u7ed9k8s\u997f\uff0cAPI\u5bf9\u8c61\u5df2\u7ecf\u521b\u5efa\u5e76\u4fdd\u5b58\u5728Etcd\u4e2d\uff0c\u4f46\u662fPod\u91cc\u9762\u6709\u4e9b\u5bb9\u5668\u56e0\u4e3a\u67d0\u79cd\u539f\u56e0\u4e0d\u80fd\u88ab\u987a\u5229\u521b\u5efa\u3002 2. Running // Pod\u5df2\u7ecf\u8c03\u5ea6\u6210\u529f\uff0c\u8ddf\u4e00\u4e2a\u5177\u4f53\u7684\u8282\u70b9\u7ed1\u5b9a\uff0c\u5b83\u5305\u542b\u7684\u5bb9\u5668\u90fd\u5df2\u7ecf\u521b\u5efa\u6210\u529f\u4e86\uff0c\u5e76\u4e14\u81f3\u5c11\u6709\u4e00\u4e2a\u6b63\u5728\u8fd0\u884c\u4e2d 3. Failed // Pod\u91cc\u9762\u81f3\u5c11\u6709\u4e00\u4e2a\u5bb9\u5668\u4ee5\u4e0d\u6b63\u5e38\u7684\u72b6\u6001(\u975e0\u7684\u8fd4\u56de\u7801)\u9000\u51fa\uff0c\u8fd9\u4e2a\u72b6\u6001\u7684\u51fa\u73b0\uff0c\u610f\u5473\u7740\u4f60\u5f97\u60f3\u529e\u6cd5Debug\u8fd9\u4e2a\u5bb9\u5668\u7684\u5e94\u7528\u3002 4. Succeeded // Pod\u91cc\u9762\u6240\u6709\u7684\u5bb9\u5668\u90fd\u6b63\u5e38\u8fd0\u884c\u5b8c\u6bd5\u4e86\uff0c\u5e76\u4e14\u5df2\u7ecf\u9000\u51fa\u4e86\u3002 5. Unknown // \u4e00\u4e2a\u5f02\u5e38\u7684\u72b6\u6001\uff0cPod\u7684\u72b6\u6001\u4e0d\u80fd\u6301\u7eed\u88abkubelet\u6c47\u62a5\u7ed9kube-apiserver\uff0c\u53ef\u80fd\u662f\u4e3b\u8282\u70b9master\u548ckubelet\u95f4\u7684\u901a\u4fe1\u51fa\u73b0\u4e86\u95ee\u9898 \u8fdb\u4e00\u6b65\u53c8\u53ef\u4ee5\u7ec6\u5206: PodScheduled\u3001Ready\u3001Initialized\uff0c\u4ee5\u53ca Unschedulable\uff0c\u7528\u6765\u63cf\u8ff0\u9020\u6210\u5f53\u524dStatus\u7684\u5177\u4f53\u539f\u56e0\u662f\u4ec0\u4e48? \u53ea\u8981Pod\u7684restartPolicy\u6307\u5b9a\u7684\u7b56\u7565\u5141\u8bb8\u91cd\u542f\u5f02\u5e38\u7684\u5bb9\u5668(\u6bd4\u5982: Always)\uff0c\u90a3\u4e48\u8fd9\u4e2aPod\u5c31\u4f1a\u4fdd\u6301Running\u72b6\u6001\uff0c\u5e76\u8fdb\u884c\u5bb9\u5668\u91cd\u542f\uff0c\u5426\u5219\u5c31\u4f1a\u8fdb\u7a0bFailed\u72b6\u6001 \u5bf9\u4e8e\u5305\u542b\u591a\u4e2a\u5bb9\u5668\u7684Pod\uff0c\u53ea\u6709\u5b83\u91cc\u9762\u6240\u6709\u7684\u5bb9\u5668\u90fd\u8fdb\u7a0b\u5f02\u5e38\u72b6\u6001\u540e\uff0cPod\u624d\u4f1a\u8fdb\u7a0bFailed\u72b6\u6001\uff0c\u5728\u6b64\u4e4b\u524dPod\u90fd\u662fRunning\u72b6\u6001\u3002\u6b64\u65f6Pod\u7684READY\u5b57\u6bb5\u4f1a\u663e\u793a\u6b63\u5e38\u5bb9\u5668\u7684\u4e2a\u6570 1 2 3 4 5 Image Entrypoint|Image Cmd|Container command|Container args|Command run [/ep-1] [foo bar] <not set> <not set> [ep-1 foo bar] [/ep-1] [foo bar] [/ep-2] <not set> [ep-2] [/ep-1] [foo bar] <not set> [zoo boo] [ep-1 zoo boo] [/ep-1] [foo bar] [/ep-2] [zoo boo] [ep-2 zoo boo] kubectl get pods --show-labels \u663e\u793a\u8d44\u6e90\u7684labels kubectl get pods -L app \u663e\u793a\u8d44\u6e90\u5bf9\u8c61\u7684\u65f6\u5019\uff0c\u663e\u793a\u5177\u6709app\u6807\u7b7e\u7684\u6807\u7b7e\u503c kubectl get pods -l app \u53ea\u663e\u793a\u542b\u6709app\u6807\u7b7e\u7684\u8d44\u6e90 kubectl label TYPE NAME LABEL\uff0c\u7ed9TYPE\u7c7b\u578b\u7684\u8d44\u6e90\u4e2d\u540d\u4e3aNAME\u7684\u8d44\u6e90\u8fdb\u884c\u6253\u6807 \u6807\u7b7e\u9009\u62e9\u5668: 1. \u7b49\u503c\u5173\u7cfb =, ==, != 2. \u96c6\u5408\u5173\u7cfb 1. KEY in (VALUE...) 2. KEY notin (VALUE...) 3. KEY 4. !KEY \u8bb8\u591a\u8d44\u6e90\u652f\u6301\u5185\u5d4c\u5b57\u6bb5\u5b9a\u4e49\u5176\u4f7f\u7528\u7684\u6807\u7b7e\u9009\u62e9\u5668: 1. matchLabels 2. matchExpressions \u63a2\u9488\u7c7b\u578b(livenessProbe\u3001readynessProb\u3001lifecyle): 1. ExecAction 2. TcpSocketAction 3. HTTPGetAction lifecyle\u542b\u6709postStart\u548cpreStop\u4e24\u4e2ahook Projected Volume \u6295\u5c04\u6570\u636e\u5377\uff0c\u662f\u4e3a\u5bb9\u5668\u63d0\u4f9b\u7684\u9884\u5148\u5b9a\u4e49\u597d\u7684\u6570\u636e Secret // \u52a0\u5bc6\u7684key/value\u6570\u636e ConfigMap // \u4e0d\u52a0\u5bc6\u7684\u914d\u7f6e\u6570\u636e Downward API // \u53ef\u4ee5\u5f15\u7528pod\u4e2d\u7684\u5143\u4fe1\u606f(\u6bd4\u5982label\u3001nodename\u3001hostIp\u3001namespace\u3001podip\u3001uid\u3001annotations\u7b49\u7b49) ServiceAccountToken // \u672c\u8d28\u4e0a\u662f\u4e00\u79cd\u7279\u6b8a\u7684Secret PodPreset\u7528\u4e8e\u7ed9\u5f00\u53d1\u4eba\u5458\u5199\u7684pod\u6dfb\u52a0\u4e00\u4e9b\u9884\u8bbe\u7684\u5b57\u6bb5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 apiVersion: settings.k8s.io/v1alpha1 kind: PodPreset metadata: name: allow-database spec: selector: matchLabels: role: frontend env: - name: DB_PORT value: \"6379\" volumeMounts: - mountPath: /cache name: cache-volume volumes: - name: cache-volume emptyDir: {}","title":"Pod\u8d44\u6e90"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/kubernetes/basic/#_3","text":"ReplicationController: \u5df2\u7ecf\u5e9f\u5f03 ReplicaSet: \u81ea\u52a8\u6269\u7f29\u5bb9 Deployment: \u63a7\u5236ReplicaSet\u6765\u95f4\u63a5\u7684\u63a7\u5236pods DaemonSet: Job: Crontab: StatefulSet","title":"\u63a7\u5236\u5668"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/kubernetes/basic/#replicaset","text":"spec: replicas: \u526f\u672c\u6570\u91cf selector: \u9009\u62e9pod matchLabels: LABEL template: \u5bb9\u5668\u6a21\u7248 metadata: name: labels: \u548c\u4e0a\u9762\u7684\u6807\u7b7e\u9009\u62e9\u5668\u8981\u4e00\u81f4 LABEL spec: containers: -name: image: ports: -name: containerPort","title":"ReplicaSet"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/kubernetes/basic/#deployment","text":"\u66f4\u65b0\u7684\u7c92\u5ea6(\u4e00\u6279\u66f4\u65b0\u591a\u5c11) \u66f4\u65b0\u7684\u8fc7\u7a0b\u662f\u5426\u5141\u8bb8\u8d85\u8fc7\u671f\u671b\u7684Pod\u6570\u91cf \u7070\u5ea6\u8fc7\u7a0b\u4e2d\u5360\u505c \u84dd\u8272\u90e8\u7f72 \u56de\u6eda example: apiVersion: apps/v1 kind: Deployment metadata: name: demo namespace: default labels: annotations: spec: replicas: 2 rollingUpdatesStrategy: strategy: \u66f4\u65b0\u7b56\u7565 rollingUpdate: maxSurge : \u6700\u591a\u53ef\u8d85\u8fc7\u7684\u5bb9\u5668\u6570\u91cf/\u6bd4\u4f8b maxUnavailable: \u6700\u591a\u4e0d\u53ef\u7528\u7684\u5bb9\u5668\u6570\u91cf type: Recreate|RollingUpdate revisionHistoryLimit: \u4fdd\u5b58\u7684\u5386\u53f2\u7248\u672c\u6570\u91cf selector: matchLabels: LABEL template: \u5bb9\u5668\u6a21\u7248 metadata: name: labels: LABEL spec: -name: image: ports: -name: containerPort CDR(Custom Defined Resources) 1.8+ Operator Helm \u7c7b\u4f3c\u4e8eYum kubectl apply \u58f0\u660e\u5f0f\uff0c\u540c\u4e00\u4efdyaml\u53ef\u4ee5apply\u591a\u6b21\uff0c\u6bcf\u6b21\u90fd\u4f1a\u8bb0\u5f55\u5728annotations\u4e2d kubectl get pods -w \u52a8\u6001\u76d1\u63a7 kubectl set image TYPE NAME=IMAGE-NAME kubectl rollout pause TYPE NAME \u505c\u6b62 kubectl rollout resume TYPE NAME \u6062\u590d kubectl rollout history TYPE NAME \u67e5\u770b\u66f4\u65b0\u5386\u53f2 kubectl rollout undo \u56de\u6eda kubectl patch TYPE -p '{}' kubectl rollout history TYPE NAME \u67e5\u770b\u56de\u6eda\u7684revision kubectl rollout undo TYPE NAME --to-revision=REVISION_NAME","title":"Deployment"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/kubernetes/basic/#daemonset","text":"DaemonSet\u5728\u5b9e\u73b0\u7684\u65f6\u5019\u4f1a\u7ed9\u6bcf\u4e00\u4e2aPod\u52a0\u4e0a\u4e00\u4e2anodeAddinity\u4ece\u800c\u4fdd\u8bc1\u8fd9\u4e2aPod\u53ea\u4f1a\u5728\u6307\u5b9a\u7684\u8282\u70b9\u4e0a\u542f\u52a8 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 apiVersion : apps/v1 kind : DaemonSet metadata : name : fluentd-elasticsearch namespace : kube-system labels : k8s-app : fluentd-logging spec : selector : matchLabels : name : fluentd-elasticsearch template : metadata : labels : name : fluentd-elasticsearch spec : # \u9700\u8981\u6709\u4e00\u4e2a\u5bb9\u5fcd\u7684\u6c61\u70b9\uff0c\u53ef\u4ee5\u5728master\u4e0a\u5b89\u88c5\uff0c\u9ed8\u8ba4master\u662f\u4e0d\u4f1a\u8fdb\u884cpod\u8c03\u5ea6\u7684\u3002 # \u5f53\u4e00\u4e2a\u8282\u70b9\u6ca1\u6709\u5b89\u88c5\u7f51\u7edc\u63d2\u4ef6\u4f1a\u88ab\u8bbe\u7f6enode.kubernetes.io/network-unavailable\u6c61\u70b9 # \u6240\u4ee5\u5728\u5b89\u88c5\u7f51\u7edcagent\u63d2\u4ef6\u7684\u65f6\u5019\uff0c\u9700\u8981\u5bb9\u5fcd\u8fd9\u4e2a\u6c61\u70b9 tolerations : - key : node-role.kubernetes.io/master effect : NoSchedule containers : - name : fluentd-elasticsearch image : k8s.gcr.io/fluentd-elasticsearch:1.20 resources : limits : memory : 200Mi requests : cpu : 100m memory : 200Mi volumeMounts : - name : varlog mountPath : /var/log - name : varlibdockercontainers mountPath : /var/lib/docker/containers readOnly : true terminationGracePeriodSeconds : 30 volumes : - name : varlog hostPath : path : /var/log - name : varlibdockercontainers hostPath : path : /var/lib/docker/containers","title":"DaemonSet"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/kubernetes/basic/#service","text":"userspace: \u5148\u5230service ip\uff0c\u7136\u540e\u8f6c\u5230node\u4e0a\u7684kube-proxy\uff0c\u7531kube-proxy\u5411\u540e\u8f6c\u53d1 iptables: \u76f4\u63a5iptables\u8f6c\u53d1\uff0c\u4e0d\u9700\u8981kube-proxy ipvs: apiVersion: v1 kind: Service metadata: name: redis namespace: default spec: ports: name: nodePort: \u5728\u96c6\u7fa4\u5916\u88ab\u8bbf\u95ee\u7684port\uff0c\u9ed8\u8ba4\u4f1a\u81ea\u52a8\u5206\u914d\u7684 port: service ip\u4e0a\u7684port protocol: targetPort: \u5bb9\u5668\u4e2d\u7684port selector: externalName: ExternName\u7c7b\u578b: CNAME\u8bb0\u5f55\uff0c\u53ef\u4ee5\u88ab\u4e92\u8054\u7f51\u771f\u6b63\u89e3\u6790\u7684\uff0c\u7528\u4e8e\u8bbf\u95ee\u5916\u90e8\u670d\u52a1\uff0c\u5c06\u5916\u90e8\u670d\u52a1\u7684\u540d\u79f0\u6620\u5c04\u5230\u5185\u90e8\u670d\u52a1 clusterIP: \"None\"\u8868\u793aheadless\u7684\u670d\u52a1\uff0c\u670d\u52a1\u540d\u76f4\u63a5\u89e3\u6790\u4e3a\u540e\u7aef\u5bf9\u5e94\u7684pod sessionAddinity: None|ClientIP \u6839\u636e\u6e90IP\u6765\u8d1f\u8f7d\u5747\u8861\uff0c\u4fdd\u6301\u4f1a\u8bdd\u7c98\u6027 type: ExternName(CNAME\uff0c\u6307\u5411\u771f\u6b63\u7684FQDN), ClusterIP, NodePort, LoadBlancer Servive -> EndPoint\u8d44\u6e90\u5bf9\u8c61 -> Pod \u8d44\u6e90\u8bb0\u5f55: SVC_NAME.NS_NAME.DOMAIN.LTD (svc.cluster.local.)","title":"Service"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/kubernetes/basic/#ingress","text":"ingress controller\u548cDeployment\u4e0d\u76f8\u540c\uff0c\u4e0d\u5b58\u5728controller manager\uff0c\u662f\u72ec\u7acb\u5b58\u5728\u7684POD\u8d44\u6e90 /etc/sysconfig/kubelet \u6dfb\u52a0 KUBE_PROXY_MODE=ipvs \u6765\u8bbe\u7f6ekube-proxy\u7684\u5de5\u4f5c\u6a21\u5f0f\u4e3aIPVS ingress pod\u53ef\u4ee5\u76f4\u63a5\u590d\u7528\u5bbf\u4e3b\u673a\u5730\u5740\uff0c\u907f\u514dnodeIp:nodePort\u5230clusterIP:servicePort\u7684\u8f6c\u6362 1 2 kubectl create namespace xxx kubectl delete namespace xxx example: apiVersion: extensions/v1beta1 kind: Ingress metadata: name: xxx namespace: default annotations: kubernetes.io/ingress.class: \"nginx\" spec: backend: \u9ed8\u8ba4 serviceName: servivcePort: tls: hosts: - xxxx - xxxx secretName: rules: host: http paths: - path backend: serviceName: servicePort: \u81ea\u7b7e\u8bc1\u4e66: openssl genrsa -out tls.key 2048 openssl req -new -x509 -key tls.key -out tls.crt -subj /C=CN/ST=Beijijng/L=xxxxxx \u521b\u5efasecret\u5bf9\u8c61: kubectl create secret tls NAME --cert=PATH --key=PATH","title":"Ingress"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/kubernetes/basic/#_4","text":"emptyDir hostPath SAN(iSCSI)\u3001NAS\u3001\u5206\u5e03\u5f0f\u5b58\u50a8(glusterfs\u3001ceph-rdb\u3001cephfs)\u3001\u4e91\u5b58\u50a8(EBS\u3001OSS\u3001Azure Disk) example: \u57fa\u4e8e\u5bbf\u4e3b\u673a\u6765\u5171\u4eab\u5b58\u50a8 apiVersion: v1 kind: Pod metadata: name: NAME namespace: NAMESPACE spec: containers: - name image: volumeMounts: - name: mountPath: volumes: -name: hostPath: path: type: DirectoryOrCreate PVC: \u5c01\u88c5\u5b58\u50a8\u7684\u7ec6\u8282\uff0c\u4e5f\u662fk8s\u4e2d\u7684\u4e00\u4e2a\u8d44\u6e90 spec: accessModes: \u662fPV\u7684\u5b50\u96c6 resources: requests: storage: selector: strageClassName: volumeMode: volumeName: PV: apiVersion: v1 kind: PersistentVolume metadata: spec: \u548cpods.spec.volumes\u76f8\u540c reclamPolicy: retain\u3001recyle\u3001delete accessModes: capacity: storage: 20Gi PVC\u6839\u636erequests\u6765\u9009\u62e9PV\uff0cPV\u7684\u5927\u5c0f\u662f\u4e8b\u5148\u5206\u914d\u597d\u7684\u3002 PVC\u5982\u4f55\u8fdb\u884c\u52a8\u6001\u7684\u521b\u5efaPV\u5462? Dynamic Provisioning PVC\u627e\u5230StorageClass StorageClass\u5b58\u50a8\u63d2\u4ef6\u521b\u5efaPV \u914d\u7f6e\u5bb9\u5668\u5316\u5e94\u7528\u7684\u65b9\u5f0f: \u81ea\u5b9a\u4e49\u547d\u4ee4\u884c\u53c2\u6570 \u628a\u914d\u7f6e\u6587\u4ef6\u76f4\u63a5\u653e\u8fdb\u955c\u50cf \u73af\u5883\u53d8\u91cf spec.containers.env \u5b58\u50a8\u5377","title":"\u5b58\u50a8\u5377"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/kubernetes/basic/#configmap","text":"\u73af\u5883\u53d8\u91cf \u76f4\u63a5\u5f53\u4f5c\u5b58\u50a8\u5377 apiVersion: binaryData: data: kind: metadata: kubectl create configmap NAME --from-file|--from-literal=KEY=VALUE kubectl get cm kubectl describe cm NAME pods.spec.containers.env.valueFrom.configMapKeyRef.{name, key, optional} \u53ea\u5728\u542f\u52a8\u7684\u65f6\u5019\u6709\u6548 pods.spec.containers.volumes.item \u6307\u5b9a\u54ea\u4e9bkey\u88ab\u6302\u8f7d","title":"ConfigMap"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/kubernetes/basic/#secret","text":"docker registers general tls","title":"secret"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/kubernetes/basic/#stateful","text":"\u7a33\u5b9a\u4e14\u552f\u4e00\u7684\u7f51\u7edc\u6807\u8bc6\u7b26 \u7a33\u5b9a\u4e14\u6301\u4e45\u7684\u5b58\u50a8 \u6709\u5e8f\u3001\u5e73\u6ed1\u5730\u90e8\u7f72\u548c\u6269\u5c55 \u6709\u5e8f\u3001\u5e73\u6ed1\u5730\u5220\u9664\u548c\u7ec8\u6b62 \u6709\u5e8f\u7684\u6eda\u52a8\u66f4\u65b0 \u4e09\u4e2a\u7ec4\u4ef6: headless service\u3001StatefulSet\u3001volumeClaimTemplate \u540d\u79f0\u89e3\u6790: pod_name.service_name.ns_name.svc.cluster.local","title":"stateful"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/kubernetes/basic/#controllerrevision","text":"\u4e13\u95e8\u8bb0\u5f55\u67d0\u79cdcontroller\u5bf9\u8c61\u7684\u7248\u672c\uff0c\u50cfstatefulset\u3001daemonset\u7684\u7248\u672c\u90fd\u662f\u901a\u8fc7\u8fd9\u4e2a\u5bf9\u8c61\u6765\u7ba1\u7406\u7684 \u8fd9\u4e2a\u5bf9\u8c61\u7684Data\u5b57\u6bb5\u4fdd\u5b58\u4e86\u8be5\u7248\u672c\u5bf9\u5e94\u7684\u5b8c\u6574\u7684DaemonSet\u7684API\u5bf9\u8c61\uff0c\u5e76\u4e14\u5728Annotation\u5b57\u6bb5\u4fdd\u5b58\u4e86\u521b\u5efa\u8fd9\u4e2a\u5bf9\u8c61\u6240\u4f7f\u7528\u7684kubectl \u547d\u4ee4","title":"controllerrevision"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/kubernetes/basic/#job-cronjob","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 apiVersion : batch/v1 kind : Job metadata : name : pi spec : # \u8981\u5904\u7406\u7684\u4efb\u52a1\u6570\u76ee\u662f8 completions : 8 # \u540c\u65f6\u6267\u884c\u7684\u4efb\u52a1\u6570\u662f2 parallelism : 2 template : spec : containers : - name : pi image : resouer/ubuntu-bc command : [ \"sh\" , \"-c\" , \"echo 'scale=10000; 4*a(1)' | bc -l\" ] restartPolicy : Never # \u6700\u5927\u91cd\u8bd5\u6b21\u65704\u6b21(\u5f53\u4efb\u52a1\u6267\u884c\u5931\u8d25\u7684\u65f6\u5019\u8fdb\u884c\u91cd\u8bd5) backoffLimit : 4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 apiVersion : batch/v1beta1 kind : CronJob metadata : name : hello spec : # 1. concurrencyPolicy=Allow\uff0c\u8fd9\u4e5f\u662f\u9ed8\u8ba4\u60c5\u51b5\uff0c\u8fd9\u610f\u5473\u7740\u8fd9\u4e9b Job \u53ef\u4ee5\u540c\u65f6\u5b58\u5728; # 2. concurrencyPolicy=Forbid\uff0c\u8fd9\u610f\u5473\u7740\u4e0d\u4f1a\u521b\u5efa\u65b0\u7684 Pod\uff0c\u8be5\u521b\u5efa\u5468\u671f\u88ab\u8df3\u8fc7; # 3. concurrencyPolicy=Replace\uff0c\u8fd9\u610f\u5473\u7740\u65b0\u4ea7\u751f\u7684 Job \u4f1a\u66ff\u6362\u65e7\u7684\u3001\u6ca1\u6709\u6267\u884c\u5b8c\u7684 Job\u3002 concurrencyPolicy : Forbid # \u610f\u5473\u7740\u5728\u8fc7\u53bb 200 s \u91cc\uff0c\u5982\u679c miss \u7684\u6570\u76ee\u8fbe\u5230\u4e86 100 \u6b21\uff0c \u90a3\u4e48\u8fd9\u4e2a Job \u5c31\u4e0d\u4f1a\u88ab\u521b\u5efa\u6267\u884c\u4e86\u3002 startingDeadlineSeconds : 200 schedule : \"*/1 * * * *\" jobTemplate : spec : template : spec : containers : - name : hello image : busybox args : - /bin/sh - -c - date; echo Hello from the Kubernetes cluster restartPolicy : OnFailure","title":"Job &amp;&amp; CronJob"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/kubernetes/basic/#admission-controllers","text":"API\u5bf9\u8c61\u88ab\u63d0\u4ea4\u7ed9ApiServer\u540e\u505a\u7684\u4e00\u7cfb\u5217\u64cd\u4f5c\u88ab\u79f0\u4e3aAdmission Controllers\uff0c\u9700\u8981\u7ed9ApiServer\u7f16\u5199\u4ee3\u7801\u6765\u5b9e\u73b0\u529f\u80fd\uff0c\u9ed8\u8ba4ApiServer\u63d0\u4f9b\u4e86 \u8bb8\u591aAdmission Controllers\u63d2\u4ef6\uff0c\u4f46\u662f\u4ecd\u7136\u6ca1\u529e\u6cd5\u6ee1\u8db3\u4e00\u4e9b\u9700\u6c42\uff0c\u800c\u4e14\u6bcf\u6b21\u65b0\u589e\u63d2\u4ef6\u90fd\u9700\u8981\u91cd\u542f\u3002\u56e0\u6b64\u6709\u4e86Dynamic Admission Controllers\uff0c\u53ef\u4ee5\u70ed\u63d2\u62d4\u3002 Initializer\u63d2\u4ef6\u5c31\u662f\u5176\u4e2d\u4e00\u79cd\uff0c\u5728v1alpha1\u4e2d\u5b58\u5728\uff0c\u9ed8\u8ba4\u662fdisabled\u7684\u3002","title":"Admission Controllers"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/kubernetes/basic/#api","text":"\u4e00\u4e2aAPI\u5bf9\u8c61\u5728Etcd\u4e2d\u7684\u5b8c\u6574\u8d44\u6e90\u8def\u5f84: Group + Version + Resource\u7ec4\u6210 \u9ed8\u8ba4\u6838\u5fc3\u7ec4: /api\uff0c\u67e5\u627e\u7684\u65f6\u5019\u9ed8\u8ba4\u7701\u7565\uff0c\u6bd4\u5982Pod\u3001Node\u7b49\uff0c\u975e\u6838\u5fc3\u7684API\u5bf9\u8c61\u5219\u5728/apis\u8fd9\u4e2a\u5c42\u7ea7\u67e5\u627e \u4e00\u4e2a\u5bf9\u8c61\u63d0\u4ea4\u5230ApiServer\u7684\u5b8c\u6574\u8fc7\u7a0b: 1. \u53d1\u8d77POST\u8bf7\u6c42\uff0c\u53d1\u9001yaml\u5230ApiServer\u4e2d 2. \u8fc7\u6ee4\u8bf7\u6c42(\u6388\u6743\u3001\u8d85\u65f6\u3001\u5ba1\u8ba1) 3. Mux\u3001Routes 4. \u8f6c\u6362\u6210Super Version(API\u8d44\u6e90\u7c7b\u578b\u7684\u6240\u6709\u7248\u672c\u7684\u5168\u5b57\u6bb5\u5168\u96c6) 5. Admission\u548cValidation","title":"\u58f0\u660e\u5f0fAPI"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/kubernetes/basic/#crd","text":"\u4e00\u4e2aCRD\u8d44\u6e90\u5bf9\u8c61\uff0c\u8d44\u6e90\u7c7b\u578b\u662fNetwork\uff0c\u7ec4\u662fsamplecrd.k8s.io\uff0c\u7248\u672c\u662fv1 1 2 3 4 5 6 7 apiVersion : samplecrd.k8s.io/v1 kind : Network metadata : name : example-network spec : cidr : \"192.168.0.0/16\" gateway : \"192.168.0.1\" \u8d44\u6e90\u63cf\u8ff0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 apiVersion : apiextensions.k8s.io/v1beta1 kind : CustomResourceDefinition metadata : # \u8d44\u6e90\u540d(\u590d\u6570\u5f62\u5f0f).\u7ec4\u540d name : networks.samplecrd.k8s.io spec : # \u7ec4\u540d group : samplecrd.k8s.io # \u7248\u672c version : v1 names : # \u8d44\u6e90\u540d kind : Network # \u590d\u6570 plural : networks # \u4f5c\u7528\u57df scope : Namespaced \u64cd\u4f5cCRD\u8d44\u6e90: \u76ee\u5f55\u7ed3\u6784 1 2 3 4 5 6 7 8 9 10 11 12 13 14 controller.go crd network.yaml # CRD\u6587\u4ef6 example example-network # Network\u8d44\u6e90\u6587\u4ef6 main.go pkg apis samplecrd register.go v1 doc.go register.go types.go pkg/apis/samplecrd/register.go \u4e00\u4e9b\u5168\u5c40\u53d8\u91cf\u7684\u5b9a\u4e49\uff0c\u5b9a\u4e49GroupName\u3001Version\u7b49 1 2 3 4 5 6 package samplecrd const ( GroupName = \"samplecrd.k8s.io\" Version = \"v1\" )","title":"CRD"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/kubernetes/basic/#rbac","text":"Role: \u89d2\u8272\uff0c\u5b83\u5176\u5b9e\u5c31\u662f\u4e00\u7ec4\u89c4\u5219\uff0c\u5b9a\u4e49\u4e00\u7ec4\u5bf9Kubernetes API\u5bf9\u8c61\u7684\u64cd\u4f5c\u6743\u9650 Subject: \u88ab\u4f5c\u7528\u8005\uff0c \u65e2\u53ef\u4ee5\u662f\u4eba\u3001\u4e5f\u53ef\u4ee5\u662f\u673a\u5668\uff0c\u4e5f\u53ef\u4ee5\u662f\u4f60\u5728Kubernetes\u91cc\u5b9a\u4e49\u7684 \"\u7528\u6237\" RoleBinding: \u5b9a\u4e49\u4e86\u4f5c\u7528\u8005\u548c\u89d2\u8272\u7684\u7ed1\u5b9a\u5173\u7cfb ClusterRole\u548cClusterRoleBinding\u4f5c\u7528\u4e8e\u6574\u4e2a\u96c6\u7fa4\uff0c\u5728metadata\u4e2d\u4e0d\u9700\u8981\u6307\u5b9anamespace 1 2 3 4 5 6 7 8 9 kind : Role apiVersion : rbac.authorization.k8s.io/v1 metadata : namespace : mynamespace name : example-role rules : # \u9650\u5236\u54ea\u4e2aapi\u3001\u54ea\u4e2a\u8d44\u6e90\u7c7b\u578b\u3001\u5141\u8bb8\u7684\u64cd\u4f5c\u3002 - apiGroups : [ \"\" ] resources : [ \"pods\" ] verbs : [ \"get\" , \"watch\" , \"list\" ] \u5c06role\u7ed1\u5b9a\u5230k8s\u4e2d\u7684User 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 kind : RoleBinding apiVersion : rbac.authorization.k8s.io/v1 metadata : name : example-rolebinding namespace : mynamespace subjects : # \u6388\u6743\u7cfb\u7edf\u4e2d\u7684\u903b\u8f91\u6982\u5ff5\uff0c\u5b83\u9700\u8981\u901a\u8fc7\u5916\u90e8\u8ba4\u8bc1\u670d\u52a1\u6765\u8fdb\u884c\u6388\u6743 # \u8fd8\u53ef\u4ee5\u4f7f\u7528k8s\u7ba1\u7406\u7684\u5185\u7f6e\u7528\u6237\uff0c\u4e5f\u5c31\u662fServiceAccount - kind : User name : example-user # ? \u4e3a\u4ec0\u4e48\u8981\u52a0\u8fd9\u4e2aapiGroup # APIGroup holds the API group of the referenced subject. Defaults to \"\" for # ServiceAccount subjects. Defaults to \"rbac.authorization.k8s.io\" for User # and Group subjects. apiGroup : rbac.authorization.k8s.io # \u5f15\u7528role roleRef : kind : Role name : example-role apiGroup : rbac.authorization.k8s.io \u5bf9\u4e8eServiceCount\u6765\u8bf4\uff0ck8s\u4f1a\u7ed9\u6bcf\u4e00\u4e2aServiceCount\u81ea\u52a8\u521b\u5efa\u5e76\u5206\u914d\u4e00\u4e2aSecret\u5bf9\u8c61\u3002\u8fd9\u4e2a\u5bf9\u8c61\u5c31\u662f\u7528\u6765\u548cAPIServer\u8fdb\u884c\u4ea4\u4e92\u7684\u6388\u6743\u6587\u4ef6\uff0c\u4e00\u822c\u79f0\u4e3atoken \u7528\u6237\u7684POD\u53ef\u4ee5\u6307\u5b9a\u4f7f\u7528\u8fd9\u4e2aServiceCount\uff0c\u5426\u5219k8s\u4f1a\u628a\u4e00\u4e2a\u53ebdefault\u7684service count\u7ed1\u5b9a\u5230pod\u4e2d\u3002 1 2 3 4 5 6 7 8 9 10 apiVersion : v1 kind : Pod metadata : namespace : mynamespace name : sa-token-test spec : containers : - name : nginx image : nginx:1.7.9 serviceAccountName : example-sa \u4f7f\u7528ServiceCount Group 1 2 3 4 5 subjects : - kind : Group # system:serviceaccounts:<Namespace \u540d\u5b57> name : system:serviceaccounts:mynamespace apiGroup : rbac.authorization.k8s.io","title":"RBAC"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/kubernetes/basic/#_5","text":"Node\u4e0a\u90e8\u7f72logging agent\uff0c\u5c06\u65e5\u5fd7\u6587\u4ef6\u8f6c\u53d1\u5230\u540e\u7aef\u5b58\u50a8\u91cc\u9762\uff0c\u8981\u6c42\u5bb9\u5668\u4e2d\u7684\u5e94\u7528\u8f93\u51fa\u65e5\u5fd7\u5230stdout\u548cstderr SideCar\u5bb9\u5668\u5c06\u5e94\u7528\u5bb9\u5668\u4e2d\u7684\u65e5\u5fd7\u6587\u4ef6\u8f93\u51fa\u5230stdout\u548cstderr\uff0c\u7136\u540e\u518d\u6709logging agent\u91c7\u96c6 SideCar\u5bb9\u5668\u90e8\u7f72logging\u76f4\u63a5\u5c06\u5e94\u7528\u5bb9\u5668\u4ea7\u751f\u7684\u65e5\u5fd7\u6587\u4ef6\u91c7\u96c6\u5230\u8fdc\u7aef\u5b58\u50a8","title":"\u65e5\u5fd7\u6536\u96c6"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/kubernetes/tips/","text":"\u91cd\u542fdeployment\u4e0b\u7684pod kubectl rollout restart deployment DEPLOYMENT_NAME","title":"Tips"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/kubernetes/tips/#deploymentpod","text":"kubectl rollout restart deployment DEPLOYMENT_NAME","title":"\u91cd\u542fdeployment\u4e0b\u7684pod"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/leveldb/leveldb/","text":"Leveldb\u6e90\u7801\u5206\u6790 Skiplist Leveldb\u5185\u90e8\u7684Memtable\u5176\u6838\u5fc3\u5c31\u662fSkiplist\uff0c\u901a\u8fc7Skiplist\u6765\u5b58\u653e\u6240\u6709\u7684\u6570\u636e\uff0c\u9996\u5148\u6211\u4eec\u6765\u770b\u4e0bSkiplist\u7684\u7ed3\u6784\uff0c\u5982\u4e0b\u56fe: \u901a\u8fc7\u4e0a\u9762\u7684Skiplist\u7ed3\u6784\u53ef\u77e5\uff0c\u4e00\u4e2aSkiplist\u662f\u591a\u4e2a\u94fe\u8868\u7684\u96c6\u5408\uff0c\u6bcf\u4e00\u4e2a\u94fe\u8868\u90fd\u6709\u4e00\u4e2aheader\u6307\u9488\uff0c\u6307\u5411\u8fd9\u4e2a\u94fe\u8868\uff0cLeveldb\u4e2d\u4f7f\u7528\u4e00\u4e2a\u6570\u7ec4\u6765\u5b58\u50a8 \u6240\u6709\u7684\u94fe\u8868header. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 struct SkipList < Key , Comparator >:: Node { explicit Node ( const Key & k ) : key ( k ) {} Key const key ; // Accessors/mutators for links. Wrapped in methods so we can // add the appropriate barriers as necessary. Node * Next ( int n ) { assert ( n >= 0 ); // Use an 'acquire load' so that we observe a fully initialized // version of the returned Node. return next_ [ n ]. load ( std :: memory_order_acquire ); } void SetNext ( int n , Node * x ) { assert ( n >= 0 ); // Use a 'release store' so that anybody who reads through this // pointer observes a fully initialized version of the inserted node. next_ [ n ]. store ( x , std :: memory_order_release ); } // No-barrier variants that can be safely used in a few locations. Node * NoBarrier_Next ( int n ) { assert ( n >= 0 ); return next_ [ n ]. load ( std :: memory_order_relaxed ); } void NoBarrier_SetNext ( int n , Node * x ) { assert ( n >= 0 ); next_ [ n ]. store ( x , std :: memory_order_relaxed ); } private : // Array of length equal to the node height. next_[0] is lowest level link. // \u8fd9\u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u4f7f\u7528\u4e86C/C++\u4e2d\u7684\u67d4\u6027\u6570\u7ec4\u7684\u80fd\u529b\u3002 std :: atomic < Node *> next_ [ 1 ]; }; typename SkipList < Key , Comparator >:: Node * SkipList < Key , Comparator >:: NewNode ( const Key & key , int height ) { // \u6839\u636e\u6307\u5b9a\u7684\u9ad8\u5ea6\u5206\u914d\u6570\u7ec4\u3002 char * const node_memory = arena_ -> AllocateAligned ( sizeof ( Node ) + sizeof ( std :: atomic < Node *> ) * ( height - 1 )); return new ( node_memory ) Node ( key ); } \u8fd9\u4e2a\u94fe\u8868\u6570\u7ec4\u4e2d\u7684\u7b2c\u4e00\u4e2a\u94fe\u8868\u88ab\u79f0\u4e3aLevel0\uff0c\u901a\u8fc7\u8fd9\u4e2a\u94fe\u8868\u53ef\u4ee5\u904d\u5386\u6240\u6709\u7684\u6570\u636e\uff0cLevele1\u4ee5\u53ca\u540e\u9762\u7684\u94fe\u8868\u5219\u8fd9\u662f\u5305\u542b\u4e86\u90e8\u5206\u6570\u636e\u3002\u800c\u4e14\u8d8a\u5927\u7684level\u6240\u5305\u542b\u7684\u6570\u636e\u8d8a\u5c11\u3002 \u8fd9\u4e48\u505a\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u5728\u67e5\u627e\u7684\u65f6\u5019\u53ef\u4ee5\u66f4\u5feb\u7684\u627e\u5230\u6570\u636e\u7684\u4f4d\u7f6e\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u6765\u770b\u4e0b\u6574\u4e2a\u67e5\u627e\u8fc7\u7a0b\u662f\u5982\u4f55\u7684\uff0c \u9996\u5148\u4ece\u6700\u5927\u7684Level\u6240\u5bf9\u5e94\u7684\u94fe\u8868\u8fdb\u884c\u67e5\u627e(\u4e0a\u56fe\u4e2d\u5c31\u662flevel3) \u5728\u5f53\u524d\u904d\u5386\u94fe\u8868\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u6216\u8005\u7b49\u4e8e\u8981\u67e5\u627e\u7684key\u7684\u4f4d\u7f6e\u6216\u8005\u76f4\u63a5\u67e5\u627e\u5230\u7ed3\u675f(\u4e5f\u5c31\u662f\u5143\u7d206\u7684\u4f4d\u7f6e\uff0c\u56e0\u4e3a\u540e\u9762\u6ca1\u6709\u8282\u70b9\u4e86) \u5982\u679c\u5f53\u524dlevel\u6ca1\u6709\u67e5\u627e\u5230\u5c31\u7ee7\u7eed\u5207\u6362\u5230\u4e0b\u4e00\u4e2alevel\u8fdb\u884c\u67e5\u627e(\u5207\u6362\u5230level2\uff0c\u7ee7\u7eed\u67e5\u627e\uff0c\u8fd8\u662f\u5728\u5f53\u524d\u4f4d\u7f6e\uff0c\u56e0\u4e3a25\u5927\u4e8e17\u627e\u5230\u4e86\uff0c\u7ee7\u7eed\u5207\u6362\u5230level1\uff0c\u8fd9\u4e2a\u65f6\u5019\u627e\u5230\u4e869) \u76f4\u5230\u5728level0\u4e2d\u627e\u5230\u8fd9\u6837\u7684\u4f4d\u7f6e\uff0c\u5e76\u8fd4\u56de(\u627e\u5230\u4e8612\uff0c\u7136\u540e\u548c17\u8fdb\u884c\u5bf9\u6bd4\u53d1\u73b0\u4e0d\u76f8\u7b49\u3002) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 bool SkipList < Key , Comparator >:: Contains ( const Key & key ) const { Node * x = FindGreaterOrEqual ( key , nullptr ); if ( x != nullptr && Equal ( key , x -> key )) { return true ; } else { return false ; } } template < typename Key , class Comparator > bool SkipList < Key , Comparator >:: KeyIsAfterNode ( const Key & key , Node * n ) const { // null n is considered infinite return ( n != nullptr ) && ( compare_ ( n -> key , key ) < 0 ); } // \u603b\u662f\u8fd4\u56de\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ekey\u7684\u524d\u4e00\u4e2a\u8282\u70b9\u3002 template < typename Key , class Comparator > typename SkipList < Key , Comparator >:: Node * SkipList < Key , Comparator >:: FindGreaterOrEqual ( const Key & key , Node ** prev ) const { Node * x = head_ ; // 1. \u4ece\u6700\u5927\u7684Level\u5f00\u59cb\u67e5\u627e int level = GetMaxHeight () - 1 ; while ( true ) { // 2. \u904d\u5386\u94fe\u8868\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ekey\u7684\u8282\u70b9\u3002 Node * next = x -> Next ( level ); if ( KeyIsAfterNode ( key , next )) { // \u6ca1\u6709\u5927\u4e8e\u7b49\u4e8ekey\uff0c\u5e76\u4e14\u8fd8\u672a\u904d\u5386\u7ed3\u675f\uff0c\u7ee7\u7eed\u5728\u5f53\u524d\u94fe\u8868\u8fdb\u884c\u67e5\u627e // Keep searching in this list x = next ; } else { // \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ekey\u7684\u8282\u70b9\u6216\u8005\u5f53\u524dlevel\u904d\u5386\u7ed3\u675f\u4e86\u3002 if ( prev != nullptr ) prev [ level ] = x ; // \u5982\u679c\u662f\u6700\u540e\u4e00\u5c42\u4e86\uff0c\u5c31\u76f4\u63a5\u8fd4\u56de if ( level == 0 ) { return next ; } else { // \u5207\u6362\u5230\u4e0b\u4e00\u4e2alevel\u7ee7\u7eed\u67e5\u627e // Switch to next list level -- ; } } } } \u4ece\u4e0a\u9762\u7684\u67e5\u627e\u8fc7\u7a0b\u53ef\u4ee5\u770b\u5230\u4ece\u9ad8\u7684level\b\u5f00\u59cb\u67e5\u627e\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u5feb\u901f\u627e\u5230\u8981\u67e5\u627e\u7684\u6570\u636e\u5728level0\u7684\u5927\u6982\u4f4d\u7f6e\uff0c\u6709\u70b9\u7c7b\u4f3c\u4e8c\u5206\u67e5\u627e\u3002\u6240\u6709\u7684\u6570\u636e\u90fd\u53ef\u4ee5\u901a\u8fc7level0\u904d\u5386\u5230\uff0c \u9ad8\u7684level\u4e2d\u53ea\u5305\u542b\u4e86level0\u4e2d\u7684\u90e8\u5206\u6570\u636e\u3002\u6700\u540e\u6211\u4eec\u6765\u770b\u4e0b\u5982\u679c\u63d2\u5165\u6570\u636e\u6765\u6784\u5efaskiplist\uff0c\u63d2\u5165\u8fc7\u7a0b\u5982\u4e0b\u56fe: \u9996\u5148\u627e\u5230\u5927\u4e8e\u7b49\u4e8e\u8981\u67e5\u627e\u8282\u70b9\u7684\u524d\u4e00\u4e2a\u8282\u70b9\uff0c\u5e76\u8bb0\u5f55\u6bcf\u4e00\u4e2alevel\u4e0b\u627e\u5230\u7684\u5927\u4e8e\u7b49\u4e8e\u8981\u67e5\u627e\u6570\u636e\u7684\u524d\u4e00\u4e2a\u8282\u70b9\u3002 \u5982\u679c\u6709\u76f8\u540c\u7684key\u5c31\u63d2\u5165\u5931\u8d25\u3002 \u968f\u673a\u83b7\u53d6\u4e00\u4e2a\u9ad8\u5ea6\uff0c\u6bd4\u5982\u8fd9\u91cc\u83b7\u53d6\u7684\u9ad8\u5ea6\u662f1 \u6784\u9020\u65b0\u8282\u70b9\uff0c\u5e76\u8ba9level0\u6307\u5411\u65b0\u8282\u70b9\uff0c\u7136\u540e\u627e\u5230\u968f\u673a\u83b7\u53d6\u7684level\u6240\u5bf9\u5e94\u7684\u524d\u4e00\u4e2a\u8282\u70b9\uff0c\u7136\u540e\u6307\u5411\u8fd9\u4e2a\u65b0\u8282\u70b9\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 void SkipList < Key , Comparator >:: Insert ( const Key & key ) { // TODO(opt): We can use a barrier-free variant of FindGreaterOrEqual() // here since Insert() is externally synchronized. Node * prev [ kMaxHeight ]; Node * x = FindGreaterOrEqual ( key , prev ); // Our data structure does not allow duplicate insertion assert ( x == nullptr || ! Equal ( key , x -> key )); int height = RandomHeight (); // \u5982\u679c\u5927\u4e8e\u5f53\u524d\u7684\u6700\u5927\u9ad8\u5ea6\u5c31\u8fdb\u884c\u6269\u5c55\uff0c\u4ece\u6700\u5927\u9ad8\u5ea6\u5230\u83b7\u53d6\u7684\u968f\u673a\u9ad8\u5ea6\u4e4b\u95f4\u8bbe\u7f6eprev\u4e3aheader // \u4e5f\u5c31\u662f\u5728\u8fd9\u4e2a\u8303\u56f4\u5185\uff0c\u76f4\u63a5\u7528header\u6307\u9488\u6307\u5411\u65b0\u521b\u5efa\u7684\u5143\u7d20\u3002 if ( height > GetMaxHeight ()) { for ( int i = GetMaxHeight (); i < height ; i ++ ) { prev [ i ] = head_ ; } // It is ok to mutate max_height_ without any synchronization // with concurrent readers. A concurrent reader that observes // the new value of max_height_ will see either the old value of // new level pointers from head_ (nullptr), or a new value set in // the loop below. In the former case the reader will // immediately drop to the next level since nullptr sorts after all // keys. In the latter case the reader will use the new node. max_height_ . store ( height , std :: memory_order_relaxed ); } // \u521b\u5efa\u65b0\u7684\u8282\u70b9 x = NewNode ( key , height ); // \u4ecelevel0\u5f00\u59cb\uff0c\u63d2\u5165\u5230\u6bcf\u4e00\u5c42\u3002 for ( int i = 0 ; i < height ; i ++ ) { // NoBarrier_SetNext() suffices since we will add a barrier when // we publish a pointer to \"x\" in prev[i]. x -> NoBarrier_SetNext ( i , prev [ i ] -> NoBarrier_Next ( i )); prev [ i ] -> SetNext ( i , x ); } } \u901a\u8fc7\u4e0a\u9762\u7684\u4ee3\u7801\u53ef\u4ee5\u770b\u5230\uff0c\u6838\u5fc3\u70b9\u5728\u4e8e\u968f\u673a\u83b7\u53d6\u4e86\u4e00\u4e2a\u9ad8\u5ea6\uff0c\u7136\u540e\u4ecelevel0\u5f00\u59cb\u5230\u8fd9\u4e2a\u9ad8\u5ea6\u7684\u6bcf\u4e00\u5c42\u90fd\u4f1a\u63d2\u5165\u8fd9\u4e2a\u65b0\u8282\u70b9\u3002 Memtable Leveldb\u5199\u5165\u6570\u636e\u65f6\u5e76\u4e0d\u662f\u76f4\u63a5\u5199\u78c1\u76d8\uff0c\u800c\u662f\u9996\u5148\u5199\u5165\u5230\u5185\u5b58\u4e2d\uff0c\u7136\u540e\u901a\u8fc7\u540e\u53f0\u7ebf\u7a0b\u8fdb\u884ccompact\u5e76\u5199\u5165\u5230\u78c1\u76d8\uff0c\u800cMemtable\u5c31\u662fleveldb\u5728\u5185\u5b58\u4e2d\u7528\u6765\u5b58\u50a8\u5199\u5165\u6570\u636e\u7684\u7ed3\u6784\u3002 \u6240\u6709\u5199\u5165\u7684\u5185\u5bb9\u90fd\u4f1a\u540cMemtable\u8fdb\u884c\u6392\u5e8f\u5b58\u50a8\uff0c\u7b49\u8fd9\u4e2aMemtable\u7684\u5bb9\u91cf\u8fbe\u5230\u4e00\u4e2a\u9600\u503c\u65f6\u5c31\u5c06\u5176\u8bbe\u7f6e\u4e3a\u53ea\u8bfb\uff0c\u7136\u540e\u91cd\u65b0\u521b\u5efa\u4e00\u4e2a\u65b0\u7684Memtable\u7ee7\u7eed\u63d0\u4f9b\u5199\u5165\u64cd\u4f5c\u3002\u4e00\u4e2a Memtable \u6838\u5fc3\u63d0\u4f9b\u4e86\u4e0b\u9762\u4e24\u4e2a\u63a5\u53e3\uff0c\u901a\u8fc7\u8fd9\u4e24\u4e2a\u63a5\u53e3\u6765\u5b9e\u73b0\u589e\u5220\u67e5\u3002 1 2 3 4 5 6 7 8 9 10 11 // Add an entry into memtable that maps key to value at the // specified sequence number and with the specified type. // Typically value will be empty if type==kTypeDeletion. void Add ( SequenceNumber seq , ValueType type , const Slice & key , const Slice & value ); // If memtable contains a value for key, store it in *value and return true. // If memtable contains a deletion for key, store a NotFound() error // in *status and return true. // Else, return false. bool Get ( const LookupKey & key , std :: string * value , Status * s ); \u9996\u5148\u6211\u4eec\u6765\u770b\u4e0b\u5b83\u7684 Add \u65b9\u6cd5\u7684\u5b9e\u73b0\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 void MemTable::Add ( SequenceNumber s , ValueType type , const Slice & key , const Slice & value ) { // Format of an entry is concatenation of: // key_size : varint32 of internal_key.size() // key bytes : char[internal_key.size()] // value_size : varint32 of value.size() // value bytes : char[value.size()] size_t key_size = key . size (); size_t val_size = value . size (); size_t internal_key_size = key_size + 8 ; const size_t encoded_len = VarintLength ( internal_key_size ) + internal_key_size + VarintLength ( val_size ) + val_size ; char * buf = arena_ . Allocate ( encoded_len ); char * p = EncodeVarint32 ( buf , internal_key_size ); std :: memcpy ( p , key . data (), key_size ); p += key_size ; EncodeFixed64 ( p , ( s << 8 ) | type ); p += 8 ; p = EncodeVarint32 ( p , val_size ); std :: memcpy ( p , value . data (), val_size ); assert ( p + val_size == buf + encoded_len ); table_ . Insert ( buf ); } \u5c06key\u548cvalue\u8fdb\u884c\u7f16\u7801\uff0c\u7f16\u7801\u7684\u683c\u5f0f\u4e3a key_size \u3001 key \u3001 value_size \u3001 value \uff0c\u5176\u4e2dkey\u90e8\u5206\u53c8\u505a\u4e86\u4e00\u6b21\u7f16\u7801\uff0c\u5305\u88c5\u6210\u4e86internal_key\uff0c\u5176\u7f16\u7801\u683c\u5f0f\u5982\u4e0b\u56fe\uff1a \u8fd9\u4e48\u505a\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u89e3\u51b3\u4e24\u4e2a\u95ee\u9898\uff0c\u7b2c\u4e00\u4e2a\u95ee\u9898\u5c31\u662f\u5c06\u5220\u9664\u53d8\u6210add\uff0c\u771f\u6b63\u7684\u5220\u9664\u5728\u8fdb\u884cCompaction\u7684\u65f6\u5019\u8fdb\u884c\uff0c\u56e0\u6b64\u5728\u7f16\u7801Key\u7684\u65f6\u5019\u6dfb\u52a0\u4e86type\u6807\u5fd7\uff0c\u6807\u8bb0\u8fd9\u4e2akey\u662f\u5220\u9664 \u8fd8\u662f\u6dfb\u52a0\u3002\u53e6\u5916\u4e00\u4e2a\u95ee\u9898\u5c31\u662f\u5bf9\u8c61\u76f8\u540ckey\u7684\u5904\u7406\uff0c\u5982\u4f55\u533a\u5206\u65b0\u65e7\uff0c\u56e0\u6b64Leveldb\u5f15\u5165\u4e86 sequence number \uff0c\u6bcf\u6b21\u63d2\u5165\u90fd\u4f1a\u8fdb\u884c\u9012\u589e\uff0c\u56e0\u6b64\u76f8\u540c\u7684key\u4e00\u5b9a\u5177\u6709\u4e0d\u540c\u7684 sequence number \uff0c \u8c01\u7684 sequence number \u5927\u8c01\u5c31\u662f\u6700\u65b0\u7684key\u3002\u6240\u4ee5\u9700\u8981\u5c06 sequence number \u4e5f\u7f16\u7801\u5230key\u4e2d\uff0c\u6700\u7ec8\u4ea7\u751f\u4e86\u8fd9\u4e2ainternal_key\u3002 Memtable\u662f\u5728\u5185\u5b58\u4e2d\u7684\uff0c\u800c\u4e14\u53ea\u6709\u5230\u8fbe\u4e00\u5b9a\u7684\u5927\u5c0f\u624d\u4f1a\u901a\u8fc7Compaction\u5199\u5165\u5230\u78c1\u76d8\uff0c\u5982\u679c\u5728\u8fd9\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u4e86\u5f02\u5e38\u5982\u4f55\u4fdd\u8bc1\u6570\u636e\u4e0d\u4e22\u5931\u5462? \u8fd9\u5c31\u9700\u8981WAL\u4e86\u3002 WAL(Write-ahead logging) Leveldb\u6bcf\u6b21\u5728\u8fdb\u884c\u6570\u636e\u5199\u5165\u7684\u65f6\u5019\u90fd\u4f1a\u5148\u5c06\u6570\u636e\u5199\u5230\u65e5\u5fd7\u6587\u4ef6\u4e2d\uff0c\u7136\u540e\u518d\u5f80Memtable\u4e2d\u5199\uff0c\u8fd9\u6837\u505a\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u9632\u6b62\u5728\u5199\u5165Memtable\u7684\u8fc7\u7a0b\u4e2d\u56e0\u4e3a\u8fdb\u7a0b\u5f02\u5e38\u3001\u7cfb\u7edf\u6389\u7535\u7b49\u60c5\u51b5\u5bfc\u81f4\u6570\u636e\u4e22\u5931\u3002 \u65e5\u5fd7\u6587\u4ef6\u662f\u6309\u7167Block\u6765\u7ec4\u7ec7\u7684\uff0c\u6bcf\u4e2aBlock\u5927\u5c0f\u4e3a32K\uff0c\u4e00\u4e2aBlock\u4e2d\u4f1a\u5305\u542b\u591a\u4e2a\u8bb0\u5f55\u3002\u6bcf\u6761\u8bb0\u5f55\u90fd\u5305\u542b\u4e86\u56db\u4e2a\u90e8\u5206\uff0c\u5206\u522b\u662f: Checksum \u3001 Length \u3001 RecordType \u3001 Data \u3002\u683c\u5f0f\u5982\u4e0b\u56fe: \u5176\u4e2d\u8fd9\u91cc\u7684 RecordType \u5176\u53d6\u503c\u8303\u56f4\u5982\u4e0b: 1 2 3 4 5 6 7 8 9 10 11 enum RecordType { // Zero is reserved for preallocated files kZeroType = 0 , kFullType = 1 , // For fragments kFirstType = 2 , kMiddleType = 3 , kLastType = 4 }; \u8fd9\u4e2a RecordType \u7684\u76ee\u7684\u4e3b\u8981\u662f\u4e3a\u4e86\u89e3\u51b3\u90a3\u4e9b\u5355\u6761\u6570\u636e\u8d85\u8fc732K\u5927\u5c0f\u7684\u95ee\u9898\uff0c\u5bf9\u4e8e\u8fd9\u7c7b\u6570\u636e\u53ea\u80fd\u5206\u6210\u591a\u6761\u8bb0\u5f55\u6765\u5199\uff0c\u56e0\u6b64\u6709\u4e86 RecordType \u6765\u8868\u793a\u5f53\u524d\u7684\u8bb0\u5f55\u662f\u5426\u662f\u5b8c\u6574\u7684\uff0c\u8fd8\u662f\u7247\u6bb5\uff0c\u5982\u679c\u662f\u7247\u6bb5\uff0c\u90a3\u90a3\u4e2a\u662f\u7b2c\u4e00\u4e2a\u7247\u6bb5\u3001 \u90a3\u4e9b\u662f\u4e2d\u95f4\u7247\u6bb5\u3001\u90a3\u4e2a\u662f\u6700\u540e\u4e00\u4e2a\u7247\u6bb5\uff0c\u901a\u8fc7 RecordType \u5c31\u53ef\u4ee5\u5c06\u591a\u4e2a\u7247\u6bb5\u7ec4\u88c5\u4e00\u6761\u5b8c\u6574\u7684\u8bb0\u5f55\u3002 Chechsum \u90e8\u5206\u5f88\u597d\u7406\u89e3\uff0c\u5c31\u662f\u8bb0\u5f55\u4e86\u5f53\u524d\u8bb0\u5f55\u7684\u6821\u9a8c\u548c\uff0c\u7528\u6765\u505a\u6570\u636e\u6b63\u786e\u6027\u6821\u9a8c\u7684\u3002 Length \u90e8\u5206\u5219\u662f\u7528\u6765\u6807\u8bc6 Leveldb\u89c4\u5b9a Checksum \u53604\u4e2a\u5b57\u8282(\u6b63\u597d\u6ee1\u8db3crc32\u7b97\u6cd5\u7684\u9700\u6c42)\uff0c Length \u53602\u4e2a\u5b57\u8282(2^16\u6b21\u65b9\u6b63\u597d\u662f32K\uff0c\u4e00\u4e2ablock\u7684\u5927\u5c0f\uff0c\u6240\u4ee5\u662f\u8db3\u591f\u7684)\u3001 RecordType \u5360\u75281\u4e2a\u5b57\u8282\u3002\u8fd9\u4e09\u4e2a\u90e8\u5206\u88ab\u79f0\u4e3a\u56fa\u5b9a\u7684Header\uff0c\u603b\u5171 \u5360\u75287\u4e2a\u5b57\u8282\uff0c\u4e0b\u9762\u8fd9\u4e2a\u65b9\u6cd5\u5c31\u662f\u7528\u6765\u5199\u5165\u4e00\u6761\u5b8c\u6574\u8bb0\u5f55\u7684\u65b9\u6cd5\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 Status Writer::EmitPhysicalRecord ( RecordType t , const char * ptr , size_t length ) { assert ( length <= 0xffff ); // Must fit in two bytes assert ( block_offset_ + kHeaderSize + length <= kBlockSize ); // Format the header // 1. \u5148\u5199\u5165header\u548cRecordType char buf [ kHeaderSize ]; buf [ 4 ] = static_cast < char > ( length & 0xff ); buf [ 5 ] = static_cast < char > ( length >> 8 ); buf [ 6 ] = static_cast < char > ( t ); // 2. \u5f00\u59cb\u8ba1\u7b97crc32\uff0c\u7136\u540e\u5199\u5165 // Compute the crc of the record type and the payload. uint32_t crc = crc32c :: Extend ( type_crc_ [ t ], ptr , length ); crc = crc32c :: Mask ( crc ); // Adjust for storage EncodeFixed32 ( buf , crc ); // 3. \u6700\u540e\u5199\u5165Data // Write the header and the payload Status s = dest_ -> Append ( Slice ( buf , kHeaderSize )); if ( s . ok ()) { s = dest_ -> Append ( Slice ( ptr , length )); if ( s . ok ()) { s = dest_ -> Flush (); } } block_offset_ += kHeaderSize + length ; return s ; } \u5230\u6b64\u4e3a\u6b62\u65e5\u5fd7\u7684\u5199\u5165\u8fc7\u7a0b\u5c31\u5206\u6790\u5b8c\u4e86\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u770b\u4e0bWAL\u5b9e\u9645\u662f\u5982\u4f55\u4f7f\u7528\u7684\uff0c\u4e0b\u9762\u662fLeveldb\u6279\u91cf\u5199\u7684\u5b9e\u73b0\u3002 Tips Leveldb\u7684\u5199\u5165\u603b\u662f\u6279\u91cf\u7684\uff0c\u5373\u4f7f\u6709\u5355\u6b21\u5199\u5165\u7684API\uff0c\u6700\u7ec8\u5728\u5185\u90e8\u4f7f\u7528\u7684\u65f6\u5019\uff0c\u4e5f\u662f\u4f7f\u7528\u6279\u91cf\u5199\u7684\u65b9\u5f0f\u6765\u505a\u7684\u3002 1 2 3 4 5 Status DB::Put ( const WriteOptions & opt , const Slice & key , const Slice & value ) { WriteBatch batch ; batch . Put ( key , value ); return Write ( opt , & batch ); } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 Status DBImpl::Write ( const WriteOptions & options , WriteBatch * updates ) { ...... if ( status . ok () && updates != nullptr ) { // nullptr batch is for compactions WriteBatch * write_batch = BuildBatchGroup ( & last_writer ); WriteBatchInternal :: SetSequence ( write_batch , last_sequence + 1 ); last_sequence += WriteBatchInternal :: Count ( write_batch ); // Add to log and apply to memtable. We can release the lock // during this phase since &w is currently responsible for logging // and protects against concurrent loggers and concurrent writes // into mem_. { mutex_ . Unlock (); // 1. \u5148\u5199WAL status = log_ -> AddRecord ( WriteBatchInternal :: Contents ( write_batch )); bool sync_error = false ; if ( status . ok () && options . sync ) { status = logfile_ -> Sync (); if ( ! status . ok ()) { sync_error = true ; } } if ( status . ok ()) { // 2. \u518d\u5199\u5165Memtable status = WriteBatchInternal :: InsertInto ( write_batch , mem_ ); } mutex_ . Lock (); if ( sync_error ) { // The state of the log file is indeterminate: the log record we // just added may or may not show up when the DB is re-opened. // So we force the DB into a mode where all future writes fail. RecordBackgroundError ( status ); } } if ( write_batch == tmp_batch_ ) tmp_batch_ -> Clear (); versions_ -> SetLastSequence ( last_sequence ); } ...... \u901a\u8fc7\u4e0a\u9762\u7684\u4ee3\u7801\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u5b9e\u9645\u4e0a\u4e00\u6761\u8bb0\u5f55\u4e2d\u7684\u6570\u636e\u5305\u542b\u4e86 WriteBatch \u4e2d\u7684\u591a\u4e2akey/value\uff0c\u90a3\u4e48\u95ee\u9898\u6765\u4e86\uff0c\u6211\u901a\u8fc7WAL\u8bfb\u53d6\u5230\u8bb0\u5f55\u540e\uff0c\u4e5f\u6210\u529f\u62ff\u5230\u4e86\u4fdd\u5b58\u7684\u6570\u636e\uff0c\u90a3\u4e48\u6211\u5982\u4f55\u4ece\u8fd9\u4e2a\u6570\u636e\u4e2d\u83b7\u53d6\u5230\u591a\u4e2akey/value\u5462\uff1f WAL\u662f\u4e0d\u7ba1\u6570\u636e\u4e2d\u6709\u591a\u5c11key/value\u7684\uff0c\u4ed6\u53ea\u8d1f\u8d23\u5b58\u50a8\u548c\u8bfb\u53d6\u6570\u636e\uff0c\u81f3\u4e8e\u8bfb\u5230\u7684\u6570\u636e\u5982\u4f55\u89e3\u6790\u6210\u591a\u4e2akey/value\uff0c\u8fd9\u4e2a\u662f\u4ea4\u7531\u4f7f\u7528\u8005\u6765\u5904\u7406\u7684\u3002WAL\u53ef\u4ee5\u5728\u591a\u4e2a\u5730\u65b9\u88ab\u4f7f\u7528\uff0c\u5176Data\u90e8\u5206\u7684\u683c\u5f0f\u53ef\u4ee5\u662f\u4efb\u610f\u7684\uff0c\u5728Leveldb\u4e2d\u4e0d\u4ec5\u4ec5 \u662f\u7528\u6765\u5b58\u653ekey/value\uff0c\u8fd8\u88ab\u7528\u6765\u5b58\u653e Manifest \u4e86\u3002 WAL\u6587\u4ef6\u4f55\u65f6\u5220\u9664\u5462? \u5982\u679c\u4e00\u76f4\u6301\u7eed\u7684\u5199\u5165\u90a3\u4e48WAL\u6587\u4ef6\u8fdf\u65e9\u4f1a\u6491\u66b4\u3002\u800c\u4e14WAL\u6587\u4ef6\u90a3\u4e48\u5927\uff0c\u5728\u51fa\u73b0\u6545\u969c\u7684\u65f6\u5019\u6062\u590d\u4e5f\u662f\u4e00\u4e2a\u95ee\u9898\uff0c\u53e6\u5916\u5728Leveldb\u8fdb\u884cCompaction\u540e\u90e8\u5206key/value\u5c06\u4f1a\u843d\u76d8\uff0c\u90a3\u4e48WAL\u4e2d\u5bf9\u5e94\u7684\u6570\u636e\u4e5f\u5e94\u8be5\u8981\u88ab\u6e05\u7406\u6389\u3002\u5426\u5219\u5c31\u4f1a\u5bfc\u81f4\u6570\u636e\u91cd\u590d\u7684\u95ee\u9898\u3002\u5728 Memtable \u90e8\u5206\u6211\u4eec\u4ecb\u7ecd\u8fc7\uff0c Memtable \u7684\u5927\u5c0f\u5230\u8fbe\u4e00\u4e2a\u9600\u503c\u65f6\u4f1a\u88ab\u51bb\u7ed3\u53d8\u6210 immutable \uff0c\u53ea\u80fd\u88ab\u8bfb\u53d6\u65e0\u6cd5\u8fdb\u884c\u5199\u5165\uff0c\u8fd9\u4e2a\u65f6\u5019\u5bf9\u5e94\u7684WAL\u6587\u4ef6\u4e5f\u4f1a\u88ab\u51bb\u7ed3\uff0c\u7136\u540e\u521b\u5efa\u4e00\u4e2a\u65b0\u7684WAL\u6587\u4ef6\uff0c\u7b49 immutable \u8fdb\u884cCompaction\u540e\u88ab\u5199\u5165\u5230\u78c1\u76d8\u65f6\uff0c\u5bf9\u5e94\u7684WAL\u6587\u4ef6\u624d\u80fd\u5b89\u5168\u7684\u5220\u9664\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 Status DBImpl::MakeRoomForWrite ( bool force ) { ...... while ( true ) { if ( ! bg_error_ . ok ()) { // Yield previous error s = bg_error_ ; break ; } else if ( allow_delay && versions_ -> NumLevelFiles ( 0 ) >= config :: kL0_SlowdownWritesTrigger ) { // We are getting close to hitting a hard limit on the number of // L0 files. Rather than delaying a single write by several // seconds when we hit the hard limit, start delaying each // individual write by 1ms to reduce latency variance. Also, // this delay hands over some CPU to the compaction thread in // case it is sharing the same core as the writer. mutex_ . Unlock (); env_ -> SleepForMicroseconds ( 1000 ); allow_delay = false ; // Do not delay a single write more than once mutex_ . Lock (); } else if ( ! force && ( mem_ -> ApproximateMemoryUsage () <= options_ . write_buffer_size )) { // There is room in current memtable break ; } else if ( imm_ != nullptr ) { // We have filled up the current memtable, but the previous // one is still being compacted, so we wait. Log ( options_ . info_log , \"Current memtable full; waiting... \\n \" ); background_work_finished_signal_ . Wait (); } else if ( versions_ -> NumLevelFiles ( 0 ) >= config :: kL0_StopWritesTrigger ) { // There are too many level-0 files. Log ( options_ . info_log , \"Too many L0 files; waiting... \\n \" ); background_work_finished_signal_ . Wait (); } else { // \u521b\u5efaimmutable\uff0c\u83b7\u53d6\u65b0\u7684WAL\u6587\u4ef6\u540d\uff0c\u7136\u540e\u91cd\u65b0\u6253\u5f00\uff0c\u540e\u7eed\u4f7f\u7528\u65b0\u7684WAL\u6587\u4ef6\u3002 // Attempt to switch to a new memtable and trigger compaction of old assert ( versions_ -> PrevLogNumber () == 0 ); uint64_t new_log_number = versions_ -> NewFileNumber (); WritableFile * lfile = nullptr ; s = env_ -> NewWritableFile ( LogFileName ( dbname_ , new_log_number ), & lfile ); if ( ! s . ok ()) { // Avoid chewing through file number space in a tight loop. versions_ -> ReuseFileNumber ( new_log_number ); break ; } delete log_ ; delete logfile_ ; logfile_ = lfile ; logfile_number_ = new_log_number ; log_ = new log :: Writer ( lfile ); imm_ = mem_ ; has_imm_ . store ( true , std :: memory_order_release ); mem_ = new MemTable ( internal_comparator_ ); mem_ -> Ref (); force = false ; // Do not force another compaction if have room MaybeScheduleCompaction (); } } return s ; } MakeRoomForWrite \u6bcf\u6b21\u5728\u53d1\u751f\u5199\u5165\u7684\u65f6\u5019\u90fd\u4f1a\u8c03\u7528\uff0c\u4f1a\u5224\u65ad\u5f53\u524d\u7684 Memtable \u5927\u5c0f\u662f\u5426\u8d85\u8fc7\u9600\u503c\uff0c\u5982\u679c\u8d85\u8fc7\u4e86\u5c31\u5207\u6362\u6210\u529f immutable \uff0c\u5e76\u91cd\u65b0\u6253\u5f00\u4e00\u4e2a\u65b0\u7684WAL\u6587\u4ef6\u7528\u4e8e\u8bb0\u5f55\u3002 \u63a5\u7740\u6211\u4eec\u6765\u770b\u4e0bCompaction\u7684\u5b9e\u73b0\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 void DBImpl::CompactMemTable () { mutex_ . AssertHeld (); assert ( imm_ != nullptr ); // Save the contents of the memtable as a new Table VersionEdit edit ; Version * base = versions_ -> current (); base -> Ref (); // \u5c06Memtable\u5199\u6210sstable Status s = WriteLevel0Table ( imm_ , & edit , base ); base -> Unref (); if ( s . ok () && shutting_down_ . load ( std :: memory_order_acquire )) { s = Status :: IOError ( \"Deleting DB during memtable compaction\" ); } // Replace immutable memtable with the generated Table if ( s . ok ()) { edit . SetPrevLogNumber ( 0 ); edit . SetLogNumber ( logfile_number_ ); // Earlier logs no longer needed s = versions_ -> LogAndApply ( & edit , & mutex_ ); } if ( s . ok ()) { // Commit to the new state imm_ -> Unref (); imm_ = nullptr ; has_imm_ . store ( false , std :: memory_order_release ); // Compaction\u5b8c\u6210\u540e\uff0c\u5220\u9664\u4e0d\u9700\u8981\u7684\u6587\u4ef6\uff0c\u5305\u542b\u4e86WAL\u6587\u4ef6\u3002 RemoveObsoleteFiles (); } else { RecordBackgroundError ( s ); } } Batch Leveldb\u4e2d\u6bcf\u6b21\u90fd\u5199\u90fd\u662f\u901a\u8fc7Batch\u7684\u65b9\u5f0f\u8fdb\u884c\u6279\u91cf\u64cd\u4f5c\uff0c\u800cBatch\u672c\u8d28\u4e0a\u505a\u7684\u4e8b\u60c5\u5c31\u662f\u5c06\u591a\u6b21\u64cd\u4f5c\u8fdb\u884c\u4e86\u7f16\u7801\uff0c\u5148\u901a\u8fc7WAL\u65e5\u5fd7\u5c06\u7f16\u7801\u540e\u7684\u5185\u5bb9\u843d\u76d8\uff0c\u7136\u540e\u4ea4\u7531Memtable\u8fdb\u884c\u6279\u91cf\u5199\u5165\uff0c\u9996\u5148\u8ba9\u6211\u4eec\u770b\u4e0bBatch\u7684\u7ed3\u6784\u3002 1 2 3 4 5 6 7 8 class LEVELDB_EXPORT WriteBatch { public : ..... private : friend class WriteBatchInternal ; // \u6838\u5fc3\u5c31\u662f\u4e00\u4e2astring\uff0c\u6bcf\u6b21\u64cd\u4f5c\u90fd\u4f1a\u7f16\u7801\u6210string\u653e\u5728\u8fd9\u91cc\u3002 std :: string rep_ ; // See comment in write_batch.cc for the format of rep_ }; \u63a5\u7740\u6211\u4eec\u770b\u4e0bWriteBatch\u662f\u5982\u4f55\u5b58\u653e\u4e00\u6b21\u64cd\u4f5c\u7684\u3002 1 2 3 4 5 6 7 void WriteBatch::Put ( const Slice & key , const Slice & value ) { WriteBatchInternal :: SetCount ( this , WriteBatchInternal :: Count ( this ) + 1 ); rep_ . push_back ( static_cast < char > ( kTypeValue )); // \u5148\u901a\u8fc7varint\u628asize\u5199\u5165\uff0c\u63a5\u7740\u5199\u5185\u5bb9 PutLengthPrefixedSlice ( & rep_ , key ); PutLengthPrefixedSlice ( & rep_ , value ); } \u5148\u66f4\u65b0\u4e86WriteBatch\u4e2d\u5b58\u653e\u7684\u64cd\u4f5c\u4e2a\u6570 \u63a5\u7740\u5199\u5165\u64cd\u4f5c\u7c7b\u578b \u6700\u540e\u5c06key\u548cvalue\u7684\u5185\u5bb9\u5199\u5165 \u6700\u540e\u6211\u4eec\u6765\u770b\u4e0b\uff0c\u4e00\u4e2aWriteBatch\u7f16\u7801\u540e\u7684\u5185\u5bb9\u683c\u5f0f\uff0c\u5982\u4e0b\u56fe: \u4e00\u6761\u6570\u636e\u5305\u542b\u4e86 sequence number \u3001 entry number \u3001 batch data \uff0c\u524d8\u4e2a\u5b57\u8282\u7528\u6765\u5b58\u653esequence nunber\uff0c\u4e00\u6b21WriteBatch\u4f1a\u5206\u914d\u4e00\u4e2a\u9012\u589e\u7684sequence nunber\u3002 \u63a5\u77408\u4e2a\u5b57\u8282\u7528\u6765\u5b58\u653e\u8fd9\u4e2aWriteBatch\u4e2d\u5305\u542b\u4e86\u591a\u5c11\u6b21\u64cd\u4f5c\uff0c\u63a5\u7740\u5c31\u662f\u6bcf\u4e00\u6b21\u64cd\u4f5c\u7684\u5177\u4f53\u5185\u5bb9\u4e86\uff0c\u5c31\u662f\u4e0a\u9762\u63d0\u5230\u7684\u5199\u5165\u64cd\u4f5c\u7c7b\u578b\u3001key/value\u503c\u7b49\u3002 SStable Leveldb\u901a\u8fc7WriteBatch\u6279\u91cf\u8fdb\u884c\u591a\u6b21\u64cd\u4f5c\uff0c\u5c06\u591a\u6b21\u64cd\u4f5c\u7f16\u7801\u540e\u4ea4\u7531WAL\u8fdb\u884c\u65e5\u5fd7\u843d\u76d8\uff0c\u6700\u540e\u4ea4\u7ed9Memtable\u8fdb\u884c\u6279\u91cf\u5199\u5165\u5230\u5185\u5b58\uff0c\u6bcf\u6b21\u5199\u5165\u4e4b\u524d\u4f1a\u8c03\u7528 MakeRoomForWrite \u6765\u51b3\u5b9a\u662f\u5426\u9700\u8981\u8fdb\u884c Compation\u5c06Memtable\u53d8\u6210SStable\uff0c\u90a3\u4e48SStable\u5230\u5e95\u662f\u4ec0\u4e48\u5462? WriteLevel0Table \u5c31\u662f\u5176\u4e2d\u6700\u4e3a\u5173\u952e\u7684\u4e00\u4e2a\u51fd\u6570\uff0c\u901a\u8fc7\u8fd9\u4e2a\u51fd\u6570\u5c06Memtable\u53d8\u6210\u4e86SStable\u3002 \u63a5\u4e0b\u6765\u8ba9\u6211\u4eec\u6765\u770b\u4e0b\u8fd9\u4e2a \u51fd\u6570\u5230\u5e95\u505a\u4e86\u4ec0\u4e48? 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 Status DBImpl::WriteLevel0Table ( MemTable * mem , VersionEdit * edit , Version * base ) { mutex_ . AssertHeld (); const uint64_t start_micros = env_ -> NowMicros (); // 1. \u521b\u5efaFileMetaData\uff0c\u7528\u6765\u63cf\u8ff0\u4ea7\u751f\u7684sstable\u6587\u4ef6 FileMetaData meta ; // 1.1 \u751f\u6210\u4e00\u4e2a\u65b0\u7684FileNumber\uff0csstable\u6587\u4ef6\u7684\u540d\u5b57\u662f\u6709FileNumber\u7ec4\u6210\u7684 meta . number = versions_ -> NewFileNumber (); pending_outputs_ . insert ( meta . number ); // 1.2 \u521b\u5efaMemtable\u8fed\u4ee3\u5668\u51c6\u5907\u5199\u5165\u5230sstable\u6587\u4ef6\u4e2d Iterator * iter = mem -> NewIterator (); Log ( options_ . info_log , \"Level-0 table #%llu: started\" , ( unsigned long long ) meta . number ); Status s ; { mutex_ . Unlock (); // 2. \u6784\u5efaTable s = BuildTable ( dbname_ , env_ , options_ , table_cache_ , iter , & meta ); mutex_ . Lock (); } Log ( options_ . info_log , \"Level-0 table #%llu: %lld bytes %s\" , ( unsigned long long ) meta . number , ( unsigned long long ) meta . file_size , s . ToString (). c_str ()); delete iter ; pending_outputs_ . erase ( meta . number ); // Note that if file_size is zero, the file has been deleted and // should not be added to the manifest. // 3. \u5c06\u6587\u4ef6\u6dfb\u52a0\u5230VersionEdit\u4e2d int level = 0 ; if ( s . ok () && meta . file_size > 0 ) { const Slice min_user_key = meta . smallest . user_key (); const Slice max_user_key = meta . largest . user_key (); if ( base != nullptr ) { level = base -> PickLevelForMemTableOutput ( min_user_key , max_user_key ); } edit -> AddFile ( level , meta . number , meta . file_size , meta . smallest , meta . largest ); } CompactionStats stats ; stats . micros = env_ -> NowMicros () - start_micros ; stats . bytes_written = meta . file_size ; stats_ [ level ]. Add ( stats ); return s ; } \u53ef\u4ee5\u770b\u5230\uff0c\u6784\u5efasstable\u7684\u6838\u5fc3\u5728\u4e8e BuildTable \uff0c\u6784\u5efa\u597d\u540e\u4f1a\u4ea7\u751f\u4e00\u4e2a\u6587\u4ef6\uff0c\u8fd9\u4e2a\u6587\u4ef6\u7684\u5143\u4fe1\u606f\u5219\u662f\u901a\u8fc7 FileMetaData \u6765\u63cf\u8ff0\u7684\uff0c\u6700\u540e\u4f1a\u5c06\u8fd9\u4e2a\u6587\u4ef6\u7684\u5143\u4fe1\u606f\u5b58\u5165\u5230 VersionEdit \u4e2d\u3002 \u7136\u540eApply\u5230 Version \u4e2d\u3002\u5173\u4e8e Version \u548c VersionEdit \b\u540e\u9762\u7684\u91cd\u70b9\u5206\u6790\uff0c\u73b0\u5728\u6211\u4eec\u91cd\u70b9\u6765\u770b\u4e0bBuildTable\u7684\u5b9e\u73b0\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 Status BuildTable ( const std :: string & dbname , Env * env , const Options & options , TableCache * table_cache , Iterator * iter , FileMetaData * meta ) { Status s ; meta -> file_size = 0 ; iter -> SeekToFirst (); // 1. \u6784\u9020Table\u6587\u4ef6\u540d std :: string fname = TableFileName ( dbname , meta -> number ); if ( iter -> Valid ()) { WritableFile * file ; s = env -> NewWritableFile ( fname , & file ); if ( ! s . ok ()) { return s ; } TableBuilder * builder = new TableBuilder ( options , file ); meta -> smallest . DecodeFrom ( iter -> key ()); Slice key ; // 2. \u904d\u5386Memtable\uff0c\u5c06key/value\u5b58\u5165\u5230Table\u4e2d // \u56e0\u4e3aMemtable\u662f\u6709\u5e8f\u7684\uff0c\u56e0\u6b64\u7b2c\u4e00\u4e2akey\u662f\u6700\u5c0f\u7684key\uff0c\u6700\u540e\u7684key\u662f\u6700\u5927\u7684key // \u5c06\u6700\u5c0fkey\u548c\u6700\u5927key\u8fd9\u4e24\u4e2a\u5143\u4fe1\u606f\u5b58\u5165\u5230FileMeta\u4e2d for (; iter -> Valid (); iter -> Next ()) { key = iter -> key (); builder -> Add ( key , iter -> value ()); } if ( ! key . empty ()) { meta -> largest . DecodeFrom ( key ); } // Finish and check for builder errors s = builder -> Finish (); if ( s . ok ()) { meta -> file_size = builder -> FileSize (); assert ( meta -> file_size > 0 ); } delete builder ; // Finish and check for file errors // 3. \u5b8c\u6210table\u6784\u5efa\u540e\uff0c\u5f00\u59cb\u8fdb\u884c\u6587\u4ef6sync\uff0c\u786e\u4fdd\u6587\u4ef6\u843d\u76d8 if ( s . ok ()) { s = file -> Sync (); } if ( s . ok ()) { s = file -> Close (); } delete file ; file = nullptr ; if ( s . ok ()) { // Verify that the table is usable Iterator * it = table_cache -> NewIterator ( ReadOptions (), meta -> number , meta -> file_size ); s = it -> status (); delete it ; } } // Check for input iterator errors if ( ! iter -> status (). ok ()) { s = iter -> status (); } if ( s . ok () && meta -> file_size > 0 ) { // Keep it } else { env -> RemoveFile ( fname ); } return s ; } \u901a\u8fc7\u4e0a\u9762\u7684\u4ee3\u7801\u6211\u4eec\u53ef\u4ee5\u77e5\u9053 TableBuilder \u5c31\u662f\u7528\u6765\u6784\u5efasstable\u7684\u6838\u5fc3\uff0c\u800csstable\u672c\u8d28\u4e0a\u5c31\u662f\u4e00\u4e2a\u6587\u4ef6\uff0c\u6587\u4ef6\u5185\u5bb9\u662f\u4e00\u7cfb\u5217\u6392\u5e8f\u597d\u7684key/value\u8fdb\u884c\u7f16\u7801\u540e\u7684\u5185\u5bb9\uff0c\u90a3\u4e48\u5b83\u7684\u683c\u5f0f\u5230\u5e95\u662f\u5982\u4f55\u7684\u5462? \u4e3a\u4e86\u63d0\u9ad8\u6574\u4f53\u7684\u8bfb\u5199\u6548\u7387\uff0c\u4e00\u4e2asstable\u6587\u4ef6\u6309\u7167\u56fa\u5b9a\u5927\u5c0f\u8fdb\u884c\u5757\u5212\u5206\uff0c\u9ed8\u8ba4\u6bcf\u4e2a\u5757\u7684\u5927\u5c0f\u4e3a4KiB\u3002\u6bcf\u4e2aBlock\u4e2d\uff0c\u9664\u4e86\u5b58\u50a8\u6570\u636e\u4ee5\u5916\uff0c\u8fd8\u4f1a\u5b58\u50a8\u4e24\u4e2a\u989d\u5916\u7684\u8f85\u52a9\u5b57\u6bb5\uff1a\u538b\u7f29\u7c7b\u578b\u548cCRC\u6821\u9a8c\u7801\uff0c\u4e0a\u56fe\u5c31\u662f\u5176\u6574\u4f53\u7684 \u7269\u7406\u7ed3\u6784\u3002\u8fdb\u4e00\u6b65\u4e0a\u9762\u7684Data\u90e8\u5206\u53c8\u88ab\u5206\u4e3a\u4e86\u4e94\u7c7b: data block \u7528\u6765\u5b58\u50a8\u5177\u4f53\u7684key value\u6570\u636e filter block \u7528\u6765\u5b58\u50a8\u4e00\u4e9b\u8fc7\u6ee4\u5668\u76f8\u5173\u7684\u6570\u636e meta index block \u7528\u6765\u5b58\u50a8filter block\u7684\u7d22\u5f15\u4fe1\u606f(\u4e5f\u5c31\u662ffilter block\u5728sstable\u6587\u4ef6\u4e2d\u7684\u504f\u79fb\u91cf\uff0c\u4ee5\u53ca\u6570\u636e\u7684\u957f\u5ea6) index block \u7528\u6765\u5b58\u50a8\u6bcf\u4e2adata block\u7684\u7d22\u5f15\u4fe1\u606f footer \u7528\u6765\u5b58\u50a8meta index block\u548cindex block\u7684\u7d22\u5f15\u4fe1\u606f \u9996\u5148\u6211\u4eec\u6765\u770b\u4e0bdata block\u7684\u6570\u636e\u683c\u5f0f\uff0c\u5982\u4e0b\u56fe: \u53ef\u4ee5\u770b\u5230\u4e00\u4e2adatablock\u5185\u90e8\u5305\u542b\u4e86\u591a\u4e2aEntry\uff0c\u6bcf\u4e00\u4e2aEntry\u5c31\u662f\u4e00\u4e2a\u8981\u5b58\u53d6\u7684\u6570\u636e\u6761\u76ee\uff0c\u4e5f\u5c31\u662f\u7528\u6237\u5b58\u5165\u7684key/value\uff0c\u8ba9\u6211\u4eec\u6765\u770b\u4e0bEntry\u7684\u7f16\u7801\u683c\u5f0f\uff0c\u5982\u4e0b\u56fe: \u4e00\u4e2aEntry\u5305\u542b\u4e865\u4e2a\u90e8\u5206\uff0c\u4ed6\u4eec\u5206\u522b\u662f: \u4e0e\u524d\u4e00\u6761\u8bb0\u5f55key\u5171\u4eab\u90e8\u5206\u7684\u957f\u5ea6\uff1b \u4e0e\u524d\u4e00\u6761\u8bb0\u5f55key\u4e0d\u5171\u4eab\u90e8\u5206\u7684\u957f\u5ea6\uff1b value\u957f\u5ea6\uff1b \u4e0e\u524d\u4e00\u6761\u8bb0\u5f55key\u975e\u5171\u4eab\u7684\u5185\u5bb9\uff1b value\u5185\u5bb9\uff1b \u53ef\u4ee5\u770b\u5230\uff0c\u4e00\u4e2aEntry\u5e76\u975e\u5305\u542b\u4e86\u5b8c\u6574\u7684key\uff0c\u800c\u662f\u548c\u524d\u4e00\u4e2akey\u7684\u5171\u4eab\u524d\u7f00\uff0c\u56e0\u6b64\u7f16\u7801\u548c\u89e3\u7801\u7684\u65f6\u5019\u90fd\u9700\u8981\u4fdd\u5b58\u4e0a\u4e00\u4e2akey\u7684\u4fe1\u606f\uff0c\u624d\u80fd\u5bf9key\u8fdb\u884c\u7f16\u7801\u6216\u89e3\u7801\u3002\u8fd9\u79cd\u7f16\u7801\u65b9\u5f0f\u53ef\u4ee5\u6709\u6548\u7684\u907f\u514dkey\u91cd\u590d\u5185\u5bb9\u7684\u5b58\u50a8\uff0c \u56e0\u4e3akey\u603b\u662f\u6709\u5e8f\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u6700\u5927\u7a0b\u5ea6\u7684\u901a\u8fc7\u5171\u4eab\u524d\u7f00\u7684\u90e8\u5206\u6765\u8282\u7701key\u5b58\u50a8\u7684\u6210\u672c\uff0c\u4f46\u662f\u5e26\u6765\u7684\u95ee\u9898\u4e5f\u662f\u663e\u800c\u6613\u89c1\u610f\u89c1\u7684\uff0c\u5982\u679c\u8981\u4ece\u8fd9\u4e2a\u6587\u4ef6\u4e2d\u68c0\u7d22\u4e00\u4e2akey\u7684\u8bdd\u9700\u8981\u5b8c\u6574\u7684\u5c06\u6240\u6709\u7684key\u90fd\u89e3\u6790\u51fa\u6765\u3002\u4e3a\u6b64leveldb \u8bbe\u8ba1\u4e86 Restart point \uff0c\u4e5f\u5c31\u662f\u6bcf\u95f4\u9694\u82e5\u5e72\u4e2akeyvalue\u5bf9\uff0c\u5c06\u4e3a\u8be5\u6761\u8bb0\u5f55\u91cd\u65b0\u5b58\u50a8\u4e00\u4e2a\u5b8c\u6574\u7684key\u3002\u91cd\u590d\u8be5\u8fc7\u7a0b\uff08\u9ed8\u8ba4\u95f4\u9694\u503c\u4e3a16\uff09\uff0c\u6bcf\u4e2a\u91cd\u65b0\u5b58\u50a8\u5b8c\u6574key\u7684\u70b9\u79f0\u4e4b\u4e3a Restart point \u3002\u6709\u4e86 Restart point \u5c31\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e9b\u5b8c\u6574\u7684key\u5feb\u901f\u5b9a\u4f4d\u76ee\u6807key\u6240\u5728\u7684\u533a\u57df\u3002\u7136\u540e\u901a\u8fc7\u5b8c\u6574\u7684key\u5c31\u53ef\u4ee5\u8fd8\u539f\u8fd9\u4e2a\u533a\u57df\u4e2d\u6240\u6709\u7684key\u4fe1\u606f\u4e86\u3002\u4e3a\u4e86\u5feb\u901f\u627e\u5230\u6bcf\u4e00\u4e2a Restart point \uff0cleveldb\u4f1a\u5728data block\u7684\u672b\u5c3e\u5b58\u50a8\u4e00\u7cfb\u5217\u7684\u7d22\u5f15\u4fe1\u606f\uff0c \u548c\u957f\u5ea6\uff0c\u65b9\u4fbf\u6211\u4eec\u5728\u52a0\u8f7ddata block\u7684\u65f6\u5019\u5c31\u53ef\u4ee5\u628a\u8fd9\u4e9b Restart point \u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\u8fdb\u884c\u5feb\u901f\u67e5\u627e\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u901a\u8fc7\u4e0b\u9762\u7684\u4ee3\u7801\u518d\u6b21\u9a8c\u8bc1\u4e0a\u9762\u63cf\u8ff0\u5230\u7684\u539f\u7406\u3002 \u8fd9\u4e2a\u601d\u60f3\u548cskiplist\u6709\u70b9\u7c7b\u4f3c\uff0c\u90fd\u662f\u6309\u7167\u4e00\u5b9a\u65b9\u5f0f\u4ece\u539f\u59cb\u6570\u636e\u8fdb\u884c\u62bd\u6837\uff0c\u5178\u578b\u7684\u7edf\u8ba1\u5b66\u539f\u7406\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 void BlockBuilder::Add ( const Slice & key , const Slice & value ) { Slice last_key_piece ( last_key_ ); assert ( ! finished_ ); assert ( counter_ <= options_ -> block_restart_interval ); assert ( buffer_ . empty () // No values yet? || options_ -> comparator -> Compare ( key , last_key_piece ) > 0 ); size_t shared = 0 ; // 1. \u6ca1\u6709\u5230Restart point\u7684\u95f4\u9694\uff0c\u56e0\u6b64\u8fd9\u91cc\u9700\u8981\u8ba1\u7b97\u5171\u4eab\u524d\u7f00 if ( counter_ < options_ -> block_restart_interval ) { // See how much sharing to do with previous string const size_t min_length = std :: min ( last_key_piece . size (), key . size ()); while (( shared < min_length ) && ( last_key_piece [ shared ] == key [ shared ])) { shared ++ ; } } else { // 2. \u8fbe\u5230\u4e86Restart point\u7684\u95f4\u9694\u4e86\uff0c\u56e0\u6b64\u8fd9\u91cc\u9700\u8981\u5b58\u50a8\u5b8c\u6574\u7684key/value\uff0c\u8fd8\u9700\u8981\u8bb0\u5f55\u7d22\u5f15\u4fe1\u606f(\u4e5f\u5c31\u662frestart poont\u7684offset\u4fe1\u606f) // Restart compression restarts_ . push_back ( buffer_ . size ()); // \u8ba1\u6570\u5668\u6e05\u96f6 counter_ = 0 ; } const size_t non_shared = key . size () - shared ; // 3. \u5f00\u59cb\u5199\u5165\u5171\u4eab\u90e8\u5206\u7684\u957f\u5ea6\u3001\u975e\u5171\u4eab\u90e8\u5206\u7684\u957f\u5ea6\u3001value\u7684\u957f\u5ea6 // Add \"<shared><non_shared><value_size>\" to buffer_ PutVarint32 ( & buffer_ , shared ); PutVarint32 ( & buffer_ , non_shared ); PutVarint32 ( & buffer_ , value . size ()); // 4. \u5199\u5165\u5171\u4eab\u90e8\u5206\u7684key\u5185\u5bb9\u3001\u5199\u5165value\u7684\u5185\u5bb9 // Add string delta to buffer_ followed by value buffer_ . append ( key . data () + shared , non_shared ); buffer_ . append ( value . data (), value . size ()); // 5. \u66f4\u65b0last key\uff0c\u7528\u4e8e\u4e0b\u4e00\u4e2akey\u8ba1\u7b97\u524d\u7f00 // Update state last_key_ . resize ( shared ); last_key_ . append ( key . data () + shared , non_shared ); assert ( Slice ( last_key_ ) == key ); counter_ ++ ; } \u6bcf\u6b21\u6dfb\u52a0key\u65f6\u4ea7\u751f\u7684 Restart point \u90fd\u5b58\u5728\u4e86 restarts_ \u4e2d\uff0c\u8fd9\u662f\u4e00\u4e2a std::vector<uint32_t> \u7c7b\u578b\uff0c\u5b58\u50a8\u4e86\u6bcf\u4e00\u4e2a Restart point \u5728data block\u4e2d\u7684offset\u3002 \u5728\u6784\u5efa\u5b8c Restart point \u540e\u4f1a\u5c06\u8fd9\u4e9b\u7d22\u5f15\u4fe1\u606f\u5199\u5165\u5230data block\u4e2d\u7684\u5c3e\u90e8\u3002 1 2 3 4 5 6 7 8 9 Slice BlockBuilder::Finish () { // Append restart array for ( size_t i = 0 ; i < restarts_ . size (); i ++ ) { PutFixed32 ( & buffer_ , restarts_ [ i ]); } PutFixed32 ( & buffer_ , restarts_ . size ()); finished_ = true ; return Slice ( buffer_ ); } \u5230\u6b64\u4e3a\u6b62data block\u7684\u6784\u5efa\u5c31\u5206\u6790\u5b8c\u4e86\uff0c\u901a\u8fc7 Restart point \u53ef\u4ee5\u8ba9\u6211\u4eec\u5feb\u901f\u5b9a\u4f4d\u8981\u67e5\u8be2\u7684\u6570\u636e\u5728data block\u4e2d\u7684\u4f4d\u7f6e\uff0c\u4f46\u662f\u8fd9\u4e00\u5207\u7684\u524d\u63d0\u662f\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u8fd9\u4e2adata block\u4e2d\u5b58\u5728\u6211\u4eec\u8981\u67e5\u8be2\u7684\u6570\u636e\u3002 \u5426\u5219\u6211\u4eec\u4f9d\u7136\u5148\u9700\u8981\u904d\u5386\u6bcf\u4e00\u4e2adata block\u3002\u5982\u679c\u6211\u4eec\u80fd\u9ad8\u6548\u7684\u5148\u8fc7\u6ee4\u5904\u5305\u542b\u8981\u67e5\u8be2\u6570\u636e\u7684data block\u90a3\u8be5\u591a\u68d2\u554a\u3002Leveldb\u4e2d\u8bbe\u8ba1\u4e86filter block\u5e2e\u52a9\u6211\u4eec\u5b9e\u73b0\u8fd9\u4e2a\u80fd\u529b\u3002\u63a5\u4e0b\u6765\u8ba9\u6211\u4eec\u770b\u770bfilter block\u7684\u683c\u5f0f\uff0c \u4ee5\u53ca\u8bbe\u8ba1filter block\u662f\u5982\u4f55\u5e2e\u52a9\u6211\u4eec\u5feb\u901f\u67e5\u8be2\u7684\u5427\u3002 \u901a\u8fc7\u4e0a\u56fe\u53ef\u77e5\uff0cfilter block\u4e2d\u5305\u542b\u4e86\u4e09\u4e2a\u90e8\u5206\uff0c\u7b2c\u4e00\u4e2a\u90e8\u5206\u5b58\u653e\u8fc7\u6ee4\u7684\u6570\u636e\u3001\u7b2c\u4e8c\u4e2a\u90e8\u5206\u5219\u5b58\u653e\u6bcf\u4e2a\u8fc7\u6ee4\u6570\u636e\u7684\u7d22\u5f15\u4f4d\u7f6e\uff0c\u7b2c\u4e09\u4e2a\u90e8\u5206\u662f\u7528\u6765\u8bb0\u5f55\u7b2c\u4e8c\u4e2a\u90e8\u5206\u7684\u5f00\u59cb\u4f4d\u7f6e\u907f\u514d\u548c\u7b2c\u4e00\u4e2a\u90e8\u5206\u7684\u6570\u636e\u6df7\u5728\u4e00\u8d77\u65e0\u6cd5\u533a\u5206\uff0c \u6700\u540e\u4e00\u4e2a\u90e8\u5206\u7684\u6570\u636e\u662fBase lg\uff0c\u5360\u75281\u4e2a\u5b57\u8282\uff0c\u9ed8\u8ba4\u503c\u662f11\uff0c\u8868\u793a\u6bcf\u96942KB\u7684\u6570\u636e\u5c31\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u8fc7\u6ee4\u5668\u6765\u5b58\u653e\u3002\u4e00\u4e2asstable\u6587\u4ef6\u53ea\u6709\u4e00\u4e2afilter block\uff0c\u5176\u5185\u90e8\u5b58\u50a8\u4e86\u6240\u6709data block\u7684filter\u6570\u636e\u3002 \u63a5\u4e0b\u6765\u8ba9\u6211\u4eec\u770b\u4e0bfilter block\u662f\u5982\u4f55\u6784\u5efa\u7684\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 void FilterBlockBuilder::StartBlock ( uint64_t block_offset ) { uint64_t filter_index = ( block_offset / kFilterBase ); assert ( filter_index >= filter_offsets_ . size ()); \\ // StartBlock(0) \u8fd9\u4e2a\u65f6\u5019\u4e0d\u4f1a\u4ea7\u751f\u4efb\u4f55filter\u6570\u636e // StartBlock(3K) \u56e0\u4e3akFilterBase\u662f2k\uff0c\u56e0\u6b64\u53ea\u9700\u8981\u4ea7\u751f\u4e00\u6761filter\u6570\u636e\u5373\u53ef\uff0c\u8fd9\u4e2a\u65f6\u5019\u4f1a\u8c03\u7528\u4e00\u6b21GenerateFilter\u4ea7\u751f\u4e00\u4e2afilter\u6570\u636e // \u53ef\u4ee5\u770b\u5230filter\u6570\u636e\u7684\u4ea7\u751f\u5e76\u975e\u4e25\u683c\u610f\u4e49\u4e0a\u7684\u6309\u71672k\u4e3a\u5355\u4f4d\u7684\uff0c\u800c\u53ea\u662f\u5c060~3K\u8fd9\u4e2a\u8303\u56f4\u5185\u6dfb\u52a0\u7684key\u4e00\u8d77\u751f\u6210\u4e00\u4e2afilter\u6570\u636e\u800c\u5df2\u3002 // StartBlock(4K) \u56e0\u4e3akFilterBase\u662f2k\uff0c\u56e0\u6b64\u9700\u8981\u4ea7\u751f\u4e8c\u6761filter\u6570\u636e\uff0c\u5b9e\u9645\u4e0a\u53ea\u4f1a\u751f\u6210\u4e24\u6761\u5185\u5bb9\u76f8\u540c\u7684filter\u6570\u636e while ( filter_index > filter_offsets_ . size ()) { GenerateFilter (); } } void FilterBlockBuilder::AddKey ( const Slice & key ) { Slice k = key ; start_ . push_back ( keys_ . size ()); keys_ . append ( k . data (), k . size ()); } // \u5bf9\u6240\u6709\u7684key\u8ba1\u7b97\u5904filter\u6570\u636e\uff0c\u5e76\u5b58\u5165result_\u4e2d void FilterBlockBuilder::GenerateFilter () { const size_t num_keys = start_ . size (); if ( num_keys == 0 ) { // Fast path if there are no keys for this filter filter_offsets_ . push_back ( result_ . size ()); return ; } // Make list of keys from flattened key structure start_ . push_back ( keys_ . size ()); // Simplify length computation tmp_keys_ . resize ( num_keys ); for ( size_t i = 0 ; i < num_keys ; i ++ ) { const char * base = keys_ . data () + start_ [ i ]; size_t length = start_ [ i + 1 ] - start_ [ i ]; tmp_keys_ [ i ] = Slice ( base , length ); } // Generate filter for current set of keys and append to result_. filter_offsets_ . push_back ( result_ . size ()); policy_ -> CreateFilter ( & tmp_keys_ [ 0 ], static_cast < int > ( num_keys ), & result_ ); tmp_keys_ . clear (); keys_ . clear (); start_ . clear (); } \u6784\u5efafilter\u6570\u636e\u662f\u901a\u8fc7\u6307\u5b9a\u7684filter\u8fc7\u6ee4\u5668\uff0c\u62ff\u7740\u6240\u6709\u7684key\u4f5c\u4e3a\u8f93\u5165\uff0c\u7136\u540e\u4ea7\u751f\u4e00\u4e2afilter\u6570\u636e\u7684\u7ed3\u679c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 Slice FilterBlockBuilder::Finish () { // \u5982\u679c\u6700\u540e\u8fd8\u6709key\u5b58\u5728\uff0c\u5c31\u628a\u5269\u4e0b\u7684key\u751f\u6210filter\u6570\u636e if ( ! start_ . empty ()) { GenerateFilter (); } // Append array of per-filter offsets // \u8bb0\u5f55filter offet\u7684\u4f4d\u7f6e const uint32_t array_offset = result_ . size (); for ( size_t i = 0 ; i < filter_offsets_ . size (); i ++ ) { // \u6dfb\u52a0filter offset PutFixed32 ( & result_ , filter_offsets_ [ i ]); } PutFixed32 ( & result_ , array_offset ); result_ . push_back ( kFilterBaseLg ); // Save encoding parameter in result return Slice ( result_ ); } \u6240\u6709\u4ea7\u751f\u7684filter\u6570\u636e\u90fd\u4f1a\u653e\u5728\u4e00\u4e2aBlock\u4e2d\uff0c\u5f53\u6211\u4eec\u60f3\u5bf9\u67d0\u4e00\u4e2aData Block\u8fdb\u884c\u8fc7\u6ee4\u7684\u65f6\u5019\uff0c\u5982\u4f55\u77e5\u9053\u81ea\u5df1\u9700\u8981\u4f7f\u7528\u54ea\u4e2afilter\u6570\u636e\u5462? \u8fd9\u662f\u901a\u8fc7Data Block\u7684offset\u9664\u4ee5Base lg \u5c31\u53ef\u4ee5\u77e5\u9053\u8fd9\u5757\u6570\u636e\u8981\u4f7f\u7528\u7b2c\u51e0\u4e2afilter\u6570\u636e\u4e86\uff0c\u5373\u4f7f\u77e5\u9053\u4f7f\u7528\u7b2c\u51e0\u4e2afilter\u6570\u636e\uff0c\u4ecd\u7136\u4e0d\u8db3\u4ee5\u77e5\u9053\u5bf9\u5e94filter\u6570\u636e\u5728Block\u4e2d\u7684offset\uff0c\u9664\u975e\u4ece\u5934\u5f00\u59cb\u904d\u5386\u3002\u4f46\u662f\u8fd9\u6837\u6548\u7387\u5c31\u592a\u4f4e\u4e86\u3002 \u56e0\u6b64leveldb\u5728Filter Block\u7684\u5c3e\u90e8\u5b58\u653e\u4e86\u7d22\u5f15\uff0c\u8fd9\u4e9b\u7d22\u5f15\u6307\u660e\u4e86\u7b2cN\u4e2afilter\u5728Block\u4e2d\u7684offset\uff0c\u6211\u4eec\u53ea\u8981\u63d0\u524d\u628a\u7d22\u5f15\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\u5c31\u53ef\u4ee5\u5feb\u901f\u7684\u627e\u5230\u7b2cN\u4e2afilter\u6570\u636e\u4e86\u3002\u4f46\u662f\u7d22\u5f15\u6570\u636e \u548cfilter\u6570\u636e\u672c\u8eab\u90fd\u662f\u653e\u5728\u540c\u4e00\u4e2ablock\u4e2d\u7684\uff0c\u6211\u4eec\u8981\u5982\u4f55\u627e\u5230\u7d22\u5f15\u6570\u636e\u5728Block\u4e2d\u7684\u4f4d\u7f6e\u7684\u5462? \u8fd9\u5c31\u9760\u5c3e\u90e8\u5b58\u653e\u7684offset\u4e86\uff0c\u5728data block\u5c3e\u90e8\u7684\u6709\u4e24\u4e2a\u56fa\u5b9a\u5927\u5c0f\u7684\u5185\u5bb9\uff0c\u5b83\u544a\u8bc9\u6211\u4eec\u7f29\u5f71\u6570\u636e\u7684\u4f4d\u7f6e\uff0c \u6709\u4e86\u8fd9\u4e2a\u4f4d\u7f6e\u540e\u5c31\u53ef\u4ee5\u5feb\u901f\u627e\u5230\u7d22\u5f15\u6570\u636e\u4e86\u3002\u901a\u8fc7\u4e0b\u9762\u7684 FilterBlockReader \u4e5f\u53ef\u4ee5\u9a8c\u8bc1\u6211\u4eec\u4e0a\u8ff0\u5206\u6790\u7684\u7ed3\u8bba\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 FilterBlockReader :: FilterBlockReader ( const FilterPolicy * policy , const Slice & contents ) : policy_ ( policy ), data_ ( nullptr ), offset_ ( nullptr ), num_ ( 0 ), base_lg_ ( 0 ) { size_t n = contents . size (); // \u81f3\u5c11\u9700\u8981 1 + 4 \u4e2a\u5b57\u8282\uff0c1\u4e2a\u5b57\u8282\u5b58\u653eBase lg\u30014\u4e2a\u5b57\u8282filter offset\u4f4d\u7f6e if ( n < 5 ) return ; // 1 byte for base_lg_ and 4 for start of offset array // \u5148\u83b7\u53d6\u5230base lg base_lg_ = contents [ n - 1 ]; // \u83b7\u53d6\u5230filter offset\u4f4d\u7f6e uint32_t last_word = DecodeFixed32 ( contents . data () + n - 5 ); if ( last_word > n - 5 ) return ; data_ = contents . data (); offset_ = data_ + last_word ; // \u83b7\u53d6\u6709\u591a\u5c11\u4e2afilter\u6570\u636e num_ = ( n - 5 - last_word ) / 4 ; } bool FilterBlockReader :: KeyMayMatch ( uint64_t block_offset , const Slice & key ) { // block offset / base lg\u5c31\u53ef\u4ee5\u8ba1\u7b97\u51fa\u5bf9\u5e94\u7684filter\u6570\u636e\u5728\u54ea\u4e2a\u4f4d\u7f6e uint64_t index = block_offset >> base_lg_ ; if ( index < num_ ) { //\u627e\u5230\u5bf9\u5e94filter\u7684\u4f4d\u7f6e\uff0c\u4ee5\u53ca\u4e0b\u4e00\u4e2afilter\u7684\u4f4d\u7f6e uint32_t start = DecodeFixed32 ( offset_ + index * 4 ); uint32_t limit = DecodeFixed32 ( offset_ + index * 4 + 4 ); // \u786e\u8ba4\u6570\u636e\u662f\u5408\u6cd5\u7684\uff0c\u5c31\u5c06filter\u6570\u636e\u4fdd\u5b58\u4e0b\u6765\uff0c\u7136\u540e\u5f00\u59cb\u8fdb\u884c\u8fc7\u6ee4\u5668\u5339\u914d if ( start <= limit && limit <= static_cast < size_t > ( offset_ - data_ )) { Slice filter = Slice ( data_ + start , limit - start ); return policy_ -> KeyMayMatch ( key , filter ); } else if ( start == limit ) { // Empty filters do not match any keys return false ; } } return true ; // Errors are treated as potential matches } Filter block\u672c\u8d28\u4e0a\u4e5f\u662f\u4e00\u4e2a\u548cData Block\u4e00\u6837\u7684Block\u5757\uff0c\u4ed6\u4eec\u90fd\u662f\u4e00\u8d77\u653e\u5728\u4e00\u4e2asstable\u6587\u4ef6\u4e2d\u7684\uff0c\u90a3\u6211\u4eec\u5982\u4f55\u77e5\u9053Filter Block\u5728\u6587\u4ef6\u4e2d\u7684\u4f4d\u7f6e\u5462? \u5728Leveldb\u4e2d\u662f\u901a\u8fc7meta index block\u6765\u8fdb\u884c\u7d22\u5f15\u7684\uff0c\u8fd9\u662f\u4e00\u4e2a\u548cData Block\u683c\u5f0f\u76f8\u540c\u7684block\uff0c\u4e5f\u662fkey/value\u5f62\u5f0f\uff0ckey\u5c31\u662f\uff0c\"filter.\"\u4e0e\u8fc7\u6ee4\u5668\u540d\u5b57\u7ec4\u6210\u7684\u5e38\u91cf\u5b57\u7b26\u4e32\uff0c value\u4e3afilter block\u5728sstable\u4e2d\u7684\u7d22\u5f15\u4fe1\u606f\u5e8f\u5217\u5316\u540e\u7684\u5185\u5bb9\uff0c\u7d22\u5f15\u4fe1\u606f\u5305\u62ec\uff1a \u5728sstable\u4e2d\u7684\u504f\u79fb\u91cf \u6570\u636e\u957f\u5ea6 \u7d22\u5f15\u4fe1\u606f\u5728Leveldb\u4e2d\u4f7f\u7528BlockHandle\u5bf9\u8c61\u6765\u8868\u793a\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 // BlockHandle is a pointer to the extent of a file that stores a data // block or a meta block. class BlockHandle { public : // Maximum encoding length of a BlockHandle enum { kMaxEncodedLength = 10 + 10 }; BlockHandle (); // The offset of the block in the file. uint64_t offset () const { return offset_ ; } void set_offset ( uint64_t offset ) { offset_ = offset ; } // The size of the stored block uint64_t size () const { return size_ ; } void set_size ( uint64_t size ) { size_ = size ; } void EncodeTo ( std :: string * dst ) const ; Status DecodeFrom ( Slice * input ); private : uint64_t offset_ ; uint64_t size_ ; }; \u9664\u4e86filter block\u9700\u8981\u7d22\u5f15\uff0c\u6211\u4eec\u7684Data Block\u4e5f\u9700\u8981\u7d22\u5f15\uff0cLeveldb\u4e2d\u901a\u8fc7index block\u6765\u5bf9Data Block\u8fdb\u884c\u7d22\u5f15\uff0c\u5176block\u7684\u683c\u5f0f\u548cData Block\u4e00\u6837\uff0c\u4e5f\u662fkey/value \u5f62\u5f0f\uff0c\u5176key\u4e3a\u5bf9\u5e94Data Block\u7684\u6700\u5927key\uff0cvalue\u4e3aData Block\u5728sstable\u4e2d\u7684\u7d22\u5f15\u4fe1\u606f\u5e8f\u5217\u5316\u540e\u7684\u5185\u5bb9\uff0c\u4e5f\u5c31\u662foffset\u548csize\u3002 \u53ef\u4ee5\u770b\u51fameta index block\u548cindex block\u7528\u9014\u662f\u76f8\u540c\u7684\uff0c\u90fd\u662f\u4e3a\u4e86\u5bf9\u67d0\u4e00\u7c7bblock\u7684\u7d22\u5f15\uff0c\u800c\u4e14\u8fd9\u4e24\u7c7bblock\u548cData Block\u672c\u8eab\u7684\u683c\u5f0f\u53c8\u662f\u76f8\u540c\u7684\uff0c\u56e0\u6b64\u53ef\u4ee5\u5b8c\u5168\u590d\u7528\u76f8\u540c\u7684DBlock\u5bf9\u8c61\u3002 \u6700\u540e\u4e3a\u4e86\u7d22\u5f15meta index block\u548cindex block\uff0cLeveldb\u5728\u6574\u4e2asstable\u7684\u5c3e\u90e8\u6dfb\u52a0\u4e86Footer\uff0c\u76ee\u7684\u662f\u4e3a\u4e86\u6dfb\u52a0\u4e00\u4e2amagic number\u4ee5\u786e\u4fddsstable\u662f\u5b8c\u6574\u7684\uff0c\u4ee5\u53ca\u5bf9meta index block index block\u8fdb\u884c\u7d22\u5f15\u3002\u4e0b\u9762\u662ffooter\u7684\u683c\u5f0f\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 Status Footer::DecodeFrom ( Slice * input ) { // \u89e3\u7801\u51famagic number const char * magic_ptr = input -> data () + kEncodedLength - 8 ; const uint32_t magic_lo = DecodeFixed32 ( magic_ptr ); const uint32_t magic_hi = DecodeFixed32 ( magic_ptr + 4 ); const uint64_t magic = (( static_cast < uint64_t > ( magic_hi ) << 32 ) | ( static_cast < uint64_t > ( magic_lo ))); if ( magic != kTableMagicNumber ) { return Status :: Corruption ( \"not an sstable (bad magic number)\" ); } // \u89e3\u7801\u51fameta index\u7684\u7d22\u5f15\u4fe1\u606f Status result = metaindex_handle_ . DecodeFrom ( input ); if ( result . ok ()) { // \u89e3\u7801\u51faindex\u7684\u7d22\u5f15\u4fe1\u606f result = index_handle_ . DecodeFrom ( input ); } if ( result . ok ()) { // We skip over any leftover data (just padding for now) in \"input\" const char * end = magic_ptr + 8 ; * input = Slice ( end , input -> data () + input -> size () - end ); } return result ; } \u5230\u6b64\u7ef4\u6301sstable\u5c31\u5168\u90e8\u5206\u6790\u5b8c\u4e86\uff0c\u4e00\u4e2asstable\u4e2d\u5305\u542b\u4e865\u7c7b\u4fe1\u606f\uff0cData block\u3001Filter block\u3001meta index block\u3001index block\u3001footer\u3002 \u8bfb\u53d6sstable\u7684\u65f6\u5019 \u5148\u8bfb\u53d6footer\uff0c\u901a\u8fc7footer\u627e\u5230index block\u548cmeta index block\uff0c\u6709\u4e86meta index block\u540e\u5c31\u53ef\u4ee5\u5bf9\u67e5\u8be2\u505afilter\u8fc7\u6ee4\uff0c\u6709\u4e86index block\u5c31\u53ef\u4ee5\u5b9a\u4f4d\u5230Data Block \u6700\u7ec8\u901a\u8fc7\u904d\u5386Data block\u627e\u5230\u6700\u7ec8\u8981\u67e5\u8be2\u7684key\u6240\u5bf9\u5e94\u7684value\u3002\u5bf9\u7167\u7684\u4ee3\u7801\u6211\u4eec\u518d\u6b21\u9a8c\u8bc1\u6211\u4eec\u7684\u731c\u60f3\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 Status Table::Open ( const Options & options , RandomAccessFile * file , uint64_t size , Table ** table ) { * table = nullptr ; if ( size < Footer :: kEncodedLength ) { return Status :: Corruption ( \"file is too short to be an sstable\" ); } char footer_space [ Footer :: kEncodedLength ]; Slice footer_input ; // 1. \u8bfb\u53d6footer Status s = file -> Read ( size - Footer :: kEncodedLength , Footer :: kEncodedLength , & footer_input , footer_space ); if ( ! s . ok ()) return s ; Footer footer ; s = footer . DecodeFrom ( & footer_input ); if ( ! s . ok ()) return s ; // Read the index block // 2. \u8bfb\u53d6index block BlockContents index_block_contents ; ReadOptions opt ; if ( options . paranoid_checks ) { opt . verify_checksums = true ; } // \u901a\u8fc7index block\u7684\u7d22\u5f15\u4fe1\u606f\u627e\u5230index block s = ReadBlock ( file , opt , footer . index_handle (), & index_block_contents ); if ( s . ok ()) { // We've successfully read the footer and the index block: we're // ready to serve requests. Block * index_block = new Block ( index_block_contents ); Rep * rep = new Table :: Rep ; rep -> options = options ; rep -> file = file ; rep -> metaindex_handle = footer . metaindex_handle (); rep -> index_block = index_block ; rep -> cache_id = ( options . block_cache ? options . block_cache -> NewId () : 0 ); rep -> filter_data = nullptr ; rep -> filter = nullptr ; * table = new Table ( rep ); // 3. \u8bfb\u53d6filter block ( * table ) -> ReadMeta ( footer ); } return s ; } \u4e0a\u9762\u7684\u4ee3\u7801\u662f\u6253\u5f00sstable\u6587\u4ef6\uff0c\u6784\u5efa\u4e00\u4e2aTable\u7684\u8fc7\u7a0b\uff0c\u53ef\u4ee5\u770b\u5230\u548c\u6211\u4eec\u4e0a\u8ff0\u63cf\u8ff0\u7684\u57fa\u672c\u4e00\u81f4\uff0c\u901a\u8fc7footer\u52a0\u8f7d\u4e86filter block\u548cindex block\u3002 \u63a5\u7740\u6211\u4eec\u6765\u770b\u4e0b\u5982\u679c\u5728Table\u67e5\u8be2key\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 Status Table::InternalGet ( const ReadOptions & options , const Slice & k , void * arg , void ( * handle_result )( void * , const Slice & , const Slice & )) { Status s ; // 1. \u904d\u5386index block\u4e2d\u7684\u5185\u5bb9 Iterator * iiter = rep_ -> index_block -> NewIterator ( rep_ -> options . comparator ); // 2. \u901a\u8fc7key\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u8981\u67e5\u8be2key\u7684entry(index block\u7684key\u5c31\u662f\u6bcf\u4e2adata block\u4e2d\u7684\u6700\u5927key) iiter -> Seek ( k ); if ( iiter -> Valid ()) { // \u83b7\u53d6value(value\u5c31\u662f\u771f\u6b63\u7684Data Block\u7684\u7d22\u5f15) Slice handle_value = iiter -> value (); // 3. \u5148\u8fdb\u884cfilter\u8fc7\u6ee4 FilterBlockReader * filter = rep_ -> filter ; BlockHandle handle ; if ( filter != nullptr && handle . DecodeFrom ( & handle_value ). ok () && ! filter -> KeyMayMatch ( handle . offset (), k )) { // Not found } else { // \u8bfb\u53d6Data Block Iterator * block_iter = BlockReader ( this , options , iiter -> value ()); // 4. \u627e\u5230key\u7684\u4f4d\u7f6e\uff0c\u8c03\u7528handle_result\u5904\u7406\u67e5\u8be2\u5230\u7684\u7ed3\u679c block_iter -> Seek ( k ); if ( block_iter -> Valid ()) { ( * handle_result )( arg , block_iter -> key (), block_iter -> value ()); } s = block_iter -> status (); delete block_iter ; } } if ( s . ok ()) { s = iiter -> status (); } delete iiter ; return s ; } Table Cache \u901a\u8fc7Table Cache\u7f13\u5b58Table(\u662fsstable\u52a0\u8f7d\u5230\u5185\u5b58\u540e\u7684\u5f62\u5f0f)\uff0c\u7f13\u5b58\u7684key\u662ffile_number 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 Status TableCache::Get ( const ReadOptions & options , uint64_t file_number , uint64_t file_size , const Slice & k , void * arg , void ( * handle_result )( void * , const Slice & , const Slice & )) { Cache :: Handle * handle = nullptr ; // \u6839\u636e\u7ed9\u7684file number\u3001file size\u7b49\u4fe1\u606f\u5c06sstable\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\uff0c\u7136\u540e\u8fdb\u884c\u67e5\u8be2\u3002 // TableCache\u5c31\u662f\u7528\u6765\u7f13\u5b58sstable\u7684\u3002 Status s = FindTable ( file_number , file_size , & handle ); if ( s . ok ()) { Table * t = reinterpret_cast < TableAndFile *> ( cache_ -> Value ( handle )) -> table ; s = t -> InternalGet ( options , k , arg , handle_result ); cache_ -> Release ( handle ); } return s ; } Status TableCache::FindTable ( uint64_t file_number , uint64_t file_size , Cache :: Handle ** handle ) { Status s ; char buf [ sizeof ( file_number )]; EncodeFixed64 ( buf , file_number ); // file number\u4f5c\u4e3aTable\u7684key Slice key ( buf , sizeof ( buf )); // \u5148\u67e5\u8be2\u8fd9\u4e2afile number\u5bf9\u5e94\u7684sstable\u662f\u5426\u5df2\u7ecf\u7f13\u5b58 * handle = cache_ -> Lookup ( key ); // \u5982\u679c\u6ca1\u6709\u7f13\u5b58\u5c31\u521b\u5efaTable\uff0c\u5e76\u7f13\u5b58\u8d77\u6765 if ( * handle == nullptr ) { std :: string fname = TableFileName ( dbname_ , file_number ); RandomAccessFile * file = nullptr ; Table * table = nullptr ; s = env_ -> NewRandomAccessFile ( fname , & file ); if ( ! s . ok ()) { std :: string old_fname = SSTTableFileName ( dbname_ , file_number ); if ( env_ -> NewRandomAccessFile ( old_fname , & file ). ok ()) { s = Status :: OK (); } } if ( s . ok ()) { s = Table :: Open ( options_ , file , file_size , & table ); } if ( ! s . ok ()) { assert ( table == nullptr ); delete file ; // We do not cache error results so that if the error is transient, // or somebody repairs the file, we recover automatically. } else { TableAndFile * tf = new TableAndFile ; tf -> file = file ; tf -> table = table ; * handle = cache_ -> Insert ( key , tf , 1 , & DeleteEntry ); } } return s ; } Version / VersionEdit / VersionSet \u6bcf\u6b21\u6211\u4eec\u8fdb\u884cCompation\u7684\u65f6\u5019\uff0c\u53ef\u80fd\u4f1a\u65b0\u589esstable\u6587\u4ef6\uff0c\u4e5f\u6709\u53ef\u80fd\u4f1a\u5220\u9664\u8001\u7684sstable\u6587\u4ef6\uff0c\u65e0\u8bba\u5220\u9664\u8fd8\u662f\u65b0\u589e\uff0c\u8fd9\u4e9b\u53d8\u5316\u90fd\u4f1a\u751f\u6210VersionEdit\u5bf9\u8c61\uff0c\u901a\u8fc7\u8fd9\u4e2a\u5bf9\u8c61\u6765\u63cf\u8ff0 sstable\u6587\u4ef6\u7684\u53d8\u5316\u3002VersionEdit\u9700\u8981Apply\u5230Version\u4e2d\uff0c\u901a\u8fc7Version\u6211\u4eec\u5c31\u53ef\u4ee5\u77e5\u9053\u5f53\u524d\u7248\u672c\u4e0b\u6709\u591a\u5c11sstable\u6587\u4ef6\u3002\u56e0\u4e3aLeveldb\u53ef\u80fd\u4f1a\u5b58\u5728\u591a\u4e2a\u7248\u672c\uff0c\u56e0\u6b64\u5c31\u6709\u4e86 VersionSet\uff0c\u901a\u8fc7\u94fe\u8868\u7684\u65b9\u5f0f\u6765\u7ba1\u7406\u591a\u4e2aVersion\u3002\u4e0b\u9762\u662f\u4e00\u4e2aVersionEdit\u5982\u4f55Apply\u5230Version\u7684\u8fc7\u7a0b\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 Status VersionSet::LogAndApply ( VersionEdit * edit , port :: Mutex * mu ) { if ( edit -> has_log_number_ ) { assert ( edit -> log_number_ >= log_number_ ); assert ( edit -> log_number_ < next_file_number_ ); } else { edit -> SetLogNumber ( log_number_ ); } if ( ! edit -> has_prev_log_number_ ) { edit -> SetPrevLogNumber ( prev_log_number_ ); } edit -> SetNextFile ( next_file_number_ ); edit -> SetLastSequence ( last_sequence_ ); // 1. \u521b\u5efa\u4e00\u4e2a\u65b0\u7684Version Version * v = new Version ( this ); { // 2. \u5c06VersionEdit\u505aApply\u5f53\u524d\u7684Version\uff0c\u7136\u540e\u4ea7\u751f\u4e00\u4e2a\u65b0\u7684Version Builder builder ( this , current_ ); builder . Apply ( edit ); builder . SaveTo ( v ); } // 3. \u63d0\u524d\u8ba1\u7b97\u51fa\u4e0b\u4e00\u6b21Compation\u9700\u8981\u5408\u5e76\u7684level\u548csstable\u6587\u4ef6 Finalize ( v ); // 4. \u6700\u540e\u5c06Version\u4fe1\u606f\u5b58\u5165\u5230Manifest\u6587\u4ef6\u4e2d\u3002 // Initialize new descriptor log file if necessary by creating // a temporary file that contains a snapshot of the current version. std :: string new_manifest_file ; Status s ; if ( descriptor_log_ == nullptr ) { // No reason to unlock *mu here since we only hit this path in the // first call to LogAndApply (when opening the database). assert ( descriptor_file_ == nullptr ); new_manifest_file = DescriptorFileName ( dbname_ , manifest_file_number_ ); edit -> SetNextFile ( next_file_number_ ); s = env_ -> NewWritableFile ( new_manifest_file , & descriptor_file_ ); if ( s . ok ()) { descriptor_log_ = new log :: Writer ( descriptor_file_ ); s = WriteSnapshot ( descriptor_log_ ); } } // Unlock during expensive MANIFEST log write { mu -> Unlock (); // Write new record to MANIFEST log if ( s . ok ()) { std :: string record ; edit -> EncodeTo ( & record ); s = descriptor_log_ -> AddRecord ( record ); if ( s . ok ()) { s = descriptor_file_ -> Sync (); } if ( ! s . ok ()) { Log ( options_ -> info_log , \"MANIFEST write: %s \\n \" , s . ToString (). c_str ()); } } // If we just created a new descriptor file, install it by writing a // new CURRENT file that points to it. if ( s . ok () && ! new_manifest_file . empty ()) { s = SetCurrentFile ( env_ , dbname_ , manifest_file_number_ ); } mu -> Lock (); } // Install the new version // 5. \u91cd\u65b0\u8bbe\u7f6e\u5f53\u524dVersion\u4e3a\u6700\u65b0\u4ea7\u751f\u7684Version if ( s . ok ()) { AppendVersion ( v ); log_number_ = edit -> log_number_ ; prev_log_number_ = edit -> prev_log_number_ ; } else { delete v ; if ( ! new_manifest_file . empty ()) { delete descriptor_log_ ; delete descriptor_file_ ; descriptor_log_ = nullptr ; descriptor_file_ = nullptr ; env_ -> RemoveFile ( new_manifest_file ); } } return s ; } Manifest Compation \u5728Leveldb\u4e2dCompation\u5206\u4e3a\u4e24\u79cd\uff0c\u7b2c\u4e00\u79cd\u88ab\u79f0\u4e3aMinor Compation\uff0c\u53ea\u6709\u5f53immutable\u5b58\u5728\u7684\u65f6\u5019\u624d\u4f1a\u89e6\u53d1\uff0c\u5c06immutable\u53d8\u6210sstable\uff0c\u5176\u8fc7\u7a0b\u5982\u4e0b: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 void DBImpl::CompactMemTable () { mutex_ . AssertHeld (); assert ( imm_ != nullptr ); // Save the contents of the memtable as a new Table VersionEdit edit ; Version * base = versions_ -> current (); base -> Ref (); // 1. \u4ea7\u751f\u65b0\u7684sstable\u6587\u4ef6\uff0c\u56e0\u6b64\u8fd9\u91cc\u521d\u59cb\u5316\u4e86VersionEdit\u6765\u8bb0\u5f55sstable\u6587\u4ef6\u7684\u53d8\u5316 Status s = WriteLevel0Table ( imm_ , & edit , base ); base -> Unref (); if ( s . ok () && shutting_down_ . load ( std :: memory_order_acquire )) { s = Status :: IOError ( \"Deleting DB during memtable compaction\" ); } // Replace immutable memtable with the generated Table if ( s . ok ()) { edit . SetPrevLogNumber ( 0 ); edit . SetLogNumber ( logfile_number_ ); // Earlier logs no longer needed // 2. \u5e94\u7528\u5230VersionSet\u4e2d\u3002 s = versions_ -> LogAndApply ( & edit , & mutex_ ); } if ( s . ok ()) { // 3. \u91ca\u653eimmutable\uff0c\u7136\u540e\u5f02\u5e38\u4e00\u4e9b\u5e9f\u5f03\u7684\u6587\u4ef6 // Commit to the new state imm_ -> Unref (); imm_ = nullptr ; has_imm_ . store ( false , std :: memory_order_release ); RemoveObsoleteFiles (); } else { RecordBackgroundError ( s ); } } \u4ea7\u751f\u7684sstable\u6587\u4ef6\u4e5f\u662f\u5206\u4e3a\u591a\u4e2alevel\u7684\u3002\u5728sstable\u4e2d\u67e5\u627e\u7684\u65f6\u5019\uff0c\u5148\u4ece\u9ad8level\u7684sstable\u6587\u4ef6\u4e2d\u67e5\u627e\uff0c\u7136\u540e\u4f9d\u6b21\u4ece\u4e0b\u4e00\u4e2alevel\u4e2d\u8fdb\u884c\u67e5\u627e\uff0c\u9ad8level\u7684sstable\u5305\u542b\u7684key\u8303\u56f4\u8d8a\u5e7f\u3002 \u4e0a\u9762\u7684 WriteLevel0Table \u4e5f\u5e76\u975e\u53ea\u662f\u5c06sstable\u5199\u5165\u5230level0\u4e2d\uff0c\u800c\u662f\u4f1a\u901a\u8fc7\u4e0b\u9762\u8fd9\u4e2a\u51fd\u6570\u627e\u5230\u4e00\u4e2a\u5408\u9002\u7684level\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 int Version::PickLevelForMemTableOutput ( const Slice & smallest_user_key , const Slice & largest_user_key ) { int level = 0 ; // 1. \u5148\u5224\u65adlevel0\u4e2d\u7684sstable\u548c\u65b0\u589e\u7684sstable\u662f\u5426\u91cd\u53e0\uff0c\u5982\u679c\u91cd\u53e0\u5c31\u76f4\u63a5\u6dfb\u52a0\u8fdb\u53bb\u7b49\u7740Major Compaction if ( ! OverlapInLevel ( 0 , & smallest_user_key , & largest_user_key )) { // Push to next level if there is no overlap in next level, // and the #bytes overlapping in the level after that are limited. InternalKey start ( smallest_user_key , kMaxSequenceNumber , kValueTypeForSeek ); InternalKey limit ( largest_user_key , 0 , static_cast < ValueType > ( 0 )); std :: vector < FileMetaData *> overlaps ; // 2. \u5982\u679c\u4e0d\u91cd\u53e0\u5c31\u7ee7\u7eed\u5f80\u4e0b\u4e00\u4e2alevel\u67e5\u627e\uff0c\u5982\u679c\u4e0b\u4e00\u4e2alevel\u4e5f\u4e0d\u91cd\u53e0\uff0c\u5e76\u4e14\u4e0b\u4e0b\u4e2alevel\u91cd\u53e0\u7684\u5927\u5c0f\u5c0f\u4e8e 10 * 2M\u3002 while ( level < config :: kMaxMemCompactLevel ) { if ( OverlapInLevel ( level + 1 , & smallest_user_key , & largest_user_key )) { break ; } if ( level + 2 < config :: kNumLevels ) { // Check that file does not overlap too many grandparent bytes. GetOverlappingInputs ( level + 2 , & start , & limit , & overlaps ); const int64_t sum = TotalFileSize ( overlaps ); if ( sum > MaxGrandParentOverlapBytes ( vset_ -> options_ )) { break ; } } // 3. \u7b26\u5408\u6761\u4ef6\u9012\u589elevel\uff0c\u7ee7\u7eed\u67e5\u627e\u3002 level ++ ; } } return level ; } \u8fd9\u4e48\u505a\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u907f\u514dCompation\uff0c\u5f53\u4e00\u4e2asstable\u6587\u4ef6\u51c6\u5907\u6dfb\u52a0\u8fdb\u53bb\u7684\u65f6\u5019\uff0c\u5982\u679c\u548clevel0\u5e76\u6ca1\u6709\u4efb\u4f55\u952e\u91cd\u53e0\uff0c\u5e76\u4e14\u4e0a\u4e00\u5c42\u4e5f\u6ca1\u6709\u91cd\u53e0\uff0c\u800c\u4e14\u4e0a\u4e0a\u5c42\u91cd\u53e0\u5927\u5c0f\u4e0d\u8d85\u8fc720M\uff0c\u90a3\u4e48\u53ef\u4ee5\u76f4\u63a5 \u5c06\u6587\u4ef6\u653e\u5230\u4e0a\u4e00\u5c42\uff0c\u907f\u514dMajor Compaction\uff0c\u7b97\u662f\u4e00\u79cd\u4f18\u5316\u5427\u3002\u4e0d\u8fc7\u8fd9\u4e2a\u6761\u4ef6\u8fd8\u662f\u633a\u82db\u523b\u7684\u3002\u540e\u9762\u5728\u8c08\u5230Major Compaction\u7684\u65f6\u5019\u4f1a\u8bf4\u5230leveldb\u4e2d\u66f4\u591a\u5173\u4e8eCompation\u7684\u4f18\u5316\u3002 \u5230\u6b64\u4e3a\u6b62minor Compation\u7b97\u662f\u8bb2\u5b8c\u4e86\uff0c\u8fd8\u662f\u6bd4\u8f83\u7b80\u5355\u7684\uff0c\u8fd9\u4e5f\u662fleveldb\u5bf9\u4e8eMinor Compation\u7684\u8981\u6c42\uff0c\u8981\u6c42\u5176\u5c3d\u53ef\u80fd\u77ed\u7684\u65f6\u95f4\u5185\u5b8c\u6210\uff0c\u5426\u5219\u4f1a\u5835\u585e\u6b63\u5e38\u7684\u5199\u5165\u64cd\u4f5c\uff0c\u56e0\u6b64Minor Compation \u7684\u4f18\u5148\u7ea7\u662f\u9ad8\u4e8emajor compation\u3002 Leveldb\u4e2d\u9664\u4e86\u4e0a\u9762\u8c08\u5230\u7684Minor Compation\u5916\uff0c\u8fd8\u6709\u4e00\u4e2a\u6700\u91cd\u8981\u7684Compation\u5c31\u662fMajor Compation\u4e86\uff0c\u4e0a\u9762\u8bf4\u5230\u4e00\u6b21minor compaction\u7684\u4ea7\u51fa\u662f\u4e00\u4e2a0\u5c42\u7684sstable\u6587\u4ef6(\u4e5f\u6709\u53ef\u80fd\u56e0\u4e3a\u4f18\u5316\u4ea7\u751f\u4e00\u4e2a\u9ad8level\u7684\u6587\u4ef6)\uff0c \u5176\u4e2d\u5305\u542b\u4e86\u6240\u6709\u7684\u5185\u5b58\u6570\u636e\u3002\u4f46\u662f\u82e5\u5e72\u4e2a0\u5c42\u6587\u4ef6\u4e2d\u662f\u53ef\u80fd\u5b58\u5728\u6570\u636eoverlap\u7684\u3002\u5982\u679c\u53ea\u6709minor compaction\uff0c\u90a3\u4e48\u8981\u67e5\u8be2\u4e00\u4e2a\u6570\u636e\u7684\u65f6\u5019\uff0c\u5c31\u5bfc\u81f4\u4e86\u6211\u4eec\u9700\u8981\u904d\u5386\u6240\u6709\u7684level0\u6587\u4ef6\u3002\u4e3a\u6b64\u6709\u4e86Major Compation\u3002 \u901a\u8fc7Major Compation\u5c06level0\u5c42\u4e2d\u91cd\u53e0\u7684\u6587\u4ef6\u8fdb\u884cmerge\u53d8\u6210\u4e0d\u91cd\u53e0\u7684\u6587\u4ef6\uff0c\u5e76\u653e\u5230level1\u4e2d\u3002\u4ee5\u786e\u4fddlevel1\u7684\u6587\u4ef6\u90fd\u662f\u4e0d\u91cd\u53e0\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u5728level1\u4e2d\u641c\u7d22\u4f9d\u6b21\u5c31\u53ef\u4ee5\u627e\u5230\u76ee\u7684\u6587\u4ef6\u4e86\u3002\u90a3\u4e48\u5230\u5e95\u4f55\u65f6\u89e6\u53d1Major Compation\u5462? Major Compation\u7684\u8fc7\u7a0b\u662f\u5982\u4f55\u7684? \u9996\u5148\u6765\u770b\u4e0bMajor Compation\u53d1\u751f\u7684\u6761\u4ef6: \u5f530\u5c42\u6587\u4ef6\u6570\u8d85\u8fc7\u9884\u5b9a\u7684\u4e0a\u9650\uff08\u9ed8\u8ba4\u4e3a4\u4e2a\uff09 \u5f53level i\u5c42\u6587\u4ef6\u7684\u603b\u5927\u5c0f\u8d85\u8fc7(10 ^ i) MB\uff1b \u5f53\u67d0\u4e2a\u6587\u4ef6\u65e0\u6548\u8bfb\u53d6\u7684\u6b21\u6570\u8fc7\u591a \u6bcf\u6b21\u505a\u5b8cMinor Compation\u7684\u65f6\u5019\u90fd\u4f1a\u8c03\u7528 Finalize \u6765\u8ba1\u7b97Major Compation\u9700\u8981\u64cd\u4f5c\u7684\u6587\u4ef6\u548clevel\uff0c\u8ba1\u7b97\u7684\u6761\u4ef6\u5c31\u662f\u4e0a\u9762\u7684\u7b2c\u4e00\u6761\u548c\u7b2c\u4e8c\u6761\uff0c\u4e0b\u9762\u8fd9\u4e2a\u51fd\u6570\u4f1a\u5c06\u7b2c\u4e00\u4e2a\u548c\u7b2c\u4e8c\u6761\u4ef6\u8f6c\u6362\u5206\u6570\u8fdb\u884c\u8ba1\u7b97\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 void VersionSet::Finalize ( Version * v ) { // Precomputed best level for next compaction int best_level = -1 ; double best_score = -1 ; for ( int level = 0 ; level < config :: kNumLevels - 1 ; level ++ ) { double score ; if ( level == 0 ) { // We treat level-0 specially by bounding the number of files // instead of number of bytes for two reasons: // // (1) With larger write-buffer sizes, it is nice not to do too // many level-0 compactions. // // (2) The files in level-0 are merged on every read and // therefore we wish to avoid too many files when the individual // file size is small (perhaps because of a small write-buffer // setting, or very high compression ratios, or lots of // overwrites/deletions). score = v -> files_ [ level ]. size () / static_cast < double > ( config :: kL0_CompactionTrigger ); } else { // Compute the ratio of current size to size limit. const uint64_t level_bytes = TotalFileSize ( v -> files_ [ level ]); score = static_cast < double > ( level_bytes ) / MaxBytesForLevel ( options_ , level ); } if ( score > best_score ) { best_level = level ; best_score = score ; } } v -> compaction_level_ = best_level ; v -> compaction_score_ = best_score ; } \u6bcf\u6b21\u8fdb\u884c\u6570\u636e\u67e5\u8be2\u7684\u65f6\u5019\uff0c\u90fd\u4f1a\u4ea7\u751fstats\uff0c\u8fd9\u4e9bstats\u8bb0\u5f55\u4e86\u54ea\u4e2a\u6587\u4ef6\u672a\u67e5\u8be2\u5230\u7684\u6b21\u6570\uff0c\u5982\u679c\u65e0\u6548\u8bfb\u53d6\u6b21\u6570\u592a\u591a\u5c31\u4f1a\u8bb0\u5f55\u4e0b\u6765\uff0c\u4fdd\u5b58\u5728 file_to_compact_ \u4e2d\uff0c\u8fd9\u5c31\u662f\u5bf9\u5e94\u5230\u4e0a\u9762\u7684\u7b2c\u4e09\u4e2a\u6761\u4ef6\u3002 1 2 3 4 5 6 7 8 9 10 11 12 bool Version::UpdateStats ( const GetStats & stats ) { FileMetaData * f = stats . seek_file ; if ( f != nullptr ) { f -> allowed_seeks -- ; if ( f -> allowed_seeks <= 0 && file_to_compact_ == nullptr ) { file_to_compact_ = f ; file_to_compact_level_ = stats . seek_file_level ; return true ; } } return false ; } \u6700\u540e\u901a\u8fc7compaction_score_\u548cfile_to_compact_\u4e24\u4e2a\u503c\u6765\u51b3\u5b9a\u662f\u5426\u9700\u8981\u505aMajor Compation\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 // Returns true iff some level needs a compaction. bool NeedsCompaction () const { Version * v = current_ ; return ( v -> compaction_score_ >= 1 ) || ( v -> file_to_compact_ != nullptr ); } void DBImpl::MaybeScheduleCompaction () { mutex_ . AssertHeld (); if ( background_compaction_scheduled_ ) { // Already scheduled } else if ( shutting_down_ . load ( std :: memory_order_acquire )) { // DB is being deleted; no more background compactions } else if ( ! bg_error_ . ok ()) { // Already got an error; no more changes } else if ( imm_ == nullptr && manual_compaction_ == nullptr && ! versions_ -> NeedsCompaction ()) { // No work to be done } else { // \u5982\u679c\u6ee1\u8db3Compation\u7684\u6761\u4ef6\uff0c\u5f00\u59cb\u8fdb\u884c\u4e0b\u4e00\u6b21Compation background_compaction_scheduled_ = true ; env_ -> Schedule ( & DBImpl :: BGWork , this ); } } MaybeScheduleCompaction\u4f1a\u5728\u4ee5\u4e0b\u51e0\u4e2a\u5730\u65b9\u6267\u884c\u3002 \u4e0a\u4e00\u6b21Compation\u5b8c\u6210\u540e\uff0c\u4f1a\u8c03\u7528MaybeScheduleCompaction\uff0c\u51b3\u5b9a\u662f\u5426\u9700\u8981\u8fdb\u884c\u4e0b\u4e00\u6b21Compation \u6bcf\u6b21\u67e5\u8be2\u5b8c\u6570\u636e\u540e\uff0c\u4f1a\u8c03\u7528MaybeScheduleCompaction Mmemtab\u5207\u6362\u6210immutable\u7684\u65f6\u5019 RecordReadSample \u8bf4\u5b8c\u4e86Major Compation\u89e6\u53d1\u7684\u6761\u4ef6\uff0c\u90a3\u4e48\u63a5\u4e0b\u6765\u6211\u4eec\u6765\u770b\u770bMajor Compation\u7684\u8fc7\u7a0b\u662f\u5982\u4f55\u7684? 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 Compaction * VersionSet::PickCompaction () { Compaction * c ; int level ; // We prefer compactions triggered by too much data in a level over // the compactions triggered by seeks. const bool size_compaction = ( current_ -> compaction_score_ >= 1 ); const bool seek_compaction = ( current_ -> file_to_compact_ != nullptr ); if ( size_compaction ) { level = current_ -> compaction_level_ ; assert ( level >= 0 ); assert ( level + 1 < config :: kNumLevels ); c = new Compaction ( options_ , level ); // Pick the first file that comes after compact_pointer_[level] for ( size_t i = 0 ; i < current_ -> files_ [ level ]. size (); i ++ ) { FileMetaData * f = current_ -> files_ [ level ][ i ]; if ( compact_pointer_ [ level ]. empty () || icmp_ . Compare ( f -> largest . Encode (), compact_pointer_ [ level ]) > 0 ) { c -> inputs_ [ 0 ]. push_back ( f ); break ; } } if ( c -> inputs_ [ 0 ]. empty ()) { // Wrap-around to the beginning of the key space c -> inputs_ [ 0 ]. push_back ( current_ -> files_ [ level ][ 0 ]); } } else if ( seek_compaction ) { level = current_ -> file_to_compact_level_ ; c = new Compaction ( options_ , level ); c -> inputs_ [ 0 ]. push_back ( current_ -> file_to_compact_ ); } else { return nullptr ; } c -> input_version_ = current_ ; c -> input_version_ -> Ref (); // Files in level 0 may overlap each other, so pick up all overlapping ones if ( level == 0 ) { InternalKey smallest , largest ; GetRange ( c -> inputs_ [ 0 ], & smallest , & largest ); // Note that the next call will discard the file we placed in // c->inputs_[0] earlier and replace it with an overlapping set // which will include the picked file. current_ -> GetOverlappingInputs ( 0 , & smallest , & largest , & c -> inputs_ [ 0 ]); assert ( ! c -> inputs_ [ 0 ]. empty ()); } SetupOtherInputs ( c ); return c ; } FileType CURRENT \u91cc\u9762\u5b58\u653e\u4e86\u5f53\u524d\u7684MANIFEST\u6587\u4ef6\u540d\u79f0\uff0c\u901a\u8fc7CURRENT\u6587\u4ef6\u53ef\u4ee5\u627e\u5230MANIFEST\u6587\u4ef6\u8def\u5f84 LOCK \u6587\u4ef6\u9501\uff0c\u907f\u514d\u591a\u4e2a\u8fdb\u7a0b\u540c\u65f6\u64cd\u4f5c\u76f8\u540c\u7684\u6570\u636e\u5e93\u6587\u4ef6 LOG Leveldb\u81ea\u5df1\u7684\u65e5\u5fd7 LOG.old MANIFEST-[0-9]+ [0-9]+.(log|sst|ldb) \u53c2\u8003\u6587\u732e Leveldb-handbook","title":"Leveldb\u6e90\u7801\u5206\u6790"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/leveldb/leveldb/#leveldb","text":"","title":"Leveldb\u6e90\u7801\u5206\u6790"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/leveldb/leveldb/#skiplist","text":"Leveldb\u5185\u90e8\u7684Memtable\u5176\u6838\u5fc3\u5c31\u662fSkiplist\uff0c\u901a\u8fc7Skiplist\u6765\u5b58\u653e\u6240\u6709\u7684\u6570\u636e\uff0c\u9996\u5148\u6211\u4eec\u6765\u770b\u4e0bSkiplist\u7684\u7ed3\u6784\uff0c\u5982\u4e0b\u56fe: \u901a\u8fc7\u4e0a\u9762\u7684Skiplist\u7ed3\u6784\u53ef\u77e5\uff0c\u4e00\u4e2aSkiplist\u662f\u591a\u4e2a\u94fe\u8868\u7684\u96c6\u5408\uff0c\u6bcf\u4e00\u4e2a\u94fe\u8868\u90fd\u6709\u4e00\u4e2aheader\u6307\u9488\uff0c\u6307\u5411\u8fd9\u4e2a\u94fe\u8868\uff0cLeveldb\u4e2d\u4f7f\u7528\u4e00\u4e2a\u6570\u7ec4\u6765\u5b58\u50a8 \u6240\u6709\u7684\u94fe\u8868header. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 struct SkipList < Key , Comparator >:: Node { explicit Node ( const Key & k ) : key ( k ) {} Key const key ; // Accessors/mutators for links. Wrapped in methods so we can // add the appropriate barriers as necessary. Node * Next ( int n ) { assert ( n >= 0 ); // Use an 'acquire load' so that we observe a fully initialized // version of the returned Node. return next_ [ n ]. load ( std :: memory_order_acquire ); } void SetNext ( int n , Node * x ) { assert ( n >= 0 ); // Use a 'release store' so that anybody who reads through this // pointer observes a fully initialized version of the inserted node. next_ [ n ]. store ( x , std :: memory_order_release ); } // No-barrier variants that can be safely used in a few locations. Node * NoBarrier_Next ( int n ) { assert ( n >= 0 ); return next_ [ n ]. load ( std :: memory_order_relaxed ); } void NoBarrier_SetNext ( int n , Node * x ) { assert ( n >= 0 ); next_ [ n ]. store ( x , std :: memory_order_relaxed ); } private : // Array of length equal to the node height. next_[0] is lowest level link. // \u8fd9\u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u4f7f\u7528\u4e86C/C++\u4e2d\u7684\u67d4\u6027\u6570\u7ec4\u7684\u80fd\u529b\u3002 std :: atomic < Node *> next_ [ 1 ]; }; typename SkipList < Key , Comparator >:: Node * SkipList < Key , Comparator >:: NewNode ( const Key & key , int height ) { // \u6839\u636e\u6307\u5b9a\u7684\u9ad8\u5ea6\u5206\u914d\u6570\u7ec4\u3002 char * const node_memory = arena_ -> AllocateAligned ( sizeof ( Node ) + sizeof ( std :: atomic < Node *> ) * ( height - 1 )); return new ( node_memory ) Node ( key ); } \u8fd9\u4e2a\u94fe\u8868\u6570\u7ec4\u4e2d\u7684\u7b2c\u4e00\u4e2a\u94fe\u8868\u88ab\u79f0\u4e3aLevel0\uff0c\u901a\u8fc7\u8fd9\u4e2a\u94fe\u8868\u53ef\u4ee5\u904d\u5386\u6240\u6709\u7684\u6570\u636e\uff0cLevele1\u4ee5\u53ca\u540e\u9762\u7684\u94fe\u8868\u5219\u8fd9\u662f\u5305\u542b\u4e86\u90e8\u5206\u6570\u636e\u3002\u800c\u4e14\u8d8a\u5927\u7684level\u6240\u5305\u542b\u7684\u6570\u636e\u8d8a\u5c11\u3002 \u8fd9\u4e48\u505a\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u5728\u67e5\u627e\u7684\u65f6\u5019\u53ef\u4ee5\u66f4\u5feb\u7684\u627e\u5230\u6570\u636e\u7684\u4f4d\u7f6e\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u6765\u770b\u4e0b\u6574\u4e2a\u67e5\u627e\u8fc7\u7a0b\u662f\u5982\u4f55\u7684\uff0c \u9996\u5148\u4ece\u6700\u5927\u7684Level\u6240\u5bf9\u5e94\u7684\u94fe\u8868\u8fdb\u884c\u67e5\u627e(\u4e0a\u56fe\u4e2d\u5c31\u662flevel3) \u5728\u5f53\u524d\u904d\u5386\u94fe\u8868\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u6216\u8005\u7b49\u4e8e\u8981\u67e5\u627e\u7684key\u7684\u4f4d\u7f6e\u6216\u8005\u76f4\u63a5\u67e5\u627e\u5230\u7ed3\u675f(\u4e5f\u5c31\u662f\u5143\u7d206\u7684\u4f4d\u7f6e\uff0c\u56e0\u4e3a\u540e\u9762\u6ca1\u6709\u8282\u70b9\u4e86) \u5982\u679c\u5f53\u524dlevel\u6ca1\u6709\u67e5\u627e\u5230\u5c31\u7ee7\u7eed\u5207\u6362\u5230\u4e0b\u4e00\u4e2alevel\u8fdb\u884c\u67e5\u627e(\u5207\u6362\u5230level2\uff0c\u7ee7\u7eed\u67e5\u627e\uff0c\u8fd8\u662f\u5728\u5f53\u524d\u4f4d\u7f6e\uff0c\u56e0\u4e3a25\u5927\u4e8e17\u627e\u5230\u4e86\uff0c\u7ee7\u7eed\u5207\u6362\u5230level1\uff0c\u8fd9\u4e2a\u65f6\u5019\u627e\u5230\u4e869) \u76f4\u5230\u5728level0\u4e2d\u627e\u5230\u8fd9\u6837\u7684\u4f4d\u7f6e\uff0c\u5e76\u8fd4\u56de(\u627e\u5230\u4e8612\uff0c\u7136\u540e\u548c17\u8fdb\u884c\u5bf9\u6bd4\u53d1\u73b0\u4e0d\u76f8\u7b49\u3002) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 bool SkipList < Key , Comparator >:: Contains ( const Key & key ) const { Node * x = FindGreaterOrEqual ( key , nullptr ); if ( x != nullptr && Equal ( key , x -> key )) { return true ; } else { return false ; } } template < typename Key , class Comparator > bool SkipList < Key , Comparator >:: KeyIsAfterNode ( const Key & key , Node * n ) const { // null n is considered infinite return ( n != nullptr ) && ( compare_ ( n -> key , key ) < 0 ); } // \u603b\u662f\u8fd4\u56de\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ekey\u7684\u524d\u4e00\u4e2a\u8282\u70b9\u3002 template < typename Key , class Comparator > typename SkipList < Key , Comparator >:: Node * SkipList < Key , Comparator >:: FindGreaterOrEqual ( const Key & key , Node ** prev ) const { Node * x = head_ ; // 1. \u4ece\u6700\u5927\u7684Level\u5f00\u59cb\u67e5\u627e int level = GetMaxHeight () - 1 ; while ( true ) { // 2. \u904d\u5386\u94fe\u8868\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ekey\u7684\u8282\u70b9\u3002 Node * next = x -> Next ( level ); if ( KeyIsAfterNode ( key , next )) { // \u6ca1\u6709\u5927\u4e8e\u7b49\u4e8ekey\uff0c\u5e76\u4e14\u8fd8\u672a\u904d\u5386\u7ed3\u675f\uff0c\u7ee7\u7eed\u5728\u5f53\u524d\u94fe\u8868\u8fdb\u884c\u67e5\u627e // Keep searching in this list x = next ; } else { // \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ekey\u7684\u8282\u70b9\u6216\u8005\u5f53\u524dlevel\u904d\u5386\u7ed3\u675f\u4e86\u3002 if ( prev != nullptr ) prev [ level ] = x ; // \u5982\u679c\u662f\u6700\u540e\u4e00\u5c42\u4e86\uff0c\u5c31\u76f4\u63a5\u8fd4\u56de if ( level == 0 ) { return next ; } else { // \u5207\u6362\u5230\u4e0b\u4e00\u4e2alevel\u7ee7\u7eed\u67e5\u627e // Switch to next list level -- ; } } } } \u4ece\u4e0a\u9762\u7684\u67e5\u627e\u8fc7\u7a0b\u53ef\u4ee5\u770b\u5230\u4ece\u9ad8\u7684level\b\u5f00\u59cb\u67e5\u627e\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u5feb\u901f\u627e\u5230\u8981\u67e5\u627e\u7684\u6570\u636e\u5728level0\u7684\u5927\u6982\u4f4d\u7f6e\uff0c\u6709\u70b9\u7c7b\u4f3c\u4e8c\u5206\u67e5\u627e\u3002\u6240\u6709\u7684\u6570\u636e\u90fd\u53ef\u4ee5\u901a\u8fc7level0\u904d\u5386\u5230\uff0c \u9ad8\u7684level\u4e2d\u53ea\u5305\u542b\u4e86level0\u4e2d\u7684\u90e8\u5206\u6570\u636e\u3002\u6700\u540e\u6211\u4eec\u6765\u770b\u4e0b\u5982\u679c\u63d2\u5165\u6570\u636e\u6765\u6784\u5efaskiplist\uff0c\u63d2\u5165\u8fc7\u7a0b\u5982\u4e0b\u56fe: \u9996\u5148\u627e\u5230\u5927\u4e8e\u7b49\u4e8e\u8981\u67e5\u627e\u8282\u70b9\u7684\u524d\u4e00\u4e2a\u8282\u70b9\uff0c\u5e76\u8bb0\u5f55\u6bcf\u4e00\u4e2alevel\u4e0b\u627e\u5230\u7684\u5927\u4e8e\u7b49\u4e8e\u8981\u67e5\u627e\u6570\u636e\u7684\u524d\u4e00\u4e2a\u8282\u70b9\u3002 \u5982\u679c\u6709\u76f8\u540c\u7684key\u5c31\u63d2\u5165\u5931\u8d25\u3002 \u968f\u673a\u83b7\u53d6\u4e00\u4e2a\u9ad8\u5ea6\uff0c\u6bd4\u5982\u8fd9\u91cc\u83b7\u53d6\u7684\u9ad8\u5ea6\u662f1 \u6784\u9020\u65b0\u8282\u70b9\uff0c\u5e76\u8ba9level0\u6307\u5411\u65b0\u8282\u70b9\uff0c\u7136\u540e\u627e\u5230\u968f\u673a\u83b7\u53d6\u7684level\u6240\u5bf9\u5e94\u7684\u524d\u4e00\u4e2a\u8282\u70b9\uff0c\u7136\u540e\u6307\u5411\u8fd9\u4e2a\u65b0\u8282\u70b9\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 void SkipList < Key , Comparator >:: Insert ( const Key & key ) { // TODO(opt): We can use a barrier-free variant of FindGreaterOrEqual() // here since Insert() is externally synchronized. Node * prev [ kMaxHeight ]; Node * x = FindGreaterOrEqual ( key , prev ); // Our data structure does not allow duplicate insertion assert ( x == nullptr || ! Equal ( key , x -> key )); int height = RandomHeight (); // \u5982\u679c\u5927\u4e8e\u5f53\u524d\u7684\u6700\u5927\u9ad8\u5ea6\u5c31\u8fdb\u884c\u6269\u5c55\uff0c\u4ece\u6700\u5927\u9ad8\u5ea6\u5230\u83b7\u53d6\u7684\u968f\u673a\u9ad8\u5ea6\u4e4b\u95f4\u8bbe\u7f6eprev\u4e3aheader // \u4e5f\u5c31\u662f\u5728\u8fd9\u4e2a\u8303\u56f4\u5185\uff0c\u76f4\u63a5\u7528header\u6307\u9488\u6307\u5411\u65b0\u521b\u5efa\u7684\u5143\u7d20\u3002 if ( height > GetMaxHeight ()) { for ( int i = GetMaxHeight (); i < height ; i ++ ) { prev [ i ] = head_ ; } // It is ok to mutate max_height_ without any synchronization // with concurrent readers. A concurrent reader that observes // the new value of max_height_ will see either the old value of // new level pointers from head_ (nullptr), or a new value set in // the loop below. In the former case the reader will // immediately drop to the next level since nullptr sorts after all // keys. In the latter case the reader will use the new node. max_height_ . store ( height , std :: memory_order_relaxed ); } // \u521b\u5efa\u65b0\u7684\u8282\u70b9 x = NewNode ( key , height ); // \u4ecelevel0\u5f00\u59cb\uff0c\u63d2\u5165\u5230\u6bcf\u4e00\u5c42\u3002 for ( int i = 0 ; i < height ; i ++ ) { // NoBarrier_SetNext() suffices since we will add a barrier when // we publish a pointer to \"x\" in prev[i]. x -> NoBarrier_SetNext ( i , prev [ i ] -> NoBarrier_Next ( i )); prev [ i ] -> SetNext ( i , x ); } } \u901a\u8fc7\u4e0a\u9762\u7684\u4ee3\u7801\u53ef\u4ee5\u770b\u5230\uff0c\u6838\u5fc3\u70b9\u5728\u4e8e\u968f\u673a\u83b7\u53d6\u4e86\u4e00\u4e2a\u9ad8\u5ea6\uff0c\u7136\u540e\u4ecelevel0\u5f00\u59cb\u5230\u8fd9\u4e2a\u9ad8\u5ea6\u7684\u6bcf\u4e00\u5c42\u90fd\u4f1a\u63d2\u5165\u8fd9\u4e2a\u65b0\u8282\u70b9\u3002","title":"Skiplist"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/leveldb/leveldb/#memtable","text":"Leveldb\u5199\u5165\u6570\u636e\u65f6\u5e76\u4e0d\u662f\u76f4\u63a5\u5199\u78c1\u76d8\uff0c\u800c\u662f\u9996\u5148\u5199\u5165\u5230\u5185\u5b58\u4e2d\uff0c\u7136\u540e\u901a\u8fc7\u540e\u53f0\u7ebf\u7a0b\u8fdb\u884ccompact\u5e76\u5199\u5165\u5230\u78c1\u76d8\uff0c\u800cMemtable\u5c31\u662fleveldb\u5728\u5185\u5b58\u4e2d\u7528\u6765\u5b58\u50a8\u5199\u5165\u6570\u636e\u7684\u7ed3\u6784\u3002 \u6240\u6709\u5199\u5165\u7684\u5185\u5bb9\u90fd\u4f1a\u540cMemtable\u8fdb\u884c\u6392\u5e8f\u5b58\u50a8\uff0c\u7b49\u8fd9\u4e2aMemtable\u7684\u5bb9\u91cf\u8fbe\u5230\u4e00\u4e2a\u9600\u503c\u65f6\u5c31\u5c06\u5176\u8bbe\u7f6e\u4e3a\u53ea\u8bfb\uff0c\u7136\u540e\u91cd\u65b0\u521b\u5efa\u4e00\u4e2a\u65b0\u7684Memtable\u7ee7\u7eed\u63d0\u4f9b\u5199\u5165\u64cd\u4f5c\u3002\u4e00\u4e2a Memtable \u6838\u5fc3\u63d0\u4f9b\u4e86\u4e0b\u9762\u4e24\u4e2a\u63a5\u53e3\uff0c\u901a\u8fc7\u8fd9\u4e24\u4e2a\u63a5\u53e3\u6765\u5b9e\u73b0\u589e\u5220\u67e5\u3002 1 2 3 4 5 6 7 8 9 10 11 // Add an entry into memtable that maps key to value at the // specified sequence number and with the specified type. // Typically value will be empty if type==kTypeDeletion. void Add ( SequenceNumber seq , ValueType type , const Slice & key , const Slice & value ); // If memtable contains a value for key, store it in *value and return true. // If memtable contains a deletion for key, store a NotFound() error // in *status and return true. // Else, return false. bool Get ( const LookupKey & key , std :: string * value , Status * s ); \u9996\u5148\u6211\u4eec\u6765\u770b\u4e0b\u5b83\u7684 Add \u65b9\u6cd5\u7684\u5b9e\u73b0\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 void MemTable::Add ( SequenceNumber s , ValueType type , const Slice & key , const Slice & value ) { // Format of an entry is concatenation of: // key_size : varint32 of internal_key.size() // key bytes : char[internal_key.size()] // value_size : varint32 of value.size() // value bytes : char[value.size()] size_t key_size = key . size (); size_t val_size = value . size (); size_t internal_key_size = key_size + 8 ; const size_t encoded_len = VarintLength ( internal_key_size ) + internal_key_size + VarintLength ( val_size ) + val_size ; char * buf = arena_ . Allocate ( encoded_len ); char * p = EncodeVarint32 ( buf , internal_key_size ); std :: memcpy ( p , key . data (), key_size ); p += key_size ; EncodeFixed64 ( p , ( s << 8 ) | type ); p += 8 ; p = EncodeVarint32 ( p , val_size ); std :: memcpy ( p , value . data (), val_size ); assert ( p + val_size == buf + encoded_len ); table_ . Insert ( buf ); } \u5c06key\u548cvalue\u8fdb\u884c\u7f16\u7801\uff0c\u7f16\u7801\u7684\u683c\u5f0f\u4e3a key_size \u3001 key \u3001 value_size \u3001 value \uff0c\u5176\u4e2dkey\u90e8\u5206\u53c8\u505a\u4e86\u4e00\u6b21\u7f16\u7801\uff0c\u5305\u88c5\u6210\u4e86internal_key\uff0c\u5176\u7f16\u7801\u683c\u5f0f\u5982\u4e0b\u56fe\uff1a \u8fd9\u4e48\u505a\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u89e3\u51b3\u4e24\u4e2a\u95ee\u9898\uff0c\u7b2c\u4e00\u4e2a\u95ee\u9898\u5c31\u662f\u5c06\u5220\u9664\u53d8\u6210add\uff0c\u771f\u6b63\u7684\u5220\u9664\u5728\u8fdb\u884cCompaction\u7684\u65f6\u5019\u8fdb\u884c\uff0c\u56e0\u6b64\u5728\u7f16\u7801Key\u7684\u65f6\u5019\u6dfb\u52a0\u4e86type\u6807\u5fd7\uff0c\u6807\u8bb0\u8fd9\u4e2akey\u662f\u5220\u9664 \u8fd8\u662f\u6dfb\u52a0\u3002\u53e6\u5916\u4e00\u4e2a\u95ee\u9898\u5c31\u662f\u5bf9\u8c61\u76f8\u540ckey\u7684\u5904\u7406\uff0c\u5982\u4f55\u533a\u5206\u65b0\u65e7\uff0c\u56e0\u6b64Leveldb\u5f15\u5165\u4e86 sequence number \uff0c\u6bcf\u6b21\u63d2\u5165\u90fd\u4f1a\u8fdb\u884c\u9012\u589e\uff0c\u56e0\u6b64\u76f8\u540c\u7684key\u4e00\u5b9a\u5177\u6709\u4e0d\u540c\u7684 sequence number \uff0c \u8c01\u7684 sequence number \u5927\u8c01\u5c31\u662f\u6700\u65b0\u7684key\u3002\u6240\u4ee5\u9700\u8981\u5c06 sequence number \u4e5f\u7f16\u7801\u5230key\u4e2d\uff0c\u6700\u7ec8\u4ea7\u751f\u4e86\u8fd9\u4e2ainternal_key\u3002 Memtable\u662f\u5728\u5185\u5b58\u4e2d\u7684\uff0c\u800c\u4e14\u53ea\u6709\u5230\u8fbe\u4e00\u5b9a\u7684\u5927\u5c0f\u624d\u4f1a\u901a\u8fc7Compaction\u5199\u5165\u5230\u78c1\u76d8\uff0c\u5982\u679c\u5728\u8fd9\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u4e86\u5f02\u5e38\u5982\u4f55\u4fdd\u8bc1\u6570\u636e\u4e0d\u4e22\u5931\u5462? \u8fd9\u5c31\u9700\u8981WAL\u4e86\u3002","title":"Memtable"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/leveldb/leveldb/#walwrite-ahead-logging","text":"Leveldb\u6bcf\u6b21\u5728\u8fdb\u884c\u6570\u636e\u5199\u5165\u7684\u65f6\u5019\u90fd\u4f1a\u5148\u5c06\u6570\u636e\u5199\u5230\u65e5\u5fd7\u6587\u4ef6\u4e2d\uff0c\u7136\u540e\u518d\u5f80Memtable\u4e2d\u5199\uff0c\u8fd9\u6837\u505a\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u9632\u6b62\u5728\u5199\u5165Memtable\u7684\u8fc7\u7a0b\u4e2d\u56e0\u4e3a\u8fdb\u7a0b\u5f02\u5e38\u3001\u7cfb\u7edf\u6389\u7535\u7b49\u60c5\u51b5\u5bfc\u81f4\u6570\u636e\u4e22\u5931\u3002 \u65e5\u5fd7\u6587\u4ef6\u662f\u6309\u7167Block\u6765\u7ec4\u7ec7\u7684\uff0c\u6bcf\u4e2aBlock\u5927\u5c0f\u4e3a32K\uff0c\u4e00\u4e2aBlock\u4e2d\u4f1a\u5305\u542b\u591a\u4e2a\u8bb0\u5f55\u3002\u6bcf\u6761\u8bb0\u5f55\u90fd\u5305\u542b\u4e86\u56db\u4e2a\u90e8\u5206\uff0c\u5206\u522b\u662f: Checksum \u3001 Length \u3001 RecordType \u3001 Data \u3002\u683c\u5f0f\u5982\u4e0b\u56fe: \u5176\u4e2d\u8fd9\u91cc\u7684 RecordType \u5176\u53d6\u503c\u8303\u56f4\u5982\u4e0b: 1 2 3 4 5 6 7 8 9 10 11 enum RecordType { // Zero is reserved for preallocated files kZeroType = 0 , kFullType = 1 , // For fragments kFirstType = 2 , kMiddleType = 3 , kLastType = 4 }; \u8fd9\u4e2a RecordType \u7684\u76ee\u7684\u4e3b\u8981\u662f\u4e3a\u4e86\u89e3\u51b3\u90a3\u4e9b\u5355\u6761\u6570\u636e\u8d85\u8fc732K\u5927\u5c0f\u7684\u95ee\u9898\uff0c\u5bf9\u4e8e\u8fd9\u7c7b\u6570\u636e\u53ea\u80fd\u5206\u6210\u591a\u6761\u8bb0\u5f55\u6765\u5199\uff0c\u56e0\u6b64\u6709\u4e86 RecordType \u6765\u8868\u793a\u5f53\u524d\u7684\u8bb0\u5f55\u662f\u5426\u662f\u5b8c\u6574\u7684\uff0c\u8fd8\u662f\u7247\u6bb5\uff0c\u5982\u679c\u662f\u7247\u6bb5\uff0c\u90a3\u90a3\u4e2a\u662f\u7b2c\u4e00\u4e2a\u7247\u6bb5\u3001 \u90a3\u4e9b\u662f\u4e2d\u95f4\u7247\u6bb5\u3001\u90a3\u4e2a\u662f\u6700\u540e\u4e00\u4e2a\u7247\u6bb5\uff0c\u901a\u8fc7 RecordType \u5c31\u53ef\u4ee5\u5c06\u591a\u4e2a\u7247\u6bb5\u7ec4\u88c5\u4e00\u6761\u5b8c\u6574\u7684\u8bb0\u5f55\u3002 Chechsum \u90e8\u5206\u5f88\u597d\u7406\u89e3\uff0c\u5c31\u662f\u8bb0\u5f55\u4e86\u5f53\u524d\u8bb0\u5f55\u7684\u6821\u9a8c\u548c\uff0c\u7528\u6765\u505a\u6570\u636e\u6b63\u786e\u6027\u6821\u9a8c\u7684\u3002 Length \u90e8\u5206\u5219\u662f\u7528\u6765\u6807\u8bc6 Leveldb\u89c4\u5b9a Checksum \u53604\u4e2a\u5b57\u8282(\u6b63\u597d\u6ee1\u8db3crc32\u7b97\u6cd5\u7684\u9700\u6c42)\uff0c Length \u53602\u4e2a\u5b57\u8282(2^16\u6b21\u65b9\u6b63\u597d\u662f32K\uff0c\u4e00\u4e2ablock\u7684\u5927\u5c0f\uff0c\u6240\u4ee5\u662f\u8db3\u591f\u7684)\u3001 RecordType \u5360\u75281\u4e2a\u5b57\u8282\u3002\u8fd9\u4e09\u4e2a\u90e8\u5206\u88ab\u79f0\u4e3a\u56fa\u5b9a\u7684Header\uff0c\u603b\u5171 \u5360\u75287\u4e2a\u5b57\u8282\uff0c\u4e0b\u9762\u8fd9\u4e2a\u65b9\u6cd5\u5c31\u662f\u7528\u6765\u5199\u5165\u4e00\u6761\u5b8c\u6574\u8bb0\u5f55\u7684\u65b9\u6cd5\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 Status Writer::EmitPhysicalRecord ( RecordType t , const char * ptr , size_t length ) { assert ( length <= 0xffff ); // Must fit in two bytes assert ( block_offset_ + kHeaderSize + length <= kBlockSize ); // Format the header // 1. \u5148\u5199\u5165header\u548cRecordType char buf [ kHeaderSize ]; buf [ 4 ] = static_cast < char > ( length & 0xff ); buf [ 5 ] = static_cast < char > ( length >> 8 ); buf [ 6 ] = static_cast < char > ( t ); // 2. \u5f00\u59cb\u8ba1\u7b97crc32\uff0c\u7136\u540e\u5199\u5165 // Compute the crc of the record type and the payload. uint32_t crc = crc32c :: Extend ( type_crc_ [ t ], ptr , length ); crc = crc32c :: Mask ( crc ); // Adjust for storage EncodeFixed32 ( buf , crc ); // 3. \u6700\u540e\u5199\u5165Data // Write the header and the payload Status s = dest_ -> Append ( Slice ( buf , kHeaderSize )); if ( s . ok ()) { s = dest_ -> Append ( Slice ( ptr , length )); if ( s . ok ()) { s = dest_ -> Flush (); } } block_offset_ += kHeaderSize + length ; return s ; } \u5230\u6b64\u4e3a\u6b62\u65e5\u5fd7\u7684\u5199\u5165\u8fc7\u7a0b\u5c31\u5206\u6790\u5b8c\u4e86\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u770b\u4e0bWAL\u5b9e\u9645\u662f\u5982\u4f55\u4f7f\u7528\u7684\uff0c\u4e0b\u9762\u662fLeveldb\u6279\u91cf\u5199\u7684\u5b9e\u73b0\u3002 Tips Leveldb\u7684\u5199\u5165\u603b\u662f\u6279\u91cf\u7684\uff0c\u5373\u4f7f\u6709\u5355\u6b21\u5199\u5165\u7684API\uff0c\u6700\u7ec8\u5728\u5185\u90e8\u4f7f\u7528\u7684\u65f6\u5019\uff0c\u4e5f\u662f\u4f7f\u7528\u6279\u91cf\u5199\u7684\u65b9\u5f0f\u6765\u505a\u7684\u3002 1 2 3 4 5 Status DB::Put ( const WriteOptions & opt , const Slice & key , const Slice & value ) { WriteBatch batch ; batch . Put ( key , value ); return Write ( opt , & batch ); } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 Status DBImpl::Write ( const WriteOptions & options , WriteBatch * updates ) { ...... if ( status . ok () && updates != nullptr ) { // nullptr batch is for compactions WriteBatch * write_batch = BuildBatchGroup ( & last_writer ); WriteBatchInternal :: SetSequence ( write_batch , last_sequence + 1 ); last_sequence += WriteBatchInternal :: Count ( write_batch ); // Add to log and apply to memtable. We can release the lock // during this phase since &w is currently responsible for logging // and protects against concurrent loggers and concurrent writes // into mem_. { mutex_ . Unlock (); // 1. \u5148\u5199WAL status = log_ -> AddRecord ( WriteBatchInternal :: Contents ( write_batch )); bool sync_error = false ; if ( status . ok () && options . sync ) { status = logfile_ -> Sync (); if ( ! status . ok ()) { sync_error = true ; } } if ( status . ok ()) { // 2. \u518d\u5199\u5165Memtable status = WriteBatchInternal :: InsertInto ( write_batch , mem_ ); } mutex_ . Lock (); if ( sync_error ) { // The state of the log file is indeterminate: the log record we // just added may or may not show up when the DB is re-opened. // So we force the DB into a mode where all future writes fail. RecordBackgroundError ( status ); } } if ( write_batch == tmp_batch_ ) tmp_batch_ -> Clear (); versions_ -> SetLastSequence ( last_sequence ); } ...... \u901a\u8fc7\u4e0a\u9762\u7684\u4ee3\u7801\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u5b9e\u9645\u4e0a\u4e00\u6761\u8bb0\u5f55\u4e2d\u7684\u6570\u636e\u5305\u542b\u4e86 WriteBatch \u4e2d\u7684\u591a\u4e2akey/value\uff0c\u90a3\u4e48\u95ee\u9898\u6765\u4e86\uff0c\u6211\u901a\u8fc7WAL\u8bfb\u53d6\u5230\u8bb0\u5f55\u540e\uff0c\u4e5f\u6210\u529f\u62ff\u5230\u4e86\u4fdd\u5b58\u7684\u6570\u636e\uff0c\u90a3\u4e48\u6211\u5982\u4f55\u4ece\u8fd9\u4e2a\u6570\u636e\u4e2d\u83b7\u53d6\u5230\u591a\u4e2akey/value\u5462\uff1f WAL\u662f\u4e0d\u7ba1\u6570\u636e\u4e2d\u6709\u591a\u5c11key/value\u7684\uff0c\u4ed6\u53ea\u8d1f\u8d23\u5b58\u50a8\u548c\u8bfb\u53d6\u6570\u636e\uff0c\u81f3\u4e8e\u8bfb\u5230\u7684\u6570\u636e\u5982\u4f55\u89e3\u6790\u6210\u591a\u4e2akey/value\uff0c\u8fd9\u4e2a\u662f\u4ea4\u7531\u4f7f\u7528\u8005\u6765\u5904\u7406\u7684\u3002WAL\u53ef\u4ee5\u5728\u591a\u4e2a\u5730\u65b9\u88ab\u4f7f\u7528\uff0c\u5176Data\u90e8\u5206\u7684\u683c\u5f0f\u53ef\u4ee5\u662f\u4efb\u610f\u7684\uff0c\u5728Leveldb\u4e2d\u4e0d\u4ec5\u4ec5 \u662f\u7528\u6765\u5b58\u653ekey/value\uff0c\u8fd8\u88ab\u7528\u6765\u5b58\u653e Manifest \u4e86\u3002 WAL\u6587\u4ef6\u4f55\u65f6\u5220\u9664\u5462? \u5982\u679c\u4e00\u76f4\u6301\u7eed\u7684\u5199\u5165\u90a3\u4e48WAL\u6587\u4ef6\u8fdf\u65e9\u4f1a\u6491\u66b4\u3002\u800c\u4e14WAL\u6587\u4ef6\u90a3\u4e48\u5927\uff0c\u5728\u51fa\u73b0\u6545\u969c\u7684\u65f6\u5019\u6062\u590d\u4e5f\u662f\u4e00\u4e2a\u95ee\u9898\uff0c\u53e6\u5916\u5728Leveldb\u8fdb\u884cCompaction\u540e\u90e8\u5206key/value\u5c06\u4f1a\u843d\u76d8\uff0c\u90a3\u4e48WAL\u4e2d\u5bf9\u5e94\u7684\u6570\u636e\u4e5f\u5e94\u8be5\u8981\u88ab\u6e05\u7406\u6389\u3002\u5426\u5219\u5c31\u4f1a\u5bfc\u81f4\u6570\u636e\u91cd\u590d\u7684\u95ee\u9898\u3002\u5728 Memtable \u90e8\u5206\u6211\u4eec\u4ecb\u7ecd\u8fc7\uff0c Memtable \u7684\u5927\u5c0f\u5230\u8fbe\u4e00\u4e2a\u9600\u503c\u65f6\u4f1a\u88ab\u51bb\u7ed3\u53d8\u6210 immutable \uff0c\u53ea\u80fd\u88ab\u8bfb\u53d6\u65e0\u6cd5\u8fdb\u884c\u5199\u5165\uff0c\u8fd9\u4e2a\u65f6\u5019\u5bf9\u5e94\u7684WAL\u6587\u4ef6\u4e5f\u4f1a\u88ab\u51bb\u7ed3\uff0c\u7136\u540e\u521b\u5efa\u4e00\u4e2a\u65b0\u7684WAL\u6587\u4ef6\uff0c\u7b49 immutable \u8fdb\u884cCompaction\u540e\u88ab\u5199\u5165\u5230\u78c1\u76d8\u65f6\uff0c\u5bf9\u5e94\u7684WAL\u6587\u4ef6\u624d\u80fd\u5b89\u5168\u7684\u5220\u9664\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 Status DBImpl::MakeRoomForWrite ( bool force ) { ...... while ( true ) { if ( ! bg_error_ . ok ()) { // Yield previous error s = bg_error_ ; break ; } else if ( allow_delay && versions_ -> NumLevelFiles ( 0 ) >= config :: kL0_SlowdownWritesTrigger ) { // We are getting close to hitting a hard limit on the number of // L0 files. Rather than delaying a single write by several // seconds when we hit the hard limit, start delaying each // individual write by 1ms to reduce latency variance. Also, // this delay hands over some CPU to the compaction thread in // case it is sharing the same core as the writer. mutex_ . Unlock (); env_ -> SleepForMicroseconds ( 1000 ); allow_delay = false ; // Do not delay a single write more than once mutex_ . Lock (); } else if ( ! force && ( mem_ -> ApproximateMemoryUsage () <= options_ . write_buffer_size )) { // There is room in current memtable break ; } else if ( imm_ != nullptr ) { // We have filled up the current memtable, but the previous // one is still being compacted, so we wait. Log ( options_ . info_log , \"Current memtable full; waiting... \\n \" ); background_work_finished_signal_ . Wait (); } else if ( versions_ -> NumLevelFiles ( 0 ) >= config :: kL0_StopWritesTrigger ) { // There are too many level-0 files. Log ( options_ . info_log , \"Too many L0 files; waiting... \\n \" ); background_work_finished_signal_ . Wait (); } else { // \u521b\u5efaimmutable\uff0c\u83b7\u53d6\u65b0\u7684WAL\u6587\u4ef6\u540d\uff0c\u7136\u540e\u91cd\u65b0\u6253\u5f00\uff0c\u540e\u7eed\u4f7f\u7528\u65b0\u7684WAL\u6587\u4ef6\u3002 // Attempt to switch to a new memtable and trigger compaction of old assert ( versions_ -> PrevLogNumber () == 0 ); uint64_t new_log_number = versions_ -> NewFileNumber (); WritableFile * lfile = nullptr ; s = env_ -> NewWritableFile ( LogFileName ( dbname_ , new_log_number ), & lfile ); if ( ! s . ok ()) { // Avoid chewing through file number space in a tight loop. versions_ -> ReuseFileNumber ( new_log_number ); break ; } delete log_ ; delete logfile_ ; logfile_ = lfile ; logfile_number_ = new_log_number ; log_ = new log :: Writer ( lfile ); imm_ = mem_ ; has_imm_ . store ( true , std :: memory_order_release ); mem_ = new MemTable ( internal_comparator_ ); mem_ -> Ref (); force = false ; // Do not force another compaction if have room MaybeScheduleCompaction (); } } return s ; } MakeRoomForWrite \u6bcf\u6b21\u5728\u53d1\u751f\u5199\u5165\u7684\u65f6\u5019\u90fd\u4f1a\u8c03\u7528\uff0c\u4f1a\u5224\u65ad\u5f53\u524d\u7684 Memtable \u5927\u5c0f\u662f\u5426\u8d85\u8fc7\u9600\u503c\uff0c\u5982\u679c\u8d85\u8fc7\u4e86\u5c31\u5207\u6362\u6210\u529f immutable \uff0c\u5e76\u91cd\u65b0\u6253\u5f00\u4e00\u4e2a\u65b0\u7684WAL\u6587\u4ef6\u7528\u4e8e\u8bb0\u5f55\u3002 \u63a5\u7740\u6211\u4eec\u6765\u770b\u4e0bCompaction\u7684\u5b9e\u73b0\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 void DBImpl::CompactMemTable () { mutex_ . AssertHeld (); assert ( imm_ != nullptr ); // Save the contents of the memtable as a new Table VersionEdit edit ; Version * base = versions_ -> current (); base -> Ref (); // \u5c06Memtable\u5199\u6210sstable Status s = WriteLevel0Table ( imm_ , & edit , base ); base -> Unref (); if ( s . ok () && shutting_down_ . load ( std :: memory_order_acquire )) { s = Status :: IOError ( \"Deleting DB during memtable compaction\" ); } // Replace immutable memtable with the generated Table if ( s . ok ()) { edit . SetPrevLogNumber ( 0 ); edit . SetLogNumber ( logfile_number_ ); // Earlier logs no longer needed s = versions_ -> LogAndApply ( & edit , & mutex_ ); } if ( s . ok ()) { // Commit to the new state imm_ -> Unref (); imm_ = nullptr ; has_imm_ . store ( false , std :: memory_order_release ); // Compaction\u5b8c\u6210\u540e\uff0c\u5220\u9664\u4e0d\u9700\u8981\u7684\u6587\u4ef6\uff0c\u5305\u542b\u4e86WAL\u6587\u4ef6\u3002 RemoveObsoleteFiles (); } else { RecordBackgroundError ( s ); } }","title":"WAL(Write-ahead logging)"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/leveldb/leveldb/#batch","text":"Leveldb\u4e2d\u6bcf\u6b21\u90fd\u5199\u90fd\u662f\u901a\u8fc7Batch\u7684\u65b9\u5f0f\u8fdb\u884c\u6279\u91cf\u64cd\u4f5c\uff0c\u800cBatch\u672c\u8d28\u4e0a\u505a\u7684\u4e8b\u60c5\u5c31\u662f\u5c06\u591a\u6b21\u64cd\u4f5c\u8fdb\u884c\u4e86\u7f16\u7801\uff0c\u5148\u901a\u8fc7WAL\u65e5\u5fd7\u5c06\u7f16\u7801\u540e\u7684\u5185\u5bb9\u843d\u76d8\uff0c\u7136\u540e\u4ea4\u7531Memtable\u8fdb\u884c\u6279\u91cf\u5199\u5165\uff0c\u9996\u5148\u8ba9\u6211\u4eec\u770b\u4e0bBatch\u7684\u7ed3\u6784\u3002 1 2 3 4 5 6 7 8 class LEVELDB_EXPORT WriteBatch { public : ..... private : friend class WriteBatchInternal ; // \u6838\u5fc3\u5c31\u662f\u4e00\u4e2astring\uff0c\u6bcf\u6b21\u64cd\u4f5c\u90fd\u4f1a\u7f16\u7801\u6210string\u653e\u5728\u8fd9\u91cc\u3002 std :: string rep_ ; // See comment in write_batch.cc for the format of rep_ }; \u63a5\u7740\u6211\u4eec\u770b\u4e0bWriteBatch\u662f\u5982\u4f55\u5b58\u653e\u4e00\u6b21\u64cd\u4f5c\u7684\u3002 1 2 3 4 5 6 7 void WriteBatch::Put ( const Slice & key , const Slice & value ) { WriteBatchInternal :: SetCount ( this , WriteBatchInternal :: Count ( this ) + 1 ); rep_ . push_back ( static_cast < char > ( kTypeValue )); // \u5148\u901a\u8fc7varint\u628asize\u5199\u5165\uff0c\u63a5\u7740\u5199\u5185\u5bb9 PutLengthPrefixedSlice ( & rep_ , key ); PutLengthPrefixedSlice ( & rep_ , value ); } \u5148\u66f4\u65b0\u4e86WriteBatch\u4e2d\u5b58\u653e\u7684\u64cd\u4f5c\u4e2a\u6570 \u63a5\u7740\u5199\u5165\u64cd\u4f5c\u7c7b\u578b \u6700\u540e\u5c06key\u548cvalue\u7684\u5185\u5bb9\u5199\u5165 \u6700\u540e\u6211\u4eec\u6765\u770b\u4e0b\uff0c\u4e00\u4e2aWriteBatch\u7f16\u7801\u540e\u7684\u5185\u5bb9\u683c\u5f0f\uff0c\u5982\u4e0b\u56fe: \u4e00\u6761\u6570\u636e\u5305\u542b\u4e86 sequence number \u3001 entry number \u3001 batch data \uff0c\u524d8\u4e2a\u5b57\u8282\u7528\u6765\u5b58\u653esequence nunber\uff0c\u4e00\u6b21WriteBatch\u4f1a\u5206\u914d\u4e00\u4e2a\u9012\u589e\u7684sequence nunber\u3002 \u63a5\u77408\u4e2a\u5b57\u8282\u7528\u6765\u5b58\u653e\u8fd9\u4e2aWriteBatch\u4e2d\u5305\u542b\u4e86\u591a\u5c11\u6b21\u64cd\u4f5c\uff0c\u63a5\u7740\u5c31\u662f\u6bcf\u4e00\u6b21\u64cd\u4f5c\u7684\u5177\u4f53\u5185\u5bb9\u4e86\uff0c\u5c31\u662f\u4e0a\u9762\u63d0\u5230\u7684\u5199\u5165\u64cd\u4f5c\u7c7b\u578b\u3001key/value\u503c\u7b49\u3002","title":"Batch"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/leveldb/leveldb/#sstable","text":"Leveldb\u901a\u8fc7WriteBatch\u6279\u91cf\u8fdb\u884c\u591a\u6b21\u64cd\u4f5c\uff0c\u5c06\u591a\u6b21\u64cd\u4f5c\u7f16\u7801\u540e\u4ea4\u7531WAL\u8fdb\u884c\u65e5\u5fd7\u843d\u76d8\uff0c\u6700\u540e\u4ea4\u7ed9Memtable\u8fdb\u884c\u6279\u91cf\u5199\u5165\u5230\u5185\u5b58\uff0c\u6bcf\u6b21\u5199\u5165\u4e4b\u524d\u4f1a\u8c03\u7528 MakeRoomForWrite \u6765\u51b3\u5b9a\u662f\u5426\u9700\u8981\u8fdb\u884c Compation\u5c06Memtable\u53d8\u6210SStable\uff0c\u90a3\u4e48SStable\u5230\u5e95\u662f\u4ec0\u4e48\u5462? WriteLevel0Table \u5c31\u662f\u5176\u4e2d\u6700\u4e3a\u5173\u952e\u7684\u4e00\u4e2a\u51fd\u6570\uff0c\u901a\u8fc7\u8fd9\u4e2a\u51fd\u6570\u5c06Memtable\u53d8\u6210\u4e86SStable\u3002 \u63a5\u4e0b\u6765\u8ba9\u6211\u4eec\u6765\u770b\u4e0b\u8fd9\u4e2a \u51fd\u6570\u5230\u5e95\u505a\u4e86\u4ec0\u4e48? 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 Status DBImpl::WriteLevel0Table ( MemTable * mem , VersionEdit * edit , Version * base ) { mutex_ . AssertHeld (); const uint64_t start_micros = env_ -> NowMicros (); // 1. \u521b\u5efaFileMetaData\uff0c\u7528\u6765\u63cf\u8ff0\u4ea7\u751f\u7684sstable\u6587\u4ef6 FileMetaData meta ; // 1.1 \u751f\u6210\u4e00\u4e2a\u65b0\u7684FileNumber\uff0csstable\u6587\u4ef6\u7684\u540d\u5b57\u662f\u6709FileNumber\u7ec4\u6210\u7684 meta . number = versions_ -> NewFileNumber (); pending_outputs_ . insert ( meta . number ); // 1.2 \u521b\u5efaMemtable\u8fed\u4ee3\u5668\u51c6\u5907\u5199\u5165\u5230sstable\u6587\u4ef6\u4e2d Iterator * iter = mem -> NewIterator (); Log ( options_ . info_log , \"Level-0 table #%llu: started\" , ( unsigned long long ) meta . number ); Status s ; { mutex_ . Unlock (); // 2. \u6784\u5efaTable s = BuildTable ( dbname_ , env_ , options_ , table_cache_ , iter , & meta ); mutex_ . Lock (); } Log ( options_ . info_log , \"Level-0 table #%llu: %lld bytes %s\" , ( unsigned long long ) meta . number , ( unsigned long long ) meta . file_size , s . ToString (). c_str ()); delete iter ; pending_outputs_ . erase ( meta . number ); // Note that if file_size is zero, the file has been deleted and // should not be added to the manifest. // 3. \u5c06\u6587\u4ef6\u6dfb\u52a0\u5230VersionEdit\u4e2d int level = 0 ; if ( s . ok () && meta . file_size > 0 ) { const Slice min_user_key = meta . smallest . user_key (); const Slice max_user_key = meta . largest . user_key (); if ( base != nullptr ) { level = base -> PickLevelForMemTableOutput ( min_user_key , max_user_key ); } edit -> AddFile ( level , meta . number , meta . file_size , meta . smallest , meta . largest ); } CompactionStats stats ; stats . micros = env_ -> NowMicros () - start_micros ; stats . bytes_written = meta . file_size ; stats_ [ level ]. Add ( stats ); return s ; } \u53ef\u4ee5\u770b\u5230\uff0c\u6784\u5efasstable\u7684\u6838\u5fc3\u5728\u4e8e BuildTable \uff0c\u6784\u5efa\u597d\u540e\u4f1a\u4ea7\u751f\u4e00\u4e2a\u6587\u4ef6\uff0c\u8fd9\u4e2a\u6587\u4ef6\u7684\u5143\u4fe1\u606f\u5219\u662f\u901a\u8fc7 FileMetaData \u6765\u63cf\u8ff0\u7684\uff0c\u6700\u540e\u4f1a\u5c06\u8fd9\u4e2a\u6587\u4ef6\u7684\u5143\u4fe1\u606f\u5b58\u5165\u5230 VersionEdit \u4e2d\u3002 \u7136\u540eApply\u5230 Version \u4e2d\u3002\u5173\u4e8e Version \u548c VersionEdit \b\u540e\u9762\u7684\u91cd\u70b9\u5206\u6790\uff0c\u73b0\u5728\u6211\u4eec\u91cd\u70b9\u6765\u770b\u4e0bBuildTable\u7684\u5b9e\u73b0\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 Status BuildTable ( const std :: string & dbname , Env * env , const Options & options , TableCache * table_cache , Iterator * iter , FileMetaData * meta ) { Status s ; meta -> file_size = 0 ; iter -> SeekToFirst (); // 1. \u6784\u9020Table\u6587\u4ef6\u540d std :: string fname = TableFileName ( dbname , meta -> number ); if ( iter -> Valid ()) { WritableFile * file ; s = env -> NewWritableFile ( fname , & file ); if ( ! s . ok ()) { return s ; } TableBuilder * builder = new TableBuilder ( options , file ); meta -> smallest . DecodeFrom ( iter -> key ()); Slice key ; // 2. \u904d\u5386Memtable\uff0c\u5c06key/value\u5b58\u5165\u5230Table\u4e2d // \u56e0\u4e3aMemtable\u662f\u6709\u5e8f\u7684\uff0c\u56e0\u6b64\u7b2c\u4e00\u4e2akey\u662f\u6700\u5c0f\u7684key\uff0c\u6700\u540e\u7684key\u662f\u6700\u5927\u7684key // \u5c06\u6700\u5c0fkey\u548c\u6700\u5927key\u8fd9\u4e24\u4e2a\u5143\u4fe1\u606f\u5b58\u5165\u5230FileMeta\u4e2d for (; iter -> Valid (); iter -> Next ()) { key = iter -> key (); builder -> Add ( key , iter -> value ()); } if ( ! key . empty ()) { meta -> largest . DecodeFrom ( key ); } // Finish and check for builder errors s = builder -> Finish (); if ( s . ok ()) { meta -> file_size = builder -> FileSize (); assert ( meta -> file_size > 0 ); } delete builder ; // Finish and check for file errors // 3. \u5b8c\u6210table\u6784\u5efa\u540e\uff0c\u5f00\u59cb\u8fdb\u884c\u6587\u4ef6sync\uff0c\u786e\u4fdd\u6587\u4ef6\u843d\u76d8 if ( s . ok ()) { s = file -> Sync (); } if ( s . ok ()) { s = file -> Close (); } delete file ; file = nullptr ; if ( s . ok ()) { // Verify that the table is usable Iterator * it = table_cache -> NewIterator ( ReadOptions (), meta -> number , meta -> file_size ); s = it -> status (); delete it ; } } // Check for input iterator errors if ( ! iter -> status (). ok ()) { s = iter -> status (); } if ( s . ok () && meta -> file_size > 0 ) { // Keep it } else { env -> RemoveFile ( fname ); } return s ; } \u901a\u8fc7\u4e0a\u9762\u7684\u4ee3\u7801\u6211\u4eec\u53ef\u4ee5\u77e5\u9053 TableBuilder \u5c31\u662f\u7528\u6765\u6784\u5efasstable\u7684\u6838\u5fc3\uff0c\u800csstable\u672c\u8d28\u4e0a\u5c31\u662f\u4e00\u4e2a\u6587\u4ef6\uff0c\u6587\u4ef6\u5185\u5bb9\u662f\u4e00\u7cfb\u5217\u6392\u5e8f\u597d\u7684key/value\u8fdb\u884c\u7f16\u7801\u540e\u7684\u5185\u5bb9\uff0c\u90a3\u4e48\u5b83\u7684\u683c\u5f0f\u5230\u5e95\u662f\u5982\u4f55\u7684\u5462? \u4e3a\u4e86\u63d0\u9ad8\u6574\u4f53\u7684\u8bfb\u5199\u6548\u7387\uff0c\u4e00\u4e2asstable\u6587\u4ef6\u6309\u7167\u56fa\u5b9a\u5927\u5c0f\u8fdb\u884c\u5757\u5212\u5206\uff0c\u9ed8\u8ba4\u6bcf\u4e2a\u5757\u7684\u5927\u5c0f\u4e3a4KiB\u3002\u6bcf\u4e2aBlock\u4e2d\uff0c\u9664\u4e86\u5b58\u50a8\u6570\u636e\u4ee5\u5916\uff0c\u8fd8\u4f1a\u5b58\u50a8\u4e24\u4e2a\u989d\u5916\u7684\u8f85\u52a9\u5b57\u6bb5\uff1a\u538b\u7f29\u7c7b\u578b\u548cCRC\u6821\u9a8c\u7801\uff0c\u4e0a\u56fe\u5c31\u662f\u5176\u6574\u4f53\u7684 \u7269\u7406\u7ed3\u6784\u3002\u8fdb\u4e00\u6b65\u4e0a\u9762\u7684Data\u90e8\u5206\u53c8\u88ab\u5206\u4e3a\u4e86\u4e94\u7c7b: data block \u7528\u6765\u5b58\u50a8\u5177\u4f53\u7684key value\u6570\u636e filter block \u7528\u6765\u5b58\u50a8\u4e00\u4e9b\u8fc7\u6ee4\u5668\u76f8\u5173\u7684\u6570\u636e meta index block \u7528\u6765\u5b58\u50a8filter block\u7684\u7d22\u5f15\u4fe1\u606f(\u4e5f\u5c31\u662ffilter block\u5728sstable\u6587\u4ef6\u4e2d\u7684\u504f\u79fb\u91cf\uff0c\u4ee5\u53ca\u6570\u636e\u7684\u957f\u5ea6) index block \u7528\u6765\u5b58\u50a8\u6bcf\u4e2adata block\u7684\u7d22\u5f15\u4fe1\u606f footer \u7528\u6765\u5b58\u50a8meta index block\u548cindex block\u7684\u7d22\u5f15\u4fe1\u606f \u9996\u5148\u6211\u4eec\u6765\u770b\u4e0bdata block\u7684\u6570\u636e\u683c\u5f0f\uff0c\u5982\u4e0b\u56fe: \u53ef\u4ee5\u770b\u5230\u4e00\u4e2adatablock\u5185\u90e8\u5305\u542b\u4e86\u591a\u4e2aEntry\uff0c\u6bcf\u4e00\u4e2aEntry\u5c31\u662f\u4e00\u4e2a\u8981\u5b58\u53d6\u7684\u6570\u636e\u6761\u76ee\uff0c\u4e5f\u5c31\u662f\u7528\u6237\u5b58\u5165\u7684key/value\uff0c\u8ba9\u6211\u4eec\u6765\u770b\u4e0bEntry\u7684\u7f16\u7801\u683c\u5f0f\uff0c\u5982\u4e0b\u56fe: \u4e00\u4e2aEntry\u5305\u542b\u4e865\u4e2a\u90e8\u5206\uff0c\u4ed6\u4eec\u5206\u522b\u662f: \u4e0e\u524d\u4e00\u6761\u8bb0\u5f55key\u5171\u4eab\u90e8\u5206\u7684\u957f\u5ea6\uff1b \u4e0e\u524d\u4e00\u6761\u8bb0\u5f55key\u4e0d\u5171\u4eab\u90e8\u5206\u7684\u957f\u5ea6\uff1b value\u957f\u5ea6\uff1b \u4e0e\u524d\u4e00\u6761\u8bb0\u5f55key\u975e\u5171\u4eab\u7684\u5185\u5bb9\uff1b value\u5185\u5bb9\uff1b \u53ef\u4ee5\u770b\u5230\uff0c\u4e00\u4e2aEntry\u5e76\u975e\u5305\u542b\u4e86\u5b8c\u6574\u7684key\uff0c\u800c\u662f\u548c\u524d\u4e00\u4e2akey\u7684\u5171\u4eab\u524d\u7f00\uff0c\u56e0\u6b64\u7f16\u7801\u548c\u89e3\u7801\u7684\u65f6\u5019\u90fd\u9700\u8981\u4fdd\u5b58\u4e0a\u4e00\u4e2akey\u7684\u4fe1\u606f\uff0c\u624d\u80fd\u5bf9key\u8fdb\u884c\u7f16\u7801\u6216\u89e3\u7801\u3002\u8fd9\u79cd\u7f16\u7801\u65b9\u5f0f\u53ef\u4ee5\u6709\u6548\u7684\u907f\u514dkey\u91cd\u590d\u5185\u5bb9\u7684\u5b58\u50a8\uff0c \u56e0\u4e3akey\u603b\u662f\u6709\u5e8f\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u6700\u5927\u7a0b\u5ea6\u7684\u901a\u8fc7\u5171\u4eab\u524d\u7f00\u7684\u90e8\u5206\u6765\u8282\u7701key\u5b58\u50a8\u7684\u6210\u672c\uff0c\u4f46\u662f\u5e26\u6765\u7684\u95ee\u9898\u4e5f\u662f\u663e\u800c\u6613\u89c1\u610f\u89c1\u7684\uff0c\u5982\u679c\u8981\u4ece\u8fd9\u4e2a\u6587\u4ef6\u4e2d\u68c0\u7d22\u4e00\u4e2akey\u7684\u8bdd\u9700\u8981\u5b8c\u6574\u7684\u5c06\u6240\u6709\u7684key\u90fd\u89e3\u6790\u51fa\u6765\u3002\u4e3a\u6b64leveldb \u8bbe\u8ba1\u4e86 Restart point \uff0c\u4e5f\u5c31\u662f\u6bcf\u95f4\u9694\u82e5\u5e72\u4e2akeyvalue\u5bf9\uff0c\u5c06\u4e3a\u8be5\u6761\u8bb0\u5f55\u91cd\u65b0\u5b58\u50a8\u4e00\u4e2a\u5b8c\u6574\u7684key\u3002\u91cd\u590d\u8be5\u8fc7\u7a0b\uff08\u9ed8\u8ba4\u95f4\u9694\u503c\u4e3a16\uff09\uff0c\u6bcf\u4e2a\u91cd\u65b0\u5b58\u50a8\u5b8c\u6574key\u7684\u70b9\u79f0\u4e4b\u4e3a Restart point \u3002\u6709\u4e86 Restart point \u5c31\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e9b\u5b8c\u6574\u7684key\u5feb\u901f\u5b9a\u4f4d\u76ee\u6807key\u6240\u5728\u7684\u533a\u57df\u3002\u7136\u540e\u901a\u8fc7\u5b8c\u6574\u7684key\u5c31\u53ef\u4ee5\u8fd8\u539f\u8fd9\u4e2a\u533a\u57df\u4e2d\u6240\u6709\u7684key\u4fe1\u606f\u4e86\u3002\u4e3a\u4e86\u5feb\u901f\u627e\u5230\u6bcf\u4e00\u4e2a Restart point \uff0cleveldb\u4f1a\u5728data block\u7684\u672b\u5c3e\u5b58\u50a8\u4e00\u7cfb\u5217\u7684\u7d22\u5f15\u4fe1\u606f\uff0c \u548c\u957f\u5ea6\uff0c\u65b9\u4fbf\u6211\u4eec\u5728\u52a0\u8f7ddata block\u7684\u65f6\u5019\u5c31\u53ef\u4ee5\u628a\u8fd9\u4e9b Restart point \u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\u8fdb\u884c\u5feb\u901f\u67e5\u627e\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u901a\u8fc7\u4e0b\u9762\u7684\u4ee3\u7801\u518d\u6b21\u9a8c\u8bc1\u4e0a\u9762\u63cf\u8ff0\u5230\u7684\u539f\u7406\u3002 \u8fd9\u4e2a\u601d\u60f3\u548cskiplist\u6709\u70b9\u7c7b\u4f3c\uff0c\u90fd\u662f\u6309\u7167\u4e00\u5b9a\u65b9\u5f0f\u4ece\u539f\u59cb\u6570\u636e\u8fdb\u884c\u62bd\u6837\uff0c\u5178\u578b\u7684\u7edf\u8ba1\u5b66\u539f\u7406\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 void BlockBuilder::Add ( const Slice & key , const Slice & value ) { Slice last_key_piece ( last_key_ ); assert ( ! finished_ ); assert ( counter_ <= options_ -> block_restart_interval ); assert ( buffer_ . empty () // No values yet? || options_ -> comparator -> Compare ( key , last_key_piece ) > 0 ); size_t shared = 0 ; // 1. \u6ca1\u6709\u5230Restart point\u7684\u95f4\u9694\uff0c\u56e0\u6b64\u8fd9\u91cc\u9700\u8981\u8ba1\u7b97\u5171\u4eab\u524d\u7f00 if ( counter_ < options_ -> block_restart_interval ) { // See how much sharing to do with previous string const size_t min_length = std :: min ( last_key_piece . size (), key . size ()); while (( shared < min_length ) && ( last_key_piece [ shared ] == key [ shared ])) { shared ++ ; } } else { // 2. \u8fbe\u5230\u4e86Restart point\u7684\u95f4\u9694\u4e86\uff0c\u56e0\u6b64\u8fd9\u91cc\u9700\u8981\u5b58\u50a8\u5b8c\u6574\u7684key/value\uff0c\u8fd8\u9700\u8981\u8bb0\u5f55\u7d22\u5f15\u4fe1\u606f(\u4e5f\u5c31\u662frestart poont\u7684offset\u4fe1\u606f) // Restart compression restarts_ . push_back ( buffer_ . size ()); // \u8ba1\u6570\u5668\u6e05\u96f6 counter_ = 0 ; } const size_t non_shared = key . size () - shared ; // 3. \u5f00\u59cb\u5199\u5165\u5171\u4eab\u90e8\u5206\u7684\u957f\u5ea6\u3001\u975e\u5171\u4eab\u90e8\u5206\u7684\u957f\u5ea6\u3001value\u7684\u957f\u5ea6 // Add \"<shared><non_shared><value_size>\" to buffer_ PutVarint32 ( & buffer_ , shared ); PutVarint32 ( & buffer_ , non_shared ); PutVarint32 ( & buffer_ , value . size ()); // 4. \u5199\u5165\u5171\u4eab\u90e8\u5206\u7684key\u5185\u5bb9\u3001\u5199\u5165value\u7684\u5185\u5bb9 // Add string delta to buffer_ followed by value buffer_ . append ( key . data () + shared , non_shared ); buffer_ . append ( value . data (), value . size ()); // 5. \u66f4\u65b0last key\uff0c\u7528\u4e8e\u4e0b\u4e00\u4e2akey\u8ba1\u7b97\u524d\u7f00 // Update state last_key_ . resize ( shared ); last_key_ . append ( key . data () + shared , non_shared ); assert ( Slice ( last_key_ ) == key ); counter_ ++ ; } \u6bcf\u6b21\u6dfb\u52a0key\u65f6\u4ea7\u751f\u7684 Restart point \u90fd\u5b58\u5728\u4e86 restarts_ \u4e2d\uff0c\u8fd9\u662f\u4e00\u4e2a std::vector<uint32_t> \u7c7b\u578b\uff0c\u5b58\u50a8\u4e86\u6bcf\u4e00\u4e2a Restart point \u5728data block\u4e2d\u7684offset\u3002 \u5728\u6784\u5efa\u5b8c Restart point \u540e\u4f1a\u5c06\u8fd9\u4e9b\u7d22\u5f15\u4fe1\u606f\u5199\u5165\u5230data block\u4e2d\u7684\u5c3e\u90e8\u3002 1 2 3 4 5 6 7 8 9 Slice BlockBuilder::Finish () { // Append restart array for ( size_t i = 0 ; i < restarts_ . size (); i ++ ) { PutFixed32 ( & buffer_ , restarts_ [ i ]); } PutFixed32 ( & buffer_ , restarts_ . size ()); finished_ = true ; return Slice ( buffer_ ); } \u5230\u6b64\u4e3a\u6b62data block\u7684\u6784\u5efa\u5c31\u5206\u6790\u5b8c\u4e86\uff0c\u901a\u8fc7 Restart point \u53ef\u4ee5\u8ba9\u6211\u4eec\u5feb\u901f\u5b9a\u4f4d\u8981\u67e5\u8be2\u7684\u6570\u636e\u5728data block\u4e2d\u7684\u4f4d\u7f6e\uff0c\u4f46\u662f\u8fd9\u4e00\u5207\u7684\u524d\u63d0\u662f\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u8fd9\u4e2adata block\u4e2d\u5b58\u5728\u6211\u4eec\u8981\u67e5\u8be2\u7684\u6570\u636e\u3002 \u5426\u5219\u6211\u4eec\u4f9d\u7136\u5148\u9700\u8981\u904d\u5386\u6bcf\u4e00\u4e2adata block\u3002\u5982\u679c\u6211\u4eec\u80fd\u9ad8\u6548\u7684\u5148\u8fc7\u6ee4\u5904\u5305\u542b\u8981\u67e5\u8be2\u6570\u636e\u7684data block\u90a3\u8be5\u591a\u68d2\u554a\u3002Leveldb\u4e2d\u8bbe\u8ba1\u4e86filter block\u5e2e\u52a9\u6211\u4eec\u5b9e\u73b0\u8fd9\u4e2a\u80fd\u529b\u3002\u63a5\u4e0b\u6765\u8ba9\u6211\u4eec\u770b\u770bfilter block\u7684\u683c\u5f0f\uff0c \u4ee5\u53ca\u8bbe\u8ba1filter block\u662f\u5982\u4f55\u5e2e\u52a9\u6211\u4eec\u5feb\u901f\u67e5\u8be2\u7684\u5427\u3002 \u901a\u8fc7\u4e0a\u56fe\u53ef\u77e5\uff0cfilter block\u4e2d\u5305\u542b\u4e86\u4e09\u4e2a\u90e8\u5206\uff0c\u7b2c\u4e00\u4e2a\u90e8\u5206\u5b58\u653e\u8fc7\u6ee4\u7684\u6570\u636e\u3001\u7b2c\u4e8c\u4e2a\u90e8\u5206\u5219\u5b58\u653e\u6bcf\u4e2a\u8fc7\u6ee4\u6570\u636e\u7684\u7d22\u5f15\u4f4d\u7f6e\uff0c\u7b2c\u4e09\u4e2a\u90e8\u5206\u662f\u7528\u6765\u8bb0\u5f55\u7b2c\u4e8c\u4e2a\u90e8\u5206\u7684\u5f00\u59cb\u4f4d\u7f6e\u907f\u514d\u548c\u7b2c\u4e00\u4e2a\u90e8\u5206\u7684\u6570\u636e\u6df7\u5728\u4e00\u8d77\u65e0\u6cd5\u533a\u5206\uff0c \u6700\u540e\u4e00\u4e2a\u90e8\u5206\u7684\u6570\u636e\u662fBase lg\uff0c\u5360\u75281\u4e2a\u5b57\u8282\uff0c\u9ed8\u8ba4\u503c\u662f11\uff0c\u8868\u793a\u6bcf\u96942KB\u7684\u6570\u636e\u5c31\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u8fc7\u6ee4\u5668\u6765\u5b58\u653e\u3002\u4e00\u4e2asstable\u6587\u4ef6\u53ea\u6709\u4e00\u4e2afilter block\uff0c\u5176\u5185\u90e8\u5b58\u50a8\u4e86\u6240\u6709data block\u7684filter\u6570\u636e\u3002 \u63a5\u4e0b\u6765\u8ba9\u6211\u4eec\u770b\u4e0bfilter block\u662f\u5982\u4f55\u6784\u5efa\u7684\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 void FilterBlockBuilder::StartBlock ( uint64_t block_offset ) { uint64_t filter_index = ( block_offset / kFilterBase ); assert ( filter_index >= filter_offsets_ . size ()); \\ // StartBlock(0) \u8fd9\u4e2a\u65f6\u5019\u4e0d\u4f1a\u4ea7\u751f\u4efb\u4f55filter\u6570\u636e // StartBlock(3K) \u56e0\u4e3akFilterBase\u662f2k\uff0c\u56e0\u6b64\u53ea\u9700\u8981\u4ea7\u751f\u4e00\u6761filter\u6570\u636e\u5373\u53ef\uff0c\u8fd9\u4e2a\u65f6\u5019\u4f1a\u8c03\u7528\u4e00\u6b21GenerateFilter\u4ea7\u751f\u4e00\u4e2afilter\u6570\u636e // \u53ef\u4ee5\u770b\u5230filter\u6570\u636e\u7684\u4ea7\u751f\u5e76\u975e\u4e25\u683c\u610f\u4e49\u4e0a\u7684\u6309\u71672k\u4e3a\u5355\u4f4d\u7684\uff0c\u800c\u53ea\u662f\u5c060~3K\u8fd9\u4e2a\u8303\u56f4\u5185\u6dfb\u52a0\u7684key\u4e00\u8d77\u751f\u6210\u4e00\u4e2afilter\u6570\u636e\u800c\u5df2\u3002 // StartBlock(4K) \u56e0\u4e3akFilterBase\u662f2k\uff0c\u56e0\u6b64\u9700\u8981\u4ea7\u751f\u4e8c\u6761filter\u6570\u636e\uff0c\u5b9e\u9645\u4e0a\u53ea\u4f1a\u751f\u6210\u4e24\u6761\u5185\u5bb9\u76f8\u540c\u7684filter\u6570\u636e while ( filter_index > filter_offsets_ . size ()) { GenerateFilter (); } } void FilterBlockBuilder::AddKey ( const Slice & key ) { Slice k = key ; start_ . push_back ( keys_ . size ()); keys_ . append ( k . data (), k . size ()); } // \u5bf9\u6240\u6709\u7684key\u8ba1\u7b97\u5904filter\u6570\u636e\uff0c\u5e76\u5b58\u5165result_\u4e2d void FilterBlockBuilder::GenerateFilter () { const size_t num_keys = start_ . size (); if ( num_keys == 0 ) { // Fast path if there are no keys for this filter filter_offsets_ . push_back ( result_ . size ()); return ; } // Make list of keys from flattened key structure start_ . push_back ( keys_ . size ()); // Simplify length computation tmp_keys_ . resize ( num_keys ); for ( size_t i = 0 ; i < num_keys ; i ++ ) { const char * base = keys_ . data () + start_ [ i ]; size_t length = start_ [ i + 1 ] - start_ [ i ]; tmp_keys_ [ i ] = Slice ( base , length ); } // Generate filter for current set of keys and append to result_. filter_offsets_ . push_back ( result_ . size ()); policy_ -> CreateFilter ( & tmp_keys_ [ 0 ], static_cast < int > ( num_keys ), & result_ ); tmp_keys_ . clear (); keys_ . clear (); start_ . clear (); } \u6784\u5efafilter\u6570\u636e\u662f\u901a\u8fc7\u6307\u5b9a\u7684filter\u8fc7\u6ee4\u5668\uff0c\u62ff\u7740\u6240\u6709\u7684key\u4f5c\u4e3a\u8f93\u5165\uff0c\u7136\u540e\u4ea7\u751f\u4e00\u4e2afilter\u6570\u636e\u7684\u7ed3\u679c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 Slice FilterBlockBuilder::Finish () { // \u5982\u679c\u6700\u540e\u8fd8\u6709key\u5b58\u5728\uff0c\u5c31\u628a\u5269\u4e0b\u7684key\u751f\u6210filter\u6570\u636e if ( ! start_ . empty ()) { GenerateFilter (); } // Append array of per-filter offsets // \u8bb0\u5f55filter offet\u7684\u4f4d\u7f6e const uint32_t array_offset = result_ . size (); for ( size_t i = 0 ; i < filter_offsets_ . size (); i ++ ) { // \u6dfb\u52a0filter offset PutFixed32 ( & result_ , filter_offsets_ [ i ]); } PutFixed32 ( & result_ , array_offset ); result_ . push_back ( kFilterBaseLg ); // Save encoding parameter in result return Slice ( result_ ); } \u6240\u6709\u4ea7\u751f\u7684filter\u6570\u636e\u90fd\u4f1a\u653e\u5728\u4e00\u4e2aBlock\u4e2d\uff0c\u5f53\u6211\u4eec\u60f3\u5bf9\u67d0\u4e00\u4e2aData Block\u8fdb\u884c\u8fc7\u6ee4\u7684\u65f6\u5019\uff0c\u5982\u4f55\u77e5\u9053\u81ea\u5df1\u9700\u8981\u4f7f\u7528\u54ea\u4e2afilter\u6570\u636e\u5462? \u8fd9\u662f\u901a\u8fc7Data Block\u7684offset\u9664\u4ee5Base lg \u5c31\u53ef\u4ee5\u77e5\u9053\u8fd9\u5757\u6570\u636e\u8981\u4f7f\u7528\u7b2c\u51e0\u4e2afilter\u6570\u636e\u4e86\uff0c\u5373\u4f7f\u77e5\u9053\u4f7f\u7528\u7b2c\u51e0\u4e2afilter\u6570\u636e\uff0c\u4ecd\u7136\u4e0d\u8db3\u4ee5\u77e5\u9053\u5bf9\u5e94filter\u6570\u636e\u5728Block\u4e2d\u7684offset\uff0c\u9664\u975e\u4ece\u5934\u5f00\u59cb\u904d\u5386\u3002\u4f46\u662f\u8fd9\u6837\u6548\u7387\u5c31\u592a\u4f4e\u4e86\u3002 \u56e0\u6b64leveldb\u5728Filter Block\u7684\u5c3e\u90e8\u5b58\u653e\u4e86\u7d22\u5f15\uff0c\u8fd9\u4e9b\u7d22\u5f15\u6307\u660e\u4e86\u7b2cN\u4e2afilter\u5728Block\u4e2d\u7684offset\uff0c\u6211\u4eec\u53ea\u8981\u63d0\u524d\u628a\u7d22\u5f15\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\u5c31\u53ef\u4ee5\u5feb\u901f\u7684\u627e\u5230\u7b2cN\u4e2afilter\u6570\u636e\u4e86\u3002\u4f46\u662f\u7d22\u5f15\u6570\u636e \u548cfilter\u6570\u636e\u672c\u8eab\u90fd\u662f\u653e\u5728\u540c\u4e00\u4e2ablock\u4e2d\u7684\uff0c\u6211\u4eec\u8981\u5982\u4f55\u627e\u5230\u7d22\u5f15\u6570\u636e\u5728Block\u4e2d\u7684\u4f4d\u7f6e\u7684\u5462? \u8fd9\u5c31\u9760\u5c3e\u90e8\u5b58\u653e\u7684offset\u4e86\uff0c\u5728data block\u5c3e\u90e8\u7684\u6709\u4e24\u4e2a\u56fa\u5b9a\u5927\u5c0f\u7684\u5185\u5bb9\uff0c\u5b83\u544a\u8bc9\u6211\u4eec\u7f29\u5f71\u6570\u636e\u7684\u4f4d\u7f6e\uff0c \u6709\u4e86\u8fd9\u4e2a\u4f4d\u7f6e\u540e\u5c31\u53ef\u4ee5\u5feb\u901f\u627e\u5230\u7d22\u5f15\u6570\u636e\u4e86\u3002\u901a\u8fc7\u4e0b\u9762\u7684 FilterBlockReader \u4e5f\u53ef\u4ee5\u9a8c\u8bc1\u6211\u4eec\u4e0a\u8ff0\u5206\u6790\u7684\u7ed3\u8bba\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 FilterBlockReader :: FilterBlockReader ( const FilterPolicy * policy , const Slice & contents ) : policy_ ( policy ), data_ ( nullptr ), offset_ ( nullptr ), num_ ( 0 ), base_lg_ ( 0 ) { size_t n = contents . size (); // \u81f3\u5c11\u9700\u8981 1 + 4 \u4e2a\u5b57\u8282\uff0c1\u4e2a\u5b57\u8282\u5b58\u653eBase lg\u30014\u4e2a\u5b57\u8282filter offset\u4f4d\u7f6e if ( n < 5 ) return ; // 1 byte for base_lg_ and 4 for start of offset array // \u5148\u83b7\u53d6\u5230base lg base_lg_ = contents [ n - 1 ]; // \u83b7\u53d6\u5230filter offset\u4f4d\u7f6e uint32_t last_word = DecodeFixed32 ( contents . data () + n - 5 ); if ( last_word > n - 5 ) return ; data_ = contents . data (); offset_ = data_ + last_word ; // \u83b7\u53d6\u6709\u591a\u5c11\u4e2afilter\u6570\u636e num_ = ( n - 5 - last_word ) / 4 ; } bool FilterBlockReader :: KeyMayMatch ( uint64_t block_offset , const Slice & key ) { // block offset / base lg\u5c31\u53ef\u4ee5\u8ba1\u7b97\u51fa\u5bf9\u5e94\u7684filter\u6570\u636e\u5728\u54ea\u4e2a\u4f4d\u7f6e uint64_t index = block_offset >> base_lg_ ; if ( index < num_ ) { //\u627e\u5230\u5bf9\u5e94filter\u7684\u4f4d\u7f6e\uff0c\u4ee5\u53ca\u4e0b\u4e00\u4e2afilter\u7684\u4f4d\u7f6e uint32_t start = DecodeFixed32 ( offset_ + index * 4 ); uint32_t limit = DecodeFixed32 ( offset_ + index * 4 + 4 ); // \u786e\u8ba4\u6570\u636e\u662f\u5408\u6cd5\u7684\uff0c\u5c31\u5c06filter\u6570\u636e\u4fdd\u5b58\u4e0b\u6765\uff0c\u7136\u540e\u5f00\u59cb\u8fdb\u884c\u8fc7\u6ee4\u5668\u5339\u914d if ( start <= limit && limit <= static_cast < size_t > ( offset_ - data_ )) { Slice filter = Slice ( data_ + start , limit - start ); return policy_ -> KeyMayMatch ( key , filter ); } else if ( start == limit ) { // Empty filters do not match any keys return false ; } } return true ; // Errors are treated as potential matches } Filter block\u672c\u8d28\u4e0a\u4e5f\u662f\u4e00\u4e2a\u548cData Block\u4e00\u6837\u7684Block\u5757\uff0c\u4ed6\u4eec\u90fd\u662f\u4e00\u8d77\u653e\u5728\u4e00\u4e2asstable\u6587\u4ef6\u4e2d\u7684\uff0c\u90a3\u6211\u4eec\u5982\u4f55\u77e5\u9053Filter Block\u5728\u6587\u4ef6\u4e2d\u7684\u4f4d\u7f6e\u5462? \u5728Leveldb\u4e2d\u662f\u901a\u8fc7meta index block\u6765\u8fdb\u884c\u7d22\u5f15\u7684\uff0c\u8fd9\u662f\u4e00\u4e2a\u548cData Block\u683c\u5f0f\u76f8\u540c\u7684block\uff0c\u4e5f\u662fkey/value\u5f62\u5f0f\uff0ckey\u5c31\u662f\uff0c\"filter.\"\u4e0e\u8fc7\u6ee4\u5668\u540d\u5b57\u7ec4\u6210\u7684\u5e38\u91cf\u5b57\u7b26\u4e32\uff0c value\u4e3afilter block\u5728sstable\u4e2d\u7684\u7d22\u5f15\u4fe1\u606f\u5e8f\u5217\u5316\u540e\u7684\u5185\u5bb9\uff0c\u7d22\u5f15\u4fe1\u606f\u5305\u62ec\uff1a \u5728sstable\u4e2d\u7684\u504f\u79fb\u91cf \u6570\u636e\u957f\u5ea6 \u7d22\u5f15\u4fe1\u606f\u5728Leveldb\u4e2d\u4f7f\u7528BlockHandle\u5bf9\u8c61\u6765\u8868\u793a\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 // BlockHandle is a pointer to the extent of a file that stores a data // block or a meta block. class BlockHandle { public : // Maximum encoding length of a BlockHandle enum { kMaxEncodedLength = 10 + 10 }; BlockHandle (); // The offset of the block in the file. uint64_t offset () const { return offset_ ; } void set_offset ( uint64_t offset ) { offset_ = offset ; } // The size of the stored block uint64_t size () const { return size_ ; } void set_size ( uint64_t size ) { size_ = size ; } void EncodeTo ( std :: string * dst ) const ; Status DecodeFrom ( Slice * input ); private : uint64_t offset_ ; uint64_t size_ ; }; \u9664\u4e86filter block\u9700\u8981\u7d22\u5f15\uff0c\u6211\u4eec\u7684Data Block\u4e5f\u9700\u8981\u7d22\u5f15\uff0cLeveldb\u4e2d\u901a\u8fc7index block\u6765\u5bf9Data Block\u8fdb\u884c\u7d22\u5f15\uff0c\u5176block\u7684\u683c\u5f0f\u548cData Block\u4e00\u6837\uff0c\u4e5f\u662fkey/value \u5f62\u5f0f\uff0c\u5176key\u4e3a\u5bf9\u5e94Data Block\u7684\u6700\u5927key\uff0cvalue\u4e3aData Block\u5728sstable\u4e2d\u7684\u7d22\u5f15\u4fe1\u606f\u5e8f\u5217\u5316\u540e\u7684\u5185\u5bb9\uff0c\u4e5f\u5c31\u662foffset\u548csize\u3002 \u53ef\u4ee5\u770b\u51fameta index block\u548cindex block\u7528\u9014\u662f\u76f8\u540c\u7684\uff0c\u90fd\u662f\u4e3a\u4e86\u5bf9\u67d0\u4e00\u7c7bblock\u7684\u7d22\u5f15\uff0c\u800c\u4e14\u8fd9\u4e24\u7c7bblock\u548cData Block\u672c\u8eab\u7684\u683c\u5f0f\u53c8\u662f\u76f8\u540c\u7684\uff0c\u56e0\u6b64\u53ef\u4ee5\u5b8c\u5168\u590d\u7528\u76f8\u540c\u7684DBlock\u5bf9\u8c61\u3002 \u6700\u540e\u4e3a\u4e86\u7d22\u5f15meta index block\u548cindex block\uff0cLeveldb\u5728\u6574\u4e2asstable\u7684\u5c3e\u90e8\u6dfb\u52a0\u4e86Footer\uff0c\u76ee\u7684\u662f\u4e3a\u4e86\u6dfb\u52a0\u4e00\u4e2amagic number\u4ee5\u786e\u4fddsstable\u662f\u5b8c\u6574\u7684\uff0c\u4ee5\u53ca\u5bf9meta index block index block\u8fdb\u884c\u7d22\u5f15\u3002\u4e0b\u9762\u662ffooter\u7684\u683c\u5f0f\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 Status Footer::DecodeFrom ( Slice * input ) { // \u89e3\u7801\u51famagic number const char * magic_ptr = input -> data () + kEncodedLength - 8 ; const uint32_t magic_lo = DecodeFixed32 ( magic_ptr ); const uint32_t magic_hi = DecodeFixed32 ( magic_ptr + 4 ); const uint64_t magic = (( static_cast < uint64_t > ( magic_hi ) << 32 ) | ( static_cast < uint64_t > ( magic_lo ))); if ( magic != kTableMagicNumber ) { return Status :: Corruption ( \"not an sstable (bad magic number)\" ); } // \u89e3\u7801\u51fameta index\u7684\u7d22\u5f15\u4fe1\u606f Status result = metaindex_handle_ . DecodeFrom ( input ); if ( result . ok ()) { // \u89e3\u7801\u51faindex\u7684\u7d22\u5f15\u4fe1\u606f result = index_handle_ . DecodeFrom ( input ); } if ( result . ok ()) { // We skip over any leftover data (just padding for now) in \"input\" const char * end = magic_ptr + 8 ; * input = Slice ( end , input -> data () + input -> size () - end ); } return result ; } \u5230\u6b64\u7ef4\u6301sstable\u5c31\u5168\u90e8\u5206\u6790\u5b8c\u4e86\uff0c\u4e00\u4e2asstable\u4e2d\u5305\u542b\u4e865\u7c7b\u4fe1\u606f\uff0cData block\u3001Filter block\u3001meta index block\u3001index block\u3001footer\u3002 \u8bfb\u53d6sstable\u7684\u65f6\u5019 \u5148\u8bfb\u53d6footer\uff0c\u901a\u8fc7footer\u627e\u5230index block\u548cmeta index block\uff0c\u6709\u4e86meta index block\u540e\u5c31\u53ef\u4ee5\u5bf9\u67e5\u8be2\u505afilter\u8fc7\u6ee4\uff0c\u6709\u4e86index block\u5c31\u53ef\u4ee5\u5b9a\u4f4d\u5230Data Block \u6700\u7ec8\u901a\u8fc7\u904d\u5386Data block\u627e\u5230\u6700\u7ec8\u8981\u67e5\u8be2\u7684key\u6240\u5bf9\u5e94\u7684value\u3002\u5bf9\u7167\u7684\u4ee3\u7801\u6211\u4eec\u518d\u6b21\u9a8c\u8bc1\u6211\u4eec\u7684\u731c\u60f3\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 Status Table::Open ( const Options & options , RandomAccessFile * file , uint64_t size , Table ** table ) { * table = nullptr ; if ( size < Footer :: kEncodedLength ) { return Status :: Corruption ( \"file is too short to be an sstable\" ); } char footer_space [ Footer :: kEncodedLength ]; Slice footer_input ; // 1. \u8bfb\u53d6footer Status s = file -> Read ( size - Footer :: kEncodedLength , Footer :: kEncodedLength , & footer_input , footer_space ); if ( ! s . ok ()) return s ; Footer footer ; s = footer . DecodeFrom ( & footer_input ); if ( ! s . ok ()) return s ; // Read the index block // 2. \u8bfb\u53d6index block BlockContents index_block_contents ; ReadOptions opt ; if ( options . paranoid_checks ) { opt . verify_checksums = true ; } // \u901a\u8fc7index block\u7684\u7d22\u5f15\u4fe1\u606f\u627e\u5230index block s = ReadBlock ( file , opt , footer . index_handle (), & index_block_contents ); if ( s . ok ()) { // We've successfully read the footer and the index block: we're // ready to serve requests. Block * index_block = new Block ( index_block_contents ); Rep * rep = new Table :: Rep ; rep -> options = options ; rep -> file = file ; rep -> metaindex_handle = footer . metaindex_handle (); rep -> index_block = index_block ; rep -> cache_id = ( options . block_cache ? options . block_cache -> NewId () : 0 ); rep -> filter_data = nullptr ; rep -> filter = nullptr ; * table = new Table ( rep ); // 3. \u8bfb\u53d6filter block ( * table ) -> ReadMeta ( footer ); } return s ; } \u4e0a\u9762\u7684\u4ee3\u7801\u662f\u6253\u5f00sstable\u6587\u4ef6\uff0c\u6784\u5efa\u4e00\u4e2aTable\u7684\u8fc7\u7a0b\uff0c\u53ef\u4ee5\u770b\u5230\u548c\u6211\u4eec\u4e0a\u8ff0\u63cf\u8ff0\u7684\u57fa\u672c\u4e00\u81f4\uff0c\u901a\u8fc7footer\u52a0\u8f7d\u4e86filter block\u548cindex block\u3002 \u63a5\u7740\u6211\u4eec\u6765\u770b\u4e0b\u5982\u679c\u5728Table\u67e5\u8be2key\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 Status Table::InternalGet ( const ReadOptions & options , const Slice & k , void * arg , void ( * handle_result )( void * , const Slice & , const Slice & )) { Status s ; // 1. \u904d\u5386index block\u4e2d\u7684\u5185\u5bb9 Iterator * iiter = rep_ -> index_block -> NewIterator ( rep_ -> options . comparator ); // 2. \u901a\u8fc7key\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u8981\u67e5\u8be2key\u7684entry(index block\u7684key\u5c31\u662f\u6bcf\u4e2adata block\u4e2d\u7684\u6700\u5927key) iiter -> Seek ( k ); if ( iiter -> Valid ()) { // \u83b7\u53d6value(value\u5c31\u662f\u771f\u6b63\u7684Data Block\u7684\u7d22\u5f15) Slice handle_value = iiter -> value (); // 3. \u5148\u8fdb\u884cfilter\u8fc7\u6ee4 FilterBlockReader * filter = rep_ -> filter ; BlockHandle handle ; if ( filter != nullptr && handle . DecodeFrom ( & handle_value ). ok () && ! filter -> KeyMayMatch ( handle . offset (), k )) { // Not found } else { // \u8bfb\u53d6Data Block Iterator * block_iter = BlockReader ( this , options , iiter -> value ()); // 4. \u627e\u5230key\u7684\u4f4d\u7f6e\uff0c\u8c03\u7528handle_result\u5904\u7406\u67e5\u8be2\u5230\u7684\u7ed3\u679c block_iter -> Seek ( k ); if ( block_iter -> Valid ()) { ( * handle_result )( arg , block_iter -> key (), block_iter -> value ()); } s = block_iter -> status (); delete block_iter ; } } if ( s . ok ()) { s = iiter -> status (); } delete iiter ; return s ; }","title":"SStable"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/leveldb/leveldb/#table-cache","text":"\u901a\u8fc7Table Cache\u7f13\u5b58Table(\u662fsstable\u52a0\u8f7d\u5230\u5185\u5b58\u540e\u7684\u5f62\u5f0f)\uff0c\u7f13\u5b58\u7684key\u662ffile_number 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 Status TableCache::Get ( const ReadOptions & options , uint64_t file_number , uint64_t file_size , const Slice & k , void * arg , void ( * handle_result )( void * , const Slice & , const Slice & )) { Cache :: Handle * handle = nullptr ; // \u6839\u636e\u7ed9\u7684file number\u3001file size\u7b49\u4fe1\u606f\u5c06sstable\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\uff0c\u7136\u540e\u8fdb\u884c\u67e5\u8be2\u3002 // TableCache\u5c31\u662f\u7528\u6765\u7f13\u5b58sstable\u7684\u3002 Status s = FindTable ( file_number , file_size , & handle ); if ( s . ok ()) { Table * t = reinterpret_cast < TableAndFile *> ( cache_ -> Value ( handle )) -> table ; s = t -> InternalGet ( options , k , arg , handle_result ); cache_ -> Release ( handle ); } return s ; } Status TableCache::FindTable ( uint64_t file_number , uint64_t file_size , Cache :: Handle ** handle ) { Status s ; char buf [ sizeof ( file_number )]; EncodeFixed64 ( buf , file_number ); // file number\u4f5c\u4e3aTable\u7684key Slice key ( buf , sizeof ( buf )); // \u5148\u67e5\u8be2\u8fd9\u4e2afile number\u5bf9\u5e94\u7684sstable\u662f\u5426\u5df2\u7ecf\u7f13\u5b58 * handle = cache_ -> Lookup ( key ); // \u5982\u679c\u6ca1\u6709\u7f13\u5b58\u5c31\u521b\u5efaTable\uff0c\u5e76\u7f13\u5b58\u8d77\u6765 if ( * handle == nullptr ) { std :: string fname = TableFileName ( dbname_ , file_number ); RandomAccessFile * file = nullptr ; Table * table = nullptr ; s = env_ -> NewRandomAccessFile ( fname , & file ); if ( ! s . ok ()) { std :: string old_fname = SSTTableFileName ( dbname_ , file_number ); if ( env_ -> NewRandomAccessFile ( old_fname , & file ). ok ()) { s = Status :: OK (); } } if ( s . ok ()) { s = Table :: Open ( options_ , file , file_size , & table ); } if ( ! s . ok ()) { assert ( table == nullptr ); delete file ; // We do not cache error results so that if the error is transient, // or somebody repairs the file, we recover automatically. } else { TableAndFile * tf = new TableAndFile ; tf -> file = file ; tf -> table = table ; * handle = cache_ -> Insert ( key , tf , 1 , & DeleteEntry ); } } return s ; }","title":"Table Cache"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/leveldb/leveldb/#version-versionedit-versionset","text":"\u6bcf\u6b21\u6211\u4eec\u8fdb\u884cCompation\u7684\u65f6\u5019\uff0c\u53ef\u80fd\u4f1a\u65b0\u589esstable\u6587\u4ef6\uff0c\u4e5f\u6709\u53ef\u80fd\u4f1a\u5220\u9664\u8001\u7684sstable\u6587\u4ef6\uff0c\u65e0\u8bba\u5220\u9664\u8fd8\u662f\u65b0\u589e\uff0c\u8fd9\u4e9b\u53d8\u5316\u90fd\u4f1a\u751f\u6210VersionEdit\u5bf9\u8c61\uff0c\u901a\u8fc7\u8fd9\u4e2a\u5bf9\u8c61\u6765\u63cf\u8ff0 sstable\u6587\u4ef6\u7684\u53d8\u5316\u3002VersionEdit\u9700\u8981Apply\u5230Version\u4e2d\uff0c\u901a\u8fc7Version\u6211\u4eec\u5c31\u53ef\u4ee5\u77e5\u9053\u5f53\u524d\u7248\u672c\u4e0b\u6709\u591a\u5c11sstable\u6587\u4ef6\u3002\u56e0\u4e3aLeveldb\u53ef\u80fd\u4f1a\u5b58\u5728\u591a\u4e2a\u7248\u672c\uff0c\u56e0\u6b64\u5c31\u6709\u4e86 VersionSet\uff0c\u901a\u8fc7\u94fe\u8868\u7684\u65b9\u5f0f\u6765\u7ba1\u7406\u591a\u4e2aVersion\u3002\u4e0b\u9762\u662f\u4e00\u4e2aVersionEdit\u5982\u4f55Apply\u5230Version\u7684\u8fc7\u7a0b\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 Status VersionSet::LogAndApply ( VersionEdit * edit , port :: Mutex * mu ) { if ( edit -> has_log_number_ ) { assert ( edit -> log_number_ >= log_number_ ); assert ( edit -> log_number_ < next_file_number_ ); } else { edit -> SetLogNumber ( log_number_ ); } if ( ! edit -> has_prev_log_number_ ) { edit -> SetPrevLogNumber ( prev_log_number_ ); } edit -> SetNextFile ( next_file_number_ ); edit -> SetLastSequence ( last_sequence_ ); // 1. \u521b\u5efa\u4e00\u4e2a\u65b0\u7684Version Version * v = new Version ( this ); { // 2. \u5c06VersionEdit\u505aApply\u5f53\u524d\u7684Version\uff0c\u7136\u540e\u4ea7\u751f\u4e00\u4e2a\u65b0\u7684Version Builder builder ( this , current_ ); builder . Apply ( edit ); builder . SaveTo ( v ); } // 3. \u63d0\u524d\u8ba1\u7b97\u51fa\u4e0b\u4e00\u6b21Compation\u9700\u8981\u5408\u5e76\u7684level\u548csstable\u6587\u4ef6 Finalize ( v ); // 4. \u6700\u540e\u5c06Version\u4fe1\u606f\u5b58\u5165\u5230Manifest\u6587\u4ef6\u4e2d\u3002 // Initialize new descriptor log file if necessary by creating // a temporary file that contains a snapshot of the current version. std :: string new_manifest_file ; Status s ; if ( descriptor_log_ == nullptr ) { // No reason to unlock *mu here since we only hit this path in the // first call to LogAndApply (when opening the database). assert ( descriptor_file_ == nullptr ); new_manifest_file = DescriptorFileName ( dbname_ , manifest_file_number_ ); edit -> SetNextFile ( next_file_number_ ); s = env_ -> NewWritableFile ( new_manifest_file , & descriptor_file_ ); if ( s . ok ()) { descriptor_log_ = new log :: Writer ( descriptor_file_ ); s = WriteSnapshot ( descriptor_log_ ); } } // Unlock during expensive MANIFEST log write { mu -> Unlock (); // Write new record to MANIFEST log if ( s . ok ()) { std :: string record ; edit -> EncodeTo ( & record ); s = descriptor_log_ -> AddRecord ( record ); if ( s . ok ()) { s = descriptor_file_ -> Sync (); } if ( ! s . ok ()) { Log ( options_ -> info_log , \"MANIFEST write: %s \\n \" , s . ToString (). c_str ()); } } // If we just created a new descriptor file, install it by writing a // new CURRENT file that points to it. if ( s . ok () && ! new_manifest_file . empty ()) { s = SetCurrentFile ( env_ , dbname_ , manifest_file_number_ ); } mu -> Lock (); } // Install the new version // 5. \u91cd\u65b0\u8bbe\u7f6e\u5f53\u524dVersion\u4e3a\u6700\u65b0\u4ea7\u751f\u7684Version if ( s . ok ()) { AppendVersion ( v ); log_number_ = edit -> log_number_ ; prev_log_number_ = edit -> prev_log_number_ ; } else { delete v ; if ( ! new_manifest_file . empty ()) { delete descriptor_log_ ; delete descriptor_file_ ; descriptor_log_ = nullptr ; descriptor_file_ = nullptr ; env_ -> RemoveFile ( new_manifest_file ); } } return s ; }","title":"Version / VersionEdit / VersionSet"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/leveldb/leveldb/#manifest","text":"","title":"Manifest"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/leveldb/leveldb/#compation","text":"\u5728Leveldb\u4e2dCompation\u5206\u4e3a\u4e24\u79cd\uff0c\u7b2c\u4e00\u79cd\u88ab\u79f0\u4e3aMinor Compation\uff0c\u53ea\u6709\u5f53immutable\u5b58\u5728\u7684\u65f6\u5019\u624d\u4f1a\u89e6\u53d1\uff0c\u5c06immutable\u53d8\u6210sstable\uff0c\u5176\u8fc7\u7a0b\u5982\u4e0b: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 void DBImpl::CompactMemTable () { mutex_ . AssertHeld (); assert ( imm_ != nullptr ); // Save the contents of the memtable as a new Table VersionEdit edit ; Version * base = versions_ -> current (); base -> Ref (); // 1. \u4ea7\u751f\u65b0\u7684sstable\u6587\u4ef6\uff0c\u56e0\u6b64\u8fd9\u91cc\u521d\u59cb\u5316\u4e86VersionEdit\u6765\u8bb0\u5f55sstable\u6587\u4ef6\u7684\u53d8\u5316 Status s = WriteLevel0Table ( imm_ , & edit , base ); base -> Unref (); if ( s . ok () && shutting_down_ . load ( std :: memory_order_acquire )) { s = Status :: IOError ( \"Deleting DB during memtable compaction\" ); } // Replace immutable memtable with the generated Table if ( s . ok ()) { edit . SetPrevLogNumber ( 0 ); edit . SetLogNumber ( logfile_number_ ); // Earlier logs no longer needed // 2. \u5e94\u7528\u5230VersionSet\u4e2d\u3002 s = versions_ -> LogAndApply ( & edit , & mutex_ ); } if ( s . ok ()) { // 3. \u91ca\u653eimmutable\uff0c\u7136\u540e\u5f02\u5e38\u4e00\u4e9b\u5e9f\u5f03\u7684\u6587\u4ef6 // Commit to the new state imm_ -> Unref (); imm_ = nullptr ; has_imm_ . store ( false , std :: memory_order_release ); RemoveObsoleteFiles (); } else { RecordBackgroundError ( s ); } } \u4ea7\u751f\u7684sstable\u6587\u4ef6\u4e5f\u662f\u5206\u4e3a\u591a\u4e2alevel\u7684\u3002\u5728sstable\u4e2d\u67e5\u627e\u7684\u65f6\u5019\uff0c\u5148\u4ece\u9ad8level\u7684sstable\u6587\u4ef6\u4e2d\u67e5\u627e\uff0c\u7136\u540e\u4f9d\u6b21\u4ece\u4e0b\u4e00\u4e2alevel\u4e2d\u8fdb\u884c\u67e5\u627e\uff0c\u9ad8level\u7684sstable\u5305\u542b\u7684key\u8303\u56f4\u8d8a\u5e7f\u3002 \u4e0a\u9762\u7684 WriteLevel0Table \u4e5f\u5e76\u975e\u53ea\u662f\u5c06sstable\u5199\u5165\u5230level0\u4e2d\uff0c\u800c\u662f\u4f1a\u901a\u8fc7\u4e0b\u9762\u8fd9\u4e2a\u51fd\u6570\u627e\u5230\u4e00\u4e2a\u5408\u9002\u7684level\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 int Version::PickLevelForMemTableOutput ( const Slice & smallest_user_key , const Slice & largest_user_key ) { int level = 0 ; // 1. \u5148\u5224\u65adlevel0\u4e2d\u7684sstable\u548c\u65b0\u589e\u7684sstable\u662f\u5426\u91cd\u53e0\uff0c\u5982\u679c\u91cd\u53e0\u5c31\u76f4\u63a5\u6dfb\u52a0\u8fdb\u53bb\u7b49\u7740Major Compaction if ( ! OverlapInLevel ( 0 , & smallest_user_key , & largest_user_key )) { // Push to next level if there is no overlap in next level, // and the #bytes overlapping in the level after that are limited. InternalKey start ( smallest_user_key , kMaxSequenceNumber , kValueTypeForSeek ); InternalKey limit ( largest_user_key , 0 , static_cast < ValueType > ( 0 )); std :: vector < FileMetaData *> overlaps ; // 2. \u5982\u679c\u4e0d\u91cd\u53e0\u5c31\u7ee7\u7eed\u5f80\u4e0b\u4e00\u4e2alevel\u67e5\u627e\uff0c\u5982\u679c\u4e0b\u4e00\u4e2alevel\u4e5f\u4e0d\u91cd\u53e0\uff0c\u5e76\u4e14\u4e0b\u4e0b\u4e2alevel\u91cd\u53e0\u7684\u5927\u5c0f\u5c0f\u4e8e 10 * 2M\u3002 while ( level < config :: kMaxMemCompactLevel ) { if ( OverlapInLevel ( level + 1 , & smallest_user_key , & largest_user_key )) { break ; } if ( level + 2 < config :: kNumLevels ) { // Check that file does not overlap too many grandparent bytes. GetOverlappingInputs ( level + 2 , & start , & limit , & overlaps ); const int64_t sum = TotalFileSize ( overlaps ); if ( sum > MaxGrandParentOverlapBytes ( vset_ -> options_ )) { break ; } } // 3. \u7b26\u5408\u6761\u4ef6\u9012\u589elevel\uff0c\u7ee7\u7eed\u67e5\u627e\u3002 level ++ ; } } return level ; } \u8fd9\u4e48\u505a\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u907f\u514dCompation\uff0c\u5f53\u4e00\u4e2asstable\u6587\u4ef6\u51c6\u5907\u6dfb\u52a0\u8fdb\u53bb\u7684\u65f6\u5019\uff0c\u5982\u679c\u548clevel0\u5e76\u6ca1\u6709\u4efb\u4f55\u952e\u91cd\u53e0\uff0c\u5e76\u4e14\u4e0a\u4e00\u5c42\u4e5f\u6ca1\u6709\u91cd\u53e0\uff0c\u800c\u4e14\u4e0a\u4e0a\u5c42\u91cd\u53e0\u5927\u5c0f\u4e0d\u8d85\u8fc720M\uff0c\u90a3\u4e48\u53ef\u4ee5\u76f4\u63a5 \u5c06\u6587\u4ef6\u653e\u5230\u4e0a\u4e00\u5c42\uff0c\u907f\u514dMajor Compaction\uff0c\u7b97\u662f\u4e00\u79cd\u4f18\u5316\u5427\u3002\u4e0d\u8fc7\u8fd9\u4e2a\u6761\u4ef6\u8fd8\u662f\u633a\u82db\u523b\u7684\u3002\u540e\u9762\u5728\u8c08\u5230Major Compaction\u7684\u65f6\u5019\u4f1a\u8bf4\u5230leveldb\u4e2d\u66f4\u591a\u5173\u4e8eCompation\u7684\u4f18\u5316\u3002 \u5230\u6b64\u4e3a\u6b62minor Compation\u7b97\u662f\u8bb2\u5b8c\u4e86\uff0c\u8fd8\u662f\u6bd4\u8f83\u7b80\u5355\u7684\uff0c\u8fd9\u4e5f\u662fleveldb\u5bf9\u4e8eMinor Compation\u7684\u8981\u6c42\uff0c\u8981\u6c42\u5176\u5c3d\u53ef\u80fd\u77ed\u7684\u65f6\u95f4\u5185\u5b8c\u6210\uff0c\u5426\u5219\u4f1a\u5835\u585e\u6b63\u5e38\u7684\u5199\u5165\u64cd\u4f5c\uff0c\u56e0\u6b64Minor Compation \u7684\u4f18\u5148\u7ea7\u662f\u9ad8\u4e8emajor compation\u3002 Leveldb\u4e2d\u9664\u4e86\u4e0a\u9762\u8c08\u5230\u7684Minor Compation\u5916\uff0c\u8fd8\u6709\u4e00\u4e2a\u6700\u91cd\u8981\u7684Compation\u5c31\u662fMajor Compation\u4e86\uff0c\u4e0a\u9762\u8bf4\u5230\u4e00\u6b21minor compaction\u7684\u4ea7\u51fa\u662f\u4e00\u4e2a0\u5c42\u7684sstable\u6587\u4ef6(\u4e5f\u6709\u53ef\u80fd\u56e0\u4e3a\u4f18\u5316\u4ea7\u751f\u4e00\u4e2a\u9ad8level\u7684\u6587\u4ef6)\uff0c \u5176\u4e2d\u5305\u542b\u4e86\u6240\u6709\u7684\u5185\u5b58\u6570\u636e\u3002\u4f46\u662f\u82e5\u5e72\u4e2a0\u5c42\u6587\u4ef6\u4e2d\u662f\u53ef\u80fd\u5b58\u5728\u6570\u636eoverlap\u7684\u3002\u5982\u679c\u53ea\u6709minor compaction\uff0c\u90a3\u4e48\u8981\u67e5\u8be2\u4e00\u4e2a\u6570\u636e\u7684\u65f6\u5019\uff0c\u5c31\u5bfc\u81f4\u4e86\u6211\u4eec\u9700\u8981\u904d\u5386\u6240\u6709\u7684level0\u6587\u4ef6\u3002\u4e3a\u6b64\u6709\u4e86Major Compation\u3002 \u901a\u8fc7Major Compation\u5c06level0\u5c42\u4e2d\u91cd\u53e0\u7684\u6587\u4ef6\u8fdb\u884cmerge\u53d8\u6210\u4e0d\u91cd\u53e0\u7684\u6587\u4ef6\uff0c\u5e76\u653e\u5230level1\u4e2d\u3002\u4ee5\u786e\u4fddlevel1\u7684\u6587\u4ef6\u90fd\u662f\u4e0d\u91cd\u53e0\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u5728level1\u4e2d\u641c\u7d22\u4f9d\u6b21\u5c31\u53ef\u4ee5\u627e\u5230\u76ee\u7684\u6587\u4ef6\u4e86\u3002\u90a3\u4e48\u5230\u5e95\u4f55\u65f6\u89e6\u53d1Major Compation\u5462? Major Compation\u7684\u8fc7\u7a0b\u662f\u5982\u4f55\u7684? \u9996\u5148\u6765\u770b\u4e0bMajor Compation\u53d1\u751f\u7684\u6761\u4ef6: \u5f530\u5c42\u6587\u4ef6\u6570\u8d85\u8fc7\u9884\u5b9a\u7684\u4e0a\u9650\uff08\u9ed8\u8ba4\u4e3a4\u4e2a\uff09 \u5f53level i\u5c42\u6587\u4ef6\u7684\u603b\u5927\u5c0f\u8d85\u8fc7(10 ^ i) MB\uff1b \u5f53\u67d0\u4e2a\u6587\u4ef6\u65e0\u6548\u8bfb\u53d6\u7684\u6b21\u6570\u8fc7\u591a \u6bcf\u6b21\u505a\u5b8cMinor Compation\u7684\u65f6\u5019\u90fd\u4f1a\u8c03\u7528 Finalize \u6765\u8ba1\u7b97Major Compation\u9700\u8981\u64cd\u4f5c\u7684\u6587\u4ef6\u548clevel\uff0c\u8ba1\u7b97\u7684\u6761\u4ef6\u5c31\u662f\u4e0a\u9762\u7684\u7b2c\u4e00\u6761\u548c\u7b2c\u4e8c\u6761\uff0c\u4e0b\u9762\u8fd9\u4e2a\u51fd\u6570\u4f1a\u5c06\u7b2c\u4e00\u4e2a\u548c\u7b2c\u4e8c\u6761\u4ef6\u8f6c\u6362\u5206\u6570\u8fdb\u884c\u8ba1\u7b97\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 void VersionSet::Finalize ( Version * v ) { // Precomputed best level for next compaction int best_level = -1 ; double best_score = -1 ; for ( int level = 0 ; level < config :: kNumLevels - 1 ; level ++ ) { double score ; if ( level == 0 ) { // We treat level-0 specially by bounding the number of files // instead of number of bytes for two reasons: // // (1) With larger write-buffer sizes, it is nice not to do too // many level-0 compactions. // // (2) The files in level-0 are merged on every read and // therefore we wish to avoid too many files when the individual // file size is small (perhaps because of a small write-buffer // setting, or very high compression ratios, or lots of // overwrites/deletions). score = v -> files_ [ level ]. size () / static_cast < double > ( config :: kL0_CompactionTrigger ); } else { // Compute the ratio of current size to size limit. const uint64_t level_bytes = TotalFileSize ( v -> files_ [ level ]); score = static_cast < double > ( level_bytes ) / MaxBytesForLevel ( options_ , level ); } if ( score > best_score ) { best_level = level ; best_score = score ; } } v -> compaction_level_ = best_level ; v -> compaction_score_ = best_score ; } \u6bcf\u6b21\u8fdb\u884c\u6570\u636e\u67e5\u8be2\u7684\u65f6\u5019\uff0c\u90fd\u4f1a\u4ea7\u751fstats\uff0c\u8fd9\u4e9bstats\u8bb0\u5f55\u4e86\u54ea\u4e2a\u6587\u4ef6\u672a\u67e5\u8be2\u5230\u7684\u6b21\u6570\uff0c\u5982\u679c\u65e0\u6548\u8bfb\u53d6\u6b21\u6570\u592a\u591a\u5c31\u4f1a\u8bb0\u5f55\u4e0b\u6765\uff0c\u4fdd\u5b58\u5728 file_to_compact_ \u4e2d\uff0c\u8fd9\u5c31\u662f\u5bf9\u5e94\u5230\u4e0a\u9762\u7684\u7b2c\u4e09\u4e2a\u6761\u4ef6\u3002 1 2 3 4 5 6 7 8 9 10 11 12 bool Version::UpdateStats ( const GetStats & stats ) { FileMetaData * f = stats . seek_file ; if ( f != nullptr ) { f -> allowed_seeks -- ; if ( f -> allowed_seeks <= 0 && file_to_compact_ == nullptr ) { file_to_compact_ = f ; file_to_compact_level_ = stats . seek_file_level ; return true ; } } return false ; } \u6700\u540e\u901a\u8fc7compaction_score_\u548cfile_to_compact_\u4e24\u4e2a\u503c\u6765\u51b3\u5b9a\u662f\u5426\u9700\u8981\u505aMajor Compation\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 // Returns true iff some level needs a compaction. bool NeedsCompaction () const { Version * v = current_ ; return ( v -> compaction_score_ >= 1 ) || ( v -> file_to_compact_ != nullptr ); } void DBImpl::MaybeScheduleCompaction () { mutex_ . AssertHeld (); if ( background_compaction_scheduled_ ) { // Already scheduled } else if ( shutting_down_ . load ( std :: memory_order_acquire )) { // DB is being deleted; no more background compactions } else if ( ! bg_error_ . ok ()) { // Already got an error; no more changes } else if ( imm_ == nullptr && manual_compaction_ == nullptr && ! versions_ -> NeedsCompaction ()) { // No work to be done } else { // \u5982\u679c\u6ee1\u8db3Compation\u7684\u6761\u4ef6\uff0c\u5f00\u59cb\u8fdb\u884c\u4e0b\u4e00\u6b21Compation background_compaction_scheduled_ = true ; env_ -> Schedule ( & DBImpl :: BGWork , this ); } } MaybeScheduleCompaction\u4f1a\u5728\u4ee5\u4e0b\u51e0\u4e2a\u5730\u65b9\u6267\u884c\u3002 \u4e0a\u4e00\u6b21Compation\u5b8c\u6210\u540e\uff0c\u4f1a\u8c03\u7528MaybeScheduleCompaction\uff0c\u51b3\u5b9a\u662f\u5426\u9700\u8981\u8fdb\u884c\u4e0b\u4e00\u6b21Compation \u6bcf\u6b21\u67e5\u8be2\u5b8c\u6570\u636e\u540e\uff0c\u4f1a\u8c03\u7528MaybeScheduleCompaction Mmemtab\u5207\u6362\u6210immutable\u7684\u65f6\u5019 RecordReadSample \u8bf4\u5b8c\u4e86Major Compation\u89e6\u53d1\u7684\u6761\u4ef6\uff0c\u90a3\u4e48\u63a5\u4e0b\u6765\u6211\u4eec\u6765\u770b\u770bMajor Compation\u7684\u8fc7\u7a0b\u662f\u5982\u4f55\u7684? 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 Compaction * VersionSet::PickCompaction () { Compaction * c ; int level ; // We prefer compactions triggered by too much data in a level over // the compactions triggered by seeks. const bool size_compaction = ( current_ -> compaction_score_ >= 1 ); const bool seek_compaction = ( current_ -> file_to_compact_ != nullptr ); if ( size_compaction ) { level = current_ -> compaction_level_ ; assert ( level >= 0 ); assert ( level + 1 < config :: kNumLevels ); c = new Compaction ( options_ , level ); // Pick the first file that comes after compact_pointer_[level] for ( size_t i = 0 ; i < current_ -> files_ [ level ]. size (); i ++ ) { FileMetaData * f = current_ -> files_ [ level ][ i ]; if ( compact_pointer_ [ level ]. empty () || icmp_ . Compare ( f -> largest . Encode (), compact_pointer_ [ level ]) > 0 ) { c -> inputs_ [ 0 ]. push_back ( f ); break ; } } if ( c -> inputs_ [ 0 ]. empty ()) { // Wrap-around to the beginning of the key space c -> inputs_ [ 0 ]. push_back ( current_ -> files_ [ level ][ 0 ]); } } else if ( seek_compaction ) { level = current_ -> file_to_compact_level_ ; c = new Compaction ( options_ , level ); c -> inputs_ [ 0 ]. push_back ( current_ -> file_to_compact_ ); } else { return nullptr ; } c -> input_version_ = current_ ; c -> input_version_ -> Ref (); // Files in level 0 may overlap each other, so pick up all overlapping ones if ( level == 0 ) { InternalKey smallest , largest ; GetRange ( c -> inputs_ [ 0 ], & smallest , & largest ); // Note that the next call will discard the file we placed in // c->inputs_[0] earlier and replace it with an overlapping set // which will include the picked file. current_ -> GetOverlappingInputs ( 0 , & smallest , & largest , & c -> inputs_ [ 0 ]); assert ( ! c -> inputs_ [ 0 ]. empty ()); } SetupOtherInputs ( c ); return c ; }","title":"Compation"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/leveldb/leveldb/#filetype","text":"CURRENT \u91cc\u9762\u5b58\u653e\u4e86\u5f53\u524d\u7684MANIFEST\u6587\u4ef6\u540d\u79f0\uff0c\u901a\u8fc7CURRENT\u6587\u4ef6\u53ef\u4ee5\u627e\u5230MANIFEST\u6587\u4ef6\u8def\u5f84 LOCK \u6587\u4ef6\u9501\uff0c\u907f\u514d\u591a\u4e2a\u8fdb\u7a0b\u540c\u65f6\u64cd\u4f5c\u76f8\u540c\u7684\u6570\u636e\u5e93\u6587\u4ef6 LOG Leveldb\u81ea\u5df1\u7684\u65e5\u5fd7 LOG.old MANIFEST-[0-9]+ [0-9]+.(log|sst|ldb)","title":"FileType"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/leveldb/leveldb/#_1","text":"Leveldb-handbook","title":"\u53c2\u8003\u6587\u732e"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/pilot/","text":"WIP IstioConfigStore 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 // ConfigStore describes a set of platform agnostic APIs that must be supported // by the underlying platform to store and retrieve Istio configuration. // // Configuration key is defined to be a combination of the type, name, and // namespace of the configuration object. The configuration key is guaranteed // to be unique in the store. // // The storage interface presented here assumes that the underlying storage // layer supports _Get_ (list), _Update_ (update), _Create_ (create) and // _Delete_ semantics but does not guarantee any transactional semantics. // // _Update_, _Create_, and _Delete_ are mutator operations. These operations // are asynchronous, and you might not see the effect immediately (e.g. _Get_ // might not return the object by key immediately after you mutate the store.) // Intermittent errors might occur even though the operation succeeds, so you // should always check if the object store has been modified even if the // mutating operation returns an error. Objects should be created with // _Create_ operation and updated with _Update_ operation. // // Resource versions record the last mutation operation on each object. If a // mutation is applied to a different revision of an object than what the // underlying storage expects as defined by pure equality, the operation is // blocked. The client of this interface should not make assumptions about the // structure or ordering of the revision identifier. // // Object references supplied and returned from this interface should be // treated as read-only. Modifying them violates thread-safety. type ConfigStore interface { // Schemas exposes the configuration type schema known by the config store. // The type schema defines the bidrectional mapping between configuration // types and the protobuf encoding schema. Schemas () collection . Schemas // Get retrieves a configuration element by a type and a key Get ( typ config . GroupVersionKind , name , namespace string ) * config . Config // List returns objects by type and namespace. // Use \"\" for the namespace to list across namespaces. List ( typ config . GroupVersionKind , namespace string ) ([] config . Config , error ) // Create adds a new configuration object to the store. If an object with the // same name and namespace for the type already exists, the operation fails // with no side effects. Create ( config config . Config ) ( revision string , err error ) // Update modifies an existing configuration object in the store. Update // requires that the object has been created. Resource version prevents // overriding a value that has been changed between prior _Get_ and _Put_ // operation to achieve optimistic concurrency. This method returns a new // revision if the operation succeeds. Update ( config config . Config ) ( newRevision string , err error ) UpdateStatus ( config config . Config ) ( newRevision string , err error ) // Patch applies only the modifications made in the PatchFunc rather than doing a full replace. Useful to avoid // read-modify-write conflicts when there are many concurrent-writers to the same resource. Patch ( orig config . Config , patchFn config . PatchFunc ) ( string , error ) // Delete removes an object from the store by key // For k8s, resourceVersion must be fulfilled before a deletion is carried out. // If not possible, a 409 Conflict status will be returned. Delete ( typ config . GroupVersionKind , name , namespace string , resourceVersion * string ) error } // IstioConfigStore is a specialized interface to access config store using // Istio configuration types // nolint type IstioConfigStore interface { ConfigStore // ServiceEntries lists all service entries ServiceEntries () [] config . Config // Gateways lists all gateways bound to the specified workload labels Gateways ( workloadLabels labels . Collection ) [] config . Config // AuthorizationPolicies selects AuthorizationPolicies in the specified namespace. AuthorizationPolicies ( namespace string ) [] config . Config } ServiceDiscovery 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 // ServiceDiscovery enumerates Istio service instances. // nolint: lll type ServiceDiscovery interface { // Services list declarations of all services in the system Services () ([] * Service , error ) // GetService retrieves a service by host name if it exists GetService ( hostname host . Name ) ( * Service , error ) // InstancesByPort retrieves instances for a service on the given ports with labels that match // any of the supplied labels. All instances match an empty tag list. // // For example, consider an example of catalog.mystore.com: // Instances(catalog.myservice.com, 80) -> // --> IstioEndpoint(172.16.0.1:8888), Service(catalog.myservice.com), Labels(foo=bar) // --> IstioEndpoint(172.16.0.2:8888), Service(catalog.myservice.com), Labels(foo=bar) // --> IstioEndpoint(172.16.0.3:8888), Service(catalog.myservice.com), Labels(kitty=cat) // --> IstioEndpoint(172.16.0.4:8888), Service(catalog.myservice.com), Labels(kitty=cat) // // Calling Instances with specific labels returns a trimmed list. // e.g., Instances(catalog.myservice.com, 80, foo=bar) -> // --> IstioEndpoint(172.16.0.1:8888), Service(catalog.myservice.com), Labels(foo=bar) // --> IstioEndpoint(172.16.0.2:8888), Service(catalog.myservice.com), Labels(foo=bar) // // Similar concepts apply for calling this function with a specific // port, hostname and labels. // // Introduced in Istio 0.8. It is only called with 1 port. // CDS (clusters.go) calls it for building 'dnslb' type clusters. // EDS calls it for building the endpoints result. // Consult istio-dev before using this for anything else (except debugging/tools) InstancesByPort ( svc * Service , servicePort int , labels labels . Collection ) [] * ServiceInstance // GetProxyServiceInstances returns the service instances that co-located with a given Proxy // // Co-located generally means running in the same network namespace and security context. // // A Proxy operating as a Sidecar will return a non-empty slice. A stand-alone Proxy // will return an empty slice. // // There are two reasons why this returns multiple ServiceInstances instead of one: // - A ServiceInstance has a single IstioEndpoint which has a single Port. But a Service // may have many ports. So a workload implementing such a Service would need // multiple ServiceInstances, one for each port. // - A single workload may implement multiple logical Services. // // In the second case, multiple services may be implemented by the same physical port number, // though with a different ServicePort and IstioEndpoint for each. If any of these overlapping // services are not HTTP or H2-based, behavior is undefined, since the listener may not be able to // determine the intended destination of a connection without a Host header on the request. GetProxyServiceInstances ( * Proxy ) [] * ServiceInstance GetProxyWorkloadLabels ( * Proxy ) labels . Collection // GetIstioServiceAccounts returns a list of service accounts looked up from // the specified service hostname and ports. // Deprecated - service account tracking moved to XdsServer, incremental. GetIstioServiceAccounts ( svc * Service , ports [] int ) [] string // NetworkGateways returns a map of network name to Gateways that can be used to access that network. NetworkGateways () map [ string ][] * Gateway } Enviroment API\u7684\u5408\u96c6\uff0c\u5305\u542b\u4e86\u670d\u52a1\u53d1\u73b0\u3001\u914d\u7f6e\u5b58\u50a8\u3001Mesh Config\u3001Mesh Network Config\u7684\u6587\u4ef6Waitch\u3001PushContext\u7b49 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 // Environment provides an aggregate environmental API for Pilot type Environment struct { // Discovery interface for listing services and instances. ServiceDiscovery // Config interface for listing routing rules IstioConfigStore // Watcher is the watcher for the mesh config (to be merged into the config store) mesh . Watcher // NetworksWatcher (loaded from a config map) provides information about the // set of networks inside a mesh and how to route to endpoints in each // network. Each network provides information about the endpoints in a // routable L3 network. A single routable L3 network can have one or more // service registries. mesh . NetworksWatcher // PushContext holds informations during push generation. It is reset on config change, at the beginning // of the pushAll. It will hold all errors and stats and possibly caches needed during the entire cache computation. // DO NOT USE EXCEPT FOR TESTS AND HANDLING OF NEW CONNECTIONS. // ALL USE DURING A PUSH SHOULD USE THE ONE CREATED AT THE // START OF THE PUSH, THE GLOBAL ONE MAY CHANGE AND REFLECT A DIFFERENT // CONFIG AND PUSH PushContext * PushContext // DomainSuffix provides a default domain for the Istio server. DomainSuffix string ledger ledger . Ledger } DiscoveryServer 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 // DiscoveryServer is Pilot's gRPC implementation for Envoy's xds APIs type DiscoveryServer struct { // Env is the model environment. Env * model . Environment // MemRegistry is used for debug and load testing, allow adding services. Visible for testing. MemRegistry * memory . ServiceDiscovery // ConfigGenerator is responsible for generating data plane configuration using Istio networking // APIs and service registry info ConfigGenerator core . ConfigGenerator // Generators allow customizing the generated config, based on the client metadata. // Key is the generator type - will match the Generator metadata to set the per-connection // default generator, or the combination of Generator metadata and TypeUrl to select a // different generator for a type. // Normal istio clients use the default generator - will not be impacted by this. Generators map [ string ] model . XdsResourceGenerator concurrentPushLimit chan struct {} // mutex protecting global structs updated or read by ADS service, including ConfigsUpdated and // shards. mutex sync . RWMutex // InboundUpdates describes the number of configuration updates the discovery server has received InboundUpdates * atomic . Int64 // CommittedUpdates describes the number of configuration updates the discovery server has // received, process, and stored in the push context. If this number is less than InboundUpdates, // there are updates we have not yet processed. // Note: This does not mean that all proxies have received these configurations; it is strictly // the push context, which means that the next push to a proxy will receive this configuration. CommittedUpdates * atomic . Int64 // EndpointShards for a service. This is a global (per-server) list, built from // incremental updates. This is keyed by service and namespace EndpointShardsByService map [ string ] map [ string ] * EndpointShards pushChannel chan * model . PushRequest // mutex used for config update scheduling (former cache update mutex) updateMutex sync . RWMutex // pushQueue is the buffer that used after debounce and before the real xds push. pushQueue * PushQueue // debugHandlers is the list of all the supported debug handlers. debugHandlers map [ string ] string // adsClients reflect active gRPC channels, for both ADS and EDS. adsClients map [ string ] * Connection adsClientsMutex sync . RWMutex StatusReporter DistributionStatusCache // Authenticators for XDS requests. Should be same/subset of the CA authenticators. Authenticators [] authenticate . Authenticator // StatusGen is notified of connect/disconnect/nack on all connections StatusGen * StatusGen WorkloadEntryController * workloadentry . Controller // serverReady indicates caches have been synced up and server is ready to process requests. serverReady atomic . Bool debounceOptions debounceOptions instanceID string // Cache for XDS resources Cache model . XdsCache } PushContext 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 // PushContext tracks the status of a push - metrics and errors. // Metrics are reset after a push - at the beginning all // values are zero, and when push completes the status is reset. // The struct is exposed in a debug endpoint - fields public to allow // easy serialization as json. type PushContext struct { proxyStatusMutex sync . RWMutex // ProxyStatus is keyed by the error code, and holds a map keyed // by the ID. ProxyStatus map [ string ] map [ string ] ProxyPushStatus // Synthesized from env.Mesh exportToDefaults exportToDefaults // ServiceIndex is the index of services by various fields. ServiceIndex serviceIndex // ServiceAccounts contains a map of hostname and port to service accounts. ServiceAccounts map [ host . Name ] map [ int ][] string `json:\"-\"` // virtualServiceIndex is the index of virtual services by various fields. virtualServiceIndex virtualServiceIndex // destinationRuleIndex is the index of destination rules by various fields. destinationRuleIndex destinationRuleIndex // gatewayIndex is the index of gateways. gatewayIndex gatewayIndex // clusterLocalHosts extracted from the MeshConfig clusterLocalHosts host . Names // sidecars for each namespace sidecarsByNamespace map [ string ][] * SidecarScope // envoy filters for each namespace including global config namespace envoyFiltersByNamespace map [ string ][] * EnvoyFilterWrapper // The following data is either a global index or used in the inbound path. // Namespace specific views do not apply here. // AuthzPolicies stores the existing authorization policies in the cluster. Could be nil if there // are no authorization policies in the cluster. AuthzPolicies * AuthorizationPolicies `json:\"-\"` // Mesh configuration for the mesh. Mesh * meshconfig . MeshConfig `json:\"-\"` // Networks configuration. MeshNetworks * meshconfig . MeshNetworks `json:\"-\"` // Discovery interface for listing services and instances. ServiceDiscovery `json:\"-\"` // Config interface for listing routing rules IstioConfigStore `json:\"-\"` // AuthnBetaPolicies contains (beta) Authn policies by namespace. AuthnBetaPolicies * AuthenticationPolicies `json:\"-\"` Version string // cache gateways addresses for each network // this is mainly used for kubernetes multi-cluster scenario networkGateways map [ string ][] * Gateway initDone atomic . Bool initializeMutex sync . Mutex } PushRequest ServiceDiscovery Services() ([]*Service, error) \u83b7\u53d6\u6240\u6709\u7684Service GetService(hostname host.Name) (*Service, error) \u6839\u636ehost Name\u6765\u83b7\u53d6\u6307\u5b9aService InstancesByPort(svc *Service, servicePort int, labels labels.Collection) []*ServiceInstance \u57fa\u4e8eservice port\u548clabel\u8fdb\u884c\u67e5\u627e\u6307\u5b9aService\u7684instance GetProxyServiceInstances(*Proxy) []*ServiceInstances GetProxyWorkloadLabels(*Proxy) labels.Collection \u8fd4\u56de\u6307\u5b9aproxy\u6240\u5c5e\u4e8e\u7684ServiceInstance ServiceInstance \u662fservice + service port + \u5b9e\u9645\u670d\u52a1\u7684\u7aef\u53e3 + ip + labels \u7ec4\u5408\u800c\u6765 \u5982\u679c\u4e00\u4e2aproxy\u6709\u591a\u4e2aservice\uff0c\u90a3\u4e48GetProxyServiceInstances\u8fd4\u56de\u591a\u4e2aServiceInstance \u670d\u52a1\u53ef\u89c1\u6027 \u901a\u8fc7 networking.istio.io/exportTo \u8fd9\u4e2aAnnotations\u53ef\u4ee5\u6307\u5b9a\u8fd9\u4e2aservice\u662f\u5426\u66b4\u9732\u7ed9\u5176\u4ed6namespace\u7684sidecar\u8bbf\u95ee\uff0c \u53ef\u9009\u7684\u503c\u6709 * (\u66b4\u9732\u7ed9\u6240\u6709\u7684namespace)\u3001 . (\u53ea\u5728\u5f53\u524dnamespace)\u3001 ~ (\u4e0d\u66b4\u9732\u7ed9\u4efb\u4f55\uff0c\u4ec5\u81ea\u5df1\u8bbf\u95ee)\u3002 1 2 3 4 5 6 if svc . Annotations [ annotation . NetworkingExportTo . Name ] != \"\" { exportTo = make ( map [ visibility . Instance ] bool ) for _ , e := range strings . Split ( svc . Annotations [ annotation . NetworkingExportTo . Name ], \",\" ) { exportTo [ visibility . Instance ( e )] = true } } \u6700\u7ec8\u5c06exportTo\u4fdd\u5b58\u5728\u670d\u52a1\u7684 Attributes \u4e2d\u3002 Sidecar Sidecar\u901a\u8fc7workloadSelector\u6765\u9009\u62e9\u751f\u6548\u7684Proxy\uff0c\u5982\u679c\u6ca1\u6709\u914d\u7f6e\u5c31\u5bf9\u6240\u6709\u7684Proxy\u751f\u6548\uff0c\u4e00\u4e2aNamespace\u53ea\u80fd\u6709\u4e00\u4e2a\u6ca1\u6709workloadSelector\u7684Sidecar \u4f18\u5148\u9009\u62e9\u5e26\u6709workloadSelector\u7684Sidecar \u653e\u5728Root Namespace\u4e0b\u7684sidecar\u5bf9\u6240\u6709Namespace\u4e0b\u6ca1\u6709Sidecar\u914d\u7f6eNamespace\u751f\u6548\uff0c\u8fd9\u4e2a\u5168\u5c40\u7684\u9ed8\u8ba4Sidecar\u914d\u7f6e\u662f\u6ca1\u6709workloadSelector 1 2 3 4 5 6 7 8 9 10 11 12 apiVersion : networking.istio.io/v1beta1 kind : Sidecar metadata : name : default namespace : istio-config spec : egress : - hosts : # \u53ef\u4ee5\u8bbf\u95ee\u5f53\u524dnamesapce\u4e0b\u6240\u6709\u7684\u670d\u52a1 - \"./*\" # \u53ef\u4ee5\u8bbf\u95eeistio-system\u4e0b\u6240\u6709\u7684\u670d\u52a1 - \"istio-system/*\" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 apiVersion : networking.istio.io/v1beta1 kind : Sidecar metadata : name : ratings namespace : prod-us1 spec : workloadSelector : labels : app : ratings ingress : - port : number : 9080 protocol : HTTP name : somename defaultEndpoint : unix:///var/run/someuds.sock egress : - port : number : 9080 protocol : HTTP name : egresshttp hosts : - \"prod-us1/*\" - hosts : - \"istio-system/*\" SidecarScopes\u7684\u521d\u59cb\u5316 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 func ( ps * PushContext ) initSidecarScopes ( env * Environment ) error { sidecarConfigs , err := env . List ( gvk . Sidecar , NamespaceAll ) if err != nil { return err } sortConfigByCreationTime ( sidecarConfigs ) samples / helloworld / helloworld . yaml // \u7edf\u8ba1\u5e26\u6709Workselecor\u548c\u4e0d\u5e26Workselector\u7684Sidecar config sidecarConfigWithSelector := make ([] config . Config , 0 ) sidecarConfigWithoutSelector := make ([] config . Config , 0 ) sidecarsWithoutSelectorByNamespace := make ( map [ string ] struct {}) for _ , sidecarConfig := range sidecarConfigs { sidecar := sidecarConfig . Spec .( * networking . Sidecar ) if sidecar . WorkloadSelector != nil { sidecarConfigWithSelector = append ( sidecarConfigWithSelector , sidecarConfig ) } else { sidecarsWithoutSelectorByNamespace [ sidecarConfig . Namespace ] = struct {}{} sidecarConfigWithoutSelector = append ( sidecarConfigWithoutSelector , sidecarConfig ) } } sidecarNum := len ( sidecarConfigs ) sidecarConfigs = make ([] config . Config , 0 , sidecarNum ) sidecarConfigs = append ( sidecarConfigs , sidecarConfigWithSelector ... ) sidecarConfigs = append ( sidecarConfigs , sidecarConfigWithoutSelector ... ) // \u6309\u7167Namespace\u7eac\u5ea6\u7ec4\u7ec7SidecarScope ps . sidecarsByNamespace = make ( map [ string ][] * SidecarScope , sidecarNum ) for _ , sidecarConfig := range sidecarConfigs { sidecarConfig := sidecarConfig ps . sidecarsByNamespace [ sidecarConfig . Namespace ] = append ( ps . sidecarsByNamespace [ sidecarConfig . Namespace ], ConvertToSidecarScope ( ps , & sidecarConfig , sidecarConfig . Namespace )) } // \u627e\u5230Root Namespace\u4e0b\u7684Sidecar config // Hold reference root namespace's sidecar config // Root namespace can have only one sidecar config object // Currently we expect that it has no workloadSelectors var rootNSConfig * config . Config if ps . Mesh . RootNamespace != \"\" { for _ , sidecarConfig := range sidecarConfigs { if sidecarConfig . Namespace == ps . Mesh . RootNamespace && sidecarConfig . Spec .( * networking . Sidecar ). WorkloadSelector == nil { rootNSConfig = & sidecarConfig break } } } // build sidecar scopes for namespaces that do not have a non-workloadSelector sidecar CRD object. // Derive the sidecar scope from the root namespace's sidecar object if present. Else fallback // to the default Istio behavior mimicked by the DefaultSidecarScopeForNamespace function. // \u7edf\u8ba1\u6240\u6709\u7684Namespace namespaces := sets . NewSet () for _ , nsMap := range ps . ServiceIndex . HostnameAndNamespace { for ns := range nsMap { namespaces . Insert ( ns ) } } // \u5728\u6ca1\u6709WorkSelector\u7684Namespace\u4e0b\u6dfb\u52a0Root SidecarScope for ns := range namespaces { if _ , exist := sidecarsWithoutSelectorByNamespace [ ns ]; ! exist { ps . sidecarsByNamespace [ ns ] = append ( ps . sidecarsByNamespace [ ns ], ConvertToSidecarScope ( ps , rootNSConfig , ns )) } } return nil } \u603b\u7ed3\u6765\u8bf4\uff0c\u5e26\u6709WorkloadSelector\u4f18\u5148 \u5f53Proxy\u8fde\u63a5\u4e0a\u6765\u7684\u65f6\u5019\u4f1a\u7ed9\u5176\u751f\u6210Sidecar 1 2 3 4 5 6 7 8 9 10 11 12 func ( node * Proxy ) SetSidecarScope ( ps * PushContext ) { sidecarScope := node . SidecarScope if node . Type == SidecarProxy { workloadLabels := labels . Collection { node . Metadata . Labels } node . SidecarScope = ps . getSidecarScope ( node , workloadLabels ) } else { // Gateways should just have a default scope with egress: */* node . SidecarScope = DefaultSidecarScopeForNamespace ( ps , node . ConfigNamespace ) } node . PrevSidecarScope = sidecarScope } Debounce \u914d\u7f6e\u53d1\u751f\u53d8\u66f4\u7684\u65f6\u5019\uff0c\u901a\u8fc7\u6ce8\u518c\u7684handler\uff0c\u8c03\u7528ConfigUpdate 1 2 3 4 5 func ( s * DiscoveryServer ) ConfigUpdate ( req * model . PushRequest ) { inboundConfigUpdates . Increment () s . InboundUpdates . Inc () s . pushChannel <- req } \u901a\u8fc7PushChannel\u6536\u5230Push\u8bf7\u6c42\uff0c\u5f00\u59cb\u505adebounce \u6838\u5fc3\u7684\u51e0\u4e2achan\u5206\u522b\u662ftimeChan\u3001\u7528\u6765\u89e6\u53d1\u4e00\u4e2a\u65f6\u95f4\u95f4\u9694\uff0c\u53eb\u505adebounceAfter\uff0c\u4e00\u6b21\u63a8\u9001\u81f3\u5c11\u9700\u8981\u95f4\u9694debounceAfter\u7684\u65f6\u95f4\uff0c\u624d\u4f1a\u7ee7\u7eed\u89e6\u53d1\u4e0b\u4e00\u6b21\u63a8\u9001\u3002\u5728 \u6b64\u671f\u95f4\u51fa\u73b0\u7684Push\u8bf7\u6c42\u90fd\u4f1a\u88ab\u5408\u5e76\u3002freeCh\u662f\u7528\u6765\u505a\u8fde\u7eed\u63a8\u9001\u7684\uff0c\u5982\u679c\u4e00\u6b21\u63a8\u9001\u8017\u65f6\u592a\u4e45\u8d85\u8fc7\u4e86debounceAfter\u5c31\u9700\u8981\u901a\u8fc7freeCh\u5728\u63a8\u9001\u5b8c\u6210\u540e\u7ee7\u7eed\u63a8\u9001\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 // The debounce helper function is implemented to enable mocking func debounce ( ch chan * model . PushRequest , stopCh <- chan struct {}, opts debounceOptions , pushFn func ( req * model . PushRequest ), updateSent * atomic . Int64 ) { var timeChan <- chan time . Time var startDebounce time . Time var lastConfigUpdateTime time . Time pushCounter := 0 debouncedEvents := 0 // Keeps track of the push requests. If updates are debounce they will be merged. var req * model . PushRequest free := true freeCh := make ( chan struct {}, 1 ) push := func ( req * model . PushRequest , debouncedEvents int ) { pushFn ( req ) updateSent . Add ( int64 ( debouncedEvents )) freeCh <- struct {}{} } pushWorker := func () { // 3. \u8ba1\u7b97\u4ece\u5f00\u59cbdebounce\u5230\u63a8\u9001\u7684\u65f6\u95f4\u95f4\u9694\uff0c\u4ee5\u53ca\u4e0a\u4e00\u6b21\u914d\u7f6e\u53d8\u66f4\u5230\u73b0\u5728\u7684\u5b89\u9759\u65f6\u95f4 eventDelay := time . Since ( startDebounce ) quietTime := time . Since ( lastConfigUpdateTime ) // it has been too long or quiet enough // 4. \u5982\u679c\u4ecedebounce\u5230\u63a8\u9001\u7684\u95f4\u9694\u5927\u4e8edebounceMax\u5c31\u89e6\u53d1\u63a8\u9001\uff0c\u6216\u8005\u5728debounceAfter\u671f\u95f4\u6ca1\u6709\u4efb\u4f55\u914d\u7f6e\u53d8\u66f4\uff0c\u4e5f\u4f1a\u89e6\u53d1\u63a8\u9001 if eventDelay >= opts . debounceMax || quietTime >= opts . debounceAfter { if req != nil { pushCounter ++ adsLog . Infof ( \"Push debounce stable[%d] %d: %v since last change, %v since last push, full=%v\" , pushCounter , debouncedEvents , quietTime , eventDelay , req . Full ) // 5. \u63a8\u9001\u7684\u65f6\u5019\u8bbe\u7f6efree = false\uff0c\u907f\u514d\u6b64\u65f6\u914d\u7f6e\u6709\u53d8\u66f4\uff0c\u518d\u6b21\u89e6\u53d1\u63a8\u9001\uff0c\u7136\u540e\u91cd\u65b0\u8bbe\u7f6edebouncedEvents\uff0c\u89e6\u53d1\u4e0b\u4e00\u6b21debounce free = false // 6. \u63a8\u9001\u5b8c\u6210\u540e\u4f1a\u91cd\u65b0\u8bbe\u7f6efree\u7b49\u4e8etrue\uff0c\u4e8e\u6b64\u540c\u65f6\u8fd8\u4f1a\u518d\u6b21\u89e6\u53d1\u63a8\u9001\uff0c\u907f\u514d\u56e0\u4e3a\u4e0a\u4e00\u6b21\u63a8\u9001\u592a\u8017\u65f6\uff0c\u5bfc\u81f4\u63a8\u9001\u5806\u79ef\uff0c\u56e0\u6b64\u9700\u8981\u7b2c\u4e00\u65f6\u95f4\u518d\u6b21\u8fdb\u884c\u63a8\u9001 go push ( req , debouncedEvents ) req = nil debouncedEvents = 0 } } else { timeChan = time . After ( opts . debounceAfter - quietTime ) } } for { select { case <- freeCh : free = true pushWorker () case r := <- ch : // \u6536\u5230\u63a8\u9001\u8bf7\u6c42\uff0c\u5f00\u59cb\u5904\u7406\uff0c\u5bf9\u4e8eEDS\u5219\u76f4\u63a5Push\uff0c\u8df3\u8fc7debounce // \u5bf9\u4e8e\u975eEDS\u7684\u914d\u7f6e\u5f00\u59cb\u6267\u884cdebounce // If reason is not set, record it as an unknown reason if len ( r . Reason ) == 0 { r . Reason = [] model . TriggerReason { model . UnknownTrigger } } if ! opts . enableEDSDebounce && ! r . Full { // trigger push now, just for EDS go pushFn ( r ) continue } // 1. \u8bbe\u7f6edebounch timer lastConfigUpdateTime = time . Now () if debouncedEvents == 0 { timeChan = time . After ( opts . debounceAfter ) startDebounce = lastConfigUpdateTime } debouncedEvents ++ req = req . Merge ( r ) case <- timeChan : // 2. Debounc\u65f6\u95f4\u5230\u4e86\u540e\uff0c\u5f00\u59cb\u6267\u884cPushWorker if free { pushWorker () } case <- stopCh : return } } } \u603b\u7ed3\u6765\u770b\uff0cdebounceMax\u624d\u662f\u63a7\u5236\u63a8\u9001\u7684\u6700\u5927\u95f4\u9694\uff0c\u800cdebounceAfter\u5219\u63a7\u5236\u4e86\u63a8\u9001\u7684\u6700\u5c0f\u95f4\u9694\u3002 debounceAfter\u53ea\u6709\u5728\u4e00\u4e2a\u5b8c\u6574\u671f\u95f4\u6ca1\u6709\u4efb\u4f55\u914d\u7f6e\u53d8\u66f4\u7684\u65f6\u5019\uff0c\u624d\u4f1a\u89e6\u53d1\u63a8\u9001\u3002\u800cdebounceMax\u5219\u662f\u7d2f\u8ba1\u503c \u7d2f\u8ba1\u8d85\u8fc7debounceMax\u4f1a\u5f3a\u5236\u89e6\u53d1\u4e00\u6b21\u63a8\u9001\u3002 ProxyNeedsPush 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 // DefaultProxyNeedsPush check if a proxy needs push for this push event. func DefaultProxyNeedsPush(proxy *model.Proxy, req *model.PushRequest) bool { // \u5148\u6d4b\u8bd5\u8fd9\u4e2a\u914d\u7f6e\u662f\u5426\u5f71\u54cd\u8fd9\u4e2aProxy if ConfigAffectsProxy(req, proxy) { return true } // \u518d\u770b\u8fd9\u4e2aproxy\u662f\u5426\u6709servive instance(\u4e5f\u5c31\u662finbound)\uff0c\u5e76\u4e14\u914d\u7f6e\u6709\u66f4\u65b0 // \u800c\u4e14\u8fd9\u4e2a\u914d\u7f6e\u5c5e\u4e8einbound\u670d\u52a1\u66f4\u65b0\u3002 // If the proxy's service updated, need push for it. if len(proxy.ServiceInstances) > 0 && req.ConfigsUpdated != nil { svc := proxy.ServiceInstances[0].Service if _, ok := req.ConfigsUpdated[model.ConfigKey{ Kind: gvk.ServiceEntry, Name: string(svc.Hostname), Namespace: svc.Attributes.Namespace, }]; ok { return true } } return false } // ConfigAffectsProxy \u4e3b\u8981\u68c0\u6d4b\u4e24\u4e2a\u90e8\u5206\uff0c\u4e00\u4e2a\u90e8\u5206\u662f\u53d8\u66f4\u7684\u914d\u7f6ekind\u662f\u5426\u5f71\u54cd\u6307\u5b9a\u7684proxy\u7c7b\u578b\u3002 // \u53e6\u5916\u4e00\u4e2a\u5c31\u662f\u6839\u636eSidecarScope\u770b\u4e0b\u8fd9\u4e2a\u914d\u7f6e\u662f\u5426\u5728\u8fd9\u4e2aProxy\u7684\u5f71\u54cd\u8303\u56f4\u3002 func ConfigAffectsProxy(req *model.PushRequest, proxy *model.Proxy) bool { // Empty changes means \"all\" to get a backward compatibility. if len(req.ConfigsUpdated) == 0 { return true } for config := range req.ConfigsUpdated { affected := true // Some configKinds only affect specific proxy types if kindAffectedTypes, f := configKindAffectedProxyTypes[config.Kind]; f { affected = false for _, t := range kindAffectedTypes { if t == proxy.Type { affected = true break } } } if affected && checkProxyDependencies(proxy, config) { return true } } return false } func checkProxyDependencies(proxy *model.Proxy, config model.ConfigKey) bool { // Detailed config dependencies check. switch proxy.Type { case model.SidecarProxy: if proxy.SidecarScope.DependsOnConfig(config) { return true } else if proxy.PrevSidecarScope != nil && proxy.PrevSidecarScope.DependsOnConfig(config) { return true } default: // TODO We'll add the check for other proxy types later. return true } return false } // DependsOnConfig determines if the proxy depends on the given config. // Returns whether depends on this config or this kind of config is not scoped(unknown to be depended) here. func (sc *SidecarScope) DependsOnConfig(config ConfigKey) bool { if sc == nil { return true } // \u96c6\u7fa4\u7eac\u5ea6\u7684\u914d\u7f6e\uff0c\u89e6\u53d1full push\uff0c\u6bd4\u5982envoy filter\u3001Sidecar\u3001\u5065\u5168\u7b49 // This kind of config will trigger a change if made in the root namespace or the same namespace if _, f := clusterScopedConfigTypes[config.Kind]; f { return config.Namespace == sc.RootNamespace || config.Namespace == sc.Namespace } // \u975eservice entry\u3001 // This kind of config is unknown to sidecarScope. if _, f := sidecarScopeKnownConfigTypes[config.Kind]; !f { return true } _, exists := sc.configDependencies[config.HashCode()] return exists } Virtual Service Debug tools 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 curl http://127.0.0.1:9876/scopej/ curl 'http://127.0.0.1:9876/scopej/ads' \\ -X 'PUT' \\ -H 'Connection: keep-alive' \\ -H 'sec-ch-ua: \"Chromium\";v=\"88\", \"Google Chrome\";v=\"88\", \";Not A Brand\";v=\"99\"' \\ -H 'sec-ch-ua-mobile: ?0' \\ -H 'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 11_1_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.96 Safari/537.36' \\ -H 'Content-Type: text/plain;charset=UTF-8' \\ -H 'Accept: */*' \\ -H 'Origin: http://127.0.0.1:9876' \\ -H 'Sec-Fetch-Site: same-origin' \\ -H 'Sec-Fetch-Mode: cors' \\ -H 'Sec-Fetch-Dest: empty' \\ -H 'Referer: http://127.0.0.1:9876/scopez/' \\ -H 'Accept-Language: zh-CN,zh;q=0.9,zh-TW;q=0.8,en;q=0.7' \\ --data-raw '{\"name\":\"ads\",\"description\":\"ads debugging\",\"output_level\":\"info\",\"stack_trace_level\":\"none\",\"log_callers\":true}' \\ --compressed","title":"WIP"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/pilot/#wip","text":"IstioConfigStore 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 // ConfigStore describes a set of platform agnostic APIs that must be supported // by the underlying platform to store and retrieve Istio configuration. // // Configuration key is defined to be a combination of the type, name, and // namespace of the configuration object. The configuration key is guaranteed // to be unique in the store. // // The storage interface presented here assumes that the underlying storage // layer supports _Get_ (list), _Update_ (update), _Create_ (create) and // _Delete_ semantics but does not guarantee any transactional semantics. // // _Update_, _Create_, and _Delete_ are mutator operations. These operations // are asynchronous, and you might not see the effect immediately (e.g. _Get_ // might not return the object by key immediately after you mutate the store.) // Intermittent errors might occur even though the operation succeeds, so you // should always check if the object store has been modified even if the // mutating operation returns an error. Objects should be created with // _Create_ operation and updated with _Update_ operation. // // Resource versions record the last mutation operation on each object. If a // mutation is applied to a different revision of an object than what the // underlying storage expects as defined by pure equality, the operation is // blocked. The client of this interface should not make assumptions about the // structure or ordering of the revision identifier. // // Object references supplied and returned from this interface should be // treated as read-only. Modifying them violates thread-safety. type ConfigStore interface { // Schemas exposes the configuration type schema known by the config store. // The type schema defines the bidrectional mapping between configuration // types and the protobuf encoding schema. Schemas () collection . Schemas // Get retrieves a configuration element by a type and a key Get ( typ config . GroupVersionKind , name , namespace string ) * config . Config // List returns objects by type and namespace. // Use \"\" for the namespace to list across namespaces. List ( typ config . GroupVersionKind , namespace string ) ([] config . Config , error ) // Create adds a new configuration object to the store. If an object with the // same name and namespace for the type already exists, the operation fails // with no side effects. Create ( config config . Config ) ( revision string , err error ) // Update modifies an existing configuration object in the store. Update // requires that the object has been created. Resource version prevents // overriding a value that has been changed between prior _Get_ and _Put_ // operation to achieve optimistic concurrency. This method returns a new // revision if the operation succeeds. Update ( config config . Config ) ( newRevision string , err error ) UpdateStatus ( config config . Config ) ( newRevision string , err error ) // Patch applies only the modifications made in the PatchFunc rather than doing a full replace. Useful to avoid // read-modify-write conflicts when there are many concurrent-writers to the same resource. Patch ( orig config . Config , patchFn config . PatchFunc ) ( string , error ) // Delete removes an object from the store by key // For k8s, resourceVersion must be fulfilled before a deletion is carried out. // If not possible, a 409 Conflict status will be returned. Delete ( typ config . GroupVersionKind , name , namespace string , resourceVersion * string ) error } // IstioConfigStore is a specialized interface to access config store using // Istio configuration types // nolint type IstioConfigStore interface { ConfigStore // ServiceEntries lists all service entries ServiceEntries () [] config . Config // Gateways lists all gateways bound to the specified workload labels Gateways ( workloadLabels labels . Collection ) [] config . Config // AuthorizationPolicies selects AuthorizationPolicies in the specified namespace. AuthorizationPolicies ( namespace string ) [] config . Config } ServiceDiscovery 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 // ServiceDiscovery enumerates Istio service instances. // nolint: lll type ServiceDiscovery interface { // Services list declarations of all services in the system Services () ([] * Service , error ) // GetService retrieves a service by host name if it exists GetService ( hostname host . Name ) ( * Service , error ) // InstancesByPort retrieves instances for a service on the given ports with labels that match // any of the supplied labels. All instances match an empty tag list. // // For example, consider an example of catalog.mystore.com: // Instances(catalog.myservice.com, 80) -> // --> IstioEndpoint(172.16.0.1:8888), Service(catalog.myservice.com), Labels(foo=bar) // --> IstioEndpoint(172.16.0.2:8888), Service(catalog.myservice.com), Labels(foo=bar) // --> IstioEndpoint(172.16.0.3:8888), Service(catalog.myservice.com), Labels(kitty=cat) // --> IstioEndpoint(172.16.0.4:8888), Service(catalog.myservice.com), Labels(kitty=cat) // // Calling Instances with specific labels returns a trimmed list. // e.g., Instances(catalog.myservice.com, 80, foo=bar) -> // --> IstioEndpoint(172.16.0.1:8888), Service(catalog.myservice.com), Labels(foo=bar) // --> IstioEndpoint(172.16.0.2:8888), Service(catalog.myservice.com), Labels(foo=bar) // // Similar concepts apply for calling this function with a specific // port, hostname and labels. // // Introduced in Istio 0.8. It is only called with 1 port. // CDS (clusters.go) calls it for building 'dnslb' type clusters. // EDS calls it for building the endpoints result. // Consult istio-dev before using this for anything else (except debugging/tools) InstancesByPort ( svc * Service , servicePort int , labels labels . Collection ) [] * ServiceInstance // GetProxyServiceInstances returns the service instances that co-located with a given Proxy // // Co-located generally means running in the same network namespace and security context. // // A Proxy operating as a Sidecar will return a non-empty slice. A stand-alone Proxy // will return an empty slice. // // There are two reasons why this returns multiple ServiceInstances instead of one: // - A ServiceInstance has a single IstioEndpoint which has a single Port. But a Service // may have many ports. So a workload implementing such a Service would need // multiple ServiceInstances, one for each port. // - A single workload may implement multiple logical Services. // // In the second case, multiple services may be implemented by the same physical port number, // though with a different ServicePort and IstioEndpoint for each. If any of these overlapping // services are not HTTP or H2-based, behavior is undefined, since the listener may not be able to // determine the intended destination of a connection without a Host header on the request. GetProxyServiceInstances ( * Proxy ) [] * ServiceInstance GetProxyWorkloadLabels ( * Proxy ) labels . Collection // GetIstioServiceAccounts returns a list of service accounts looked up from // the specified service hostname and ports. // Deprecated - service account tracking moved to XdsServer, incremental. GetIstioServiceAccounts ( svc * Service , ports [] int ) [] string // NetworkGateways returns a map of network name to Gateways that can be used to access that network. NetworkGateways () map [ string ][] * Gateway } Enviroment API\u7684\u5408\u96c6\uff0c\u5305\u542b\u4e86\u670d\u52a1\u53d1\u73b0\u3001\u914d\u7f6e\u5b58\u50a8\u3001Mesh Config\u3001Mesh Network Config\u7684\u6587\u4ef6Waitch\u3001PushContext\u7b49 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 // Environment provides an aggregate environmental API for Pilot type Environment struct { // Discovery interface for listing services and instances. ServiceDiscovery // Config interface for listing routing rules IstioConfigStore // Watcher is the watcher for the mesh config (to be merged into the config store) mesh . Watcher // NetworksWatcher (loaded from a config map) provides information about the // set of networks inside a mesh and how to route to endpoints in each // network. Each network provides information about the endpoints in a // routable L3 network. A single routable L3 network can have one or more // service registries. mesh . NetworksWatcher // PushContext holds informations during push generation. It is reset on config change, at the beginning // of the pushAll. It will hold all errors and stats and possibly caches needed during the entire cache computation. // DO NOT USE EXCEPT FOR TESTS AND HANDLING OF NEW CONNECTIONS. // ALL USE DURING A PUSH SHOULD USE THE ONE CREATED AT THE // START OF THE PUSH, THE GLOBAL ONE MAY CHANGE AND REFLECT A DIFFERENT // CONFIG AND PUSH PushContext * PushContext // DomainSuffix provides a default domain for the Istio server. DomainSuffix string ledger ledger . Ledger } DiscoveryServer 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 // DiscoveryServer is Pilot's gRPC implementation for Envoy's xds APIs type DiscoveryServer struct { // Env is the model environment. Env * model . Environment // MemRegistry is used for debug and load testing, allow adding services. Visible for testing. MemRegistry * memory . ServiceDiscovery // ConfigGenerator is responsible for generating data plane configuration using Istio networking // APIs and service registry info ConfigGenerator core . ConfigGenerator // Generators allow customizing the generated config, based on the client metadata. // Key is the generator type - will match the Generator metadata to set the per-connection // default generator, or the combination of Generator metadata and TypeUrl to select a // different generator for a type. // Normal istio clients use the default generator - will not be impacted by this. Generators map [ string ] model . XdsResourceGenerator concurrentPushLimit chan struct {} // mutex protecting global structs updated or read by ADS service, including ConfigsUpdated and // shards. mutex sync . RWMutex // InboundUpdates describes the number of configuration updates the discovery server has received InboundUpdates * atomic . Int64 // CommittedUpdates describes the number of configuration updates the discovery server has // received, process, and stored in the push context. If this number is less than InboundUpdates, // there are updates we have not yet processed. // Note: This does not mean that all proxies have received these configurations; it is strictly // the push context, which means that the next push to a proxy will receive this configuration. CommittedUpdates * atomic . Int64 // EndpointShards for a service. This is a global (per-server) list, built from // incremental updates. This is keyed by service and namespace EndpointShardsByService map [ string ] map [ string ] * EndpointShards pushChannel chan * model . PushRequest // mutex used for config update scheduling (former cache update mutex) updateMutex sync . RWMutex // pushQueue is the buffer that used after debounce and before the real xds push. pushQueue * PushQueue // debugHandlers is the list of all the supported debug handlers. debugHandlers map [ string ] string // adsClients reflect active gRPC channels, for both ADS and EDS. adsClients map [ string ] * Connection adsClientsMutex sync . RWMutex StatusReporter DistributionStatusCache // Authenticators for XDS requests. Should be same/subset of the CA authenticators. Authenticators [] authenticate . Authenticator // StatusGen is notified of connect/disconnect/nack on all connections StatusGen * StatusGen WorkloadEntryController * workloadentry . Controller // serverReady indicates caches have been synced up and server is ready to process requests. serverReady atomic . Bool debounceOptions debounceOptions instanceID string // Cache for XDS resources Cache model . XdsCache } PushContext 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 // PushContext tracks the status of a push - metrics and errors. // Metrics are reset after a push - at the beginning all // values are zero, and when push completes the status is reset. // The struct is exposed in a debug endpoint - fields public to allow // easy serialization as json. type PushContext struct { proxyStatusMutex sync . RWMutex // ProxyStatus is keyed by the error code, and holds a map keyed // by the ID. ProxyStatus map [ string ] map [ string ] ProxyPushStatus // Synthesized from env.Mesh exportToDefaults exportToDefaults // ServiceIndex is the index of services by various fields. ServiceIndex serviceIndex // ServiceAccounts contains a map of hostname and port to service accounts. ServiceAccounts map [ host . Name ] map [ int ][] string `json:\"-\"` // virtualServiceIndex is the index of virtual services by various fields. virtualServiceIndex virtualServiceIndex // destinationRuleIndex is the index of destination rules by various fields. destinationRuleIndex destinationRuleIndex // gatewayIndex is the index of gateways. gatewayIndex gatewayIndex // clusterLocalHosts extracted from the MeshConfig clusterLocalHosts host . Names // sidecars for each namespace sidecarsByNamespace map [ string ][] * SidecarScope // envoy filters for each namespace including global config namespace envoyFiltersByNamespace map [ string ][] * EnvoyFilterWrapper // The following data is either a global index or used in the inbound path. // Namespace specific views do not apply here. // AuthzPolicies stores the existing authorization policies in the cluster. Could be nil if there // are no authorization policies in the cluster. AuthzPolicies * AuthorizationPolicies `json:\"-\"` // Mesh configuration for the mesh. Mesh * meshconfig . MeshConfig `json:\"-\"` // Networks configuration. MeshNetworks * meshconfig . MeshNetworks `json:\"-\"` // Discovery interface for listing services and instances. ServiceDiscovery `json:\"-\"` // Config interface for listing routing rules IstioConfigStore `json:\"-\"` // AuthnBetaPolicies contains (beta) Authn policies by namespace. AuthnBetaPolicies * AuthenticationPolicies `json:\"-\"` Version string // cache gateways addresses for each network // this is mainly used for kubernetes multi-cluster scenario networkGateways map [ string ][] * Gateway initDone atomic . Bool initializeMutex sync . Mutex }","title":"WIP"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/pilot/#pushrequest","text":"","title":"PushRequest"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/pilot/#servicediscovery","text":"Services() ([]*Service, error) \u83b7\u53d6\u6240\u6709\u7684Service GetService(hostname host.Name) (*Service, error) \u6839\u636ehost Name\u6765\u83b7\u53d6\u6307\u5b9aService InstancesByPort(svc *Service, servicePort int, labels labels.Collection) []*ServiceInstance \u57fa\u4e8eservice port\u548clabel\u8fdb\u884c\u67e5\u627e\u6307\u5b9aService\u7684instance GetProxyServiceInstances(*Proxy) []*ServiceInstances GetProxyWorkloadLabels(*Proxy) labels.Collection \u8fd4\u56de\u6307\u5b9aproxy\u6240\u5c5e\u4e8e\u7684ServiceInstance ServiceInstance \u662fservice + service port + \u5b9e\u9645\u670d\u52a1\u7684\u7aef\u53e3 + ip + labels \u7ec4\u5408\u800c\u6765 \u5982\u679c\u4e00\u4e2aproxy\u6709\u591a\u4e2aservice\uff0c\u90a3\u4e48GetProxyServiceInstances\u8fd4\u56de\u591a\u4e2aServiceInstance","title":"ServiceDiscovery"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/pilot/#_1","text":"\u901a\u8fc7 networking.istio.io/exportTo \u8fd9\u4e2aAnnotations\u53ef\u4ee5\u6307\u5b9a\u8fd9\u4e2aservice\u662f\u5426\u66b4\u9732\u7ed9\u5176\u4ed6namespace\u7684sidecar\u8bbf\u95ee\uff0c \u53ef\u9009\u7684\u503c\u6709 * (\u66b4\u9732\u7ed9\u6240\u6709\u7684namespace)\u3001 . (\u53ea\u5728\u5f53\u524dnamespace)\u3001 ~ (\u4e0d\u66b4\u9732\u7ed9\u4efb\u4f55\uff0c\u4ec5\u81ea\u5df1\u8bbf\u95ee)\u3002 1 2 3 4 5 6 if svc . Annotations [ annotation . NetworkingExportTo . Name ] != \"\" { exportTo = make ( map [ visibility . Instance ] bool ) for _ , e := range strings . Split ( svc . Annotations [ annotation . NetworkingExportTo . Name ], \",\" ) { exportTo [ visibility . Instance ( e )] = true } } \u6700\u7ec8\u5c06exportTo\u4fdd\u5b58\u5728\u670d\u52a1\u7684 Attributes \u4e2d\u3002","title":"\u670d\u52a1\u53ef\u89c1\u6027"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/pilot/#sidecar","text":"Sidecar\u901a\u8fc7workloadSelector\u6765\u9009\u62e9\u751f\u6548\u7684Proxy\uff0c\u5982\u679c\u6ca1\u6709\u914d\u7f6e\u5c31\u5bf9\u6240\u6709\u7684Proxy\u751f\u6548\uff0c\u4e00\u4e2aNamespace\u53ea\u80fd\u6709\u4e00\u4e2a\u6ca1\u6709workloadSelector\u7684Sidecar \u4f18\u5148\u9009\u62e9\u5e26\u6709workloadSelector\u7684Sidecar \u653e\u5728Root Namespace\u4e0b\u7684sidecar\u5bf9\u6240\u6709Namespace\u4e0b\u6ca1\u6709Sidecar\u914d\u7f6eNamespace\u751f\u6548\uff0c\u8fd9\u4e2a\u5168\u5c40\u7684\u9ed8\u8ba4Sidecar\u914d\u7f6e\u662f\u6ca1\u6709workloadSelector 1 2 3 4 5 6 7 8 9 10 11 12 apiVersion : networking.istio.io/v1beta1 kind : Sidecar metadata : name : default namespace : istio-config spec : egress : - hosts : # \u53ef\u4ee5\u8bbf\u95ee\u5f53\u524dnamesapce\u4e0b\u6240\u6709\u7684\u670d\u52a1 - \"./*\" # \u53ef\u4ee5\u8bbf\u95eeistio-system\u4e0b\u6240\u6709\u7684\u670d\u52a1 - \"istio-system/*\" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 apiVersion : networking.istio.io/v1beta1 kind : Sidecar metadata : name : ratings namespace : prod-us1 spec : workloadSelector : labels : app : ratings ingress : - port : number : 9080 protocol : HTTP name : somename defaultEndpoint : unix:///var/run/someuds.sock egress : - port : number : 9080 protocol : HTTP name : egresshttp hosts : - \"prod-us1/*\" - hosts : - \"istio-system/*\" SidecarScopes\u7684\u521d\u59cb\u5316 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 func ( ps * PushContext ) initSidecarScopes ( env * Environment ) error { sidecarConfigs , err := env . List ( gvk . Sidecar , NamespaceAll ) if err != nil { return err } sortConfigByCreationTime ( sidecarConfigs ) samples / helloworld / helloworld . yaml // \u7edf\u8ba1\u5e26\u6709Workselecor\u548c\u4e0d\u5e26Workselector\u7684Sidecar config sidecarConfigWithSelector := make ([] config . Config , 0 ) sidecarConfigWithoutSelector := make ([] config . Config , 0 ) sidecarsWithoutSelectorByNamespace := make ( map [ string ] struct {}) for _ , sidecarConfig := range sidecarConfigs { sidecar := sidecarConfig . Spec .( * networking . Sidecar ) if sidecar . WorkloadSelector != nil { sidecarConfigWithSelector = append ( sidecarConfigWithSelector , sidecarConfig ) } else { sidecarsWithoutSelectorByNamespace [ sidecarConfig . Namespace ] = struct {}{} sidecarConfigWithoutSelector = append ( sidecarConfigWithoutSelector , sidecarConfig ) } } sidecarNum := len ( sidecarConfigs ) sidecarConfigs = make ([] config . Config , 0 , sidecarNum ) sidecarConfigs = append ( sidecarConfigs , sidecarConfigWithSelector ... ) sidecarConfigs = append ( sidecarConfigs , sidecarConfigWithoutSelector ... ) // \u6309\u7167Namespace\u7eac\u5ea6\u7ec4\u7ec7SidecarScope ps . sidecarsByNamespace = make ( map [ string ][] * SidecarScope , sidecarNum ) for _ , sidecarConfig := range sidecarConfigs { sidecarConfig := sidecarConfig ps . sidecarsByNamespace [ sidecarConfig . Namespace ] = append ( ps . sidecarsByNamespace [ sidecarConfig . Namespace ], ConvertToSidecarScope ( ps , & sidecarConfig , sidecarConfig . Namespace )) } // \u627e\u5230Root Namespace\u4e0b\u7684Sidecar config // Hold reference root namespace's sidecar config // Root namespace can have only one sidecar config object // Currently we expect that it has no workloadSelectors var rootNSConfig * config . Config if ps . Mesh . RootNamespace != \"\" { for _ , sidecarConfig := range sidecarConfigs { if sidecarConfig . Namespace == ps . Mesh . RootNamespace && sidecarConfig . Spec .( * networking . Sidecar ). WorkloadSelector == nil { rootNSConfig = & sidecarConfig break } } } // build sidecar scopes for namespaces that do not have a non-workloadSelector sidecar CRD object. // Derive the sidecar scope from the root namespace's sidecar object if present. Else fallback // to the default Istio behavior mimicked by the DefaultSidecarScopeForNamespace function. // \u7edf\u8ba1\u6240\u6709\u7684Namespace namespaces := sets . NewSet () for _ , nsMap := range ps . ServiceIndex . HostnameAndNamespace { for ns := range nsMap { namespaces . Insert ( ns ) } } // \u5728\u6ca1\u6709WorkSelector\u7684Namespace\u4e0b\u6dfb\u52a0Root SidecarScope for ns := range namespaces { if _ , exist := sidecarsWithoutSelectorByNamespace [ ns ]; ! exist { ps . sidecarsByNamespace [ ns ] = append ( ps . sidecarsByNamespace [ ns ], ConvertToSidecarScope ( ps , rootNSConfig , ns )) } } return nil } \u603b\u7ed3\u6765\u8bf4\uff0c\u5e26\u6709WorkloadSelector\u4f18\u5148 \u5f53Proxy\u8fde\u63a5\u4e0a\u6765\u7684\u65f6\u5019\u4f1a\u7ed9\u5176\u751f\u6210Sidecar 1 2 3 4 5 6 7 8 9 10 11 12 func ( node * Proxy ) SetSidecarScope ( ps * PushContext ) { sidecarScope := node . SidecarScope if node . Type == SidecarProxy { workloadLabels := labels . Collection { node . Metadata . Labels } node . SidecarScope = ps . getSidecarScope ( node , workloadLabels ) } else { // Gateways should just have a default scope with egress: */* node . SidecarScope = DefaultSidecarScopeForNamespace ( ps , node . ConfigNamespace ) } node . PrevSidecarScope = sidecarScope }","title":"Sidecar"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/pilot/#debounce","text":"\u914d\u7f6e\u53d1\u751f\u53d8\u66f4\u7684\u65f6\u5019\uff0c\u901a\u8fc7\u6ce8\u518c\u7684handler\uff0c\u8c03\u7528ConfigUpdate 1 2 3 4 5 func ( s * DiscoveryServer ) ConfigUpdate ( req * model . PushRequest ) { inboundConfigUpdates . Increment () s . InboundUpdates . Inc () s . pushChannel <- req } \u901a\u8fc7PushChannel\u6536\u5230Push\u8bf7\u6c42\uff0c\u5f00\u59cb\u505adebounce \u6838\u5fc3\u7684\u51e0\u4e2achan\u5206\u522b\u662ftimeChan\u3001\u7528\u6765\u89e6\u53d1\u4e00\u4e2a\u65f6\u95f4\u95f4\u9694\uff0c\u53eb\u505adebounceAfter\uff0c\u4e00\u6b21\u63a8\u9001\u81f3\u5c11\u9700\u8981\u95f4\u9694debounceAfter\u7684\u65f6\u95f4\uff0c\u624d\u4f1a\u7ee7\u7eed\u89e6\u53d1\u4e0b\u4e00\u6b21\u63a8\u9001\u3002\u5728 \u6b64\u671f\u95f4\u51fa\u73b0\u7684Push\u8bf7\u6c42\u90fd\u4f1a\u88ab\u5408\u5e76\u3002freeCh\u662f\u7528\u6765\u505a\u8fde\u7eed\u63a8\u9001\u7684\uff0c\u5982\u679c\u4e00\u6b21\u63a8\u9001\u8017\u65f6\u592a\u4e45\u8d85\u8fc7\u4e86debounceAfter\u5c31\u9700\u8981\u901a\u8fc7freeCh\u5728\u63a8\u9001\u5b8c\u6210\u540e\u7ee7\u7eed\u63a8\u9001\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 // The debounce helper function is implemented to enable mocking func debounce ( ch chan * model . PushRequest , stopCh <- chan struct {}, opts debounceOptions , pushFn func ( req * model . PushRequest ), updateSent * atomic . Int64 ) { var timeChan <- chan time . Time var startDebounce time . Time var lastConfigUpdateTime time . Time pushCounter := 0 debouncedEvents := 0 // Keeps track of the push requests. If updates are debounce they will be merged. var req * model . PushRequest free := true freeCh := make ( chan struct {}, 1 ) push := func ( req * model . PushRequest , debouncedEvents int ) { pushFn ( req ) updateSent . Add ( int64 ( debouncedEvents )) freeCh <- struct {}{} } pushWorker := func () { // 3. \u8ba1\u7b97\u4ece\u5f00\u59cbdebounce\u5230\u63a8\u9001\u7684\u65f6\u95f4\u95f4\u9694\uff0c\u4ee5\u53ca\u4e0a\u4e00\u6b21\u914d\u7f6e\u53d8\u66f4\u5230\u73b0\u5728\u7684\u5b89\u9759\u65f6\u95f4 eventDelay := time . Since ( startDebounce ) quietTime := time . Since ( lastConfigUpdateTime ) // it has been too long or quiet enough // 4. \u5982\u679c\u4ecedebounce\u5230\u63a8\u9001\u7684\u95f4\u9694\u5927\u4e8edebounceMax\u5c31\u89e6\u53d1\u63a8\u9001\uff0c\u6216\u8005\u5728debounceAfter\u671f\u95f4\u6ca1\u6709\u4efb\u4f55\u914d\u7f6e\u53d8\u66f4\uff0c\u4e5f\u4f1a\u89e6\u53d1\u63a8\u9001 if eventDelay >= opts . debounceMax || quietTime >= opts . debounceAfter { if req != nil { pushCounter ++ adsLog . Infof ( \"Push debounce stable[%d] %d: %v since last change, %v since last push, full=%v\" , pushCounter , debouncedEvents , quietTime , eventDelay , req . Full ) // 5. \u63a8\u9001\u7684\u65f6\u5019\u8bbe\u7f6efree = false\uff0c\u907f\u514d\u6b64\u65f6\u914d\u7f6e\u6709\u53d8\u66f4\uff0c\u518d\u6b21\u89e6\u53d1\u63a8\u9001\uff0c\u7136\u540e\u91cd\u65b0\u8bbe\u7f6edebouncedEvents\uff0c\u89e6\u53d1\u4e0b\u4e00\u6b21debounce free = false // 6. \u63a8\u9001\u5b8c\u6210\u540e\u4f1a\u91cd\u65b0\u8bbe\u7f6efree\u7b49\u4e8etrue\uff0c\u4e8e\u6b64\u540c\u65f6\u8fd8\u4f1a\u518d\u6b21\u89e6\u53d1\u63a8\u9001\uff0c\u907f\u514d\u56e0\u4e3a\u4e0a\u4e00\u6b21\u63a8\u9001\u592a\u8017\u65f6\uff0c\u5bfc\u81f4\u63a8\u9001\u5806\u79ef\uff0c\u56e0\u6b64\u9700\u8981\u7b2c\u4e00\u65f6\u95f4\u518d\u6b21\u8fdb\u884c\u63a8\u9001 go push ( req , debouncedEvents ) req = nil debouncedEvents = 0 } } else { timeChan = time . After ( opts . debounceAfter - quietTime ) } } for { select { case <- freeCh : free = true pushWorker () case r := <- ch : // \u6536\u5230\u63a8\u9001\u8bf7\u6c42\uff0c\u5f00\u59cb\u5904\u7406\uff0c\u5bf9\u4e8eEDS\u5219\u76f4\u63a5Push\uff0c\u8df3\u8fc7debounce // \u5bf9\u4e8e\u975eEDS\u7684\u914d\u7f6e\u5f00\u59cb\u6267\u884cdebounce // If reason is not set, record it as an unknown reason if len ( r . Reason ) == 0 { r . Reason = [] model . TriggerReason { model . UnknownTrigger } } if ! opts . enableEDSDebounce && ! r . Full { // trigger push now, just for EDS go pushFn ( r ) continue } // 1. \u8bbe\u7f6edebounch timer lastConfigUpdateTime = time . Now () if debouncedEvents == 0 { timeChan = time . After ( opts . debounceAfter ) startDebounce = lastConfigUpdateTime } debouncedEvents ++ req = req . Merge ( r ) case <- timeChan : // 2. Debounc\u65f6\u95f4\u5230\u4e86\u540e\uff0c\u5f00\u59cb\u6267\u884cPushWorker if free { pushWorker () } case <- stopCh : return } } } \u603b\u7ed3\u6765\u770b\uff0cdebounceMax\u624d\u662f\u63a7\u5236\u63a8\u9001\u7684\u6700\u5927\u95f4\u9694\uff0c\u800cdebounceAfter\u5219\u63a7\u5236\u4e86\u63a8\u9001\u7684\u6700\u5c0f\u95f4\u9694\u3002 debounceAfter\u53ea\u6709\u5728\u4e00\u4e2a\u5b8c\u6574\u671f\u95f4\u6ca1\u6709\u4efb\u4f55\u914d\u7f6e\u53d8\u66f4\u7684\u65f6\u5019\uff0c\u624d\u4f1a\u89e6\u53d1\u63a8\u9001\u3002\u800cdebounceMax\u5219\u662f\u7d2f\u8ba1\u503c \u7d2f\u8ba1\u8d85\u8fc7debounceMax\u4f1a\u5f3a\u5236\u89e6\u53d1\u4e00\u6b21\u63a8\u9001\u3002","title":"Debounce"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/pilot/#proxyneedspush","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 // DefaultProxyNeedsPush check if a proxy needs push for this push event. func DefaultProxyNeedsPush(proxy *model.Proxy, req *model.PushRequest) bool { // \u5148\u6d4b\u8bd5\u8fd9\u4e2a\u914d\u7f6e\u662f\u5426\u5f71\u54cd\u8fd9\u4e2aProxy if ConfigAffectsProxy(req, proxy) { return true } // \u518d\u770b\u8fd9\u4e2aproxy\u662f\u5426\u6709servive instance(\u4e5f\u5c31\u662finbound)\uff0c\u5e76\u4e14\u914d\u7f6e\u6709\u66f4\u65b0 // \u800c\u4e14\u8fd9\u4e2a\u914d\u7f6e\u5c5e\u4e8einbound\u670d\u52a1\u66f4\u65b0\u3002 // If the proxy's service updated, need push for it. if len(proxy.ServiceInstances) > 0 && req.ConfigsUpdated != nil { svc := proxy.ServiceInstances[0].Service if _, ok := req.ConfigsUpdated[model.ConfigKey{ Kind: gvk.ServiceEntry, Name: string(svc.Hostname), Namespace: svc.Attributes.Namespace, }]; ok { return true } } return false } // ConfigAffectsProxy \u4e3b\u8981\u68c0\u6d4b\u4e24\u4e2a\u90e8\u5206\uff0c\u4e00\u4e2a\u90e8\u5206\u662f\u53d8\u66f4\u7684\u914d\u7f6ekind\u662f\u5426\u5f71\u54cd\u6307\u5b9a\u7684proxy\u7c7b\u578b\u3002 // \u53e6\u5916\u4e00\u4e2a\u5c31\u662f\u6839\u636eSidecarScope\u770b\u4e0b\u8fd9\u4e2a\u914d\u7f6e\u662f\u5426\u5728\u8fd9\u4e2aProxy\u7684\u5f71\u54cd\u8303\u56f4\u3002 func ConfigAffectsProxy(req *model.PushRequest, proxy *model.Proxy) bool { // Empty changes means \"all\" to get a backward compatibility. if len(req.ConfigsUpdated) == 0 { return true } for config := range req.ConfigsUpdated { affected := true // Some configKinds only affect specific proxy types if kindAffectedTypes, f := configKindAffectedProxyTypes[config.Kind]; f { affected = false for _, t := range kindAffectedTypes { if t == proxy.Type { affected = true break } } } if affected && checkProxyDependencies(proxy, config) { return true } } return false } func checkProxyDependencies(proxy *model.Proxy, config model.ConfigKey) bool { // Detailed config dependencies check. switch proxy.Type { case model.SidecarProxy: if proxy.SidecarScope.DependsOnConfig(config) { return true } else if proxy.PrevSidecarScope != nil && proxy.PrevSidecarScope.DependsOnConfig(config) { return true } default: // TODO We'll add the check for other proxy types later. return true } return false } // DependsOnConfig determines if the proxy depends on the given config. // Returns whether depends on this config or this kind of config is not scoped(unknown to be depended) here. func (sc *SidecarScope) DependsOnConfig(config ConfigKey) bool { if sc == nil { return true } // \u96c6\u7fa4\u7eac\u5ea6\u7684\u914d\u7f6e\uff0c\u89e6\u53d1full push\uff0c\u6bd4\u5982envoy filter\u3001Sidecar\u3001\u5065\u5168\u7b49 // This kind of config will trigger a change if made in the root namespace or the same namespace if _, f := clusterScopedConfigTypes[config.Kind]; f { return config.Namespace == sc.RootNamespace || config.Namespace == sc.Namespace } // \u975eservice entry\u3001 // This kind of config is unknown to sidecarScope. if _, f := sidecarScopeKnownConfigTypes[config.Kind]; !f { return true } _, exists := sc.configDependencies[config.HashCode()] return exists }","title":"ProxyNeedsPush"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/pilot/#virtual-service","text":"","title":"Virtual Service"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/pilot/#debug-tools","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 curl http://127.0.0.1:9876/scopej/ curl 'http://127.0.0.1:9876/scopej/ads' \\ -X 'PUT' \\ -H 'Connection: keep-alive' \\ -H 'sec-ch-ua: \"Chromium\";v=\"88\", \"Google Chrome\";v=\"88\", \";Not A Brand\";v=\"99\"' \\ -H 'sec-ch-ua-mobile: ?0' \\ -H 'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 11_1_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.96 Safari/537.36' \\ -H 'Content-Type: text/plain;charset=UTF-8' \\ -H 'Accept: */*' \\ -H 'Origin: http://127.0.0.1:9876' \\ -H 'Sec-Fetch-Site: same-origin' \\ -H 'Sec-Fetch-Mode: cors' \\ -H 'Sec-Fetch-Dest: empty' \\ -H 'Referer: http://127.0.0.1:9876/scopez/' \\ -H 'Accept-Language: zh-CN,zh;q=0.9,zh-TW;q=0.8,en;q=0.7' \\ --data-raw '{\"name\":\"ads\",\"description\":\"ads debugging\",\"output_level\":\"info\",\"stack_trace_level\":\"none\",\"log_callers\":true}' \\ --compressed","title":"Debug tools"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/pilot/ConfigUpdate/","text":"\u914d\u7f6e\u66f4\u65b0\u5206\u6790 MeshConfig \u3001 MeshNetworkConfig \u914d\u7f6e\u53d1\u751f\u53d8\u66f4\u4f1a\u89e6\u53d1Full Push 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 // initMeshHandlers initializes mesh and network handlers. func ( s * Server ) initMeshHandlers () { log . Info ( \"initializing mesh handlers\" ) // When the mesh config or networks change, do a full push. s . environment . AddMeshHandler ( func () { spiffe . SetTrustDomain ( s . environment . Mesh (). GetTrustDomain ()) s . XDSServer . ConfigGenerator . MeshConfigChanged ( s . environment . Mesh ()) s . XDSServer . ConfigUpdate ( & model . PushRequest { Full : true , Reason : [] model . TriggerReason { model . GlobalUpdate }, }) }) s . environment . AddNetworksHandler ( func () { s . XDSServer . ConfigUpdate ( & model . PushRequest { Full : true , Reason : [] model . TriggerReason { model . GlobalUpdate }, }) }) } \u670d\u52a1\u66f4\u65b0\uff0c\u914d\u7f6e\u66f4\u65b0\uff0c\u6700\u540e\u90fd\u4f1a\u8c03\u7528ConfigUpdate\u63a5\u53e3\uff0c\u5e76\u4f20\u9012PushRequest 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 // initRegistryEventHandlers sets up event handlers for config and service updates func ( s * Server ) initRegistryEventHandlers () { log . Info ( \"initializing registry event handlers\" ) // Flush cached discovery responses whenever services configuration change. serviceHandler := func ( svc * model . Service , _ model . Event ) { pushReq := & model . PushRequest { Full : true , ConfigsUpdated : map [ model . ConfigKey ] struct {}{{ Kind : gvk . ServiceEntry , Name : string ( svc . Hostname ), Namespace : svc . Attributes . Namespace , }: {}}, Reason : [] model . TriggerReason { model . ServiceUpdate }, } s . XDSServer . ConfigUpdate ( pushReq ) } s . ServiceController (). AppendServiceHandler ( serviceHandler ) if s . configController != nil { configHandler := func ( old config . Config , curr config . Config , event model . Event ) { ...... pushReq := & model . PushRequest { Full : true , ConfigsUpdated : map [ model . ConfigKey ] struct {}{{ Kind : curr . GroupVersionKind , Name : curr . Name , Namespace : curr . Namespace , }: {}}, Reason : [] model . TriggerReason { model . ConfigUpdate }, } s . XDSServer . ConfigUpdate ( pushReq ) ... .. } ... .. } } \u65e0\u8bba\u662f\u4ec0\u4e48\u914d\u7f6e\uff0c\u6700\u540e\u7684\u5165\u53e3\u90fd\u662f ConfigUpdate 1 func ( s * DiscoveryServer ) ConfigUpdate ( req * model . PushRequest ) \u901a\u8fc7debounce\u540e\uff0c\u6700\u7ec8\u653e\u5165\u5230\u63a8\u9001\u961f\u5217\u4e2d 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 func ( s * DiscoveryServer ) ConfigUpdate ( req * model . PushRequest ) { inboundConfigUpdates . Increment () s . InboundUpdates . Inc () s . pushChannel <- req } // \u901a\u8fc7pushChannel\u89e6\u53d1debounce // debounce\u6700\u7ec8\u4f1a\u89e6\u53d1Push\u7684\u8c03\u7528 func ( s * DiscoveryServer ) handleUpdates ( stopCh <- chan struct {}) { debounce ( s . pushChannel , stopCh , s . debounceOptions , s . Push , s . CommittedUpdates ) } // Push is called to push changes on config updates using ADS. This is set in DiscoveryService.Push, // to avoid direct dependencies. // Push\u7684\u6700\u540e\u4f1a\u8c03\u7528AdsPushAll\uff0c\u5e76\u643a\u5e26PushContext func ( s * DiscoveryServer ) Push ( req * model . PushRequest ) { // \u975eFull Push\u7684\u573a\u666f\uff0c\u76f4\u63a5\u7528\u5168\u5c40\u7684PushContext if ! req . Full { req . Push = s . globalPushContext () s . AdsPushAll ( versionInfo (), req ) return } // Full Push\u573a\u666f\u5219\u7528Global Push COntext\u91cd\u65b0\u751f\u6210\u65b0\u7684PushContext // Reset the status during the push. oldPushContext := s . globalPushContext () if oldPushContext != nil { oldPushContext . OnConfigChange () } // PushContext is reset after a config change. Previous status is // saved. t0 := time . Now () versionLocal := time . Now (). Format ( time . RFC3339 ) + \"/\" + strconv . FormatUint ( versionNum . Inc (), 10 ) push , err := s . initPushContext ( req , oldPushContext , versionLocal ) if err != nil { return } initContextTime := time . Since ( t0 ) // \u8f93\u51faContext\u521d\u59cb\u5316\u82b1\u8d39\u7684\u65f6\u95f4 adsLog . Debugf ( \"InitContext %v for push took %s\" , versionLocal , initContextTime ) versionMutex . Lock () version = versionLocal versionMutex . Unlock () req . Push = push s . AdsPushAll ( versionLocal , req ) } // AdsPushAll\u6700\u7ec8\u4f1a\u53bb\u8c03\u7528startPush // AdsPushAll implements old style invalidation, generated when any rule or endpoint changes. // Primary code path is from v1 discoveryService.clearCache(), which is added as a handler // to the model ConfigStorageCache and Controller. func ( s * DiscoveryServer ) AdsPushAll ( version string , req * model . PushRequest ) { // If we don't know what updated, cannot safely cache. Clear the whole cache if len ( req . ConfigsUpdated ) == 0 { s . Cache . ClearAll () } else { // Otherwise, just clear the updated configs s . Cache . Clear ( req . ConfigsUpdated ) } if ! req . Full { adsLog . Infof ( \"XDS: Incremental Pushing:%s ConnectedEndpoints:%d Version:%s\" , version , s . adsClientCount (), req . Push . PushVersion ) } else { totalService := len ( req . Push . Services ( nil )) adsLog . Infof ( \"XDS: Pushing:%s Services:%d ConnectedEndpoints:%d Version:%s\" , version , totalService , s . adsClientCount (), req . Push . PushVersion ) monServices . Record ( float64 ( totalService )) // Make sure the ConfigsUpdated map exists if req . ConfigsUpdated == nil { req . ConfigsUpdated = make ( map [ model . ConfigKey ] struct {}) } } s . startPush ( req ) } // \u6700\u7ec8\u5c06PushRequest\u653e\u5165\u5230\u8bf7\u6c42\u961f\u5217\u4e2d // Send a signal to all connections, with a push event. func ( s * DiscoveryServer ) startPush ( req * model . PushRequest ) { // Push config changes, iterating over connected envoys. This cover ADS and EDS(0.7), both share // the same connection table if adsLog . DebugEnabled () { currentlyPending := s . pushQueue . Pending () if currentlyPending != 0 { adsLog . Infof ( \"Starting new push while %v were still pending\" , currentlyPending ) } } req . Start = time . Now () for _ , p := range s . AllClients () { s . pushQueue . Enqueue ( p , req ) } } // \u6700\u7ec8doSendPushes\u4f1a\u901a\u8fc7concurrentPushLimit\u6765\u5904\u7406PushRequest // \u6700\u591a\u53ef\u4ee5\u540c\u65f6\u4eceQueue\u4e2d\u83b7\u53d6\u5230100\u4e2a\u6570\u636e\uff0c\u7136\u540e\u901a\u8fc7\u534f\u7a0b\u6784\u5efaPushEvent\u7136\u540e\u901a\u8fc7pushChannel\uff0c\u53d1\u7ed9\u5bf9\u5e94client\u7684\u8fde\u63a5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 func ( s * DiscoveryServer ) sendPushes ( stopCh <- chan struct {}) { doSendPushes ( stopCh , s . concurrentPushLimit , s . pushQueue ) } func doSendPushes ( stopCh <- chan struct {}, semaphore chan struct {}, queue * PushQueue ) { for { select { case <- stopCh : return default : // We can send to it until it is full, then it will block until a pushes finishes and reads from it. // This limits the number of pushes that can happen concurrently semaphore <- struct {}{} // Get the next proxy to push. This will block if there are no updates required. client , push , shuttingdown := queue . Dequeue () if shuttingdown { return } recordPushTriggers ( push . Reason ... ) // Signals that a push is done by reading from the semaphore, allowing another send on it. doneFunc := func () { queue . MarkDone ( client ) <- semaphore } proxiesQueueTime . Record ( time . Since ( push . Start ). Seconds ()) go func () { // \u7ec4\u6210\u4e2dPushEvent pushEv := & Event { pushRequest : push , done : doneFunc , } select { // \u901a\u8fc7Connection\u4e2d\u7684pushChannel\u6765\u8ba9client\u5904\u7406\u3002 case client . pushChannel <- pushEv : return case <- client . stream . Context (). Done (): // grpc stream was closed doneFunc () adsLog . Infof ( \"Client closed connection %v\" , client . ConID ) } }() } } } \u6bcf\u6b21\u6536\u5230\u4e00\u4e2aStream\u5c31\u5f00\u542ffor\u5faa\u73af\uff0c\u76d1\u542c\u914d\u7f6e\u66f4\u65b0channel\u3001\u548c\u8bf7\u6c42\u7684Channel\uff0c\u4e00\u65b9\u9762\u6536\u5230\u8bf7\u6c42\u7684\u65f6\u5019\u9700\u8981Push \u53e6\u5916\u4e00\u65b9\u9762\u6536\u5230\u914d\u7f6e\u66f4\u65b0\u7684\u65f6\u5019\u4e5f\u9700\u8981\u8fdb\u884cPush\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 func ( s * DiscoveryServer ) Stream ( stream DiscoveryStream ) error { ... .. for { // Block until either a request is received or a push is triggered. // We need 2 go routines because 'read' blocks in Recv(). // // To avoid 2 routines, we tried to have Recv() in StreamAggregateResource - and the push // on different short-lived go routines started when the push is happening. This would cut in 1/2 // the number of long-running go routines, since push is throttled. The main problem is with // closing - the current gRPC library didn't allow closing the stream. select { case req , ok := <- reqChannel : if ! ok { // Remote side closed connection or error processing the request. return receiveError } // processRequest is calling pushXXX, accessing common structs with pushConnection. // Adding sync is the second issue to be resolved if we want to save 1/2 of the threads. err := s . processRequest ( req , con ) if err != nil { return err } case pushEv := <- con . pushChannel : err := s . pushConnection ( con , pushEv ) pushEv . done () if err != nil { return err } case <- con . stop : return nil } } } // \u6700\u7ec8\u8c03\u7528pushConnection\u7ed9\u4e00\u4e2aclient\u8fdb\u884cPush\u63a8\u9001 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 // Compute and send the new configuration for a connection. This is blocking and may be slow // for large configs. The method will hold a lock on con.pushMutex. func ( s * DiscoveryServer ) pushConnection ( con * Connection , pushEv * Event ) error { pushRequest := pushEv . pushRequest // \u5982\u679c\u662fFull Push\uff0c\u5148\u9700\u8981\u66f4\u65b0ProxyState\uff0c\u4e3b\u8981\u662fworkload labels\u3001service instance\u3001sidecarscope\u3001gateway\u7b49\u8d44\u6e90 if pushRequest . Full { // Update Proxy with current information. s . updateProxy ( con . proxy , pushRequest . Push ) } // \u63a5\u7740\u5224\u65ad\u8fd9\u4e2aProxy\u662f\u5426\u9700\u8981Push if ! s . ProxyNeedsPush ( con . proxy , pushRequest ) { adsLog . Debugf ( \"Skipping push to %v, no updates required\" , con . ConID ) if pushRequest . Full { // Only report for full versions, incremental pushes do not have a new version reportAllEvents ( s . StatusReporter , con . ConID , pushRequest . Push . LedgerVersion , nil ) } return nil } currentVersion := versionInfo () // Send pushes to all generators // Each Generator is responsible for determining if the push event requires a push for _ , w := range getWatchedResources ( con . proxy . WatchedResources ) { if ! features . EnableFlowControl { // Always send the push if flow control disabled if err := s . pushXds ( con , pushRequest . Push , currentVersion , w , pushRequest ); err != nil { return err } continue } // If flow control is enabled, we will only push if we got an ACK for the previous response synced , timeout := con . Synced ( w . TypeUrl ) if ! synced && timeout { // We are not synced, but we have been stuck for too long. We will trigger the push anyways to // avoid any scenario where this may deadlock. // This can possibly be removed in the future if we find this never causes issues totalDelayedPushes . With ( typeTag . Value ( v3 . GetMetricType ( w . TypeUrl ))). Increment () adsLog . Warnf ( \"%s: QUEUE TIMEOUT for node:%s\" , v3 . GetShortType ( w . TypeUrl ), con . proxy . ID ) } if synced || timeout { // Send the push now if err := s . pushXds ( con , pushRequest . Push , currentVersion , w , pushRequest ); err != nil { return err } } else { // The type is not yet synced. Instead of pushing now, which may overload Envoy, // we will wait until the last push is ACKed and trigger the push. See // https://github.com/istio/istio/issues/25685 for details on the performance // impact of sending pushes before Envoy ACKs. totalDelayedPushes . With ( typeTag . Value ( v3 . GetMetricType ( w . TypeUrl ))). Increment () adsLog . Debugf ( \"%s: QUEUE for node:%s\" , v3 . GetShortType ( w . TypeUrl ), con . proxy . ID ) con . proxy . Lock () con . blockedPushes [ w . TypeUrl ] = con . blockedPushes [ w . TypeUrl ]. Merge ( pushEv . pushRequest ) con . proxy . Unlock () } } if pushRequest . Full { // Report all events for unwatched resources. Watched resources will be reported in pushXds or on ack. reportAllEvents ( s . StatusReporter , con . ConID , pushRequest . Push . LedgerVersion , con . proxy . WatchedResources ) } proxiesConvergeDelay . Record ( time . Since ( pushRequest . Start ). Seconds ()) return nil } \u5982\u4f55\u786e\u5b9a\u4e00\u4e2a\u914d\u7f6e\u53d8\u66f4\u662f\u5426\u9700\u8981\u63a8\u9001\u7ed9\u67d0\u4e2aProxy? \u9996\u5148\u65e0\u8bba\u662f\u4efb\u4f55\u914d\u7f6e\uff0c\u5728\u53d1\u751f\u53d8\u66f4\u7684\u65f6\u5019\u90fd\u4f1a\u5e26\u4e0aGVK\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 // \u6ce8\u518cService Handler\u7684\u65f6\u5019\uff0c\u4e5f\u4f1a\u5e26\u4e0aConfigsUpdated\u5b57\u6bb5 serviceHandler := func ( svc * model . Service , _ model . Event ) { pushReq := & model . PushRequest { Full : true , ConfigsUpdated : map [ model . ConfigKey ] struct {}{{ Kind : gvk . ServiceEntry , Name : string ( svc . Hostname ), Namespace : svc . Attributes . Namespace , }: {}}, Reason : [] model . TriggerReason { model . ServiceUpdate }, } s . XDSServer . ConfigUpdate ( pushReq ) } s . ServiceController (). AppendServiceHandler ( serviceHandler ) // Config Controller\u6ce8\u518c\u914d\u7f6e\u53d8\u66f4Handler\u7684\u65f6\u5019\u4f1a\u5e26\u4e0aConfigsUpdated\u5b57\u6bb5\uff0c\u8868\u660e\u662f\u4ec0\u4e48\u914d\u7f6e\u3001\u540d\u5b57\u662f\u4ec0\u4e48\u3001Namespace\u662f\u4ec0\u4e48\u7b49\u4fe1\u606f\u3002 if s . configController != nil { configHandler := func ( old config . Config , curr config . Config , event model . Event ) { pushReq := & model . PushRequest { Full : true , ConfigsUpdated : map [ model . ConfigKey ] struct {}{{ Kind : curr . GroupVersionKind , Name : curr . Name , Namespace : curr . Namespace , }: {}}, Reason : [] model . TriggerReason { model . ConfigUpdate }, } s . XDSServer . ConfigUpdate ( pushReq ) if event != model . EventDelete { s . statusReporter . AddInProgressResource ( curr ) } else { s . statusReporter . DeleteInProgressResource ( curr ) } } ... ..","title":"\u914d\u7f6e\u66f4\u65b0\u5206\u6790"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/pilot/ConfigUpdate/#_1","text":"MeshConfig \u3001 MeshNetworkConfig \u914d\u7f6e\u53d1\u751f\u53d8\u66f4\u4f1a\u89e6\u53d1Full Push 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 // initMeshHandlers initializes mesh and network handlers. func ( s * Server ) initMeshHandlers () { log . Info ( \"initializing mesh handlers\" ) // When the mesh config or networks change, do a full push. s . environment . AddMeshHandler ( func () { spiffe . SetTrustDomain ( s . environment . Mesh (). GetTrustDomain ()) s . XDSServer . ConfigGenerator . MeshConfigChanged ( s . environment . Mesh ()) s . XDSServer . ConfigUpdate ( & model . PushRequest { Full : true , Reason : [] model . TriggerReason { model . GlobalUpdate }, }) }) s . environment . AddNetworksHandler ( func () { s . XDSServer . ConfigUpdate ( & model . PushRequest { Full : true , Reason : [] model . TriggerReason { model . GlobalUpdate }, }) }) } \u670d\u52a1\u66f4\u65b0\uff0c\u914d\u7f6e\u66f4\u65b0\uff0c\u6700\u540e\u90fd\u4f1a\u8c03\u7528ConfigUpdate\u63a5\u53e3\uff0c\u5e76\u4f20\u9012PushRequest 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 // initRegistryEventHandlers sets up event handlers for config and service updates func ( s * Server ) initRegistryEventHandlers () { log . Info ( \"initializing registry event handlers\" ) // Flush cached discovery responses whenever services configuration change. serviceHandler := func ( svc * model . Service , _ model . Event ) { pushReq := & model . PushRequest { Full : true , ConfigsUpdated : map [ model . ConfigKey ] struct {}{{ Kind : gvk . ServiceEntry , Name : string ( svc . Hostname ), Namespace : svc . Attributes . Namespace , }: {}}, Reason : [] model . TriggerReason { model . ServiceUpdate }, } s . XDSServer . ConfigUpdate ( pushReq ) } s . ServiceController (). AppendServiceHandler ( serviceHandler ) if s . configController != nil { configHandler := func ( old config . Config , curr config . Config , event model . Event ) { ...... pushReq := & model . PushRequest { Full : true , ConfigsUpdated : map [ model . ConfigKey ] struct {}{{ Kind : curr . GroupVersionKind , Name : curr . Name , Namespace : curr . Namespace , }: {}}, Reason : [] model . TriggerReason { model . ConfigUpdate }, } s . XDSServer . ConfigUpdate ( pushReq ) ... .. } ... .. } } \u65e0\u8bba\u662f\u4ec0\u4e48\u914d\u7f6e\uff0c\u6700\u540e\u7684\u5165\u53e3\u90fd\u662f ConfigUpdate 1 func ( s * DiscoveryServer ) ConfigUpdate ( req * model . PushRequest ) \u901a\u8fc7debounce\u540e\uff0c\u6700\u7ec8\u653e\u5165\u5230\u63a8\u9001\u961f\u5217\u4e2d 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 func ( s * DiscoveryServer ) ConfigUpdate ( req * model . PushRequest ) { inboundConfigUpdates . Increment () s . InboundUpdates . Inc () s . pushChannel <- req } // \u901a\u8fc7pushChannel\u89e6\u53d1debounce // debounce\u6700\u7ec8\u4f1a\u89e6\u53d1Push\u7684\u8c03\u7528 func ( s * DiscoveryServer ) handleUpdates ( stopCh <- chan struct {}) { debounce ( s . pushChannel , stopCh , s . debounceOptions , s . Push , s . CommittedUpdates ) } // Push is called to push changes on config updates using ADS. This is set in DiscoveryService.Push, // to avoid direct dependencies. // Push\u7684\u6700\u540e\u4f1a\u8c03\u7528AdsPushAll\uff0c\u5e76\u643a\u5e26PushContext func ( s * DiscoveryServer ) Push ( req * model . PushRequest ) { // \u975eFull Push\u7684\u573a\u666f\uff0c\u76f4\u63a5\u7528\u5168\u5c40\u7684PushContext if ! req . Full { req . Push = s . globalPushContext () s . AdsPushAll ( versionInfo (), req ) return } // Full Push\u573a\u666f\u5219\u7528Global Push COntext\u91cd\u65b0\u751f\u6210\u65b0\u7684PushContext // Reset the status during the push. oldPushContext := s . globalPushContext () if oldPushContext != nil { oldPushContext . OnConfigChange () } // PushContext is reset after a config change. Previous status is // saved. t0 := time . Now () versionLocal := time . Now (). Format ( time . RFC3339 ) + \"/\" + strconv . FormatUint ( versionNum . Inc (), 10 ) push , err := s . initPushContext ( req , oldPushContext , versionLocal ) if err != nil { return } initContextTime := time . Since ( t0 ) // \u8f93\u51faContext\u521d\u59cb\u5316\u82b1\u8d39\u7684\u65f6\u95f4 adsLog . Debugf ( \"InitContext %v for push took %s\" , versionLocal , initContextTime ) versionMutex . Lock () version = versionLocal versionMutex . Unlock () req . Push = push s . AdsPushAll ( versionLocal , req ) } // AdsPushAll\u6700\u7ec8\u4f1a\u53bb\u8c03\u7528startPush // AdsPushAll implements old style invalidation, generated when any rule or endpoint changes. // Primary code path is from v1 discoveryService.clearCache(), which is added as a handler // to the model ConfigStorageCache and Controller. func ( s * DiscoveryServer ) AdsPushAll ( version string , req * model . PushRequest ) { // If we don't know what updated, cannot safely cache. Clear the whole cache if len ( req . ConfigsUpdated ) == 0 { s . Cache . ClearAll () } else { // Otherwise, just clear the updated configs s . Cache . Clear ( req . ConfigsUpdated ) } if ! req . Full { adsLog . Infof ( \"XDS: Incremental Pushing:%s ConnectedEndpoints:%d Version:%s\" , version , s . adsClientCount (), req . Push . PushVersion ) } else { totalService := len ( req . Push . Services ( nil )) adsLog . Infof ( \"XDS: Pushing:%s Services:%d ConnectedEndpoints:%d Version:%s\" , version , totalService , s . adsClientCount (), req . Push . PushVersion ) monServices . Record ( float64 ( totalService )) // Make sure the ConfigsUpdated map exists if req . ConfigsUpdated == nil { req . ConfigsUpdated = make ( map [ model . ConfigKey ] struct {}) } } s . startPush ( req ) } // \u6700\u7ec8\u5c06PushRequest\u653e\u5165\u5230\u8bf7\u6c42\u961f\u5217\u4e2d // Send a signal to all connections, with a push event. func ( s * DiscoveryServer ) startPush ( req * model . PushRequest ) { // Push config changes, iterating over connected envoys. This cover ADS and EDS(0.7), both share // the same connection table if adsLog . DebugEnabled () { currentlyPending := s . pushQueue . Pending () if currentlyPending != 0 { adsLog . Infof ( \"Starting new push while %v were still pending\" , currentlyPending ) } } req . Start = time . Now () for _ , p := range s . AllClients () { s . pushQueue . Enqueue ( p , req ) } } // \u6700\u7ec8doSendPushes\u4f1a\u901a\u8fc7concurrentPushLimit\u6765\u5904\u7406PushRequest // \u6700\u591a\u53ef\u4ee5\u540c\u65f6\u4eceQueue\u4e2d\u83b7\u53d6\u5230100\u4e2a\u6570\u636e\uff0c\u7136\u540e\u901a\u8fc7\u534f\u7a0b\u6784\u5efaPushEvent\u7136\u540e\u901a\u8fc7pushChannel\uff0c\u53d1\u7ed9\u5bf9\u5e94client\u7684\u8fde\u63a5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 func ( s * DiscoveryServer ) sendPushes ( stopCh <- chan struct {}) { doSendPushes ( stopCh , s . concurrentPushLimit , s . pushQueue ) } func doSendPushes ( stopCh <- chan struct {}, semaphore chan struct {}, queue * PushQueue ) { for { select { case <- stopCh : return default : // We can send to it until it is full, then it will block until a pushes finishes and reads from it. // This limits the number of pushes that can happen concurrently semaphore <- struct {}{} // Get the next proxy to push. This will block if there are no updates required. client , push , shuttingdown := queue . Dequeue () if shuttingdown { return } recordPushTriggers ( push . Reason ... ) // Signals that a push is done by reading from the semaphore, allowing another send on it. doneFunc := func () { queue . MarkDone ( client ) <- semaphore } proxiesQueueTime . Record ( time . Since ( push . Start ). Seconds ()) go func () { // \u7ec4\u6210\u4e2dPushEvent pushEv := & Event { pushRequest : push , done : doneFunc , } select { // \u901a\u8fc7Connection\u4e2d\u7684pushChannel\u6765\u8ba9client\u5904\u7406\u3002 case client . pushChannel <- pushEv : return case <- client . stream . Context (). Done (): // grpc stream was closed doneFunc () adsLog . Infof ( \"Client closed connection %v\" , client . ConID ) } }() } } } \u6bcf\u6b21\u6536\u5230\u4e00\u4e2aStream\u5c31\u5f00\u542ffor\u5faa\u73af\uff0c\u76d1\u542c\u914d\u7f6e\u66f4\u65b0channel\u3001\u548c\u8bf7\u6c42\u7684Channel\uff0c\u4e00\u65b9\u9762\u6536\u5230\u8bf7\u6c42\u7684\u65f6\u5019\u9700\u8981Push \u53e6\u5916\u4e00\u65b9\u9762\u6536\u5230\u914d\u7f6e\u66f4\u65b0\u7684\u65f6\u5019\u4e5f\u9700\u8981\u8fdb\u884cPush\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 func ( s * DiscoveryServer ) Stream ( stream DiscoveryStream ) error { ... .. for { // Block until either a request is received or a push is triggered. // We need 2 go routines because 'read' blocks in Recv(). // // To avoid 2 routines, we tried to have Recv() in StreamAggregateResource - and the push // on different short-lived go routines started when the push is happening. This would cut in 1/2 // the number of long-running go routines, since push is throttled. The main problem is with // closing - the current gRPC library didn't allow closing the stream. select { case req , ok := <- reqChannel : if ! ok { // Remote side closed connection or error processing the request. return receiveError } // processRequest is calling pushXXX, accessing common structs with pushConnection. // Adding sync is the second issue to be resolved if we want to save 1/2 of the threads. err := s . processRequest ( req , con ) if err != nil { return err } case pushEv := <- con . pushChannel : err := s . pushConnection ( con , pushEv ) pushEv . done () if err != nil { return err } case <- con . stop : return nil } } } // \u6700\u7ec8\u8c03\u7528pushConnection\u7ed9\u4e00\u4e2aclient\u8fdb\u884cPush\u63a8\u9001 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 // Compute and send the new configuration for a connection. This is blocking and may be slow // for large configs. The method will hold a lock on con.pushMutex. func ( s * DiscoveryServer ) pushConnection ( con * Connection , pushEv * Event ) error { pushRequest := pushEv . pushRequest // \u5982\u679c\u662fFull Push\uff0c\u5148\u9700\u8981\u66f4\u65b0ProxyState\uff0c\u4e3b\u8981\u662fworkload labels\u3001service instance\u3001sidecarscope\u3001gateway\u7b49\u8d44\u6e90 if pushRequest . Full { // Update Proxy with current information. s . updateProxy ( con . proxy , pushRequest . Push ) } // \u63a5\u7740\u5224\u65ad\u8fd9\u4e2aProxy\u662f\u5426\u9700\u8981Push if ! s . ProxyNeedsPush ( con . proxy , pushRequest ) { adsLog . Debugf ( \"Skipping push to %v, no updates required\" , con . ConID ) if pushRequest . Full { // Only report for full versions, incremental pushes do not have a new version reportAllEvents ( s . StatusReporter , con . ConID , pushRequest . Push . LedgerVersion , nil ) } return nil } currentVersion := versionInfo () // Send pushes to all generators // Each Generator is responsible for determining if the push event requires a push for _ , w := range getWatchedResources ( con . proxy . WatchedResources ) { if ! features . EnableFlowControl { // Always send the push if flow control disabled if err := s . pushXds ( con , pushRequest . Push , currentVersion , w , pushRequest ); err != nil { return err } continue } // If flow control is enabled, we will only push if we got an ACK for the previous response synced , timeout := con . Synced ( w . TypeUrl ) if ! synced && timeout { // We are not synced, but we have been stuck for too long. We will trigger the push anyways to // avoid any scenario where this may deadlock. // This can possibly be removed in the future if we find this never causes issues totalDelayedPushes . With ( typeTag . Value ( v3 . GetMetricType ( w . TypeUrl ))). Increment () adsLog . Warnf ( \"%s: QUEUE TIMEOUT for node:%s\" , v3 . GetShortType ( w . TypeUrl ), con . proxy . ID ) } if synced || timeout { // Send the push now if err := s . pushXds ( con , pushRequest . Push , currentVersion , w , pushRequest ); err != nil { return err } } else { // The type is not yet synced. Instead of pushing now, which may overload Envoy, // we will wait until the last push is ACKed and trigger the push. See // https://github.com/istio/istio/issues/25685 for details on the performance // impact of sending pushes before Envoy ACKs. totalDelayedPushes . With ( typeTag . Value ( v3 . GetMetricType ( w . TypeUrl ))). Increment () adsLog . Debugf ( \"%s: QUEUE for node:%s\" , v3 . GetShortType ( w . TypeUrl ), con . proxy . ID ) con . proxy . Lock () con . blockedPushes [ w . TypeUrl ] = con . blockedPushes [ w . TypeUrl ]. Merge ( pushEv . pushRequest ) con . proxy . Unlock () } } if pushRequest . Full { // Report all events for unwatched resources. Watched resources will be reported in pushXds or on ack. reportAllEvents ( s . StatusReporter , con . ConID , pushRequest . Push . LedgerVersion , con . proxy . WatchedResources ) } proxiesConvergeDelay . Record ( time . Since ( pushRequest . Start ). Seconds ()) return nil } \u5982\u4f55\u786e\u5b9a\u4e00\u4e2a\u914d\u7f6e\u53d8\u66f4\u662f\u5426\u9700\u8981\u63a8\u9001\u7ed9\u67d0\u4e2aProxy? \u9996\u5148\u65e0\u8bba\u662f\u4efb\u4f55\u914d\u7f6e\uff0c\u5728\u53d1\u751f\u53d8\u66f4\u7684\u65f6\u5019\u90fd\u4f1a\u5e26\u4e0aGVK\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 // \u6ce8\u518cService Handler\u7684\u65f6\u5019\uff0c\u4e5f\u4f1a\u5e26\u4e0aConfigsUpdated\u5b57\u6bb5 serviceHandler := func ( svc * model . Service , _ model . Event ) { pushReq := & model . PushRequest { Full : true , ConfigsUpdated : map [ model . ConfigKey ] struct {}{{ Kind : gvk . ServiceEntry , Name : string ( svc . Hostname ), Namespace : svc . Attributes . Namespace , }: {}}, Reason : [] model . TriggerReason { model . ServiceUpdate }, } s . XDSServer . ConfigUpdate ( pushReq ) } s . ServiceController (). AppendServiceHandler ( serviceHandler ) // Config Controller\u6ce8\u518c\u914d\u7f6e\u53d8\u66f4Handler\u7684\u65f6\u5019\u4f1a\u5e26\u4e0aConfigsUpdated\u5b57\u6bb5\uff0c\u8868\u660e\u662f\u4ec0\u4e48\u914d\u7f6e\u3001\u540d\u5b57\u662f\u4ec0\u4e48\u3001Namespace\u662f\u4ec0\u4e48\u7b49\u4fe1\u606f\u3002 if s . configController != nil { configHandler := func ( old config . Config , curr config . Config , event model . Event ) { pushReq := & model . PushRequest { Full : true , ConfigsUpdated : map [ model . ConfigKey ] struct {}{{ Kind : curr . GroupVersionKind , Name : curr . Name , Namespace : curr . Namespace , }: {}}, Reason : [] model . TriggerReason { model . ConfigUpdate }, } s . XDSServer . ConfigUpdate ( pushReq ) if event != model . EventDelete { s . statusReporter . AddInProgressResource ( curr ) } else { s . statusReporter . DeleteInProgressResource ( curr ) } } ... ..","title":"\u914d\u7f6e\u66f4\u65b0\u5206\u6790"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/pilot/EnvoyFilter/","text":"EnvoyFilter\u5206\u6790 Envoy Filter\u548c Service \u3001 Virtual Service \u3001 DestinationRules \u7b49\u7b49\u8fd9\u4e9bCRD\u8d44\u6e90\u90fd\u5206\u4e3a\u521d\u59cb\u5316\u3001\u4f7f\u7528\u3001\u66f4\u65b0\u7b49\u4e09\u4e2a\u4e3b\u8981\u90e8\u5206\u3002 \u521d\u59cb\u5316\u6d41\u7a0b: Envoy\u9996\u6b21\u8fde\u63a5\u5230pilot\u540e\uff0c\u8c03\u7528 model.Environment \u4e2d\u7684 PushContext \u7684 InitContext \u65b9\u6cd5\u521d\u59cb\u5316 PushContext 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 // InitContext will initialize the data structures used for code generation. // This should be called before starting the push, from the thread creating // the push context. func ( ps * PushContext ) InitContext ( env * Environment , oldPushContext * PushContext , pushReq * PushRequest ) error { // ..... // create new or incremental update if pushReq == nil || oldPushContext == nil || ! oldPushContext . initDone . Load () || len ( pushReq . ConfigsUpdated ) == 0 { if err := ps . createNewContext ( env ); err != nil { return err } } else { if err := ps . updateContext ( env , oldPushContext , pushReq ); err != nil { return err } } // ..... } \u901a\u8fc7 ps.createNewContext \b\u521d\u59cb\u5316 Service \u3001 VirtualService \u3001 DestinationRules \u3001 Envoyfilters \u7b49 1 2 3 4 5 6 7 func ( ps * PushContext ) createNewContext ( env * Environment ) error { ...... .. if err := ps . initEnvoyFilters ( env ); err != nil { return err } ...... . } \u901a\u8fc7 initEnvoyFilters \u83b7\u53d6\u5230\u6240\u6709\u7684EnvoyFilter \u7136\u540e\u8c03\u7528 func convertToEnvoyFilterWrapper(local *config.Config) *EnvoyFilterWrapper \uff0c\u5c06EnvoyFilter\u8f6c\u6362\u6210\u4e0b\u9762\u7684 EnvoyFilterWrapper \u4e00\u4e2aEnvoyFilter\u7684yaml\u6700\u7ec8\u4f1a\u8f6c\u6362\u6210\u4e0b\u9762\u8fd9\u79cd\u5f62\u5f0f\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 // EnvoyFilterWrapper is a wrapper for the EnvoyFilter api object with pre-processed data type EnvoyFilterWrapper struct { workloadSelector labels . Instance Patches map [ networking . EnvoyFilter_ApplyTo ][] * EnvoyFilterConfigPatchWrapper } // EnvoyFilterConfigPatchWrapper is a wrapper over the EnvoyFilter ConfigPatch api object // fields are ordered such that this struct is aligned type EnvoyFilterConfigPatchWrapper struct { Value proto . Message Match * networking . EnvoyFilter_EnvoyConfigObjectMatch ApplyTo networking . EnvoyFilter_ApplyTo Operation networking . EnvoyFilter_Patch_Operation // Pre-compile the regex from proxy version match in the match ProxyVersionRegex * regexp . Regexp // ProxyPrefixMatch provides a prefix match for the proxy version. The current API only allows // regex match, but as an optimization we can reduce this to a prefix match for common cases. // If this is set, ProxyVersionRegex is ignored. ProxyPrefixMatch string } EnvoyFilter \u672c\u8d28\u4e0a\u5c31\u662f\u4e00\u4e2a Selector \u548c\u4e00\u4e2a Patch (istio\u5c01\u88c5\u6210 EnvoyFilterWrapper )\uff0c\u901a\u8fc7 Selector \u627e\u5230\u5339\u914d\u7684 Sidecar \uff0c\u7136\u540e\u7ed9\u5176\u6253\u4e0a Patch \uff0c\u800c\u8fd9\u4e2aPatch\u672c\u8d28\u5c31\u662f\"\u5f80\u914d\u7f6e\u4e2d\u7684\u54ea\u4e2a\u90e8\u5206\u8fdb\u884c\u67d0\u4e9b\u64cd\u4f5c\uff0c\u64cd\u4f5c\u7684\u5185\u5bb9\u662f\u4ec0\u4e48\" \u4e3a\u6b64istio\u5c06\u5176\u5305\u88c5\u6210 ApplyTo \u3001 Operation Apply\u6d41\u7a0b: EnvoyFilter\u751f\u6548\u7684\u5730\u65b9\u4e3b\u8981\u6709\u4e09\u4e2a BuildClusters \u3001 BuildExtensionConfiguration \u3001 patchListeners \u9996\u5148\u6765\u770b\u4e0b BuildClusters \uff0c\u5206\u6210\u4e86Gateway\u548cSidecar\u4e24\u79cd\u6a21\u5f0f\u7684Cluster\u751f\u6210\uff0c\u8fd8\u4f1a\u533a\u5206Inbound\u548cOutbound Cluster 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 func ( configgen * ConfigGeneratorImpl ) BuildClusters ( proxy * model . Proxy , push * model . PushContext ) [] * cluster . Cluster { clusters := make ([] * cluster . Cluster , 0 ) envoyFilterPatches := push . EnvoyFilters ( proxy ) cb := NewClusterBuilder ( proxy , push ) instances := proxy . ServiceInstances switch proxy . Type { case model . SidecarProxy : // Setup outbound clusters outboundPatcher := clusterPatcher { envoyFilterPatches , networking . EnvoyFilter_SIDECAR_OUTBOUND } clusters = append ( clusters , configgen . buildOutboundClusters ( cb , outboundPatcher ) ... ) // Add a blackhole and passthrough cluster for catching traffic to unresolved routes clusters = outboundPatcher . conditionallyAppend ( clusters , cb . buildBlackHoleCluster (), cb . buildDefaultPassthroughCluster ()) clusters = append ( clusters , outboundPatcher . insertedClusters () ... ) // Setup inbound clusters inboundPatcher := clusterPatcher { envoyFilterPatches , networking . EnvoyFilter_SIDECAR_INBOUND } clusters = append ( clusters , configgen . buildInboundClusters ( cb , instances , inboundPatcher ) ... ) // Pass through clusters for inbound traffic. These cluster bind loopback-ish src address to access node local service. clusters = inboundPatcher . conditionallyAppend ( clusters , cb . buildInboundPassthroughClusters () ... ) clusters = append ( clusters , inboundPatcher . insertedClusters () ... ) default : // Gateways patcher := clusterPatcher { envoyFilterPatches , networking . EnvoyFilter_GATEWAY } clusters = append ( clusters , configgen . buildOutboundClusters ( cb , patcher ) ... ) // Gateways do not require the default passthrough cluster as they do not have original dst listeners. clusters = patcher . conditionallyAppend ( clusters , cb . buildBlackHoleCluster ()) if proxy . Type == model . Router && proxy . GetRouterMode () == model . SniDnatRouter { clusters = append ( clusters , configgen . buildOutboundSniDnatClusters ( proxy , push , patcher ) ... ) } clusters = append ( clusters , patcher . insertedClusters () ... ) } clusters = normalizeClusters ( push , proxy , clusters ) return clusters } func ( p clusterPatcher ) conditionallyAppend ( l [] * cluster . Cluster , clusters ...* cluster . Cluster ) [] * cluster . Cluster { for _ , c := range clusters { if envoyfilter . ShouldKeepCluster ( p . pctx , p . efw , c ) { l = append ( l , envoyfilter . ApplyClusterMerge ( p . pctx , p . efw , c )) } } return l } func ( p clusterPatcher ) insertedClusters () [] * cluster . Cluster { return envoyfilter . InsertedClusters ( p . pctx , p . efw ) } \u5148\u751f\u6210Cluster\u3001\u751f\u6210\u5b8cCluster\u540e\uff0c\u83b7\u53d6\u5230EnvoyFilter\uff0c\u7136\u540e\u8c03\u7528EnovyFilter CLuster Patch \uff0c Cluster Patch \u6838\u5fc3\u9700\u8981\u5173\u5fc3\u4e09\u4e2a\u64cd\u4f5c\uff0cRemove\u3001Patch\u3001Add\u4e09\u7c7b ShouldKeepCluster\u5c31\u662f\u7528\u6765\u51b3\u5b9a\u4e00\u4e2aCluster\u662f\u5426\u9700\u8981\u5220\u9664\u7684\u64cd\u4f5c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 func ShouldKeepCluster ( pctx networking . EnvoyFilter_PatchContext , efw * model . EnvoyFilterWrapper , c * cluster . Cluster ) bool { if efw == nil { return true } for _ , cp := range efw . Patches [ networking . EnvoyFilter_CLUSTER ] { if cp . Operation != networking . EnvoyFilter_Patch_REMOVE { continue } // commonConditionMatch\u7528\u6765\u5339\u914dPatchContext\uff0c if commonConditionMatch ( pctx , cp ) && clusterMatch ( c , cp ) { return false } } return true } ApplyClusterMerge\u5219\u662f\u7528\u6765\u5c06EnvoyFilter\u4e2d\u7684Cluster\u76f8\u5173\u7684\u5185\u5bb9\u8fdb\u884cMerge 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 func ApplyClusterMerge ( pctx networking . EnvoyFilter_PatchContext , efw * model . EnvoyFilterWrapper , c * cluster . Cluster ) ( out * cluster . Cluster ) { defer runtime . HandleCrash ( runtime . LogPanic , func ( interface {}) { log . Errorf ( \"clusters patch caused panic, so the patches did not take effect\" ) }) // In case the patches cause panic, use the clusters generated before to reduce the influence. out = c if efw == nil { return } for _ , cp := range efw . Patches [ networking . EnvoyFilter_CLUSTER ] { if cp . Operation != networking . EnvoyFilter_Patch_MERGE { continue } if commonConditionMatch ( pctx , cp ) && clusterMatch ( c , cp ) { proto . Merge ( c , cp . Value ) } } return c } \u6700\u540e\u4e00\u7c7b\u5c31\u662f\u628a\u65b0\u589e\u7684Cluster\u63d2\u5165 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 func InsertedClusters ( pctx networking . EnvoyFilter_PatchContext , efw * model . EnvoyFilterWrapper ) [] * cluster . Cluster { if efw == nil { return nil } var result [] * cluster . Cluster // Add cluster if the operation is add, and patch context matches for _ , cp := range efw . Patches [ networking . EnvoyFilter_CLUSTER ] { if cp . Operation == networking . EnvoyFilter_Patch_ADD { if commonConditionMatch ( pctx , cp ) { result = append ( result , proto . Clone ( cp . Value ).( * cluster . Cluster )) } } } return result } \u603b\u7684\u6765\u8bf4\uff0cCluster\u4e3b\u8981\u6709Merge\u3001Add\u3001Remove\u4e09\u4e2a\u64cd\u4f5c\uff0c\u901a\u8fc7 ShouldKeepCluster \u6765\u51b3\u5b9aCluster\u662f\u5426\u8df3\u8fc7\uff0c\u901a\u8fc7 InsertedClusters \u6765\u5b8c\u6210Add\u7684\u6240\u6709Cluster\uff0c\u901a\u8fc7 ApplyClusterMerge \u6765\u5b8c\u6210Merge\u76f8\u5173\u8d44\u6e90\u7684\u5408\u5e76\u3002 \u63a5\u7740\u6765\u770b\u4e0b patchListeners \uff0c\u5148\u901a\u8fc7BuildListener\u6784\u5efa\u597d\u5b8c\u6210\u7684Listener\uff0c\u7136\u540e\u8c03\u7528patchListener\u8fdb\u884cEnvoyFilter\u7684\u751f\u6548 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // BuildListeners produces a list of listeners and referenced clusters for all proxies func ( configgen * ConfigGeneratorImpl ) BuildListeners ( node * model . Proxy , push * model . PushContext ) [] * listener . Listener { builder := NewListenerBuilder ( node , push ) switch node . Type { case model . SidecarProxy : builder = configgen . buildSidecarListeners ( builder ) case model . Router : builder = configgen . buildGatewayListeners ( builder ) } builder . patchListeners () return builder . getListeners () } ptachListeners \uff0c\u9996\u5148\u533a\u5206Sidrcar\u548cRouter\u4e24\u79cd\u6a21\u5f0f\u5206\u5f00\u505aApply\uff0c\u63a5\u7740\u9488\u5bf9VirtualInbound\u3001VirtualOutbound\u3001Inbound\u3001Outbound\u56db\u79cd\u7c7b\u578b\u8fdb\u884cApply\u3002 \u6700\u7ec8\u90fd\u7528\u53bb\u8c03\u7528 envoyfilter.ApplyListenerPatches \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 func ( lb * ListenerBuilder ) patchListeners () { lb . envoyFilterWrapper = lb . push . EnvoyFilters ( lb . node ) if lb . envoyFilterWrapper == nil { return } if lb . node . Type == model . Router { lb . gatewayListeners = envoyfilter . ApplyListenerPatches ( networking . EnvoyFilter_GATEWAY , lb . node , lb . push , lb . envoyFilterWrapper , lb . gatewayListeners , false ) return } // virtual outbound\u53ea\u662f\u4e00\u4e2aListenr\uff0c\u6240\u4ee5\u8fd9\u91cc\u53ea\u662f\u8c03\u7528patchOneListener lb . virtualOutboundListener = lb . patchOneListener ( lb . virtualOutboundListener , networking . EnvoyFilter_SIDECAR_OUTBOUND ) lb . virtualInboundListener = lb . patchOneListener ( lb . virtualInboundListener , networking . EnvoyFilter_SIDECAR_INBOUND ) lb . inboundListeners = envoyfilter . ApplyListenerPatches ( networking . EnvoyFilter_SIDECAR_INBOUND , lb . node , lb . push , lb . envoyFilterWrapper , lb . inboundListeners , false ) lb . outboundListeners = envoyfilter . ApplyListenerPatches ( networking . EnvoyFilter_SIDECAR_OUTBOUND , lb . node , lb . push , lb . envoyFilterWrapper , lb . outboundListeners , false ) } // \u9002\u914dApplyListenerPatches\u8fd9\u4e2a\u63a5\u53e3\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u63a5\u53e3\u63a5\u6536\u7684\u662flist func ( lb * ListenerBuilder ) patchOneListener ( l * listener . Listener , ctx networking . EnvoyFilter_PatchContext ) * listener . Listener { if l == nil { return nil } tempArray := [] * listener . Listener { l } tempArray = envoyfilter . ApplyListenerPatches ( ctx , lb . node , lb . push , lb . envoyFilterWrapper , tempArray , true ) // temp array will either be empty [if virtual listener was removed] or will have a modified listener if len ( tempArray ) == 0 { return nil } return tempArray [ 0 ] } \u6700\u540e\u6765\u5206\u6790\u4e0b envoyfilter.ApplyListenerPatches \u5373\u53ef\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 // ApplyListenerPatches applies patches to LDS output func ApplyListenerPatches ( patchContext networking . EnvoyFilter_PatchContext , proxy * model . Proxy , push * model . PushContext , efw * model . EnvoyFilterWrapper , listeners [] * xdslistener . Listener , skipAdds bool ) ( out [] * xdslistener . Listener ) { defer runtime . HandleCrash ( runtime . LogPanic , func ( interface {}) { log . Errorf ( \"listeners patch caused panic, so the patches did not take effect\" ) }) // In case the patches cause panic, use the listeners generated before to reduce the influence. out = listeners if efw == nil { return } return doListenerListOperation ( patchContext , efw , listeners , skipAdds ) } func doListenerListOperation ( patchContext networking . EnvoyFilter_PatchContext , envoyFilterWrapper * model . EnvoyFilterWrapper , listeners [] * xdslistener . Listener , skipAdds bool ) [] * xdslistener . Listener { listenersRemoved := false // do all the changes for a single envoy filter crd object. [including adds] // then move on to the next one // only removes/merges plus next level object operations [add/remove/merge] // \u6392\u9664Name\u4e3a\u7a7a\u7684listener,\u6240\u6709\u8981\u79fb\u9664\u7684listener\u90fd\u4f1a\u628aname\u8bbe\u7f6e\u4e3a\"\" for _ , listener := range listeners { if listener . Name == \"\" { // removed by another op continue } doListenerOperation ( patchContext , envoyFilterWrapper . Patches , listener , & listenersRemoved ) } // adds at listener level if enabled // \u5904\u7406Add if ! skipAdds { for _ , cp := range envoyFilterWrapper . Patches [ networking . EnvoyFilter_LISTENER ] { if cp . Operation == networking . EnvoyFilter_Patch_ADD { if ! commonConditionMatch ( patchContext , cp ) { continue } // clone before append. Otherwise, subsequent operations on this listener will corrupt // the master value stored in CP.. listeners = append ( listeners , proto . Clone ( cp . Value ).( * xdslistener . Listener )) } } } // \u5904\u7406remove\uff0c\u5728doListenerOperation\u4e2d\u5df2\u7ecf\u628a\u8981\u79fb\u9664\u7684listener\u7684name\u8bbe\u7f6e\u4e3a\u7a7a\u4e86 if listenersRemoved { tempArray := make ([] * xdslistener . Listener , 0 , len ( listeners )) for _ , l := range listeners { if l . Name != \"\" { tempArray = append ( tempArray , l ) } } return tempArray } return listeners } \u603b\u7ed3\u6765\u8bf4\uff0c\u5904\u7406listener\u7684\u65f6\u5019\u5148\u5904\u7406remove\uff0c\u9700\u8981remove\u7684\u5148\u6807\u8bb0name\u4e3a\u7a7a\uff0c\u7136\u540e\u5904\u7406listener\u7684merge\u64cd\u4f5c\uff0c\u6700\u540e\u5904\u7406filter chain\u7684\u5408\u5e76\u3001network filter chain\u7b49\uff0c\u601d\u8def\u548clistener\u7684\u5904\u7406\u57fa\u672c\u7c7b\u4f3c\u3002 \u5904\u7406\u5b8c\u8fd9\u4e9b\u540e\u5f00\u59cb\u5904\u7406listener\u7684add\u3001\u6700\u540e\u628a\u4e4b\u524d\u6807\u8bb0\u8981\u5220\u9664\u7684lisetner\u90fd\u5220\u9664\u5373\u53ef\u3002 \u66f4\u65b0\u6d41\u7a0b: EnvoyFilter\u53d1\u751f\u53d8\u66f4","title":"EnvoyFilter\u5206\u6790"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/pilot/EnvoyFilter/#envoyfilter","text":"Envoy Filter\u548c Service \u3001 Virtual Service \u3001 DestinationRules \u7b49\u7b49\u8fd9\u4e9bCRD\u8d44\u6e90\u90fd\u5206\u4e3a\u521d\u59cb\u5316\u3001\u4f7f\u7528\u3001\u66f4\u65b0\u7b49\u4e09\u4e2a\u4e3b\u8981\u90e8\u5206\u3002 \u521d\u59cb\u5316\u6d41\u7a0b: Envoy\u9996\u6b21\u8fde\u63a5\u5230pilot\u540e\uff0c\u8c03\u7528 model.Environment \u4e2d\u7684 PushContext \u7684 InitContext \u65b9\u6cd5\u521d\u59cb\u5316 PushContext 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 // InitContext will initialize the data structures used for code generation. // This should be called before starting the push, from the thread creating // the push context. func ( ps * PushContext ) InitContext ( env * Environment , oldPushContext * PushContext , pushReq * PushRequest ) error { // ..... // create new or incremental update if pushReq == nil || oldPushContext == nil || ! oldPushContext . initDone . Load () || len ( pushReq . ConfigsUpdated ) == 0 { if err := ps . createNewContext ( env ); err != nil { return err } } else { if err := ps . updateContext ( env , oldPushContext , pushReq ); err != nil { return err } } // ..... } \u901a\u8fc7 ps.createNewContext \b\u521d\u59cb\u5316 Service \u3001 VirtualService \u3001 DestinationRules \u3001 Envoyfilters \u7b49 1 2 3 4 5 6 7 func ( ps * PushContext ) createNewContext ( env * Environment ) error { ...... .. if err := ps . initEnvoyFilters ( env ); err != nil { return err } ...... . } \u901a\u8fc7 initEnvoyFilters \u83b7\u53d6\u5230\u6240\u6709\u7684EnvoyFilter \u7136\u540e\u8c03\u7528 func convertToEnvoyFilterWrapper(local *config.Config) *EnvoyFilterWrapper \uff0c\u5c06EnvoyFilter\u8f6c\u6362\u6210\u4e0b\u9762\u7684 EnvoyFilterWrapper \u4e00\u4e2aEnvoyFilter\u7684yaml\u6700\u7ec8\u4f1a\u8f6c\u6362\u6210\u4e0b\u9762\u8fd9\u79cd\u5f62\u5f0f\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 // EnvoyFilterWrapper is a wrapper for the EnvoyFilter api object with pre-processed data type EnvoyFilterWrapper struct { workloadSelector labels . Instance Patches map [ networking . EnvoyFilter_ApplyTo ][] * EnvoyFilterConfigPatchWrapper } // EnvoyFilterConfigPatchWrapper is a wrapper over the EnvoyFilter ConfigPatch api object // fields are ordered such that this struct is aligned type EnvoyFilterConfigPatchWrapper struct { Value proto . Message Match * networking . EnvoyFilter_EnvoyConfigObjectMatch ApplyTo networking . EnvoyFilter_ApplyTo Operation networking . EnvoyFilter_Patch_Operation // Pre-compile the regex from proxy version match in the match ProxyVersionRegex * regexp . Regexp // ProxyPrefixMatch provides a prefix match for the proxy version. The current API only allows // regex match, but as an optimization we can reduce this to a prefix match for common cases. // If this is set, ProxyVersionRegex is ignored. ProxyPrefixMatch string } EnvoyFilter \u672c\u8d28\u4e0a\u5c31\u662f\u4e00\u4e2a Selector \u548c\u4e00\u4e2a Patch (istio\u5c01\u88c5\u6210 EnvoyFilterWrapper )\uff0c\u901a\u8fc7 Selector \u627e\u5230\u5339\u914d\u7684 Sidecar \uff0c\u7136\u540e\u7ed9\u5176\u6253\u4e0a Patch \uff0c\u800c\u8fd9\u4e2aPatch\u672c\u8d28\u5c31\u662f\"\u5f80\u914d\u7f6e\u4e2d\u7684\u54ea\u4e2a\u90e8\u5206\u8fdb\u884c\u67d0\u4e9b\u64cd\u4f5c\uff0c\u64cd\u4f5c\u7684\u5185\u5bb9\u662f\u4ec0\u4e48\" \u4e3a\u6b64istio\u5c06\u5176\u5305\u88c5\u6210 ApplyTo \u3001 Operation Apply\u6d41\u7a0b: EnvoyFilter\u751f\u6548\u7684\u5730\u65b9\u4e3b\u8981\u6709\u4e09\u4e2a BuildClusters \u3001 BuildExtensionConfiguration \u3001 patchListeners \u9996\u5148\u6765\u770b\u4e0b BuildClusters \uff0c\u5206\u6210\u4e86Gateway\u548cSidecar\u4e24\u79cd\u6a21\u5f0f\u7684Cluster\u751f\u6210\uff0c\u8fd8\u4f1a\u533a\u5206Inbound\u548cOutbound Cluster 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 func ( configgen * ConfigGeneratorImpl ) BuildClusters ( proxy * model . Proxy , push * model . PushContext ) [] * cluster . Cluster { clusters := make ([] * cluster . Cluster , 0 ) envoyFilterPatches := push . EnvoyFilters ( proxy ) cb := NewClusterBuilder ( proxy , push ) instances := proxy . ServiceInstances switch proxy . Type { case model . SidecarProxy : // Setup outbound clusters outboundPatcher := clusterPatcher { envoyFilterPatches , networking . EnvoyFilter_SIDECAR_OUTBOUND } clusters = append ( clusters , configgen . buildOutboundClusters ( cb , outboundPatcher ) ... ) // Add a blackhole and passthrough cluster for catching traffic to unresolved routes clusters = outboundPatcher . conditionallyAppend ( clusters , cb . buildBlackHoleCluster (), cb . buildDefaultPassthroughCluster ()) clusters = append ( clusters , outboundPatcher . insertedClusters () ... ) // Setup inbound clusters inboundPatcher := clusterPatcher { envoyFilterPatches , networking . EnvoyFilter_SIDECAR_INBOUND } clusters = append ( clusters , configgen . buildInboundClusters ( cb , instances , inboundPatcher ) ... ) // Pass through clusters for inbound traffic. These cluster bind loopback-ish src address to access node local service. clusters = inboundPatcher . conditionallyAppend ( clusters , cb . buildInboundPassthroughClusters () ... ) clusters = append ( clusters , inboundPatcher . insertedClusters () ... ) default : // Gateways patcher := clusterPatcher { envoyFilterPatches , networking . EnvoyFilter_GATEWAY } clusters = append ( clusters , configgen . buildOutboundClusters ( cb , patcher ) ... ) // Gateways do not require the default passthrough cluster as they do not have original dst listeners. clusters = patcher . conditionallyAppend ( clusters , cb . buildBlackHoleCluster ()) if proxy . Type == model . Router && proxy . GetRouterMode () == model . SniDnatRouter { clusters = append ( clusters , configgen . buildOutboundSniDnatClusters ( proxy , push , patcher ) ... ) } clusters = append ( clusters , patcher . insertedClusters () ... ) } clusters = normalizeClusters ( push , proxy , clusters ) return clusters } func ( p clusterPatcher ) conditionallyAppend ( l [] * cluster . Cluster , clusters ...* cluster . Cluster ) [] * cluster . Cluster { for _ , c := range clusters { if envoyfilter . ShouldKeepCluster ( p . pctx , p . efw , c ) { l = append ( l , envoyfilter . ApplyClusterMerge ( p . pctx , p . efw , c )) } } return l } func ( p clusterPatcher ) insertedClusters () [] * cluster . Cluster { return envoyfilter . InsertedClusters ( p . pctx , p . efw ) } \u5148\u751f\u6210Cluster\u3001\u751f\u6210\u5b8cCluster\u540e\uff0c\u83b7\u53d6\u5230EnvoyFilter\uff0c\u7136\u540e\u8c03\u7528EnovyFilter CLuster Patch \uff0c Cluster Patch \u6838\u5fc3\u9700\u8981\u5173\u5fc3\u4e09\u4e2a\u64cd\u4f5c\uff0cRemove\u3001Patch\u3001Add\u4e09\u7c7b ShouldKeepCluster\u5c31\u662f\u7528\u6765\u51b3\u5b9a\u4e00\u4e2aCluster\u662f\u5426\u9700\u8981\u5220\u9664\u7684\u64cd\u4f5c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 func ShouldKeepCluster ( pctx networking . EnvoyFilter_PatchContext , efw * model . EnvoyFilterWrapper , c * cluster . Cluster ) bool { if efw == nil { return true } for _ , cp := range efw . Patches [ networking . EnvoyFilter_CLUSTER ] { if cp . Operation != networking . EnvoyFilter_Patch_REMOVE { continue } // commonConditionMatch\u7528\u6765\u5339\u914dPatchContext\uff0c if commonConditionMatch ( pctx , cp ) && clusterMatch ( c , cp ) { return false } } return true } ApplyClusterMerge\u5219\u662f\u7528\u6765\u5c06EnvoyFilter\u4e2d\u7684Cluster\u76f8\u5173\u7684\u5185\u5bb9\u8fdb\u884cMerge 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 func ApplyClusterMerge ( pctx networking . EnvoyFilter_PatchContext , efw * model . EnvoyFilterWrapper , c * cluster . Cluster ) ( out * cluster . Cluster ) { defer runtime . HandleCrash ( runtime . LogPanic , func ( interface {}) { log . Errorf ( \"clusters patch caused panic, so the patches did not take effect\" ) }) // In case the patches cause panic, use the clusters generated before to reduce the influence. out = c if efw == nil { return } for _ , cp := range efw . Patches [ networking . EnvoyFilter_CLUSTER ] { if cp . Operation != networking . EnvoyFilter_Patch_MERGE { continue } if commonConditionMatch ( pctx , cp ) && clusterMatch ( c , cp ) { proto . Merge ( c , cp . Value ) } } return c } \u6700\u540e\u4e00\u7c7b\u5c31\u662f\u628a\u65b0\u589e\u7684Cluster\u63d2\u5165 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 func InsertedClusters ( pctx networking . EnvoyFilter_PatchContext , efw * model . EnvoyFilterWrapper ) [] * cluster . Cluster { if efw == nil { return nil } var result [] * cluster . Cluster // Add cluster if the operation is add, and patch context matches for _ , cp := range efw . Patches [ networking . EnvoyFilter_CLUSTER ] { if cp . Operation == networking . EnvoyFilter_Patch_ADD { if commonConditionMatch ( pctx , cp ) { result = append ( result , proto . Clone ( cp . Value ).( * cluster . Cluster )) } } } return result } \u603b\u7684\u6765\u8bf4\uff0cCluster\u4e3b\u8981\u6709Merge\u3001Add\u3001Remove\u4e09\u4e2a\u64cd\u4f5c\uff0c\u901a\u8fc7 ShouldKeepCluster \u6765\u51b3\u5b9aCluster\u662f\u5426\u8df3\u8fc7\uff0c\u901a\u8fc7 InsertedClusters \u6765\u5b8c\u6210Add\u7684\u6240\u6709Cluster\uff0c\u901a\u8fc7 ApplyClusterMerge \u6765\u5b8c\u6210Merge\u76f8\u5173\u8d44\u6e90\u7684\u5408\u5e76\u3002 \u63a5\u7740\u6765\u770b\u4e0b patchListeners \uff0c\u5148\u901a\u8fc7BuildListener\u6784\u5efa\u597d\u5b8c\u6210\u7684Listener\uff0c\u7136\u540e\u8c03\u7528patchListener\u8fdb\u884cEnvoyFilter\u7684\u751f\u6548 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // BuildListeners produces a list of listeners and referenced clusters for all proxies func ( configgen * ConfigGeneratorImpl ) BuildListeners ( node * model . Proxy , push * model . PushContext ) [] * listener . Listener { builder := NewListenerBuilder ( node , push ) switch node . Type { case model . SidecarProxy : builder = configgen . buildSidecarListeners ( builder ) case model . Router : builder = configgen . buildGatewayListeners ( builder ) } builder . patchListeners () return builder . getListeners () } ptachListeners \uff0c\u9996\u5148\u533a\u5206Sidrcar\u548cRouter\u4e24\u79cd\u6a21\u5f0f\u5206\u5f00\u505aApply\uff0c\u63a5\u7740\u9488\u5bf9VirtualInbound\u3001VirtualOutbound\u3001Inbound\u3001Outbound\u56db\u79cd\u7c7b\u578b\u8fdb\u884cApply\u3002 \u6700\u7ec8\u90fd\u7528\u53bb\u8c03\u7528 envoyfilter.ApplyListenerPatches \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 func ( lb * ListenerBuilder ) patchListeners () { lb . envoyFilterWrapper = lb . push . EnvoyFilters ( lb . node ) if lb . envoyFilterWrapper == nil { return } if lb . node . Type == model . Router { lb . gatewayListeners = envoyfilter . ApplyListenerPatches ( networking . EnvoyFilter_GATEWAY , lb . node , lb . push , lb . envoyFilterWrapper , lb . gatewayListeners , false ) return } // virtual outbound\u53ea\u662f\u4e00\u4e2aListenr\uff0c\u6240\u4ee5\u8fd9\u91cc\u53ea\u662f\u8c03\u7528patchOneListener lb . virtualOutboundListener = lb . patchOneListener ( lb . virtualOutboundListener , networking . EnvoyFilter_SIDECAR_OUTBOUND ) lb . virtualInboundListener = lb . patchOneListener ( lb . virtualInboundListener , networking . EnvoyFilter_SIDECAR_INBOUND ) lb . inboundListeners = envoyfilter . ApplyListenerPatches ( networking . EnvoyFilter_SIDECAR_INBOUND , lb . node , lb . push , lb . envoyFilterWrapper , lb . inboundListeners , false ) lb . outboundListeners = envoyfilter . ApplyListenerPatches ( networking . EnvoyFilter_SIDECAR_OUTBOUND , lb . node , lb . push , lb . envoyFilterWrapper , lb . outboundListeners , false ) } // \u9002\u914dApplyListenerPatches\u8fd9\u4e2a\u63a5\u53e3\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u63a5\u53e3\u63a5\u6536\u7684\u662flist func ( lb * ListenerBuilder ) patchOneListener ( l * listener . Listener , ctx networking . EnvoyFilter_PatchContext ) * listener . Listener { if l == nil { return nil } tempArray := [] * listener . Listener { l } tempArray = envoyfilter . ApplyListenerPatches ( ctx , lb . node , lb . push , lb . envoyFilterWrapper , tempArray , true ) // temp array will either be empty [if virtual listener was removed] or will have a modified listener if len ( tempArray ) == 0 { return nil } return tempArray [ 0 ] } \u6700\u540e\u6765\u5206\u6790\u4e0b envoyfilter.ApplyListenerPatches \u5373\u53ef\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 // ApplyListenerPatches applies patches to LDS output func ApplyListenerPatches ( patchContext networking . EnvoyFilter_PatchContext , proxy * model . Proxy , push * model . PushContext , efw * model . EnvoyFilterWrapper , listeners [] * xdslistener . Listener , skipAdds bool ) ( out [] * xdslistener . Listener ) { defer runtime . HandleCrash ( runtime . LogPanic , func ( interface {}) { log . Errorf ( \"listeners patch caused panic, so the patches did not take effect\" ) }) // In case the patches cause panic, use the listeners generated before to reduce the influence. out = listeners if efw == nil { return } return doListenerListOperation ( patchContext , efw , listeners , skipAdds ) } func doListenerListOperation ( patchContext networking . EnvoyFilter_PatchContext , envoyFilterWrapper * model . EnvoyFilterWrapper , listeners [] * xdslistener . Listener , skipAdds bool ) [] * xdslistener . Listener { listenersRemoved := false // do all the changes for a single envoy filter crd object. [including adds] // then move on to the next one // only removes/merges plus next level object operations [add/remove/merge] // \u6392\u9664Name\u4e3a\u7a7a\u7684listener,\u6240\u6709\u8981\u79fb\u9664\u7684listener\u90fd\u4f1a\u628aname\u8bbe\u7f6e\u4e3a\"\" for _ , listener := range listeners { if listener . Name == \"\" { // removed by another op continue } doListenerOperation ( patchContext , envoyFilterWrapper . Patches , listener , & listenersRemoved ) } // adds at listener level if enabled // \u5904\u7406Add if ! skipAdds { for _ , cp := range envoyFilterWrapper . Patches [ networking . EnvoyFilter_LISTENER ] { if cp . Operation == networking . EnvoyFilter_Patch_ADD { if ! commonConditionMatch ( patchContext , cp ) { continue } // clone before append. Otherwise, subsequent operations on this listener will corrupt // the master value stored in CP.. listeners = append ( listeners , proto . Clone ( cp . Value ).( * xdslistener . Listener )) } } } // \u5904\u7406remove\uff0c\u5728doListenerOperation\u4e2d\u5df2\u7ecf\u628a\u8981\u79fb\u9664\u7684listener\u7684name\u8bbe\u7f6e\u4e3a\u7a7a\u4e86 if listenersRemoved { tempArray := make ([] * xdslistener . Listener , 0 , len ( listeners )) for _ , l := range listeners { if l . Name != \"\" { tempArray = append ( tempArray , l ) } } return tempArray } return listeners } \u603b\u7ed3\u6765\u8bf4\uff0c\u5904\u7406listener\u7684\u65f6\u5019\u5148\u5904\u7406remove\uff0c\u9700\u8981remove\u7684\u5148\u6807\u8bb0name\u4e3a\u7a7a\uff0c\u7136\u540e\u5904\u7406listener\u7684merge\u64cd\u4f5c\uff0c\u6700\u540e\u5904\u7406filter chain\u7684\u5408\u5e76\u3001network filter chain\u7b49\uff0c\u601d\u8def\u548clistener\u7684\u5904\u7406\u57fa\u672c\u7c7b\u4f3c\u3002 \u5904\u7406\u5b8c\u8fd9\u4e9b\u540e\u5f00\u59cb\u5904\u7406listener\u7684add\u3001\u6700\u540e\u628a\u4e4b\u524d\u6807\u8bb0\u8981\u5220\u9664\u7684lisetner\u90fd\u5220\u9664\u5373\u53ef\u3002 \u66f4\u65b0\u6d41\u7a0b: EnvoyFilter\u53d1\u751f\u53d8\u66f4","title":"EnvoyFilter\u5206\u6790"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/pilot/PushContext/","text":"PushContext\u5206\u6790 \u4ec0\u4e48\u662fPushContext?\b PushContext\u4fdd\u5b58\u4e86\u4e00\u6b21Push\u4e2d\u6240\u6d89\u53ca\u5230\u7684\u72b6\u6001\u4fe1\u606f\uff0c\u4e0b\u9762\u662f\u4e00\u4e2aPushContext\u7684\u7ec4\u6210\uff0c\u53ef\u4ee5\u770b\u5230\u5305\u542b\u4e86\u6240\u6709Proxy\u7684Status\u3001 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 // PushContext tracks the status of a push - metrics and errors. // Metrics are reset after a push - at the beginning all // values are zero, and when push completes the status is reset. // The struct is exposed in a debug endpoint - fields public to allow // easy serialization as json. type PushContext struct { proxyStatusMutex sync . RWMutex // ProxyStatus is keyed by the error code, and holds a map keyed // by the ID. ProxyStatus map [ string ] map [ string ] ProxyPushStatus // Synthesized from env.Mesh exportToDefaults exportToDefaults // ServiceIndex is the index of services by various fields. ServiceIndex serviceIndex // ServiceAccounts contains a map of hostname and port to service accounts. ServiceAccounts map [ host . Name ] map [ int ][] string `json:\"-\"` // virtualServiceIndex is the index of virtual services by various fields. virtualServiceIndex virtualServiceIndex // destinationRuleIndex is the index of destination rules by various fields. destinationRuleIndex destinationRuleIndex // gatewayIndex is the index of gateways. gatewayIndex gatewayIndex // clusterLocalHosts extracted from the MeshConfig clusterLocalHosts host . Names // sidecars for each namespace sidecarsByNamespace map [ string ][] * SidecarScope // envoy filters for each namespace including global config namespace envoyFiltersByNamespace map [ string ][] * EnvoyFilterWrapper // AuthnPolicies contains Authn policies by namespace. AuthnPolicies * AuthenticationPolicies `json:\"-\"` // AuthzPolicies stores the existing authorization policies in the cluster. Could be nil if there // are no authorization policies in the cluster. AuthzPolicies * AuthorizationPolicies `json:\"-\"` // The following data is either a global index or used in the inbound path. // Namespace specific views do not apply here. // Mesh configuration for the mesh. Mesh * meshconfig . MeshConfig `json:\"-\"` // Discovery interface for listing services and instances. ServiceDiscovery `json:\"-\"` // Config interface for listing routing rules IstioConfigStore `json:\"-\"` // PushVersion describes the push version this push context was computed for PushVersion string // LedgerVersion is the version of the configuration ledger LedgerVersion string // cache gateways addresses for each network // this is mainly used for kubernetes multi-cluster scenario networksMu sync . RWMutex networkGateways map [ string ][] * Gateway initDone atomic . Bool initializeMutex sync . Mutex } PushContext\u4f55\u65f6\u521b\u5efa\u548c\u521d\u59cb\u5316? \u521d\u59cb\u521b\u5efaPilot Server\u7684\u65f6\u5019\u4f1a\u53bb\u521b\u5efa\u4e00\u4e2a\u7a7a\u7684PushContext 1 2 3 4 5 6 7 func NewServer ( args * PilotArgs ) ( * Server , error ) { e := & model . Environment { PushContext : model . NewPushContext (), DomainSuffix : args . RegistryOptions . KubeOptions . DomainSuffix , } ... .. } \u8fd9\u91cc\u521b\u5efa\u7684PushContext\u662f\u7528\u6765\u4f5c\u4e3a\u5168\u5c40\u7684PushContext\uff0c\u88ab\u79f0\u4e3aGlobalPushContext\uff0c\u5012\u662f\u8fd9\u4e2aPushContext\u8fd8\u6ca1\u6709\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u8fd8\u662f\u4e00\u4e2a\u7a7a\u7684\u3002\u76f4\u5230\u6709\u8bf7\u6c42\u5230\u6765\u7684\u65f6\u5019\uff0c\u624d\u4f1a\u89e6\u53d1\u5176\u521d\u59cb\u5316\u3002 1 2 3 4 5 6 7 8 9 10 11 12 func ( s * DiscoveryServer ) Stream ( stream DiscoveryStream ) error { ... .. // InitContext returns immediately if the context was already initialized. // \u5f53\u6709\u8bf7\u6c42\u7684\u65f6\u5019\uff0c\u5f00\u59cb\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u521d\u59cb\u5316\u5b8c\u6210\u540e\u4f1a\u8bbe\u7f6e\u6807\u5fd7\u4f4d\uff0c\u540e\u7eed\u7684\u8bf7\u6c42\u5c06\u4e0d\u4f1a\u518d\u8fdb\u884c\u521d\u59cb\u5316\u4e86\u3002 if err = s . globalPushContext (). InitContext ( s . Env , nil , nil ); err != nil { // Error accessing the data - log and close, maybe a different pilot replica // has more luck adsLog . Warnf ( \"Error reading config %v\" , err ) return status . Error ( codes . Unavailable , \"error reading config\" ) } con := newConnection ( peerAddr , stream ) con . Identities = ids \u53d1\u751fPush\u7684\u65f6\u5019\uff0c\u4f1a\u521b\u5efa\u4e00\u4e2a\u65b0\u7684PushContext\uff0c\u7136\u540e\u5bf9GlobalPushContext\u8fdb\u884c\u66f4\u65b0\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 // Push is called to push changes on config updates using ADS. This is set in DiscoveryService.Push, // to avoid direct dependencies. func ( s * DiscoveryServer ) Push ( req * model . PushRequest ) { if ! req . Full { // \u4e0d\u662f\u5168\u91cfPush\u5c31\u76f4\u63a5\u7528global push context\u5373\u53ef\uff0c\u56e0\u4e3a\u76f8\u5173\u8d44\u6e90\u4e0d\u9700\u8981\u91cd\u65b0\u751f\u6210\uff0c\u76f4\u63a5\u5bf9\u53d1\u751f\u53d8\u5316\u7684\u8d44\u6e90\u505a\u66f4\u65b0\u5373\u53ef\u3002 req . Push = s . globalPushContext () s . AdsPushAll ( versionInfo (), req ) return } // \u5982\u679c\u662f\u5168\u91cfPush\uff0c\u90a3\u4e48\u9700\u8981\u91cd\u65b0\u66f4\u65b0PushContext\uff0c\u8fd9\u91cc\u5148\u4fdd\u5b58\u4e4b\u524d\u7684PushContext\u65b9\u4fbf\u6392\u67e5\u8bf7\u95ee\u9898\u548cdebug // Reset the status during the push. oldPushContext := s . globalPushContext () if oldPushContext != nil { oldPushContext . OnConfigChange () } // PushContext is reset after a config change. Previous status is // saved. t0 := time . Now () versionLocal := time . Now (). Format ( time . RFC3339 ) + \"/\" + strconv . FormatUint ( versionNum . Inc (), 10 ) // \u5f00\u59cb\u521b\u5efa\u65b0\u7684PushContext\uff0c\u5e76\u4f7f\u7528global PushContext\u8fdb\u884c\u66f4\u65b0\u3002 push , err := s . initPushContext ( req , oldPushContext , versionLocal ) if err != nil { return } initContextTime := time . Since ( t0 ) adsLog . Debugf ( \"InitContext %v for push took %s\" , versionLocal , initContextTime ) versionMutex . Lock () version = versionLocal versionMutex . Unlock () req . Push = push s . AdsPushAll ( versionLocal , req ) } \u901a\u8fc7\u4e0b\u9762\u7684 initPushContext \u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u9996\u5148\u4f1a\u53bb\u521b\u5efaPushContext\uff0c\u7136\u540e\u8c03\u7528 initContext \u8fdb\u884c\u521d\u59cb\u5316\u3002\u6700\u540e\u5c06\u66f4\u65b0\u540e\u7684PushContext\u91cd\u65b0\u8d4b\u503c\u7ed9Global Push Context 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 // initPushContext creates a global push context and stores it on the environment. Note: while this // method is technically thread safe (there are no data races), it should not be called in parallel; // if it is, then we may start two push context creations (say A, and B), but then write them in // reverse order, leaving us with a final version of A, which may be incomplete. func ( s * DiscoveryServer ) initPushContext ( req * model . PushRequest , oldPushContext * model . PushContext , version string ) ( * model . PushContext , error ) { // \u521b\u5efa\u4e00\u4e2a\u65b0\u7684PushContext\uff0c\u7136\u540e\u7528\u8001\u7684PushContext\u6765\u521d\u59cb\u5316\u5b83 push := model . NewPushContext () push . PushVersion = version if err := push . InitContext ( s . Env , oldPushContext , req ); err != nil { adsLog . Errorf ( \"XDS: Failed to update services: %v\" , err ) // We can't push if we can't read the data - stick with previous version. pushContextErrors . Increment () return nil , err } if err := s . UpdateServiceShards ( push ); err != nil { return nil , err } s . updateMutex . Lock () // \u6700\u540e\u66f4\u65b0global push context s . Env . PushContext = push s . updateMutex . Unlock () return push , nil } \u5728 InitContext \u65b9\u6cd5\u5219\u4f1a\u5224\u65ad\u662f\u5426\u662f\u505a\u9996\u6b21\u521d\u59cb\u5316\uff0c\u8fd8\u662f\u8bf4\u4f7f\u7528global PushContext\u8fdb\u884c\u589e\u91cf\u7684\u521d\u59cb\u5316\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 // InitContext will initialize the data structures used for code generation. // This should be called before starting the push, from the thread creating // the push context. func ( ps * PushContext ) InitContext ( env * Environment , oldPushContext * PushContext , pushReq * PushRequest ) error { // Acquire a lock to ensure we don't concurrently initialize the same PushContext. // If this does happen, one thread will block then exit early from initDone=true ps . initializeMutex . Lock () defer ps . initializeMutex . Unlock () if ps . initDone . Load () { return nil } ps . Mesh = env . Mesh () ps . ServiceDiscovery = env . ServiceDiscovery ps . IstioConfigStore = env . IstioConfigStore ps . LedgerVersion = env . Version () // Must be initialized first // as initServiceRegistry/VirtualServices/Destrules // use the default export map ps . initDefaultExportMaps () // create new or incremental update // \u7a7a\u7684Push\u8bf7\u6c42\u3001\u4e0d\u5b58\u5728old push context\u3001\u6216\u8005\u8bf4old push context\u8fd8\u6ca1\u521d\u59cb\u5316\uff0c\u53c8\u6216\u8005push\u8bf7\u6c42\u4e0d\u5305\u542b\u4efb\u4f55\u914d\u7f6e\u8bf7\u6c42 // \u8fd9\u4e9b\u60c5\u51b5\u90fd\u4f1a\u5bfc\u81f4\u5168\u91cf\u7684PushContext\u66f4\u65b0\uff0c\u5426\u5219\u5c31\u4f7f\u7528old push context\u505a\u589e\u91cf\u66f4\u65b0 if pushReq == nil || oldPushContext == nil || ! oldPushContext . initDone . Load () || len ( pushReq . ConfigsUpdated ) == 0 { if err := ps . createNewContext ( env ); err != nil { return err } } else { // \u589e\u91cf\u66f4\u65b0 if err := ps . updateContext ( env , oldPushContext , pushReq ); err != nil { return err } } // TODO: only do this when meshnetworks or gateway service changed ps . initMeshNetworks ( env . Networks ()) ps . initClusterLocalHosts ( env ) ps . initDone . Store ( true ) return nil } PushContext\u5982\u4f55\u521d\u59cb\u5316? 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 func ( ps * PushContext ) createNewContext ( env * Environment ) error { if err := ps . initServiceRegistry ( env ); err != nil { return err } if err := ps . initVirtualServices ( env ); err != nil { return err } if err := ps . initDestinationRules ( env ); err != nil { return err } if err := ps . initAuthnPolicies ( env ); err != nil { return err } if err := ps . initAuthorizationPolicies ( env ); err != nil { authzLog . Errorf ( \"failed to initialize authorization policies: %v\" , err ) return err } if err := ps . initEnvoyFilters ( env ); err != nil { return err } if err := ps . initGateways ( env ); err != nil { return err } // Must be initialized in the end if err := ps . initSidecarScopes ( env ); err != nil { return err } return nil }","title":"PushContext\u5206\u6790"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/pilot/PushContext/#pushcontext","text":"","title":"PushContext\u5206\u6790"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/pilot/PushContext/#pushcontext_1","text":"PushContext\u4fdd\u5b58\u4e86\u4e00\u6b21Push\u4e2d\u6240\u6d89\u53ca\u5230\u7684\u72b6\u6001\u4fe1\u606f\uff0c\u4e0b\u9762\u662f\u4e00\u4e2aPushContext\u7684\u7ec4\u6210\uff0c\u53ef\u4ee5\u770b\u5230\u5305\u542b\u4e86\u6240\u6709Proxy\u7684Status\u3001 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 // PushContext tracks the status of a push - metrics and errors. // Metrics are reset after a push - at the beginning all // values are zero, and when push completes the status is reset. // The struct is exposed in a debug endpoint - fields public to allow // easy serialization as json. type PushContext struct { proxyStatusMutex sync . RWMutex // ProxyStatus is keyed by the error code, and holds a map keyed // by the ID. ProxyStatus map [ string ] map [ string ] ProxyPushStatus // Synthesized from env.Mesh exportToDefaults exportToDefaults // ServiceIndex is the index of services by various fields. ServiceIndex serviceIndex // ServiceAccounts contains a map of hostname and port to service accounts. ServiceAccounts map [ host . Name ] map [ int ][] string `json:\"-\"` // virtualServiceIndex is the index of virtual services by various fields. virtualServiceIndex virtualServiceIndex // destinationRuleIndex is the index of destination rules by various fields. destinationRuleIndex destinationRuleIndex // gatewayIndex is the index of gateways. gatewayIndex gatewayIndex // clusterLocalHosts extracted from the MeshConfig clusterLocalHosts host . Names // sidecars for each namespace sidecarsByNamespace map [ string ][] * SidecarScope // envoy filters for each namespace including global config namespace envoyFiltersByNamespace map [ string ][] * EnvoyFilterWrapper // AuthnPolicies contains Authn policies by namespace. AuthnPolicies * AuthenticationPolicies `json:\"-\"` // AuthzPolicies stores the existing authorization policies in the cluster. Could be nil if there // are no authorization policies in the cluster. AuthzPolicies * AuthorizationPolicies `json:\"-\"` // The following data is either a global index or used in the inbound path. // Namespace specific views do not apply here. // Mesh configuration for the mesh. Mesh * meshconfig . MeshConfig `json:\"-\"` // Discovery interface for listing services and instances. ServiceDiscovery `json:\"-\"` // Config interface for listing routing rules IstioConfigStore `json:\"-\"` // PushVersion describes the push version this push context was computed for PushVersion string // LedgerVersion is the version of the configuration ledger LedgerVersion string // cache gateways addresses for each network // this is mainly used for kubernetes multi-cluster scenario networksMu sync . RWMutex networkGateways map [ string ][] * Gateway initDone atomic . Bool initializeMutex sync . Mutex }","title":"\u4ec0\u4e48\u662fPushContext?\b"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/pilot/PushContext/#pushcontext_2","text":"\u521d\u59cb\u521b\u5efaPilot Server\u7684\u65f6\u5019\u4f1a\u53bb\u521b\u5efa\u4e00\u4e2a\u7a7a\u7684PushContext 1 2 3 4 5 6 7 func NewServer ( args * PilotArgs ) ( * Server , error ) { e := & model . Environment { PushContext : model . NewPushContext (), DomainSuffix : args . RegistryOptions . KubeOptions . DomainSuffix , } ... .. } \u8fd9\u91cc\u521b\u5efa\u7684PushContext\u662f\u7528\u6765\u4f5c\u4e3a\u5168\u5c40\u7684PushContext\uff0c\u88ab\u79f0\u4e3aGlobalPushContext\uff0c\u5012\u662f\u8fd9\u4e2aPushContext\u8fd8\u6ca1\u6709\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u8fd8\u662f\u4e00\u4e2a\u7a7a\u7684\u3002\u76f4\u5230\u6709\u8bf7\u6c42\u5230\u6765\u7684\u65f6\u5019\uff0c\u624d\u4f1a\u89e6\u53d1\u5176\u521d\u59cb\u5316\u3002 1 2 3 4 5 6 7 8 9 10 11 12 func ( s * DiscoveryServer ) Stream ( stream DiscoveryStream ) error { ... .. // InitContext returns immediately if the context was already initialized. // \u5f53\u6709\u8bf7\u6c42\u7684\u65f6\u5019\uff0c\u5f00\u59cb\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u521d\u59cb\u5316\u5b8c\u6210\u540e\u4f1a\u8bbe\u7f6e\u6807\u5fd7\u4f4d\uff0c\u540e\u7eed\u7684\u8bf7\u6c42\u5c06\u4e0d\u4f1a\u518d\u8fdb\u884c\u521d\u59cb\u5316\u4e86\u3002 if err = s . globalPushContext (). InitContext ( s . Env , nil , nil ); err != nil { // Error accessing the data - log and close, maybe a different pilot replica // has more luck adsLog . Warnf ( \"Error reading config %v\" , err ) return status . Error ( codes . Unavailable , \"error reading config\" ) } con := newConnection ( peerAddr , stream ) con . Identities = ids \u53d1\u751fPush\u7684\u65f6\u5019\uff0c\u4f1a\u521b\u5efa\u4e00\u4e2a\u65b0\u7684PushContext\uff0c\u7136\u540e\u5bf9GlobalPushContext\u8fdb\u884c\u66f4\u65b0\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 // Push is called to push changes on config updates using ADS. This is set in DiscoveryService.Push, // to avoid direct dependencies. func ( s * DiscoveryServer ) Push ( req * model . PushRequest ) { if ! req . Full { // \u4e0d\u662f\u5168\u91cfPush\u5c31\u76f4\u63a5\u7528global push context\u5373\u53ef\uff0c\u56e0\u4e3a\u76f8\u5173\u8d44\u6e90\u4e0d\u9700\u8981\u91cd\u65b0\u751f\u6210\uff0c\u76f4\u63a5\u5bf9\u53d1\u751f\u53d8\u5316\u7684\u8d44\u6e90\u505a\u66f4\u65b0\u5373\u53ef\u3002 req . Push = s . globalPushContext () s . AdsPushAll ( versionInfo (), req ) return } // \u5982\u679c\u662f\u5168\u91cfPush\uff0c\u90a3\u4e48\u9700\u8981\u91cd\u65b0\u66f4\u65b0PushContext\uff0c\u8fd9\u91cc\u5148\u4fdd\u5b58\u4e4b\u524d\u7684PushContext\u65b9\u4fbf\u6392\u67e5\u8bf7\u95ee\u9898\u548cdebug // Reset the status during the push. oldPushContext := s . globalPushContext () if oldPushContext != nil { oldPushContext . OnConfigChange () } // PushContext is reset after a config change. Previous status is // saved. t0 := time . Now () versionLocal := time . Now (). Format ( time . RFC3339 ) + \"/\" + strconv . FormatUint ( versionNum . Inc (), 10 ) // \u5f00\u59cb\u521b\u5efa\u65b0\u7684PushContext\uff0c\u5e76\u4f7f\u7528global PushContext\u8fdb\u884c\u66f4\u65b0\u3002 push , err := s . initPushContext ( req , oldPushContext , versionLocal ) if err != nil { return } initContextTime := time . Since ( t0 ) adsLog . Debugf ( \"InitContext %v for push took %s\" , versionLocal , initContextTime ) versionMutex . Lock () version = versionLocal versionMutex . Unlock () req . Push = push s . AdsPushAll ( versionLocal , req ) } \u901a\u8fc7\u4e0b\u9762\u7684 initPushContext \u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u9996\u5148\u4f1a\u53bb\u521b\u5efaPushContext\uff0c\u7136\u540e\u8c03\u7528 initContext \u8fdb\u884c\u521d\u59cb\u5316\u3002\u6700\u540e\u5c06\u66f4\u65b0\u540e\u7684PushContext\u91cd\u65b0\u8d4b\u503c\u7ed9Global Push Context 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 // initPushContext creates a global push context and stores it on the environment. Note: while this // method is technically thread safe (there are no data races), it should not be called in parallel; // if it is, then we may start two push context creations (say A, and B), but then write them in // reverse order, leaving us with a final version of A, which may be incomplete. func ( s * DiscoveryServer ) initPushContext ( req * model . PushRequest , oldPushContext * model . PushContext , version string ) ( * model . PushContext , error ) { // \u521b\u5efa\u4e00\u4e2a\u65b0\u7684PushContext\uff0c\u7136\u540e\u7528\u8001\u7684PushContext\u6765\u521d\u59cb\u5316\u5b83 push := model . NewPushContext () push . PushVersion = version if err := push . InitContext ( s . Env , oldPushContext , req ); err != nil { adsLog . Errorf ( \"XDS: Failed to update services: %v\" , err ) // We can't push if we can't read the data - stick with previous version. pushContextErrors . Increment () return nil , err } if err := s . UpdateServiceShards ( push ); err != nil { return nil , err } s . updateMutex . Lock () // \u6700\u540e\u66f4\u65b0global push context s . Env . PushContext = push s . updateMutex . Unlock () return push , nil } \u5728 InitContext \u65b9\u6cd5\u5219\u4f1a\u5224\u65ad\u662f\u5426\u662f\u505a\u9996\u6b21\u521d\u59cb\u5316\uff0c\u8fd8\u662f\u8bf4\u4f7f\u7528global PushContext\u8fdb\u884c\u589e\u91cf\u7684\u521d\u59cb\u5316\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 // InitContext will initialize the data structures used for code generation. // This should be called before starting the push, from the thread creating // the push context. func ( ps * PushContext ) InitContext ( env * Environment , oldPushContext * PushContext , pushReq * PushRequest ) error { // Acquire a lock to ensure we don't concurrently initialize the same PushContext. // If this does happen, one thread will block then exit early from initDone=true ps . initializeMutex . Lock () defer ps . initializeMutex . Unlock () if ps . initDone . Load () { return nil } ps . Mesh = env . Mesh () ps . ServiceDiscovery = env . ServiceDiscovery ps . IstioConfigStore = env . IstioConfigStore ps . LedgerVersion = env . Version () // Must be initialized first // as initServiceRegistry/VirtualServices/Destrules // use the default export map ps . initDefaultExportMaps () // create new or incremental update // \u7a7a\u7684Push\u8bf7\u6c42\u3001\u4e0d\u5b58\u5728old push context\u3001\u6216\u8005\u8bf4old push context\u8fd8\u6ca1\u521d\u59cb\u5316\uff0c\u53c8\u6216\u8005push\u8bf7\u6c42\u4e0d\u5305\u542b\u4efb\u4f55\u914d\u7f6e\u8bf7\u6c42 // \u8fd9\u4e9b\u60c5\u51b5\u90fd\u4f1a\u5bfc\u81f4\u5168\u91cf\u7684PushContext\u66f4\u65b0\uff0c\u5426\u5219\u5c31\u4f7f\u7528old push context\u505a\u589e\u91cf\u66f4\u65b0 if pushReq == nil || oldPushContext == nil || ! oldPushContext . initDone . Load () || len ( pushReq . ConfigsUpdated ) == 0 { if err := ps . createNewContext ( env ); err != nil { return err } } else { // \u589e\u91cf\u66f4\u65b0 if err := ps . updateContext ( env , oldPushContext , pushReq ); err != nil { return err } } // TODO: only do this when meshnetworks or gateway service changed ps . initMeshNetworks ( env . Networks ()) ps . initClusterLocalHosts ( env ) ps . initDone . Store ( true ) return nil }","title":"PushContext\u4f55\u65f6\u521b\u5efa\u548c\u521d\u59cb\u5316?"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/pilot/PushContext/#pushcontext_3","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 func ( ps * PushContext ) createNewContext ( env * Environment ) error { if err := ps . initServiceRegistry ( env ); err != nil { return err } if err := ps . initVirtualServices ( env ); err != nil { return err } if err := ps . initDestinationRules ( env ); err != nil { return err } if err := ps . initAuthnPolicies ( env ); err != nil { return err } if err := ps . initAuthorizationPolicies ( env ); err != nil { authzLog . Errorf ( \"failed to initialize authorization policies: %v\" , err ) return err } if err := ps . initEnvoyFilters ( env ); err != nil { return err } if err := ps . initGateways ( env ); err != nil { return err } // Must be initialized in the end if err := ps . initSidecarScopes ( env ); err != nil { return err } return nil }","title":"PushContext\u5982\u4f55\u521d\u59cb\u5316?"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/pilot/concept/","text":"\u57fa\u672c\u6982\u5ff5\u548c\u63a5\u53e3 labels.Instance \u7528\u4e8e\u5b9e\u73b0label\u5339\u914d\u7684\uff0c\u5178\u578b\u7684\u5b9e\u73b0\u573a\u666f\u5728\u4e8e WorkloadSelector \uff0c\u8fd9\u662f\u4e00\u4e2amap\uff0c\u91cc\u9762\u53ef\u4ee5\u586b\u4e00\u4e9bkey\u3001value\uff0c\u7528\u4e8e\u5339\u914d\u7b26\u5408\u6761\u4ef6\u7684\u8282\u70b9\u3002 networking.EnvoyFilter_PatchContext Inbound\u3001Outbound\u3001Sidecar\u3001Gateway\u3001Any\uff0c\u4e5f\u5c31\u662fEnvoyFilter\u751f\u6548\u7684\u8303\u56f4\u3002 WatchedNamespaces \u9ed8\u8ba4pilot\u4ece\u6240\u6709\u7684namespace\u4e2d\u83b7\u53d6\u670d\u52a1\u4fe1\u606f\uff0c\u5982\u679c\u914d\u7f6e\u4e86\u8fd9\u4e2a\u53c2\u6570\u5219\u53ea\u4f1a\u4ece\u6307\u5b9a\u7684namespace\u4e2d\u83b7\u53d6\u670d\u52a1\u4fe1\u606f RootNamespace istio\u914d\u7f6e\u7684admin namespace\uff0c\u653e\u5728\u8fd9\u91cc\u7684\u914d\u7f6e\u5168\u5c40\u751f\u6548 ConfigNamespace Proxy\u6240\u5728\u7684Namespace\uff0c\u7531Proxy\u5e26\u4e0a\u53bb\u7684\u3002 Connection \u4e00\u4e2aClient\u7684\u4fe1\u606f\uff0c\u5305\u542b\u4e86\u8fd9\u4e2aClient\u7684\u5730\u5740\u3001\u6807\u8bc6\u7b26\u3001\u8fde\u63a5\u4e0a\u6765\u7684\u65f6\u95f4\u3001Node\u4fe1\u606f\u3001Blocked\u7684\u8bf7\u6c42\u4fe1\u606f\u7b49 model.PushRequest \u4e00\u4e2aPush\u8bf7\u6c42\uff0c\u5305\u542b\u4e86\u4e00\u6b21Push\u76f8\u5173\u7684\u4fe1\u606f\uff0c\u662f\u5426\u662fFull Push\u3001\u54ea\u4e9b\u914d\u7f6e\u66f4\u65b0\u4e86\uff0c\u4ec0\u4e48\u65f6\u5019\u5f00\u59cb\u7684\uff0c\u89e6\u53d1\u7684\u539f\u56e0\u7b49 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 // PushRequest defines a request to push to proxies // It is used to send updates to the config update debouncer and pass to the PushQueue. type PushRequest struct { // Full determines whether a full push is required or not. If false, an incremental update will be sent. // Incremental pushes: // * Do not recompute the push context // * Do not recompute proxy state (such as ServiceInstances) // * Are not reported in standard metrics such as push time // As a result, configuration updates should never be incremental. Generally, only EDS will set this, but // in the future SDS will as well. Full bool // ConfigsUpdated keeps track of configs that have changed. // This is used as an optimization to avoid unnecessary pushes to proxies that are scoped with a Sidecar. // If this is empty, then all proxies will get an update. // Otherwise only proxies depend on these configs will get an update. // The kind of resources are defined in pkg/config/schemas. ConfigsUpdated map [ ConfigKey ] struct {} // Push stores the push context to use for the update. This may initially be nil, as we will // debounce changes before a PushContext is eventually created. Push * PushContext // Start represents the time a push was started. This represents the time of adding to the PushQueue. // Note that this does not include time spent debouncing. Start time . Time // Reason represents the reason for requesting a push. This should only be a fixed set of values, // to avoid unbounded cardinality in metrics. If this is not set, it may be automatically filled in later. // There should only be multiple reasons if the push request is the result of two distinct triggers, rather than // classifying a single trigger as having multiple reasons. Reason [] TriggerReason } PushContext \u5b58\u50a8Push\u65f6\u4fdd\u5b58\u7684\u76f8\u5173\u7684\u8d44\u6e90\u4fe1\u606f","title":"\u57fa\u672c\u6982\u5ff5\u548c\u63a5\u53e3"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/pilot/concept/#_1","text":"labels.Instance \u7528\u4e8e\u5b9e\u73b0label\u5339\u914d\u7684\uff0c\u5178\u578b\u7684\u5b9e\u73b0\u573a\u666f\u5728\u4e8e WorkloadSelector \uff0c\u8fd9\u662f\u4e00\u4e2amap\uff0c\u91cc\u9762\u53ef\u4ee5\u586b\u4e00\u4e9bkey\u3001value\uff0c\u7528\u4e8e\u5339\u914d\u7b26\u5408\u6761\u4ef6\u7684\u8282\u70b9\u3002 networking.EnvoyFilter_PatchContext Inbound\u3001Outbound\u3001Sidecar\u3001Gateway\u3001Any\uff0c\u4e5f\u5c31\u662fEnvoyFilter\u751f\u6548\u7684\u8303\u56f4\u3002 WatchedNamespaces \u9ed8\u8ba4pilot\u4ece\u6240\u6709\u7684namespace\u4e2d\u83b7\u53d6\u670d\u52a1\u4fe1\u606f\uff0c\u5982\u679c\u914d\u7f6e\u4e86\u8fd9\u4e2a\u53c2\u6570\u5219\u53ea\u4f1a\u4ece\u6307\u5b9a\u7684namespace\u4e2d\u83b7\u53d6\u670d\u52a1\u4fe1\u606f RootNamespace istio\u914d\u7f6e\u7684admin namespace\uff0c\u653e\u5728\u8fd9\u91cc\u7684\u914d\u7f6e\u5168\u5c40\u751f\u6548 ConfigNamespace Proxy\u6240\u5728\u7684Namespace\uff0c\u7531Proxy\u5e26\u4e0a\u53bb\u7684\u3002 Connection \u4e00\u4e2aClient\u7684\u4fe1\u606f\uff0c\u5305\u542b\u4e86\u8fd9\u4e2aClient\u7684\u5730\u5740\u3001\u6807\u8bc6\u7b26\u3001\u8fde\u63a5\u4e0a\u6765\u7684\u65f6\u95f4\u3001Node\u4fe1\u606f\u3001Blocked\u7684\u8bf7\u6c42\u4fe1\u606f\u7b49 model.PushRequest \u4e00\u4e2aPush\u8bf7\u6c42\uff0c\u5305\u542b\u4e86\u4e00\u6b21Push\u76f8\u5173\u7684\u4fe1\u606f\uff0c\u662f\u5426\u662fFull Push\u3001\u54ea\u4e9b\u914d\u7f6e\u66f4\u65b0\u4e86\uff0c\u4ec0\u4e48\u65f6\u5019\u5f00\u59cb\u7684\uff0c\u89e6\u53d1\u7684\u539f\u56e0\u7b49 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 // PushRequest defines a request to push to proxies // It is used to send updates to the config update debouncer and pass to the PushQueue. type PushRequest struct { // Full determines whether a full push is required or not. If false, an incremental update will be sent. // Incremental pushes: // * Do not recompute the push context // * Do not recompute proxy state (such as ServiceInstances) // * Are not reported in standard metrics such as push time // As a result, configuration updates should never be incremental. Generally, only EDS will set this, but // in the future SDS will as well. Full bool // ConfigsUpdated keeps track of configs that have changed. // This is used as an optimization to avoid unnecessary pushes to proxies that are scoped with a Sidecar. // If this is empty, then all proxies will get an update. // Otherwise only proxies depend on these configs will get an update. // The kind of resources are defined in pkg/config/schemas. ConfigsUpdated map [ ConfigKey ] struct {} // Push stores the push context to use for the update. This may initially be nil, as we will // debounce changes before a PushContext is eventually created. Push * PushContext // Start represents the time a push was started. This represents the time of adding to the PushQueue. // Note that this does not include time spent debouncing. Start time . Time // Reason represents the reason for requesting a push. This should only be a fixed set of values, // to avoid unbounded cardinality in metrics. If this is not set, it may be automatically filled in later. // There should only be multiple reasons if the push request is the result of two distinct triggers, rather than // classifying a single trigger as having multiple reasons. Reason [] TriggerReason } PushContext \u5b58\u50a8Push\u65f6\u4fdd\u5b58\u7684\u76f8\u5173\u7684\u8d44\u6e90\u4fe1\u606f","title":"\u57fa\u672c\u6982\u5ff5\u548c\u63a5\u53e3"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/pilot/xds-process/","text":"XDS\u5904\u7406\u6d41\u7a0b\u5206\u6790","title":"XDS\u5904\u7406\u6d41\u7a0b\u5206\u6790"},{"location":"%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/pilot/xds-process/#xds","text":"","title":"XDS\u5904\u7406\u6d41\u7a0b\u5206\u6790"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/basic/","text":"C++\u57fa\u7840 shared_ptr\u5b9e\u73b0copy-on-write read\u7aef\u52a0\u9501copy\uff0c\u8fd4\u56de\u8bbf\u95ee\u62f7\u8d1d\u7684shared_ptr write\u7aef\u52a0\u9501\u5224\u65ad\u662f\u5426\u662funique\uff0c\u5982\u679c\u662funique\u76f4\u63a5\u539f\u5730\u4fee\u6539\uff0c\u5426\u5219\u62f7\u8d1d\u4e00\u4efd\u5e76\u5c06shared_ptr\u6307\u5411\u65b0\u7684\u4f4d\u7f6e\u3002 Dependent base https://gcc.gnu.org/wiki/VerboseDiagnostics#dependent_base this->template template\u662f\u7528\u6765\u6d88\u9664\u6b67\u4e49\u7684. \u89c2\u5bdf\u4e0b\u9762\u7684\u4ee3\u7801: 1 2 3 4 template < class T > int f ( T & x ) { return x . template convert < 3 > ( pi ); } \u5982\u679c\u6ca1\u6709template, \u5219 return x.convert<3>(pi); \u53ef\u80fd\u88ab\u7406\u89e3\u4e3a return ((x.convert) < 3) > (pi) iterator traits 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 // \u8fed\u4ee3\u5668\u7684\u7c7b\u578b namespace std { struct output_iterator_tag {}; struct input_iterator_tag {}; struct forward_iterator_tag : public input_iterator_tag {}; struct bidirectional_iterator_tag : public forward_iterator_tag {}; struct random_access_iterator_tag : public bidirectional_iterator_tag {}; } // \u6240\u6709\u8fed\u4ee3\u5668\u7684\u516c\u5171\u7c7b\u578b\u4fe1\u606f namespace std { template < typename T > struct iterator_traits { typedef typename T :: iterator_category iterator_category ; typedef typename T :: value_type value_type ; typedef typename T :: difference_type difference_type ; typedef typename T :: pointer pointer ; typedef typename T :: reference reference ; }; } std::iterator_traits<T>::value_type val; \u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u6765\u4f7f\u7528\u8fed\u4ee3\u5668\u3002 \u8fed\u4ee3\u5668\u5206\u7c7b\u7684\u6765\u5b9e\u73b0\u4f18\u5316\u7b56\u7565: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 template < typename Iterator > void f ( Iterator beg , Iterator end ) { f ( beg , end , std :: iterator_traits < Iterator >:: iterator_category ()); } // special f for random-access iterators. template < typename RandomIterator > void f ( RandomIterator beg , RandomIterator end , std :: random_access_iterator_tag ) { //... // \u53ef\u4ee5\u968f\u673a\u8bbf\u95ee } // special f for bidirectional terators. template < typename BidirectionalIterator > void f ( BidirectionalIterator beg , BidirectionalIterator end , std :: bidirectional_iterator_tag ) { // ... // \u53ef\u4ee5\u53cc\u5411\u8bbf\u95ee } \u5e95\u5c42\u3001\u9876\u5c42const \u5982\u679cconst\u53f3\u7ed3\u5408\u4fee\u9970\u7684\u4e3a\u7c7b\u578b\u6216\u8005*\uff0c\u90a3\u8fd9\u4e2aconst\u5c31\u662f\u4e00\u4e2a\u5e95\u5c42const \u5982\u679cconst\u53f3\u7ed3\u5408\u4fee\u9970\u7684\u4e3a\u6807\u8bc6\u7b26\uff0c\u90a3\u8fd9\u4e2aconst\u5c31\u662f\u4e00\u4e2a\u9876\u5c42const \u54ea\u4e9b\u662f\u5e95\u5c42const\u54ea\u4e9b\u662f\u9876\u5c42const? int\uff0cdouble\uff0cfloat\u548clong long\u7b49\u57fa\u672c\u5185\u7f6e\u6570\u636e\u7c7b\u578b\u7684const\u90fd\u662f\u9876\u5c42const\u3002 \u5f15\u7528\u7684const\u90fd\u662f\u5e95\u5c42const\u3002 \u6307\u9488\u65e2\u53ef\u4ee5\u662f\u9876\u5c42const\u4e5f\u53ef\u4ee5\u662f\u5e95\u5c42const\uff0c\u4e5f\u53ef\u4ee5\u540c\u65f6\u662f\u4e24\u79cdconst\u3002 1 2 3 int const * const p ; ^ ^ 1 2 \u5e95\u5c42const(\u4e0a\u8ff0\u4ee3\u7801\u4e2d1\u7684\u4f4d\u7f6e)\u4e3b\u8981\u5f71\u54cd\u7684\u662f\u6307\u5411\u7684\u5bf9\u8c61\uff0c\u8868\u793a\u6307\u5411\u7684\u5bf9\u8c61\u4e0d\u80fd\u6539\u53d8\u5176\u5185\u5bb9\uff0c\u4f46\u662f\u53ef\u4ee5\u6539\u53d8p\u672c\u8eab\u7684\u6307\u5411\uff0c\u4f7f\u5b83\u6307\u5411\u53e6\u5916\u4e00\u4e2a\u5bf9\u8c61 \u9876\u5c42const(\u4e0a\u8ff0\u4ee3\u7801\u4e2d2\u7684\u4f4d\u7f6e)\u4e3b\u8981\u5f71\u54cd\u7684\u662f\u5bf9\u8c61\u672c\u8eab\uff0c\u8868\u793a\u5bf9\u8c61p\u672c\u8eab\u65e0\u6cd5\u4fee\u6539\uff0c\u4e5f\u5c31\u662f\u6ca1\u529e\u6cd5\u6307\u5411\u53e6\u5916\u4e00\u4e2a\u5bf9\u8c61 \u5e95\u5c42const\u662f\u4e0d\u53ef\u5ffd\u7565\u7684\u3002 1 2 const char * str = \"996ICU251\" ; char * c = str ; //\u4e0d\u5408\u6cd5\uff01 \u5f53\u6267\u884c\u5bf9\u8c61\u7684\u62f7\u8d1d\u8fc7\u7a0b\u4e2d\uff08\u8d4b\u503c\u64cd\u4f5c\uff0c\u51fd\u6570\u7684\u503c\u4f20\u9012\uff09\u65f6\uff0c\u5982\u679c\u88ab\u62f7\u8d1d\u5bf9\u8c61\u62e5\u6709\u5e95\u5c42const\u8d44\u683c\uff0c\u5219\u62f7\u8d1d\u5bf9\u8c61\u5fc5\u987b\u62e5\u6709\u76f8\u540c\u7684\u5e95\u5c42const\u8d44\u683c\u3002 \u5982\u679c\u62f7\u8d1d\u5bf9\u8c61\u62e5\u6709\u5e95\u5c42const\uff0c\u5219\u65e0\u6240\u8c13\u88ab\u62f7\u8d1d\u5bf9\u8c61\u662f\u5426\u6709const\u3002 \u5bf9\u4e8e\u4e00\u4e2a\u65e2\u662f\u9876\u5c42const\u53c8\u662f\u5e95\u5c42const\u5bf9\u8c61\u6765\u8bf4\uff0c\u65e0\u6240\u8c13\u5b83\u662f\u5426\u4e3a\u9876\u5c42const\uff0c\u53ea\u8981\u5173\u6ce8\u5b83\u7684\u5e95\u5c42const\u5c31\u884c\u4e86 Literal Type C++ core language\u5bf9\u5176\u8fdb\u884c\u4e86\u5b9a\u4e49\uff0c\u4e00\u4e2aLiteralType\u7c7b\u578b\u6ee1\u8db3\u4e0b\u9762\u7684\u8981\u6c42: \u53ef\u4ee5\u5e26\u6709cv\u9650\u5236\u7b26\u7684void \u57fa\u672c\u7c7b\u578b(scalar type) \u5f15\u7528\u7c7b\u578b lister type\u7684\u6570\u7ec4 \u53ef\u4ee5\u5e26\u6709cv\u9650\u5236\u7b26\u7684class\u7c7b\u578b\uff0c\u4f46\u662f\u9700\u8981\u540c\u65f6\u6ee1\u8db3\u4e0b\u9762\u9700\u6c42: \u6709trivial destructor \u4e0b\u9762\u4efb\u4f55\u4e00\u4e2a\u9700\u6c42 Aggregate Type \u7c7b\u578b\u4e2d\u81f3\u5c11\u6709\u4e00\u4e2aconstexpr\u6784\u9020\u51fd\u6570\uff0c\u5e76\u4e14\u4e0d\u662fcopy\u6216\u8005move\u6784\u9020 \u4e00\u4e2aclosure type \u5982\u679c\u662funions\u7c7b\u578b\uff0c\u90a3\u4e48\u81f3\u5c11\u6709\u4e00\u4e2a\u975estatic\u7684\u6570\u636e\u6210\u5458\u662f non-volatile literal type \u5982\u679c\u4e0d\u662funions\u7c7b\u578b\uff0c\u90a3\u4e48\u6240\u6709\u7684\u975estatic\u6570\u636e\u6210\u5458\uff0c\u4ee5\u53ca\u57fa\u7c7b\u90fd\u9700\u8981\u662f non-volatile literal type \u6240\u6709\u7684\u975estatic\u6570\u636e\u6210\u5458\uff0c\u4ee5\u53ca\u57fa\u7c7b\u90fd\u9700\u8981\u662f non-volatile literal type Only literal types may be used as parameters to or returned from constexpr functions. Only literal classes may have constexpr member functions. \u53ea\u6709listeral type\u624d\u53ef\u4ee5\u4f5c\u4e3aconstexpr\u51fd\u6570\u7684\u53c2\u6570\u548c\u8fd4\u56de\u503c\u3002\u53ea\u6709literal type\u7684\u7c7b\u624d\u53ef\u80fd\u6709constexpr\u6210\u5458\u51fd\u6570 Aggregate Type static and thread local Initialization \u8fd9\u4e24\u7c7b\u53d8\u91cf\u88ab\u79f0\u4e3aNon-local variables\uff0cstatic\u53d8\u91cf\u4f1a\u5728main\u51fd\u6570\u542f\u52a8\u4e4b\u524d\u8fdb\u884c\u521d\u59cb\u5316(\u9664\u975e\u4e3b\u52a8deferred)\uff0c\u6240\u6709\u7684thread_local \u53d8\u91cf\u5219\u4f1a\u5728\u7ebf\u7a0b\u8fd0\u884c\u4e4b\u524d\u8fdb\u884c\u521d\u59cb\u5316\u3002 \u5728\u51fd\u6570\u5185\u58f0\u660e\u7684static\u53d8\u91cf\u5c5e\u4e8e local static \u521d\u59cb\u5316\u53c8\u5206\u4e3a\u4e24\u79cd: \u9759\u6001\u521d\u59cb\u5316 Constant initialization \u7406\u8bba\u4e0a\u5e94\u8be5\u5728\u7f16\u8bd1\u671f\u5b8c\u6210\uff0c\u9884\u5148\u8ba1\u7b97\u597d\u503c\uff0c\u5373\u4f7f\u7f16\u8bd1\u5668\u4e0d\u8fd9\u6837\u505a\uff0c\u4e5f\u8981\u4fdd\u8bc1\u8fd9\u7c7b\u521d\u59cb\u5316\u5728\u52a8\u6001\u521d\u59cb\u5316\u4e4b\u524d\u5148\u5b8c\u6210 Zero initialization \u6ca1\u6709\u63d0\u4f9b\u4efb\u4f55\u521d\u59cb\u5316\u503c\u7684\uff0cnon-local static\u548cthread local\u53d8\u91cf\u7684\u521d\u59cb\u5316\uff0c\u4f1a\u653e\u5728.bss\u6bb5\uff0c\u4e0d\u5360\u7528\u78c1\u76d8\u7a7a\u95f4\u3002 \u52a8\u6001\u521d\u59cb\u5316 Unordered dynamic initialization static/thread-local\u7c7b\u6a21\u7248\u3001static \u6570\u636e\u6210\u5458\u3001\u53ef\u53d8\u6a21\u7248\u7b49 Partially-ordered dynamic initialization (C++17) Ordered dynamic initialization \u76f8\u540c\u7f16\u8bd1\u5355\u5143non-local variables\u662f\u987a\u5e8f\u7684\u3002 constant initialization 1 2 static T & ref = constexpr; static T object = constexpr; zero initialization 1 2 3 4 5 static T object ; CharT array [ n ] = \"\"; T () ; T t = {} ; T {} ; std::move_iterator 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 #include <iostream> #include <algorithm> #include <vector> #include <iterator> #include <numeric> #include <string> int main () { std :: vector < std :: string > v { \"this\" , \"is\" , \"an\" , \"example\" }; std :: cout << \"Old contents of the vector: \" ; for ( auto & s : v ) std :: cout << '\"' << s << \" \\\" \" ; typedef std :: vector < std :: string >:: iterator iter_t ; std :: string concat = std :: accumulate ( std :: move_iterator < iter_t > ( v . begin ()), std :: move_iterator < iter_t > ( v . end ()), std :: string ()); // Can be simplified with std::make_move_iterator std :: cout << \" \\n Concatenated as string: \" << concat << '\\n' << \"New contents of the vector: \" ; for ( auto & s : v ) std :: cout << '\"' << s << \" \\\" \" ; std :: cout << '\\n' ; } \u8fd8\u53ef\u4ee5\u501f\u52a9 std::make_move_iterator \uff0c\u53ef\u4ee5\u4e0d\u7528\u663e\u793a\u7ed9\u51faiterator\u7c7b\u578b \u4f7f\u7528duration_cast\u4f7f\u5f97\u65f6\u95f4\u8f6c\u5316\u7684\u4ee3\u7801\u53ef\u8bfb\u6027\u66f4\u9ad8 1 2 3 std :: chrono :: microseconds us = std :: chrono :: duration_cast < std :: chrono :: microseconds > ( d ); timeval tv ; tv . tv_sec = us . count () / 1000000 ; # \u8fd9\u79cd\u64cd\u4f5c\u6613\u8bfb\u6027\u4e0d\u9ad8 \u6362\u6210\u4e0b\u9762\u8fd9\u79cd\u5f62\u5f0f 1 2 3 4 auto secs = std :: chrono :: duration_cast < std :: chrono :: seconds > ( d ); auto usecs = std :: chrono :: duration_cast < std :: chrono :: microseconds > ( d - secs ); tv . tv_secs = secs . count (); tv . tv_usecs = usecs . count (); \u5f15\u7528\u6298\u53e0\u548ccv\u9650\u5236\u7b26 \u5f15\u7528\u6298\u53e0\u89c4\u5219: 1. \u6240\u6709\u53f3\u503c\u5f15\u7528\u6298\u53e0\u5230\u53f3\u503c\u5f15\u7528\u4e0a\u4ecd\u7136\u662f\u4e00\u4e2a\u53f3\u503c\u5f15\u7528 2. \u6240\u6709\u7684\u5176\u4ed6\u5f15\u7528\u7c7b\u578b\u4e4b\u95f4\u7684\u6298\u53e0\u90fd\u5c06\u53d8\u6210\u5de6\u503c\u5f15\u7528 \u4f46\u662f\u5f53\u53d1\u751f\u5f15\u7528\u6298\u53e0\u7684\u65f6\u5019\uff0ccv\u9650\u5236\u7b26\u4f1a\u88ab\u53bb\u6389\uff0c\u4f8b\u5982\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50: 1 2 3 4 5 6 template < typename T > void refFold ( const T & data ) {} int c = 0 ; refFold < int &> ( c ); refFold < int &> ( 0 ); # compile error function And Move Lambda \u5f53\u4e00\u4e2alambda\u51fd\u6570\u4f7f\u7528move\u6355\u83b7\u4e86\u4e00\u4e2a\u53ea\u80fdmove\u7684\u53d8\u91cf\uff0c\u90a3\u4e48\u8fd9\u4e2alambda\u5c06\u65e0\u6cd5\u590d\u5236\u548c\u79fb\u52a8\u7ed9\u4e00\u4e2afunction\uff0c\u9700\u8981\u4f7f\u7528\u6a21\u7248\u6765\u89e3\u51b3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 class HasCallback { public : // \u6539\u6210void setCallback(T&& f)\u5373\u53ef\u89e3\u51b3 void setCallback ( std :: function < void ( void ) >&& f ) { callback = move ( f ); } std :: function < void ( void ) > callback ; }; int main () { auto uniq = make_unique < std :: string > ( \"Blah blah blah\" ); HasCallback hc ; hc . setCallback ( [ uniq = move ( uniq )]( void ) { std :: cout << * uniq << std :: endl ; }); hc . callback (); } \u5f3a\u7c7b\u578b \u53c2\u8003\u6587\u7ae0: 1. https://www.fluentcpp.com/2016/12/05/named-constructors/ 2. https://foonathan.net/blog/2016/10/19/strong-typedefs.html \u8f6c\u53d1\u5f15\u7528 \u6240\u8c13\u8f6c\u53d1\uff0c\u5c31\u662f\u901a\u8fc7\u4e00\u4e2a\u51fd\u6570\u5c06\u53c2\u6570\u7ee7\u7eed\u8f6c\u4ea4\u7ed9\u53e6\u4e00\u4e2a\u51fd\u6570\u8fdb\u884c\u5904\u7406\uff0c\u539f\u53c2\u6570\u53ef\u80fd\u662f\u53f3\u503c\uff0c\u53ef\u80fd\u662f\u5de6\u503c\uff0c\u5982\u679c\u8fd8\u80fd\u7ee7\u7eed\u4fdd\u6301\u53c2\u6570\u7684\u539f\u6709\u7279\u5f81\uff0c\u90a3\u4e48\u5b83\u5c31\u662f\u5b8c\u7f8e\u7684\u3002 \u4ec0\u4e48\u662f\u539f\u6709\u7279\u5f81\u5462? C++\u4e3b\u8981\u6709\u4e24\u7c7b\uff0c\u4e00\u7c7b\u5c31\u662fCV\u9650\u5236\u7b26\u53f7(const/non const)\uff0c\u53e6\u5916\u4e00\u7c7b\u5c31\u662f\u5de6\u503c/\u53f3\u503c\uff0c\u5b8c\u7f8e\u8f6c\u53d1\u6307\u7684\u5c31\u662f\u5728\u53c2\u6570\u4f20\u9012\u8fc7\u7a0b\u4e2d\uff0c\u8fd9\u4e24\u7ec4\u5c5e\u6027\u4e0d\u53d8\u3002 \u8bf4\u5230\u8f6c\u53d1\u5f15\u7528\uff0c\u6709\u4e24\u4e2a\u672f\u8bed\u6765\u8868\u793a\uff0c\u7b2c\u4e00\u4e2a\u662fforwarding reference\uff0c\u53e6\u5916\u4e00\u4e2a\u5219\u662funiveral refernence\uff0c\u9700\u8981\u914d\u5408\u6a21\u7248\u4e00\u8d77\u624d\u80fd\u88ab\u79f0\u4e4b\u4e3a\u8f6c\u53d1\u5f15\u7528\uff0c\u5176\u5f62\u5f0f\u5982\u4e0b: 1 2 3 4 5 6 7 8 9 template <typename T> void f(T &&t) { g(std::forward<T>(t)); } template <typename... Args> void f(Args&&... args) { g(std::forward<Args>(args)...); } \u5176\u4ed6\u4efb\u4f55\u5f62\u5f0f\u90fd\u4e0d\u80fd\u79f0\u4e4b\u4e3a\u8f6c\u53d1\u5f15\u7528\uff0c\u5373\u4f7f\u53ea\u662f\u6dfb\u52a0\u4e86\u4e00\u4e2aCV\u9650\u5236\u7b26\u3002 \u51fd\u6570\u6a21\u7248\u65e0\u6cd5\u504f\u7279\u5316\uff0c\u53ea\u80fd\u5168\u7279\u5316 extern template \u6a21\u7248\u6a21\u7248\u53c2\u6570 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #include <vector> #include <iostream> template < class T , template < class ... > class C , class U > C < T > cast_all ( const C < U > & c ) { C < T > result ( c . begin (), c . end ()); return result ; } int main () { std :: vector < float > vf = { 1.2 , 2.6 , 3.78 }; // \u4f20\u5165\u4e00\u4e2a\u6a21\u7248\u7c7b\u578b\uff0c\u81ea\u52a8\u63a8\u5bfc\u51fa\u6a21\u7248\u7684\u7c7b\u578b\u3002 auto vi = cast_all < int > ( vf ); for ( auto && i : vi ) { std :: cout << i << std :: endl ; } return 0 ; } \u53ef\u53d8\u53c2\u6570\u6a21\u7248 Start with the general (empty) definition, which also serves as the base-case for recrusion termination in the later specialisation: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 template < typename ... T > struct DataStructure {}; template < typename T , typename ... Reset > struct DataStructure < T , Reset ... > { DataStructure ( const T & first , const Reset & ... reset ) : first ( first ) , reset ( reset ...) {} T first ; DataStructure < Reset ... > reset ; }; // \u89e3\u5f00\u7684\u8fc7\u7a0b\u5927\u81f4\u5982\u4e0b: DataStructure < int , float > -> int first -> DataStructure < float > rest -> float first -> DataStructure <> rest -> ( empty ) \u5bf9\u4e8e\u5982\u4e0b\u8fd9\u6837\u7684\u6a21\u7248\uff0c\u60f3\u8981\u83b7\u53d6\u7b2c\u4e09\u4e2a\u5143\u7d20\u5219\u901a\u8fc7 data . reset . reset . first\u6765\u83b7\u53d6 DataStructure < int , float , std :: string > \u4e3a\u4e86\u7b80\u5316\u4e0a\u8ff0\u7684\u83b7\u53d6\u8fc7\u7a0b\uff0c\u53ef\u4ee5\u5199\u4e00\u4e9b helper\u51fd\u6570\u6765\u8f85\u52a9\u5b8c\u6210 template < typename T , typename ... Rest > struct DataStructure < T , Rest ... > { ... template < size_t idx > auto get () { return GetHelper < idx , DataStructure < T , Rest ... >>:: get ( * this ); } ... }; template < typename T , typename ... Rest > struct GetHelper < 0 , DataStructure < T , Rest ... >> { static T get ( DataStructure < T , Rest ... >& data ) { return data . first ; } }; template < size_t idx , typename T , typename ... Rest > struct GetHelper < idx , DataStructure < T , Rest ... >> { static auto get ( DataStructure < T , Rest ... >& data ) { return GetHelper < idx -1 , DataStructure < Rest ... >>:: get ( data . rest ); } }; C++17\u4e2d\uff0c\u53ef\u4ee5\u7b80\u5316\u53ef\u53d8\u6a21\u7248\u53c2\u6570\u5c55\u5f00\u7684\u95ee\u9898 1 2 3 4 5 6 7 8 9 10 11 12 template < typename ... Ts > void print_all ( std :: ostream & os , Ts const & ... args ) { (( os << args ), ...); } template < typename T , class ... Ts > void print_all ( std :: ostream & os , T const & first , Ts const & ... rest ) { os << first ; if constexpr ( sizeof ...( rest ) > 0 ) { print_all ( os , rest ...); } } Ref: code/variadic_template/variadic.cc Iterators \u901a\u8fc7rbegin\u3001rend\u8fd4\u56de\u7684\u662f\u53cd\u5411\u8fed\u4ee3\u5668reverse_iterator\uff0c\u901a\u8fc7\u5176base\u65b9\u6cd5\u53ef\u4ee5\u8f6c\u6362\u4e3a\u6b63\u5411\u8fed\u4ee3\u5668 1 2 3 std :: vector < int >:: reverse_iterator r = v . rbegin (); std :: vector < int >:: iterator i = r . base (); assert ( &* r == &* ( i - 1 )); std::istream_iterator \u8f93\u5165\u8fed\u4ee3\u5668 std::ostream_iterator \u8f93\u51fa\u8fed\u4ee3\u5668 1 2 3 4 5 6 7 8 9 10 11 // \u4f1a\u5ffd\u7565\u7a7a\u767d\u5b57\u7b26 std :: istringstream istr ( \"1 \\t 2 3 4\" ); std :: vector < int > v ; std :: copy ( std :: istream_iterator < int > ( istr ), std :: istream_iterator < int > (), std :: back_inserter ( v )); std :: copy ( v . begin (), v . end (), std :: ostream_iterator < int > ( std :: cout , \" -- \" )); \u81ea\u5b9a\u4e49\u8fed\u4ee3\u5668 type traits std::conditional \u7c7b\u4f3c\u4e8e\u4e09\u76ee\u8fd0\u7b97\u7b26\uff0c\u6839\u636e\u7f16\u8bd1\u671f\u6761\u4ef6\u6765\u9009\u62e9 1 2 3 4 template < typename T > struct ValueOfPointer { typename std :: conditional < ( sizeof ( T ) > sizeof ( void * ), T * , T >:: type vop ; } std::common_type \u83b7\u53d6\u591a\u4e2a\u7c7b\u578b\u4e4b\u95f4\u90fd\u53ef\u4ee5\u9690\u5f0f\u8f6c\u6362\u5230\u7684\u5171\u540c\u7c7b\u578b 1 2 3 4 5 // \u901a\u8fc7std::common_type\u83b7\u53d6T1\u548cT2\u7684\u5171\u540c\u7c7b\u578b\u4f5c\u4e3a\u8fd4\u56de\u503c\u7684\u7c7b\u578b template < typename T1 , typename T2 > auto min ( const T1 & a , const T2 & b ) -> typename std :: common_type < const T1 & , const T2 &>:: type { return a < b ? a : b ; } std::declval \u4e0d\u8bba\u7c7b\u578b\u7684\u6784\u9020\u51fd\u6570\u5982\u4f55\u90fd\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2atraits\u83b7\u53d6\u5230\u8fd9\u4e2a\u7c7b\u578b\u7684\u4e00\u4e2a\u5bf9\u8c61\u7684\u5f15\u7528\u5b9e\u4f8b\uff0c\u5e38\u548c decltype \u7ed3\u5408\u4f7f\u7528 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #include <utility> #include <iostream> struct Default { int foo () const { return 1 ; } }; struct NonDefault { NonDefault ( const NonDefault & ) { } int foo () const { return 1 ; } }; int main () { decltype ( Default (). foo ()) n1 = 1 ; // type of n1 is int // decltype(NonDefault().foo()) n2 = n1; // error: no default constructor decltype ( std :: declval < NonDefault > (). foo ()) n2 = n1 ; // type of n2 is int std :: cout << \"n1 = \" << n1 << '\\n' << \"n2 = \" << n2 << '\\n' ; } std::iterator_traits \u83b7\u53d6\u8fed\u4ee3\u5668\u7684\u5206\u7c7b\uff0c\u53ef\u4ee5\u77e5\u9053\u8fd9\u4e2a\u8fed\u4ee3\u5668\u7684\u503c\u7c7b\u578b\u3001\u662f\u54ea\u4e2a\u7c7b\u522b\u7b49\u4fe1\u606f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 template < typename BidirIt > void test ( BidirIt a , std :: bidirectional_iterator_tag ) { std :: cout << \"bidirectional_iterator_tag is used\" << std :: endl ; } template < typename ForwIt > void test ( ForwIt a , std :: forward_iterator_tag ) { std :: cout << \"Forward iterator is used\" << std :: endl ; } template < typename Iter > void test ( Iter a ) { test ( a , std :: iterator_traits < Iter >:: iterator_category ()); } \u5728\u6790\u6784\u51fd\u6570\u4e2d\u8c03\u7528const\u6210\u5458\u51fd\u6570 const and volatile semantics (7.1.6.1) are not applied on an object under destruction. They stop being in effect when the destructor for the most derived object (1.8) starts. 1 2 3 4 5 6 7 8 9 class Stuff { public: // const\u3001volatile\u8bed\u4e49\u5728\u6790\u6784\u7684\u65f6\u5019\u662f\u65e0\u7528\u7684\uff0c\u6240\u4ee5\u8fd9\u91cc\u8c03\u7528\u7684foo()\u603b\u662f non-const\u7684\u3002 ~Stuff() { foo(); } void foo() const { cout << \"const foo\" << endl; } void foo() { cout << \"non-const foo\" << endl; } }; Ref: https://stackoverflow.com/questions/53840945/figuring-out-the-constness-of-an-object-within-its-destructor constexpr \u548c static_assert 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #include <iostream> #include <type_traits> template<class T> struct dependent_false : std::false_type {}; template <typename T> void f() { if constexpr (std::is_arithmetic<T>::value) { } else { // \u8fd9\u91cc\u4e0d\u80fd\u76f4\u63a5 static_assert(false, \"Must be aruthmetic\"); static_assert(dependent_false<T>::value, \"Must be arithmetic\"); // ok } } int main() { f<int*>(); } Ref: https://en.cppreference.com/w/cpp/language/if#Constexpr_If Curiously Recurring Template Pattern (CRTP) \u9012\u5f52\u7684\u5947\u5f02\u6a21\u7248\uff0c\u6709\u4e24\u4e2a\u7279\u70b9: 1. \u4ece\u6a21\u7248\u7c7b\u7ee7\u627f 2. \u4f7f\u7528\u6d3e\u751f\u7c7b\u81ea\u5df1\u4f5c\u4e3a\u57fa\u7c7b\u7684\u6a21\u7248\u53c2\u6570 1 2 3 4 template < typename T > class Base {}; class Dervived : public Base < Dervived > {}; \u8fd9\u6837\u505a\u7684\u76ee\u7684\u5c31\u662f\u4e3a\u4e86\u80fd\u5728\u57fa\u7c7b\u4e2d\u4f7f\u7528\u6d3e\u751f\u7c7b\uff0c\u8fd9\u6837\u57fa\u7c7b\u5c31\u53ef\u4ee5\u901a\u8fc7 static_cast \u6765\u4f7f\u7528\u6d3e\u751f\u7c7b\u3002 1 2 3 4 5 6 7 template < typename T > class Base { public : void doSomething () { T & derived = static_cast < T &> ( * this ); } }; \u4f46\u662f\u8fd9\u5b58\u5728\u4e00\u4e2a\u95ee\u9898\uff0c\u5982\u679c\u57fa\u7c7b\u6a21\u7248\u53c2\u6570\u5f04\u9519\u4e86\u600e\u4e48\u529e?\uff0c\u4f8b\u5982\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50: 1 2 class Derived1 : public Base < Derived1 > {}; class Derived2 : public Base < Derived1 > {}; // bug in this line of code Marek Kurdej \u63d0\u51fa\u4e86\u4e00\u4e2a\u89e3\u51b3\u65b9\u6848\uff0c\u5728\u57fa\u7c7b\u4e2d\u5c06\u5bf9\u5e94\u7684\u6d3e\u751f\u7c7b\u8bbe\u7f6e\u4e3afriend; 1 2 3 4 5 6 7 template < typename T > class Base { public : private : Base (){}; friend T ; }; \u8fd9\u6837\u7684\u5316\u5982\u679c\u6a21\u7248\u7c7b\u7684\u53c2\u6570\u662f\u9519\u8bef\u7684\u5c31\u4f1a\u5bfc\u81f4\u57fa\u7c7b\u6784\u9020\u5931\u8d25\uff0c\u56e0\u4e3a\u57fa\u7c7b\u7684\u6784\u9020\u51fd\u6570\u662f\u79c1\u6709\u7684\uff0c\u53ea\u6709\u5176\u53cb\u5143\u51fd\u6570\u53ef\u4ee5\u6d3e\u751f\u81ea\u57fa\u7c7b CRTP\u7684\u7528\u5904\u5f88\u5927\uff0c\u8fd9\u91cc\u5217\u4e3e\u4e24\u4e2a\u573a\u666f: \u7ed9\u6d3e\u751f\u7c7b\u6dfb\u52a0\u529f\u80fd 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 template < typename T > struct AddOperator { T operator + ( const T & t ) const { return T ( t . value () + value ()); } int value () const { return static_cast < const T *> ( this ) -> value (); } }; class test : public AddOperator < test > { public : test ( int value ) : value_ ( value ) {} int value () const { return value_ ; } private : int value_ ; }; int main () { test t1 ( 11 ), t2 ( 20 ); std :: cout << ( t1 + t2 ). value () << std :: endl ; return 0 ; } \u9759\u6001\u591a\u6001 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 template < typename T > class Amount { public : double getValue () const { return static_cast < T const &> ( * this ). getValue (); } }; class Constant42 : public Amount < Constant42 > { public : double getValue () const { return 42 ; } }; class Variable : public Amount < Variable > { public : explicit Variable ( int value ) : value_ ( value ) {} double getValue () const { return value_ ; } private : int value_ ; }; template < typename T > void print ( Amount < T > const & amount ) { std :: cout << amount . getValue () << \" \\n \" ; } Constant42 c42 ; print ( c42 ); Variable v ( 43 ); print ( v ); \u4e0a\u9762\u7684\u4ee3\u7801\u5728\u57fa\u7c7b\u4e2d\u8c03\u7528\u6d3e\u751f\u7c7b\u7684\u7279\u5b9a\u65b9\u6cd5( getValue )\uff0c\u6240\u6709\u7ee7\u627f\u81ea\u8fd9\u4e2a\u57fa\u7c7b\u7684\u6d3e\u751f\u7c7b\u90fd\u5305\u542b\u4e86\u8fd9\u4e2a\u65b9\u6cd5\u3002 \u4f46\u662f\u8fd9\u4e9b\u6d3e\u751f\u7c7b\u7684\u7236\u7c7b\u4e0d\u76f8\u540c\uff0c\u4e0d\u80fd\u50cf\u6b63\u5e38\u7684\u591a\u53f0\u65b9\u5f0f(\u57fa\u7c7b\u6307\u9488\u6307\u5411\u6d3e\u751f\u7c7b)\u6765\u8c03\u7528\uff0c\u4f46\u662f\u5b83\u4eec\u7684\u57fa\u7c7b\u90fd\u662f Amount<T> \uff0c \u8fd9\u6837\u5c31\u53ef\u4ee5\u901a\u8fc7\u6a21\u7248\u7684\u65b9\u5f0f\u6765\u8c03\u7528\u8fd9\u4e9b\u6d3e\u751f\u7c7b\u3002\u4e0a\u9762\u7684print\u51fd\u6570\u6a21\u7248\u5c31\u662f\u4e00\u4e2a\u5178\u578b\u7684\u4f8b\u5b50\u3002 \u4ed4\u7ec6\u89c2\u5bdfAmount\u6a21\u7248\u7c7b\u53ef\u4ee5\u53d1\u73b0\u6709\u4e00\u4e2a\u5171\u540c\u70b9\u5c31\u662f\u4f1a\u901a\u8fc7static_cast\u6765\u5c06\u57fa\u7c7b\u8f6c\u5316\u4e3a\u6d3e\u751f\u7c7b\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u62bd\u79bb\u6210\u4e00\u4e2a\u516c\u5171\u6a21\u5757\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 template < typename T > struct crtp { T & underlying () { return static_cast < T &> ( * this ); } T const & underlying () const { return static_cast < T const &> ( * this ); } }; template < typename T > class Amount : public crtp < T > { double getValue () const { return this -> underlaying (). getValue (); } } \u4f46\u662f\u4e0a\u9762\u4f1a\u9047\u5230\u83f1\u5f62\u7ee7\u627f\u7684\u95ee\u9898 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 template < typename T > struct Scale : crtp < T > { void scale ( double multiplicator ) { this -> underlying (). setValue ( this -> underlying (). getValue () * multiplicator ); } }; template < typename T > struct Square : crtp < T > { void square () { this -> underlying (). setValue ( this -> underlying (). getValue () * this -> underlying (). getValue ()); } }; class Sensitivity : public Scale < Sensitivity > , public Square < Sensitivity > { public : double getValue () const { return value_ ; } void setValue ( double value ) { value_ = value ; } private : double value_ ; }; \u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\u6700\u7ec8\u7684\u57fa\u7c7b\u90fd\u662f crtp<Sensitivity> ,\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u53ef\u4ee5\u7ed9crtp\u6dfb\u52a0\u4e00\u4e2a\u989d\u5916\u7684\u6a21\u7248\u53c2\u6570\u6765\u907f\u514d 1 2 3 4 5 6 7 8 9 template < typename T , template < typename > class crtpType > struct crtp { public : T & underlying () { return static_cast < T &> ( * this ); } const T & underlying () const { return static_cast < const T &> ( * this ); } private : crtp () {} friend crtpType < T > ; }; \u59d4\u6258\u6a21\u5f0f(Delegate) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class Consumer { public : class Delegate { public : virtual ~ Delegate () {} virtual void Unregister ( Consumer * consumer ) PURE ; }; Consumer ( Delegate * delegate ); DoUnregister () { if ( delegate_ ) { delegate_ -> Unregister (); } } private : Delegate * delegate_ ; } \u76f8\u5f53\u4e8eConsumer\u5c06\u90e8\u5206\u80fd\u529b\u901a\u8fc7Delegate\u7684\u65b9\u5f0f\u63d0\u4f9b\u51fa\u53bb\uff0c\u8ba9\u522b\u7684\u7ec4\u4ef6\u6765\u5b9e\u73b0\uff0c\u7136\u540e\u81ea\u5df1\u59d4\u6258\u6765\u8c03\u7528\u3002\u8fd9\u4e2a\u5b9e\u73b0\u5b58\u5728\u7684\u95ee\u9898\u5c31\u662f Delagate\u7684\u751f\u547d\u5468\u671f\u5e76\u4e0d\u662f\u7531Consumer\u6765\u4fdd\u8bc1\u7684\uff0c\u5982\u4f55\u786e\u4fdd\u5728\u8c03\u7528\u7684\u65f6\u5019\uff0cDelegate\u662f\u5b58\u6d3b\u7684? Type erasure \u5728\u4e00\u4e9b\u52a8\u6001\u8bed\u8a00\u4e2d\uff0c\u4e00\u4e2a\u53d8\u91cf\u53ef\u4ee5\u662f\u4efb\u610f\u7c7b\u578b\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3aduct type\uff0c \u81ea\u5b9a\u4e49\u8fed\u4ee3\u5668 C++\u4e2d\u5c06\u8fed\u4ee3\u5668\u5206\u4e3a\u516d\u7c7b\uff0c\u5206\u522b\u662f: Input Iterator \u53ea\u80fd\u987a\u5e8f\u626b\u63cf\u4e00\u6b21\uff0c\u5e76\u4e14\u662f\u53ea\u8bfb\u7684 Output Iterator \u53ea\u80fd\u987a\u5e8f\u626b\u63cf\u4e00\u6b21\uff0c\u5e76\u4e14\u4e0d\u80fd\u8bfb\uff0c\u53ea\u80fd\u5199 Forward Iterator \u53ef\u4ee5\u987a\u5e8f\u626b\u63cf\u591a\u6b21\uff0c\u5e76\u4e14\u53ef\u8bfb\u53ef\u5199 Bidirectional Iterator \u53ef\u4ee5\u53cc\u5411\u626b\u63cf\uff0c\u5e76\u4e14\u53ef\u8bfb\u53ef\u5199 Random Access Iterator \u53ef\u4ee5\u53cc\u5411\u626b\u63cf\u3001\u5e76\u4e14\u8fd8\u652f\u6301\u968f\u673a\u8bbf\u95ee\uff0c\u53ef\u8bfb\u53ef\u5199(\u903b\u8f91\u4e0a\u8981\u6c42\u5143\u7d20\u662f\u76f8\u90bb\u7684) Contiguous Iterator \u5177\u5907\u4e0a\u5347\u8fed\u4ee3\u5668\u6240\u6709\u7684\u7279\u70b9\uff0c\u6b64\u5916\u8fd8\u8981\u6c42\u5185\u90e8\u5143\u7d20\u5728\u7269\u7406\u4e0a\u662f\u76f8\u8fde\u7684(\u6bd4\u5982std::array\uff0cstd::deque\u4e0d\u5177\u5907\u8fd9\u4e2a\u7279\u70b9) \u901a\u8fc7\u8fed\u4ee3\u5668\u5206\u7c7b\u53ef\u4ee5\u8f85\u52a9\u7b97\u6cd5\u8fdb\u884c\u6027\u80fd\u4f18\u5316\uff0c\u4ee5\u53ca\u5bf9\u8f93\u5165\u8fdb\u884c\u6821\u9a8c\uff0c\u6bd4\u5982std::fill\u8981\u6c42\u8fed\u4ee3\u5668\u662fForward Iterator\uff0c\u5982\u679c\u8fd9\u4e2a\u65f6\u5019\u8f93\u5165\u7684\u8fed\u4ee3\u5668\u662fInput Iterator/ Output Iterator C++17\u4e4b\u524d\u5b9e\u73b0\u81ea\u5b9a\u4e49\u8fed\u4ee3\u5668\u90fd\u662f\u901a\u8fc7 tag dispatch \u7684\u65b9\u5f0f\u6765\u5b9e\u73b0\uff0cForward Iterator example\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 #include <iterator> // For std::forward_iterator_tag #include <cstddef> // For std::ptrdiff_t class Integers { public : struct Iterator { using iterator_category = std :: forward_iterator_tag ; using difference_type = std :: ptrdiff_t ; using value_type = int ; using pointer = int * ; using reference = int & ; Iterator ( pointer ptr ) : ptr_ ( ptr ) {} reference operator * () { return * ptr_ ; } pointer operator -> () { return ptr_ ; } Iterator & operator ++ () { ptr_ ++ ; return * this ; } Iterator operator ++ ( int ) { Iterator tmp = * this ; ++ ( * this ); return tmp ; } friend bool operator == ( const Iterator & a , const Iterator & b ) { return a . ptr_ == b . ptr_ ; } friend bool operator != ( const Iterator & a , const Iterator & b ) { return a . ptr_ == b . ptr_ ; } Iterator begin () { return Iterator ( & data_ [ 0 ]); } Iterator end () { return Iterator ( & data_ [ 200 ]); } // 200 is out of bounds private : pointer ptr_ ; }; private : int data_ [ 200 ]; }; \u4e00\u4e2a\u5178\u578b\u7684\u8fed\u4ee3\u5668\u9884\u671f\u8981\u6709\u4e0b\u9762\u51e0\u4e2a\u5c5e\u6027: iterator_category \u8fed\u4ee3\u5668\u6240\u5c5e\u4e8e\u7684\u7c7b\u578b\uff0c\u4e0a\u6587\u4e2d\u63d0\u5230\u7684\u516d\u7c7b\u8fed\u4ee3\u5668 difference_type \u7528\u4e8e\u6807\u8bc6\u8fed\u4ee3\u5668\u6b65\u957f\uff0c\u901a\u5e38\u6211\u4eec\u7684\u8fed\u4ee3\u5668\u90fd\u662f\u6307\u9488\uff0c\u56e0\u6b64\u9009\u7528 std::ptrdiff_t \u5c31\u597d\u4e86\u3002 value_type \u8fed\u4ee3\u5668\u8981\u8fed\u4ee3\u7684\u7c7b\u578b\uff0c\u4f8b\u5982\u4e0a\u9762\u7684\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u6211\u4eec\u7684\u7c7b\u578b\u662f int pointer \u5b9a\u4e49\u4e00\u4e2a\u6307\u5411\u8fed\u4ee3\u7c7b\u578b\u7684\u6307\u9488\uff0c\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\u662f int* reference \u5b9a\u4e49\u4e00\u4e2a\u8fed\u4ee3\u7c7b\u578b\u7684\u5f15\u7528\uff0c\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\u662f int& \u8fed\u4ee3\u5668\u672c\u8eab\u5fc5\u987b\u662f\u53ef\u6784\u9020\u3001Copy\u6784\u9020\u3001Copy\u8d4b\u503c\u3001\u6790\u6784\u3001\u548c\u53ef\u4ea4\u6362\u7684\u3002 \u5bf9\u4e8e\u4e00\u4e2aForward Iterator\u6765\u8bf4\uff0c\u6700\u57fa\u672c\u8981\u5b9e\u73b0 *iterator \u3001 iterator->x \u3001 ++iterator \u3001 iterator++ \u3001 iterator_a == iterator_b \u8fd9\u51e0\u7c7b\u64cd\u4f5c Ref: https://www.internalpointers.com/post/writing-custom-iterators-modern-cpp \u4e3a\u4ec0\u4e48\u6a21\u7248\u7684\u58f0\u660e\u548c\u5b9a\u4e49\u8981\u653e\u5728\u4e00\u8d77? \u4e3a\u4ec0\u4e48make_shared\u65e0\u6cd5\u81ea\u5b9a\u4e49\u5220\u9664\u5668 unique_ptr\u4e3a\u4ec0\u4e48\u4e0d\u80fd\u548cshared_ptr\u4e00\u6837\u4e0d\u628a\u5220\u9664\u5668\u4fdd\u5b58\u5728\u6a21\u7248\u53c2\u6570\u4e2d shared_ptr\u81ea\u5b9a\u4e49\u7684\u5220\u9664\u5668\u4fdd\u5b58\u5728\u54ea\uff0c\u4e3a\u4ec0\u4e48\u53ef\u4ee5\u4e0d\u7528\u653e\u5728\u6a21\u7248\u53c2\u6570\u4e2d \u5e38\u7528\u94fe\u63a5 https://godbolt.org/ https://preshing.com/","title":"C++\u57fa\u7840"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/basic/#c","text":"","title":"C++\u57fa\u7840"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/basic/#shared_ptrcopy-on-write","text":"read\u7aef\u52a0\u9501copy\uff0c\u8fd4\u56de\u8bbf\u95ee\u62f7\u8d1d\u7684shared_ptr write\u7aef\u52a0\u9501\u5224\u65ad\u662f\u5426\u662funique\uff0c\u5982\u679c\u662funique\u76f4\u63a5\u539f\u5730\u4fee\u6539\uff0c\u5426\u5219\u62f7\u8d1d\u4e00\u4efd\u5e76\u5c06shared_ptr\u6307\u5411\u65b0\u7684\u4f4d\u7f6e\u3002","title":"shared_ptr\u5b9e\u73b0copy-on-write"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/basic/#dependent-base","text":"https://gcc.gnu.org/wiki/VerboseDiagnostics#dependent_base","title":"Dependent base"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/basic/#this-template","text":"template\u662f\u7528\u6765\u6d88\u9664\u6b67\u4e49\u7684. \u89c2\u5bdf\u4e0b\u9762\u7684\u4ee3\u7801: 1 2 3 4 template < class T > int f ( T & x ) { return x . template convert < 3 > ( pi ); } \u5982\u679c\u6ca1\u6709template, \u5219 return x.convert<3>(pi); \u53ef\u80fd\u88ab\u7406\u89e3\u4e3a return ((x.convert) < 3) > (pi)","title":"this-&gt;template"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/basic/#iterator-traits","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 // \u8fed\u4ee3\u5668\u7684\u7c7b\u578b namespace std { struct output_iterator_tag {}; struct input_iterator_tag {}; struct forward_iterator_tag : public input_iterator_tag {}; struct bidirectional_iterator_tag : public forward_iterator_tag {}; struct random_access_iterator_tag : public bidirectional_iterator_tag {}; } // \u6240\u6709\u8fed\u4ee3\u5668\u7684\u516c\u5171\u7c7b\u578b\u4fe1\u606f namespace std { template < typename T > struct iterator_traits { typedef typename T :: iterator_category iterator_category ; typedef typename T :: value_type value_type ; typedef typename T :: difference_type difference_type ; typedef typename T :: pointer pointer ; typedef typename T :: reference reference ; }; } std::iterator_traits<T>::value_type val; \u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u6765\u4f7f\u7528\u8fed\u4ee3\u5668\u3002 \u8fed\u4ee3\u5668\u5206\u7c7b\u7684\u6765\u5b9e\u73b0\u4f18\u5316\u7b56\u7565: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 template < typename Iterator > void f ( Iterator beg , Iterator end ) { f ( beg , end , std :: iterator_traits < Iterator >:: iterator_category ()); } // special f for random-access iterators. template < typename RandomIterator > void f ( RandomIterator beg , RandomIterator end , std :: random_access_iterator_tag ) { //... // \u53ef\u4ee5\u968f\u673a\u8bbf\u95ee } // special f for bidirectional terators. template < typename BidirectionalIterator > void f ( BidirectionalIterator beg , BidirectionalIterator end , std :: bidirectional_iterator_tag ) { // ... // \u53ef\u4ee5\u53cc\u5411\u8bbf\u95ee }","title":"iterator traits"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/basic/#const","text":"\u5982\u679cconst\u53f3\u7ed3\u5408\u4fee\u9970\u7684\u4e3a\u7c7b\u578b\u6216\u8005*\uff0c\u90a3\u8fd9\u4e2aconst\u5c31\u662f\u4e00\u4e2a\u5e95\u5c42const \u5982\u679cconst\u53f3\u7ed3\u5408\u4fee\u9970\u7684\u4e3a\u6807\u8bc6\u7b26\uff0c\u90a3\u8fd9\u4e2aconst\u5c31\u662f\u4e00\u4e2a\u9876\u5c42const \u54ea\u4e9b\u662f\u5e95\u5c42const\u54ea\u4e9b\u662f\u9876\u5c42const? int\uff0cdouble\uff0cfloat\u548clong long\u7b49\u57fa\u672c\u5185\u7f6e\u6570\u636e\u7c7b\u578b\u7684const\u90fd\u662f\u9876\u5c42const\u3002 \u5f15\u7528\u7684const\u90fd\u662f\u5e95\u5c42const\u3002 \u6307\u9488\u65e2\u53ef\u4ee5\u662f\u9876\u5c42const\u4e5f\u53ef\u4ee5\u662f\u5e95\u5c42const\uff0c\u4e5f\u53ef\u4ee5\u540c\u65f6\u662f\u4e24\u79cdconst\u3002 1 2 3 int const * const p ; ^ ^ 1 2 \u5e95\u5c42const(\u4e0a\u8ff0\u4ee3\u7801\u4e2d1\u7684\u4f4d\u7f6e)\u4e3b\u8981\u5f71\u54cd\u7684\u662f\u6307\u5411\u7684\u5bf9\u8c61\uff0c\u8868\u793a\u6307\u5411\u7684\u5bf9\u8c61\u4e0d\u80fd\u6539\u53d8\u5176\u5185\u5bb9\uff0c\u4f46\u662f\u53ef\u4ee5\u6539\u53d8p\u672c\u8eab\u7684\u6307\u5411\uff0c\u4f7f\u5b83\u6307\u5411\u53e6\u5916\u4e00\u4e2a\u5bf9\u8c61 \u9876\u5c42const(\u4e0a\u8ff0\u4ee3\u7801\u4e2d2\u7684\u4f4d\u7f6e)\u4e3b\u8981\u5f71\u54cd\u7684\u662f\u5bf9\u8c61\u672c\u8eab\uff0c\u8868\u793a\u5bf9\u8c61p\u672c\u8eab\u65e0\u6cd5\u4fee\u6539\uff0c\u4e5f\u5c31\u662f\u6ca1\u529e\u6cd5\u6307\u5411\u53e6\u5916\u4e00\u4e2a\u5bf9\u8c61 \u5e95\u5c42const\u662f\u4e0d\u53ef\u5ffd\u7565\u7684\u3002 1 2 const char * str = \"996ICU251\" ; char * c = str ; //\u4e0d\u5408\u6cd5\uff01 \u5f53\u6267\u884c\u5bf9\u8c61\u7684\u62f7\u8d1d\u8fc7\u7a0b\u4e2d\uff08\u8d4b\u503c\u64cd\u4f5c\uff0c\u51fd\u6570\u7684\u503c\u4f20\u9012\uff09\u65f6\uff0c\u5982\u679c\u88ab\u62f7\u8d1d\u5bf9\u8c61\u62e5\u6709\u5e95\u5c42const\u8d44\u683c\uff0c\u5219\u62f7\u8d1d\u5bf9\u8c61\u5fc5\u987b\u62e5\u6709\u76f8\u540c\u7684\u5e95\u5c42const\u8d44\u683c\u3002 \u5982\u679c\u62f7\u8d1d\u5bf9\u8c61\u62e5\u6709\u5e95\u5c42const\uff0c\u5219\u65e0\u6240\u8c13\u88ab\u62f7\u8d1d\u5bf9\u8c61\u662f\u5426\u6709const\u3002 \u5bf9\u4e8e\u4e00\u4e2a\u65e2\u662f\u9876\u5c42const\u53c8\u662f\u5e95\u5c42const\u5bf9\u8c61\u6765\u8bf4\uff0c\u65e0\u6240\u8c13\u5b83\u662f\u5426\u4e3a\u9876\u5c42const\uff0c\u53ea\u8981\u5173\u6ce8\u5b83\u7684\u5e95\u5c42const\u5c31\u884c\u4e86","title":"\u5e95\u5c42\u3001\u9876\u5c42const"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/basic/#literal-type","text":"C++ core language\u5bf9\u5176\u8fdb\u884c\u4e86\u5b9a\u4e49\uff0c\u4e00\u4e2aLiteralType\u7c7b\u578b\u6ee1\u8db3\u4e0b\u9762\u7684\u8981\u6c42: \u53ef\u4ee5\u5e26\u6709cv\u9650\u5236\u7b26\u7684void \u57fa\u672c\u7c7b\u578b(scalar type) \u5f15\u7528\u7c7b\u578b lister type\u7684\u6570\u7ec4 \u53ef\u4ee5\u5e26\u6709cv\u9650\u5236\u7b26\u7684class\u7c7b\u578b\uff0c\u4f46\u662f\u9700\u8981\u540c\u65f6\u6ee1\u8db3\u4e0b\u9762\u9700\u6c42: \u6709trivial destructor \u4e0b\u9762\u4efb\u4f55\u4e00\u4e2a\u9700\u6c42 Aggregate Type \u7c7b\u578b\u4e2d\u81f3\u5c11\u6709\u4e00\u4e2aconstexpr\u6784\u9020\u51fd\u6570\uff0c\u5e76\u4e14\u4e0d\u662fcopy\u6216\u8005move\u6784\u9020 \u4e00\u4e2aclosure type \u5982\u679c\u662funions\u7c7b\u578b\uff0c\u90a3\u4e48\u81f3\u5c11\u6709\u4e00\u4e2a\u975estatic\u7684\u6570\u636e\u6210\u5458\u662f non-volatile literal type \u5982\u679c\u4e0d\u662funions\u7c7b\u578b\uff0c\u90a3\u4e48\u6240\u6709\u7684\u975estatic\u6570\u636e\u6210\u5458\uff0c\u4ee5\u53ca\u57fa\u7c7b\u90fd\u9700\u8981\u662f non-volatile literal type \u6240\u6709\u7684\u975estatic\u6570\u636e\u6210\u5458\uff0c\u4ee5\u53ca\u57fa\u7c7b\u90fd\u9700\u8981\u662f non-volatile literal type Only literal types may be used as parameters to or returned from constexpr functions. Only literal classes may have constexpr member functions. \u53ea\u6709listeral type\u624d\u53ef\u4ee5\u4f5c\u4e3aconstexpr\u51fd\u6570\u7684\u53c2\u6570\u548c\u8fd4\u56de\u503c\u3002\u53ea\u6709literal type\u7684\u7c7b\u624d\u53ef\u80fd\u6709constexpr\u6210\u5458\u51fd\u6570","title":"Literal Type"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/basic/#aggregate-type","text":"","title":"Aggregate Type"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/basic/#static-and-thread-local-initialization","text":"\u8fd9\u4e24\u7c7b\u53d8\u91cf\u88ab\u79f0\u4e3aNon-local variables\uff0cstatic\u53d8\u91cf\u4f1a\u5728main\u51fd\u6570\u542f\u52a8\u4e4b\u524d\u8fdb\u884c\u521d\u59cb\u5316(\u9664\u975e\u4e3b\u52a8deferred)\uff0c\u6240\u6709\u7684thread_local \u53d8\u91cf\u5219\u4f1a\u5728\u7ebf\u7a0b\u8fd0\u884c\u4e4b\u524d\u8fdb\u884c\u521d\u59cb\u5316\u3002 \u5728\u51fd\u6570\u5185\u58f0\u660e\u7684static\u53d8\u91cf\u5c5e\u4e8e local static \u521d\u59cb\u5316\u53c8\u5206\u4e3a\u4e24\u79cd: \u9759\u6001\u521d\u59cb\u5316 Constant initialization \u7406\u8bba\u4e0a\u5e94\u8be5\u5728\u7f16\u8bd1\u671f\u5b8c\u6210\uff0c\u9884\u5148\u8ba1\u7b97\u597d\u503c\uff0c\u5373\u4f7f\u7f16\u8bd1\u5668\u4e0d\u8fd9\u6837\u505a\uff0c\u4e5f\u8981\u4fdd\u8bc1\u8fd9\u7c7b\u521d\u59cb\u5316\u5728\u52a8\u6001\u521d\u59cb\u5316\u4e4b\u524d\u5148\u5b8c\u6210 Zero initialization \u6ca1\u6709\u63d0\u4f9b\u4efb\u4f55\u521d\u59cb\u5316\u503c\u7684\uff0cnon-local static\u548cthread local\u53d8\u91cf\u7684\u521d\u59cb\u5316\uff0c\u4f1a\u653e\u5728.bss\u6bb5\uff0c\u4e0d\u5360\u7528\u78c1\u76d8\u7a7a\u95f4\u3002 \u52a8\u6001\u521d\u59cb\u5316 Unordered dynamic initialization static/thread-local\u7c7b\u6a21\u7248\u3001static \u6570\u636e\u6210\u5458\u3001\u53ef\u53d8\u6a21\u7248\u7b49 Partially-ordered dynamic initialization (C++17) Ordered dynamic initialization \u76f8\u540c\u7f16\u8bd1\u5355\u5143non-local variables\u662f\u987a\u5e8f\u7684\u3002 constant initialization 1 2 static T & ref = constexpr; static T object = constexpr; zero initialization 1 2 3 4 5 static T object ; CharT array [ n ] = \"\"; T () ; T t = {} ; T {} ;","title":"static and thread local Initialization"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/basic/#stdmove_iterator","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 #include <iostream> #include <algorithm> #include <vector> #include <iterator> #include <numeric> #include <string> int main () { std :: vector < std :: string > v { \"this\" , \"is\" , \"an\" , \"example\" }; std :: cout << \"Old contents of the vector: \" ; for ( auto & s : v ) std :: cout << '\"' << s << \" \\\" \" ; typedef std :: vector < std :: string >:: iterator iter_t ; std :: string concat = std :: accumulate ( std :: move_iterator < iter_t > ( v . begin ()), std :: move_iterator < iter_t > ( v . end ()), std :: string ()); // Can be simplified with std::make_move_iterator std :: cout << \" \\n Concatenated as string: \" << concat << '\\n' << \"New contents of the vector: \" ; for ( auto & s : v ) std :: cout << '\"' << s << \" \\\" \" ; std :: cout << '\\n' ; } \u8fd8\u53ef\u4ee5\u501f\u52a9 std::make_move_iterator \uff0c\u53ef\u4ee5\u4e0d\u7528\u663e\u793a\u7ed9\u51faiterator\u7c7b\u578b","title":"std::move_iterator"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/basic/#duration_cast","text":"1 2 3 std :: chrono :: microseconds us = std :: chrono :: duration_cast < std :: chrono :: microseconds > ( d ); timeval tv ; tv . tv_sec = us . count () / 1000000 ; # \u8fd9\u79cd\u64cd\u4f5c\u6613\u8bfb\u6027\u4e0d\u9ad8 \u6362\u6210\u4e0b\u9762\u8fd9\u79cd\u5f62\u5f0f 1 2 3 4 auto secs = std :: chrono :: duration_cast < std :: chrono :: seconds > ( d ); auto usecs = std :: chrono :: duration_cast < std :: chrono :: microseconds > ( d - secs ); tv . tv_secs = secs . count (); tv . tv_usecs = usecs . count ();","title":"\u4f7f\u7528duration_cast\u4f7f\u5f97\u65f6\u95f4\u8f6c\u5316\u7684\u4ee3\u7801\u53ef\u8bfb\u6027\u66f4\u9ad8"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/basic/#cv","text":"\u5f15\u7528\u6298\u53e0\u89c4\u5219: 1. \u6240\u6709\u53f3\u503c\u5f15\u7528\u6298\u53e0\u5230\u53f3\u503c\u5f15\u7528\u4e0a\u4ecd\u7136\u662f\u4e00\u4e2a\u53f3\u503c\u5f15\u7528 2. \u6240\u6709\u7684\u5176\u4ed6\u5f15\u7528\u7c7b\u578b\u4e4b\u95f4\u7684\u6298\u53e0\u90fd\u5c06\u53d8\u6210\u5de6\u503c\u5f15\u7528 \u4f46\u662f\u5f53\u53d1\u751f\u5f15\u7528\u6298\u53e0\u7684\u65f6\u5019\uff0ccv\u9650\u5236\u7b26\u4f1a\u88ab\u53bb\u6389\uff0c\u4f8b\u5982\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50: 1 2 3 4 5 6 template < typename T > void refFold ( const T & data ) {} int c = 0 ; refFold < int &> ( c ); refFold < int &> ( 0 ); # compile error","title":"\u5f15\u7528\u6298\u53e0\u548ccv\u9650\u5236\u7b26"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/basic/#function-and-move-lambda","text":"\u5f53\u4e00\u4e2alambda\u51fd\u6570\u4f7f\u7528move\u6355\u83b7\u4e86\u4e00\u4e2a\u53ea\u80fdmove\u7684\u53d8\u91cf\uff0c\u90a3\u4e48\u8fd9\u4e2alambda\u5c06\u65e0\u6cd5\u590d\u5236\u548c\u79fb\u52a8\u7ed9\u4e00\u4e2afunction\uff0c\u9700\u8981\u4f7f\u7528\u6a21\u7248\u6765\u89e3\u51b3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 class HasCallback { public : // \u6539\u6210void setCallback(T&& f)\u5373\u53ef\u89e3\u51b3 void setCallback ( std :: function < void ( void ) >&& f ) { callback = move ( f ); } std :: function < void ( void ) > callback ; }; int main () { auto uniq = make_unique < std :: string > ( \"Blah blah blah\" ); HasCallback hc ; hc . setCallback ( [ uniq = move ( uniq )]( void ) { std :: cout << * uniq << std :: endl ; }); hc . callback (); }","title":"function And Move Lambda"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/basic/#_1","text":"\u53c2\u8003\u6587\u7ae0: 1. https://www.fluentcpp.com/2016/12/05/named-constructors/ 2. https://foonathan.net/blog/2016/10/19/strong-typedefs.html","title":"\u5f3a\u7c7b\u578b"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/basic/#_2","text":"\u6240\u8c13\u8f6c\u53d1\uff0c\u5c31\u662f\u901a\u8fc7\u4e00\u4e2a\u51fd\u6570\u5c06\u53c2\u6570\u7ee7\u7eed\u8f6c\u4ea4\u7ed9\u53e6\u4e00\u4e2a\u51fd\u6570\u8fdb\u884c\u5904\u7406\uff0c\u539f\u53c2\u6570\u53ef\u80fd\u662f\u53f3\u503c\uff0c\u53ef\u80fd\u662f\u5de6\u503c\uff0c\u5982\u679c\u8fd8\u80fd\u7ee7\u7eed\u4fdd\u6301\u53c2\u6570\u7684\u539f\u6709\u7279\u5f81\uff0c\u90a3\u4e48\u5b83\u5c31\u662f\u5b8c\u7f8e\u7684\u3002 \u4ec0\u4e48\u662f\u539f\u6709\u7279\u5f81\u5462? C++\u4e3b\u8981\u6709\u4e24\u7c7b\uff0c\u4e00\u7c7b\u5c31\u662fCV\u9650\u5236\u7b26\u53f7(const/non const)\uff0c\u53e6\u5916\u4e00\u7c7b\u5c31\u662f\u5de6\u503c/\u53f3\u503c\uff0c\u5b8c\u7f8e\u8f6c\u53d1\u6307\u7684\u5c31\u662f\u5728\u53c2\u6570\u4f20\u9012\u8fc7\u7a0b\u4e2d\uff0c\u8fd9\u4e24\u7ec4\u5c5e\u6027\u4e0d\u53d8\u3002 \u8bf4\u5230\u8f6c\u53d1\u5f15\u7528\uff0c\u6709\u4e24\u4e2a\u672f\u8bed\u6765\u8868\u793a\uff0c\u7b2c\u4e00\u4e2a\u662fforwarding reference\uff0c\u53e6\u5916\u4e00\u4e2a\u5219\u662funiveral refernence\uff0c\u9700\u8981\u914d\u5408\u6a21\u7248\u4e00\u8d77\u624d\u80fd\u88ab\u79f0\u4e4b\u4e3a\u8f6c\u53d1\u5f15\u7528\uff0c\u5176\u5f62\u5f0f\u5982\u4e0b: 1 2 3 4 5 6 7 8 9 template <typename T> void f(T &&t) { g(std::forward<T>(t)); } template <typename... Args> void f(Args&&... args) { g(std::forward<Args>(args)...); } \u5176\u4ed6\u4efb\u4f55\u5f62\u5f0f\u90fd\u4e0d\u80fd\u79f0\u4e4b\u4e3a\u8f6c\u53d1\u5f15\u7528\uff0c\u5373\u4f7f\u53ea\u662f\u6dfb\u52a0\u4e86\u4e00\u4e2aCV\u9650\u5236\u7b26\u3002","title":"\u8f6c\u53d1\u5f15\u7528"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/basic/#_3","text":"","title":"\u51fd\u6570\u6a21\u7248\u65e0\u6cd5\u504f\u7279\u5316\uff0c\u53ea\u80fd\u5168\u7279\u5316"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/basic/#extern-template","text":"","title":"extern template"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/basic/#_4","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #include <vector> #include <iostream> template < class T , template < class ... > class C , class U > C < T > cast_all ( const C < U > & c ) { C < T > result ( c . begin (), c . end ()); return result ; } int main () { std :: vector < float > vf = { 1.2 , 2.6 , 3.78 }; // \u4f20\u5165\u4e00\u4e2a\u6a21\u7248\u7c7b\u578b\uff0c\u81ea\u52a8\u63a8\u5bfc\u51fa\u6a21\u7248\u7684\u7c7b\u578b\u3002 auto vi = cast_all < int > ( vf ); for ( auto && i : vi ) { std :: cout << i << std :: endl ; } return 0 ; }","title":"\u6a21\u7248\u6a21\u7248\u53c2\u6570"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/basic/#_5","text":"Start with the general (empty) definition, which also serves as the base-case for recrusion termination in the later specialisation: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 template < typename ... T > struct DataStructure {}; template < typename T , typename ... Reset > struct DataStructure < T , Reset ... > { DataStructure ( const T & first , const Reset & ... reset ) : first ( first ) , reset ( reset ...) {} T first ; DataStructure < Reset ... > reset ; }; // \u89e3\u5f00\u7684\u8fc7\u7a0b\u5927\u81f4\u5982\u4e0b: DataStructure < int , float > -> int first -> DataStructure < float > rest -> float first -> DataStructure <> rest -> ( empty ) \u5bf9\u4e8e\u5982\u4e0b\u8fd9\u6837\u7684\u6a21\u7248\uff0c\u60f3\u8981\u83b7\u53d6\u7b2c\u4e09\u4e2a\u5143\u7d20\u5219\u901a\u8fc7 data . reset . reset . first\u6765\u83b7\u53d6 DataStructure < int , float , std :: string > \u4e3a\u4e86\u7b80\u5316\u4e0a\u8ff0\u7684\u83b7\u53d6\u8fc7\u7a0b\uff0c\u53ef\u4ee5\u5199\u4e00\u4e9b helper\u51fd\u6570\u6765\u8f85\u52a9\u5b8c\u6210 template < typename T , typename ... Rest > struct DataStructure < T , Rest ... > { ... template < size_t idx > auto get () { return GetHelper < idx , DataStructure < T , Rest ... >>:: get ( * this ); } ... }; template < typename T , typename ... Rest > struct GetHelper < 0 , DataStructure < T , Rest ... >> { static T get ( DataStructure < T , Rest ... >& data ) { return data . first ; } }; template < size_t idx , typename T , typename ... Rest > struct GetHelper < idx , DataStructure < T , Rest ... >> { static auto get ( DataStructure < T , Rest ... >& data ) { return GetHelper < idx -1 , DataStructure < Rest ... >>:: get ( data . rest ); } }; C++17\u4e2d\uff0c\u53ef\u4ee5\u7b80\u5316\u53ef\u53d8\u6a21\u7248\u53c2\u6570\u5c55\u5f00\u7684\u95ee\u9898 1 2 3 4 5 6 7 8 9 10 11 12 template < typename ... Ts > void print_all ( std :: ostream & os , Ts const & ... args ) { (( os << args ), ...); } template < typename T , class ... Ts > void print_all ( std :: ostream & os , T const & first , Ts const & ... rest ) { os << first ; if constexpr ( sizeof ...( rest ) > 0 ) { print_all ( os , rest ...); } } Ref: code/variadic_template/variadic.cc","title":"\u53ef\u53d8\u53c2\u6570\u6a21\u7248"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/basic/#iterators","text":"\u901a\u8fc7rbegin\u3001rend\u8fd4\u56de\u7684\u662f\u53cd\u5411\u8fed\u4ee3\u5668reverse_iterator\uff0c\u901a\u8fc7\u5176base\u65b9\u6cd5\u53ef\u4ee5\u8f6c\u6362\u4e3a\u6b63\u5411\u8fed\u4ee3\u5668 1 2 3 std :: vector < int >:: reverse_iterator r = v . rbegin (); std :: vector < int >:: iterator i = r . base (); assert ( &* r == &* ( i - 1 )); std::istream_iterator \u8f93\u5165\u8fed\u4ee3\u5668 std::ostream_iterator \u8f93\u51fa\u8fed\u4ee3\u5668 1 2 3 4 5 6 7 8 9 10 11 // \u4f1a\u5ffd\u7565\u7a7a\u767d\u5b57\u7b26 std :: istringstream istr ( \"1 \\t 2 3 4\" ); std :: vector < int > v ; std :: copy ( std :: istream_iterator < int > ( istr ), std :: istream_iterator < int > (), std :: back_inserter ( v )); std :: copy ( v . begin (), v . end (), std :: ostream_iterator < int > ( std :: cout , \" -- \" )); \u81ea\u5b9a\u4e49\u8fed\u4ee3\u5668","title":"Iterators"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/basic/#type-traits","text":"std::conditional \u7c7b\u4f3c\u4e8e\u4e09\u76ee\u8fd0\u7b97\u7b26\uff0c\u6839\u636e\u7f16\u8bd1\u671f\u6761\u4ef6\u6765\u9009\u62e9 1 2 3 4 template < typename T > struct ValueOfPointer { typename std :: conditional < ( sizeof ( T ) > sizeof ( void * ), T * , T >:: type vop ; } std::common_type \u83b7\u53d6\u591a\u4e2a\u7c7b\u578b\u4e4b\u95f4\u90fd\u53ef\u4ee5\u9690\u5f0f\u8f6c\u6362\u5230\u7684\u5171\u540c\u7c7b\u578b 1 2 3 4 5 // \u901a\u8fc7std::common_type\u83b7\u53d6T1\u548cT2\u7684\u5171\u540c\u7c7b\u578b\u4f5c\u4e3a\u8fd4\u56de\u503c\u7684\u7c7b\u578b template < typename T1 , typename T2 > auto min ( const T1 & a , const T2 & b ) -> typename std :: common_type < const T1 & , const T2 &>:: type { return a < b ? a : b ; } std::declval \u4e0d\u8bba\u7c7b\u578b\u7684\u6784\u9020\u51fd\u6570\u5982\u4f55\u90fd\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2atraits\u83b7\u53d6\u5230\u8fd9\u4e2a\u7c7b\u578b\u7684\u4e00\u4e2a\u5bf9\u8c61\u7684\u5f15\u7528\u5b9e\u4f8b\uff0c\u5e38\u548c decltype \u7ed3\u5408\u4f7f\u7528 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #include <utility> #include <iostream> struct Default { int foo () const { return 1 ; } }; struct NonDefault { NonDefault ( const NonDefault & ) { } int foo () const { return 1 ; } }; int main () { decltype ( Default (). foo ()) n1 = 1 ; // type of n1 is int // decltype(NonDefault().foo()) n2 = n1; // error: no default constructor decltype ( std :: declval < NonDefault > (). foo ()) n2 = n1 ; // type of n2 is int std :: cout << \"n1 = \" << n1 << '\\n' << \"n2 = \" << n2 << '\\n' ; } std::iterator_traits \u83b7\u53d6\u8fed\u4ee3\u5668\u7684\u5206\u7c7b\uff0c\u53ef\u4ee5\u77e5\u9053\u8fd9\u4e2a\u8fed\u4ee3\u5668\u7684\u503c\u7c7b\u578b\u3001\u662f\u54ea\u4e2a\u7c7b\u522b\u7b49\u4fe1\u606f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 template < typename BidirIt > void test ( BidirIt a , std :: bidirectional_iterator_tag ) { std :: cout << \"bidirectional_iterator_tag is used\" << std :: endl ; } template < typename ForwIt > void test ( ForwIt a , std :: forward_iterator_tag ) { std :: cout << \"Forward iterator is used\" << std :: endl ; } template < typename Iter > void test ( Iter a ) { test ( a , std :: iterator_traits < Iter >:: iterator_category ()); }","title":"type traits"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/basic/#const_1","text":"const and volatile semantics (7.1.6.1) are not applied on an object under destruction. They stop being in effect when the destructor for the most derived object (1.8) starts. 1 2 3 4 5 6 7 8 9 class Stuff { public: // const\u3001volatile\u8bed\u4e49\u5728\u6790\u6784\u7684\u65f6\u5019\u662f\u65e0\u7528\u7684\uff0c\u6240\u4ee5\u8fd9\u91cc\u8c03\u7528\u7684foo()\u603b\u662f non-const\u7684\u3002 ~Stuff() { foo(); } void foo() const { cout << \"const foo\" << endl; } void foo() { cout << \"non-const foo\" << endl; } }; Ref: https://stackoverflow.com/questions/53840945/figuring-out-the-constness-of-an-object-within-its-destructor","title":"\u5728\u6790\u6784\u51fd\u6570\u4e2d\u8c03\u7528const\u6210\u5458\u51fd\u6570"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/basic/#constexpr-static_assert","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #include <iostream> #include <type_traits> template<class T> struct dependent_false : std::false_type {}; template <typename T> void f() { if constexpr (std::is_arithmetic<T>::value) { } else { // \u8fd9\u91cc\u4e0d\u80fd\u76f4\u63a5 static_assert(false, \"Must be aruthmetic\"); static_assert(dependent_false<T>::value, \"Must be arithmetic\"); // ok } } int main() { f<int*>(); } Ref: https://en.cppreference.com/w/cpp/language/if#Constexpr_If","title":"constexpr \u548c static_assert"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/basic/#curiously-recurring-template-pattern-crtp","text":"\u9012\u5f52\u7684\u5947\u5f02\u6a21\u7248\uff0c\u6709\u4e24\u4e2a\u7279\u70b9: 1. \u4ece\u6a21\u7248\u7c7b\u7ee7\u627f 2. \u4f7f\u7528\u6d3e\u751f\u7c7b\u81ea\u5df1\u4f5c\u4e3a\u57fa\u7c7b\u7684\u6a21\u7248\u53c2\u6570 1 2 3 4 template < typename T > class Base {}; class Dervived : public Base < Dervived > {}; \u8fd9\u6837\u505a\u7684\u76ee\u7684\u5c31\u662f\u4e3a\u4e86\u80fd\u5728\u57fa\u7c7b\u4e2d\u4f7f\u7528\u6d3e\u751f\u7c7b\uff0c\u8fd9\u6837\u57fa\u7c7b\u5c31\u53ef\u4ee5\u901a\u8fc7 static_cast \u6765\u4f7f\u7528\u6d3e\u751f\u7c7b\u3002 1 2 3 4 5 6 7 template < typename T > class Base { public : void doSomething () { T & derived = static_cast < T &> ( * this ); } }; \u4f46\u662f\u8fd9\u5b58\u5728\u4e00\u4e2a\u95ee\u9898\uff0c\u5982\u679c\u57fa\u7c7b\u6a21\u7248\u53c2\u6570\u5f04\u9519\u4e86\u600e\u4e48\u529e?\uff0c\u4f8b\u5982\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50: 1 2 class Derived1 : public Base < Derived1 > {}; class Derived2 : public Base < Derived1 > {}; // bug in this line of code Marek Kurdej \u63d0\u51fa\u4e86\u4e00\u4e2a\u89e3\u51b3\u65b9\u6848\uff0c\u5728\u57fa\u7c7b\u4e2d\u5c06\u5bf9\u5e94\u7684\u6d3e\u751f\u7c7b\u8bbe\u7f6e\u4e3afriend; 1 2 3 4 5 6 7 template < typename T > class Base { public : private : Base (){}; friend T ; }; \u8fd9\u6837\u7684\u5316\u5982\u679c\u6a21\u7248\u7c7b\u7684\u53c2\u6570\u662f\u9519\u8bef\u7684\u5c31\u4f1a\u5bfc\u81f4\u57fa\u7c7b\u6784\u9020\u5931\u8d25\uff0c\u56e0\u4e3a\u57fa\u7c7b\u7684\u6784\u9020\u51fd\u6570\u662f\u79c1\u6709\u7684\uff0c\u53ea\u6709\u5176\u53cb\u5143\u51fd\u6570\u53ef\u4ee5\u6d3e\u751f\u81ea\u57fa\u7c7b CRTP\u7684\u7528\u5904\u5f88\u5927\uff0c\u8fd9\u91cc\u5217\u4e3e\u4e24\u4e2a\u573a\u666f: \u7ed9\u6d3e\u751f\u7c7b\u6dfb\u52a0\u529f\u80fd 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 template < typename T > struct AddOperator { T operator + ( const T & t ) const { return T ( t . value () + value ()); } int value () const { return static_cast < const T *> ( this ) -> value (); } }; class test : public AddOperator < test > { public : test ( int value ) : value_ ( value ) {} int value () const { return value_ ; } private : int value_ ; }; int main () { test t1 ( 11 ), t2 ( 20 ); std :: cout << ( t1 + t2 ). value () << std :: endl ; return 0 ; } \u9759\u6001\u591a\u6001 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 template < typename T > class Amount { public : double getValue () const { return static_cast < T const &> ( * this ). getValue (); } }; class Constant42 : public Amount < Constant42 > { public : double getValue () const { return 42 ; } }; class Variable : public Amount < Variable > { public : explicit Variable ( int value ) : value_ ( value ) {} double getValue () const { return value_ ; } private : int value_ ; }; template < typename T > void print ( Amount < T > const & amount ) { std :: cout << amount . getValue () << \" \\n \" ; } Constant42 c42 ; print ( c42 ); Variable v ( 43 ); print ( v ); \u4e0a\u9762\u7684\u4ee3\u7801\u5728\u57fa\u7c7b\u4e2d\u8c03\u7528\u6d3e\u751f\u7c7b\u7684\u7279\u5b9a\u65b9\u6cd5( getValue )\uff0c\u6240\u6709\u7ee7\u627f\u81ea\u8fd9\u4e2a\u57fa\u7c7b\u7684\u6d3e\u751f\u7c7b\u90fd\u5305\u542b\u4e86\u8fd9\u4e2a\u65b9\u6cd5\u3002 \u4f46\u662f\u8fd9\u4e9b\u6d3e\u751f\u7c7b\u7684\u7236\u7c7b\u4e0d\u76f8\u540c\uff0c\u4e0d\u80fd\u50cf\u6b63\u5e38\u7684\u591a\u53f0\u65b9\u5f0f(\u57fa\u7c7b\u6307\u9488\u6307\u5411\u6d3e\u751f\u7c7b)\u6765\u8c03\u7528\uff0c\u4f46\u662f\u5b83\u4eec\u7684\u57fa\u7c7b\u90fd\u662f Amount<T> \uff0c \u8fd9\u6837\u5c31\u53ef\u4ee5\u901a\u8fc7\u6a21\u7248\u7684\u65b9\u5f0f\u6765\u8c03\u7528\u8fd9\u4e9b\u6d3e\u751f\u7c7b\u3002\u4e0a\u9762\u7684print\u51fd\u6570\u6a21\u7248\u5c31\u662f\u4e00\u4e2a\u5178\u578b\u7684\u4f8b\u5b50\u3002 \u4ed4\u7ec6\u89c2\u5bdfAmount\u6a21\u7248\u7c7b\u53ef\u4ee5\u53d1\u73b0\u6709\u4e00\u4e2a\u5171\u540c\u70b9\u5c31\u662f\u4f1a\u901a\u8fc7static_cast\u6765\u5c06\u57fa\u7c7b\u8f6c\u5316\u4e3a\u6d3e\u751f\u7c7b\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u62bd\u79bb\u6210\u4e00\u4e2a\u516c\u5171\u6a21\u5757\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 template < typename T > struct crtp { T & underlying () { return static_cast < T &> ( * this ); } T const & underlying () const { return static_cast < T const &> ( * this ); } }; template < typename T > class Amount : public crtp < T > { double getValue () const { return this -> underlaying (). getValue (); } } \u4f46\u662f\u4e0a\u9762\u4f1a\u9047\u5230\u83f1\u5f62\u7ee7\u627f\u7684\u95ee\u9898 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 template < typename T > struct Scale : crtp < T > { void scale ( double multiplicator ) { this -> underlying (). setValue ( this -> underlying (). getValue () * multiplicator ); } }; template < typename T > struct Square : crtp < T > { void square () { this -> underlying (). setValue ( this -> underlying (). getValue () * this -> underlying (). getValue ()); } }; class Sensitivity : public Scale < Sensitivity > , public Square < Sensitivity > { public : double getValue () const { return value_ ; } void setValue ( double value ) { value_ = value ; } private : double value_ ; }; \u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\u6700\u7ec8\u7684\u57fa\u7c7b\u90fd\u662f crtp<Sensitivity> ,\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u53ef\u4ee5\u7ed9crtp\u6dfb\u52a0\u4e00\u4e2a\u989d\u5916\u7684\u6a21\u7248\u53c2\u6570\u6765\u907f\u514d 1 2 3 4 5 6 7 8 9 template < typename T , template < typename > class crtpType > struct crtp { public : T & underlying () { return static_cast < T &> ( * this ); } const T & underlying () const { return static_cast < const T &> ( * this ); } private : crtp () {} friend crtpType < T > ; };","title":"Curiously Recurring Template Pattern (CRTP)"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/basic/#delegate","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class Consumer { public : class Delegate { public : virtual ~ Delegate () {} virtual void Unregister ( Consumer * consumer ) PURE ; }; Consumer ( Delegate * delegate ); DoUnregister () { if ( delegate_ ) { delegate_ -> Unregister (); } } private : Delegate * delegate_ ; } \u76f8\u5f53\u4e8eConsumer\u5c06\u90e8\u5206\u80fd\u529b\u901a\u8fc7Delegate\u7684\u65b9\u5f0f\u63d0\u4f9b\u51fa\u53bb\uff0c\u8ba9\u522b\u7684\u7ec4\u4ef6\u6765\u5b9e\u73b0\uff0c\u7136\u540e\u81ea\u5df1\u59d4\u6258\u6765\u8c03\u7528\u3002\u8fd9\u4e2a\u5b9e\u73b0\u5b58\u5728\u7684\u95ee\u9898\u5c31\u662f Delagate\u7684\u751f\u547d\u5468\u671f\u5e76\u4e0d\u662f\u7531Consumer\u6765\u4fdd\u8bc1\u7684\uff0c\u5982\u4f55\u786e\u4fdd\u5728\u8c03\u7528\u7684\u65f6\u5019\uff0cDelegate\u662f\u5b58\u6d3b\u7684?","title":"\u59d4\u6258\u6a21\u5f0f(Delegate)"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/basic/#type-erasure","text":"\u5728\u4e00\u4e9b\u52a8\u6001\u8bed\u8a00\u4e2d\uff0c\u4e00\u4e2a\u53d8\u91cf\u53ef\u4ee5\u662f\u4efb\u610f\u7c7b\u578b\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3aduct type\uff0c","title":"Type erasure"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/basic/#_6","text":"C++\u4e2d\u5c06\u8fed\u4ee3\u5668\u5206\u4e3a\u516d\u7c7b\uff0c\u5206\u522b\u662f: Input Iterator \u53ea\u80fd\u987a\u5e8f\u626b\u63cf\u4e00\u6b21\uff0c\u5e76\u4e14\u662f\u53ea\u8bfb\u7684 Output Iterator \u53ea\u80fd\u987a\u5e8f\u626b\u63cf\u4e00\u6b21\uff0c\u5e76\u4e14\u4e0d\u80fd\u8bfb\uff0c\u53ea\u80fd\u5199 Forward Iterator \u53ef\u4ee5\u987a\u5e8f\u626b\u63cf\u591a\u6b21\uff0c\u5e76\u4e14\u53ef\u8bfb\u53ef\u5199 Bidirectional Iterator \u53ef\u4ee5\u53cc\u5411\u626b\u63cf\uff0c\u5e76\u4e14\u53ef\u8bfb\u53ef\u5199 Random Access Iterator \u53ef\u4ee5\u53cc\u5411\u626b\u63cf\u3001\u5e76\u4e14\u8fd8\u652f\u6301\u968f\u673a\u8bbf\u95ee\uff0c\u53ef\u8bfb\u53ef\u5199(\u903b\u8f91\u4e0a\u8981\u6c42\u5143\u7d20\u662f\u76f8\u90bb\u7684) Contiguous Iterator \u5177\u5907\u4e0a\u5347\u8fed\u4ee3\u5668\u6240\u6709\u7684\u7279\u70b9\uff0c\u6b64\u5916\u8fd8\u8981\u6c42\u5185\u90e8\u5143\u7d20\u5728\u7269\u7406\u4e0a\u662f\u76f8\u8fde\u7684(\u6bd4\u5982std::array\uff0cstd::deque\u4e0d\u5177\u5907\u8fd9\u4e2a\u7279\u70b9) \u901a\u8fc7\u8fed\u4ee3\u5668\u5206\u7c7b\u53ef\u4ee5\u8f85\u52a9\u7b97\u6cd5\u8fdb\u884c\u6027\u80fd\u4f18\u5316\uff0c\u4ee5\u53ca\u5bf9\u8f93\u5165\u8fdb\u884c\u6821\u9a8c\uff0c\u6bd4\u5982std::fill\u8981\u6c42\u8fed\u4ee3\u5668\u662fForward Iterator\uff0c\u5982\u679c\u8fd9\u4e2a\u65f6\u5019\u8f93\u5165\u7684\u8fed\u4ee3\u5668\u662fInput Iterator/ Output Iterator C++17\u4e4b\u524d\u5b9e\u73b0\u81ea\u5b9a\u4e49\u8fed\u4ee3\u5668\u90fd\u662f\u901a\u8fc7 tag dispatch \u7684\u65b9\u5f0f\u6765\u5b9e\u73b0\uff0cForward Iterator example\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 #include <iterator> // For std::forward_iterator_tag #include <cstddef> // For std::ptrdiff_t class Integers { public : struct Iterator { using iterator_category = std :: forward_iterator_tag ; using difference_type = std :: ptrdiff_t ; using value_type = int ; using pointer = int * ; using reference = int & ; Iterator ( pointer ptr ) : ptr_ ( ptr ) {} reference operator * () { return * ptr_ ; } pointer operator -> () { return ptr_ ; } Iterator & operator ++ () { ptr_ ++ ; return * this ; } Iterator operator ++ ( int ) { Iterator tmp = * this ; ++ ( * this ); return tmp ; } friend bool operator == ( const Iterator & a , const Iterator & b ) { return a . ptr_ == b . ptr_ ; } friend bool operator != ( const Iterator & a , const Iterator & b ) { return a . ptr_ == b . ptr_ ; } Iterator begin () { return Iterator ( & data_ [ 0 ]); } Iterator end () { return Iterator ( & data_ [ 200 ]); } // 200 is out of bounds private : pointer ptr_ ; }; private : int data_ [ 200 ]; }; \u4e00\u4e2a\u5178\u578b\u7684\u8fed\u4ee3\u5668\u9884\u671f\u8981\u6709\u4e0b\u9762\u51e0\u4e2a\u5c5e\u6027: iterator_category \u8fed\u4ee3\u5668\u6240\u5c5e\u4e8e\u7684\u7c7b\u578b\uff0c\u4e0a\u6587\u4e2d\u63d0\u5230\u7684\u516d\u7c7b\u8fed\u4ee3\u5668 difference_type \u7528\u4e8e\u6807\u8bc6\u8fed\u4ee3\u5668\u6b65\u957f\uff0c\u901a\u5e38\u6211\u4eec\u7684\u8fed\u4ee3\u5668\u90fd\u662f\u6307\u9488\uff0c\u56e0\u6b64\u9009\u7528 std::ptrdiff_t \u5c31\u597d\u4e86\u3002 value_type \u8fed\u4ee3\u5668\u8981\u8fed\u4ee3\u7684\u7c7b\u578b\uff0c\u4f8b\u5982\u4e0a\u9762\u7684\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u6211\u4eec\u7684\u7c7b\u578b\u662f int pointer \u5b9a\u4e49\u4e00\u4e2a\u6307\u5411\u8fed\u4ee3\u7c7b\u578b\u7684\u6307\u9488\uff0c\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\u662f int* reference \u5b9a\u4e49\u4e00\u4e2a\u8fed\u4ee3\u7c7b\u578b\u7684\u5f15\u7528\uff0c\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\u662f int& \u8fed\u4ee3\u5668\u672c\u8eab\u5fc5\u987b\u662f\u53ef\u6784\u9020\u3001Copy\u6784\u9020\u3001Copy\u8d4b\u503c\u3001\u6790\u6784\u3001\u548c\u53ef\u4ea4\u6362\u7684\u3002 \u5bf9\u4e8e\u4e00\u4e2aForward Iterator\u6765\u8bf4\uff0c\u6700\u57fa\u672c\u8981\u5b9e\u73b0 *iterator \u3001 iterator->x \u3001 ++iterator \u3001 iterator++ \u3001 iterator_a == iterator_b \u8fd9\u51e0\u7c7b\u64cd\u4f5c Ref: https://www.internalpointers.com/post/writing-custom-iterators-modern-cpp","title":"\u81ea\u5b9a\u4e49\u8fed\u4ee3\u5668"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/basic/#_7","text":"","title":"\u4e3a\u4ec0\u4e48\u6a21\u7248\u7684\u58f0\u660e\u548c\u5b9a\u4e49\u8981\u653e\u5728\u4e00\u8d77?"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/basic/#make_shared","text":"","title":"\u4e3a\u4ec0\u4e48make_shared\u65e0\u6cd5\u81ea\u5b9a\u4e49\u5220\u9664\u5668"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/basic/#unique_ptrshared_ptr","text":"","title":"unique_ptr\u4e3a\u4ec0\u4e48\u4e0d\u80fd\u548cshared_ptr\u4e00\u6837\u4e0d\u628a\u5220\u9664\u5668\u4fdd\u5b58\u5728\u6a21\u7248\u53c2\u6570\u4e2d"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/basic/#shared_ptr","text":"","title":"shared_ptr\u81ea\u5b9a\u4e49\u7684\u5220\u9664\u5668\u4fdd\u5b58\u5728\u54ea\uff0c\u4e3a\u4ec0\u4e48\u53ef\u4ee5\u4e0d\u7528\u653e\u5728\u6a21\u7248\u53c2\u6570\u4e2d"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/basic/#_8","text":"https://godbolt.org/ https://preshing.com/","title":"\u5e38\u7528\u94fe\u63a5"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/cpp17/","text":"C++17 In Details New auto rules for direct-list-initialisation \u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801\u5728C++17\u4e4b\u524d\u4f1a\u88ab\u63a8\u5012\u6210 std::initializer_list<int> \uff0c\u5728C++17\u540e\u4f1a\u88ab\u63a8\u5bfc\u6210int 1 auto x { 1 }; \u4e0a\u9762\u8fd9\u79cd\u4ee3\u7801\u521d\u59cb\u5316\u65b9\u5f0f\u88ab\u79f0\u4e3a\u76f4\u63a5\u521d\u59cb\u5316\uff0c\u5982\u679c\u6539\u6210Copy Initialisation\u7684\u8bdd\u5c31\u4f1a\u88ab\u63a8\u5bfc\u6210 std::initializer_list<int> 1 auto x = { 1 }; \u4e0b\u9762\u662f\u4e00\u4e9b\u7c7b\u578b\u63a8\u5bfc\u7684\u793a\u4f8b: 1 2 3 4 5 auto x1 = { 1 , 2 }; // decltype(x1) is std::initializer_list<int> auto x2 = { 1 , 2.0 }; // error: cannot deduce element type auto x3 { 1 , 2 }; // error: not a single element auto x4 = { 3 }; // decltype(x4) is std::initializer_list<int> auto x5 { 3 }; // decltype(x5) is int \u53ef\u4ee5\u770b\u51fa\u6765\uff0c\u76f4\u63a5\u521d\u59cb\u5316\u7684\u65b9\u5f0f\u662f\u4e0d\u80fd\u88ab\u63a8\u5bfc\u6210 std::initializer_list \u7684\uff0c\u53ea\u80fd\u653e1\u4e2a\u5143\u7d20\u3002 static_assert With no Message C++17\u4e4b\u524dstatic_assert\u662f\u5fc5\u987b\u8981\u5e26\u4e0amessage\u7684\uff0cC++17\u540e\u8fd9\u4e2a\u5df2\u7ecf\u4e0d\u662f\u5fc5\u987b\u7684\u4e86\uff0c\u6a21\u62df\u4e86\u7f16\u8bd1\u65f6\u7684assert\u3002 1 2 static_assert ( std :: is_arithmetic_v < T > , \"T must be arithmetic\" ); static_assert ( std :: is_arithmetic_v < T > ); // no message needed since C++17 Different begin and end Types in Range-Based For Loop C++17\u4e4b\u524d for range \u7684\u5b9e\u73b0\u5927\u81f4\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 { auto && __range = for - range - initializer ; for ( auto __begin = begin - expr , __end = end - expr ; __begin != __end ; ++ __begin ) { for - range - declaration = * __begin ; statement } } \u4e0a\u9762\u7684\u5b9e\u73b0\u8981\u6c42 __begin \u548c __end \u5fc5\u987b\u662f\u76f8\u540c\u7c7b\u578b\u7684\uff0c \u4f46\u662f\u5230\u4e86C++17\u540e\uff0c for range \u7684\u5b9e\u73b0\u5982\u4e0b: 1 2 3 4 5 6 7 8 9 { auto && __range = for - range - initializer ; auto __begin = begin - expr ; auto __end = end - expr ; for ( ; __begin != __end ; ++ __begin ) { for - range - declaration = * __begin ; statement } } \u53ef\u4ee5\u770b\u51fa\u5728C++17\u540e\u5df2\u7ecf\u4e0d\u518d\u8981\u6c42 __begin \u3001 __end \u662f\u76f8\u540c\u7c7b\u578b\u4e86\uff0c\u53ea\u9700\u8981 __begin \u548c __end \u652f\u6301\u6bd4\u8f83\u64cd\u4f5c\u5373\u53ef\u3002 Stricter Expression Evaluation Order 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 #include <iostream> class Query { public : Query & addInt ( int i ) { std :: cout << \"addInt: \" << i << '\\n' ; return * this ; } Query & addFloat ( float f ) { std :: cout << \"addFloat: \" << f << '\\n' ; return * this ; } }; float comuteFloat () { std :: cout << \"computing float... \\n \" ; return 10.1f ; } float computeInt () { std :: cout << \"computing int... \\n \" ; return 8 ; } int main () { Query q ; q . addFloat ( comuteFloat ()). addInt ( computeInt ()); } \u5728C++17\u4e4b\u524d\uff0c\u8f93\u51fa\u7684\u987a\u5e8f\u53ef\u80fd\u5982\u4e0b(\u4ece\u53f3\u5411\u5de6\u5148\u8ba1\u7b97\u53c2\u6570\u7684\u503c\uff0c\u7136\u540e\u518d\u5f00\u59cb\u6267\u884c): 1 2 3 4 computing int ... computing float ... addFloat : 10.1 addInt : 8 \u5728C++17\u540e\uff0c\u8f93\u51fa\u7684\u987a\u5e8f\u53ef\u4ee5\u4fdd\u8bc1\u6309\u7167\u4ee3\u7801\u4e0a\u6765\u987a\u5e8f\u6765\u6267\u884c\u3002 1 2 3 4 computing float ... addFloat : 10.1 computing int ... addInt : 8 C++17 \u4e4b\u524d\u5bf9\u4e8e\u5f62\u5982 A(B(), C()); \u8fd9\u79cd\u5f62\u5f0f\u7684\u8c03\u7528\uff0c\u5bf9\u4e8e B() \u548c C() \u7684\u6267\u884c\u987a\u5e8f\u662f\u4e0d\u786e\u5b9a\u7684\uff0c\u6240\u4ee5\u4e3a\u4e86\u4fdd\u8bc1\u5185\u5b58\u5b89\u5168\uff0c\u624d\u6709\u4e86 std::make_unique \u8fd9\u6837\u7684\u8bed\u6cd5\u7cd6\u3002\u4f8b\u5982\u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801\uff0c\u5982\u679c\u5148\u6267\u884c new T \uff0c\u7136\u540e\u6267\u884c otherFunction \uff0c \u8fd9\u4e2a\u65f6\u5019\u5982\u679c\u629b\u51fa\u5f02\u5e38\u4f1a\u5bfc\u81f4\u5185\u5b58\u6cc4\u6f0f\uff0c\u4f46\u662fC++17\u540e\uff0c\u53ef\u4ee5\u4fdd\u8bc1new T\u6267\u884c\u5b8c\u540e\uff0c\u518d\u6267\u884c unique_ptr<T> \u7684\u6784\u9020\uff0c\u6700\u540e\u624d\u6267\u884c otherFunction \uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u5185\u5b58\u5b89\u5168\u4e86\u3002 1 foo ( unique_ptr < T > ( new T ), otherFunction ()); C++17\u540e\u5bf9\u4e8e\u8868\u8fbe\u5f0f\u7684\u6267\u884c\u987a\u5e8f\u53ef\u4ee5\u8fdb\u884c\u5982\u4e0b\u7684\u4fdd\u969c\u3002 a.b a->b a->*b a(b1, b2, b3) // b1, b2, b3 - in any order 5. b @= a // '@' means any operator a[b] a << b a >> b Guaranteed Copy Elision C++17\u4e4b\u524d\u8981\u6c42\u5b9e\u73b0RVO\u7684\u5bf9\u8c61\u5fc5\u987b\u8981\u6709Copy\u6784\u9020\u6216\u8005\u79fb\u52a8\u6784\u9020\u51fd\u6570\u3002\u4f8b\u5982\u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801\u5c06\u65e0\u6cd5\u8fdb\u884c\u7f16\u8bd1\uff0c\u8fd9\u662f\u56e0\u4e3aC++17\u4e4b\u524d\u53ef\u80fd\u4f1a\u9000\u5316\u6210\u62f7\u8d1d/\u79fb\u52a8\u6784\u9020\uff0c\u6240\u4ee5\u8981\u6c42 \u5b9e\u73b0RVO\u7684\u5bf9\u8c61\u9700\u8981\u5177\u5907\u62f7\u8d1d/\u79fb\u52a8\u6784\u9020\u51fd\u6570\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #include <array> // Chapter Clarification/copy_elision_non_moveable.cpp #include <array> // based on P0135R0 struct NonMoveable { NonMoveable ( int x ) : v ( x ) { } NonMoveable ( const NonMoveable & ) = delete ; NonMoveable ( NonMoveable && ) = delete ; std :: array < int , 1024 > arr ; int v ; }; NonMoveable make ( int val ) { if ( val > 0 ) return NonMoveable ( val ); return NonMoveable ( - val ); } int main () { auto largeNonMoveableObj = make ( 90 ); return largeNonMoveableObj . v ; } \u4e0a\u9762\u7684\u4ee3\u7801\u5728C++17\u4e4b\u524d\u4f1a\u7f16\u8bd1\u5931\u8d25\uff0c\u9519\u8bef\u5982\u4e0b: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 // \u7f16\u8bd1\u9519\u8bef copy_elision_non_moveable . cc : 15 : 10 : error : call to deleted constructor of ' NonMoveable ' return NonMoveable ( val ); ^~~~~~~~~~~~~~~~ copy_elision_non_moveable . cc : 8 : 3 : note : ' NonMoveable ' has been explicitly marked deleted here NonMoveable ( NonMoveable && ) = delete ; ^ copy_elision_non_moveable . cc : 16 : 9 : error : call to deleted constructor of ' NonMoveable ' return NonMoveable ( - val ); ^~~~~~~~~~~~~~~~~ copy_elision_non_moveable . cc : 8 : 3 : note : ' NonMoveable ' has been explicitly marked deleted here NonMoveable ( NonMoveable && ) = delete ; ^ copy_elision_non_moveable . cc : 20 : 8 : error : call to deleted constructor of ' NonMoveable ' auto largeNonMoveableObj = make ( 90 ); ^ ~~~~~~~~ copy_elision_non_moveable . cc : 8 : 3 : note : ' NonMoveable ' has been explicitly marked deleted here NonMoveable ( NonMoveable && ) = delete ; C++17\u540e\u4e0a\u9762\u7684\u4ee3\u7801\u5c31\u53ef\u4ee5\u7f16\u8bd1\u4e86\uff0c\u4f1a\u4fdd\u8bc1\u5f3a\u5236\u6267\u884c\u6267\u884cRVO\u4f18\u5316\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u539f\u5730\u6784\u9020\u3002\u4f46\u662f\u8fd9\u4e00\u5207\u7684\u4fdd\u8bc1\u53ea\u9002\u7528\u4e8eRVO\uff0c\u800c\u4e0d\u662fNRVO\u3002 Updated Value Categories C++98/03\u7684\u65f6\u5019\u5bf9\u4e8e\u503c\u7684\u7c7b\u578b\u5206\u4e3a\u4e24\u7c7b: lvaluue rvalue C++11\u540e\uff0c\u5219\u5206\u4e3a\u4e94\u7c7b: lvalue \u4e00\u4e2a\u53ef\u4ee5\u53d6\u5730\u5740\u7684\u8868\u8fbe\u5f0f 1 2 class X { int a ; }; X x ; // x\u662f\u4e00\u4e2a\u5de6\u503c\uff0c\u53ef\u4ee5\u53d6\u5730\u5740\u7684\u3002 glvalue xvalue \u901a\u8fc7\u53f3\u503c\u5f15\u7528\u4ea7\u751f\u7684\u53f3\u503c\uff0c\u5176\u5b9e\u53c8\u662f\u5de6\u503c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 void process_value ( int & i ) { std :: cout << \"LValue processed: \" << i << std :: endl ; } void process_value ( int && i ) { std :: cout << \"RValue processed: \" << i << std :: endl ; } void forward_value ( int && i ) { process_value ( i ); } int main () { int a = 0 ; process_value ( a ); process_value ( 1 ); forward_value ( 2 ); } // \u8f93\u51fa\u7ed3\u679c: LValue processed : 0 RValue processed : 1 LValue processed : 2 rvalue prvalue \u6ca1\u6709\u540d\u5b57\uff0c\u65e0\u6cd5\u53d6\u5730\u5740\uff0c\u53ef\u4ee5\u901a\u8fc7move\u5230\u4e00\u4e2a\u8868\u8fbe\u5f0f\u4e2d\u3002 1 2 class X { int a ; }; X { 10 } // \u8fd9\u662f\u4e00\u4e2a\u7eaf\u53f3\u503c xvalue\u548clvalue \u5c5e\u4e8e glvalue prvalue\u548cxvalue \u5c5e\u4e8e rvalue Dynamic Memory Allocation for Over-Aligned Data C++17\u540e\u7ed9new/delete\u6dfb\u52a0\u4e86\u5185\u5b58\u5bf9\u5176\u7684\u53c2\u6570\uff0c\u4f7f\u5176\u53ef\u4ee5\u5206\u914d\u5185\u5b58\u5bf9\u9f50\u7684\u5730\u5740\uff0cC++17\u4e4b\u524d\u53ea\u80fd\u5728\u5b9a\u4e49\u7684\u65f6\u5019\u58f0\u660e\u5176\u5185\u5b58\u5bf9\u9f50\u7684\u5927\u5c0f \u4f46\u662f\u4e0d\u80fd\u4fdd\u8bc1\u5206\u914d\u51fa\u7684\u5185\u5b58\u662f\u5bf9\u9f50\u7684\u3002 1 2 3 4 5 // \u58f0\u660e\u7684\u65f6\u5019\u6307\u5b9a\u4e86\u5185\u5b58\u5bf9\u9f50\u7684\u5927\u5c0f\uff0c\u4f46\u662f\u5b9e\u9645\u5185\u5b58\u5206\u914d\u7684\u65f6\u5019\uff0c\u5e76\u4e0d\u4e00\u5b9a\u662f\u5bf9\u9f50\u7684\u3002 class alignas ( 16 ) vec4 { float x , y , z , w ; }; operator new []( sizeof ( vec4 )) C++17\u540e\u53ef\u4ee5new\u4f1a\u81ea\u52a8\u8fdb\u884c\u5bf9\u9f50 1 operator new []( sizeof ( vec4 ), align_val_t ( alignof ( vec4 )) Exception Specifications as Part of the Type System C++17\u540e\u5f02\u5e38\u4fe1\u606f\u662f\u7c7b\u578b\u7cfb\u7edf\u7684\u4e00\u90e8\u5206\u3002 1 2 3 4 5 6 7 #include <iostream> int main () { void ( * p )(); void ( ** pp )() noexcept = & p ; } error : cannot initialize a variable of type ' void ( ** )() noexcept ' with an rvalue of type ' void ( ** )() ' Structured Binding Declarations \u8bed\u6cd5\u683c\u5f0f\u5982\u4e0b\uff1a 1 2 3 auto [ a , b , c , ...] = expression ; auto [ a , b , c , ...] = { expression }; auto [ a , b , c , ...] = ( expression ); \u4e00\u4e2a\u4f8b\u5b50\u5982\u4e0b: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #include <iostream> std :: pair < int , bool > InsertElement ( int el ) { return std :: make_pair ( 10 , false ); } int main () { int index { 0 }; bool flag { false }; // C++17\u4e4b\u524d\u9700\u8981\u901a\u8fc7std::tie\u6765\u89e3\u5f00pair std :: tie ( index , flag ) = InsertElement ( 10 ); // C++17\u540e\u53ef\u4ee5\u76f4\u63a5\u8fdb\u884c\u7ed3\u6784\u5316\u7ed1\u5b9a auto [ index_new , flag_new ] = InsertElement ( 10 ); std :: cout << index_new << \":\" << flag_new << std :: endl ; return 0 ; } \u9ed8\u8ba4\u7ed3\u6784\u5316\u7ed1\u5b9a\u662fcopy\u7684\u65b9\u5f0f\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5f15\u7528\u3001\u53f3\u503c\u5f15\u7528\u3001const\u7b49\u65b9\u5f0f 1 2 3 const auto [ a , b , c , ...] = expression auto & [ a , b , c , ...] = expression auto && [ a , b , c , ...] = expression 1 2 3 4 5 std :: pair b ( std :: string ( \"abcd\" ), 1.0f ); auto && [ c , d ] = b ; std :: cout << c << std :: endl ; // output empty string std :: cout << a . first << std :: endl ; \u7ed3\u6784\u5316\u7ed1\u5b9a\u9664\u4e86\u53ef\u4ee5\u5e94\u7528\u5728 std::pair \u4e0a(\u51c6\u786e\u7684\u8bf4\u662f\u652f\u6301std::tuple_size<>\u548c\u63d0\u4f9b\u4e86get \u65b9\u6cd5\u7684\u7c7b\u578b)\uff0c\u8fd8\u53ef\u4ee5\u5e94\u7528\u5230\u6570\u7ec4\u3001\u975estatic\u7684\u516c\u5171\u6210\u5458\u7b49 1 2 3 double myArray [ 3 ] = { 1.0 , 2.0 , 3.0 }; auto [ e , f , g ] = myArray ; std :: cout << e << f << g << std :: endl ; Template argument deduction for class templates \u81ea\u52a8\u63a8\u5230\u7c7b\u6a21\u7248\u7684\u53c2\u6570\u3001\u4e0d\u7528\u663e\u793a\u7684\u6307\u5b9a\u6a21\u7248\u7c7b\u578b 1 2 3 4 5 6 7 8 9 template < typename T = float > struct MyContainer { T val ; MyContainer () : val () {} MyContainer ( T val ) : val ( val ) {} // ... }; MyContainer c1 { 1 }; // OK MyContainer<int> MyContainer c2 ; // OK MyContainer<float> \u6298\u53e0\u8868\u8fbe\u5f0f \u4e00\u5143\u53f3\u6298\u53e0 (E op ...) \u6210\u4e3a (E1 op (... op (EN-1 op EN))) \u4e00\u5143\u5de6\u6298\u53e0 (... op E) \u6210\u4e3a (((E1 op E2) op ...) op EN) \u4e8c\u5143\u53f3\u6298\u53e0 (E op ... op I) \u6210\u4e3a (E1 op (... op (EN\u22121 op (EN op I)))) \u4e8c\u5143\u5de6\u6298\u53e0 (I op ... op E) \u6210\u4e3a ((((I op E1) op E2) op ...) op EN) \u5217\u8868\u521d\u59cb\u5316\u81ea\u52a8\u63a8\u5bfc 1 2 3 4 auto x1 { 1 , 2 , 3 }; // error: not a single element auto x2 = { 1 , 2 , 3 }; // decltype(x2) is std::initializer_list<int> auto x3 { 3 }; // decltype(x3) is int auto x4 { 3.0 }; // decltype(x4) is double Lambda\u901a\u8fc7\u503c\u8bed\u4e49\u62f7\u8d1dthis \u8fd9\u4e2a\u5728C++17\u4e4b\u524d\u662f\u505a\u4e0d\u5230\u7684\uff0c\u53ea\u80fd\u4f20\u5f15\u7528\uff0c\u6216\u8005\u6307\u9488\u62f7\u8d1d 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 struct MyObj { int value { 123 }; // this \u6307\u9488\u62f7\u8d1d auto getValueCopy () { return [ * this ] { return value ; }; } auto getValueRef () { return [ this ] { return value ; }; } }; MyObj mo ; auto valueCopy = mo . getValueCopy (); auto valueRef = mo . getValueRef (); mo . value = 321 ; valueCopy (); // 123 valueRef (); // 321 constexpr if 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #include <type_traits> template < typename T > constexpr bool isIntegral () { if constexpr ( std :: is_integral < T >:: value ) { return true ; } else { return false ; } } int main () { static_assert ( isIntegral < int > () == true ); static_assert ( isIntegral < char > () == true ); static_assert ( isIntegral < double > () == false ); struct S {}; static_assert ( isIntegral < S > () == false ); return 0 ; } Direct List Initialization of Enums 1 2 3 4 5 enum byte : unsigned char {}; byte b { 0 }; // OK byte c { -1 }; // ERROR byte d = byte { 1 }; // OK byte e = byte { 256 }; // ERROR std::variant 1 2 3 4 5 6 std :: variant < int , double > v { 12 }; std :: get < int > ( v ); // == 12 std :: get < 0 > ( v ); // == 12 v = 12.0 ; std :: get < double > ( v ); // == 12.0 std :: get < 1 > ( v ); // == 12.0 std::optional 1 2 3 4 5 6 7 8 9 10 11 12 13 14 std :: optional < std :: string > create ( bool b ) { if ( b ) { return \"Godzilla\" ; } else { return {}; } } create ( false ). value_or ( \"empty\" ); // == \"empty\" create ( true ). value (); // == \"Godzilla\" // optional-returning factory functions are usable as conditions of while and if if ( auto str = create ( true )) { // ... } std::any 1 2 3 4 5 std :: any x { 5 }; x . has_value () // == true std :: any_cast < int > ( x ) // == 5 std :: any_cast < int &> ( x ) = 10 ; std :: any_cast < int > ( x ) // == 10 std::string_view 1 2 3 4 5 6 7 // Regular strings. std :: string_view cppstr { \"foo\" }; // Wide strings. std :: wstring_view wcstr_v { L \"baz\" }; // Character arrays. char array [ 3 ] = { 'b' , 'a' , 'r' }; std :: string_view array_v ( array , std :: size ( array )); std::invoke \u5b9a\u89c4\u5982\u4e0b: 1 2 template < class F , class ... Args > std :: invoke_result_t < F , Args ... > invoke ( F && f , Args && ... args ) noexcept ( /* see below */ ); \u53c2\u6570\u5f53\u4f5c\u53ef\u53d8\u6a21\u7248\u53c2\u6570\u6765\u4f20\u9012 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 template < typename Callable > class Proxy { Callable c ; public : Proxy ( Callable c ) : c ( c ) {} template < class ... Args > decltype ( auto ) operator ()( Args && ... args ) { // ... return std :: invoke ( c , std :: forward < Args > ( args )...); } }; auto add = []( int x , int y ) { return x + y ; }; Proxy < decltype ( add ) > p { add }; p ( 1 , 2 ); // == 3 std::apply \u5176\u5b9a\u4e49\u5982\u4e0b: 1 2 template < class F , class Tuple > constexpr decltype ( auto ) apply ( F && f , Tuple && t ); \u53c2\u6570\u5f53\u4f5ctuple\u6765\u4f20\u9012 1 2 3 4 auto add = []( int x , int y ) { return x + y ; }; std :: apply ( add , std :: make_tuple ( 1 , 2 )); // == 3 Splicing for maps and sets \u901a\u8fc7extract\u53ef\u4ee5\u5728\u4e24\u4e2amap\u4e4b\u95f4\u6765\u56de\u79fb\u52a8\u5143\u7d20\uff0c\u6ca1\u6709\u4efb\u4f55\u62f7\u8d1d\u6210\u672c 1 2 3 4 5 std :: map < int , string > src {{ 1 , \"one\" }, { 2 , \"two\" }, { 3 , \"buckle my shoe\" }}; std :: map < int , string > dst {{ 3 , \"three\" }}; dst . insert ( src . extract ( src . find ( 1 ))); // Cheap remove and insert of { 1, \"one\" } from `src` to `dst`. dst . insert ( src . extract ( 2 )); // Cheap remove and insert of { 2, \"two\" } from `src` to `dst`. // dst == { { 1, \"one\" }, { 2, \"two\" }, { 3, \"three\" } }; std::filesystem std::byte \u5e76\u884c\u7b97\u6cd5 C++14 Lambda capture initializers \u901a\u8fc7\u6355\u83b7\u8868\u8fbe\u5f0f\u521d\u59cb\u5316\u53ef\u4ee5 1 2 3 4 5 6 7 8 9 10 int factory ( int i ) { return i * 10 ; } auto f = [ x = factory ( 2 )] { return x ; }; // returns 20 auto generator = [ x = 0 ] () mutable { // this would not compile without 'mutable' as we are modifying x on each call return x ++ ; }; auto a = generator (); // == 0 auto b = generator (); // == 1 auto c = generator (); // == 2 \u501f\u52a9\u6355\u83b7\u8868\u8fbe\u5f0f\u521d\u59cb\u5316\u6765\u5b8c\u6210\u53d8\u91cfmove\u5230lambda\u4e2d 1 2 3 4 5 6 7 8 auto p = std :: make_unique < int > ( 1 ); // \u6ca1\u529e\u6cd5\u62f7\u8d1d auto task1 = [ = ] { * p = 5 ; }; // ERROR: std::unique_ptr cannot be copied // vs. // move\u8fdb\u53bb auto task2 = [ p = std :: move ( p )] { * p = 5 ; }; // OK: p is move-constructed into the closure object // the original p is empty after task2 is created decltype(auto) \u76f4\u63a5\u4f7f\u7528auto\u7684\u8bdd\u4f1a\u5ffd\u7565\u8c03cv\u9650\u5236\u7b26 1 2 3 4 5 6 7 8 9 10 const int x = 0 ; auto x1 = x ; // int decltype ( auto ) x2 = x ; // const int int y = 0 ; int & y1 = y ; auto y2 = y1 ; // int decltype ( auto ) y3 = y1 ; // int& int && z = 0 ; auto z1 = std :: move ( z ); // int decltype ( auto ) z2 = std :: move ( z ); // int&& inline static data members Since C++17, static data members can be declared inline. An inline static data member can be defined and initialised in the class definition. 1 2 3 struct X { inline static int n = 1 ; }","title":"C++17 In Details"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/cpp17/#c17-in-details","text":"","title":"C++17 In Details"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/cpp17/#new-auto-rules-for-direct-list-initialisation","text":"\u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801\u5728C++17\u4e4b\u524d\u4f1a\u88ab\u63a8\u5012\u6210 std::initializer_list<int> \uff0c\u5728C++17\u540e\u4f1a\u88ab\u63a8\u5bfc\u6210int 1 auto x { 1 }; \u4e0a\u9762\u8fd9\u79cd\u4ee3\u7801\u521d\u59cb\u5316\u65b9\u5f0f\u88ab\u79f0\u4e3a\u76f4\u63a5\u521d\u59cb\u5316\uff0c\u5982\u679c\u6539\u6210Copy Initialisation\u7684\u8bdd\u5c31\u4f1a\u88ab\u63a8\u5bfc\u6210 std::initializer_list<int> 1 auto x = { 1 }; \u4e0b\u9762\u662f\u4e00\u4e9b\u7c7b\u578b\u63a8\u5bfc\u7684\u793a\u4f8b: 1 2 3 4 5 auto x1 = { 1 , 2 }; // decltype(x1) is std::initializer_list<int> auto x2 = { 1 , 2.0 }; // error: cannot deduce element type auto x3 { 1 , 2 }; // error: not a single element auto x4 = { 3 }; // decltype(x4) is std::initializer_list<int> auto x5 { 3 }; // decltype(x5) is int \u53ef\u4ee5\u770b\u51fa\u6765\uff0c\u76f4\u63a5\u521d\u59cb\u5316\u7684\u65b9\u5f0f\u662f\u4e0d\u80fd\u88ab\u63a8\u5bfc\u6210 std::initializer_list \u7684\uff0c\u53ea\u80fd\u653e1\u4e2a\u5143\u7d20\u3002","title":"New auto rules for direct-list-initialisation"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/cpp17/#static_assert-with-no-message","text":"C++17\u4e4b\u524dstatic_assert\u662f\u5fc5\u987b\u8981\u5e26\u4e0amessage\u7684\uff0cC++17\u540e\u8fd9\u4e2a\u5df2\u7ecf\u4e0d\u662f\u5fc5\u987b\u7684\u4e86\uff0c\u6a21\u62df\u4e86\u7f16\u8bd1\u65f6\u7684assert\u3002 1 2 static_assert ( std :: is_arithmetic_v < T > , \"T must be arithmetic\" ); static_assert ( std :: is_arithmetic_v < T > ); // no message needed since C++17","title":"static_assert With no Message"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/cpp17/#different-begin-and-end-types-in-range-based-for-loop","text":"C++17\u4e4b\u524d for range \u7684\u5b9e\u73b0\u5927\u81f4\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 { auto && __range = for - range - initializer ; for ( auto __begin = begin - expr , __end = end - expr ; __begin != __end ; ++ __begin ) { for - range - declaration = * __begin ; statement } } \u4e0a\u9762\u7684\u5b9e\u73b0\u8981\u6c42 __begin \u548c __end \u5fc5\u987b\u662f\u76f8\u540c\u7c7b\u578b\u7684\uff0c \u4f46\u662f\u5230\u4e86C++17\u540e\uff0c for range \u7684\u5b9e\u73b0\u5982\u4e0b: 1 2 3 4 5 6 7 8 9 { auto && __range = for - range - initializer ; auto __begin = begin - expr ; auto __end = end - expr ; for ( ; __begin != __end ; ++ __begin ) { for - range - declaration = * __begin ; statement } } \u53ef\u4ee5\u770b\u51fa\u5728C++17\u540e\u5df2\u7ecf\u4e0d\u518d\u8981\u6c42 __begin \u3001 __end \u662f\u76f8\u540c\u7c7b\u578b\u4e86\uff0c\u53ea\u9700\u8981 __begin \u548c __end \u652f\u6301\u6bd4\u8f83\u64cd\u4f5c\u5373\u53ef\u3002","title":"Different begin and end Types in Range-Based For Loop"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/cpp17/#stricter-expression-evaluation-order","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 #include <iostream> class Query { public : Query & addInt ( int i ) { std :: cout << \"addInt: \" << i << '\\n' ; return * this ; } Query & addFloat ( float f ) { std :: cout << \"addFloat: \" << f << '\\n' ; return * this ; } }; float comuteFloat () { std :: cout << \"computing float... \\n \" ; return 10.1f ; } float computeInt () { std :: cout << \"computing int... \\n \" ; return 8 ; } int main () { Query q ; q . addFloat ( comuteFloat ()). addInt ( computeInt ()); } \u5728C++17\u4e4b\u524d\uff0c\u8f93\u51fa\u7684\u987a\u5e8f\u53ef\u80fd\u5982\u4e0b(\u4ece\u53f3\u5411\u5de6\u5148\u8ba1\u7b97\u53c2\u6570\u7684\u503c\uff0c\u7136\u540e\u518d\u5f00\u59cb\u6267\u884c): 1 2 3 4 computing int ... computing float ... addFloat : 10.1 addInt : 8 \u5728C++17\u540e\uff0c\u8f93\u51fa\u7684\u987a\u5e8f\u53ef\u4ee5\u4fdd\u8bc1\u6309\u7167\u4ee3\u7801\u4e0a\u6765\u987a\u5e8f\u6765\u6267\u884c\u3002 1 2 3 4 computing float ... addFloat : 10.1 computing int ... addInt : 8 C++17 \u4e4b\u524d\u5bf9\u4e8e\u5f62\u5982 A(B(), C()); \u8fd9\u79cd\u5f62\u5f0f\u7684\u8c03\u7528\uff0c\u5bf9\u4e8e B() \u548c C() \u7684\u6267\u884c\u987a\u5e8f\u662f\u4e0d\u786e\u5b9a\u7684\uff0c\u6240\u4ee5\u4e3a\u4e86\u4fdd\u8bc1\u5185\u5b58\u5b89\u5168\uff0c\u624d\u6709\u4e86 std::make_unique \u8fd9\u6837\u7684\u8bed\u6cd5\u7cd6\u3002\u4f8b\u5982\u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801\uff0c\u5982\u679c\u5148\u6267\u884c new T \uff0c\u7136\u540e\u6267\u884c otherFunction \uff0c \u8fd9\u4e2a\u65f6\u5019\u5982\u679c\u629b\u51fa\u5f02\u5e38\u4f1a\u5bfc\u81f4\u5185\u5b58\u6cc4\u6f0f\uff0c\u4f46\u662fC++17\u540e\uff0c\u53ef\u4ee5\u4fdd\u8bc1new T\u6267\u884c\u5b8c\u540e\uff0c\u518d\u6267\u884c unique_ptr<T> \u7684\u6784\u9020\uff0c\u6700\u540e\u624d\u6267\u884c otherFunction \uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u5185\u5b58\u5b89\u5168\u4e86\u3002 1 foo ( unique_ptr < T > ( new T ), otherFunction ()); C++17\u540e\u5bf9\u4e8e\u8868\u8fbe\u5f0f\u7684\u6267\u884c\u987a\u5e8f\u53ef\u4ee5\u8fdb\u884c\u5982\u4e0b\u7684\u4fdd\u969c\u3002 a.b a->b a->*b a(b1, b2, b3) // b1, b2, b3 - in any order 5. b @= a // '@' means any operator a[b] a << b a >> b","title":"Stricter Expression Evaluation Order"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/cpp17/#guaranteed-copy-elision","text":"C++17\u4e4b\u524d\u8981\u6c42\u5b9e\u73b0RVO\u7684\u5bf9\u8c61\u5fc5\u987b\u8981\u6709Copy\u6784\u9020\u6216\u8005\u79fb\u52a8\u6784\u9020\u51fd\u6570\u3002\u4f8b\u5982\u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801\u5c06\u65e0\u6cd5\u8fdb\u884c\u7f16\u8bd1\uff0c\u8fd9\u662f\u56e0\u4e3aC++17\u4e4b\u524d\u53ef\u80fd\u4f1a\u9000\u5316\u6210\u62f7\u8d1d/\u79fb\u52a8\u6784\u9020\uff0c\u6240\u4ee5\u8981\u6c42 \u5b9e\u73b0RVO\u7684\u5bf9\u8c61\u9700\u8981\u5177\u5907\u62f7\u8d1d/\u79fb\u52a8\u6784\u9020\u51fd\u6570\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #include <array> // Chapter Clarification/copy_elision_non_moveable.cpp #include <array> // based on P0135R0 struct NonMoveable { NonMoveable ( int x ) : v ( x ) { } NonMoveable ( const NonMoveable & ) = delete ; NonMoveable ( NonMoveable && ) = delete ; std :: array < int , 1024 > arr ; int v ; }; NonMoveable make ( int val ) { if ( val > 0 ) return NonMoveable ( val ); return NonMoveable ( - val ); } int main () { auto largeNonMoveableObj = make ( 90 ); return largeNonMoveableObj . v ; } \u4e0a\u9762\u7684\u4ee3\u7801\u5728C++17\u4e4b\u524d\u4f1a\u7f16\u8bd1\u5931\u8d25\uff0c\u9519\u8bef\u5982\u4e0b: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 // \u7f16\u8bd1\u9519\u8bef copy_elision_non_moveable . cc : 15 : 10 : error : call to deleted constructor of ' NonMoveable ' return NonMoveable ( val ); ^~~~~~~~~~~~~~~~ copy_elision_non_moveable . cc : 8 : 3 : note : ' NonMoveable ' has been explicitly marked deleted here NonMoveable ( NonMoveable && ) = delete ; ^ copy_elision_non_moveable . cc : 16 : 9 : error : call to deleted constructor of ' NonMoveable ' return NonMoveable ( - val ); ^~~~~~~~~~~~~~~~~ copy_elision_non_moveable . cc : 8 : 3 : note : ' NonMoveable ' has been explicitly marked deleted here NonMoveable ( NonMoveable && ) = delete ; ^ copy_elision_non_moveable . cc : 20 : 8 : error : call to deleted constructor of ' NonMoveable ' auto largeNonMoveableObj = make ( 90 ); ^ ~~~~~~~~ copy_elision_non_moveable . cc : 8 : 3 : note : ' NonMoveable ' has been explicitly marked deleted here NonMoveable ( NonMoveable && ) = delete ; C++17\u540e\u4e0a\u9762\u7684\u4ee3\u7801\u5c31\u53ef\u4ee5\u7f16\u8bd1\u4e86\uff0c\u4f1a\u4fdd\u8bc1\u5f3a\u5236\u6267\u884c\u6267\u884cRVO\u4f18\u5316\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u539f\u5730\u6784\u9020\u3002\u4f46\u662f\u8fd9\u4e00\u5207\u7684\u4fdd\u8bc1\u53ea\u9002\u7528\u4e8eRVO\uff0c\u800c\u4e0d\u662fNRVO\u3002","title":"Guaranteed Copy Elision"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/cpp17/#updated-value-categories","text":"C++98/03\u7684\u65f6\u5019\u5bf9\u4e8e\u503c\u7684\u7c7b\u578b\u5206\u4e3a\u4e24\u7c7b: lvaluue rvalue C++11\u540e\uff0c\u5219\u5206\u4e3a\u4e94\u7c7b: lvalue \u4e00\u4e2a\u53ef\u4ee5\u53d6\u5730\u5740\u7684\u8868\u8fbe\u5f0f 1 2 class X { int a ; }; X x ; // x\u662f\u4e00\u4e2a\u5de6\u503c\uff0c\u53ef\u4ee5\u53d6\u5730\u5740\u7684\u3002 glvalue xvalue \u901a\u8fc7\u53f3\u503c\u5f15\u7528\u4ea7\u751f\u7684\u53f3\u503c\uff0c\u5176\u5b9e\u53c8\u662f\u5de6\u503c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 void process_value ( int & i ) { std :: cout << \"LValue processed: \" << i << std :: endl ; } void process_value ( int && i ) { std :: cout << \"RValue processed: \" << i << std :: endl ; } void forward_value ( int && i ) { process_value ( i ); } int main () { int a = 0 ; process_value ( a ); process_value ( 1 ); forward_value ( 2 ); } // \u8f93\u51fa\u7ed3\u679c: LValue processed : 0 RValue processed : 1 LValue processed : 2 rvalue prvalue \u6ca1\u6709\u540d\u5b57\uff0c\u65e0\u6cd5\u53d6\u5730\u5740\uff0c\u53ef\u4ee5\u901a\u8fc7move\u5230\u4e00\u4e2a\u8868\u8fbe\u5f0f\u4e2d\u3002 1 2 class X { int a ; }; X { 10 } // \u8fd9\u662f\u4e00\u4e2a\u7eaf\u53f3\u503c xvalue\u548clvalue \u5c5e\u4e8e glvalue prvalue\u548cxvalue \u5c5e\u4e8e rvalue","title":"Updated Value Categories"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/cpp17/#dynamic-memory-allocation-for-over-aligned-data","text":"C++17\u540e\u7ed9new/delete\u6dfb\u52a0\u4e86\u5185\u5b58\u5bf9\u5176\u7684\u53c2\u6570\uff0c\u4f7f\u5176\u53ef\u4ee5\u5206\u914d\u5185\u5b58\u5bf9\u9f50\u7684\u5730\u5740\uff0cC++17\u4e4b\u524d\u53ea\u80fd\u5728\u5b9a\u4e49\u7684\u65f6\u5019\u58f0\u660e\u5176\u5185\u5b58\u5bf9\u9f50\u7684\u5927\u5c0f \u4f46\u662f\u4e0d\u80fd\u4fdd\u8bc1\u5206\u914d\u51fa\u7684\u5185\u5b58\u662f\u5bf9\u9f50\u7684\u3002 1 2 3 4 5 // \u58f0\u660e\u7684\u65f6\u5019\u6307\u5b9a\u4e86\u5185\u5b58\u5bf9\u9f50\u7684\u5927\u5c0f\uff0c\u4f46\u662f\u5b9e\u9645\u5185\u5b58\u5206\u914d\u7684\u65f6\u5019\uff0c\u5e76\u4e0d\u4e00\u5b9a\u662f\u5bf9\u9f50\u7684\u3002 class alignas ( 16 ) vec4 { float x , y , z , w ; }; operator new []( sizeof ( vec4 )) C++17\u540e\u53ef\u4ee5new\u4f1a\u81ea\u52a8\u8fdb\u884c\u5bf9\u9f50 1 operator new []( sizeof ( vec4 ), align_val_t ( alignof ( vec4 ))","title":"Dynamic Memory Allocation for Over-Aligned Data"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/cpp17/#exception-specifications-as-part-of-the-type-system","text":"C++17\u540e\u5f02\u5e38\u4fe1\u606f\u662f\u7c7b\u578b\u7cfb\u7edf\u7684\u4e00\u90e8\u5206\u3002 1 2 3 4 5 6 7 #include <iostream> int main () { void ( * p )(); void ( ** pp )() noexcept = & p ; } error : cannot initialize a variable of type ' void ( ** )() noexcept ' with an rvalue of type ' void ( ** )() '","title":"Exception Specifications as Part of the Type System"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/cpp17/#structured-binding-declarations","text":"\u8bed\u6cd5\u683c\u5f0f\u5982\u4e0b\uff1a 1 2 3 auto [ a , b , c , ...] = expression ; auto [ a , b , c , ...] = { expression }; auto [ a , b , c , ...] = ( expression ); \u4e00\u4e2a\u4f8b\u5b50\u5982\u4e0b: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #include <iostream> std :: pair < int , bool > InsertElement ( int el ) { return std :: make_pair ( 10 , false ); } int main () { int index { 0 }; bool flag { false }; // C++17\u4e4b\u524d\u9700\u8981\u901a\u8fc7std::tie\u6765\u89e3\u5f00pair std :: tie ( index , flag ) = InsertElement ( 10 ); // C++17\u540e\u53ef\u4ee5\u76f4\u63a5\u8fdb\u884c\u7ed3\u6784\u5316\u7ed1\u5b9a auto [ index_new , flag_new ] = InsertElement ( 10 ); std :: cout << index_new << \":\" << flag_new << std :: endl ; return 0 ; } \u9ed8\u8ba4\u7ed3\u6784\u5316\u7ed1\u5b9a\u662fcopy\u7684\u65b9\u5f0f\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5f15\u7528\u3001\u53f3\u503c\u5f15\u7528\u3001const\u7b49\u65b9\u5f0f 1 2 3 const auto [ a , b , c , ...] = expression auto & [ a , b , c , ...] = expression auto && [ a , b , c , ...] = expression 1 2 3 4 5 std :: pair b ( std :: string ( \"abcd\" ), 1.0f ); auto && [ c , d ] = b ; std :: cout << c << std :: endl ; // output empty string std :: cout << a . first << std :: endl ; \u7ed3\u6784\u5316\u7ed1\u5b9a\u9664\u4e86\u53ef\u4ee5\u5e94\u7528\u5728 std::pair \u4e0a(\u51c6\u786e\u7684\u8bf4\u662f\u652f\u6301std::tuple_size<>\u548c\u63d0\u4f9b\u4e86get \u65b9\u6cd5\u7684\u7c7b\u578b)\uff0c\u8fd8\u53ef\u4ee5\u5e94\u7528\u5230\u6570\u7ec4\u3001\u975estatic\u7684\u516c\u5171\u6210\u5458\u7b49 1 2 3 double myArray [ 3 ] = { 1.0 , 2.0 , 3.0 }; auto [ e , f , g ] = myArray ; std :: cout << e << f << g << std :: endl ;","title":"Structured Binding Declarations"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/cpp17/#template-argument-deduction-for-class-templates","text":"\u81ea\u52a8\u63a8\u5230\u7c7b\u6a21\u7248\u7684\u53c2\u6570\u3001\u4e0d\u7528\u663e\u793a\u7684\u6307\u5b9a\u6a21\u7248\u7c7b\u578b 1 2 3 4 5 6 7 8 9 template < typename T = float > struct MyContainer { T val ; MyContainer () : val () {} MyContainer ( T val ) : val ( val ) {} // ... }; MyContainer c1 { 1 }; // OK MyContainer<int> MyContainer c2 ; // OK MyContainer<float>","title":"Template argument deduction for class templates"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/cpp17/#_1","text":"\u4e00\u5143\u53f3\u6298\u53e0 (E op ...) \u6210\u4e3a (E1 op (... op (EN-1 op EN))) \u4e00\u5143\u5de6\u6298\u53e0 (... op E) \u6210\u4e3a (((E1 op E2) op ...) op EN) \u4e8c\u5143\u53f3\u6298\u53e0 (E op ... op I) \u6210\u4e3a (E1 op (... op (EN\u22121 op (EN op I)))) \u4e8c\u5143\u5de6\u6298\u53e0 (I op ... op E) \u6210\u4e3a ((((I op E1) op E2) op ...) op EN)","title":"\u6298\u53e0\u8868\u8fbe\u5f0f"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/cpp17/#_2","text":"1 2 3 4 auto x1 { 1 , 2 , 3 }; // error: not a single element auto x2 = { 1 , 2 , 3 }; // decltype(x2) is std::initializer_list<int> auto x3 { 3 }; // decltype(x3) is int auto x4 { 3.0 }; // decltype(x4) is double","title":"\u5217\u8868\u521d\u59cb\u5316\u81ea\u52a8\u63a8\u5bfc"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/cpp17/#lambdathis","text":"\u8fd9\u4e2a\u5728C++17\u4e4b\u524d\u662f\u505a\u4e0d\u5230\u7684\uff0c\u53ea\u80fd\u4f20\u5f15\u7528\uff0c\u6216\u8005\u6307\u9488\u62f7\u8d1d 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 struct MyObj { int value { 123 }; // this \u6307\u9488\u62f7\u8d1d auto getValueCopy () { return [ * this ] { return value ; }; } auto getValueRef () { return [ this ] { return value ; }; } }; MyObj mo ; auto valueCopy = mo . getValueCopy (); auto valueRef = mo . getValueRef (); mo . value = 321 ; valueCopy (); // 123 valueRef (); // 321","title":"Lambda\u901a\u8fc7\u503c\u8bed\u4e49\u62f7\u8d1dthis"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/cpp17/#constexpr-if","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #include <type_traits> template < typename T > constexpr bool isIntegral () { if constexpr ( std :: is_integral < T >:: value ) { return true ; } else { return false ; } } int main () { static_assert ( isIntegral < int > () == true ); static_assert ( isIntegral < char > () == true ); static_assert ( isIntegral < double > () == false ); struct S {}; static_assert ( isIntegral < S > () == false ); return 0 ; }","title":"constexpr if"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/cpp17/#direct-list-initialization-of-enums","text":"1 2 3 4 5 enum byte : unsigned char {}; byte b { 0 }; // OK byte c { -1 }; // ERROR byte d = byte { 1 }; // OK byte e = byte { 256 }; // ERROR","title":"Direct List Initialization of Enums"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/cpp17/#stdvariant","text":"1 2 3 4 5 6 std :: variant < int , double > v { 12 }; std :: get < int > ( v ); // == 12 std :: get < 0 > ( v ); // == 12 v = 12.0 ; std :: get < double > ( v ); // == 12.0 std :: get < 1 > ( v ); // == 12.0","title":"std::variant"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/cpp17/#stdoptional","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 std :: optional < std :: string > create ( bool b ) { if ( b ) { return \"Godzilla\" ; } else { return {}; } } create ( false ). value_or ( \"empty\" ); // == \"empty\" create ( true ). value (); // == \"Godzilla\" // optional-returning factory functions are usable as conditions of while and if if ( auto str = create ( true )) { // ... }","title":"std::optional"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/cpp17/#stdany","text":"1 2 3 4 5 std :: any x { 5 }; x . has_value () // == true std :: any_cast < int > ( x ) // == 5 std :: any_cast < int &> ( x ) = 10 ; std :: any_cast < int > ( x ) // == 10","title":"std::any"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/cpp17/#stdstring_view","text":"1 2 3 4 5 6 7 // Regular strings. std :: string_view cppstr { \"foo\" }; // Wide strings. std :: wstring_view wcstr_v { L \"baz\" }; // Character arrays. char array [ 3 ] = { 'b' , 'a' , 'r' }; std :: string_view array_v ( array , std :: size ( array ));","title":"std::string_view"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/cpp17/#stdinvoke","text":"\u5b9a\u89c4\u5982\u4e0b: 1 2 template < class F , class ... Args > std :: invoke_result_t < F , Args ... > invoke ( F && f , Args && ... args ) noexcept ( /* see below */ ); \u53c2\u6570\u5f53\u4f5c\u53ef\u53d8\u6a21\u7248\u53c2\u6570\u6765\u4f20\u9012 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 template < typename Callable > class Proxy { Callable c ; public : Proxy ( Callable c ) : c ( c ) {} template < class ... Args > decltype ( auto ) operator ()( Args && ... args ) { // ... return std :: invoke ( c , std :: forward < Args > ( args )...); } }; auto add = []( int x , int y ) { return x + y ; }; Proxy < decltype ( add ) > p { add }; p ( 1 , 2 ); // == 3","title":"std::invoke"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/cpp17/#stdapply","text":"\u5176\u5b9a\u4e49\u5982\u4e0b: 1 2 template < class F , class Tuple > constexpr decltype ( auto ) apply ( F && f , Tuple && t ); \u53c2\u6570\u5f53\u4f5ctuple\u6765\u4f20\u9012 1 2 3 4 auto add = []( int x , int y ) { return x + y ; }; std :: apply ( add , std :: make_tuple ( 1 , 2 )); // == 3","title":"std::apply"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/cpp17/#splicing-for-maps-and-sets","text":"\u901a\u8fc7extract\u53ef\u4ee5\u5728\u4e24\u4e2amap\u4e4b\u95f4\u6765\u56de\u79fb\u52a8\u5143\u7d20\uff0c\u6ca1\u6709\u4efb\u4f55\u62f7\u8d1d\u6210\u672c 1 2 3 4 5 std :: map < int , string > src {{ 1 , \"one\" }, { 2 , \"two\" }, { 3 , \"buckle my shoe\" }}; std :: map < int , string > dst {{ 3 , \"three\" }}; dst . insert ( src . extract ( src . find ( 1 ))); // Cheap remove and insert of { 1, \"one\" } from `src` to `dst`. dst . insert ( src . extract ( 2 )); // Cheap remove and insert of { 2, \"two\" } from `src` to `dst`. // dst == { { 1, \"one\" }, { 2, \"two\" }, { 3, \"three\" } };","title":"Splicing for maps and sets"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/cpp17/#stdfilesystem","text":"","title":"std::filesystem"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/cpp17/#stdbyte","text":"","title":"std::byte"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/cpp17/#_3","text":"","title":"\u5e76\u884c\u7b97\u6cd5"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/cpp17/#c14","text":"","title":"C++14"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/cpp17/#lambda-capture-initializers","text":"\u901a\u8fc7\u6355\u83b7\u8868\u8fbe\u5f0f\u521d\u59cb\u5316\u53ef\u4ee5 1 2 3 4 5 6 7 8 9 10 int factory ( int i ) { return i * 10 ; } auto f = [ x = factory ( 2 )] { return x ; }; // returns 20 auto generator = [ x = 0 ] () mutable { // this would not compile without 'mutable' as we are modifying x on each call return x ++ ; }; auto a = generator (); // == 0 auto b = generator (); // == 1 auto c = generator (); // == 2 \u501f\u52a9\u6355\u83b7\u8868\u8fbe\u5f0f\u521d\u59cb\u5316\u6765\u5b8c\u6210\u53d8\u91cfmove\u5230lambda\u4e2d 1 2 3 4 5 6 7 8 auto p = std :: make_unique < int > ( 1 ); // \u6ca1\u529e\u6cd5\u62f7\u8d1d auto task1 = [ = ] { * p = 5 ; }; // ERROR: std::unique_ptr cannot be copied // vs. // move\u8fdb\u53bb auto task2 = [ p = std :: move ( p )] { * p = 5 ; }; // OK: p is move-constructed into the closure object // the original p is empty after task2 is created","title":"Lambda capture initializers"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/cpp17/#decltypeauto","text":"\u76f4\u63a5\u4f7f\u7528auto\u7684\u8bdd\u4f1a\u5ffd\u7565\u8c03cv\u9650\u5236\u7b26 1 2 3 4 5 6 7 8 9 10 const int x = 0 ; auto x1 = x ; // int decltype ( auto ) x2 = x ; // const int int y = 0 ; int & y1 = y ; auto y2 = y1 ; // int decltype ( auto ) y3 = y1 ; // int& int && z = 0 ; auto z1 = std :: move ( z ); // int decltype ( auto ) z2 = std :: move ( z ); // int&&","title":"decltype(auto)"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/cpp17/#inline-static-data-members","text":"Since C++17, static data members can be declared inline. An inline static data member can be defined and initialised in the class definition. 1 2 3 struct X { inline static int n = 1 ; }","title":"inline static data members"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/cpp20/","text":"C++20 Module Module example\uff0c\u9700\u8981Clang 10.0\u4ee5\u4e0a\u7248\u672c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 /// helloworld.cc module; import <cstdio>; export module helloworld; export namespace helloworld { int global_data; void say_hello() { std::printf(\"Hello Module! Data is %d\\n\", global_data); } } /// main.cc import helloworld; int main() { helloworld::global_data = 123; helloworld::say_hello(); } \u5148\u5c06module\u7f16\u8bd1\u6210\u4e2d\u95f4\u6587\u4ef6\uff0c\u7136\u540e\u518d\u7f16\u8bd1main.cc\uff0c\u9700\u8981\u6dfb\u52a0\u76f8\u5173\u7684module\u53c2\u6570 1 2 3 4 5 $ clang++ -std=c++2a -stdlib=libc++ -fimplicit-modules -fimplicit-module-maps -c helloworld.cc -Xclang -emit-module-interface -o helloworld.pcm $ clang++ -std=c++2a -stdlib=libc++ -fimplicit-modules -fimplicit-module-maps -fprebuilt-module-path=. main.cc helloworld.cc $ ./a.out Hello Module! Data is 123 https://brevzin.github.io/c++/2020/07/06/split-view/","title":"C++20"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/cpp20/#c20","text":"","title":"C++20"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/cpp20/#module","text":"Module example\uff0c\u9700\u8981Clang 10.0\u4ee5\u4e0a\u7248\u672c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 /// helloworld.cc module; import <cstdio>; export module helloworld; export namespace helloworld { int global_data; void say_hello() { std::printf(\"Hello Module! Data is %d\\n\", global_data); } } /// main.cc import helloworld; int main() { helloworld::global_data = 123; helloworld::say_hello(); } \u5148\u5c06module\u7f16\u8bd1\u6210\u4e2d\u95f4\u6587\u4ef6\uff0c\u7136\u540e\u518d\u7f16\u8bd1main.cc\uff0c\u9700\u8981\u6dfb\u52a0\u76f8\u5173\u7684module\u53c2\u6570 1 2 3 4 5 $ clang++ -std=c++2a -stdlib=libc++ -fimplicit-modules -fimplicit-module-maps -c helloworld.cc -Xclang -emit-module-interface -o helloworld.pcm $ clang++ -std=c++2a -stdlib=libc++ -fimplicit-modules -fimplicit-module-maps -fprebuilt-module-path=. main.cc helloworld.cc $ ./a.out Hello Module! Data is 123 https://brevzin.github.io/c++/2020/07/06/split-view/","title":"Module"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/design/","text":"RAII List 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 // RAII helper class to add an element to an std::list on construction and erase // it on destruction, unless the cancel method has been called. template < class T > class RaiiListElement { public : RaiiListElement ( std :: list < T >& container , T element ) : container_ ( container ), cancelled_ ( false ) { it_ = container . emplace ( container . begin (), element ); } virtual ~ RaiiListElement () { if ( ! cancelled_ ) { erase (); } } // Cancel deletion of the element on destruction. This should be called if the iterator has // been invalidated, eg. if the list has been cleared or the element removed some other way. void cancel () { cancelled_ = true ; } // Delete the element now, instead of at destruction. void erase () { ASSERT ( ! cancelled_ ); container_ . erase ( it_ ); cancelled_ = true ; } private : std :: list < T >& container_ ; typename std :: list < T >:: iterator it_ ; bool cancelled_ ; }; Mock\u6280\u5de7 Mock ClassA::Create() 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class AInterface ; class A : public A :: AInterface { public : static std :: unique_ptr < A :: AInterface > Create (); }; class B { public : void Method () { a_ = A :: Create (); } private : std :: unique_ptr < A :: AInterface > a_ ; } \u4e0a\u9762\u7684\u7c7bA\u901a\u8fc7\u9759\u6001\u65b9\u6cd5\u521b\u5efa\u5b9e\u4f8b\uff0c\u73b0\u5728\u60f3\u8981\u6d4b\u8bd5B\uff0c\u9700\u8981\u628aA Mock\u6389\u3002\u53ef\u4ee5\u901a\u8fc7\u4e0b\u9762\u8fd9\u79cd\u65b9\u5f0f\u6765Mock 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class B { public : void Method () { a_ = Create (); } virtual std :: unique_ptr < A :: AInterface > Create (); private : std :: unique_ptr < A :: AInterface > a_ ; }; class ProdB : public B { public : virtual std :: unique_ptr < A :: AInterface > Create () override { return A :: Create (); } };","title":"Design"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/design/#raii-list","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 // RAII helper class to add an element to an std::list on construction and erase // it on destruction, unless the cancel method has been called. template < class T > class RaiiListElement { public : RaiiListElement ( std :: list < T >& container , T element ) : container_ ( container ), cancelled_ ( false ) { it_ = container . emplace ( container . begin (), element ); } virtual ~ RaiiListElement () { if ( ! cancelled_ ) { erase (); } } // Cancel deletion of the element on destruction. This should be called if the iterator has // been invalidated, eg. if the list has been cleared or the element removed some other way. void cancel () { cancelled_ = true ; } // Delete the element now, instead of at destruction. void erase () { ASSERT ( ! cancelled_ ); container_ . erase ( it_ ); cancelled_ = true ; } private : std :: list < T >& container_ ; typename std :: list < T >:: iterator it_ ; bool cancelled_ ; };","title":"RAII List"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/design/#mock","text":"Mock ClassA::Create() 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class AInterface ; class A : public A :: AInterface { public : static std :: unique_ptr < A :: AInterface > Create (); }; class B { public : void Method () { a_ = A :: Create (); } private : std :: unique_ptr < A :: AInterface > a_ ; } \u4e0a\u9762\u7684\u7c7bA\u901a\u8fc7\u9759\u6001\u65b9\u6cd5\u521b\u5efa\u5b9e\u4f8b\uff0c\u73b0\u5728\u60f3\u8981\u6d4b\u8bd5B\uff0c\u9700\u8981\u628aA Mock\u6389\u3002\u53ef\u4ee5\u901a\u8fc7\u4e0b\u9762\u8fd9\u79cd\u65b9\u5f0f\u6765Mock 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class B { public : void Method () { a_ = Create (); } virtual std :: unique_ptr < A :: AInterface > Create (); private : std :: unique_ptr < A :: AInterface > a_ ; }; class ProdB : public B { public : virtual std :: unique_ptr < A :: AInterface > Create () override { return A :: Create (); } };","title":"Mock\u6280\u5de7"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/guidelines/","text":"Don't define a default constructor that only initializes data members; use in-class member initializers instead Prefer in-class initializers to member initializers in constructors for constant initializers // Bad 1 2 3 4 5 6 7 8 9 10 11 class Simple { public : Simple () : a ( 1 ), b ( 2 ), c ( 3 ) {} Simple ( int aa , int bb , int cc = -1 ) : a ( aa ), b ( bb ), c ( cc ) {} Simple ( int aa ) { a = aa ; b = 0 ; c = 0 ; } private : int a ; int b ; int c ; }; // Good 1 2 3 4 5 6 7 8 9 10 class Simple { public : Simple () = default ; Simple ( int aa , int bb , int cc ) : a ( aa ), b ( bb ), c ( cc ) {} Simple ( int aa ) : a ( aa ) {} private : int a = -1 ; int b = -1 ; int c = -1 ; }; No arguing about \u201cequivalent\u201d ways to do it May prevent some bugs May put you back in \u201ccompiler generates constructors\u201d land Potentially marginally faster in some circumstances Where there is a choice, prefer default arguments over overloading. 1","title":"Guidelines"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/libevent/","text":"Libevent Note \u521b\u5efa\u548c\u91ca\u653e event_base event_base_new \u7528\u4e8e\u521b\u5efa\u4e00\u4e2a event_base \u7ed3\u6784\uff0c event_base \u5c31\u7b49\u540c\u4e8e\u4e00\u4e2a EventLoop \uff0c\u5982\u679c\u4e0d\u6ee1\u8db3\u9ed8\u8ba4\u521b\u5efa\u7684 event_base \uff0c \u60f3\u5bf9\u5176\u8fdb\u884c\u4e00\u4e9b\u53c2\u6570\u7684\u8c03\u6574\u53ef\u4ee5\u901a\u8fc7 event_base_new_with_config \u6765\u521b\u5efa event_base \uff0c\u5982\u679c\u4e00\u4e2a\u8fdb\u7a0b\u8fdb\u884c\u4e86fork \u8981\u60f3fork\u540e\u7684event_base\u4ecd\u7136\u6709\u6548\uff0c\u9700\u8981\u8c03\u7528 event_reinit \u6765\u8fdb\u884c\u91cd\u65b0\u521d\u59cb\u5316\u3002 event_base_free \u91ca\u653e event_base \u7684\u7ed3\u6784\uff0c\u4f46\u662f\u4e0d\u662f\u91ca\u653e\u548c\u8fd9\u4e2a event_base \u6240\u5173\u8054\u7684\u4e8b\u4ef6\u548c\u5957\u63a5\u5b57\u7b49\u3002 event_base \u67e5\u8be2 event_get_supported_methods \u8fd4\u56delibevent\u5728\u5f53\u524dOS\u4e0a\u652f\u6301\u7684\u4e8b\u4ef6\u673a\u5236\u7684\u7c7b\u578b event_base_get_method \u8fd4\u56de\u5f53\u524d event_base \u4f7f\u7528\u7684\u4e8b\u4ef6\u673a\u5236\u7c7b\u578b event_base_get_features \u8fd4\u56de\u5f53\u524d event_base \u652f\u6301\u7684features event_base \u4f18\u5148\u7ea7 event_base_priority_init \u7528\u6237\u521d\u59cb\u5316 event_base \u652f\u6301\u7684\u4f18\u5148\u7ea7\u6570\u91cf\uff0c\u9ed8\u8ba4\u53ea\u652f\u6301\u5355\u4e2a\u4f18\u5148\u7ea7\uff0c\u8fd9\u4e2a\u51fd\u6570\u9700\u8981\u5728 event_base \u521b\u5efa\u540e\u7acb\u523b\u6267\u884c \u5e38\u91cf EVENT_MAX_PRIORITIES \u8868\u793a\u7684\u5219\u662f\u4e8b\u4ef6\u7684\u6700\u5927\u4f18\u5148\u7ea7\u6570\u91cf\uff0c\u521b\u5efa\u4e8b\u4ef6\u7684\u65f6\u5019\u53ef\u4ee5\u7ed9\u4e8b\u4ef6\u6307\u5b9a\u4f18\u5148\u7ea7\u3002 event_priority_set \u8bbe\u7f6e\u4e8b\u4ef6\u7684\u4f18\u5148\u7ea7 \u5982\u679c\u4e0d\u4e3a\u4e8b\u4ef6\u8bbe\u7f6e\u4f18\u5148\u7ea7,\u5219\u9ed8\u8ba4\u7684\u4f18\u5148\u7ea7\u5c06\u4f1a\u662f event_base \u7684\u4f18\u5148\u7ea7\u6570\u76ee\u9664\u4ee52\u3002 EventLoop\u8fd0\u884c event_base_loop \u7528\u4e8e\u8fd0\u884c\u4e8b\u4ef6\u5faa\u73af\uff0c\u6709\u4e09\u79cd\u6a21\u5f0f\uff0c\u5206\u522b\u4e3a EVLOOP_NO_EXIT_ON_EMPTY \u3001 EVLOOP_NONBLOCK \u3001 EVLOOP_ONCE 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 while (any events are registered with the loop, or EVLOOP_NO_EXIT_ON_EMPTY was set) { if (EVLOOP_NONBLOCK was set, or any events are already active) If any registered events have triggered, mark them active. else Wait until at least one event has triggered, and mark it active. for (p = 0; p < n_priorities; ++p) { if (any event with priority of p is active) { Run all active events with priority of p. break; /* Do not run any events of a less important priority */ } } if (EVLOOP_ONCE was set or EVLOOP_NONBLOCK was set) break; } EVLOOP_NONBLOCK\u548cEVLOOP_ONCE\u7684\u533a\u522b\u5728\u4e8e\u524d\u8005\u5e76\u4e0d\u5faa\u73af\u7b49\u5f85\u4e8b\u4ef6\u89e6\u53d1\uff0c\u5faa\u73af\u4ec5\u4ec5\u76f4\u63a5\u68c0\u6d4b\u662f\u5426\u6709\u4e8b\u4ef6\u5df2\u7ecf\u5c31\u7eea\uff0c\u6709\u7684\u8bdd\u5c31\u7acb\u5373\u89e6\u53d1\uff0c\u7136\u540e\u6267\u884c\u4e8b\u4ef6\u56de\u8c03 \u540e\u8005\u4f1a\u5faa\u73af\u7b49\u5f85\u4e8b\u4ef6\u89e6\u53d1\uff0c\u7136\u540e\u6fc0\u6d3b\u4e8b\u4ef6\u6267\u884c\u4e8b\u4ef6\u56de\u8c03\u3002 event_base_dispatch \u7b49\u540c\u4e8e event_base_loop \u6ca1\u6709\u52a0\u4efb\u4f55\u6807\u5fd7\uff0c\u4f1a\u4e00\u76f4\u8fd0\u884c\uff0c\u76f4\u5230\u6ca1\u6709\u4efb\u4f55\u6ce8\u518c\u7684\u4e8b\u4ef6\u3002 \u6216\u8005\u8c03\u7528 event_base_loopbreak \u548c event_base_loopexit \u4e3a\u6b62 \u505c\u6b62EventLoop event_base_loopexit \u8ba9 event_base \u5728\u7ed9\u5b9a\u65f6\u95f4\u4e4b\u540e\u505c\u6b62\u5faa\u73af\u3002\u5982\u679c tv \u53c2\u6570\u4e3a NULL, event_base \u4f1a\u7acb\u5373\u505c\u6b62\u5faa\u73af,\u6ca1\u6709\u5ef6\u65f6\u3002 event_base_loopbreak \u8ba9 event_base \u7acb\u5373\u9000\u51fa\u5faa\u73af\u3002\u5b83\u4e0e event_base_loopexit(base,NULL) \u7684\u4e0d\u540c\u5728\u4e8e,\u5982\u679c event_base \u5f53\u524d\u6b63\u5728\u6267\u884c\u6fc0\u6d3b\u4e8b\u4ef6\u7684\u56de\u8c03 ,\u5b83\u5c06\u5728\u6267\u884c\u5b8c\u5f53\u524d\u6b63\u5728\u5904\u7406\u7684\u4e8b\u4ef6\u540e\u7acb\u5373\u9000\u51fa\u3002 event_base_got_exit \u5224\u65ad\u9000\u51fa\u5faa\u73af\u7684\u539f\u56e0\u662f\u5426\u662f\u56e0\u4e3a\u8c03\u7528 event_base_loopexit \u5bfc\u81f4\u7684 event_base_got_break \u5224\u65ad\u9000\u51fa\u5faa\u73af\u7684\u539f\u56e0\u662f\u5426\u662f\u56e0\u4e3a\u8c03\u7528 event_base_loopbreak \u5bfc\u81f4\u7684 event\u4e8b\u4ef6 \u4e00\u4e2a\u4e8b\u4ef6\u521b\u5efa\u540e\u88ab\u5173\u8054\u5230 event_base \u4e2d\u540e\u5c31\u53d8\u6210\u4e86\u5df2\u521d\u59cb\u5316\u7684\u72b6\u6001\uff0c\u7136\u540e\u5c06\u4e8b\u4ef6\u6dfb\u52a0\u5230 event_base \u4e2d\u5c31\u4f1a\u4f7f\u4e8b\u4ef6\u8fdb\u5165\u672a\u51b3\u72b6\u6001\uff0c\u5728\u672a\u51b3\u72b6\u6001\u4e0b\u5982\u679c\u4e8b\u4ef6\u72b6\u6001\u53d1\u751f\u4e86\u53d8\u5316\uff0c\u5c31\u4f1a\u8fdb\u884c\u6fc0\u6d3b\u72b6\u6001\u3002 \u4e8b\u4ef6\u7684\u56de\u8c03\u51fd\u6570\u5c31\u4f1a\u88ab\u6267\u884c\uff0c\u6267\u884c\u5b8c\u6210\u540e\u4e8b\u4ef6\u5c31\u4e0d\u518d\u662f\u672a\u51b3\u72b6\u6001\uff0c\u9700\u8981\u91cd\u65b0\u6dfb\u52a0\u5230 event_base \u4e2d\uff0c\u53ef\u4ee5\u8bbe\u7f6e\u4e8b\u4ef6\u4e3a persistent \u7684\uff0c\u90a3\u4e48\u4e8b\u4ef6\u5c31\u4f1a\u59cb\u7ec8\u4fdd\u6301\u662f\u672a\u51b3\u7684\uff0c\u4e0d\u7528\u6bcf\u6b21\u90fd\u6dfb\u52a0\u5230 event_base \u4e2d \u6bcf\u4e2a\u8fdb\u7a0b\u4efb\u4f55\u65f6\u523b\u53ea\u80fd\u6709\u4e00\u4e2a event_base \u53ef\u4ee5\u76d1 \u542c\u4fe1\u53f7\u3002\u5982\u679c\u540c\u65f6\u5411\u4e24\u4e2a event_base \u6dfb\u52a0\u4fe1\u53f7\u4e8b\u4ef6,\u5373\u4f7f\u662f\u4e0d\u540c\u7684\u4fe1\u53f7,\u4e5f\u53ea\u6709\u4e00\u4e2a event_base \u53ef\u4ee5\u53d6\u5f97\u4fe1\u53f7\u3002 event_base_dump_events \u5c06\u5f53\u524d event_base \u4e2d\u7684\u4e8b\u4ef6\u5b8c\u6574\u7684dump\u51fa\u6765 event_new \u521b\u5efa\u4e00\u4e2a\u4e8b\u4ef6 event_free \u91ca\u653e\u4e00\u4e2a\u4e8b\u4ef6 evsignal_new \u672c\u8d28\u4e0a\u5c31\u662f event_new \u7ed3\u5408EV_SIGNAL\u7684\u6807\u5fd7 event_base_once \u521b\u5efa\u4e00\u4e2a\u4e00\u6b21\u6027\u4e8b\u4ef6\uff0c\u4e8b\u4ef6\u89e6\u53d1\u540e\u6267\u884c\u5b8c\u56de\u8c03\u540e\u4f1a\u91ca\u653e event \u7ed3\u6784 event_active \u6fc0\u6d3b\u4e8b\u4ef6(\u4e8b\u4ef6\u4e0d\u9700\u8981\u5df2\u7ecf\u5904\u4e8e\u672a\u51b3\u72b6\u6001,\u6fc0\u6d3b\u4e8b\u4ef6\u4e5f\u4e0d\u4f1a\u8ba9\u5b83\u6210\u4e3a\u672a\u51b3\u7684) \u4e0d\u80fd\u5220\u9664\u6216\u8005\u624b\u52a8\u6fc0\u6d3b\u4f7f\u7528 event_base_once \u63d2\u5165\u7684\u4e8b\u4ef6:\u5982\u679c\u5e0c\u671b\u80fd\u591f\u53d6\u6d88\u4e8b\u4ef6, \u5e94\u8be5\u4f7f\u7528 event_new \u6216\u8005 event_assign \u3002 1 2 #define evsignal_new(base, signum, cb, arg) \\ event_new(base, signum, EV_SIGNAL|EV_PERSIST, cb, arg) evtimer_new event_add \u4f7f\u4e8b\u4ef6\u53d8\u6210\u672a\u51b3\u72b6\u6001\uff0c\u5728\u672a\u51b3\u72b6\u6001\u4e0b\u4e8b\u4ef6\u7684\u72b6\u6001\u53d1\u751f\u53d8\u5316\u5c31\u4f1a\u89e6\u53d1 event_base \u8fd4\u56de event_del \u5c06\u4e8b\u4ef6\u8bbe\u7f6e\u6210\u975e\u672a\u51b3\u72b6\u6001 event\u4e8b\u4ef6\u6807\u5fd7 EV_TIMEOUT \u8d85\u65f6\u4e8b\u4ef6 EV_READ \u53ef\u8bfb\u4e8b\u4ef6 EV_WRITE \u53ef\u5199\u4e8b\u4ef6 EV_SIGNAL \u4fe1\u53f7\u4e8b\u4ef6 EV_PERSIST \u59cb\u7ec8\u8ba9\u4e8b\u4ef6\u4fdd\u6301\u672a\u51b3\u72b6\u6001 EV_ET \u8fb9\u7f18\u89e6\u53d1 \u4e8b\u4ef6\u72b6\u6001\u67e5\u8be2 event_get_signal(ev) \u83b7\u53d6\u4e8b\u4ef6\u6ce8\u518c\u7684\u4fe1\u53f7\u503c event_get_fd \u83b7\u53d6\u4e8b\u4ef6\u5bf9\u5e94\u7684fd event_get_base \u83b7\u53d6\u4e8b\u4ef6\u5bf9\u5e94\u7684event_base event_get_events \u83b7\u53d6\u4e8b\u4ef6\u5bf9\u5e94\u7684\u4e8b\u4ef6\u6807\u5fd7 event_get_callback \u83b7\u53d6\u4e8b\u4ef6\u5bf9\u5e94\u7684callback event_get_callback_arg \u83b7\u53d6\u4e8b\u4ef6\u5bf9\u5e94\u7684callback\u53c2\u6570 event_get_priority \u83b7\u53d6\u4e8b\u4ef6\u5bf9\u5e94\u7684\u4f18\u5148\u7ea7 event_get_assignment \u53ef\u4ee5\u4e00\u6b21\u6027\u83b7\u53d6\u4e8b\u4ef6\u6240\u6709\u7684\u72b6\u6001\u4fe1\u606f bufferevent\u548cevbuffer bufferevent\u6709\u56db\u4e2a\u6c34\u4f4d(\u8bfb\u53d6\u4f4e\u6c34\u4f4d\u3001\u8bfb\u53d6\u9ad8\u6c34\u4f4d\u3001\u5199\u5165\u4f4e\u6c34\u4f4d\u3001\u5199\u5165\u9ad8\u6c34\u4f4d) BEV_OPT_CLOSE_ON_FREE BEV_OPT_THREADSAFE BEV_OPT_DEFER_CALLBACKS BEV_OPT_UNLOCK_CALLBACKS bufferevent_socket_new bufferevent_socket_connect bufferevent_setcb bufferevent_free bufferevent_getcb bufferevent_enable bufferevent_disable bufferevent_get_enabled bufferevent_setwatermark bufferevent \u5185\u90e8\u5177\u6709\u5f15\u7528\u8ba1\u6570,\u6240\u4ee5,\u5982\u679c\u91ca\u653e\u65f6\u8fd8\u6709\u672a\u51b3\u7684\u5ef6\u8fdf\u56de\u8c03,\u5219\u5728\u56de\u8c03\u5b8c\u6210\u4e4b\u524d bufferevent \u4e0d\u4f1a\u88ab\u5220\u9664\u3002","title":"Libevent"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/libevent/#libevent-note","text":"\u521b\u5efa\u548c\u91ca\u653e event_base event_base_new \u7528\u4e8e\u521b\u5efa\u4e00\u4e2a event_base \u7ed3\u6784\uff0c event_base \u5c31\u7b49\u540c\u4e8e\u4e00\u4e2a EventLoop \uff0c\u5982\u679c\u4e0d\u6ee1\u8db3\u9ed8\u8ba4\u521b\u5efa\u7684 event_base \uff0c \u60f3\u5bf9\u5176\u8fdb\u884c\u4e00\u4e9b\u53c2\u6570\u7684\u8c03\u6574\u53ef\u4ee5\u901a\u8fc7 event_base_new_with_config \u6765\u521b\u5efa event_base \uff0c\u5982\u679c\u4e00\u4e2a\u8fdb\u7a0b\u8fdb\u884c\u4e86fork \u8981\u60f3fork\u540e\u7684event_base\u4ecd\u7136\u6709\u6548\uff0c\u9700\u8981\u8c03\u7528 event_reinit \u6765\u8fdb\u884c\u91cd\u65b0\u521d\u59cb\u5316\u3002 event_base_free \u91ca\u653e event_base \u7684\u7ed3\u6784\uff0c\u4f46\u662f\u4e0d\u662f\u91ca\u653e\u548c\u8fd9\u4e2a event_base \u6240\u5173\u8054\u7684\u4e8b\u4ef6\u548c\u5957\u63a5\u5b57\u7b49\u3002 event_base \u67e5\u8be2 event_get_supported_methods \u8fd4\u56delibevent\u5728\u5f53\u524dOS\u4e0a\u652f\u6301\u7684\u4e8b\u4ef6\u673a\u5236\u7684\u7c7b\u578b event_base_get_method \u8fd4\u56de\u5f53\u524d event_base \u4f7f\u7528\u7684\u4e8b\u4ef6\u673a\u5236\u7c7b\u578b event_base_get_features \u8fd4\u56de\u5f53\u524d event_base \u652f\u6301\u7684features event_base \u4f18\u5148\u7ea7 event_base_priority_init \u7528\u6237\u521d\u59cb\u5316 event_base \u652f\u6301\u7684\u4f18\u5148\u7ea7\u6570\u91cf\uff0c\u9ed8\u8ba4\u53ea\u652f\u6301\u5355\u4e2a\u4f18\u5148\u7ea7\uff0c\u8fd9\u4e2a\u51fd\u6570\u9700\u8981\u5728 event_base \u521b\u5efa\u540e\u7acb\u523b\u6267\u884c \u5e38\u91cf EVENT_MAX_PRIORITIES \u8868\u793a\u7684\u5219\u662f\u4e8b\u4ef6\u7684\u6700\u5927\u4f18\u5148\u7ea7\u6570\u91cf\uff0c\u521b\u5efa\u4e8b\u4ef6\u7684\u65f6\u5019\u53ef\u4ee5\u7ed9\u4e8b\u4ef6\u6307\u5b9a\u4f18\u5148\u7ea7\u3002 event_priority_set \u8bbe\u7f6e\u4e8b\u4ef6\u7684\u4f18\u5148\u7ea7 \u5982\u679c\u4e0d\u4e3a\u4e8b\u4ef6\u8bbe\u7f6e\u4f18\u5148\u7ea7,\u5219\u9ed8\u8ba4\u7684\u4f18\u5148\u7ea7\u5c06\u4f1a\u662f event_base \u7684\u4f18\u5148\u7ea7\u6570\u76ee\u9664\u4ee52\u3002 EventLoop\u8fd0\u884c event_base_loop \u7528\u4e8e\u8fd0\u884c\u4e8b\u4ef6\u5faa\u73af\uff0c\u6709\u4e09\u79cd\u6a21\u5f0f\uff0c\u5206\u522b\u4e3a EVLOOP_NO_EXIT_ON_EMPTY \u3001 EVLOOP_NONBLOCK \u3001 EVLOOP_ONCE 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 while (any events are registered with the loop, or EVLOOP_NO_EXIT_ON_EMPTY was set) { if (EVLOOP_NONBLOCK was set, or any events are already active) If any registered events have triggered, mark them active. else Wait until at least one event has triggered, and mark it active. for (p = 0; p < n_priorities; ++p) { if (any event with priority of p is active) { Run all active events with priority of p. break; /* Do not run any events of a less important priority */ } } if (EVLOOP_ONCE was set or EVLOOP_NONBLOCK was set) break; } EVLOOP_NONBLOCK\u548cEVLOOP_ONCE\u7684\u533a\u522b\u5728\u4e8e\u524d\u8005\u5e76\u4e0d\u5faa\u73af\u7b49\u5f85\u4e8b\u4ef6\u89e6\u53d1\uff0c\u5faa\u73af\u4ec5\u4ec5\u76f4\u63a5\u68c0\u6d4b\u662f\u5426\u6709\u4e8b\u4ef6\u5df2\u7ecf\u5c31\u7eea\uff0c\u6709\u7684\u8bdd\u5c31\u7acb\u5373\u89e6\u53d1\uff0c\u7136\u540e\u6267\u884c\u4e8b\u4ef6\u56de\u8c03 \u540e\u8005\u4f1a\u5faa\u73af\u7b49\u5f85\u4e8b\u4ef6\u89e6\u53d1\uff0c\u7136\u540e\u6fc0\u6d3b\u4e8b\u4ef6\u6267\u884c\u4e8b\u4ef6\u56de\u8c03\u3002 event_base_dispatch \u7b49\u540c\u4e8e event_base_loop \u6ca1\u6709\u52a0\u4efb\u4f55\u6807\u5fd7\uff0c\u4f1a\u4e00\u76f4\u8fd0\u884c\uff0c\u76f4\u5230\u6ca1\u6709\u4efb\u4f55\u6ce8\u518c\u7684\u4e8b\u4ef6\u3002 \u6216\u8005\u8c03\u7528 event_base_loopbreak \u548c event_base_loopexit \u4e3a\u6b62 \u505c\u6b62EventLoop event_base_loopexit \u8ba9 event_base \u5728\u7ed9\u5b9a\u65f6\u95f4\u4e4b\u540e\u505c\u6b62\u5faa\u73af\u3002\u5982\u679c tv \u53c2\u6570\u4e3a NULL, event_base \u4f1a\u7acb\u5373\u505c\u6b62\u5faa\u73af,\u6ca1\u6709\u5ef6\u65f6\u3002 event_base_loopbreak \u8ba9 event_base \u7acb\u5373\u9000\u51fa\u5faa\u73af\u3002\u5b83\u4e0e event_base_loopexit(base,NULL) \u7684\u4e0d\u540c\u5728\u4e8e,\u5982\u679c event_base \u5f53\u524d\u6b63\u5728\u6267\u884c\u6fc0\u6d3b\u4e8b\u4ef6\u7684\u56de\u8c03 ,\u5b83\u5c06\u5728\u6267\u884c\u5b8c\u5f53\u524d\u6b63\u5728\u5904\u7406\u7684\u4e8b\u4ef6\u540e\u7acb\u5373\u9000\u51fa\u3002 event_base_got_exit \u5224\u65ad\u9000\u51fa\u5faa\u73af\u7684\u539f\u56e0\u662f\u5426\u662f\u56e0\u4e3a\u8c03\u7528 event_base_loopexit \u5bfc\u81f4\u7684 event_base_got_break \u5224\u65ad\u9000\u51fa\u5faa\u73af\u7684\u539f\u56e0\u662f\u5426\u662f\u56e0\u4e3a\u8c03\u7528 event_base_loopbreak \u5bfc\u81f4\u7684 event\u4e8b\u4ef6 \u4e00\u4e2a\u4e8b\u4ef6\u521b\u5efa\u540e\u88ab\u5173\u8054\u5230 event_base \u4e2d\u540e\u5c31\u53d8\u6210\u4e86\u5df2\u521d\u59cb\u5316\u7684\u72b6\u6001\uff0c\u7136\u540e\u5c06\u4e8b\u4ef6\u6dfb\u52a0\u5230 event_base \u4e2d\u5c31\u4f1a\u4f7f\u4e8b\u4ef6\u8fdb\u5165\u672a\u51b3\u72b6\u6001\uff0c\u5728\u672a\u51b3\u72b6\u6001\u4e0b\u5982\u679c\u4e8b\u4ef6\u72b6\u6001\u53d1\u751f\u4e86\u53d8\u5316\uff0c\u5c31\u4f1a\u8fdb\u884c\u6fc0\u6d3b\u72b6\u6001\u3002 \u4e8b\u4ef6\u7684\u56de\u8c03\u51fd\u6570\u5c31\u4f1a\u88ab\u6267\u884c\uff0c\u6267\u884c\u5b8c\u6210\u540e\u4e8b\u4ef6\u5c31\u4e0d\u518d\u662f\u672a\u51b3\u72b6\u6001\uff0c\u9700\u8981\u91cd\u65b0\u6dfb\u52a0\u5230 event_base \u4e2d\uff0c\u53ef\u4ee5\u8bbe\u7f6e\u4e8b\u4ef6\u4e3a persistent \u7684\uff0c\u90a3\u4e48\u4e8b\u4ef6\u5c31\u4f1a\u59cb\u7ec8\u4fdd\u6301\u662f\u672a\u51b3\u7684\uff0c\u4e0d\u7528\u6bcf\u6b21\u90fd\u6dfb\u52a0\u5230 event_base \u4e2d \u6bcf\u4e2a\u8fdb\u7a0b\u4efb\u4f55\u65f6\u523b\u53ea\u80fd\u6709\u4e00\u4e2a event_base \u53ef\u4ee5\u76d1 \u542c\u4fe1\u53f7\u3002\u5982\u679c\u540c\u65f6\u5411\u4e24\u4e2a event_base \u6dfb\u52a0\u4fe1\u53f7\u4e8b\u4ef6,\u5373\u4f7f\u662f\u4e0d\u540c\u7684\u4fe1\u53f7,\u4e5f\u53ea\u6709\u4e00\u4e2a event_base \u53ef\u4ee5\u53d6\u5f97\u4fe1\u53f7\u3002 event_base_dump_events \u5c06\u5f53\u524d event_base \u4e2d\u7684\u4e8b\u4ef6\u5b8c\u6574\u7684dump\u51fa\u6765 event_new \u521b\u5efa\u4e00\u4e2a\u4e8b\u4ef6 event_free \u91ca\u653e\u4e00\u4e2a\u4e8b\u4ef6 evsignal_new \u672c\u8d28\u4e0a\u5c31\u662f event_new \u7ed3\u5408EV_SIGNAL\u7684\u6807\u5fd7 event_base_once \u521b\u5efa\u4e00\u4e2a\u4e00\u6b21\u6027\u4e8b\u4ef6\uff0c\u4e8b\u4ef6\u89e6\u53d1\u540e\u6267\u884c\u5b8c\u56de\u8c03\u540e\u4f1a\u91ca\u653e event \u7ed3\u6784 event_active \u6fc0\u6d3b\u4e8b\u4ef6(\u4e8b\u4ef6\u4e0d\u9700\u8981\u5df2\u7ecf\u5904\u4e8e\u672a\u51b3\u72b6\u6001,\u6fc0\u6d3b\u4e8b\u4ef6\u4e5f\u4e0d\u4f1a\u8ba9\u5b83\u6210\u4e3a\u672a\u51b3\u7684) \u4e0d\u80fd\u5220\u9664\u6216\u8005\u624b\u52a8\u6fc0\u6d3b\u4f7f\u7528 event_base_once \u63d2\u5165\u7684\u4e8b\u4ef6:\u5982\u679c\u5e0c\u671b\u80fd\u591f\u53d6\u6d88\u4e8b\u4ef6, \u5e94\u8be5\u4f7f\u7528 event_new \u6216\u8005 event_assign \u3002 1 2 #define evsignal_new(base, signum, cb, arg) \\ event_new(base, signum, EV_SIGNAL|EV_PERSIST, cb, arg) evtimer_new event_add \u4f7f\u4e8b\u4ef6\u53d8\u6210\u672a\u51b3\u72b6\u6001\uff0c\u5728\u672a\u51b3\u72b6\u6001\u4e0b\u4e8b\u4ef6\u7684\u72b6\u6001\u53d1\u751f\u53d8\u5316\u5c31\u4f1a\u89e6\u53d1 event_base \u8fd4\u56de event_del \u5c06\u4e8b\u4ef6\u8bbe\u7f6e\u6210\u975e\u672a\u51b3\u72b6\u6001 event\u4e8b\u4ef6\u6807\u5fd7 EV_TIMEOUT \u8d85\u65f6\u4e8b\u4ef6 EV_READ \u53ef\u8bfb\u4e8b\u4ef6 EV_WRITE \u53ef\u5199\u4e8b\u4ef6 EV_SIGNAL \u4fe1\u53f7\u4e8b\u4ef6 EV_PERSIST \u59cb\u7ec8\u8ba9\u4e8b\u4ef6\u4fdd\u6301\u672a\u51b3\u72b6\u6001 EV_ET \u8fb9\u7f18\u89e6\u53d1 \u4e8b\u4ef6\u72b6\u6001\u67e5\u8be2 event_get_signal(ev) \u83b7\u53d6\u4e8b\u4ef6\u6ce8\u518c\u7684\u4fe1\u53f7\u503c event_get_fd \u83b7\u53d6\u4e8b\u4ef6\u5bf9\u5e94\u7684fd event_get_base \u83b7\u53d6\u4e8b\u4ef6\u5bf9\u5e94\u7684event_base event_get_events \u83b7\u53d6\u4e8b\u4ef6\u5bf9\u5e94\u7684\u4e8b\u4ef6\u6807\u5fd7 event_get_callback \u83b7\u53d6\u4e8b\u4ef6\u5bf9\u5e94\u7684callback event_get_callback_arg \u83b7\u53d6\u4e8b\u4ef6\u5bf9\u5e94\u7684callback\u53c2\u6570 event_get_priority \u83b7\u53d6\u4e8b\u4ef6\u5bf9\u5e94\u7684\u4f18\u5148\u7ea7 event_get_assignment \u53ef\u4ee5\u4e00\u6b21\u6027\u83b7\u53d6\u4e8b\u4ef6\u6240\u6709\u7684\u72b6\u6001\u4fe1\u606f bufferevent\u548cevbuffer bufferevent\u6709\u56db\u4e2a\u6c34\u4f4d(\u8bfb\u53d6\u4f4e\u6c34\u4f4d\u3001\u8bfb\u53d6\u9ad8\u6c34\u4f4d\u3001\u5199\u5165\u4f4e\u6c34\u4f4d\u3001\u5199\u5165\u9ad8\u6c34\u4f4d) BEV_OPT_CLOSE_ON_FREE BEV_OPT_THREADSAFE BEV_OPT_DEFER_CALLBACKS BEV_OPT_UNLOCK_CALLBACKS bufferevent_socket_new bufferevent_socket_connect bufferevent_setcb bufferevent_free bufferevent_getcb bufferevent_enable bufferevent_disable bufferevent_get_enabled bufferevent_setwatermark bufferevent \u5185\u90e8\u5177\u6709\u5f15\u7528\u8ba1\u6570,\u6240\u4ee5,\u5982\u679c\u91ca\u653e\u65f6\u8fd8\u6709\u672a\u51b3\u7684\u5ef6\u8fdf\u56de\u8c03,\u5219\u5728\u56de\u8c03\u5b8c\u6210\u4e4b\u524d bufferevent \u4e0d\u4f1a\u88ab\u5220\u9664\u3002","title":"Libevent Note"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/memory_order/","text":"C++ Memory Order \u73b0\u4ee3\u7f16\u8bd1\u5668\u7684\u4ee3\u7801\u4f18\u5316\u548c\u7f16\u8bd1\u5668\u7684\u6307\u4ee4\u91cd\u6392\u53ef\u80fd\u4f1a\u5f71\u54cd\u5230\u4ee3\u7801\u7684\u6267\u884c\u987a\u5e8f\uff0c\u7f16\u8bd1\u671f\u6307\u4ee4\u91cd\u6392\u662f\u901a\u8fc7\u8c03\u6574\u4ee3\u7801\u4e2d\u7684\u6307\u4ee4\u987a\u5e8f\uff0c\u5728\u4e0d\u6539\u53d8\u4ee3\u7801\u8bed\u4e49\u7684\u524d\u63d0\u4e0b\uff0c\u5bf9\u53d8\u91cf\u8bbf\u95ee\u8fdb\u884c\u4f18\u5316\u3002\u4ece\u800c\u5c3d\u53ef\u80fd\u7684\u51cf\u5c11\u5bf9\u5bc4\u5b58\u5668\u7684\u8bfb\u53d6\u548c\u5b58\u50a8\uff0c\u5e76\u5145\u5206\u590d\u7528\u5bc4\u5b58\u5668\u3002 \u4f46\u662f\u7f16\u8bd1\u5668\u5bf9\u6570\u636e\u7684\u4f9d\u8d56\u5173\u7cfb\u5224\u65ad\u53ea\u80fd\u5728\u5355\u6267\u884c\u6d41\u5185\uff0c\u65e0\u6cd5\u5224\u65ad\u5176\u4ed6\u6267\u884c\u6d41\u5bf9\u7ade\u4e89\u6570\u636e\u7684\u4f9d\u8d56\u5173\u7cfb\u3002\u5c31\u62ff\u65e0\u9501\u73af\u5f62\u961f\u5217\u6765\u8bf4\uff0c\u5982\u679cWriter\u505a\u7684\u662f\u5148\u653e\u7f6e\u6570\u636e\uff0c\u518d\u66f4\u65b0\u7d22\u5f15\u7684\u884c\u4e3a\u3002\u5982\u679c\u7d22\u5f15\u5148\u4e8e\u6570\u636e\u66f4\u65b0\uff0cReader\u5c31\u6709\u53ef\u80fd\u4f1a\u56e0\u4e3a\u5224\u65ad\u7d22\u5f15\u5df2\u66f4\u65b0\u800c\u8bfb\u5230\u810f\u6570\u636e\u3002 \u867d\u7136\u6211\u4eec\u53ef\u4ee5\u7981\u6b62\u7f16\u8bd1\u5668\u5bf9\u8fd9\u7c7b\u53d8\u91cf\u7684\u4f18\u5316\uff0c\u4ee5\u6b64\u6765\u89e3\u51b3\u7f16\u8bd1\u5668\u91cd\u6392\u5e8f\u7684\u95ee\u9898\uff0c\u4f46\u662f\u8fd9\u662f\u4e0d\u591f\u7684\uff0c\u56e0\u4e3aCPU\u8fd8\u6709\u53ef\u80fd\u4f1a\u4e71\u5e8f\u6267\u884c\u7684\u7279\u6027\u3002\u6d41\u6c34\u7ebf\uff08Pipeline\uff09\u548c\u4e71\u5e8f\u6267\u884c\u662f\u73b0\u4ee3CPU\u57fa\u672c\u90fd\u5177\u6709\u7684\u7279\u6027\u3002\u673a\u5668\u6307\u4ee4\u5728\u6d41\u6c34\u7ebf\u4e2d\u7ecf\u5386\u53d6\u6307\u3001\u8bd1\u7801\u3001\u6267\u884c\u3001\u8bbf\u5b58\u3001\u5199\u56de\u7b49\u64cd\u4f5c\u3002 \u4e3a\u4e86CPU\u7684\u6267\u884c\u6548\u7387\uff0c\u6d41\u6c34\u7ebf\u90fd\u662f\u5e76\u884c\u5904\u7406\u7684\uff0c\u5728\u4e0d\u5f71\u54cd\u8bed\u4e49\u7684\u60c5\u51b5\u4e0b\u3002\u5904\u7406\u5668\u6b21\u5e8f\uff08Process Ordering\uff0c\u673a\u5668\u6307\u4ee4\u5728CPU\u5b9e\u9645\u6267\u884c\u65f6\u7684\u987a\u5e8f\uff09\u548c\u7a0b\u5e8f\u6b21\u5e8f\uff08Program Ordering\uff0c\u7a0b\u5e8f\u4ee3\u7801\u7684\u903b\u8f91\u6267\u884c\u987a\u5e8f\uff09\u662f\u5141\u8bb8\u4e0d\u4e00\u81f4\u7684\uff0c\u5373\u6ee1\u8db3As-if-Serial\u7279\u6027\u3002 \u663e\u7136\uff0c\u8fd9\u91cc\u7684\u4e0d\u5f71\u54cd\u8bed\u4e49\u4f9d\u65e7\u53ea\u80fd\u662f\u4fdd\u8bc1\u6307\u4ee4\u95f4\u7684\u663e\u5f0f\u56e0\u679c\u5173\u7cfb\uff0c\u65e0\u6cd5\u4fdd\u8bc1\u9690\u5f0f\u56e0\u679c\u5173\u7cfb\u3002\u5373\u65e0\u6cd5\u4fdd\u8bc1\u8bed\u4e49\u4e0a\u4e0d\u76f8\u5173\u4f46\u662f\u5728\u7a0b\u5e8f\u903b\u8f91\u4e0a\u76f8\u5173\u7684\u64cd\u4f5c\u5e8f\u5217\u6309\u5e8f\u6267\u884c\u3002\u4ece\u6b64\u5355\u6838\u65f6\u4ee3CPU\u7684Self-Consistent\u7279\u6027\u5728\u591a\u6838\u65f6\u4ee3\u5df2\u4e0d\u5b58\u5728\uff0c\u591a\u6838CPU\u4f5c\u4e3a\u4e00\u4e2a\u6574\u4f53\u770b\uff0c\u4e0d\u518d\u6ee1\u8db3Self-Consistent\u7279\u6027\u3002 \u7b80\u5355\u603b\u7ed3\u4e00\u4e0b\uff0c\u5982\u679c\u4e0d\u505a\u591a\u4f59\u7684\u9632\u62a4\u63aa\u65bd\uff0c\u5355\u6838\u65f6\u4ee3\u7684\u65e0\u9501\u73af\u5f62\u961f\u5217\u5728\u591a\u6838CPU\u4e2d\uff0c\u4e00\u4e2aCPU\u6838\u5fc3\u4e0a\u7684Writer\u5199\u5165\u6570\u636e\uff0c\u66f4\u65b0index\u540e\u3002\u53e6\u4e00\u4e2aCPU\u6838\u5fc3\u4e0a\u7684Reader\u4f9d\u9760\u8fd9\u4e2aindex\u6765\u5224\u65ad\u6570\u636e\u662f\u5426\u5199\u5165\u7684\u65b9\u5f0f\u4e0d\u4e00\u5b9a\u53ef\u9760\u3002index\u6709\u53ef\u80fd\u5148\u4e8e\u6570\u636e\u88ab\u5199\u5165\uff0c\u4ece\u800c\u5bfc\u81f4Reader\u8bfb\u5230\u810f\u6570\u636e\u3002 \u7f16\u8bd1\u5668\u7684\u4f18\u5316\u4e71\u5e8f\u548cCP\bU\u7684\u6267\u884c\u4e71\u5e8f\u95ee\u9898\u53ef\u4ee5\u901a\u8fc7\u4f18\u5316\u5c4f\u969c\u548c\u5185\u5b58\u5c4f\u969c\u4e24\u79cd\u673a\u5236\u6765\u89e3\u51b3\u3002 \u4f18\u5316\u5c4f\u969c (Optimization Barrier\uff1a\u907f\u514d\u7f16\u8bd1\u5668\u7684\u91cd\u6392\u5e8f\u4f18\u5316\u64cd\u4f5c\uff0c\u4fdd\u8bc1\u7f16\u8bd1\u7a0b\u5e8f\u65f6\u5728\u4f18\u5316\u5c4f\u969c\u4e4b\u524d\u7684\u6307\u4ee4\u4e0d\u4f1a\u5728\u4f18\u5316\u5c4f\u969c\u4e4b\u540e\u6267\u884c\u3002\u8fd9\u5c31\u4fdd\u8bc1\u4e86\u7f16\u8bd1\u65f6\u671f\u7684\u4f18\u5316\u4e0d\u4f1a\u5f71\u54cd\u5230\u5b9e\u9645\u4ee3\u7801\u903b\u8f91\u987a\u5e8f\u3002 1 2 /* The \"volatile\" is due to gcc bugs */ #define barrier() __asm__ __volatile__(\"\": : :\"memory\") \u4f18\u5316\u5c4f\u969c\u544a\u77e5\u7f16\u8bd1\u5668: 1 2 1. \u5185\u5b58\u4fe1\u606f\u5df2\u7ecf\u4fee\u6539\uff0c\u5c4f\u969c\u540e\u7684\u5bc4\u5b58\u5668\u7684\u503c\u5fc5\u987b\u4ece\u5185\u5b58\u4e2d\u91cd\u65b0\u83b7\u53d6 2. \u5fc5\u987b\u6309\u7167\u4ee3\u7801\u987a\u5e8f\u4ea7\u751f\u6c47\u7f16\u4ee3\u7801\uff0c\u4e0d\u5f97\u8d8a\u8fc7\u5c4f\u969c \u5185\u5b58\u5c4f\u969c (Memory Barrier\u5206\u4e3a\u5199\u5c4f\u969c\uff08Store Barrier\uff09\u3001\u8bfb\u5c4f\u969c\uff08Load Barrier\uff09\u548c\u5168\u5c4f\u969c\uff08Full Barrier\uff09\uff0c\u5176\u4f5c\u7528\u6709\u4e24\u4e2a\uff1a \u9632\u6b62\u6307\u4ee4\u4e4b\u95f4\u7684\u91cd\u6392\u5e8f \u4fdd\u8bc1\u6570\u636e\u7684\u53ef\u89c1\u6027 \u5173\u4e8e\u7b2c\u4e00\u70b9\uff0c\u5173\u4e8e\u6307\u4ee4\u91cd\u6392\uff0c\u8fd9\u91cc\u4e0d\u8003\u8651\u67b6\u6784\u7684\u8bdd\uff0cLoad\u548cStore\u4e24\u79cd\u64cd\u4f5c\u4f1a\u6709Load-Store\u3001Store-Load\u3001Load-Load\u3001Store-Store\u8fd9\u56db\u79cd\u53ef\u80fd\u7684\u4e71\u5e8f\u7ed3\u679c\u3002 \u4e0a\u6587\u63d0\u5230\u7684\u4e09\u79cd\u5c4f\u969c\u5219\u662f\u9650\u5236\u8fd9\u4e9b\u4e0d\u540c\u4e71\u5e8f\u7684\u673a\u5236\u3002 \u5173\u4e8e\u7b2c\u4e8c\u70b9\u3002\u5199\u5c4f\u969c\u4f1a\u963b\u585e\u76f4\u5230\u628aStore Buffer\u4e2d\u7684\u6570\u636e\u5237\u5230Cache\u4e2d\uff1b\u8bfb\u5c4f\u969c\u4f1a\u963b\u585e\u76f4\u5230Invalid Queue\u4e2d\u7684\u6d88\u606f\u6267\u884c\u5b8c\u6bd5\u3002\u4ee5\u6b64\u6765\u4fdd\u8bc1\u6838\u95f4\u5404\u7ea7\u6570\u636e\u7684\u4e00\u81f4\u6027\u3002","title":"C++ Memory Order"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/memory_order/#c-memory-order","text":"\u73b0\u4ee3\u7f16\u8bd1\u5668\u7684\u4ee3\u7801\u4f18\u5316\u548c\u7f16\u8bd1\u5668\u7684\u6307\u4ee4\u91cd\u6392\u53ef\u80fd\u4f1a\u5f71\u54cd\u5230\u4ee3\u7801\u7684\u6267\u884c\u987a\u5e8f\uff0c\u7f16\u8bd1\u671f\u6307\u4ee4\u91cd\u6392\u662f\u901a\u8fc7\u8c03\u6574\u4ee3\u7801\u4e2d\u7684\u6307\u4ee4\u987a\u5e8f\uff0c\u5728\u4e0d\u6539\u53d8\u4ee3\u7801\u8bed\u4e49\u7684\u524d\u63d0\u4e0b\uff0c\u5bf9\u53d8\u91cf\u8bbf\u95ee\u8fdb\u884c\u4f18\u5316\u3002\u4ece\u800c\u5c3d\u53ef\u80fd\u7684\u51cf\u5c11\u5bf9\u5bc4\u5b58\u5668\u7684\u8bfb\u53d6\u548c\u5b58\u50a8\uff0c\u5e76\u5145\u5206\u590d\u7528\u5bc4\u5b58\u5668\u3002 \u4f46\u662f\u7f16\u8bd1\u5668\u5bf9\u6570\u636e\u7684\u4f9d\u8d56\u5173\u7cfb\u5224\u65ad\u53ea\u80fd\u5728\u5355\u6267\u884c\u6d41\u5185\uff0c\u65e0\u6cd5\u5224\u65ad\u5176\u4ed6\u6267\u884c\u6d41\u5bf9\u7ade\u4e89\u6570\u636e\u7684\u4f9d\u8d56\u5173\u7cfb\u3002\u5c31\u62ff\u65e0\u9501\u73af\u5f62\u961f\u5217\u6765\u8bf4\uff0c\u5982\u679cWriter\u505a\u7684\u662f\u5148\u653e\u7f6e\u6570\u636e\uff0c\u518d\u66f4\u65b0\u7d22\u5f15\u7684\u884c\u4e3a\u3002\u5982\u679c\u7d22\u5f15\u5148\u4e8e\u6570\u636e\u66f4\u65b0\uff0cReader\u5c31\u6709\u53ef\u80fd\u4f1a\u56e0\u4e3a\u5224\u65ad\u7d22\u5f15\u5df2\u66f4\u65b0\u800c\u8bfb\u5230\u810f\u6570\u636e\u3002 \u867d\u7136\u6211\u4eec\u53ef\u4ee5\u7981\u6b62\u7f16\u8bd1\u5668\u5bf9\u8fd9\u7c7b\u53d8\u91cf\u7684\u4f18\u5316\uff0c\u4ee5\u6b64\u6765\u89e3\u51b3\u7f16\u8bd1\u5668\u91cd\u6392\u5e8f\u7684\u95ee\u9898\uff0c\u4f46\u662f\u8fd9\u662f\u4e0d\u591f\u7684\uff0c\u56e0\u4e3aCPU\u8fd8\u6709\u53ef\u80fd\u4f1a\u4e71\u5e8f\u6267\u884c\u7684\u7279\u6027\u3002\u6d41\u6c34\u7ebf\uff08Pipeline\uff09\u548c\u4e71\u5e8f\u6267\u884c\u662f\u73b0\u4ee3CPU\u57fa\u672c\u90fd\u5177\u6709\u7684\u7279\u6027\u3002\u673a\u5668\u6307\u4ee4\u5728\u6d41\u6c34\u7ebf\u4e2d\u7ecf\u5386\u53d6\u6307\u3001\u8bd1\u7801\u3001\u6267\u884c\u3001\u8bbf\u5b58\u3001\u5199\u56de\u7b49\u64cd\u4f5c\u3002 \u4e3a\u4e86CPU\u7684\u6267\u884c\u6548\u7387\uff0c\u6d41\u6c34\u7ebf\u90fd\u662f\u5e76\u884c\u5904\u7406\u7684\uff0c\u5728\u4e0d\u5f71\u54cd\u8bed\u4e49\u7684\u60c5\u51b5\u4e0b\u3002\u5904\u7406\u5668\u6b21\u5e8f\uff08Process Ordering\uff0c\u673a\u5668\u6307\u4ee4\u5728CPU\u5b9e\u9645\u6267\u884c\u65f6\u7684\u987a\u5e8f\uff09\u548c\u7a0b\u5e8f\u6b21\u5e8f\uff08Program Ordering\uff0c\u7a0b\u5e8f\u4ee3\u7801\u7684\u903b\u8f91\u6267\u884c\u987a\u5e8f\uff09\u662f\u5141\u8bb8\u4e0d\u4e00\u81f4\u7684\uff0c\u5373\u6ee1\u8db3As-if-Serial\u7279\u6027\u3002 \u663e\u7136\uff0c\u8fd9\u91cc\u7684\u4e0d\u5f71\u54cd\u8bed\u4e49\u4f9d\u65e7\u53ea\u80fd\u662f\u4fdd\u8bc1\u6307\u4ee4\u95f4\u7684\u663e\u5f0f\u56e0\u679c\u5173\u7cfb\uff0c\u65e0\u6cd5\u4fdd\u8bc1\u9690\u5f0f\u56e0\u679c\u5173\u7cfb\u3002\u5373\u65e0\u6cd5\u4fdd\u8bc1\u8bed\u4e49\u4e0a\u4e0d\u76f8\u5173\u4f46\u662f\u5728\u7a0b\u5e8f\u903b\u8f91\u4e0a\u76f8\u5173\u7684\u64cd\u4f5c\u5e8f\u5217\u6309\u5e8f\u6267\u884c\u3002\u4ece\u6b64\u5355\u6838\u65f6\u4ee3CPU\u7684Self-Consistent\u7279\u6027\u5728\u591a\u6838\u65f6\u4ee3\u5df2\u4e0d\u5b58\u5728\uff0c\u591a\u6838CPU\u4f5c\u4e3a\u4e00\u4e2a\u6574\u4f53\u770b\uff0c\u4e0d\u518d\u6ee1\u8db3Self-Consistent\u7279\u6027\u3002 \u7b80\u5355\u603b\u7ed3\u4e00\u4e0b\uff0c\u5982\u679c\u4e0d\u505a\u591a\u4f59\u7684\u9632\u62a4\u63aa\u65bd\uff0c\u5355\u6838\u65f6\u4ee3\u7684\u65e0\u9501\u73af\u5f62\u961f\u5217\u5728\u591a\u6838CPU\u4e2d\uff0c\u4e00\u4e2aCPU\u6838\u5fc3\u4e0a\u7684Writer\u5199\u5165\u6570\u636e\uff0c\u66f4\u65b0index\u540e\u3002\u53e6\u4e00\u4e2aCPU\u6838\u5fc3\u4e0a\u7684Reader\u4f9d\u9760\u8fd9\u4e2aindex\u6765\u5224\u65ad\u6570\u636e\u662f\u5426\u5199\u5165\u7684\u65b9\u5f0f\u4e0d\u4e00\u5b9a\u53ef\u9760\u3002index\u6709\u53ef\u80fd\u5148\u4e8e\u6570\u636e\u88ab\u5199\u5165\uff0c\u4ece\u800c\u5bfc\u81f4Reader\u8bfb\u5230\u810f\u6570\u636e\u3002 \u7f16\u8bd1\u5668\u7684\u4f18\u5316\u4e71\u5e8f\u548cCP\bU\u7684\u6267\u884c\u4e71\u5e8f\u95ee\u9898\u53ef\u4ee5\u901a\u8fc7\u4f18\u5316\u5c4f\u969c\u548c\u5185\u5b58\u5c4f\u969c\u4e24\u79cd\u673a\u5236\u6765\u89e3\u51b3\u3002 \u4f18\u5316\u5c4f\u969c (Optimization Barrier\uff1a\u907f\u514d\u7f16\u8bd1\u5668\u7684\u91cd\u6392\u5e8f\u4f18\u5316\u64cd\u4f5c\uff0c\u4fdd\u8bc1\u7f16\u8bd1\u7a0b\u5e8f\u65f6\u5728\u4f18\u5316\u5c4f\u969c\u4e4b\u524d\u7684\u6307\u4ee4\u4e0d\u4f1a\u5728\u4f18\u5316\u5c4f\u969c\u4e4b\u540e\u6267\u884c\u3002\u8fd9\u5c31\u4fdd\u8bc1\u4e86\u7f16\u8bd1\u65f6\u671f\u7684\u4f18\u5316\u4e0d\u4f1a\u5f71\u54cd\u5230\u5b9e\u9645\u4ee3\u7801\u903b\u8f91\u987a\u5e8f\u3002 1 2 /* The \"volatile\" is due to gcc bugs */ #define barrier() __asm__ __volatile__(\"\": : :\"memory\") \u4f18\u5316\u5c4f\u969c\u544a\u77e5\u7f16\u8bd1\u5668: 1 2 1. \u5185\u5b58\u4fe1\u606f\u5df2\u7ecf\u4fee\u6539\uff0c\u5c4f\u969c\u540e\u7684\u5bc4\u5b58\u5668\u7684\u503c\u5fc5\u987b\u4ece\u5185\u5b58\u4e2d\u91cd\u65b0\u83b7\u53d6 2. \u5fc5\u987b\u6309\u7167\u4ee3\u7801\u987a\u5e8f\u4ea7\u751f\u6c47\u7f16\u4ee3\u7801\uff0c\u4e0d\u5f97\u8d8a\u8fc7\u5c4f\u969c \u5185\u5b58\u5c4f\u969c (Memory Barrier\u5206\u4e3a\u5199\u5c4f\u969c\uff08Store Barrier\uff09\u3001\u8bfb\u5c4f\u969c\uff08Load Barrier\uff09\u548c\u5168\u5c4f\u969c\uff08Full Barrier\uff09\uff0c\u5176\u4f5c\u7528\u6709\u4e24\u4e2a\uff1a \u9632\u6b62\u6307\u4ee4\u4e4b\u95f4\u7684\u91cd\u6392\u5e8f \u4fdd\u8bc1\u6570\u636e\u7684\u53ef\u89c1\u6027 \u5173\u4e8e\u7b2c\u4e00\u70b9\uff0c\u5173\u4e8e\u6307\u4ee4\u91cd\u6392\uff0c\u8fd9\u91cc\u4e0d\u8003\u8651\u67b6\u6784\u7684\u8bdd\uff0cLoad\u548cStore\u4e24\u79cd\u64cd\u4f5c\u4f1a\u6709Load-Store\u3001Store-Load\u3001Load-Load\u3001Store-Store\u8fd9\u56db\u79cd\u53ef\u80fd\u7684\u4e71\u5e8f\u7ed3\u679c\u3002 \u4e0a\u6587\u63d0\u5230\u7684\u4e09\u79cd\u5c4f\u969c\u5219\u662f\u9650\u5236\u8fd9\u4e9b\u4e0d\u540c\u4e71\u5e8f\u7684\u673a\u5236\u3002 \u5173\u4e8e\u7b2c\u4e8c\u70b9\u3002\u5199\u5c4f\u969c\u4f1a\u963b\u585e\u76f4\u5230\u628aStore Buffer\u4e2d\u7684\u6570\u636e\u5237\u5230Cache\u4e2d\uff1b\u8bfb\u5c4f\u969c\u4f1a\u963b\u585e\u76f4\u5230Invalid Queue\u4e2d\u7684\u6d88\u606f\u6267\u884c\u5b8c\u6bd5\u3002\u4ee5\u6b64\u6765\u4fdd\u8bc1\u6838\u95f4\u5404\u7ea7\u6570\u636e\u7684\u4e00\u81f4\u6027\u3002","title":"C++ Memory Order"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-1/","text":"Tip of the Week #1: string_view Originally published as totw/1 on 2012-04-20 By Michael Chastain (mec.desktop@gmail.com) Updated 2017-09-18 What\u2019s a string_view , and Why Should You Care? \u5f53\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u51fd\u6570\u5e76\u4e14\u8fd9\u4e2a\u51fd\u6570\u6709\u4e00\u4e2a\u53c2\u6570\u662f\u7528\u6765\u63a5\u6536\u5e38\u91cf\u5b57\u7b26\u4e32\u7684\uff0c\u8fd9\u65f6\u4f60\u6709\u56db\u4e2a\u9009\u62e9\uff0c\u5176\u4e2d\u6709\u4e24\u4e2a\u662f\u4f60\u5df2\u7ecf\u77e5\u9053\u7684\uff0c\u53e6\u5916\u4e24\u4e2a\u4f60\u6216\u8bb8\u8fd8\u4e0d\u77e5\u9053\uff1a 1 2 3 4 void TakesCharStar ( const char * s ); // C convention void TakesString ( const string & s ); // Old Standard C++ convention void TakesStringView ( absl :: string_view s ); // Abseil C++ convention void TakesStringView ( std :: string_view s ); // C++17 C++ convention \u524d\u4e24\u79cd\u65b9\u5f0f\u6700\u9002\u5408\u90a3\u79cd\u8c03\u7528\u8005\u63d0\u4f9b\u53c2\u6570\u548c\u884c\u53c2\u7684\u7c7b\u578b\u662f\u4e00\u81f4\u7684\uff0c\u4f46\u662f\u5982\u679c\u4e0d\u4e00\u81f4\u662f\u5426\u9700\u8981\u8fdb\u884c\u8f6c\u6362(\u53ef\u80fd\u662f const char* \u8f6c\u6362\u4e3a string \u6216\u8005\u662f sgtring \u8f6c\u6362\u4e3a const char* )\uff1f \u8c03\u7528\u8005\u9700\u8981\u5c06 string \u8f6c\u6362\u4e3a const char* \u662f\u9700\u8981\u4f7f\u7528(\u9ad8\u6548\u4f46\u662f\u4e0d\u65b9\u4fbf) c_str() \u51fd\u6570: 1 2 3 void AlreadyHasString ( const string & s ) { TakesCharStar ( s . c_str ()); // explicit conversion } \u8c03\u7528\u8005\u9700\u8981\u5c06\u4e00\u4e2a const char* \u8f6c\u6362\u4e3a\u4e00\u4e2a string \u7684\u65f6\u5019\u662f\u4e0d\u9700\u8981\u505a\u4efb\u4f55\u989d\u5916\u4e8b\u60c5\u7684(\u8fd9\u662f\u4e00\u4e2a\u597d\u6d88\u606f)\uff0c\u4f46\u662f\u8fd9\u4f1a\u5bfc\u81f4\u7f16\u8bd1\u5668\u4f1a\u9690\u5f0f\u7684\u521b\u5efa\u4e00\u4e2a\u4e34\u65f6\u7684\u5b57\u7b26\u4e32(\u65b9\u4fbf\u4f46\u662f\u4e0d\u9ad8\u6548)\uff0c\u7136\u540e\u5c06 const char* \u4e2d\u7684\u5185\u5bb9\u62f7\u8d1d\u5230\u8fd9\u4e2a string \u4e2d(\u8fd9\u662f\u4e2a\u4e0d\u597d\u7684\u6d88\u606f): 1 2 3 void AlreadyHasCharStar ( const char * s ) { TakesString ( s ); // compiler will make a copy } What to Do? \u8c37\u6b4c\u7684\u9996\u9009\u662f\u901a\u8fc7 string_view \u7684\u65b9\u5f0f\u6765\u63a5\u6536\u5b57\u7b26\u4e32\u53c2\u6570\uff0c\u5728 C++17 \u4e2d\u53ef\u4ee5\u4f7f\u7528 std::string_view \u6765\u66ff\u4ee3\uff0c\u5728\u90a3\u4e9b\u8fd8\u6ca1\u6709\u4f7f\u7528 C++17 \u7684\u4ee3\u7801\u4e2d\u53ef\u4ee5\u4f7f\u7528 absl::string_view \u6765\u66ff\u4ee3\u3002 \u4e00\u4e2a string_view \u7c7b\u7684\u5b9e\u4f8b\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u662f\u4e00\u4e2a\u5bf9\u73b0\u5b58\u7684\u5b57\u7b26bufer\u7684\u89c6\u56fe\uff0c\u5177\u4f53\u6765\u8bf4 string_view \u4ec5\u4ec5\u5305\u542b\u4e86\u4e00\u4e2a\u6307\u9488\u548c\u4e00\u4e2a\u957f\u5ea6\uff0c\u4ec5\u7528\u6765\u6807\u8bc6\u4e00\u6bb5\u5b57\u7b26\u6570\u636e\u5e76\u4e0d\u62e5\u6709\u8fd9\u6bb5\u6570\u636e\uff0c\u4e0d\u80fd\u901a\u8fc7\u8fd9\u4e2a\u89c6\u56fe\u6765\u4fee\u6539\u5bf9\u5e94\u7684\u6570\u636e\u3002\u6240\u4ee5\u5bf9\u4e00\u4e2a string_view \u7684\u62f7\u8d1d\u662f\u6d45\u62f7\u8d1d\uff0c\u662f\u6ca1\u6709\u5b57\u7b26\u4e32\u6570\u636e\u7684\u62f7\u8d1d\u7684\u3002 string_view \u53ef\u4ee5\u9690\u5f0f\u7684\u4ece\u4e00\u4e2a const char* \u548c const string& \u6784\u9020\u51fa\u6765\uff0c\u5e76\u4e14\u4e0d\u4f1a\u9020\u6210\u5b57\u7b26\u4e32\u6570\u636e\u7684\u62f7\u8d1d\u4ea7\u751fO(n)\u7684\u590d\u6742\u5ea6\uff0c\u4f8b\u5982\u5f53\u4f20\u9012\u4e00\u4e2a const string& \u7684\u65f6\u5019\uff0c\u6784\u9020\u51fd\u6570\u4ec5\u4f1a\u4ea7\u751fO(1)\u7684\u590d\u6742\u5ea6\uff0c\u5f53\u4f20\u9012\u4e00\u4e2a const char* \u7684\u65f6\u5019\u6784\u9020\u51fd\u6570\u4f1a\u81ea\u52a8\u7684\u8c03\u7528\u4e00\u4e2a strlen \u51fd\u6570(\u6216\u8005\u4f60\u53ef\u4ee5\u4f20\u9012\u4e24\u4e2a\u53c2\u6570\u7ed9 string_view )\u3002 1 2 3 4 5 6 7 8 void AlreadyHasString ( const string & s ) { TakesStringView ( s ); // no explicit conversion; convenient! } void AlreadyHasCharStar ( const char * s ) { TakesStringView ( s ); // no copy; efficient! } \u56e0\u4e3a string_view \u4e0d\u62e5\u6709\u6570\u636e\uff0c\u6240\u4ee5\u88ab string_view \u6240\u6307\u5411\u7684\u5b57\u7b26\u4e32(\u7c7b\u4f3c\u4e8e const char* )\u90fd\u5fc5\u987b\u6709\u4e00\u4e2a\u5df2\u77e5\u7684\u751f\u547d\u5468\u671f\uff0c\u800c\u4e14\u5176\u751f\u547d\u5468\u671f\u8981\u957f\u4e8e string_view \u5bf9\u8c61\u81ea\u5df1\u3002\u8fd9\u610f\u5473\u7740\u4f7f\u7528 string_view \u6765\u5b58\u50a8\u5b57\u7b26\u4e32\u901a\u5e38\u662f\u6709\u95ee\u9898\u7684\uff0c\u4f60\u9700\u8981\u8bc1\u660e\u4f60\u5f15\u7528\u7684\u5e95\u5c42\u6570\u636e\u5176\u751f\u547d\u5468\u671f\u8981\u957f\u4e8e string_view \u5bf9\u8c61\u81ea\u5df1\u7684\u3002 \u5982\u679c\u4f60\u7684API\u4ec5\u4ec5\u662f\u9700\u8981\u5728\u4e00\u4e2a\u5355\u6b21\u8c03\u7528\u4e2d\u5f15\u7528\u4e00\u4e2a\u5b57\u7b26\u4e32\u6570\u636e\uff0c\u800c\u4e14\u4e0d\u4f1a\u4fee\u6539\u6570\u636e\uff0c\u90a3\u4e48\u63a5\u6536\u4e00\u4e2astring_view\u4f5c\u4e3a\u53c2\u6570\u8fd9\u662f\u8db3\u591f\u7684\u3002\u5982\u679c\u4f60\u8fd8\u9700\u8981\u5728\u8c03\u7528\u540e\u8fd8\u5f15\u7528\u8fd9\u4e2a\u6570\u636e\uff0c\u6216\u8005\u4fee\u590d\u8fd9\u4e2a\u6570\u636e\uff0c\u90a3\u4e48\u4f60\u9700\u8981\u663e\u793a\u901a\u8fc7 string(my_string_view) \u6765\u5c06\u5176\u8f6c\u6362 string \u7c7b\u578b\u3002 \u5c06 string_view \u6dfb\u52a0\u5230\u73b0\u5b58\u7684\u4ee3\u7801\u4e2d\u5e76\u4e0d\u603b\u662f\u6b63\u786e\u7684\uff0c\u5982\u679c\u4f20\u9012\u7ed9\u8fd9\u4e2a\u51fd\u6570\u7684\u9700\u8981\u7684\u5c31\u662f\u4e00\u4e2a string \u6216\u8005\u662f\u4e00\u4e2a const char* \u4f7f\u7528 string_view \u5e76\u4e0d\u4f1a\u5f88\u9ad8\u6548\u3002\u6700\u4f73\u7684\u65b9\u6848\u662f\u4ece\u5de5\u5177\u4ee3\u7801\u5f00\u59cb\u5411\u4e0a\u5f00\u59cb\u91c7\u7528 string_view \u6765\u66ff\u6362\uff0c\u6216\u8005\u662f\u4ece\u4e00\u4e2a\u65b0\u9879\u76ee\u4e00\u5f00\u59cb\u5c31\u4fdd\u6301\u4e00\u81f4\u3002 A Few Additional Notes \u548c\u5176\u4ed6\u5b57\u7b26\u4e32\u7c7b\u578b\u4e0d\u4e00\u6837\u7684\u70b9\u5728\u4e8e string_view \u4f20\u9012\u7684\u65f6\u5019\u5e94\u8be5\u6309\u7167\u503c\u62f7\u8d1d\u7684\u65b9\u5f0f\u4f20\u9012\uff0c\u5c31\u50cf\u4f20\u9012 int \u548c double \u7c7b\u578b\u4e00\u6837\uff0c\u56e0\u4e3a string_view \u5c31\u662f\u4e00\u4e2a\u5c0f\u6570\u503c\u3002 string_view \u4e0d\u9700\u8981\u4ee5 NULL \u7ed3\u5c3e\uff0c\u56e0\u6b64\u5982\u679c\u8fd9\u6837\u8f93\u51fa\u662f\u4e0d\u5b89\u5168\u7684: 1 printf ( \"%s \\n \" , sv . data ()); // DON\u2019T DO THIS \u7136\u540e\uff0c\u4e0b\u9762\u8fd9\u6837\u662f\u53ef\u4ee5\u7684: 1 printf ( \"%.*s \\n \" , static_cast < int > ( sv . size ()), sv . data ()); \u4f60\u5e94\u8be5\u50cf\u4e00\u4e2a string \u6216\u8005 const char* \u90a3\u6837\u6765\u8f93\u51fa string_view 1 std :: cout << \"Took '\" << s << \"'\" ; \u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u4f60\u5c06\u5b89\u5168\u7684\u5c06\u4e00\u4e2a\u73b0\u5b58\u7684\u63a5\u6536 const string& \u6216 const char* \u53c2\u6570\u7684\u51fd\u6570\u8f6c\u6362\u4e3a string_view \u3002 \u6211\u4eec\u5728\u6267\u884c\u6b64\u64cd\u4f5c\u65f6\u9047\u5230\u7684\u552f\u4e00\u5371\u9669\u662f\uff0c\u5982\u679c\u51fd\u6570\u7684\u5730\u5740\u5df2\u88ab\u5360\u7528\uff0c\u5219\u4f1a\u5bfc\u81f4\u6784\u5efa\u4e2d\u65ad\uff0c\u56e0\u4e3a\u6240\u4ea7\u751f\u7684\u51fd\u6570\u6307\u9488\u7c7b\u578b\u5c06\u6709\u6240\u4e0d\u540c \u3002","title":"Tip of the Week #1: string_view"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-1/#tip-of-the-week-1-string_view","text":"Originally published as totw/1 on 2012-04-20 By Michael Chastain (mec.desktop@gmail.com) Updated 2017-09-18","title":"Tip of the Week #1: string_view"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-1/#whats-a-string_view-and-why-should-you-care","text":"\u5f53\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u51fd\u6570\u5e76\u4e14\u8fd9\u4e2a\u51fd\u6570\u6709\u4e00\u4e2a\u53c2\u6570\u662f\u7528\u6765\u63a5\u6536\u5e38\u91cf\u5b57\u7b26\u4e32\u7684\uff0c\u8fd9\u65f6\u4f60\u6709\u56db\u4e2a\u9009\u62e9\uff0c\u5176\u4e2d\u6709\u4e24\u4e2a\u662f\u4f60\u5df2\u7ecf\u77e5\u9053\u7684\uff0c\u53e6\u5916\u4e24\u4e2a\u4f60\u6216\u8bb8\u8fd8\u4e0d\u77e5\u9053\uff1a 1 2 3 4 void TakesCharStar ( const char * s ); // C convention void TakesString ( const string & s ); // Old Standard C++ convention void TakesStringView ( absl :: string_view s ); // Abseil C++ convention void TakesStringView ( std :: string_view s ); // C++17 C++ convention \u524d\u4e24\u79cd\u65b9\u5f0f\u6700\u9002\u5408\u90a3\u79cd\u8c03\u7528\u8005\u63d0\u4f9b\u53c2\u6570\u548c\u884c\u53c2\u7684\u7c7b\u578b\u662f\u4e00\u81f4\u7684\uff0c\u4f46\u662f\u5982\u679c\u4e0d\u4e00\u81f4\u662f\u5426\u9700\u8981\u8fdb\u884c\u8f6c\u6362(\u53ef\u80fd\u662f const char* \u8f6c\u6362\u4e3a string \u6216\u8005\u662f sgtring \u8f6c\u6362\u4e3a const char* )\uff1f \u8c03\u7528\u8005\u9700\u8981\u5c06 string \u8f6c\u6362\u4e3a const char* \u662f\u9700\u8981\u4f7f\u7528(\u9ad8\u6548\u4f46\u662f\u4e0d\u65b9\u4fbf) c_str() \u51fd\u6570: 1 2 3 void AlreadyHasString ( const string & s ) { TakesCharStar ( s . c_str ()); // explicit conversion } \u8c03\u7528\u8005\u9700\u8981\u5c06\u4e00\u4e2a const char* \u8f6c\u6362\u4e3a\u4e00\u4e2a string \u7684\u65f6\u5019\u662f\u4e0d\u9700\u8981\u505a\u4efb\u4f55\u989d\u5916\u4e8b\u60c5\u7684(\u8fd9\u662f\u4e00\u4e2a\u597d\u6d88\u606f)\uff0c\u4f46\u662f\u8fd9\u4f1a\u5bfc\u81f4\u7f16\u8bd1\u5668\u4f1a\u9690\u5f0f\u7684\u521b\u5efa\u4e00\u4e2a\u4e34\u65f6\u7684\u5b57\u7b26\u4e32(\u65b9\u4fbf\u4f46\u662f\u4e0d\u9ad8\u6548)\uff0c\u7136\u540e\u5c06 const char* \u4e2d\u7684\u5185\u5bb9\u62f7\u8d1d\u5230\u8fd9\u4e2a string \u4e2d(\u8fd9\u662f\u4e2a\u4e0d\u597d\u7684\u6d88\u606f): 1 2 3 void AlreadyHasCharStar ( const char * s ) { TakesString ( s ); // compiler will make a copy }","title":"What\u2019s a string_view, and Why Should You Care?"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-1/#what-to-do","text":"\u8c37\u6b4c\u7684\u9996\u9009\u662f\u901a\u8fc7 string_view \u7684\u65b9\u5f0f\u6765\u63a5\u6536\u5b57\u7b26\u4e32\u53c2\u6570\uff0c\u5728 C++17 \u4e2d\u53ef\u4ee5\u4f7f\u7528 std::string_view \u6765\u66ff\u4ee3\uff0c\u5728\u90a3\u4e9b\u8fd8\u6ca1\u6709\u4f7f\u7528 C++17 \u7684\u4ee3\u7801\u4e2d\u53ef\u4ee5\u4f7f\u7528 absl::string_view \u6765\u66ff\u4ee3\u3002 \u4e00\u4e2a string_view \u7c7b\u7684\u5b9e\u4f8b\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u662f\u4e00\u4e2a\u5bf9\u73b0\u5b58\u7684\u5b57\u7b26bufer\u7684\u89c6\u56fe\uff0c\u5177\u4f53\u6765\u8bf4 string_view \u4ec5\u4ec5\u5305\u542b\u4e86\u4e00\u4e2a\u6307\u9488\u548c\u4e00\u4e2a\u957f\u5ea6\uff0c\u4ec5\u7528\u6765\u6807\u8bc6\u4e00\u6bb5\u5b57\u7b26\u6570\u636e\u5e76\u4e0d\u62e5\u6709\u8fd9\u6bb5\u6570\u636e\uff0c\u4e0d\u80fd\u901a\u8fc7\u8fd9\u4e2a\u89c6\u56fe\u6765\u4fee\u6539\u5bf9\u5e94\u7684\u6570\u636e\u3002\u6240\u4ee5\u5bf9\u4e00\u4e2a string_view \u7684\u62f7\u8d1d\u662f\u6d45\u62f7\u8d1d\uff0c\u662f\u6ca1\u6709\u5b57\u7b26\u4e32\u6570\u636e\u7684\u62f7\u8d1d\u7684\u3002 string_view \u53ef\u4ee5\u9690\u5f0f\u7684\u4ece\u4e00\u4e2a const char* \u548c const string& \u6784\u9020\u51fa\u6765\uff0c\u5e76\u4e14\u4e0d\u4f1a\u9020\u6210\u5b57\u7b26\u4e32\u6570\u636e\u7684\u62f7\u8d1d\u4ea7\u751fO(n)\u7684\u590d\u6742\u5ea6\uff0c\u4f8b\u5982\u5f53\u4f20\u9012\u4e00\u4e2a const string& \u7684\u65f6\u5019\uff0c\u6784\u9020\u51fd\u6570\u4ec5\u4f1a\u4ea7\u751fO(1)\u7684\u590d\u6742\u5ea6\uff0c\u5f53\u4f20\u9012\u4e00\u4e2a const char* \u7684\u65f6\u5019\u6784\u9020\u51fd\u6570\u4f1a\u81ea\u52a8\u7684\u8c03\u7528\u4e00\u4e2a strlen \u51fd\u6570(\u6216\u8005\u4f60\u53ef\u4ee5\u4f20\u9012\u4e24\u4e2a\u53c2\u6570\u7ed9 string_view )\u3002 1 2 3 4 5 6 7 8 void AlreadyHasString ( const string & s ) { TakesStringView ( s ); // no explicit conversion; convenient! } void AlreadyHasCharStar ( const char * s ) { TakesStringView ( s ); // no copy; efficient! } \u56e0\u4e3a string_view \u4e0d\u62e5\u6709\u6570\u636e\uff0c\u6240\u4ee5\u88ab string_view \u6240\u6307\u5411\u7684\u5b57\u7b26\u4e32(\u7c7b\u4f3c\u4e8e const char* )\u90fd\u5fc5\u987b\u6709\u4e00\u4e2a\u5df2\u77e5\u7684\u751f\u547d\u5468\u671f\uff0c\u800c\u4e14\u5176\u751f\u547d\u5468\u671f\u8981\u957f\u4e8e string_view \u5bf9\u8c61\u81ea\u5df1\u3002\u8fd9\u610f\u5473\u7740\u4f7f\u7528 string_view \u6765\u5b58\u50a8\u5b57\u7b26\u4e32\u901a\u5e38\u662f\u6709\u95ee\u9898\u7684\uff0c\u4f60\u9700\u8981\u8bc1\u660e\u4f60\u5f15\u7528\u7684\u5e95\u5c42\u6570\u636e\u5176\u751f\u547d\u5468\u671f\u8981\u957f\u4e8e string_view \u5bf9\u8c61\u81ea\u5df1\u7684\u3002 \u5982\u679c\u4f60\u7684API\u4ec5\u4ec5\u662f\u9700\u8981\u5728\u4e00\u4e2a\u5355\u6b21\u8c03\u7528\u4e2d\u5f15\u7528\u4e00\u4e2a\u5b57\u7b26\u4e32\u6570\u636e\uff0c\u800c\u4e14\u4e0d\u4f1a\u4fee\u6539\u6570\u636e\uff0c\u90a3\u4e48\u63a5\u6536\u4e00\u4e2astring_view\u4f5c\u4e3a\u53c2\u6570\u8fd9\u662f\u8db3\u591f\u7684\u3002\u5982\u679c\u4f60\u8fd8\u9700\u8981\u5728\u8c03\u7528\u540e\u8fd8\u5f15\u7528\u8fd9\u4e2a\u6570\u636e\uff0c\u6216\u8005\u4fee\u590d\u8fd9\u4e2a\u6570\u636e\uff0c\u90a3\u4e48\u4f60\u9700\u8981\u663e\u793a\u901a\u8fc7 string(my_string_view) \u6765\u5c06\u5176\u8f6c\u6362 string \u7c7b\u578b\u3002 \u5c06 string_view \u6dfb\u52a0\u5230\u73b0\u5b58\u7684\u4ee3\u7801\u4e2d\u5e76\u4e0d\u603b\u662f\u6b63\u786e\u7684\uff0c\u5982\u679c\u4f20\u9012\u7ed9\u8fd9\u4e2a\u51fd\u6570\u7684\u9700\u8981\u7684\u5c31\u662f\u4e00\u4e2a string \u6216\u8005\u662f\u4e00\u4e2a const char* \u4f7f\u7528 string_view \u5e76\u4e0d\u4f1a\u5f88\u9ad8\u6548\u3002\u6700\u4f73\u7684\u65b9\u6848\u662f\u4ece\u5de5\u5177\u4ee3\u7801\u5f00\u59cb\u5411\u4e0a\u5f00\u59cb\u91c7\u7528 string_view \u6765\u66ff\u6362\uff0c\u6216\u8005\u662f\u4ece\u4e00\u4e2a\u65b0\u9879\u76ee\u4e00\u5f00\u59cb\u5c31\u4fdd\u6301\u4e00\u81f4\u3002","title":"What to Do?"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-1/#a-few-additional-notes","text":"\u548c\u5176\u4ed6\u5b57\u7b26\u4e32\u7c7b\u578b\u4e0d\u4e00\u6837\u7684\u70b9\u5728\u4e8e string_view \u4f20\u9012\u7684\u65f6\u5019\u5e94\u8be5\u6309\u7167\u503c\u62f7\u8d1d\u7684\u65b9\u5f0f\u4f20\u9012\uff0c\u5c31\u50cf\u4f20\u9012 int \u548c double \u7c7b\u578b\u4e00\u6837\uff0c\u56e0\u4e3a string_view \u5c31\u662f\u4e00\u4e2a\u5c0f\u6570\u503c\u3002 string_view \u4e0d\u9700\u8981\u4ee5 NULL \u7ed3\u5c3e\uff0c\u56e0\u6b64\u5982\u679c\u8fd9\u6837\u8f93\u51fa\u662f\u4e0d\u5b89\u5168\u7684: 1 printf ( \"%s \\n \" , sv . data ()); // DON\u2019T DO THIS \u7136\u540e\uff0c\u4e0b\u9762\u8fd9\u6837\u662f\u53ef\u4ee5\u7684: 1 printf ( \"%.*s \\n \" , static_cast < int > ( sv . size ()), sv . data ()); \u4f60\u5e94\u8be5\u50cf\u4e00\u4e2a string \u6216\u8005 const char* \u90a3\u6837\u6765\u8f93\u51fa string_view 1 std :: cout << \"Took '\" << s << \"'\" ; \u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u4f60\u5c06\u5b89\u5168\u7684\u5c06\u4e00\u4e2a\u73b0\u5b58\u7684\u63a5\u6536 const string& \u6216 const char* \u53c2\u6570\u7684\u51fd\u6570\u8f6c\u6362\u4e3a string_view \u3002 \u6211\u4eec\u5728\u6267\u884c\u6b64\u64cd\u4f5c\u65f6\u9047\u5230\u7684\u552f\u4e00\u5371\u9669\u662f\uff0c\u5982\u679c\u51fd\u6570\u7684\u5730\u5740\u5df2\u88ab\u5360\u7528\uff0c\u5219\u4f1a\u5bfc\u81f4\u6784\u5efa\u4e2d\u65ad\uff0c\u56e0\u4e3a\u6240\u4ea7\u751f\u7684\u51fd\u6570\u6307\u9488\u7c7b\u578b\u5c06\u6709\u6240\u4e0d\u540c \u3002","title":"A Few Additional Notes"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-10/","text":"Tip of the Week #10: Splitting Strings, not Hairs Originally published as totw/10 on 2012-08-16 By Greg Miller (jgm@google.com) Updated 2018-01-24 I tend to have an odd split in my mind. \u2013John Cleese \u5728\u4efb\u4f55\u901a\u7528\u76ee\u7684\u7684\u7f16\u7a0b\u8bed\u8a00\u4e2d\u5c06\u4e00\u4e2a string \u5207\u5272\u6210\u4e00\u4e2a\u5b50\u4e32\u662f\u4e00\u4e2a\u5f88\u5e38\u89c1\u7684\u4efb\u52a1\uff0c C++ \u4e5f\u4e0d\u4f8b\u5916\u3002 \u5f53\u8c37\u6b4c\u51fa\u73b0\u8fd9\u79cd\u9700\u6c42\u65f6\uff0c\u8bb8\u591a\u5de5\u7a0b\u5e08\u53d1\u73b0\u81ea\u5df1\u9700\u8981\u901a\u8fc7\u6269\u5c55\u5934\u6587\u4ef6\u7684\u65b9\u5f0f\u6765\u6269\u5c55\u5206\u5272\u5b57\u7b26\u4e32\u7684\u529f\u80fd\u3002\u4f60\u9700\u8981\u5bfb\u627e\u6ee1\u8db3\u60a8\u9700\u6c42\u7684\u8f93\u5165\u53c2\u6570\u3001\u8f93\u51fa\u53c2\u6570\u548c\u8bed\u4e49\u7684\u795e\u5947\u7ec4\u5408\u3002\u5728\u7814\u7a76\u4e86600\u591a\u884c\u6807\u9898\u4e2d\u768450\u591a\u4e2a\u51fd\u6570\u4ee5\u540e\uff0c\u4f60\u53ef\u80fd\u9519\u8bef\u7684\u5c06\u65b0\u7684\u5206\u5272\u51fd\u6570\u547d\u540d\u4e3a SplitStringViewToDequeOfStringAllowEmpty() \u3002 \u4e3a\u4e86\u5904\u7406\u8fd9\u4e2a\u95ee\u9898\uff0c C++ \u5e93\u7684\u56e2\u961f\u5b9e\u73b0\u4e86\u4e00\u4e2a\u65b0\u7684 API \u7528\u4e8e\u5b9e\u73b0\u5b57\u7b26\u4e32\u5206\u5272\u7684\u529f\u80fd\uff0c\u5176\u5934\u6587\u4ef6\u5728 absl/strings/str_split.h \u3002 \u8fd9\u4e2a\u65b0\u7684 API \u5c06\u8bb8\u591a\u529f\u80fd\u7c7b\u4f3c\u7684\u5206\u5272\u51fd\u6570\u66ff\u6362\u6210\u4e86\u4e00\u4e2a\u5355\u4e2a\u7684 absl::StrSplit() \u51fd\u6570\u3002\u8fd9\u4e2a\u51fd\u6570\u63a5\u6536\u4e00\u4e2a\u5c06\u88ab\u5206\u5272\u7684 string \u548c\u4e00\u4e2a\u5206\u9694\u7b26\u4f5c\u4e3a\u8f93\u5165\uff0c absl::StrSplit() \u8fd4\u56de\u7ed3\u679c\u5c06\u4f1a\u9002\u914d\u8c03\u7528\u8005\u6307\u5b9a\u7684\u7c7b\u578b\u3002 absl::StrSplit \u7684\u5b9e\u73b0\u662f\u9ad8\u6548\u7684\uff0c\u56e0\u4e3a\u5176\u5185\u90e8\u5e7f\u6cdb\u4f7f\u7528\u4e86 absl::string_view \u3002\u9664\u975e\u8c03\u7528\u8005\u660e\u786e\u5c06\u7ed3\u679c\u5b58\u50a8\u5728\u5b57\u7b26\u4e32\u5bf9\u8c61\u7684\u96c6\u5408\u4e2d(\u4f1a\u590d\u5236\u5176\u6570\u636e)\uff0c\u5426\u5219\u4e0d\u4f1a\u590d\u5236\u6570\u636e\u7684\u3002 \u8bf4\u591f\u4e86\uff0c\u8ba9\u6211\u4eec\u770b\u4e00\u4e9b\u4f8b\u5b50\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 // Splits on commas. Stores in vector of string_view (no copies). std :: vector < absl :: string_view > v = absl :: StrSplit ( \"a,b,c\" , ',' ); // Splits on commas. Stores in vector of string (data copied once). std :: vector < std :: string > v = absl :: StrSplit ( \"a,b,c\" , ',' ); // Splits on literal string \"=>\" (not either of \"=\" or \">\") std :: vector < absl :: string_view > v = absl :: StrSplit ( \"a=>b=>c\" , \"=>\" ); // Splits on any of the given characters (',' or ';') using absl :: ByAnyChar ; std :: vector < std :: string > v = absl :: StrSplit ( \"a,b;c\" , ByAnyChar ( \",;\" )); // Stores in various containers (also works w/ absl::string_view) std :: set < std :: string > s = absl :: StrSplit ( \"a,b,c\" , ',' ); std :: multiset < std :: string > s = absl :: StrSplit ( \"a,b,c\" , ',' ); std :: list < std :: string > li = absl :: StrSplit ( \"a,b,c\" , ',' ); // Equiv. to the mythical SplitStringViewToDequeOfStringAllowEmpty() std :: deque < std :: string > d = absl :: StrSplit ( \"a,b,c\" , ',' ); // Yields \"a\"->\"1\", \"b\"->\"2\", \"c\"->\"3\" std :: map < std :: string , std :: string > m = absl :: StrSplit ( \"a,1,b,2,c,3\" , ',' ); \u66f4\u591a\u7684\u7ec6\u8282\u76f8\u5173\u7684\u4fe1\u606f\u53ef\u4ee5\u53bb\u770b absl/strings/str_split.h \uff0c\u5bf9\u4e8e\u5982\u4f55\u4f7f\u7528 Split \u7684 API \u53ef\u4ee5\u770b absl/strings/str_split_test.cc \u91cc\u9762\u6709\u5f88\u591a examples \u3002","title":"Tip of the Week #10: Splitting Strings, not Hairs"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-10/#tip-of-the-week-10-splitting-strings-not-hairs","text":"Originally published as totw/10 on 2012-08-16 By Greg Miller (jgm@google.com) Updated 2018-01-24 I tend to have an odd split in my mind. \u2013John Cleese \u5728\u4efb\u4f55\u901a\u7528\u76ee\u7684\u7684\u7f16\u7a0b\u8bed\u8a00\u4e2d\u5c06\u4e00\u4e2a string \u5207\u5272\u6210\u4e00\u4e2a\u5b50\u4e32\u662f\u4e00\u4e2a\u5f88\u5e38\u89c1\u7684\u4efb\u52a1\uff0c C++ \u4e5f\u4e0d\u4f8b\u5916\u3002 \u5f53\u8c37\u6b4c\u51fa\u73b0\u8fd9\u79cd\u9700\u6c42\u65f6\uff0c\u8bb8\u591a\u5de5\u7a0b\u5e08\u53d1\u73b0\u81ea\u5df1\u9700\u8981\u901a\u8fc7\u6269\u5c55\u5934\u6587\u4ef6\u7684\u65b9\u5f0f\u6765\u6269\u5c55\u5206\u5272\u5b57\u7b26\u4e32\u7684\u529f\u80fd\u3002\u4f60\u9700\u8981\u5bfb\u627e\u6ee1\u8db3\u60a8\u9700\u6c42\u7684\u8f93\u5165\u53c2\u6570\u3001\u8f93\u51fa\u53c2\u6570\u548c\u8bed\u4e49\u7684\u795e\u5947\u7ec4\u5408\u3002\u5728\u7814\u7a76\u4e86600\u591a\u884c\u6807\u9898\u4e2d\u768450\u591a\u4e2a\u51fd\u6570\u4ee5\u540e\uff0c\u4f60\u53ef\u80fd\u9519\u8bef\u7684\u5c06\u65b0\u7684\u5206\u5272\u51fd\u6570\u547d\u540d\u4e3a SplitStringViewToDequeOfStringAllowEmpty() \u3002 \u4e3a\u4e86\u5904\u7406\u8fd9\u4e2a\u95ee\u9898\uff0c C++ \u5e93\u7684\u56e2\u961f\u5b9e\u73b0\u4e86\u4e00\u4e2a\u65b0\u7684 API \u7528\u4e8e\u5b9e\u73b0\u5b57\u7b26\u4e32\u5206\u5272\u7684\u529f\u80fd\uff0c\u5176\u5934\u6587\u4ef6\u5728 absl/strings/str_split.h \u3002 \u8fd9\u4e2a\u65b0\u7684 API \u5c06\u8bb8\u591a\u529f\u80fd\u7c7b\u4f3c\u7684\u5206\u5272\u51fd\u6570\u66ff\u6362\u6210\u4e86\u4e00\u4e2a\u5355\u4e2a\u7684 absl::StrSplit() \u51fd\u6570\u3002\u8fd9\u4e2a\u51fd\u6570\u63a5\u6536\u4e00\u4e2a\u5c06\u88ab\u5206\u5272\u7684 string \u548c\u4e00\u4e2a\u5206\u9694\u7b26\u4f5c\u4e3a\u8f93\u5165\uff0c absl::StrSplit() \u8fd4\u56de\u7ed3\u679c\u5c06\u4f1a\u9002\u914d\u8c03\u7528\u8005\u6307\u5b9a\u7684\u7c7b\u578b\u3002 absl::StrSplit \u7684\u5b9e\u73b0\u662f\u9ad8\u6548\u7684\uff0c\u56e0\u4e3a\u5176\u5185\u90e8\u5e7f\u6cdb\u4f7f\u7528\u4e86 absl::string_view \u3002\u9664\u975e\u8c03\u7528\u8005\u660e\u786e\u5c06\u7ed3\u679c\u5b58\u50a8\u5728\u5b57\u7b26\u4e32\u5bf9\u8c61\u7684\u96c6\u5408\u4e2d(\u4f1a\u590d\u5236\u5176\u6570\u636e)\uff0c\u5426\u5219\u4e0d\u4f1a\u590d\u5236\u6570\u636e\u7684\u3002 \u8bf4\u591f\u4e86\uff0c\u8ba9\u6211\u4eec\u770b\u4e00\u4e9b\u4f8b\u5b50\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 // Splits on commas. Stores in vector of string_view (no copies). std :: vector < absl :: string_view > v = absl :: StrSplit ( \"a,b,c\" , ',' ); // Splits on commas. Stores in vector of string (data copied once). std :: vector < std :: string > v = absl :: StrSplit ( \"a,b,c\" , ',' ); // Splits on literal string \"=>\" (not either of \"=\" or \">\") std :: vector < absl :: string_view > v = absl :: StrSplit ( \"a=>b=>c\" , \"=>\" ); // Splits on any of the given characters (',' or ';') using absl :: ByAnyChar ; std :: vector < std :: string > v = absl :: StrSplit ( \"a,b;c\" , ByAnyChar ( \",;\" )); // Stores in various containers (also works w/ absl::string_view) std :: set < std :: string > s = absl :: StrSplit ( \"a,b,c\" , ',' ); std :: multiset < std :: string > s = absl :: StrSplit ( \"a,b,c\" , ',' ); std :: list < std :: string > li = absl :: StrSplit ( \"a,b,c\" , ',' ); // Equiv. to the mythical SplitStringViewToDequeOfStringAllowEmpty() std :: deque < std :: string > d = absl :: StrSplit ( \"a,b,c\" , ',' ); // Yields \"a\"->\"1\", \"b\"->\"2\", \"c\"->\"3\" std :: map < std :: string , std :: string > m = absl :: StrSplit ( \"a,1,b,2,c,3\" , ',' ); \u66f4\u591a\u7684\u7ec6\u8282\u76f8\u5173\u7684\u4fe1\u606f\u53ef\u4ee5\u53bb\u770b absl/strings/str_split.h \uff0c\u5bf9\u4e8e\u5982\u4f55\u4f7f\u7528 Split \u7684 API \u53ef\u4ee5\u770b absl/strings/str_split_test.cc \u91cc\u9762\u6709\u5f88\u591a examples \u3002","title":"Tip of the Week #10: Splitting Strings, not Hairs"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-101/","text":"Tip of the Week #101: Return Values, References, and Lifetimes Originally posted as totw/101 on 2015-07-29 By Titus Winters (titus@google.com) \u8003\u8651\u4e0b\u9762\u7684\u4ee3\u7801\u7247\u6bb5: 1 2 const string & name = obj . GetName (); std :: unique_ptr < Consumer > consumer ( new Consumer ( name )); \u7279\u522b\u662f\uff0c\u6211\u60f3\u5f15\u8d77\u60a8\u5bf9 \uff06 \u7684\u6ce8\u610f\u3002\u5b83\u5728\u8fd9\u91cc\u5408\u9002\u5417?\u6211\u4eec\u5e94\u8be5\u68c0\u67e5\u4ec0\u4e48?\u6709\u4ec0\u4e48\u95ee\u9898\u5417? \u6211\u53d1\u73b0\u76f8\u5f53\u6570\u91cf\u7684 C++ \u7a0b\u5e8f\u5458\u5bf9\u5f15\u7528\u5e76\u4e0d\u5b8c\u5168\u6e05\u695a\uff0c\u4f46\u901a\u5e38\u90fd\u77e5\u9053\u4ed6\u4eec\u201c\u907f\u514d\u5236\u4f5c\u526f\u672c\u201d\u3002\u4e0e\u5927\u591a\u6570 C++ \u95ee\u9898\u4e00\u6837\uff0c\u5b83\u8981\u590d\u6742\u5f97\u591a\u3002 Case by Case: What is Being Returned and How is it Being Stored? \u8fd9\u91cc\u6709\u4e24\u4e2a\u6216\u8005\u4e09\u4e2a\u5f88\u91cd\u8981\u7684\u95ee\u9898: \u4f8b\u5b50\u4e2d GetName() \u8fd4\u56de\u7684\u7c7b\u578b\u662f\u4ec0\u4e48? \u4f8b\u5b50\u4e2dname\u662f\u7528\u4ec0\u4e48\u7c7b\u578b\u5b58\u50a8\u6216\u8005\u521d\u59cb\u5316? \u5982\u679c\u6211\u4eec\u8981\u8fd4\u56de\u5f15\u7528\uff0c\u90a3\u4e48\u8fd4\u56de\u7684\u5bf9\u8c61\u88ab\u5f15\u7528\u662f\u5426\u5b58\u5728\u751f\u547d\u5468\u671f\u9650\u5236? \u6211\u4eec\u5c06\u7ee7\u7eed\u4f7f\u7528String\u7c7b\u578b\u4f5c\u4e3a\u6211\u4eec\u7684\u793a\u4f8b\u7c7b\u578b\uff0c\u4f46\u662f\u5bf9\u4e8e\u5927\u591a\u6570non-trivial\u7684\u503c\u7c7b\u578b\uff0c\u540c\u6837\u4e5f\u9002\u7528\u3002 \u8fd4\u56de string \uff0c\u521d\u59cb\u5316 string \uff0c\u8fd9\u4e2a\u901a\u5e38\u4f1a\u7531 RVO \u6765\u4fdd\u8bc1\uff0c\u6700\u574f\u60c5\u51b5\u4e0b\u4f1a\u4f7f\u7528C++11\u4e2d\u7684move(\u5177\u4f53\u7ec6\u8282\u89c1 TotW 77 ) \u8fd4\u56de string& \u6216\u8005 const string& \uff0c\u521d\u59cb\u5316 string \uff0c\u8fd9\u4f1a\u53d1\u751f\u62f7\u8d1d(\u56e0\u4e3a\u4e00\u65e6\u521d\u59cb\u5316\u65b0\u7684\u5b57\u7b26\u4e32\uff0c\u90a3\u4e48\u4ed6\u5c31\u6709\u4e24\u4e2a\u540d\u5b57\u4e86\uff0c\u8fd9\u53d1\u751f\u4e86\u62f7\u8d1d\uff0c\u5177\u4f53\u7ec6\u8282\u89c1 TotW 77 ).\u6709\u7684\u65f6\u5019\u8fd9\u662f\u6709\u4ef7\u503c\u7684\uff0c\u5c31\u50cf\u4f60\u662f\u5426\u9700\u8981\u8ba9 string \u7684\u751f\u547d\u5468\u671f\u66f4\u957f\u4e45\u3002 \u8fd4\u56de string \uff0c\u521d\u59cb\u5316 string& \uff0c\u8fd9\u662f\u6ca1\u529e\u6cd5\u7f16\u8bd1\u7684\uff0c\u56e0\u4e3a\u4f60\u4e0d\u80fd\u5bf9\u4e00\u4e2a\u4e34\u65f6\u53d8\u91cf\u8fdb\u884c\u5f15\u7528\u7684\u7ed1\u5b9a \u8fd4\u56de const string& \uff0c\u521d\u59cb\u5316 string& \uff0c\u8fd9\u662f\u6ca1\u529e\u6cd5\u7f16\u8bd1\u7684\uff0c\u6ca1\u529e\u6cd5\u901a\u8fc7\u8fd9\u79cd\u5220\u9664\u53bb\u9664 const \u9650\u5236 \u8fd4\u56de const string& \uff0c\u521d\u59cb\u5316 const string& \uff0c\u8fd9\u662f\u6ca1\u6709\u6027\u80fd\u635f\u8017\u7684(\u4f60\u4ec5\u4ec5\u662f\u9ad8\u6548\u7684\u8fd4\u56de\u4e86\u4e00\u4e2a\u6307\u9488)\u3002\u4f46\u662f\u4f60\u5df2\u7ecf\u7ee7\u627f\u4e86\u6240\u6709\u751f\u547d\u5468\u671f\u7684\u9650\u5236\uff0c\u5f15\u7528\u7684\u5bf9\u8c61\u751f\u547d\u5468\u671f\u591a\u957f? \u5927\u591a\u6570\u8bbf\u95ee\u5668\u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u5bf9\u6210\u5458\u7684\u5f15\u7528\uff0c\u8fd9\u4e2a\u5f15\u7528\u7684\u751f\u547d\u5468\u671f\u548c\u8fd9\u4e2a\u5305\u542b\u6210\u5458\u7684\u5bf9\u8c61\u7684\u751f\u547d\u5468\u671f\u4e00\u6837\u957f\u3002\u5728\u8fd9\u4e2a\u5bf9\u8c61\u7684\u751f\u547d\u5468\u671f\u5185\u90fd\u662f\u6709\u6548\u7684\u3002 \u8fd4\u56de string& \uff0c\u521d\u59cb\u5316 string& \uff0c\u8fd9\u4e2a#5\u662f\u4e00\u6837\u7684\uff0c\u4f46\u9700\u8981\u6ce8\u610f\u7684\u662f\uff1a\u8fd4\u56de\u7684\u5f15\u7528\u662f\u975e\u5e38\u91cf\u7684\uff0c\u56e0\u6b64\u5bf9\u5f15\u7528\u7684\u4efb\u4f55\u4fee\u6539\u90fd\u5c06\u53cd\u6620\u5728\u6e90\u4ee3\u7801\u4e2d\u3002 \u8fd4\u56de string& \uff0c\u521d\u59cb\u5316 const string& \uff0c\u548c #5 \u662f\u4e00\u6837\u7684\u3002 \u8fd4\u56de string \uff0c\u521d\u59cb\u5316 const string& \uff0c\u5728 #3 \u8fd9\u662f\u6ca1\u529e\u6cd5\u5de5\u4f5c\u7684\uff0c\u7136\u800c C++ \u8bed\u8a00\u5bf9\u4e8e\u8fd9\u79cd\u521d\u59cb\u5316 const \u5f15\u7528\u662f\u6709\u7279\u6b8a\u652f\u6301\u7684\uff0c\u5982\u679c\u4f60\u7528\u4e34\u65f6\u7684 T \u6765\u521d\u59cb\u5316 const T& \uff0c\u8fd9\u662f\u53ef\u884c\u7684\uff0c\u4e34\u65f6\u7684 T \u5c06\u4e0d\u4f1a\u88ab\u6790\u6784\uff0c\u76f4\u5230\u5bf9\u4ed6\u7684\u5f15\u7528\u79bb\u5f00\u5176\u4f5c\u7528\u57df\u3002 \u65b9\u6848 #8 \u662f\u4f7f\u7528\u5f15\u7528\u7684\u6700\u7075\u6d3b\u65b9\u5f0f(\u4e0d\u60f3\u590d\u5236\uff0c\u53ea\u662f\u60f3\u8d4b\u503c\u7ed9\u4e00\u4e2a\u5f15\u7528\u800c\u4e0d\u7528\u8003\u8651\u8fd4\u56de\u7684\u662f\u4ec0\u4e48)\uff0c\u7136\u800c\u56e0\u4e3a\u65b9\u6848 #1 \uff0c\u5b83\u4e5f\u6ca1\u6709\u771f\u6b63\u7684\u4e3a\u4f60\u505a\u4efb\u4f55\u4e8b\u60c5\uff0c\u5b83\u53ef\u80fd\u4e5f\u4e0d\u9700\u8981\u8fdb\u884c\u62f7\u8d1d\u3002\u6b64\u5916\uff0c\u73b0\u5728\u60a8\u7684\u4ee3\u7801\u9605\u8bfb\u8005\u5fc5\u987b\u4e0e\u60a8\u7684\u5c40\u90e8\u53d8\u91cf\u7c7b\u578b\u4e3a const string\uff06 \u800c\u4e0d\u662f string \u8fdb\u884c\u7ade\u4e89\uff0c\u800c\u4e14\u8fd8\u62c5\u5fc3\u5b57\u7b26\u4e32\u5e95\u5c42\u7684\u6570\u636e\u662f\u5426\u8d85\u51fa\u8303\u56f4\u6216\u5df2\u66f4\u6539\u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c\u5f53review\u539f\u59cb\u7684\u4ee3\u7801\u7247\u6bb5\u65f6\uff0c\u6211\u4e0d\u5f97\u4e0d\u62c5\u5fc3: GetName \u8fd4\u56de\u7684\u662f\u503c\u8fd8\u662f\u5f15\u7528? Consumer\u7684\u6784\u9020\u5668\u662f\u4f7f\u7528 string \uff0c const string& \uff0c\u8fd8\u662f string_view ? \u6784\u9020\u51fd\u6570\u662f\u5426\u5bf9\u4e8e\u53c2\u6570\u7684\u751f\u547d\u5468\u671f\u6709\u8981\u6c42?(\u5982\u679c\u4e0d\u4ec5\u4ec5\u662f\u5b57\u7b26\u4e32) \u7136\u540e\uff0c\u5982\u679c\u4ec5\u4ec5\u5c06\u793a\u4f8b\u4ee3\u7801\u4e2d\u7684 name \u58f0\u660e\u4e3a string \uff0c\u5b83\u901a\u5e38\u6548\u7387\u4e0d\u4f4e\uff08\u7531\u4e8eRVO\u548c\u79fb\u52a8\u8bed\u4e49\uff09\uff0c\u5e76\u4e14\u81f3\u5c11\u5728\u5bf9\u8c61\u751f\u547d\u5468\u671f\u65b9\u9762\u662f\u5b89\u5168\u7684\u3002 \u6b64\u5916\uff0c\u5982\u679c\u6709\u5bf9\u8c61\u7684\u751f\u547d\u5468\u671f\u95ee\u9898\uff0c\u5b83\u5f80\u5f80\u662f\u7b80\u5355\u7684\u5b57\u7b26\u4e32\u5b58\u50a8\u65f6\u624d\u4f1a\u53d1\u73b0\uff1a\u5c14\u4e0d\u662f\u770b GetName() \u8fd4\u56de\u7684\u5f15\u7528\u7684\u751f\u547d\u5468\u671f\u548c SetName \u5bf9\u4e8e\u751f\u547d\u5468\u671f\u7684\u9700\u6c42\u4e4b\u95f4\u7684\u76f8\u5173\u5173\u7cfb\u3002\u4f60\u81ea\u5df1\u62e5\u6709\u7684\u5b57\u7b26\u4e32\u610f\u5473\u7740\u53ea\u80fd\u770b\u672c\u5730\u4ee3\u7801\u548c setName() \u7684\u5b9e\u73b0\u5373\u53ef\u3002 \u6240\u6709\u8fd9\u4e9b\u90fd\u662f\u8bf4\uff1a\u907f\u514d\u590d\u5236\u662f\u53ef\u4ee5\u7684\uff0c\u53ea\u8981\u60a8\u4e0d\u4f7f\u4e8b\u60c5\u53d8\u5f97\u66f4\u590d\u6742\u5373\u53ef\u3002\u9996\u5148\u5728\u6ca1\u6709\u526f\u672c\u65f6\uff0c\u4f7f\u4ee3\u7801\u53d8\u5f97\u66f4\u52a0\u590d\u6742\u5e76\u4e0d\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u6743\u8861\u3002","title":"Tip of the Week #101: Return Values, References, and Lifetimes"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-101/#tip-of-the-week-101-return-values-references-and-lifetimes","text":"Originally posted as totw/101 on 2015-07-29 By Titus Winters (titus@google.com) \u8003\u8651\u4e0b\u9762\u7684\u4ee3\u7801\u7247\u6bb5: 1 2 const string & name = obj . GetName (); std :: unique_ptr < Consumer > consumer ( new Consumer ( name )); \u7279\u522b\u662f\uff0c\u6211\u60f3\u5f15\u8d77\u60a8\u5bf9 \uff06 \u7684\u6ce8\u610f\u3002\u5b83\u5728\u8fd9\u91cc\u5408\u9002\u5417?\u6211\u4eec\u5e94\u8be5\u68c0\u67e5\u4ec0\u4e48?\u6709\u4ec0\u4e48\u95ee\u9898\u5417? \u6211\u53d1\u73b0\u76f8\u5f53\u6570\u91cf\u7684 C++ \u7a0b\u5e8f\u5458\u5bf9\u5f15\u7528\u5e76\u4e0d\u5b8c\u5168\u6e05\u695a\uff0c\u4f46\u901a\u5e38\u90fd\u77e5\u9053\u4ed6\u4eec\u201c\u907f\u514d\u5236\u4f5c\u526f\u672c\u201d\u3002\u4e0e\u5927\u591a\u6570 C++ \u95ee\u9898\u4e00\u6837\uff0c\u5b83\u8981\u590d\u6742\u5f97\u591a\u3002","title":"Tip of the Week #101: Return Values, References, and Lifetimes"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-101/#case-by-case-what-is-being-returned-and-how-is-it-being-stored","text":"\u8fd9\u91cc\u6709\u4e24\u4e2a\u6216\u8005\u4e09\u4e2a\u5f88\u91cd\u8981\u7684\u95ee\u9898: \u4f8b\u5b50\u4e2d GetName() \u8fd4\u56de\u7684\u7c7b\u578b\u662f\u4ec0\u4e48? \u4f8b\u5b50\u4e2dname\u662f\u7528\u4ec0\u4e48\u7c7b\u578b\u5b58\u50a8\u6216\u8005\u521d\u59cb\u5316? \u5982\u679c\u6211\u4eec\u8981\u8fd4\u56de\u5f15\u7528\uff0c\u90a3\u4e48\u8fd4\u56de\u7684\u5bf9\u8c61\u88ab\u5f15\u7528\u662f\u5426\u5b58\u5728\u751f\u547d\u5468\u671f\u9650\u5236? \u6211\u4eec\u5c06\u7ee7\u7eed\u4f7f\u7528String\u7c7b\u578b\u4f5c\u4e3a\u6211\u4eec\u7684\u793a\u4f8b\u7c7b\u578b\uff0c\u4f46\u662f\u5bf9\u4e8e\u5927\u591a\u6570non-trivial\u7684\u503c\u7c7b\u578b\uff0c\u540c\u6837\u4e5f\u9002\u7528\u3002 \u8fd4\u56de string \uff0c\u521d\u59cb\u5316 string \uff0c\u8fd9\u4e2a\u901a\u5e38\u4f1a\u7531 RVO \u6765\u4fdd\u8bc1\uff0c\u6700\u574f\u60c5\u51b5\u4e0b\u4f1a\u4f7f\u7528C++11\u4e2d\u7684move(\u5177\u4f53\u7ec6\u8282\u89c1 TotW 77 ) \u8fd4\u56de string& \u6216\u8005 const string& \uff0c\u521d\u59cb\u5316 string \uff0c\u8fd9\u4f1a\u53d1\u751f\u62f7\u8d1d(\u56e0\u4e3a\u4e00\u65e6\u521d\u59cb\u5316\u65b0\u7684\u5b57\u7b26\u4e32\uff0c\u90a3\u4e48\u4ed6\u5c31\u6709\u4e24\u4e2a\u540d\u5b57\u4e86\uff0c\u8fd9\u53d1\u751f\u4e86\u62f7\u8d1d\uff0c\u5177\u4f53\u7ec6\u8282\u89c1 TotW 77 ).\u6709\u7684\u65f6\u5019\u8fd9\u662f\u6709\u4ef7\u503c\u7684\uff0c\u5c31\u50cf\u4f60\u662f\u5426\u9700\u8981\u8ba9 string \u7684\u751f\u547d\u5468\u671f\u66f4\u957f\u4e45\u3002 \u8fd4\u56de string \uff0c\u521d\u59cb\u5316 string& \uff0c\u8fd9\u662f\u6ca1\u529e\u6cd5\u7f16\u8bd1\u7684\uff0c\u56e0\u4e3a\u4f60\u4e0d\u80fd\u5bf9\u4e00\u4e2a\u4e34\u65f6\u53d8\u91cf\u8fdb\u884c\u5f15\u7528\u7684\u7ed1\u5b9a \u8fd4\u56de const string& \uff0c\u521d\u59cb\u5316 string& \uff0c\u8fd9\u662f\u6ca1\u529e\u6cd5\u7f16\u8bd1\u7684\uff0c\u6ca1\u529e\u6cd5\u901a\u8fc7\u8fd9\u79cd\u5220\u9664\u53bb\u9664 const \u9650\u5236 \u8fd4\u56de const string& \uff0c\u521d\u59cb\u5316 const string& \uff0c\u8fd9\u662f\u6ca1\u6709\u6027\u80fd\u635f\u8017\u7684(\u4f60\u4ec5\u4ec5\u662f\u9ad8\u6548\u7684\u8fd4\u56de\u4e86\u4e00\u4e2a\u6307\u9488)\u3002\u4f46\u662f\u4f60\u5df2\u7ecf\u7ee7\u627f\u4e86\u6240\u6709\u751f\u547d\u5468\u671f\u7684\u9650\u5236\uff0c\u5f15\u7528\u7684\u5bf9\u8c61\u751f\u547d\u5468\u671f\u591a\u957f? \u5927\u591a\u6570\u8bbf\u95ee\u5668\u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u5bf9\u6210\u5458\u7684\u5f15\u7528\uff0c\u8fd9\u4e2a\u5f15\u7528\u7684\u751f\u547d\u5468\u671f\u548c\u8fd9\u4e2a\u5305\u542b\u6210\u5458\u7684\u5bf9\u8c61\u7684\u751f\u547d\u5468\u671f\u4e00\u6837\u957f\u3002\u5728\u8fd9\u4e2a\u5bf9\u8c61\u7684\u751f\u547d\u5468\u671f\u5185\u90fd\u662f\u6709\u6548\u7684\u3002 \u8fd4\u56de string& \uff0c\u521d\u59cb\u5316 string& \uff0c\u8fd9\u4e2a#5\u662f\u4e00\u6837\u7684\uff0c\u4f46\u9700\u8981\u6ce8\u610f\u7684\u662f\uff1a\u8fd4\u56de\u7684\u5f15\u7528\u662f\u975e\u5e38\u91cf\u7684\uff0c\u56e0\u6b64\u5bf9\u5f15\u7528\u7684\u4efb\u4f55\u4fee\u6539\u90fd\u5c06\u53cd\u6620\u5728\u6e90\u4ee3\u7801\u4e2d\u3002 \u8fd4\u56de string& \uff0c\u521d\u59cb\u5316 const string& \uff0c\u548c #5 \u662f\u4e00\u6837\u7684\u3002 \u8fd4\u56de string \uff0c\u521d\u59cb\u5316 const string& \uff0c\u5728 #3 \u8fd9\u662f\u6ca1\u529e\u6cd5\u5de5\u4f5c\u7684\uff0c\u7136\u800c C++ \u8bed\u8a00\u5bf9\u4e8e\u8fd9\u79cd\u521d\u59cb\u5316 const \u5f15\u7528\u662f\u6709\u7279\u6b8a\u652f\u6301\u7684\uff0c\u5982\u679c\u4f60\u7528\u4e34\u65f6\u7684 T \u6765\u521d\u59cb\u5316 const T& \uff0c\u8fd9\u662f\u53ef\u884c\u7684\uff0c\u4e34\u65f6\u7684 T \u5c06\u4e0d\u4f1a\u88ab\u6790\u6784\uff0c\u76f4\u5230\u5bf9\u4ed6\u7684\u5f15\u7528\u79bb\u5f00\u5176\u4f5c\u7528\u57df\u3002 \u65b9\u6848 #8 \u662f\u4f7f\u7528\u5f15\u7528\u7684\u6700\u7075\u6d3b\u65b9\u5f0f(\u4e0d\u60f3\u590d\u5236\uff0c\u53ea\u662f\u60f3\u8d4b\u503c\u7ed9\u4e00\u4e2a\u5f15\u7528\u800c\u4e0d\u7528\u8003\u8651\u8fd4\u56de\u7684\u662f\u4ec0\u4e48)\uff0c\u7136\u800c\u56e0\u4e3a\u65b9\u6848 #1 \uff0c\u5b83\u4e5f\u6ca1\u6709\u771f\u6b63\u7684\u4e3a\u4f60\u505a\u4efb\u4f55\u4e8b\u60c5\uff0c\u5b83\u53ef\u80fd\u4e5f\u4e0d\u9700\u8981\u8fdb\u884c\u62f7\u8d1d\u3002\u6b64\u5916\uff0c\u73b0\u5728\u60a8\u7684\u4ee3\u7801\u9605\u8bfb\u8005\u5fc5\u987b\u4e0e\u60a8\u7684\u5c40\u90e8\u53d8\u91cf\u7c7b\u578b\u4e3a const string\uff06 \u800c\u4e0d\u662f string \u8fdb\u884c\u7ade\u4e89\uff0c\u800c\u4e14\u8fd8\u62c5\u5fc3\u5b57\u7b26\u4e32\u5e95\u5c42\u7684\u6570\u636e\u662f\u5426\u8d85\u51fa\u8303\u56f4\u6216\u5df2\u66f4\u6539\u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c\u5f53review\u539f\u59cb\u7684\u4ee3\u7801\u7247\u6bb5\u65f6\uff0c\u6211\u4e0d\u5f97\u4e0d\u62c5\u5fc3: GetName \u8fd4\u56de\u7684\u662f\u503c\u8fd8\u662f\u5f15\u7528? Consumer\u7684\u6784\u9020\u5668\u662f\u4f7f\u7528 string \uff0c const string& \uff0c\u8fd8\u662f string_view ? \u6784\u9020\u51fd\u6570\u662f\u5426\u5bf9\u4e8e\u53c2\u6570\u7684\u751f\u547d\u5468\u671f\u6709\u8981\u6c42?(\u5982\u679c\u4e0d\u4ec5\u4ec5\u662f\u5b57\u7b26\u4e32) \u7136\u540e\uff0c\u5982\u679c\u4ec5\u4ec5\u5c06\u793a\u4f8b\u4ee3\u7801\u4e2d\u7684 name \u58f0\u660e\u4e3a string \uff0c\u5b83\u901a\u5e38\u6548\u7387\u4e0d\u4f4e\uff08\u7531\u4e8eRVO\u548c\u79fb\u52a8\u8bed\u4e49\uff09\uff0c\u5e76\u4e14\u81f3\u5c11\u5728\u5bf9\u8c61\u751f\u547d\u5468\u671f\u65b9\u9762\u662f\u5b89\u5168\u7684\u3002 \u6b64\u5916\uff0c\u5982\u679c\u6709\u5bf9\u8c61\u7684\u751f\u547d\u5468\u671f\u95ee\u9898\uff0c\u5b83\u5f80\u5f80\u662f\u7b80\u5355\u7684\u5b57\u7b26\u4e32\u5b58\u50a8\u65f6\u624d\u4f1a\u53d1\u73b0\uff1a\u5c14\u4e0d\u662f\u770b GetName() \u8fd4\u56de\u7684\u5f15\u7528\u7684\u751f\u547d\u5468\u671f\u548c SetName \u5bf9\u4e8e\u751f\u547d\u5468\u671f\u7684\u9700\u6c42\u4e4b\u95f4\u7684\u76f8\u5173\u5173\u7cfb\u3002\u4f60\u81ea\u5df1\u62e5\u6709\u7684\u5b57\u7b26\u4e32\u610f\u5473\u7740\u53ea\u80fd\u770b\u672c\u5730\u4ee3\u7801\u548c setName() \u7684\u5b9e\u73b0\u5373\u53ef\u3002 \u6240\u6709\u8fd9\u4e9b\u90fd\u662f\u8bf4\uff1a\u907f\u514d\u590d\u5236\u662f\u53ef\u4ee5\u7684\uff0c\u53ea\u8981\u60a8\u4e0d\u4f7f\u4e8b\u60c5\u53d8\u5f97\u66f4\u590d\u6742\u5373\u53ef\u3002\u9996\u5148\u5728\u6ca1\u6709\u526f\u672c\u65f6\uff0c\u4f7f\u4ee3\u7801\u53d8\u5f97\u66f4\u52a0\u590d\u6742\u5e76\u4e0d\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u6743\u8861\u3002","title":"Case by Case: What is Being Returned and How is it Being Stored?"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-103/","text":"Tip of the Week #103: Flags Are Globals by Matt Armstrong Define flags at global scope in a .cc file. Declare them at most once in a corresponding .h file. Why Declare Things In Header Files? \u4f7f\u7528\u5934\u6587\u4ef6\u5bf9\u4e8e\u6211\u4eec\u5927\u591a\u6570\u4eba\u6765\u8bf4\u662f\u4e00\u79cd\u53cd\u5c04\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u80fd\u5df2\u7ecf\u5fd8\u8bb0\u4e86\u4e3a\u4ec0\u4e48\u4f7f\u7528\u5b83\u4eec: \u5728\u5934\u6587\u4ef6\u4e2d\u58f0\u660e\u4e00\u4e9b\u4e1c\u897f\uff0c\u8ba9 #include \u53ef\u4ee5\u5728\u5176\u4ed6\u4efb\u4f55\u5730\u65b9\u8f7b\u677e\u7684\u4f7f\u7528\u8fd9\u4e2a\u5934\u6587\u4ef6\uff0c\u53ef\u4ee5\u8ba9\u6574\u4e2a\u7a0b\u5e8f\u53ef\u4ee5\u770b\u5230\u76f8\u540c\u7684\u58f0\u660e\u3002 \u5728 .cc \u6587\u4ef6\u4e2d\u5305\u542b\u8fd9\u4e2a\u5934\u6587\u4ef6\uff0c\u5e76\u5bf9\u5176\u58f0\u660e\u7684\u5b9e\u4f53\u8fdb\u884c\u5b9a\u4e49\uff0c\u53ef\u786e\u4fdd\u5b9a\u4e49\u4e0e\u58f0\u660e\u5339\u914d\u3002 \u5934\u6587\u4ef6\u5145\u5f53\u8f6f\u4ef6\u5305\u516c\u5171API\u7684\u6587\u6863\u3002\u9664\u4e86\u8f6f\u4ef6\u5305\u7684\u516c\u5171API\u5916\uff0c\u4e0d\u80fd\u4f7f\u7528\u5176\u4ed6\u4efb\u4f55\u5f62\u5f0f\u3002 \u5305\u542b\u5934\u6587\u4ef6\uff0c\u800c\u4e0d\u662f\u91cd\u65b0\u58f0\u660e\u5b9e\u4f53\uff0c\u53ef\u4ee5\u5e2e\u52a9\u5de5\u5177\u548c\u4eba\u5458\u8fdb\u884c\u4f9d\u8d56\u5173\u7cfb\u5206\u6790\u3002 Abseil Flags Are As Vulnerable As Any Other Global \u60a8\u53ef\u4ee5\u6b63\u786e\u6267\u884c\u6b64\u64cd\u4f5c\uff0c\u800c\u4e0d\u4f1a\u51fa\u73b0\u94fe\u63a5\u65f6\u9519\u8bef\u3002\u9996\u5148\uff0c\u5c06\u4ee5\u4e0b\u5185\u5bb9\u653e\u5728 .cc \u6587\u4ef6\u4e2d\uff1a 1 2 // Defining --my_flag in a .cc file. ABSL_FLAG ( std :: string , my_flag , \"\" , \"My flag is a string.\" ); \u4e0b\u9762\u4ee3\u7801\u9519\u8bef\u5730\u5728\u53e6\u4e00\u4e2a .cc \u6587\u4ef6\uff08\u53ef\u80fd\u662f\u6d4b\u8bd5\uff09\u4e2d\u58f0\u660e\u8be5\u6807\u5fd7\uff1a 1 2 // Declared in error: type should be std::string. extern absl :: Flag < int64 > FLAGS_my_flag ; \u8fd9\u4e2a\u7a0b\u5e8f\u662f\u5b58\u5728\u95ee\u9898\u7684\uff0c\u53d1\u751f\u7684\u4efb\u4f55\u4e8b\u60c5\u90fd\u662f\u672a\u5b9a\u4e49\u884c\u4e3a\u7684\u7ed3\u679c\u3002\u5728\u6211\u7684\u6d4b\u8bd5\u7a0b\u5e8f\u4e2d\uff0c\u8bbf\u95ee\u8be5\u6807\u5fd7\u65f6\uff0c\u6b64\u4ee3\u7801\u5df2\u7f16\u8bd1\u3001\u94fe\u63a5\u548c\u5954\u6e83\u4e86\u3002 Recommendations \u4e0e\u5168\u5c40\u53d8\u91cf\u4e00\u6837\uff0c\u4f7f\u7528\u547d\u4ee4\u884c\u6807\u5fd7\u8fdb\u884c\u8bbe\u8ba1\u3002 \u5982\u679c\u53ef\u4ee5\u7684\u8bdd\uff0c\u907f\u514d\u4f7f\u7528flag\uff0c\u5177\u4f53\u7ec6\u8282\u53c2\u89c1 TotW 45 . \u5982\u679c\u4f7f\u7528flag\u4f7f\u6d4b\u8bd5\u66f4\u5bb9\u6613\u7f16\u5199\uff0c\u800c\u53c8\u4e0d\u60f3\u5728\u751f\u4ea7\u73af\u5883\u4e2d\u8fdb\u884c\u8bbe\u7f6e\uff0c\u8bf7\u8003\u8651\u5c06\u4ec5\u6d4b\u8bd5\u7684API\u6dfb\u52a0\u5230\u7c7b\u4e2d\u3002 \u8003\u8651\u5c06flag\u89c6\u4e3a\u79c1\u6709\u9759\u6001\u53d8\u91cf\u3002\u5982\u679c\u5176\u4ed6\u8f6f\u4ef6\u5305\u9700\u8981\u8bbf\u95ee\u5b83\u4eec\uff0c\u5219\u5c06\u5b83\u4eec\u5305\u88c5\u5728\u51fd\u6570\u4e2d\u3002 \u5728flag\u8303\u56f4\u51b2\u7a81\u65f6\uff0c\u5728\u5168\u5c40\u8303\u56f4\uff08\u800c\u4e0d\u662f\u5728\u540d\u79f0\u7a7a\u95f4\u5185\uff09\u5b9a\u4e49\u6807\u5fd7\uff0c\u4ee5\u83b7\u53d6\u94fe\u63a5\u9519\u8bef\u3002 \u5982\u679c\u5728\u591a\u4e2a\u6587\u4ef6\u4e2d\u8bbf\u95ee\u4e00\u4e2aflag\uff0c\u5219\u5728\u4e0e\u5176\u5b9a\u4e49\u76f8\u5bf9\u5e94\u7684\u4e00\u4e2a.h\u6587\u4ef6\u4e2d\u58f0\u660e\u5b83\u3002 \u4f7f\u7528 ABSL_FLAG(type, ...) \u5b8f\u6765\u5b9a\u4e49flag In Conclusion Flag\u662f\u5168\u5c40\u53d8\u91cf\uff0c\u660e\u667a\u5730\u4f7f\u7528\u5b83\u4eec\u3002\u4e0e\u4f7f\u7528\u5176\u4ed6\u4efb\u4f55\u5168\u5c40\u53d8\u91cf\u4e00\u6837\uff0c\u4f7f\u7528\u5e76\u58f0\u660e\u5b83\u4eec\u3002","title":"Tip of the Week #103: Flags Are Globals"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-103/#tip-of-the-week-103-flags-are-globals","text":"by Matt Armstrong Define flags at global scope in a .cc file. Declare them at most once in a corresponding .h file.","title":"Tip of the Week #103: Flags Are Globals"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-103/#why-declare-things-in-header-files","text":"\u4f7f\u7528\u5934\u6587\u4ef6\u5bf9\u4e8e\u6211\u4eec\u5927\u591a\u6570\u4eba\u6765\u8bf4\u662f\u4e00\u79cd\u53cd\u5c04\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u80fd\u5df2\u7ecf\u5fd8\u8bb0\u4e86\u4e3a\u4ec0\u4e48\u4f7f\u7528\u5b83\u4eec: \u5728\u5934\u6587\u4ef6\u4e2d\u58f0\u660e\u4e00\u4e9b\u4e1c\u897f\uff0c\u8ba9 #include \u53ef\u4ee5\u5728\u5176\u4ed6\u4efb\u4f55\u5730\u65b9\u8f7b\u677e\u7684\u4f7f\u7528\u8fd9\u4e2a\u5934\u6587\u4ef6\uff0c\u53ef\u4ee5\u8ba9\u6574\u4e2a\u7a0b\u5e8f\u53ef\u4ee5\u770b\u5230\u76f8\u540c\u7684\u58f0\u660e\u3002 \u5728 .cc \u6587\u4ef6\u4e2d\u5305\u542b\u8fd9\u4e2a\u5934\u6587\u4ef6\uff0c\u5e76\u5bf9\u5176\u58f0\u660e\u7684\u5b9e\u4f53\u8fdb\u884c\u5b9a\u4e49\uff0c\u53ef\u786e\u4fdd\u5b9a\u4e49\u4e0e\u58f0\u660e\u5339\u914d\u3002 \u5934\u6587\u4ef6\u5145\u5f53\u8f6f\u4ef6\u5305\u516c\u5171API\u7684\u6587\u6863\u3002\u9664\u4e86\u8f6f\u4ef6\u5305\u7684\u516c\u5171API\u5916\uff0c\u4e0d\u80fd\u4f7f\u7528\u5176\u4ed6\u4efb\u4f55\u5f62\u5f0f\u3002 \u5305\u542b\u5934\u6587\u4ef6\uff0c\u800c\u4e0d\u662f\u91cd\u65b0\u58f0\u660e\u5b9e\u4f53\uff0c\u53ef\u4ee5\u5e2e\u52a9\u5de5\u5177\u548c\u4eba\u5458\u8fdb\u884c\u4f9d\u8d56\u5173\u7cfb\u5206\u6790\u3002","title":"Why Declare Things In Header Files?"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-103/#abseil-flags-are-as-vulnerable-as-any-other-global","text":"\u60a8\u53ef\u4ee5\u6b63\u786e\u6267\u884c\u6b64\u64cd\u4f5c\uff0c\u800c\u4e0d\u4f1a\u51fa\u73b0\u94fe\u63a5\u65f6\u9519\u8bef\u3002\u9996\u5148\uff0c\u5c06\u4ee5\u4e0b\u5185\u5bb9\u653e\u5728 .cc \u6587\u4ef6\u4e2d\uff1a 1 2 // Defining --my_flag in a .cc file. ABSL_FLAG ( std :: string , my_flag , \"\" , \"My flag is a string.\" ); \u4e0b\u9762\u4ee3\u7801\u9519\u8bef\u5730\u5728\u53e6\u4e00\u4e2a .cc \u6587\u4ef6\uff08\u53ef\u80fd\u662f\u6d4b\u8bd5\uff09\u4e2d\u58f0\u660e\u8be5\u6807\u5fd7\uff1a 1 2 // Declared in error: type should be std::string. extern absl :: Flag < int64 > FLAGS_my_flag ; \u8fd9\u4e2a\u7a0b\u5e8f\u662f\u5b58\u5728\u95ee\u9898\u7684\uff0c\u53d1\u751f\u7684\u4efb\u4f55\u4e8b\u60c5\u90fd\u662f\u672a\u5b9a\u4e49\u884c\u4e3a\u7684\u7ed3\u679c\u3002\u5728\u6211\u7684\u6d4b\u8bd5\u7a0b\u5e8f\u4e2d\uff0c\u8bbf\u95ee\u8be5\u6807\u5fd7\u65f6\uff0c\u6b64\u4ee3\u7801\u5df2\u7f16\u8bd1\u3001\u94fe\u63a5\u548c\u5954\u6e83\u4e86\u3002","title":"Abseil Flags Are As Vulnerable As Any Other Global"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-103/#recommendations","text":"\u4e0e\u5168\u5c40\u53d8\u91cf\u4e00\u6837\uff0c\u4f7f\u7528\u547d\u4ee4\u884c\u6807\u5fd7\u8fdb\u884c\u8bbe\u8ba1\u3002 \u5982\u679c\u53ef\u4ee5\u7684\u8bdd\uff0c\u907f\u514d\u4f7f\u7528flag\uff0c\u5177\u4f53\u7ec6\u8282\u53c2\u89c1 TotW 45 . \u5982\u679c\u4f7f\u7528flag\u4f7f\u6d4b\u8bd5\u66f4\u5bb9\u6613\u7f16\u5199\uff0c\u800c\u53c8\u4e0d\u60f3\u5728\u751f\u4ea7\u73af\u5883\u4e2d\u8fdb\u884c\u8bbe\u7f6e\uff0c\u8bf7\u8003\u8651\u5c06\u4ec5\u6d4b\u8bd5\u7684API\u6dfb\u52a0\u5230\u7c7b\u4e2d\u3002 \u8003\u8651\u5c06flag\u89c6\u4e3a\u79c1\u6709\u9759\u6001\u53d8\u91cf\u3002\u5982\u679c\u5176\u4ed6\u8f6f\u4ef6\u5305\u9700\u8981\u8bbf\u95ee\u5b83\u4eec\uff0c\u5219\u5c06\u5b83\u4eec\u5305\u88c5\u5728\u51fd\u6570\u4e2d\u3002 \u5728flag\u8303\u56f4\u51b2\u7a81\u65f6\uff0c\u5728\u5168\u5c40\u8303\u56f4\uff08\u800c\u4e0d\u662f\u5728\u540d\u79f0\u7a7a\u95f4\u5185\uff09\u5b9a\u4e49\u6807\u5fd7\uff0c\u4ee5\u83b7\u53d6\u94fe\u63a5\u9519\u8bef\u3002 \u5982\u679c\u5728\u591a\u4e2a\u6587\u4ef6\u4e2d\u8bbf\u95ee\u4e00\u4e2aflag\uff0c\u5219\u5728\u4e0e\u5176\u5b9a\u4e49\u76f8\u5bf9\u5e94\u7684\u4e00\u4e2a.h\u6587\u4ef6\u4e2d\u58f0\u660e\u5b83\u3002 \u4f7f\u7528 ABSL_FLAG(type, ...) \u5b8f\u6765\u5b9a\u4e49flag","title":"Recommendations"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-103/#in-conclusion","text":"Flag\u662f\u5168\u5c40\u53d8\u91cf\uff0c\u660e\u667a\u5730\u4f7f\u7528\u5b83\u4eec\u3002\u4e0e\u4f7f\u7528\u5176\u4ed6\u4efb\u4f55\u5168\u5c40\u53d8\u91cf\u4e00\u6837\uff0c\u4f7f\u7528\u5e76\u58f0\u660e\u5b83\u4eec\u3002","title":"In Conclusion"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-107/","text":"Tip of the Week #107: Reference Lifetime Extension Originally posted as totw/107 on 2015-12-10 By Titus Winters (titus@google.com) \u5173\u4e8e TotW 101 \u4e4b\u540e\uff0c\u6709\u4e00\u4e9b\u5173\u4e8e\u5f15\u7528\u548c\u751f\u547d\u5468\u671f\u7684\u4e0d\u592a\u6e05\u695a\u7684\u7814\u7a76\uff0c\u56e0\u6b64\u5728\u672cTips\u4e2d\uff0c\u6211\u4eec\u5c06\u6df1\u5165\u63a2\u8ba8\u201c\u4f55\u65f6\u5ef6\u957f\u53c2\u8003\u751f\u547d\u5468\u671f\uff1f\u201d\u8fd9\u4e00\u95ee\u9898\u3002 1 2 string Foo::GetName (); const string & name = obj . GetName (); // Is this safe/legal? \u7b80\u800c\u8a00\u4e4b\uff0c\u5f53\u4e14\u4ec5\u5f53 \u4e00\u4e2a const T& (\u6216\u8005\u662f T&& \uff0c\u5c3d\u7ba1Google code style\u901a\u5e38\u4e0d\u5efa\u8bae\u4f7f\u7528)\u88ab\u4e00\u4e2a\u8fd4\u56de\u4e34\u65f6\u5bf9\u8c61 T \u7684\u8868\u8fbe\u5f0f(\u901a\u5e38\u662f\u4e00\u4e2a\u51fd\u6570\u8c03\u7528)\u521d\u59cb\u5316 \u6807\u51c6\u672f\u8bed\u7684\u89e3\u91ca\u53ef\u80fd\u6709\u4e9b\u68d8\u624b\uff0c\u56e0\u6b64\u8ba9\u6211\u4eec\u8ba8\u8bba\u4e00\u4e9b\u8fb9\u7f18\u60c5\u51b5\u6765\u9610\u660e\uff1a \u5f53\u8d4b\u503c\u7ed9 T& \u7684\u65f6\u5019\u662f\u6ca1\u529e\u6cd5\u5de5\u4f5c\u7684\uff0c\u5fc5\u987b\u662f\u8d4b\u503c\u7ed9 const T& (\u5b83\u4f1a\u53d1\u751f\u7f16\u8bd1\u9519\u8bef) \u5982\u679c\u5b83\u662f\u4e00\u4e2a\u7c7b\u578b(\u975e\u591a\u6001)\u7684\u8f6c\u6362\uff0c\u4f8b\u5982\u5c06 string \u8d4b\u503c\u7ed9 const absl::string_view& \uff0c\u8fd9\u5e76\u6ca1\u6709\u62d3\u5bbd string \u7684\u751f\u547d\u5468\u671f\u3002 \u76f4\u63a5\u83b7\u53d6\u5b50\u5bf9\u8c61\u4e5f\u662f\u6ca1\u529e\u6cd5\u6b63\u5e38\u5de5\u4f5c\u3002 \u5141\u8bb8\u7c7b\u578b\u8f6c\u6362\u7684\u60c5\u51b5\u662f\uff0c\u5f53 T \u662f U \u7684\u7236\u7c7b\u65f6\uff0c\u4ece U \u7684\u4e34\u65f6\u5bf9\u8c61\u8d4b\u503c\u7ed9 T\uff06 \u3002\u8bf7\u4e0d\u8981\u8fd9\u6837\u505a\uff1a\u4e0e\u5176\u4ed6\u60c5\u51b5\u76f8\u6bd4\uff0c\u5b83\u751a\u81f3\u4f1a\u4f7f\u8bfb\u8005\u611f\u5230\u56f0\u60d1\u3002 \u5982\u679c\u4e34\u65f6\u5bf9\u8c61\u7684\u751f\u547d\u5468\u671f\u88ab\u62d3\u5c55\u4e86\uff0c\u90a3\u4e48\u5b83\u5c06\u4f1a\u6301\u7eed\u5230\u5f15\u7528\u5b83\u7684\u53d8\u91cf\u79bb\u5f00\u4f5c\u7528\u57df\u3002\u5982\u679c\u4e34\u65f6\u5bf9\u8c61\u7684\u751f\u547d\u5468\u671f\u6ca1\u6709\u88ab\u62d3\u5c55\uff0c\u90a3\u4e48 T \u5c06\u4f1a\u5728\u8bed\u53e5\u672b\u5c3e\u7684\u65f6\u5019\u88ab\u9500\u6bc1 \u901a\u8fc7 TotW 101 \u6211\u4eec\u53ef\u4ee5\u77e5\u9053\uff0c\u4e0d\u5e94\u8be5\u4f9d\u8d56\u663e\u793a\u7684\u5f15\u7528\u521d\u59cb\u5316\u6765\u8fdb\u884c\u751f\u547d\u5468\u671f\u7684\u62d3\u5c55\uff0c\u8fd9\u5e76\u672a\u5f97\u5230\u591a\u5c11\u6027\u80fd\u7684\u63d0\u5347\u3002\u800c\u4e14\u8fd9\u4e3a\u4ee3\u7801\u53ef\u8bfb\u6027\u4ee5\u53ca\u672a\u6765\u7684\u53ef\u7ef4\u62a4\u6027\u5e26\u6765\u4e0d\u5c11\u56f0\u96be\u3002 \u4e00\u4e9b\u7ec6\u5fae\u7684\u60c5\u51b5\u4e0b\uff0c\u751f\u547d\u5468\u671f\u5ef6\u957f\u6b63\u5728\u53d1\u751f\uff0c\u800c\u4e14\u662f\u5fc5\u8981\u7684\uff0c\u5e76\u4e14\u662f\u6709\u76ca\u7684(\u4f8b\u5982\u5728\u4e34\u65f6\u5bb9\u5668\u4e0a\u8fdb\u884cfor range)\uff0c\u540c\u6837\uff0c\u751f\u547d\u5468\u671f\u7684\u6269\u5c55\u4ec5\u7528\u4e8e\u4e34\u65f6\u8868\u8fbe\u5f0f\u7684\u7ed3\u679c\uff0c\u800c\u4e0d\u7528\u4e8e\u4efb\u4f55\u5b50\u8868\u8fbe\u5f0f\u3002\u4f8b\u5982\uff0c\u8fd9\u4e9b\u5de5\u4f5c\uff1a 1 2 3 4 5 6 7 8 9 std :: vector < int > GetInts (); for ( int i : GetInts ()) { } // lifetime extension on the vector is important // Return string_views of size 1 for each char in this string. std :: vector < absl :: string_view > Explode ( const string & s ); // vector\u4e2d\u7684string_view\u7684\u751f\u547d\u5468\u671f\u5e76\u6ca1\u6709\u88ab\u5ef6\u957f // Lifetime extension kicks in on the vector, but *not* on the temporary string! for ( absl :: string_view s : Explode ( StrCat ( \"oo\" , \"ps\" ))) { } // WRONG \u4e0b\u9762\u5219\u65e0\u6cd5\u6b63\u5e38\u5de5\u4f5c: 1 2 3 4 5 6 7 8 9 10 MyProto GetProto (); // sub_protos\u83b7\u53d6\u5230\u7684\u5b50\u5bf9\u8c61\u6ca1\u529e\u6cd5\u8fdb\u884c\u751f\u547d\u5468\u671f\u7684\u5ef6\u957f\uff0cMyProto\u5bf9\u8c61\u5728\u8bed\u53e5\u7ed3\u675f\u65f6\u5c31\u5df2\u7ecf\u88ab\u9500\u6bc1\u4e86\u3002 // Lifetime extension *doesn't work* here: sub_protos (a repeated field) // is destroyed by MyProto going out of scope, and the lifetime extension rules // don't kick in here to magically lifetime extend the MyProto returned by // GetProto(). The sub-object lifetime extension only works for simple // is-a-member-of relationships: the compiler doesn't see that sub_protos() // itself returning a reference to an sub-object of the outer temporary. for ( const SubProto & p : GetProto (). sub_protos ()) { } // WRONG","title":"Tip of the Week #107: Reference Lifetime Extension"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-107/#tip-of-the-week-107-reference-lifetime-extension","text":"Originally posted as totw/107 on 2015-12-10 By Titus Winters (titus@google.com) \u5173\u4e8e TotW 101 \u4e4b\u540e\uff0c\u6709\u4e00\u4e9b\u5173\u4e8e\u5f15\u7528\u548c\u751f\u547d\u5468\u671f\u7684\u4e0d\u592a\u6e05\u695a\u7684\u7814\u7a76\uff0c\u56e0\u6b64\u5728\u672cTips\u4e2d\uff0c\u6211\u4eec\u5c06\u6df1\u5165\u63a2\u8ba8\u201c\u4f55\u65f6\u5ef6\u957f\u53c2\u8003\u751f\u547d\u5468\u671f\uff1f\u201d\u8fd9\u4e00\u95ee\u9898\u3002 1 2 string Foo::GetName (); const string & name = obj . GetName (); // Is this safe/legal? \u7b80\u800c\u8a00\u4e4b\uff0c\u5f53\u4e14\u4ec5\u5f53 \u4e00\u4e2a const T& (\u6216\u8005\u662f T&& \uff0c\u5c3d\u7ba1Google code style\u901a\u5e38\u4e0d\u5efa\u8bae\u4f7f\u7528)\u88ab\u4e00\u4e2a\u8fd4\u56de\u4e34\u65f6\u5bf9\u8c61 T \u7684\u8868\u8fbe\u5f0f(\u901a\u5e38\u662f\u4e00\u4e2a\u51fd\u6570\u8c03\u7528)\u521d\u59cb\u5316 \u6807\u51c6\u672f\u8bed\u7684\u89e3\u91ca\u53ef\u80fd\u6709\u4e9b\u68d8\u624b\uff0c\u56e0\u6b64\u8ba9\u6211\u4eec\u8ba8\u8bba\u4e00\u4e9b\u8fb9\u7f18\u60c5\u51b5\u6765\u9610\u660e\uff1a \u5f53\u8d4b\u503c\u7ed9 T& \u7684\u65f6\u5019\u662f\u6ca1\u529e\u6cd5\u5de5\u4f5c\u7684\uff0c\u5fc5\u987b\u662f\u8d4b\u503c\u7ed9 const T& (\u5b83\u4f1a\u53d1\u751f\u7f16\u8bd1\u9519\u8bef) \u5982\u679c\u5b83\u662f\u4e00\u4e2a\u7c7b\u578b(\u975e\u591a\u6001)\u7684\u8f6c\u6362\uff0c\u4f8b\u5982\u5c06 string \u8d4b\u503c\u7ed9 const absl::string_view& \uff0c\u8fd9\u5e76\u6ca1\u6709\u62d3\u5bbd string \u7684\u751f\u547d\u5468\u671f\u3002 \u76f4\u63a5\u83b7\u53d6\u5b50\u5bf9\u8c61\u4e5f\u662f\u6ca1\u529e\u6cd5\u6b63\u5e38\u5de5\u4f5c\u3002 \u5141\u8bb8\u7c7b\u578b\u8f6c\u6362\u7684\u60c5\u51b5\u662f\uff0c\u5f53 T \u662f U \u7684\u7236\u7c7b\u65f6\uff0c\u4ece U \u7684\u4e34\u65f6\u5bf9\u8c61\u8d4b\u503c\u7ed9 T\uff06 \u3002\u8bf7\u4e0d\u8981\u8fd9\u6837\u505a\uff1a\u4e0e\u5176\u4ed6\u60c5\u51b5\u76f8\u6bd4\uff0c\u5b83\u751a\u81f3\u4f1a\u4f7f\u8bfb\u8005\u611f\u5230\u56f0\u60d1\u3002 \u5982\u679c\u4e34\u65f6\u5bf9\u8c61\u7684\u751f\u547d\u5468\u671f\u88ab\u62d3\u5c55\u4e86\uff0c\u90a3\u4e48\u5b83\u5c06\u4f1a\u6301\u7eed\u5230\u5f15\u7528\u5b83\u7684\u53d8\u91cf\u79bb\u5f00\u4f5c\u7528\u57df\u3002\u5982\u679c\u4e34\u65f6\u5bf9\u8c61\u7684\u751f\u547d\u5468\u671f\u6ca1\u6709\u88ab\u62d3\u5c55\uff0c\u90a3\u4e48 T \u5c06\u4f1a\u5728\u8bed\u53e5\u672b\u5c3e\u7684\u65f6\u5019\u88ab\u9500\u6bc1 \u901a\u8fc7 TotW 101 \u6211\u4eec\u53ef\u4ee5\u77e5\u9053\uff0c\u4e0d\u5e94\u8be5\u4f9d\u8d56\u663e\u793a\u7684\u5f15\u7528\u521d\u59cb\u5316\u6765\u8fdb\u884c\u751f\u547d\u5468\u671f\u7684\u62d3\u5c55\uff0c\u8fd9\u5e76\u672a\u5f97\u5230\u591a\u5c11\u6027\u80fd\u7684\u63d0\u5347\u3002\u800c\u4e14\u8fd9\u4e3a\u4ee3\u7801\u53ef\u8bfb\u6027\u4ee5\u53ca\u672a\u6765\u7684\u53ef\u7ef4\u62a4\u6027\u5e26\u6765\u4e0d\u5c11\u56f0\u96be\u3002 \u4e00\u4e9b\u7ec6\u5fae\u7684\u60c5\u51b5\u4e0b\uff0c\u751f\u547d\u5468\u671f\u5ef6\u957f\u6b63\u5728\u53d1\u751f\uff0c\u800c\u4e14\u662f\u5fc5\u8981\u7684\uff0c\u5e76\u4e14\u662f\u6709\u76ca\u7684(\u4f8b\u5982\u5728\u4e34\u65f6\u5bb9\u5668\u4e0a\u8fdb\u884cfor range)\uff0c\u540c\u6837\uff0c\u751f\u547d\u5468\u671f\u7684\u6269\u5c55\u4ec5\u7528\u4e8e\u4e34\u65f6\u8868\u8fbe\u5f0f\u7684\u7ed3\u679c\uff0c\u800c\u4e0d\u7528\u4e8e\u4efb\u4f55\u5b50\u8868\u8fbe\u5f0f\u3002\u4f8b\u5982\uff0c\u8fd9\u4e9b\u5de5\u4f5c\uff1a 1 2 3 4 5 6 7 8 9 std :: vector < int > GetInts (); for ( int i : GetInts ()) { } // lifetime extension on the vector is important // Return string_views of size 1 for each char in this string. std :: vector < absl :: string_view > Explode ( const string & s ); // vector\u4e2d\u7684string_view\u7684\u751f\u547d\u5468\u671f\u5e76\u6ca1\u6709\u88ab\u5ef6\u957f // Lifetime extension kicks in on the vector, but *not* on the temporary string! for ( absl :: string_view s : Explode ( StrCat ( \"oo\" , \"ps\" ))) { } // WRONG \u4e0b\u9762\u5219\u65e0\u6cd5\u6b63\u5e38\u5de5\u4f5c: 1 2 3 4 5 6 7 8 9 10 MyProto GetProto (); // sub_protos\u83b7\u53d6\u5230\u7684\u5b50\u5bf9\u8c61\u6ca1\u529e\u6cd5\u8fdb\u884c\u751f\u547d\u5468\u671f\u7684\u5ef6\u957f\uff0cMyProto\u5bf9\u8c61\u5728\u8bed\u53e5\u7ed3\u675f\u65f6\u5c31\u5df2\u7ecf\u88ab\u9500\u6bc1\u4e86\u3002 // Lifetime extension *doesn't work* here: sub_protos (a repeated field) // is destroyed by MyProto going out of scope, and the lifetime extension rules // don't kick in here to magically lifetime extend the MyProto returned by // GetProto(). The sub-object lifetime extension only works for simple // is-a-member-of relationships: the compiler doesn't see that sub_protos() // itself returning a reference to an sub-object of the outer temporary. for ( const SubProto & p : GetProto (). sub_protos ()) { } // WRONG","title":"Tip of the Week #107: Reference Lifetime Extension"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-108/","text":"Tip of the Week #108: Avoid std::bind Originally published as totw/108 on 2016-01-07 By Roman Perepelitsa (roman.perepelitsa@gmail.com) Updated 2019-12-19 Quicklink: abseil.io/tips/108 Avoid std::bind \u8fd9\u4e2aTips\u603b\u7ed3\u4e86\u5728\u5199\u4ee3\u7801\u7684\u65f6\u5019\u4e3a\u4ec0\u4e48\u8981\u8fdc\u79bb std::bind \u3002 \u6b63\u786e\u4f7f\u7528 std::bind() \u662f\u5f88\u96be\u7684\uff0c\u8ba9\u6211\u4eec\u6765\u770b\u4e00\u770b\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u8fd9\u6bb5\u4ee3\u7801\u5bf9\u60a8\u6765\u8bf4\u770b\u8d77\u6765\u4e0d\u9519\u5417\uff1f 1 2 3 4 5 6 7 8 void DoStuffAsync ( std :: function < void ( Status ) > ; cb ); class MyClass { void Start () { DoStuffAsync ( std :: bind ( & MyClass :: OnDone , this )); } void OnDone ( Status status ); }; \u8bb8\u591a\u7ecf\u9a8c\u4e30\u5bcc\u7684 C++ \u5de5\u7a0b\u5e08\u7f16\u5199\u4e86\u8fd9\u6837\u7684\u4ee3\u7801\uff0c\u53ea\u662f\u53d1\u73b0\u5b83\u65e0\u6cd5\u7f16\u8bd1\u3002\u8fd9\u6bb5\u4ee3\u7801\u53ea\u80fd\u548c std::function<void()> \u7c7b\u578b\u7684function\u4e00\u8d77\u5de5\u4f5c\uff0c\u4f46\u662f\u4e0a\u9762\u4f8b\u5b50\u4e2d\u7684 MyClass::OnDone \u662f\u5305\u542b\u4e86\u989d\u5916\u7684\u53c2\u6570\u3002\u90a3\u8be5\u5982\u4f55? std::bind() \u5e76\u6ca1\u6709\u50cf\u8bb8\u591a C++ \u5de5\u7a0b\u5e08\u671f\u671b\u7684\u90a3\u6837\u7ed1\u5b9a\u51fd\u6570\u7684\u524dN\u4e2a\u53c2\u6570\uff0c\u4f60\u5fc5\u987b\u6307\u5b9a\u6bcf\u4e00\u4e2a\u53c2\u6570\uff0c\u56e0\u6b64\u6b63\u786e\u7684\u4f7f\u7528 std::bind \u5e94\u8be5\u662f\u4e0b\u9762\u8fd9\u79cd\u65b9\u5f0f\u3002 1 std :: bind ( & MyClass :: OnDone , this , std :: placeholders :: _1 ) \u4ee3\u7801\u770b\u8d77\u6765\u5f88\u4e11\u964b\uff0c\u90a3\u6709\u6ca1\u6709\u66f4\u597d\u7684\u529e\u6cd5\u5462? \u4f7f\u7528 absl::bind_front \u66ff\u6362\u3002 1 absl :: bind_front ( & MyClass :: OnDone , this ) \u597d\u5427\uff0c absl::bind_front() \u786e\u5b9e\u505a\u5230\u4e86\uff1a\u5b83\u7ed1\u5b9a\u4e86\u524dN\u4e2a\u53c2\u6570\uff0c\u5e76\u5b8c\u7f8e\u5730\u8f6c\u53d1\u4e86\u5176\u4f59\u53c2\u6570\uff1a absl::bind_front(F\uff0ca\uff0cb)(x\uff0cy) \u7684\u503c\u4e3a F(a\uff0cb\uff0cx \uff0cy) \u3002 \u55ef\uff0c\u6062\u590d\u4e86\u7406\u667a\u3002\u60f3\u73b0\u5728\u770b\u5230\u771f\u6b63\u6050\u6016\u7684\u4e1c\u897f\u5417\uff1f\u4e0b\u9762\u7684\u8fd9\u6bb5\u4ee3\u7801\u7684\u4f5c\u7528\u662f\u4ec0\u4e48\uff1f 1 2 3 4 5 6 7 8 void DoStuffAsync ( std :: function < void ( Status ) > cb ); class MyClass { void Start () { DoStuffAsync ( std :: bind ( & MyClass :: OnDone , this )); } void OnDone (); // No Status here. }; OnDone \u6ca1\u6709\u53c2\u6570\uff0c DoStuffAsync() \u7684\u56de\u8c03\u51fd\u6570\u53c2\u6570\u662f\u9700\u8981\u6709\u4e00\u4e2aStatus\u53c2\u6570\u7684\u3002\u4f60\u53ef\u80fd\u9884\u671f\u4f1a\u6709\u4e00\u4e2a\u7f16\u8bd1\u9519\u8bef\u5728\u8fd9\u91cc\u3002\u4f46\u662f\u5b9e\u9645\u4e0a\u4ee3\u7801\u6ca1\u6709\u4efb\u4f55 warning \u3002 \u56e0\u4e3a std::bind \u8fc7\u5206\u5730\u5f25\u5408\u4e86\u5dee\u8ddd\u3002\u6765\u81ea DoStuffAsync() \u7684\u6f5c\u5728\u9519\u8bef\u4f1a\u88ab\u9759\u9ed8\u5ffd\u7565\u3002 \u8fd9\u6837\u7684\u4ee3\u7801\u53ef\u80fd\u4f1a\u5bfc\u81f4\u4e25\u91cd\u7684\u635f\u574f\u3002\u6bd4\u5982\u67d0\u4e9bIO\u64cd\u4f5c\u5b9e\u9645\u4e0a\u53ef\u80fd\u6ca1\u6709\u6210\u529f\uff0c\u4f46\u662f\u56e0\u4e3a\u4e0a\u9762\u7684\u4ee3\u7801\u4f1a\u5bfc\u81f4\u59cb\u7ec8\u90fd\u662f\u6210\u529f\u7684\uff0c\u8fd9\u53ef\u80fd\u662f\u6bc1\u706d\u6027\u7684\u3002\u4e5f\u8bb8 MyClass \u7684\u4f5c\u8005\u6ca1\u6709\u610f\u8bc6\u5230 DoStuffAsync() \u53ef\u80fd\u4f1a\u4ea7\u751f\u9700\u8981\u5904\u7406\u7684\u9519\u8bef \u4e5f\u8bb8 DoStuffAsync() \u66fe\u7ecf\u63a5\u53d7 std::function<void()> \u4f5c\u4e3a\u53c2\u6570\uff0c\u7136\u540e\u5176\u4f5c\u8005\u51b3\u5b9a\u5f15\u5165\u9519\u8bef\u6a21\u5f0f\u5e76\u66f4\u65b0\u6240\u6709\u505c\u6b62\u7f16\u8bd1\u7684\u8c03\u7528\u65b9\u3002\u4e0d\u7ba1\u54ea\u79cd\u65b9\u5f0f\uff0c\u8be5\u9519\u8bef\u90fd\u4f1a\u8fdb\u5165\u751f\u4ea7\u4ee3\u7801\u3002 std::bind() \u7981\u7528\u4e86\u6211\u4eec\u4f9d\u8d56\u7684\u57fa\u672c\u7684\u7f16\u8bd1\u65f6\u68c0\u67e5\u4e4b\u4e00\uff0c\u7f16\u8bd1\u5668\u901a\u5e38\u4f1a\u544a\u8bc9\u4f60\uff0c\u8c03\u7528\u8005\u662f\u5426\u4f20\u9012\u4e86\u6bd4\u60a8\u671f\u671b\u7684\u66f4\u591a\u7684\u53c2\u6570\uff0c\u4f46\u662f\u5bf9\u4e8e std::bind() \u5219\u65e0\u6548\u3002\u591f\u6050\u6016\u5417\uff1f \u53e6\u5916\u4e00\u4e2a\u4f8b\u5b50\uff0c\u4f60\u5982\u4f55\u770b\u5f85\u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801? 1 2 3 4 5 6 void Process ( std :: unique_ptr < Request > req ); void ProcessAsync ( std :: unique_ptr < Request > req ) { thread :: DefaultQueue () -> Add ( ToCallback ( std :: bind ( & MyClass :: Process , this , std :: move ( req )))); } \u8de8\u5f02\u6b65\u8fb9\u754c\u4f20\u9012\u7684 std::unique_ptr \u3002\u4e0d\u7528\u8bf4\uff0c std::bind() \u5e76\u4e0d\u662f\u89e3\u51b3\u65b9\u6848\uff0c\u4e0a\u9762\u8fd9\u6bb5\u4ee3\u7801\u65e0\u6cd5\u7f16\u8bd1\uff0c\u56e0\u4e3a std::bind() \u4e0d\u4f1a\u5c06\u7ed1\u5b9a\u7684\u4ec5\u652f\u6301\u79fb\u52a8\u7684\u53c2\u6570\u79fb\u81f3\u76ee\u6807\u51fd\u6570\u3002 \u53ea\u9700\u7528 absl::bind_front() \u66ff\u6362 std::bind() \u5373\u53ef\u89e3\u51b3\u3002 \u4e0b\u4e00\u4e2a\u793a\u4f8b\u751a\u81f3\u4f7f\u4e00\u4e9b C++\u4e13\u5bb6 \u7ecf\u5e38\u7eca\u5012\u3002\u770b\u770b\u662f\u5426\u53ef\u4ee5\u627e\u5230\u95ee\u9898\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // F must be callable without arguments. template < class F > void DoStuffAsync ( F cb ) { auto DoStuffAndNotify = []( F cb ) { DoStuff (); cb (); }; thread :: DefaultQueue () -> Schedule ( std :: bind ( DoStuffAndNotify , cb )); } class MyClass { void Start () { DoStuffAsync ( std :: bind ( & yClass :: OnDone , this )); } void OnDone (); }; \u4e0a\u9762\u7684\u4ee3\u7801\u662f\u65e0\u6cd5\u7f16\u8bd1\u7684\uff0c\u56e0\u4e3a\u4f20\u9012 std::bind() \u7684\u7ed3\u679c\u7ed9\u53e6\u5916\u4e00\u4e2a std::bind() \u662f\u4e00\u4e2a\u7279\u6b8a\u7684case\u3002\u6b63\u5e38\u60c5\u51b5\u4e0b std::bind(F, arg)() \u6700\u7ec8\u8ba1\u7b97\u4e3a F(arg) \u3002 \u9664\u975earg\u662f\u53e6\u4e00\u4e2a std::bind() \u8c03\u7528\u7684\u7ed3\u679c\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5b83\u5c06\u6c42\u503c\u4e3a F(arg()) \u3002\u5982\u679c\u5c06arg\u53ef\u4ee5\u8f6c\u6362\u4e3a std::function<void()> \uff0c\u5219\u4f1a\u5931\u53bb std::bind \u7684\u6548\u679c\u3002 This doesn\u2019t compile because passing the result of std::bind() to another std::bind() is a special case. Normally, std::bind(F, arg)() evaluates to F(arg), except when arg is the result of another std::bind() call, in which case it evaluates to F(arg()). If arg is converted to std::function , the magic behavior is lost. \u5c06 std::bind() \u5e94\u7528\u4e8e\u60a8\u65e0\u6cd5\u63a7\u5236\u7684\u7c7b\u578b\u59cb\u7ec8\u662f\u4e00\u4e2a\u9519\u8bef\uff0c DoStuffAsync() \u4e0d\u5e94\u8be5\u5e94\u7528 std::bind() \u5230\u6a21\u7248\u53c2\u6570\uff0c absl::bind_front \u6216 lambda \u90fd\u53ef\u4ee5\u6b63\u5e38\u5de5\u4f5c\u3002 DoStuffAsync() \u7684\u4f5c\u8005\u751a\u81f3\u53ef\u80fd\u8fdb\u884c\u4e86\u5b8c\u5168\u521d\u6b65\u7684\u6d4b\u8bd5\uff0c\u56e0\u4e3a\u5b83\u4eec\u59cb\u7ec8\u5c06 lambda \u6216 std::function \u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\uff0c\u800c\u4ece\u4e0d\u4f20\u9012 std::bind() \u7684\u7ed3\u679c\u3002\u9047\u5230\u6b64\u9519\u8bef\u65f6\uff0c MyClass \u7684\u4f5c\u8005\u4f1a\u611f\u5230\u56f0\u60d1\u3002 std::bind() \u7684\u8fd9\u79cd\u7279\u6b8a\u60c5\u51b5\u6709\u7528\u5417? \u5e76\u4e0d\u662f\u7684\u3002\u5b83\u53ea\u4f1a\u4ea7\u751f\u963b\u788d\u3002\u5982\u679c\u8981\u901a\u8fc7\u7f16\u5199\u5d4c\u5957\u7684 std::bind \u6765\u8c03\u7528\u51fd\u6570\uff0c\u5219\u5b9e\u9645\u4e0a\u5e94\u8be5\u7f16\u5199\u4e00\u4e2a lambda \u6216\u547d\u540d\u51fd\u6570\u6765\u4ee3\u66ff\u3002 \u5e0c\u671b\u8fd9\u4e9b\u53ef\u4ee5\u8ba9\u60a8\u76f8\u4fe1 std::bind() \u5f88\u5bb9\u6613\u51fa\u9519\uff0c\u65b0\u624b\u548c C++ \u4e13\u5bb6\u90fd\u5bb9\u6613\u9677\u5165\u8fd0\u884c\u65f6\u548c\u7f16\u8bd1\u65f6\u7684\u9677\u9631\uff0c\u73b0\u5728\uff0c\u6211\u5c06\u5c1d\u8bd5\u8bc1\u660e\u5373\u4f7f\u6b63\u786e\u4f7f\u7528\u4e86 std::bind() \uff0c\u901a\u5e38\u8fd8\u4f1a\u6709\u53e6\u5916\u4e00\u4e2a\u66f4\u5177\u53ef\u8bfb\u6027\u7684\u95ee\u9898\u3002 \u4e0d\u5e26\u5360\u4f4d\u7b26\u7684 std::bind() \u8c03\u7528\u6700\u597d\u6539\u4e3alambda 1 std :: bind ( & MyClass :: OnDone , this ) vs 1 [ this ]() { OnDone (); } std::bind \u7ed1\u5b9a\u90e8\u5206\u51fd\u6570\u53c2\u6570\u7684\u573a\u666f\u53ef\u4ee5\u66f4\u6539\u4e3a absl::bind_front \uff0c\u5e76\u4e14\u4f60\u4f7f\u7528\u7684\u5360\u4f4d\u7b26\u8d8a\u591a\uff0c\u8fd9\u79cd\u6613\u8bfb\u6027\u95ee\u9898\u8d8a\u660e\u663e 1 std :: bind ( & MyClass :: OnDone , this , std :: placeholders :: _1 ) vs 1 absl :: bind_front ( & MyClass :: OnDone , this ) \u81f3\u4e8e absl::bind_front \u548c lambda \u4e4b\u95f4\u5982\u4f55\u4f5c\u51fa\u9009\u62e9\uff0c\u8bf7\u5927\u5bb6\u81ea\u6211\u51b3\u5b9a\u3002 \u4e0b\u9762\u8fd9\u4e9b\u573a\u666f\u8986\u76d6\u4e8699%\u7684 std::bind \u4f7f\u7528\u573a\u666f\uff0c\u770b\u8d77\u6765\u5f88\u6709\u8da3\u3002 \u5ffd\u7565\u67d0\u4e9b\u53c2\u6570: std::bind(F, _2) \u4f7f\u7528\u76f8\u540c\u7684\u53c2\u6570\u591a\u6b21: std::bind(F, _1, _1) \u5728\u672b\u5c3e\u7ed1\u5b9a\u4e00\u4e2a\u53c2\u6570: std::bind(F, _1, 42) \u6539\u53d8\u53c2\u6570\u7684\u987a\u5e8f: std::bind(F, _2, _1) \u4f7f\u7528\u51fd\u6570\u7ec4\u5408: std::bind(F, std::bind(G)) \u8fd9\u4e9b\u9ad8\u7ea7\u7528\u9014\u53ef\u80fd\u4f1a std::bind \u5360\u6709\u4e00\u5e2d\u4e4b\u5730\u3002\u5728\u4f7f\u7528\u5b83\u4eec\u4e4b\u524d\uff0c\u8bf7\u8003\u8651 std::bind \u7684\u6240\u6709\u5df2\u77e5\u95ee\u9898\uff0c\u5e76\u95ee\u81ea\u5df1\u662f\u5426\u503c\u5f97\u8282\u7701\u4e00\u4e9b\u5b57\u7b26\u6216\u4ee3\u7801\u884c\u3002 Conclusion \u907f\u514d\u4f7f\u7528 std::bind \uff0c\u4f7f\u7528 lambda \u6216\u8005 absl::bind_front \u6765\u4ee3\u66ff\u3002 Further Reading '\u2019Effective Modern C++\u2019\u2019, Item 34: Prefer lambdas to std::bind.","title":"Tip of the Week #108: Avoid std::bind"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-108/#tip-of-the-week-108-avoid-stdbind","text":"Originally published as totw/108 on 2016-01-07 By Roman Perepelitsa (roman.perepelitsa@gmail.com) Updated 2019-12-19 Quicklink: abseil.io/tips/108","title":"Tip of the Week #108: Avoid std::bind"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-108/#avoid-stdbind","text":"\u8fd9\u4e2aTips\u603b\u7ed3\u4e86\u5728\u5199\u4ee3\u7801\u7684\u65f6\u5019\u4e3a\u4ec0\u4e48\u8981\u8fdc\u79bb std::bind \u3002 \u6b63\u786e\u4f7f\u7528 std::bind() \u662f\u5f88\u96be\u7684\uff0c\u8ba9\u6211\u4eec\u6765\u770b\u4e00\u770b\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u8fd9\u6bb5\u4ee3\u7801\u5bf9\u60a8\u6765\u8bf4\u770b\u8d77\u6765\u4e0d\u9519\u5417\uff1f 1 2 3 4 5 6 7 8 void DoStuffAsync ( std :: function < void ( Status ) > ; cb ); class MyClass { void Start () { DoStuffAsync ( std :: bind ( & MyClass :: OnDone , this )); } void OnDone ( Status status ); }; \u8bb8\u591a\u7ecf\u9a8c\u4e30\u5bcc\u7684 C++ \u5de5\u7a0b\u5e08\u7f16\u5199\u4e86\u8fd9\u6837\u7684\u4ee3\u7801\uff0c\u53ea\u662f\u53d1\u73b0\u5b83\u65e0\u6cd5\u7f16\u8bd1\u3002\u8fd9\u6bb5\u4ee3\u7801\u53ea\u80fd\u548c std::function<void()> \u7c7b\u578b\u7684function\u4e00\u8d77\u5de5\u4f5c\uff0c\u4f46\u662f\u4e0a\u9762\u4f8b\u5b50\u4e2d\u7684 MyClass::OnDone \u662f\u5305\u542b\u4e86\u989d\u5916\u7684\u53c2\u6570\u3002\u90a3\u8be5\u5982\u4f55? std::bind() \u5e76\u6ca1\u6709\u50cf\u8bb8\u591a C++ \u5de5\u7a0b\u5e08\u671f\u671b\u7684\u90a3\u6837\u7ed1\u5b9a\u51fd\u6570\u7684\u524dN\u4e2a\u53c2\u6570\uff0c\u4f60\u5fc5\u987b\u6307\u5b9a\u6bcf\u4e00\u4e2a\u53c2\u6570\uff0c\u56e0\u6b64\u6b63\u786e\u7684\u4f7f\u7528 std::bind \u5e94\u8be5\u662f\u4e0b\u9762\u8fd9\u79cd\u65b9\u5f0f\u3002 1 std :: bind ( & MyClass :: OnDone , this , std :: placeholders :: _1 ) \u4ee3\u7801\u770b\u8d77\u6765\u5f88\u4e11\u964b\uff0c\u90a3\u6709\u6ca1\u6709\u66f4\u597d\u7684\u529e\u6cd5\u5462? \u4f7f\u7528 absl::bind_front \u66ff\u6362\u3002 1 absl :: bind_front ( & MyClass :: OnDone , this ) \u597d\u5427\uff0c absl::bind_front() \u786e\u5b9e\u505a\u5230\u4e86\uff1a\u5b83\u7ed1\u5b9a\u4e86\u524dN\u4e2a\u53c2\u6570\uff0c\u5e76\u5b8c\u7f8e\u5730\u8f6c\u53d1\u4e86\u5176\u4f59\u53c2\u6570\uff1a absl::bind_front(F\uff0ca\uff0cb)(x\uff0cy) \u7684\u503c\u4e3a F(a\uff0cb\uff0cx \uff0cy) \u3002 \u55ef\uff0c\u6062\u590d\u4e86\u7406\u667a\u3002\u60f3\u73b0\u5728\u770b\u5230\u771f\u6b63\u6050\u6016\u7684\u4e1c\u897f\u5417\uff1f\u4e0b\u9762\u7684\u8fd9\u6bb5\u4ee3\u7801\u7684\u4f5c\u7528\u662f\u4ec0\u4e48\uff1f 1 2 3 4 5 6 7 8 void DoStuffAsync ( std :: function < void ( Status ) > cb ); class MyClass { void Start () { DoStuffAsync ( std :: bind ( & MyClass :: OnDone , this )); } void OnDone (); // No Status here. }; OnDone \u6ca1\u6709\u53c2\u6570\uff0c DoStuffAsync() \u7684\u56de\u8c03\u51fd\u6570\u53c2\u6570\u662f\u9700\u8981\u6709\u4e00\u4e2aStatus\u53c2\u6570\u7684\u3002\u4f60\u53ef\u80fd\u9884\u671f\u4f1a\u6709\u4e00\u4e2a\u7f16\u8bd1\u9519\u8bef\u5728\u8fd9\u91cc\u3002\u4f46\u662f\u5b9e\u9645\u4e0a\u4ee3\u7801\u6ca1\u6709\u4efb\u4f55 warning \u3002 \u56e0\u4e3a std::bind \u8fc7\u5206\u5730\u5f25\u5408\u4e86\u5dee\u8ddd\u3002\u6765\u81ea DoStuffAsync() \u7684\u6f5c\u5728\u9519\u8bef\u4f1a\u88ab\u9759\u9ed8\u5ffd\u7565\u3002 \u8fd9\u6837\u7684\u4ee3\u7801\u53ef\u80fd\u4f1a\u5bfc\u81f4\u4e25\u91cd\u7684\u635f\u574f\u3002\u6bd4\u5982\u67d0\u4e9bIO\u64cd\u4f5c\u5b9e\u9645\u4e0a\u53ef\u80fd\u6ca1\u6709\u6210\u529f\uff0c\u4f46\u662f\u56e0\u4e3a\u4e0a\u9762\u7684\u4ee3\u7801\u4f1a\u5bfc\u81f4\u59cb\u7ec8\u90fd\u662f\u6210\u529f\u7684\uff0c\u8fd9\u53ef\u80fd\u662f\u6bc1\u706d\u6027\u7684\u3002\u4e5f\u8bb8 MyClass \u7684\u4f5c\u8005\u6ca1\u6709\u610f\u8bc6\u5230 DoStuffAsync() \u53ef\u80fd\u4f1a\u4ea7\u751f\u9700\u8981\u5904\u7406\u7684\u9519\u8bef \u4e5f\u8bb8 DoStuffAsync() \u66fe\u7ecf\u63a5\u53d7 std::function<void()> \u4f5c\u4e3a\u53c2\u6570\uff0c\u7136\u540e\u5176\u4f5c\u8005\u51b3\u5b9a\u5f15\u5165\u9519\u8bef\u6a21\u5f0f\u5e76\u66f4\u65b0\u6240\u6709\u505c\u6b62\u7f16\u8bd1\u7684\u8c03\u7528\u65b9\u3002\u4e0d\u7ba1\u54ea\u79cd\u65b9\u5f0f\uff0c\u8be5\u9519\u8bef\u90fd\u4f1a\u8fdb\u5165\u751f\u4ea7\u4ee3\u7801\u3002 std::bind() \u7981\u7528\u4e86\u6211\u4eec\u4f9d\u8d56\u7684\u57fa\u672c\u7684\u7f16\u8bd1\u65f6\u68c0\u67e5\u4e4b\u4e00\uff0c\u7f16\u8bd1\u5668\u901a\u5e38\u4f1a\u544a\u8bc9\u4f60\uff0c\u8c03\u7528\u8005\u662f\u5426\u4f20\u9012\u4e86\u6bd4\u60a8\u671f\u671b\u7684\u66f4\u591a\u7684\u53c2\u6570\uff0c\u4f46\u662f\u5bf9\u4e8e std::bind() \u5219\u65e0\u6548\u3002\u591f\u6050\u6016\u5417\uff1f \u53e6\u5916\u4e00\u4e2a\u4f8b\u5b50\uff0c\u4f60\u5982\u4f55\u770b\u5f85\u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801? 1 2 3 4 5 6 void Process ( std :: unique_ptr < Request > req ); void ProcessAsync ( std :: unique_ptr < Request > req ) { thread :: DefaultQueue () -> Add ( ToCallback ( std :: bind ( & MyClass :: Process , this , std :: move ( req )))); } \u8de8\u5f02\u6b65\u8fb9\u754c\u4f20\u9012\u7684 std::unique_ptr \u3002\u4e0d\u7528\u8bf4\uff0c std::bind() \u5e76\u4e0d\u662f\u89e3\u51b3\u65b9\u6848\uff0c\u4e0a\u9762\u8fd9\u6bb5\u4ee3\u7801\u65e0\u6cd5\u7f16\u8bd1\uff0c\u56e0\u4e3a std::bind() \u4e0d\u4f1a\u5c06\u7ed1\u5b9a\u7684\u4ec5\u652f\u6301\u79fb\u52a8\u7684\u53c2\u6570\u79fb\u81f3\u76ee\u6807\u51fd\u6570\u3002 \u53ea\u9700\u7528 absl::bind_front() \u66ff\u6362 std::bind() \u5373\u53ef\u89e3\u51b3\u3002 \u4e0b\u4e00\u4e2a\u793a\u4f8b\u751a\u81f3\u4f7f\u4e00\u4e9b C++\u4e13\u5bb6 \u7ecf\u5e38\u7eca\u5012\u3002\u770b\u770b\u662f\u5426\u53ef\u4ee5\u627e\u5230\u95ee\u9898\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // F must be callable without arguments. template < class F > void DoStuffAsync ( F cb ) { auto DoStuffAndNotify = []( F cb ) { DoStuff (); cb (); }; thread :: DefaultQueue () -> Schedule ( std :: bind ( DoStuffAndNotify , cb )); } class MyClass { void Start () { DoStuffAsync ( std :: bind ( & yClass :: OnDone , this )); } void OnDone (); }; \u4e0a\u9762\u7684\u4ee3\u7801\u662f\u65e0\u6cd5\u7f16\u8bd1\u7684\uff0c\u56e0\u4e3a\u4f20\u9012 std::bind() \u7684\u7ed3\u679c\u7ed9\u53e6\u5916\u4e00\u4e2a std::bind() \u662f\u4e00\u4e2a\u7279\u6b8a\u7684case\u3002\u6b63\u5e38\u60c5\u51b5\u4e0b std::bind(F, arg)() \u6700\u7ec8\u8ba1\u7b97\u4e3a F(arg) \u3002 \u9664\u975earg\u662f\u53e6\u4e00\u4e2a std::bind() \u8c03\u7528\u7684\u7ed3\u679c\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5b83\u5c06\u6c42\u503c\u4e3a F(arg()) \u3002\u5982\u679c\u5c06arg\u53ef\u4ee5\u8f6c\u6362\u4e3a std::function<void()> \uff0c\u5219\u4f1a\u5931\u53bb std::bind \u7684\u6548\u679c\u3002 This doesn\u2019t compile because passing the result of std::bind() to another std::bind() is a special case. Normally, std::bind(F, arg)() evaluates to F(arg), except when arg is the result of another std::bind() call, in which case it evaluates to F(arg()). If arg is converted to std::function , the magic behavior is lost. \u5c06 std::bind() \u5e94\u7528\u4e8e\u60a8\u65e0\u6cd5\u63a7\u5236\u7684\u7c7b\u578b\u59cb\u7ec8\u662f\u4e00\u4e2a\u9519\u8bef\uff0c DoStuffAsync() \u4e0d\u5e94\u8be5\u5e94\u7528 std::bind() \u5230\u6a21\u7248\u53c2\u6570\uff0c absl::bind_front \u6216 lambda \u90fd\u53ef\u4ee5\u6b63\u5e38\u5de5\u4f5c\u3002 DoStuffAsync() \u7684\u4f5c\u8005\u751a\u81f3\u53ef\u80fd\u8fdb\u884c\u4e86\u5b8c\u5168\u521d\u6b65\u7684\u6d4b\u8bd5\uff0c\u56e0\u4e3a\u5b83\u4eec\u59cb\u7ec8\u5c06 lambda \u6216 std::function \u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\uff0c\u800c\u4ece\u4e0d\u4f20\u9012 std::bind() \u7684\u7ed3\u679c\u3002\u9047\u5230\u6b64\u9519\u8bef\u65f6\uff0c MyClass \u7684\u4f5c\u8005\u4f1a\u611f\u5230\u56f0\u60d1\u3002 std::bind() \u7684\u8fd9\u79cd\u7279\u6b8a\u60c5\u51b5\u6709\u7528\u5417? \u5e76\u4e0d\u662f\u7684\u3002\u5b83\u53ea\u4f1a\u4ea7\u751f\u963b\u788d\u3002\u5982\u679c\u8981\u901a\u8fc7\u7f16\u5199\u5d4c\u5957\u7684 std::bind \u6765\u8c03\u7528\u51fd\u6570\uff0c\u5219\u5b9e\u9645\u4e0a\u5e94\u8be5\u7f16\u5199\u4e00\u4e2a lambda \u6216\u547d\u540d\u51fd\u6570\u6765\u4ee3\u66ff\u3002 \u5e0c\u671b\u8fd9\u4e9b\u53ef\u4ee5\u8ba9\u60a8\u76f8\u4fe1 std::bind() \u5f88\u5bb9\u6613\u51fa\u9519\uff0c\u65b0\u624b\u548c C++ \u4e13\u5bb6\u90fd\u5bb9\u6613\u9677\u5165\u8fd0\u884c\u65f6\u548c\u7f16\u8bd1\u65f6\u7684\u9677\u9631\uff0c\u73b0\u5728\uff0c\u6211\u5c06\u5c1d\u8bd5\u8bc1\u660e\u5373\u4f7f\u6b63\u786e\u4f7f\u7528\u4e86 std::bind() \uff0c\u901a\u5e38\u8fd8\u4f1a\u6709\u53e6\u5916\u4e00\u4e2a\u66f4\u5177\u53ef\u8bfb\u6027\u7684\u95ee\u9898\u3002 \u4e0d\u5e26\u5360\u4f4d\u7b26\u7684 std::bind() \u8c03\u7528\u6700\u597d\u6539\u4e3alambda 1 std :: bind ( & MyClass :: OnDone , this ) vs 1 [ this ]() { OnDone (); } std::bind \u7ed1\u5b9a\u90e8\u5206\u51fd\u6570\u53c2\u6570\u7684\u573a\u666f\u53ef\u4ee5\u66f4\u6539\u4e3a absl::bind_front \uff0c\u5e76\u4e14\u4f60\u4f7f\u7528\u7684\u5360\u4f4d\u7b26\u8d8a\u591a\uff0c\u8fd9\u79cd\u6613\u8bfb\u6027\u95ee\u9898\u8d8a\u660e\u663e 1 std :: bind ( & MyClass :: OnDone , this , std :: placeholders :: _1 ) vs 1 absl :: bind_front ( & MyClass :: OnDone , this ) \u81f3\u4e8e absl::bind_front \u548c lambda \u4e4b\u95f4\u5982\u4f55\u4f5c\u51fa\u9009\u62e9\uff0c\u8bf7\u5927\u5bb6\u81ea\u6211\u51b3\u5b9a\u3002 \u4e0b\u9762\u8fd9\u4e9b\u573a\u666f\u8986\u76d6\u4e8699%\u7684 std::bind \u4f7f\u7528\u573a\u666f\uff0c\u770b\u8d77\u6765\u5f88\u6709\u8da3\u3002 \u5ffd\u7565\u67d0\u4e9b\u53c2\u6570: std::bind(F, _2) \u4f7f\u7528\u76f8\u540c\u7684\u53c2\u6570\u591a\u6b21: std::bind(F, _1, _1) \u5728\u672b\u5c3e\u7ed1\u5b9a\u4e00\u4e2a\u53c2\u6570: std::bind(F, _1, 42) \u6539\u53d8\u53c2\u6570\u7684\u987a\u5e8f: std::bind(F, _2, _1) \u4f7f\u7528\u51fd\u6570\u7ec4\u5408: std::bind(F, std::bind(G)) \u8fd9\u4e9b\u9ad8\u7ea7\u7528\u9014\u53ef\u80fd\u4f1a std::bind \u5360\u6709\u4e00\u5e2d\u4e4b\u5730\u3002\u5728\u4f7f\u7528\u5b83\u4eec\u4e4b\u524d\uff0c\u8bf7\u8003\u8651 std::bind \u7684\u6240\u6709\u5df2\u77e5\u95ee\u9898\uff0c\u5e76\u95ee\u81ea\u5df1\u662f\u5426\u503c\u5f97\u8282\u7701\u4e00\u4e9b\u5b57\u7b26\u6216\u4ee3\u7801\u884c\u3002","title":"Avoid std::bind"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-108/#conclusion","text":"\u907f\u514d\u4f7f\u7528 std::bind \uff0c\u4f7f\u7528 lambda \u6216\u8005 absl::bind_front \u6765\u4ee3\u66ff\u3002","title":"Conclusion"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-108/#further-reading","text":"'\u2019Effective Modern C++\u2019\u2019, Item 34: Prefer lambdas to std::bind.","title":"Further Reading"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-109/","text":"Tip of the Week #109: Meaningful const in Function Declarations Originally posted as totw/109 on 2016-01-14 By Greg Miller (jgm@google.com) \u672c\u6587\u6863\u5c06\u8bf4\u660econst\u5728\u51fd\u6570\u58f0\u660e\u4e2d\u4f55\u65f6\u6709\u610f\u4e49\uff0c\u5f53\u5b83\u6beb\u65e0\u610f\u4e49\uff0c\u6700\u597d\u7701\u7565\u3002\u4f46\u662f\u9996\u5148\uff0c\u8ba9\u6211\u4eec\u7b80\u8981\u89e3\u91ca\u4e00\u4e0b\u58f0\u660e\u548c\u5b9a\u4e49\u8fd9\u4e24\u4e2a\u672f\u8bed\u7684\u542b\u4e49\u3002 \u8003\u8651\u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801: 1 2 3 4 void F ( int ); // 1: declaration of F(int) void F ( const int ); // 2: re-declaration of F(int) void F ( int ) { /* ... */ } // 3: definition of F(int) void F ( const int ) { /* ... */ } // 4: error: re-definition of F(int) \u524d\u4e24\u884c\u662f\u51fd\u6570\u7684\u58f0\u660e\uff0c\u4e00\u4e2a\u51fd\u6570\u7684\u58f0\u660e\u5c31\u662f\u544a\u8bc9\u7f16\u8bd1\u5668\u8fd9\u4e2a\u51fd\u6570\u7684\u7b7e\u540d\u548c\u8fd4\u56de\u7c7b\u578b\u3002\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u8fd9\u4e2a\u51fd\u6570\u7684\u7b7e\u540d\u662f F(int) \u3002 \u51fd\u6570\u53c2\u6570\u7c7b\u578b\u7684\u5e38\u91cf\u6027\u5c06\u88ab\u5ffd\u7565\uff0c\u56e0\u6b64\u524d\u4e24\u4e2a\u58f0\u660e\u90fd\u662f\u7b49\u6548\u7684\u3002(\u5177\u4f53\u7ec6\u8282\u89c1 \"Overloadable declarations\u201d ) \u4e0a\u9762\u4f8b\u5b50\u4e2d\u7b2c\u4e09\u548c\u7b2c\u56db\u884c\u662f\u51fd\u6570\u7684\u5b9a\u4e49\u3002\u4e00\u4e2a\u51fd\u6570\u7684\u5b9a\u4e49\u4e5f\u662f\u4e00\u4e2a\u58f0\u660e\u3002\u4f46\u662f\u5b9a\u4e49\u5305\u542b\u4e86\u51fd\u6570\u7684\u5b9e\u73b0\u3002\u56e0\u6b64\u7b2c\u4e09\u884c\u662f\u5177\u6709\u7b7e\u540d\u4e3a F(int) \u7684\u51fd\u6570\u5b9a\u4e49\u3002\u7b2c\u56db\u884c\u4e5f\u662f \u5bf9\u76f8\u540c\u51fd\u6570 F(int) \u7684\u5b9a\u4e49\u3002\u8fd9\u5c06\u4f1a\u5bfc\u81f4\u94fe\u63a5\u65f6\u9519\u8bef\uff0c\u56e0\u4e3a\u591a\u4e2a\u51fd\u6570\u58f0\u660e\u662f\u5141\u8bb8\u7684\uff0c\u4f46\u662f\u53ea\u80fd\u6709\u4e00\u4e2a\u5b9a\u4e49\u3002 \u5c3d\u7ba1\u7b2c\u4e09\u884c\u548c\u7b2c\u56db\u884c\u90fd\u662f\u76f8\u540c\u51fd\u6570\u7684\u5b9a\u4e49\uff0c\u4f46\u662f\u4ed6\u4eec\u7684\u5b9e\u73b0\u786e\u5b9e\u4e0d\u540c\u7684\uff0c\u8fd9\u53d6\u51b3\u4e8e\u4ed6\u4eec\u7684\u58f0\u660e\u65b9\u5f0f\u3002\u7b2c\u4e09\u884c\u7684\u51fd\u6570\u53c2\u6570\u662f int (\u975e const )\uff0c\u7b2c\u56db\u884c\u7684\u51fd\u6570\u53c2\u6570\u662f const int \u3002 Meaningful const in Function Declarations \u51fd\u6570\u58f0\u660e\u4e2d\u5e76\u4e0d\u662f\u6240\u6709\u7684const\u9650\u5236\u7b26\u90fd\u53ef\u4ee5\u5ffd\u7565\uff0c\u5f15\u7528\u81ea C++ \u6807\u51c6\u4e2d\u7684 \"Overloadable\u58f0\u660e\"\uff08[over.load])\u3002 \u5728\u53c2\u6570\u7c7b\u578b\u7684const\u7c7b\u578b\u8bf4\u660e\u7b26\u5f88\u91cd\u8981\uff0c\u53ef\u7528\u4e8e\u533a\u5206\u91cd\u8f7d\u7684\u51fd\u6570\u58f0\u660e Rules of Thumb","title":"Tip of the Week #109: Meaningful `const` in Function Declarations"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-109/#tip-of-the-week-109-meaningful-const-in-function-declarations","text":"Originally posted as totw/109 on 2016-01-14 By Greg Miller (jgm@google.com) \u672c\u6587\u6863\u5c06\u8bf4\u660econst\u5728\u51fd\u6570\u58f0\u660e\u4e2d\u4f55\u65f6\u6709\u610f\u4e49\uff0c\u5f53\u5b83\u6beb\u65e0\u610f\u4e49\uff0c\u6700\u597d\u7701\u7565\u3002\u4f46\u662f\u9996\u5148\uff0c\u8ba9\u6211\u4eec\u7b80\u8981\u89e3\u91ca\u4e00\u4e0b\u58f0\u660e\u548c\u5b9a\u4e49\u8fd9\u4e24\u4e2a\u672f\u8bed\u7684\u542b\u4e49\u3002 \u8003\u8651\u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801: 1 2 3 4 void F ( int ); // 1: declaration of F(int) void F ( const int ); // 2: re-declaration of F(int) void F ( int ) { /* ... */ } // 3: definition of F(int) void F ( const int ) { /* ... */ } // 4: error: re-definition of F(int) \u524d\u4e24\u884c\u662f\u51fd\u6570\u7684\u58f0\u660e\uff0c\u4e00\u4e2a\u51fd\u6570\u7684\u58f0\u660e\u5c31\u662f\u544a\u8bc9\u7f16\u8bd1\u5668\u8fd9\u4e2a\u51fd\u6570\u7684\u7b7e\u540d\u548c\u8fd4\u56de\u7c7b\u578b\u3002\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u8fd9\u4e2a\u51fd\u6570\u7684\u7b7e\u540d\u662f F(int) \u3002 \u51fd\u6570\u53c2\u6570\u7c7b\u578b\u7684\u5e38\u91cf\u6027\u5c06\u88ab\u5ffd\u7565\uff0c\u56e0\u6b64\u524d\u4e24\u4e2a\u58f0\u660e\u90fd\u662f\u7b49\u6548\u7684\u3002(\u5177\u4f53\u7ec6\u8282\u89c1 \"Overloadable declarations\u201d ) \u4e0a\u9762\u4f8b\u5b50\u4e2d\u7b2c\u4e09\u548c\u7b2c\u56db\u884c\u662f\u51fd\u6570\u7684\u5b9a\u4e49\u3002\u4e00\u4e2a\u51fd\u6570\u7684\u5b9a\u4e49\u4e5f\u662f\u4e00\u4e2a\u58f0\u660e\u3002\u4f46\u662f\u5b9a\u4e49\u5305\u542b\u4e86\u51fd\u6570\u7684\u5b9e\u73b0\u3002\u56e0\u6b64\u7b2c\u4e09\u884c\u662f\u5177\u6709\u7b7e\u540d\u4e3a F(int) \u7684\u51fd\u6570\u5b9a\u4e49\u3002\u7b2c\u56db\u884c\u4e5f\u662f \u5bf9\u76f8\u540c\u51fd\u6570 F(int) \u7684\u5b9a\u4e49\u3002\u8fd9\u5c06\u4f1a\u5bfc\u81f4\u94fe\u63a5\u65f6\u9519\u8bef\uff0c\u56e0\u4e3a\u591a\u4e2a\u51fd\u6570\u58f0\u660e\u662f\u5141\u8bb8\u7684\uff0c\u4f46\u662f\u53ea\u80fd\u6709\u4e00\u4e2a\u5b9a\u4e49\u3002 \u5c3d\u7ba1\u7b2c\u4e09\u884c\u548c\u7b2c\u56db\u884c\u90fd\u662f\u76f8\u540c\u51fd\u6570\u7684\u5b9a\u4e49\uff0c\u4f46\u662f\u4ed6\u4eec\u7684\u5b9e\u73b0\u786e\u5b9e\u4e0d\u540c\u7684\uff0c\u8fd9\u53d6\u51b3\u4e8e\u4ed6\u4eec\u7684\u58f0\u660e\u65b9\u5f0f\u3002\u7b2c\u4e09\u884c\u7684\u51fd\u6570\u53c2\u6570\u662f int (\u975e const )\uff0c\u7b2c\u56db\u884c\u7684\u51fd\u6570\u53c2\u6570\u662f const int \u3002","title":"Tip of the Week #109: Meaningful const in Function Declarations"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-109/#meaningful-const-in-function-declarations","text":"\u51fd\u6570\u58f0\u660e\u4e2d\u5e76\u4e0d\u662f\u6240\u6709\u7684const\u9650\u5236\u7b26\u90fd\u53ef\u4ee5\u5ffd\u7565\uff0c\u5f15\u7528\u81ea C++ \u6807\u51c6\u4e2d\u7684 \"Overloadable\u58f0\u660e\"\uff08[over.load])\u3002 \u5728\u53c2\u6570\u7c7b\u578b\u7684const\u7c7b\u578b\u8bf4\u660e\u7b26\u5f88\u91cd\u8981\uff0c\u53ef\u7528\u4e8e\u533a\u5206\u91cd\u8f7d\u7684\u51fd\u6570\u58f0\u660e","title":"Meaningful const in Function Declarations"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-109/#rules-of-thumb","text":"","title":"Rules of Thumb"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-11/","text":"Tip of the Week #11: Return Policy Originally posted as TotW #11 on August 16, 2012 by Paul S. R. Chisholm (p.s.r.chisholm@google.com) Frodo: There\u2019ll be none left for the return journey. Sam: I don\u2019t think there will be a return journey, Mr. Frodo. \u2013 The Lord of the >Rings: The Return of the King (novel by J.R.R. Tolkien, screenplay by Fran Walsh, Philippa Boyens, & Peter Jackson) \u6ce8\u610f : \u8fd9\u6761\u5efa\u8bae\u867d\u7136\u4ecd\u7136\u662f\u76f8\u5173\u7684\uff0c\u4f46\u8fd9\u662f\u5728C++11\u5f15\u5165\u79fb\u52a8\u8bed\u4e49\u4e4b\u524d\u3002\u8bf7\u8bb0\u4f4f Totw #77 \u4e2d\u63d0\u5230\u7684\u5efa\u8bae\u3002 \u8bb8\u591a\u8001\u7684C++\u4ee3\u7801\u5e93\u8868\u73b0\u51fa\u6765\u5f88\u60e7\u6015\u5bf9\u8c61\u590d\u5236\u3002\u9ad8\u5174\u7684\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\u8fdb\u884c\u5bf9\u8c61\u590d\u5236\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u5e76\u6ca1\u6709\u590d\u5236\uff0c\u8fd9\u8981\u611f\u8c22\u6240\u8c13\u7684\" Return value optimization \"(RVO)\u673a\u5236\u4e86\u3002 RVO \u662f\u4e00\u4e2a\u6240\u6709\u7f16\u8bd1\u5668\u90fd\u957f\u671f\u652f\u6301\u7684\u7279\u6027\u3002\u8003\u8651\u4e0b\u9762\u8fd9\u6bb5 C++98 \u7684\u4ee3\u7801\uff0c\u5b83\u5177\u6709\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u548c\u4e00\u4e2a\u8d4b\u503c\u64cd\u4f5c\u7b26\uff0c\u8fd9\u4e9b\u51fd\u6570\u7684\u8c03\u7528\u5f00\u9500\u5f88\u5927\uff0c\u5f00\u53d1\u8005\u4eec\u8ba9\u4ed6\u4eec\u6bcf\u6b21\u4f7f\u7528\u90fd\u6253\u5370\u4e00\u6761\u6d88\u606f\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class SomeBigObject { public : SomeBigObject () { ... } SomeBigObject ( const SomeBigObject & s ) { printf ( \"Expensive copy \u2026 \\n \" , \u2026 ); \u2026 } SomeBigObject & operator = ( const SomeBigObject & s ) { printf ( \"Expensive assignment \u2026 \\n \" , \u2026 ); \u2026 return * this ; } ~ SomeBigObject () { ... } \u2026 }; ( \u6ce8\u610f : \u5728\u8fd9\u91cc\u6211\u4eec\u6545\u610f\u907f\u514d\u53bb\u8ba8\u8bba\u79fb\u52a8\u64cd\u4f5c\uff0c\u53ef\u4ee5\u770b TotW #77 \u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f\u3002) \u5982\u679c\u8fd9\u4e2a\u7c7b\u6709\u5982\u4e0b\u8fd9\u6837\u7684\u65b9\u6cd5\uff0c\u4f60\u662f\u5426\u4f1a\u60ca\u6050\u7684\u9000\u7f29? 1 2 3 4 5 static SomeBigObject SomeBigObjectFactory (...) { SomeBigObject local ; ... return local ; } \u770b\u8d77\u6765\u5f88\u4e0d\u9ad8\u6548\uff0c\u662f\u5417? \u5982\u679c\u6211\u4eec\u8fd0\u884c\u4e0b\u9762\u7684\u4ee3\u7801\u4f1a\u53d1\u751f\u4ec0\u4e48? 1 SomeBigObject obj = SomeBigObject :: SomeBigObjectFactory (...); \u7406\u8bba\u4e0a\u6765\u8bf4: \u4f60\u53ef\u80fd\u9884\u671f\u81f3\u5c11\u6709\u4e24\u4e2a\u5bf9\u8c61\u88ab\u521b\u5efa\uff0c\u4e00\u4e2a\u662f\u4ece\u51fd\u6570\u8c03\u7528\u5904\u8fd4\u56de\u7684\u5bf9\u8c61\uff0c\u53e6\u5916\u4e00\u4e2a\u662f\u8c03\u7528\u51fd\u6570\u4e2d\u7684\u5bf9\u8c61\uff0c\u4e24\u8005\u90fd\u4f1a\u8fdb\u884c\u590d\u5236\uff0c\u56e0\u6b64\u7a0b\u5e8f\u4f1a\u6253\u5370\u4e24\u6761 Expensive \u64cd\u4f5c\u7684\u6d88\u606f\u3002\u5b9e\u9645\u4e0a\u6ca1\u6709\u4efb\u4f55\u6d88\u606f\u8f93\u51fa\uff0c\u56e0\u4e3a\u62f7\u8d1d\u6784\u9020\u548c\u8d4b\u503c\u6784\u9020\u6ca1\u6709\u88ab\u8c03\u7528\u3002 \u8fd9\u662f\u600e\u4e48\u53d1\u751f\u7684? \u5f88\u591a\u6709\u7ecf\u9a8c\u7684C++\u7a0b\u5e8f\u5458\u4f1a\u5148\u521b\u5efa\u4e00\u4e2a\u5bf9\u8c61\uff0c\u7136\u540e\u5c06\u8fd9\u4e2a\u5bf9\u8c61\u7684\u5730\u5740\u4f20\u9012\u7ed9\u51fd\u6570\uff0c\u51fd\u6570\u5185\u90e8\u4f1a\u901a\u8fc7\u5730\u5740\u6216\u8005\u5f15\u7528\u6765\u64cd\u4f5c\u4f20\u9012\u8fdb\u6765\u7684\u5bf9\u8c61\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u907f\u514d\u4e0d\u5fc5\u8981\u7684\u5bf9\u8c61\u62f7\u8d1d\u4e86\uff0c\u8fd9\u662f\u9ad8\u6548\u7684\u3002\u7f16\u8bd1\u5668\u53ef\u4ee5\u5c06\u4e0d\u9ad8\u6548\u7684\u4ee3\u7801\u8f6c\u6362\u4e3a\u4e0a\u8ff0\u63cf\u8ff0\u7684\u9ad8\u6548\u4ee3\u7801\u3002 \u5f53\u7f16\u8bd1\u5668\u770b\u5230\u51fd\u6570\u8c03\u7528\u51fa\u7684\u4e00\u4e2a\u53d8\u91cf(\u5c06\u4f1a\u6839\u636e\u8fd4\u56de\u503c\u6765\u8fdb\u884c\u6784\u9020)\u548c\u88ab\u8c03\u7528\u51fd\u6570\u4e2d\u7684\u53d8\u91cf(\u5c06\u88ab\u8fd4\u56de)\u65f6\uff0c\u5b83\u610f\u8bc6\u5230\u4e0d\u9700\u8981\u4e24\u4e2a\u53d8\u91cf\u5c31\u53ef\u4ee5\u5b8c\u6210\u8fd9\u4e2a\u64cd\u4f5c\u3002\u5728\u80fd\u8986\u76d6\u7684\u573a\u666f\u4e0b\uff0c\u7f16\u8bd1\u5668\u4f1a\u5c06\u51fd\u6570\u8c03\u7528\u8fd4\u56de\u5904\u7684\u53d8\u91cf\u5176\u5730\u5740\u4f20\u9012\u7ed9\u88ab\u8c03\u7528\u7684\u51fd\u6570\u3002 \u901a\u8fc7\u67e5\u770bC++98\u7684\u6807\u51c6\u53ef\u4ee5\u5f97\u77e5\uff0c\u201c\u6bcf\u5f53\u4f7f\u7528\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u6765\u590d\u5236\u4e34\u65f6\u5bf9\u8c61\u7684\u65f6\u5019...\u5141\u8bb8\u5c06\u5176\u5b9e\u73b0\u4e3a\u539f\u59cb\u53d8\u91cf\u548c\u526f\u672c\u89c6\u4e3a\u5f15\u7528\u540c\u4e00\u4e2a\u5bf9\u8c61\u7684\u4e24\u79cd\u4e0d\u540c\u7684\u65b9\u5f0f\uff0c\u800c\u4e0d\u662f\u6267\u884c\u62f7\u8d1d\u3002\u5373\u4f7f\u7c7b\u7684\u590d\u5236\u6784\u9020\u51fd\u6570\u6216\u6790\u6784\u51fd\u6570\u6709\u526f\u4f5c\u7528\u3002\u5bf9\u4e8e\u5177\u6709\u7c7b\u8fd4\u56de\u7c7b\u578b\u7684\u51fd\u6570\u6765\u8bf4\uff0c\u5982\u679creturn\u8bed\u53e5\u4e2d\u7684\u8868\u8fbe\u5f0f\u662f\u672c\u5730\u5bf9\u8c61\u7684\u540d\u79f0...\uff0c\u5141\u8bb8\u5728\u5b9e\u73b0\u7684\u65f6\u5019\u7701\u7565\u4e34\u65f6\u5bf9\u8c61\u7684\u521b\u5efa\u4ee5\u4fdd\u5b58\u51fd\u6570\u8fd4\u56de...\u201d\uff08\u7b2c12.8\u8282[class.copy] C++98\u6807\u51c6\u7684\u7b2c15\u6bb5.C++11\u6807\u51c6\u5728\u7b2c12.8\u8282\u7b2c31\u6bb5\u4e2d\u6709\u7c7b\u4f3c\u7684\u8bed\u8a00\uff0c\u4f46\u5b83\u66f4\u590d\u6742\u3002\uff09 \u6807\u51c6\u4e2d\u63d0\u5230\"\u5141\u8bb8\"\u8fd9\u4e2a\u5173\u952e\u5b57\uff0c\u4e5f\u5c31\u662f\u8868\u660e\u8fd9\u5e76\u4e0d\u662f\u5f3a\u70c8\u4fdd\u8bc1\u7684\uff0c\u5e78\u8fd0\u7684\u662f\u6240\u6709\u7684\u73b0\u4ee3C++\u7f16\u8bd1\u5668\u90fd\u4f1a\u9ed8\u8ba4\u6267\u884c RVO \uff0c\u5373\u4f7f\u662f\u5728 debug \u6784\u5efa\u3001 non-inlined \u51fd\u6570\u4e2d\u3002 How Can You Ensure the Compiler Performs RVO? \u88ab\u8c03\u7528\u7684\u51fd\u6570\u4e2d\u5e94\u8be5\u4e3a\u8fd4\u56de\u503c\u5b9a\u4e49\u4e00\u4e2a\u53d8\u91cf\uff1a 1 2 3 4 5 SomeBigObject SomeBigObject::SomeBigObjectFactory (...) { SomeBigObject local ; \u2026 return local ; } \u51fd\u6570\u7684\u8c03\u7528\u5904\u5e94\u8be5\u5c06\u8fd4\u56de\u503c\u8d4b\u503c\u7ed9\u4e00\u4e2a\u65b0\u7684\u53d8\u91cf 1 2 // No message about expensive operations: SomeBigObject obj = SomeBigObject :: SomeBigObjectFactory (...); \u5982\u679c\u8c03\u7528\u7684\u51fd\u6570\u91cd\u7528\u4e86\u73b0\u5b58\u7684\u53d8\u91cf\u6765\u5b58\u50a8\u8fd4\u56de\u503c\u7684\u8bdd(\u867d\u7136\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u662f\u53ef\u4ee5\u4f7f\u7528\u79fb\u52a8\u8bed\u4e49\u6765\u5b8c\u6210)\uff0c\u7f16\u8bd1\u5668\u5c31\u65e0\u6cd5\u505a RVO \u4e86 1 2 // RVO won\u2019t happen here; prints message \"Expensive assignment ...\": obj = SomeBigObject :: SomeBigObjectFactory ( s2 ); \u5982\u679c\u8c03\u7528\u7684\u51fd\u6570\u5185\u90e8\u4f7f\u7528\u4e86\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u53d8\u91cf\u7528\u505a\u8fd4\u56de\u503c\u7684\u65f6\u5019\uff0c\u7f16\u8bd1\u5668\u540c\u6837\u65e0\u6cd5\u6267\u884cRVO\u3002 1 2 3 4 5 6 7 8 9 10 11 // RVO won\u2019t happen here: static SomeBigObject NonRvoFactory (...) { SomeBigObject object1 , object2 ; object1 . DoSomethingWith (...); object2 . DoSomethingWith (...); if ( flag ) { return object1 ; } else { return object2 ; } } \u4f46\u662f\u5982\u679c\u8c03\u7528\u7684\u51fd\u6570\u5185\u90e8\u4f7f\u7528\u4e00\u4e2a\u53d8\u91cf\u5728\u591a\u4e2a\u4f4d\u7f6e\u8fd4\u56de\u7684\u65f6\u5019\u662fok\u7684\u3002 1 2 3 4 5 6 7 8 9 // RVO will happen here: SomeBigObject local ; if (...) { local . DoSomethingWith (...); return local ; } else { local . DoSomethingWith (...); return local ; } \u8fd9\u53ef\u80fd\u662f\u60a8\u9700\u8981\u4e86\u89e3\u7684\u6709\u5173\u7684 RVO \u7684\u6240\u6709\u4fe1\u606f\u4e86\u3002 One More Thing: Temporaries RVO \u53ef\u4ee5\u5de5\u4f5c\u5728\u4e34\u65f6\u53d8\u91cf\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u547d\u540d\u7684\u53d8\u91cf\uff0c\u5f53\u88ab\u8c03\u7528\u51fd\u6570\u8fd4\u56de\u5bf9\u8c61\u65f6\uff0c\u60a8\u53ef\u4ee5\u4ece RVO \u4e2d\u6536\u76ca: 1 2 3 4 // RVO works here: SomeBigObject SomeBigObject::ReturnsTempFactory (...) { return SomeBigObject :: SomeBigObjectFactory (...); } \u5f53\u51fd\u6570\u8c03\u7528\u7684\u5730\u65b9\u7acb\u5373\u4f7f\u7528\u51fd\u6570\u7684\u8fd4\u56de\u503c(\u5b83\u5b58\u50a8\u5728\u4e34\u65f6\u5bf9\u8c61\u4e2d)\uff0c\u4f60\u540c\u6837\u53ef\u4ee5\u4ece RVO \u4e2d\u6536\u76ca\u3002 1 2 // No message about expensive operations: EXPECT_EQ ( SomeBigObject :: SomeBigObjectFactory (...). Name (), s ); \u6700\u540e\u9700\u8981\u6ce8\u610f\u7684 : \u5982\u679c\u4f60\u7684\u4ee3\u7801\u9700\u8981\u62f7\u8d1d\uff0c\u90a3\u4e48\u5c31\u62f7\u8d1d\uff0c\u65e0\u8bba\u62f7\u8d1d\u7684\u526f\u672c\u662f\u5426\u53ef\u4ee5\u4f18\u5316\u3002\u4e0d\u8981\u4e3a\u4e86\u6548\u7387\u8fd8\u5931\u53bb\u6b63\u786e\u6027\u3002","title":"Tip of the Week #11: Return Policy"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-11/#tip-of-the-week-11-return-policy","text":"Originally posted as TotW #11 on August 16, 2012 by Paul S. R. Chisholm (p.s.r.chisholm@google.com) Frodo: There\u2019ll be none left for the return journey. Sam: I don\u2019t think there will be a return journey, Mr. Frodo. \u2013 The Lord of the >Rings: The Return of the King (novel by J.R.R. Tolkien, screenplay by Fran Walsh, Philippa Boyens, & Peter Jackson) \u6ce8\u610f : \u8fd9\u6761\u5efa\u8bae\u867d\u7136\u4ecd\u7136\u662f\u76f8\u5173\u7684\uff0c\u4f46\u8fd9\u662f\u5728C++11\u5f15\u5165\u79fb\u52a8\u8bed\u4e49\u4e4b\u524d\u3002\u8bf7\u8bb0\u4f4f Totw #77 \u4e2d\u63d0\u5230\u7684\u5efa\u8bae\u3002 \u8bb8\u591a\u8001\u7684C++\u4ee3\u7801\u5e93\u8868\u73b0\u51fa\u6765\u5f88\u60e7\u6015\u5bf9\u8c61\u590d\u5236\u3002\u9ad8\u5174\u7684\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\u8fdb\u884c\u5bf9\u8c61\u590d\u5236\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u5e76\u6ca1\u6709\u590d\u5236\uff0c\u8fd9\u8981\u611f\u8c22\u6240\u8c13\u7684\" Return value optimization \"(RVO)\u673a\u5236\u4e86\u3002 RVO \u662f\u4e00\u4e2a\u6240\u6709\u7f16\u8bd1\u5668\u90fd\u957f\u671f\u652f\u6301\u7684\u7279\u6027\u3002\u8003\u8651\u4e0b\u9762\u8fd9\u6bb5 C++98 \u7684\u4ee3\u7801\uff0c\u5b83\u5177\u6709\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u548c\u4e00\u4e2a\u8d4b\u503c\u64cd\u4f5c\u7b26\uff0c\u8fd9\u4e9b\u51fd\u6570\u7684\u8c03\u7528\u5f00\u9500\u5f88\u5927\uff0c\u5f00\u53d1\u8005\u4eec\u8ba9\u4ed6\u4eec\u6bcf\u6b21\u4f7f\u7528\u90fd\u6253\u5370\u4e00\u6761\u6d88\u606f\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class SomeBigObject { public : SomeBigObject () { ... } SomeBigObject ( const SomeBigObject & s ) { printf ( \"Expensive copy \u2026 \\n \" , \u2026 ); \u2026 } SomeBigObject & operator = ( const SomeBigObject & s ) { printf ( \"Expensive assignment \u2026 \\n \" , \u2026 ); \u2026 return * this ; } ~ SomeBigObject () { ... } \u2026 }; ( \u6ce8\u610f : \u5728\u8fd9\u91cc\u6211\u4eec\u6545\u610f\u907f\u514d\u53bb\u8ba8\u8bba\u79fb\u52a8\u64cd\u4f5c\uff0c\u53ef\u4ee5\u770b TotW #77 \u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f\u3002) \u5982\u679c\u8fd9\u4e2a\u7c7b\u6709\u5982\u4e0b\u8fd9\u6837\u7684\u65b9\u6cd5\uff0c\u4f60\u662f\u5426\u4f1a\u60ca\u6050\u7684\u9000\u7f29? 1 2 3 4 5 static SomeBigObject SomeBigObjectFactory (...) { SomeBigObject local ; ... return local ; } \u770b\u8d77\u6765\u5f88\u4e0d\u9ad8\u6548\uff0c\u662f\u5417? \u5982\u679c\u6211\u4eec\u8fd0\u884c\u4e0b\u9762\u7684\u4ee3\u7801\u4f1a\u53d1\u751f\u4ec0\u4e48? 1 SomeBigObject obj = SomeBigObject :: SomeBigObjectFactory (...); \u7406\u8bba\u4e0a\u6765\u8bf4: \u4f60\u53ef\u80fd\u9884\u671f\u81f3\u5c11\u6709\u4e24\u4e2a\u5bf9\u8c61\u88ab\u521b\u5efa\uff0c\u4e00\u4e2a\u662f\u4ece\u51fd\u6570\u8c03\u7528\u5904\u8fd4\u56de\u7684\u5bf9\u8c61\uff0c\u53e6\u5916\u4e00\u4e2a\u662f\u8c03\u7528\u51fd\u6570\u4e2d\u7684\u5bf9\u8c61\uff0c\u4e24\u8005\u90fd\u4f1a\u8fdb\u884c\u590d\u5236\uff0c\u56e0\u6b64\u7a0b\u5e8f\u4f1a\u6253\u5370\u4e24\u6761 Expensive \u64cd\u4f5c\u7684\u6d88\u606f\u3002\u5b9e\u9645\u4e0a\u6ca1\u6709\u4efb\u4f55\u6d88\u606f\u8f93\u51fa\uff0c\u56e0\u4e3a\u62f7\u8d1d\u6784\u9020\u548c\u8d4b\u503c\u6784\u9020\u6ca1\u6709\u88ab\u8c03\u7528\u3002 \u8fd9\u662f\u600e\u4e48\u53d1\u751f\u7684? \u5f88\u591a\u6709\u7ecf\u9a8c\u7684C++\u7a0b\u5e8f\u5458\u4f1a\u5148\u521b\u5efa\u4e00\u4e2a\u5bf9\u8c61\uff0c\u7136\u540e\u5c06\u8fd9\u4e2a\u5bf9\u8c61\u7684\u5730\u5740\u4f20\u9012\u7ed9\u51fd\u6570\uff0c\u51fd\u6570\u5185\u90e8\u4f1a\u901a\u8fc7\u5730\u5740\u6216\u8005\u5f15\u7528\u6765\u64cd\u4f5c\u4f20\u9012\u8fdb\u6765\u7684\u5bf9\u8c61\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u907f\u514d\u4e0d\u5fc5\u8981\u7684\u5bf9\u8c61\u62f7\u8d1d\u4e86\uff0c\u8fd9\u662f\u9ad8\u6548\u7684\u3002\u7f16\u8bd1\u5668\u53ef\u4ee5\u5c06\u4e0d\u9ad8\u6548\u7684\u4ee3\u7801\u8f6c\u6362\u4e3a\u4e0a\u8ff0\u63cf\u8ff0\u7684\u9ad8\u6548\u4ee3\u7801\u3002 \u5f53\u7f16\u8bd1\u5668\u770b\u5230\u51fd\u6570\u8c03\u7528\u51fa\u7684\u4e00\u4e2a\u53d8\u91cf(\u5c06\u4f1a\u6839\u636e\u8fd4\u56de\u503c\u6765\u8fdb\u884c\u6784\u9020)\u548c\u88ab\u8c03\u7528\u51fd\u6570\u4e2d\u7684\u53d8\u91cf(\u5c06\u88ab\u8fd4\u56de)\u65f6\uff0c\u5b83\u610f\u8bc6\u5230\u4e0d\u9700\u8981\u4e24\u4e2a\u53d8\u91cf\u5c31\u53ef\u4ee5\u5b8c\u6210\u8fd9\u4e2a\u64cd\u4f5c\u3002\u5728\u80fd\u8986\u76d6\u7684\u573a\u666f\u4e0b\uff0c\u7f16\u8bd1\u5668\u4f1a\u5c06\u51fd\u6570\u8c03\u7528\u8fd4\u56de\u5904\u7684\u53d8\u91cf\u5176\u5730\u5740\u4f20\u9012\u7ed9\u88ab\u8c03\u7528\u7684\u51fd\u6570\u3002 \u901a\u8fc7\u67e5\u770bC++98\u7684\u6807\u51c6\u53ef\u4ee5\u5f97\u77e5\uff0c\u201c\u6bcf\u5f53\u4f7f\u7528\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u6765\u590d\u5236\u4e34\u65f6\u5bf9\u8c61\u7684\u65f6\u5019...\u5141\u8bb8\u5c06\u5176\u5b9e\u73b0\u4e3a\u539f\u59cb\u53d8\u91cf\u548c\u526f\u672c\u89c6\u4e3a\u5f15\u7528\u540c\u4e00\u4e2a\u5bf9\u8c61\u7684\u4e24\u79cd\u4e0d\u540c\u7684\u65b9\u5f0f\uff0c\u800c\u4e0d\u662f\u6267\u884c\u62f7\u8d1d\u3002\u5373\u4f7f\u7c7b\u7684\u590d\u5236\u6784\u9020\u51fd\u6570\u6216\u6790\u6784\u51fd\u6570\u6709\u526f\u4f5c\u7528\u3002\u5bf9\u4e8e\u5177\u6709\u7c7b\u8fd4\u56de\u7c7b\u578b\u7684\u51fd\u6570\u6765\u8bf4\uff0c\u5982\u679creturn\u8bed\u53e5\u4e2d\u7684\u8868\u8fbe\u5f0f\u662f\u672c\u5730\u5bf9\u8c61\u7684\u540d\u79f0...\uff0c\u5141\u8bb8\u5728\u5b9e\u73b0\u7684\u65f6\u5019\u7701\u7565\u4e34\u65f6\u5bf9\u8c61\u7684\u521b\u5efa\u4ee5\u4fdd\u5b58\u51fd\u6570\u8fd4\u56de...\u201d\uff08\u7b2c12.8\u8282[class.copy] C++98\u6807\u51c6\u7684\u7b2c15\u6bb5.C++11\u6807\u51c6\u5728\u7b2c12.8\u8282\u7b2c31\u6bb5\u4e2d\u6709\u7c7b\u4f3c\u7684\u8bed\u8a00\uff0c\u4f46\u5b83\u66f4\u590d\u6742\u3002\uff09 \u6807\u51c6\u4e2d\u63d0\u5230\"\u5141\u8bb8\"\u8fd9\u4e2a\u5173\u952e\u5b57\uff0c\u4e5f\u5c31\u662f\u8868\u660e\u8fd9\u5e76\u4e0d\u662f\u5f3a\u70c8\u4fdd\u8bc1\u7684\uff0c\u5e78\u8fd0\u7684\u662f\u6240\u6709\u7684\u73b0\u4ee3C++\u7f16\u8bd1\u5668\u90fd\u4f1a\u9ed8\u8ba4\u6267\u884c RVO \uff0c\u5373\u4f7f\u662f\u5728 debug \u6784\u5efa\u3001 non-inlined \u51fd\u6570\u4e2d\u3002","title":"Tip of the Week #11: Return Policy"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-11/#how-can-you-ensure-the-compiler-performs-rvo","text":"\u88ab\u8c03\u7528\u7684\u51fd\u6570\u4e2d\u5e94\u8be5\u4e3a\u8fd4\u56de\u503c\u5b9a\u4e49\u4e00\u4e2a\u53d8\u91cf\uff1a 1 2 3 4 5 SomeBigObject SomeBigObject::SomeBigObjectFactory (...) { SomeBigObject local ; \u2026 return local ; } \u51fd\u6570\u7684\u8c03\u7528\u5904\u5e94\u8be5\u5c06\u8fd4\u56de\u503c\u8d4b\u503c\u7ed9\u4e00\u4e2a\u65b0\u7684\u53d8\u91cf 1 2 // No message about expensive operations: SomeBigObject obj = SomeBigObject :: SomeBigObjectFactory (...); \u5982\u679c\u8c03\u7528\u7684\u51fd\u6570\u91cd\u7528\u4e86\u73b0\u5b58\u7684\u53d8\u91cf\u6765\u5b58\u50a8\u8fd4\u56de\u503c\u7684\u8bdd(\u867d\u7136\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u662f\u53ef\u4ee5\u4f7f\u7528\u79fb\u52a8\u8bed\u4e49\u6765\u5b8c\u6210)\uff0c\u7f16\u8bd1\u5668\u5c31\u65e0\u6cd5\u505a RVO \u4e86 1 2 // RVO won\u2019t happen here; prints message \"Expensive assignment ...\": obj = SomeBigObject :: SomeBigObjectFactory ( s2 ); \u5982\u679c\u8c03\u7528\u7684\u51fd\u6570\u5185\u90e8\u4f7f\u7528\u4e86\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u53d8\u91cf\u7528\u505a\u8fd4\u56de\u503c\u7684\u65f6\u5019\uff0c\u7f16\u8bd1\u5668\u540c\u6837\u65e0\u6cd5\u6267\u884cRVO\u3002 1 2 3 4 5 6 7 8 9 10 11 // RVO won\u2019t happen here: static SomeBigObject NonRvoFactory (...) { SomeBigObject object1 , object2 ; object1 . DoSomethingWith (...); object2 . DoSomethingWith (...); if ( flag ) { return object1 ; } else { return object2 ; } } \u4f46\u662f\u5982\u679c\u8c03\u7528\u7684\u51fd\u6570\u5185\u90e8\u4f7f\u7528\u4e00\u4e2a\u53d8\u91cf\u5728\u591a\u4e2a\u4f4d\u7f6e\u8fd4\u56de\u7684\u65f6\u5019\u662fok\u7684\u3002 1 2 3 4 5 6 7 8 9 // RVO will happen here: SomeBigObject local ; if (...) { local . DoSomethingWith (...); return local ; } else { local . DoSomethingWith (...); return local ; } \u8fd9\u53ef\u80fd\u662f\u60a8\u9700\u8981\u4e86\u89e3\u7684\u6709\u5173\u7684 RVO \u7684\u6240\u6709\u4fe1\u606f\u4e86\u3002","title":"How Can You Ensure the Compiler Performs RVO?"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-11/#one-more-thing-temporaries","text":"RVO \u53ef\u4ee5\u5de5\u4f5c\u5728\u4e34\u65f6\u53d8\u91cf\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u547d\u540d\u7684\u53d8\u91cf\uff0c\u5f53\u88ab\u8c03\u7528\u51fd\u6570\u8fd4\u56de\u5bf9\u8c61\u65f6\uff0c\u60a8\u53ef\u4ee5\u4ece RVO \u4e2d\u6536\u76ca: 1 2 3 4 // RVO works here: SomeBigObject SomeBigObject::ReturnsTempFactory (...) { return SomeBigObject :: SomeBigObjectFactory (...); } \u5f53\u51fd\u6570\u8c03\u7528\u7684\u5730\u65b9\u7acb\u5373\u4f7f\u7528\u51fd\u6570\u7684\u8fd4\u56de\u503c(\u5b83\u5b58\u50a8\u5728\u4e34\u65f6\u5bf9\u8c61\u4e2d)\uff0c\u4f60\u540c\u6837\u53ef\u4ee5\u4ece RVO \u4e2d\u6536\u76ca\u3002 1 2 // No message about expensive operations: EXPECT_EQ ( SomeBigObject :: SomeBigObjectFactory (...). Name (), s ); \u6700\u540e\u9700\u8981\u6ce8\u610f\u7684 : \u5982\u679c\u4f60\u7684\u4ee3\u7801\u9700\u8981\u62f7\u8d1d\uff0c\u90a3\u4e48\u5c31\u62f7\u8d1d\uff0c\u65e0\u8bba\u62f7\u8d1d\u7684\u526f\u672c\u662f\u5426\u53ef\u4ee5\u4f18\u5316\u3002\u4e0d\u8981\u4e3a\u4e86\u6548\u7387\u8fd8\u5931\u53bb\u6b63\u786e\u6027\u3002","title":"One More Thing: Temporaries"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-112/","text":"Tip of the Week #112: emplace vs. push_back Originally posted as totw/112 on 2016-02-25 By Geoff Romer (gromer@google.com) Revised 2017-08-30 \u201cThe less we use our power, the greater it will be.\u201d \u2014 Thomas Jefferson \u4f60\u6216\u8bb8\u5df2\u7ecf\u77e5\u9053(\u5982\u679c\u4e0d\u77e5\u9053\u8bf7\u770b TotW65 )\uff0cC++11\u5f15\u5165\u4e86\u4e00\u4e2a\u5f3a\u5927\u7684\u65b9\u5f0f\u6765\u5f80\u5bb9\u5668\u4e2d\u63d2\u5165\u4e00\u4e2a\u5143\u7d20\uff0c\u90a3\u5c31\u662f emplace \u65b9\u6cd5 \u8fd9\u4e2a\u65b9\u6cd5\u53ef\u4ee5\u8ba9\u4f60\u5728\u5bb9\u5668\u4e2d\u4f7f\u7528\u5bf9\u8c61\u7684\u4efb\u4f55\u4e00\u4e2a\u6784\u9020\u51fd\u6570\u8fdb\u884c\u539f\u5730\u6784\u9020\uff0c\u5305\u62ecmove\u548ccopy\u6784\u9020\u3002\u56e0\u6b64\u4e8b\u5b9e\u8bc1\u660e\uff0c\u53ea\u8981\u53ef\u4ee5\u4f7f\u7528 push \u6216 insert \u65b9\u6cd5\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528 emplace \u65b9\u6cd5\u6765\u66ff\u6362\uff0c\u800c\u65e0\u9700\u8fdb\u884c\u5176\u4ed6\u7684\u66f4\u6539 1 2 3 4 5 6 7 std :: vector < string > my_vec ; my_vec . push_back ( \"foo\" ); // This is OK, so... my_vec . emplace_back ( \"foo\" ); // This is also OK, and has the same result std :: set < string > my_set ; my_set . insert ( \"foo\" ); // Same here: any insert call can be my_set . emplace ( \"foo\" ); // rewritten as an emplace call. \u8fd9\u91cc\u63d0\u51fa\u4e86\u4e00\u4e2a\u5f88\u660e\u663e\u7684\u95ee\u9898\uff0c\u4f60\u5e94\u8be5\u4f7f\u7528\u54ea\u4e00\u4e2a\u65b9\u6cd5?\uff0c\u6216\u8bb8\u6211\u4eec\u5e94\u8be5\u4ec5\u4ec5\u4e22\u5f03\u5bf9 push_back \u548c insert \u7684\u4f7f\u7528\uff0c\u800c\u9009\u62e9\u4e00\u76f4\u4f7f\u7528 emplace . \u8ba9\u6211\u518d\u95ee\u4e00\u4e2a\u95ee\u9898\u6765\u56de\u7b54\u8fd9\u4e2a\u95ee\u9898\uff1a\u8fd9\u4e24\u884c\u4ee3\u7801\u505a\u4ec0\u4e48\uff1f 1 2 vec1 . push_back ( 1 << 20 ); vec2 . emplace_back ( 1 << 20 ); \u7b2c\u4e00\u884c\u5f88\u7b80\u5355\uff0c\u5b83\u5c06\u6570\u5b571048576\u6dfb\u52a0\u5230 vector \u7684\u672b\u5c3e\uff0c\u4f46\u662f\u7b2c\u4e8c\u884c\u4e0d\u662f\u6e05\u695a\uff0c\u4e5f\u4e0d\u77e5\u9053 vector \u7684\u7c7b\u578b\uff0c\u6211\u4eec\u4e0d\u77e5\u9053\u4f1a\u8c03\u7528\u54ea\u4e2a\u6784\u9020\u51fd\u6570\uff0c\u56e0\u6b64\u6211\u4eec\u65e0\u6cd5\u77e5\u9053 \u7b2c\u4e8c\u884c\u4ee3\u7801\u5728\u505a\u4ec0\u4e48.\u4f8b\u5982: \u5982\u679c vec2 \u662f std::vector<int> \uff0c\u90a3\u4e48\u7b2c\u4e8c\u884c\u5c31\u662f\u5c06\u6570\u5b571048576\u6dfb\u52a0\u5230 vector \u7684\u672b\u5c3e\uff0c\u548c\u7b2c\u4e00\u884c\u662f\u4e00\u81f4\u7684\u3002\u4f46\u662f\u5982\u679c vec2 \u662f std::vector<std::vector<int>> \uff0c\u90a3\u4e48\u7b2c\u4e8c\u884c\u4ee3\u7801\u4f1a\u6784\u9020\u4e00\u4e2a\u8d85\u8fc7\u4e00\u767e\u884c\u4e2a\u5143\u7d20\u7684 vector \u3002\u5728\u6b21\u8fc7\u7a0b\u4e2d\u4f1a\u5206\u914d\u51e0\u5146\u5b57\u8282\u7684\u5185\u5b58\u3002 \u56e0\u6b64\u5982\u679c\u76f8\u540c\u53c2\u6570\u7684\u60c5\u51b5\u4e0b\u4f60\u5728 push_back() \u548c emplace_back() \u4e4b\u95f4\u505a\u9009\u62e9\u7684\u8bdd\uff0c\u9009\u62e9 push_back() \u4f1a\u4f7f\u5f97\u4ee3\u7801\u66f4\u6613\u8bfb\u3002\u56e0\u4e3a push_back() \u66f4\u5177\u4f53\u7684\u8868\u8fbe\u4e86\u60a8\u7684\u610f\u56fe \u9009\u62e9 push_back() \u4e5f\u66f4\u5b89\u5168\uff0c\u5047\u8bbe\u4f60\u6709\u4e00\u4e2a std::vector<std::vector<int>> \uff0c\u5e76\u4e14\u4f60\u60f3\u5f80\u7b2c\u4e00\u4e2a vector \u7684\u672b\u5c3e\u6dfb\u52a0\u4e00\u4e2a\u6570\u5b57\u3002\u4f46\u662f\u4f60\u4e00\u4e0d\u5c0f\u5fc3\u5fd8\u8bb0\u4e86\u4e0b\u6807\u3002 \u5982\u679c\u60a8\u7f16\u5199 my_vec.push_back(2 << 20) \uff0c\u5219\u4f1a\u51fa\u73b0\u7f16\u8bd1\u9519\u8bef\uff0c\u5e76\u8fc5\u901f\u53d1\u73b0\u95ee\u9898\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u5982\u679c\u60a8\u7f16\u5199 my_vec.emplace_back(2 << 20) \uff0c\u5219\u4ee3\u7801\u5c06\u7f16\u8bd1\uff0c\u5e76\u4e14\u76f4\u5230\u8fd0\u884c\u65f6\u60a8\u90fd\u4e0d\u4f1a\u53d1\u73b0\u4efb\u4f55\u95ee\u9898\u3002 \u73b0\u5728\u5f53\u6d89\u53ca\u9690\u5f0f\u8f6c\u6362\u7684\u65f6\u5019\uff0c emplace_back() \u53ef\u80fd\u6bd4 push_back() \u5feb\u4e00\u70b9\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u4ee3\u7801\u4e2d\u8fd9\u6837\u5199 my_vec.push_back(\"foo\") ,\u8fd9\u884c\u4ee3\u7801\u4f1a\u9996\u5148\u5c06\"foo\"\u5b57\u7b26\u4e32\u9690\u5f0f\u8f6c\u6362\u4e3a\u4e34\u65f6\u7684 string \uff0c \u7136\u540emove\u5230\u5bb9\u5668\u4e2d\u3002\u7136\u540e my_vec.emplace_back(\"foo\") \u53ea\u662f\u76f4\u63a5\u5728\u5bb9\u5668\u4e2d\u6784\u5efa std::string \uff0c\u907f\u514d\u4e86\u989d\u5916\u7684move\uff0c\u5bf9\u4e8e\u4e00\u4e9b\u8fdb\u884cmove\u4ee3\u4ef7\u6bd4\u8f83\u5927\u7684\u7c7b\u578b\uff0c\u6216\u8bb8\u662f\u9009\u62e9\u4f7f\u7528 emplace_back \u66ff\u4ee3 push_back \u7684\u539f\u56e0\u3002 \u5c3d\u7ba1\u5177\u6709\u53ef\u8bfb\u6027\u548c\u5b89\u5168\u6027\u6210\u672c\uff0c\u4f46\u968f\u540e\u53ef\u80fd\u4e0d\u4f1a\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u6027\u80fd\u5dee\u5f02\u5e76\u4e0d\u91cd\u8981\uff0c\u4e0e\u5f80\u5e38\u4e00\u6837\uff0c\u7ecf\u9a8c\u6cd5\u5219\u662f\uff0c\u5e94\u907f\u514d\u4f7f\u4ee3\u7801\u4e0d\u90a3\u4e48\u5b89\u5168\u6216\u4e0d\u592a\u6e05\u6670\u7684\u201c\u4f18\u5316\u201d\uff0c\u9664\u975e\u6027\u80fd\u597d\u5904\u8db3\u4ee5\u5728\u5e94\u7528\u7a0b\u5e8f\u57fa\u51c6\u6d4b\u8bd5\u4e2d\u663e\u793a\u51fa\u6765\u3002 \u56e0\u6b64\uff0c\u901a\u5e38\uff0c\u5982\u679c push_back() \u548c emplace_back() \u90fd\u53ef\u4ee5\u4f7f\u7528\u76f8\u540c\u7684\u53c2\u6570\uff0c\u5219\u60a8\u5e94\u8be5\u66f4\u559c\u6b22 push_back() \uff0c\u5bf9\u4e8e insert() \u548c emplace() \u540c\u6837\u5982\u6b64\u3002","title":"Tip of the Week #112: emplace vs. push_back"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-112/#tip-of-the-week-112-emplace-vs-push_back","text":"Originally posted as totw/112 on 2016-02-25 By Geoff Romer (gromer@google.com) Revised 2017-08-30 \u201cThe less we use our power, the greater it will be.\u201d \u2014 Thomas Jefferson \u4f60\u6216\u8bb8\u5df2\u7ecf\u77e5\u9053(\u5982\u679c\u4e0d\u77e5\u9053\u8bf7\u770b TotW65 )\uff0cC++11\u5f15\u5165\u4e86\u4e00\u4e2a\u5f3a\u5927\u7684\u65b9\u5f0f\u6765\u5f80\u5bb9\u5668\u4e2d\u63d2\u5165\u4e00\u4e2a\u5143\u7d20\uff0c\u90a3\u5c31\u662f emplace \u65b9\u6cd5 \u8fd9\u4e2a\u65b9\u6cd5\u53ef\u4ee5\u8ba9\u4f60\u5728\u5bb9\u5668\u4e2d\u4f7f\u7528\u5bf9\u8c61\u7684\u4efb\u4f55\u4e00\u4e2a\u6784\u9020\u51fd\u6570\u8fdb\u884c\u539f\u5730\u6784\u9020\uff0c\u5305\u62ecmove\u548ccopy\u6784\u9020\u3002\u56e0\u6b64\u4e8b\u5b9e\u8bc1\u660e\uff0c\u53ea\u8981\u53ef\u4ee5\u4f7f\u7528 push \u6216 insert \u65b9\u6cd5\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528 emplace \u65b9\u6cd5\u6765\u66ff\u6362\uff0c\u800c\u65e0\u9700\u8fdb\u884c\u5176\u4ed6\u7684\u66f4\u6539 1 2 3 4 5 6 7 std :: vector < string > my_vec ; my_vec . push_back ( \"foo\" ); // This is OK, so... my_vec . emplace_back ( \"foo\" ); // This is also OK, and has the same result std :: set < string > my_set ; my_set . insert ( \"foo\" ); // Same here: any insert call can be my_set . emplace ( \"foo\" ); // rewritten as an emplace call. \u8fd9\u91cc\u63d0\u51fa\u4e86\u4e00\u4e2a\u5f88\u660e\u663e\u7684\u95ee\u9898\uff0c\u4f60\u5e94\u8be5\u4f7f\u7528\u54ea\u4e00\u4e2a\u65b9\u6cd5?\uff0c\u6216\u8bb8\u6211\u4eec\u5e94\u8be5\u4ec5\u4ec5\u4e22\u5f03\u5bf9 push_back \u548c insert \u7684\u4f7f\u7528\uff0c\u800c\u9009\u62e9\u4e00\u76f4\u4f7f\u7528 emplace . \u8ba9\u6211\u518d\u95ee\u4e00\u4e2a\u95ee\u9898\u6765\u56de\u7b54\u8fd9\u4e2a\u95ee\u9898\uff1a\u8fd9\u4e24\u884c\u4ee3\u7801\u505a\u4ec0\u4e48\uff1f 1 2 vec1 . push_back ( 1 << 20 ); vec2 . emplace_back ( 1 << 20 ); \u7b2c\u4e00\u884c\u5f88\u7b80\u5355\uff0c\u5b83\u5c06\u6570\u5b571048576\u6dfb\u52a0\u5230 vector \u7684\u672b\u5c3e\uff0c\u4f46\u662f\u7b2c\u4e8c\u884c\u4e0d\u662f\u6e05\u695a\uff0c\u4e5f\u4e0d\u77e5\u9053 vector \u7684\u7c7b\u578b\uff0c\u6211\u4eec\u4e0d\u77e5\u9053\u4f1a\u8c03\u7528\u54ea\u4e2a\u6784\u9020\u51fd\u6570\uff0c\u56e0\u6b64\u6211\u4eec\u65e0\u6cd5\u77e5\u9053 \u7b2c\u4e8c\u884c\u4ee3\u7801\u5728\u505a\u4ec0\u4e48.\u4f8b\u5982: \u5982\u679c vec2 \u662f std::vector<int> \uff0c\u90a3\u4e48\u7b2c\u4e8c\u884c\u5c31\u662f\u5c06\u6570\u5b571048576\u6dfb\u52a0\u5230 vector \u7684\u672b\u5c3e\uff0c\u548c\u7b2c\u4e00\u884c\u662f\u4e00\u81f4\u7684\u3002\u4f46\u662f\u5982\u679c vec2 \u662f std::vector<std::vector<int>> \uff0c\u90a3\u4e48\u7b2c\u4e8c\u884c\u4ee3\u7801\u4f1a\u6784\u9020\u4e00\u4e2a\u8d85\u8fc7\u4e00\u767e\u884c\u4e2a\u5143\u7d20\u7684 vector \u3002\u5728\u6b21\u8fc7\u7a0b\u4e2d\u4f1a\u5206\u914d\u51e0\u5146\u5b57\u8282\u7684\u5185\u5b58\u3002 \u56e0\u6b64\u5982\u679c\u76f8\u540c\u53c2\u6570\u7684\u60c5\u51b5\u4e0b\u4f60\u5728 push_back() \u548c emplace_back() \u4e4b\u95f4\u505a\u9009\u62e9\u7684\u8bdd\uff0c\u9009\u62e9 push_back() \u4f1a\u4f7f\u5f97\u4ee3\u7801\u66f4\u6613\u8bfb\u3002\u56e0\u4e3a push_back() \u66f4\u5177\u4f53\u7684\u8868\u8fbe\u4e86\u60a8\u7684\u610f\u56fe \u9009\u62e9 push_back() \u4e5f\u66f4\u5b89\u5168\uff0c\u5047\u8bbe\u4f60\u6709\u4e00\u4e2a std::vector<std::vector<int>> \uff0c\u5e76\u4e14\u4f60\u60f3\u5f80\u7b2c\u4e00\u4e2a vector \u7684\u672b\u5c3e\u6dfb\u52a0\u4e00\u4e2a\u6570\u5b57\u3002\u4f46\u662f\u4f60\u4e00\u4e0d\u5c0f\u5fc3\u5fd8\u8bb0\u4e86\u4e0b\u6807\u3002 \u5982\u679c\u60a8\u7f16\u5199 my_vec.push_back(2 << 20) \uff0c\u5219\u4f1a\u51fa\u73b0\u7f16\u8bd1\u9519\u8bef\uff0c\u5e76\u8fc5\u901f\u53d1\u73b0\u95ee\u9898\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u5982\u679c\u60a8\u7f16\u5199 my_vec.emplace_back(2 << 20) \uff0c\u5219\u4ee3\u7801\u5c06\u7f16\u8bd1\uff0c\u5e76\u4e14\u76f4\u5230\u8fd0\u884c\u65f6\u60a8\u90fd\u4e0d\u4f1a\u53d1\u73b0\u4efb\u4f55\u95ee\u9898\u3002 \u73b0\u5728\u5f53\u6d89\u53ca\u9690\u5f0f\u8f6c\u6362\u7684\u65f6\u5019\uff0c emplace_back() \u53ef\u80fd\u6bd4 push_back() \u5feb\u4e00\u70b9\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u4ee3\u7801\u4e2d\u8fd9\u6837\u5199 my_vec.push_back(\"foo\") ,\u8fd9\u884c\u4ee3\u7801\u4f1a\u9996\u5148\u5c06\"foo\"\u5b57\u7b26\u4e32\u9690\u5f0f\u8f6c\u6362\u4e3a\u4e34\u65f6\u7684 string \uff0c \u7136\u540emove\u5230\u5bb9\u5668\u4e2d\u3002\u7136\u540e my_vec.emplace_back(\"foo\") \u53ea\u662f\u76f4\u63a5\u5728\u5bb9\u5668\u4e2d\u6784\u5efa std::string \uff0c\u907f\u514d\u4e86\u989d\u5916\u7684move\uff0c\u5bf9\u4e8e\u4e00\u4e9b\u8fdb\u884cmove\u4ee3\u4ef7\u6bd4\u8f83\u5927\u7684\u7c7b\u578b\uff0c\u6216\u8bb8\u662f\u9009\u62e9\u4f7f\u7528 emplace_back \u66ff\u4ee3 push_back \u7684\u539f\u56e0\u3002 \u5c3d\u7ba1\u5177\u6709\u53ef\u8bfb\u6027\u548c\u5b89\u5168\u6027\u6210\u672c\uff0c\u4f46\u968f\u540e\u53ef\u80fd\u4e0d\u4f1a\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u6027\u80fd\u5dee\u5f02\u5e76\u4e0d\u91cd\u8981\uff0c\u4e0e\u5f80\u5e38\u4e00\u6837\uff0c\u7ecf\u9a8c\u6cd5\u5219\u662f\uff0c\u5e94\u907f\u514d\u4f7f\u4ee3\u7801\u4e0d\u90a3\u4e48\u5b89\u5168\u6216\u4e0d\u592a\u6e05\u6670\u7684\u201c\u4f18\u5316\u201d\uff0c\u9664\u975e\u6027\u80fd\u597d\u5904\u8db3\u4ee5\u5728\u5e94\u7528\u7a0b\u5e8f\u57fa\u51c6\u6d4b\u8bd5\u4e2d\u663e\u793a\u51fa\u6765\u3002 \u56e0\u6b64\uff0c\u901a\u5e38\uff0c\u5982\u679c push_back() \u548c emplace_back() \u90fd\u53ef\u4ee5\u4f7f\u7528\u76f8\u540c\u7684\u53c2\u6570\uff0c\u5219\u60a8\u5e94\u8be5\u66f4\u559c\u6b22 push_back() \uff0c\u5bf9\u4e8e insert() \u548c emplace() \u540c\u6837\u5982\u6b64\u3002","title":"Tip of the Week #112: emplace vs. push_back"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-117/","text":"Tip of the Week #117: Copy Elision and Pass-by-value Originally posted as TotW #117 on June 8, 2016 by Geoff Romer, (gromer@google.com) \u201cEverything is so far away, a copy of a copy of a copy. The insomnia distance of everything, you can\u2019t touch anything and nothing can touch you.\u201d \u2014 Chuck Palahniuk \u5047\u8bbe\u4f60\u6709\u4e00\u4e2a\u50cf\u4e0b\u9762\u4f8b\u5b50\u4e2d\u7684\u7c7b: 1 2 3 4 5 6 7 class Widget { public : \u2026 private : string name_ ; }; \u4f60\u8981\u5982\u4f55\u7ed9\u5b83\u7f16\u5199\u6784\u9020\u51fd\u6570? \u591a\u5e74\u6765\uff0c\u7b54\u6848\u4e00\u76f4\u90fd\u662f\u50cf\u4e0b\u9762\u7684\u4ee3\u7801\u4e00\u6837: 1 2 // First constructor version explicit Widget ( const std :: string & name ) : name_ ( name ) {} \u4f46\u662f\uff0c\u6709\u4e00\u79cd\u66ff\u4ee3\u65b9\u6cd5\u6b63\u53d8\u5f97\u8d8a\u6765\u8d8a\u666e\u904d: 1 2 // Second constructor version explicit Widget ( std :: string name ) : name_ ( std :: move ( name )) {} (\u5982\u679c\u4f60\u4e0d\u719f\u6089 std::move \u53ef\u4ee5\u53bb\u770b TotW #77 \uff0c\u6216\u8005\u5047\u88c5\u6211\u7528 std::swap \u4ee3\u66ff\uff1b\u76f8\u540c\u7684\u539f\u5219\u9002\u7528) \u4e0a\u9762\u7684\u4ee3\u7801\u5230\u5e95\u53d1\u751f\u4e86\u4ec0\u4e48? \u901a\u8fc7\u62f7\u8d1d\u4f20\u9012 std::string \u96be\u9053\u4e0d\u662f\u5f88\u6602\u8d35\u5417\uff1f\u4e8b\u5b9e\u8bc1\u660e\uff0c\u5e76\u4e0d\u662f\u8fd9\u6837\u7684\uff0c\u6709\u7684\u65f6\u5019\u8fdb\u884c\u503c\u4f20\u9012(\u5982\u6211\u4eec\u6240\u89c1\uff0c\u5e76\u4e0d\u662f\u771f\u6b63\u7684\u62f7\u8d1d)\u4f1a\u6bd4\u901a\u8fc7\u5e94\u7528\u4f20\u9012\u66f4\u9ad8\u6548\u3002 \u8981\u4e86\u89e3\u539f\u56e0\uff0c\u53ef\u4ee5\u8003\u8651\u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801\u53d1\u751f\u4e86\u4ec0\u4e48: 1 Widget widget ( absl :: StrCat ( bar , baz )); \u6211\u4eec\u7b2c\u4e00\u4e2a\u7248\u672c\u7684\u6784\u9020\u51fd\u6570\u4e2d\uff0c absl::StrCat \u4f1a\u4ea7\u751f\u4e00\u4e2a\u4e34\u65f6\u7684\u5b57\u7b26\u4e32\uff0c\u7136\u540e\u901a\u8fc7\u5f15\u7528\u4f20\u9012\u7ed9 Widget() \uff0c\u6700\u540e\u901a\u8fc7\u62f7\u8d1d\u5230 name_ \u3002\u5728\u7b2c\u4e8c\u4e2a\u7248\u672c\u7684 Widget \u6784\u9020\u51fd\u6570\u4e2d\uff0c\u4e34\u65f6\u5b57\u7b26\u4e32 \u901a\u8fc7\u503c\u4f20\u9012\u7684\u65b9\u5f0f\u4f20\u9012\u7ed9\u6784\u9020\u51fd\u6570\uff0c\u4f60\u53ef\u80fd\u8ba4\u4e3a\u8fd9\u91cc\u4f1a\u5bfc\u81f4\u5b57\u7b26\u4e32\u62f7\u8d1d\uff0c\u5176\u5b9e\u4e0d\u7136\u3002\u5f53\u7f16\u8bd1\u5668\u770b\u5230\u4e00\u4e2a\u4e34\u65f6\u5b57\u7b26\u4e32\u88ab\u62f7\u8d1d\u6784\u9020\u6210\u4e00\u4e2a\u5bf9\u8c61\u7684\u65f6\u5019\uff0c\u7f16\u8bd1\u5668\u5c06\u7b80\u5355\u5730\u5bf9\u4e34\u65f6\u5bf9\u8c61\u548c\u65b0\u5bf9\u8c61\u4f7f\u7528\u76f8\u540c\u7684\u5b58\u50a8 \u56e0\u6b64\u4ece\u4e00\u4e2a\u5230\u53e6\u4e00\u4e2a\u7684\u590d\u5236\u5b9e\u9645\u4e0a\u662f\u514d\u8d39\u7684\uff1b\u8fd9\u79f0\u4e3a Copy elision \u80fd\u591f\u4f7f\u7528 Copy elision \u6280\u672f\u7684\u524d\u63d0\u662f name \u53c2\u6570\u7684\u7c7b\u578b\u5fc5\u987b\u662f\u80fd\u591f\u88ab\u62f7\u8d1d\u7684\u3002\u786e\u5b9e\uff0c\u6b64\u6280\u672f\u7684\u672c\u8d28\u662f\u5c1d\u8bd5\u4f7f\u590d\u5236\u64cd\u4f5c\u53d1\u751f\u5728\u53ef\u4ee5\u6d88\u9664\u590d\u5236\u51fd\u6570\u7684\u51fd\u6570\u8c03\u7528\u8fb9\u754c\u4e0a\uff0c\u800c\u4e0d\u662f\u5728\u51fd\u6570\u5185\u90e8\u8fdb\u884c\u3002 \u8fd9\u4e0d\u5fc5\u6d89\u53ca std::move() ;\u3002 When to Use Copy Elision \u901a\u8fc7\u503c\u4f20\u9012\u53c2\u6570\u6709\u51e0\u4e2a\u7f3a\u70b9\uff0c\u5e94\u8be5\u7262\u8bb0\u3002\u7b2c\u4e00\u5b83\u4f7f\u51fd\u6570\u4e3b\u4f53\u66f4\u52a0\u590d\u6742\uff0c\u4ece\u800c\u9020\u6210\u7ef4\u62a4\u548c\u53ef\u8bfb\u6027\u8d1f\u62c5\uff0c\u4f8b\u5982\u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u6dfb\u52a0\u4e86\u4e00\u4e2a std::move \u8c03\u7528\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u610f\u5916\u8bbf\u95ee\u5df2\u7ecf\u88ab\u79fb\u52a8\u7684\u503c\u7684\u98ce\u9669\uff0c \u5728\u4e0a\u9762\u7684\u51fd\u6570\u4e2d\uff0c\u98ce\u9669\u5f88\u5c0f\uff0c\u4f46\u5982\u679c\u51fd\u6570\u66f4\u590d\u6742\uff0c\u5219\u98ce\u9669\u4f1a\u66f4\u9ad8\u3002\u7b2c\u4e8c\u5b83\u6709\u65f6\u4f1a\u4ee5\u4ee4\u4eba\u60ca\u8bb6\u7684\u65b9\u5f0f\u964d\u4f4e\u6027\u80fd\u3002\u5982\u679c\u4e0d\u5206\u6790\u7279\u5b9a\u7684\u5de5\u4f5c\u8d1f\u8f7d\uff0c\u6709\u65f6\u53ef\u80fd\u5f88\u96be\u8bf4\u51fa\u4e3a\u4ec0\u4e48\u3002 \u5982\u4e0a\u6240\u8ff0\uff0c\u8be5\u6280\u672f\u4ec5\u9002\u7528\u4e8e\u9700\u8981\u590d\u5236\u7684\u53c2\u6570\u3002\u5982\u679c\u5c06\u5176\u5e94\u7528\u4e8e\u4e0d\u9700\u8981\u590d\u5236\u6216\u4ec5\u9700\u8981\u6709\u6761\u4ef6\u590d\u5236\u7684\u53c2\u6570\uff0c\u5219\u5145\u5176\u91cf\u662f\u65e0\u7528\u7684\uff0c\u6700\u574f\u7684\u662f\u6709\u5bb3\u7684\u3002 \u8be5\u6280\u672f\u901a\u5e38\u5728\u51fd\u6570\u4e3b\u4f53\u4e2d\u6d89\u53ca\u4e00\u4e9b\u989d\u5916\u7684\u5de5\u4f5c\uff0c\u4f8b\u5982\u4e0a\u9762\u793a\u4f8b\u4e2d\u7684\u79fb\u52a8\u8d4b\u503c\u3002\u5982\u679c\u8fd9\u4e9b\u989d\u5916\u7684\u5de5\u4f5c\u589e\u52a0\u4e86\u8fc7\u591a\u7684\u5f00\u9500\uff0c\u90a3\u4e48\u5728\u65e0\u6cd5\u7701\u7565\u62f7\u8d1d\u7684\u60c5\u51b5\u964d\u4f4e\u901f\u5ea6\u53ef\u80fd\u4e0d\u503c\u5f97\u5728\u53ef\u4ee5\u7701\u7565\u62f7\u8d1d\u7684\u5730\u65b9\u52a0\u5feb\u901f\u5ea6\u3002 \u8bf7\u6ce8\u610f\uff0c\u6b64\u786e\u5b9a\u53ef\u80fd\u53d6\u51b3\u4e8e\u60a8\u7684\u7528\u4f8b\u7684\u7ec6\u8282\uff0c\u5982\u679c Widget() \u7684\u53c2\u6570\u51e0\u4e4e\u603b\u662f\u5f88\u77ed\uff0c\u6216\u8005\u51e0\u4e4e\u4ece\u6765\u90fd\u4e0d\u662f\u4e34\u65f6\u7684\uff0c\u90a3\u4e48\u8fd9\u79cd\u6280\u672f\u603b\u7684\u6765\u8bf4\u53ef\u80fd\u662f\u6709\u5bb3\u7684\u3002\u4e0e\u4ee5\u5f80\u4e00\u6837\uff0c\u5728\u8003\u8651\u4f18\u5316\u6743\u8861\u65f6\uff0c\u5982\u6709\u7591\u95ee\uff0c\u8bf7\u8fdb\u884c\u8861\u91cf\u3002 \u5f53\u62f7\u8d1d\u662f\u901a\u8fc7\u8d4b\u503c\u64cd\u4f5c\u8fdb\u884c\u7684\u65f6\u5019(\u4f8b\u5982\uff0c\u5982\u679c\u6211\u4eec\u60f3\u5411 Widget \u6dfb\u52a0 set_name() \u65b9\u6cd5)\uff0c\u90a3\u4e48\u4f20\u9012\u5f15\u7528\u7684\u7248\u672c\u6709\u7684\u65f6\u5019\u53ef\u4ee5\u907f\u514d\u5185\u5b58\u5206\u914d\uff0c\u91cd\u7528 name_ \u73b0\u6709\u7684buffer\uff0c\u800c\u901a\u8fc7\u503c\u4f20\u9012\u7684\u7248\u672c \u4f1a\u5bfc\u81f4\u5206\u914d\u65b0\u7684\u5185\u5b58\uff0c\u6b64\u5916\uff0c\u503c\u4f20\u9012\u59cb\u7ec8\u4f1a\u66ff\u6362 name_ \u7684\u5206\u914d\uff0c\u8fd9\u4e00\u4e8b\u5b9e\u53ef\u80fd\u4f1a\u5bfc\u81f4\u66f4\u7cdf\u7cd5\u7684\u5206\u914d\u884c\u4e3a\u3002\u5982\u679c name_ \u5b57\u6bb5\u5728\u8bbe\u7f6e\u540e\u8d8b\u4e8e\u968f\u65f6\u95f4\u589e\u957f\uff0c\u5219\u5728\u901a\u8fc7\u503c\u4f20\u9012\u7684\u60c5\u51b5\u4e0b\u8fd9\u79cd\u589e\u957f\u5c06\u9700\u8981\u8fdb\u4e00\u6b65\u7684\u65b0\u5206\u914d\uff0c\u800c\u5728\u901a\u8fc7\u5f15\u7528\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u4ec5\u5728name_\u5b57\u6bb5\u8d85\u8fc7\u5176\u5386\u53f2\u6700\u5927\u503c\u65f6\u624d\u91cd\u65b0\u5206\u914d\u5185\u5b58\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u60a8\u5e94\u8be5\u66f4\u559c\u6b22\u66f4\u7b80\u5355\uff0c\u66f4\u5b89\u5168\uff0c\u66f4\u6613\u8bfb\u7684\u4ee3\u7801\uff0c\u5e76\u4e14\u53ea\u6709\u5728\u6709\u5177\u4f53\u8bc1\u636e\u8868\u660e\u590d\u6742\u7248\u672c\u7684\u6027\u80fd\u66f4\u597d\u5e76\u4e14\u5dee\u5f02\u5f88\u91cd\u8981\u7684\u60c5\u51b5\u4e0b\uff0c\u624d\u9009\u62e9\u66f4\u590d\u6742\u7684\u4ee3\u7801\u3002\u8be5\u539f\u7406\u5f53\u7136\u9002\u7528\u4e8e\u8be5\u6280\u672f\uff1a\u901a\u8fc7const\u5f15\u7528\u4f20\u9012\u66f4\u7b80\u5355\uff0c\u66f4\u5b89\u5168\uff0c\u56e0\u6b64\u5b83\u4ecd\u7136\u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u9ed8\u8ba4\u9009\u62e9\u3002\u4f46\u662f\uff0c\u5982\u679c\u60a8\u5728\u4e00\u4e2a\u5bf9\u6027\u80fd\u654f\u611f\u7684\u533a\u57df\u5de5\u4f5c\uff0c\u6216\u8005\u60a8\u7684\u57fa\u51c6\u6d4b\u8bd5\u8868\u660e\u60a8\u82b1\u4e86\u592a\u591a\u65f6\u95f4\u6765\u590d\u5236\u51fd\u6570\u53c2\u6570\uff0c\u90a3\u4e48\u6309\u503c\u4f20\u9012\u53ef\u80fd\u662f\u4e00\u4e2a\u975e\u5e38\u6709\u7528\u7684\u5de5\u5177\u3002 \u4e25\u683c\u6765\u8bf4\uff0c\u7f16\u8bd1\u5668\u4e0d\u9700\u8981\u6267\u884cCopy elision\uff0c\u4f46\u662f\u5b83\u662f\u4e00\u9879\u529f\u80fd\u5f3a\u5927\u4e14\u81f3\u5173\u91cd\u8981\u7684\u4f18\u5316\uff0c\u56e0\u6b64\u60a8\u6781\u6709\u53ef\u80fd\u4f1a\u9047\u5230\u4e0d\u6267\u884c\u8be5\u64cd\u4f5c\u7684\u7f16\u8bd1\u5668\u3002","title":"Tip of the Week #117: Copy Elision and Pass-by-value"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-117/#tip-of-the-week-117-copy-elision-and-pass-by-value","text":"Originally posted as TotW #117 on June 8, 2016 by Geoff Romer, (gromer@google.com) \u201cEverything is so far away, a copy of a copy of a copy. The insomnia distance of everything, you can\u2019t touch anything and nothing can touch you.\u201d \u2014 Chuck Palahniuk \u5047\u8bbe\u4f60\u6709\u4e00\u4e2a\u50cf\u4e0b\u9762\u4f8b\u5b50\u4e2d\u7684\u7c7b: 1 2 3 4 5 6 7 class Widget { public : \u2026 private : string name_ ; }; \u4f60\u8981\u5982\u4f55\u7ed9\u5b83\u7f16\u5199\u6784\u9020\u51fd\u6570? \u591a\u5e74\u6765\uff0c\u7b54\u6848\u4e00\u76f4\u90fd\u662f\u50cf\u4e0b\u9762\u7684\u4ee3\u7801\u4e00\u6837: 1 2 // First constructor version explicit Widget ( const std :: string & name ) : name_ ( name ) {} \u4f46\u662f\uff0c\u6709\u4e00\u79cd\u66ff\u4ee3\u65b9\u6cd5\u6b63\u53d8\u5f97\u8d8a\u6765\u8d8a\u666e\u904d: 1 2 // Second constructor version explicit Widget ( std :: string name ) : name_ ( std :: move ( name )) {} (\u5982\u679c\u4f60\u4e0d\u719f\u6089 std::move \u53ef\u4ee5\u53bb\u770b TotW #77 \uff0c\u6216\u8005\u5047\u88c5\u6211\u7528 std::swap \u4ee3\u66ff\uff1b\u76f8\u540c\u7684\u539f\u5219\u9002\u7528) \u4e0a\u9762\u7684\u4ee3\u7801\u5230\u5e95\u53d1\u751f\u4e86\u4ec0\u4e48? \u901a\u8fc7\u62f7\u8d1d\u4f20\u9012 std::string \u96be\u9053\u4e0d\u662f\u5f88\u6602\u8d35\u5417\uff1f\u4e8b\u5b9e\u8bc1\u660e\uff0c\u5e76\u4e0d\u662f\u8fd9\u6837\u7684\uff0c\u6709\u7684\u65f6\u5019\u8fdb\u884c\u503c\u4f20\u9012(\u5982\u6211\u4eec\u6240\u89c1\uff0c\u5e76\u4e0d\u662f\u771f\u6b63\u7684\u62f7\u8d1d)\u4f1a\u6bd4\u901a\u8fc7\u5e94\u7528\u4f20\u9012\u66f4\u9ad8\u6548\u3002 \u8981\u4e86\u89e3\u539f\u56e0\uff0c\u53ef\u4ee5\u8003\u8651\u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801\u53d1\u751f\u4e86\u4ec0\u4e48: 1 Widget widget ( absl :: StrCat ( bar , baz )); \u6211\u4eec\u7b2c\u4e00\u4e2a\u7248\u672c\u7684\u6784\u9020\u51fd\u6570\u4e2d\uff0c absl::StrCat \u4f1a\u4ea7\u751f\u4e00\u4e2a\u4e34\u65f6\u7684\u5b57\u7b26\u4e32\uff0c\u7136\u540e\u901a\u8fc7\u5f15\u7528\u4f20\u9012\u7ed9 Widget() \uff0c\u6700\u540e\u901a\u8fc7\u62f7\u8d1d\u5230 name_ \u3002\u5728\u7b2c\u4e8c\u4e2a\u7248\u672c\u7684 Widget \u6784\u9020\u51fd\u6570\u4e2d\uff0c\u4e34\u65f6\u5b57\u7b26\u4e32 \u901a\u8fc7\u503c\u4f20\u9012\u7684\u65b9\u5f0f\u4f20\u9012\u7ed9\u6784\u9020\u51fd\u6570\uff0c\u4f60\u53ef\u80fd\u8ba4\u4e3a\u8fd9\u91cc\u4f1a\u5bfc\u81f4\u5b57\u7b26\u4e32\u62f7\u8d1d\uff0c\u5176\u5b9e\u4e0d\u7136\u3002\u5f53\u7f16\u8bd1\u5668\u770b\u5230\u4e00\u4e2a\u4e34\u65f6\u5b57\u7b26\u4e32\u88ab\u62f7\u8d1d\u6784\u9020\u6210\u4e00\u4e2a\u5bf9\u8c61\u7684\u65f6\u5019\uff0c\u7f16\u8bd1\u5668\u5c06\u7b80\u5355\u5730\u5bf9\u4e34\u65f6\u5bf9\u8c61\u548c\u65b0\u5bf9\u8c61\u4f7f\u7528\u76f8\u540c\u7684\u5b58\u50a8 \u56e0\u6b64\u4ece\u4e00\u4e2a\u5230\u53e6\u4e00\u4e2a\u7684\u590d\u5236\u5b9e\u9645\u4e0a\u662f\u514d\u8d39\u7684\uff1b\u8fd9\u79f0\u4e3a Copy elision \u80fd\u591f\u4f7f\u7528 Copy elision \u6280\u672f\u7684\u524d\u63d0\u662f name \u53c2\u6570\u7684\u7c7b\u578b\u5fc5\u987b\u662f\u80fd\u591f\u88ab\u62f7\u8d1d\u7684\u3002\u786e\u5b9e\uff0c\u6b64\u6280\u672f\u7684\u672c\u8d28\u662f\u5c1d\u8bd5\u4f7f\u590d\u5236\u64cd\u4f5c\u53d1\u751f\u5728\u53ef\u4ee5\u6d88\u9664\u590d\u5236\u51fd\u6570\u7684\u51fd\u6570\u8c03\u7528\u8fb9\u754c\u4e0a\uff0c\u800c\u4e0d\u662f\u5728\u51fd\u6570\u5185\u90e8\u8fdb\u884c\u3002 \u8fd9\u4e0d\u5fc5\u6d89\u53ca std::move() ;\u3002","title":"Tip of the Week #117: Copy Elision and Pass-by-value"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-117/#when-to-use-copy-elision","text":"\u901a\u8fc7\u503c\u4f20\u9012\u53c2\u6570\u6709\u51e0\u4e2a\u7f3a\u70b9\uff0c\u5e94\u8be5\u7262\u8bb0\u3002\u7b2c\u4e00\u5b83\u4f7f\u51fd\u6570\u4e3b\u4f53\u66f4\u52a0\u590d\u6742\uff0c\u4ece\u800c\u9020\u6210\u7ef4\u62a4\u548c\u53ef\u8bfb\u6027\u8d1f\u62c5\uff0c\u4f8b\u5982\u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u6dfb\u52a0\u4e86\u4e00\u4e2a std::move \u8c03\u7528\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u610f\u5916\u8bbf\u95ee\u5df2\u7ecf\u88ab\u79fb\u52a8\u7684\u503c\u7684\u98ce\u9669\uff0c \u5728\u4e0a\u9762\u7684\u51fd\u6570\u4e2d\uff0c\u98ce\u9669\u5f88\u5c0f\uff0c\u4f46\u5982\u679c\u51fd\u6570\u66f4\u590d\u6742\uff0c\u5219\u98ce\u9669\u4f1a\u66f4\u9ad8\u3002\u7b2c\u4e8c\u5b83\u6709\u65f6\u4f1a\u4ee5\u4ee4\u4eba\u60ca\u8bb6\u7684\u65b9\u5f0f\u964d\u4f4e\u6027\u80fd\u3002\u5982\u679c\u4e0d\u5206\u6790\u7279\u5b9a\u7684\u5de5\u4f5c\u8d1f\u8f7d\uff0c\u6709\u65f6\u53ef\u80fd\u5f88\u96be\u8bf4\u51fa\u4e3a\u4ec0\u4e48\u3002 \u5982\u4e0a\u6240\u8ff0\uff0c\u8be5\u6280\u672f\u4ec5\u9002\u7528\u4e8e\u9700\u8981\u590d\u5236\u7684\u53c2\u6570\u3002\u5982\u679c\u5c06\u5176\u5e94\u7528\u4e8e\u4e0d\u9700\u8981\u590d\u5236\u6216\u4ec5\u9700\u8981\u6709\u6761\u4ef6\u590d\u5236\u7684\u53c2\u6570\uff0c\u5219\u5145\u5176\u91cf\u662f\u65e0\u7528\u7684\uff0c\u6700\u574f\u7684\u662f\u6709\u5bb3\u7684\u3002 \u8be5\u6280\u672f\u901a\u5e38\u5728\u51fd\u6570\u4e3b\u4f53\u4e2d\u6d89\u53ca\u4e00\u4e9b\u989d\u5916\u7684\u5de5\u4f5c\uff0c\u4f8b\u5982\u4e0a\u9762\u793a\u4f8b\u4e2d\u7684\u79fb\u52a8\u8d4b\u503c\u3002\u5982\u679c\u8fd9\u4e9b\u989d\u5916\u7684\u5de5\u4f5c\u589e\u52a0\u4e86\u8fc7\u591a\u7684\u5f00\u9500\uff0c\u90a3\u4e48\u5728\u65e0\u6cd5\u7701\u7565\u62f7\u8d1d\u7684\u60c5\u51b5\u964d\u4f4e\u901f\u5ea6\u53ef\u80fd\u4e0d\u503c\u5f97\u5728\u53ef\u4ee5\u7701\u7565\u62f7\u8d1d\u7684\u5730\u65b9\u52a0\u5feb\u901f\u5ea6\u3002 \u8bf7\u6ce8\u610f\uff0c\u6b64\u786e\u5b9a\u53ef\u80fd\u53d6\u51b3\u4e8e\u60a8\u7684\u7528\u4f8b\u7684\u7ec6\u8282\uff0c\u5982\u679c Widget() \u7684\u53c2\u6570\u51e0\u4e4e\u603b\u662f\u5f88\u77ed\uff0c\u6216\u8005\u51e0\u4e4e\u4ece\u6765\u90fd\u4e0d\u662f\u4e34\u65f6\u7684\uff0c\u90a3\u4e48\u8fd9\u79cd\u6280\u672f\u603b\u7684\u6765\u8bf4\u53ef\u80fd\u662f\u6709\u5bb3\u7684\u3002\u4e0e\u4ee5\u5f80\u4e00\u6837\uff0c\u5728\u8003\u8651\u4f18\u5316\u6743\u8861\u65f6\uff0c\u5982\u6709\u7591\u95ee\uff0c\u8bf7\u8fdb\u884c\u8861\u91cf\u3002 \u5f53\u62f7\u8d1d\u662f\u901a\u8fc7\u8d4b\u503c\u64cd\u4f5c\u8fdb\u884c\u7684\u65f6\u5019(\u4f8b\u5982\uff0c\u5982\u679c\u6211\u4eec\u60f3\u5411 Widget \u6dfb\u52a0 set_name() \u65b9\u6cd5)\uff0c\u90a3\u4e48\u4f20\u9012\u5f15\u7528\u7684\u7248\u672c\u6709\u7684\u65f6\u5019\u53ef\u4ee5\u907f\u514d\u5185\u5b58\u5206\u914d\uff0c\u91cd\u7528 name_ \u73b0\u6709\u7684buffer\uff0c\u800c\u901a\u8fc7\u503c\u4f20\u9012\u7684\u7248\u672c \u4f1a\u5bfc\u81f4\u5206\u914d\u65b0\u7684\u5185\u5b58\uff0c\u6b64\u5916\uff0c\u503c\u4f20\u9012\u59cb\u7ec8\u4f1a\u66ff\u6362 name_ \u7684\u5206\u914d\uff0c\u8fd9\u4e00\u4e8b\u5b9e\u53ef\u80fd\u4f1a\u5bfc\u81f4\u66f4\u7cdf\u7cd5\u7684\u5206\u914d\u884c\u4e3a\u3002\u5982\u679c name_ \u5b57\u6bb5\u5728\u8bbe\u7f6e\u540e\u8d8b\u4e8e\u968f\u65f6\u95f4\u589e\u957f\uff0c\u5219\u5728\u901a\u8fc7\u503c\u4f20\u9012\u7684\u60c5\u51b5\u4e0b\u8fd9\u79cd\u589e\u957f\u5c06\u9700\u8981\u8fdb\u4e00\u6b65\u7684\u65b0\u5206\u914d\uff0c\u800c\u5728\u901a\u8fc7\u5f15\u7528\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u4ec5\u5728name_\u5b57\u6bb5\u8d85\u8fc7\u5176\u5386\u53f2\u6700\u5927\u503c\u65f6\u624d\u91cd\u65b0\u5206\u914d\u5185\u5b58\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u60a8\u5e94\u8be5\u66f4\u559c\u6b22\u66f4\u7b80\u5355\uff0c\u66f4\u5b89\u5168\uff0c\u66f4\u6613\u8bfb\u7684\u4ee3\u7801\uff0c\u5e76\u4e14\u53ea\u6709\u5728\u6709\u5177\u4f53\u8bc1\u636e\u8868\u660e\u590d\u6742\u7248\u672c\u7684\u6027\u80fd\u66f4\u597d\u5e76\u4e14\u5dee\u5f02\u5f88\u91cd\u8981\u7684\u60c5\u51b5\u4e0b\uff0c\u624d\u9009\u62e9\u66f4\u590d\u6742\u7684\u4ee3\u7801\u3002\u8be5\u539f\u7406\u5f53\u7136\u9002\u7528\u4e8e\u8be5\u6280\u672f\uff1a\u901a\u8fc7const\u5f15\u7528\u4f20\u9012\u66f4\u7b80\u5355\uff0c\u66f4\u5b89\u5168\uff0c\u56e0\u6b64\u5b83\u4ecd\u7136\u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u9ed8\u8ba4\u9009\u62e9\u3002\u4f46\u662f\uff0c\u5982\u679c\u60a8\u5728\u4e00\u4e2a\u5bf9\u6027\u80fd\u654f\u611f\u7684\u533a\u57df\u5de5\u4f5c\uff0c\u6216\u8005\u60a8\u7684\u57fa\u51c6\u6d4b\u8bd5\u8868\u660e\u60a8\u82b1\u4e86\u592a\u591a\u65f6\u95f4\u6765\u590d\u5236\u51fd\u6570\u53c2\u6570\uff0c\u90a3\u4e48\u6309\u503c\u4f20\u9012\u53ef\u80fd\u662f\u4e00\u4e2a\u975e\u5e38\u6709\u7528\u7684\u5de5\u5177\u3002 \u4e25\u683c\u6765\u8bf4\uff0c\u7f16\u8bd1\u5668\u4e0d\u9700\u8981\u6267\u884cCopy elision\uff0c\u4f46\u662f\u5b83\u662f\u4e00\u9879\u529f\u80fd\u5f3a\u5927\u4e14\u81f3\u5173\u91cd\u8981\u7684\u4f18\u5316\uff0c\u56e0\u6b64\u60a8\u6781\u6709\u53ef\u80fd\u4f1a\u9047\u5230\u4e0d\u6267\u884c\u8be5\u64cd\u4f5c\u7684\u7f16\u8bd1\u5668\u3002","title":"When to Use Copy Elision"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-119/","text":"Tip of the Week #119: Using-declarations and namespace aliases Originally posted as totw/119 on 2016-07-14 By Thomas K\u00f6ppe (tkoeppe@google.com) \u672cTips\u4e3a\u5728 .cc \u6587\u4ef6\u4e2d\u7f16\u5199using\u58f0\u660e\u548c\u540d\u79f0\u7a7a\u95f4\u522b\u540d\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7b80\u5355\u800c\u6709\u6548\u7684\u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u907f\u514d\u4e86\u4e00\u4e9b\u7ec6\u5fae\u7684\u9677\u9631 \u6df1\u5165\u7814\u7a76\u7ec6\u8282\u4e4b\u524d\uff0c\u5148\u770b\u4e00\u4e0b\uff0c\u4e0b\u9762\u8fd9\u4e2a\u793a\u4f8b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 namespace example { namespace makers { namespace { using :: otherlib :: BazBuilder ; using :: mylib :: BarFactory ; namespace abc = :: applied :: bitfiddling :: concepts ; // Private helper code here. } // namespace // Interface implementation code here. } // namespace makers } // namespace example \u8bb0\u4f4f\uff0c\u8fd9\u4e2aTips\u6240\u8ba8\u8bba\u7684\u8303\u56f4\u4ec5\u4ec5\u5728\u662f .cc \u6587\u4ef6\u4e2d\uff0c\u56e0\u4e3a\u60a8\u7edd\u4e0d\u5e94\u8be5\u5728\u5934\u6587\u4ef6\u4e2d\u653e\u7f6e\u522b\u540d\uff0c\u8fd9\u6837\u7684\u522b\u540d\u4e3a\u5b9e\u73b0\u8005\uff08\u548c\u5b9e\u73b0\u7684\u8bfb\u8005\uff09\u63d0\u4f9b\u4e86\u4fbf\u5229\uff0c \u800c\u4e0d\u662f\u4e3a\u4e86\u66b4\u9732\u7ed9\u4f7f\u7528\u8005\u7684\u4fbf\u5229\u3002(\u5f53\u7136\uff0c\u53ef\u4ee5\u5728\u5934\u6587\u4ef6\u4e2d\u58f0\u660e\u5c5e\u4e8e\u5bfc\u51fa\u7684API\u7684\u540d\u79f0\u522b\u540d\u3002) Summary \u4e0d\u8981\u5728\u5934\u6587\u4ef6\u4e2d\u58f0\u660enamespace\u522b\u540d\u6216\u8005\u662f\u65b9\u4fbf\u4f7f\u7528\u7684using\u58f0\u660e\uff0c\u4ec5\u5728 .cc \u4e2d\u58f0\u660e \u5728\u5185\u90e8\u7684\u547d\u540d\u7a7a\u95f4\uff08\u65e0\u8bba\u662f\u547d\u540d\u7684\u8fd8\u662f\u533f\u540d\u7684\uff09\u4e2d\u58f0\u660e\u547d\u540d\u7a7a\u95f4\u522b\u540d\u548cusing\u58f0\u660e\u3002 \uff08\u8bf7\u52ff\u4ec5\u4e3a\u6b64\u76ee\u7684\u6dfb\u52a0\u533f\u540d\u7a7a\u95f4\u3002\uff09 \u58f0\u660enamespace\u7a7a\u95f4\u522b\u540d\u548cusing\u58f0\u660e\u65f6\uff0c\u9664\u975e\u60a8\u5728\u5f53\u524d\u540d\u79f0\u7a7a\u95f4\u4e2d\u5f15\u7528\u540d\u79f0\uff0c\u5426\u5219\u8bf7\u4f7f\u7528\u5b8c\u5168\u9650\u5b9a\u540d\u79f0\uff08\u5e26\u6709\u524d\u5bfc :: \uff09\u3002 \u6709\u5173\u540d\u79f0\u7684\u5176\u4ed6\u7528\u9014\uff0c\u8bf7\u5728\u5408\u7406\u7684\u60c5\u51b5\u4e0b\u907f\u514d\u5b8c\u5168\u9650\u5b9a\uff0c\u8bf7\u53c2\u9605 TotW 130 \u8bf7\u8bb0\u4f4f\uff0c\u60a8\u59cb\u7ec8\u53ef\u4ee5\u5728\u5757\u4f5c\u7528\u57df\u4e2d\u62e5\u6709\u672c\u5730namespace\u522b\u540d\u6216using\u58f0\u660e\uff0c\u8fd9\u5728\u4ec5\u6709\u5934\u6587\u4ef6\u7684\u5e93\u4e2d\u975e\u5e38\u65b9\u4fbf Background C++ \u5c06\u540d\u79f0\u7ec4\u7ec7\u5230\u540d\u79f0\u7a7a\u95f4\u4e2d\u3002\u8fd9\u79cd\u81f3\u5173\u91cd\u8981\u7684\u529f\u80fd\u5141\u8bb8\u901a\u8fc7\u5c06\u540d\u79f0\u6240\u6709\u6743\u4fdd\u6301\u5728\u672c\u5730\u6765\u6269\u5c55\u4ee3\u7801\u5e93\uff0c\u4ece\u800c\u907f\u514d\u5728\u5176\u4ed6\u8303\u56f4\u5185\u53d1\u751f\u540d\u79f0\u51b2\u7a81\u3002\u4f46\u662f\uff0c\u7531\u4e8e\u9650\u5b9a\u540d\u79f0( foo::bar )\u901a\u5e38\u5f88\u957f\u4e14\u5f88\u5feb\u53d8\u5f97\u6df7\u4e71\uff0c \u56e0\u6b64\u547d\u540d\u7a7a\u95f4\u4f1a\u5e26\u6765\u4e00\u5b9a\u7684\u5916\u89c2\u8d1f\u62c5\u3002\u6211\u4eec\u7ecf\u5e38\u53d1\u73b0\u4f7f\u7528\u975e\u9650\u5b9a\u540d\u79f0( Bar )\u5f88\u65b9\u4fbf\uff0c\u53e6\u5916\uff0c\u6211\u4eec\u53ef\u80fd\u5e0c\u671b\u4e3a\u4e00\u4e2a\u957f\u671f\u4f46\u7ecf\u5e38\u4f7f\u7528\u7684\u547d\u540d\u7a7a\u95f4\u5f15\u5165\u4e00\u4e2a\u547d\u540d\u7a7a\u95f4\u522b\u540d\uff1a namespace eu = example::v1::util \u3002 \u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u5c06\u7edf\u79f0\u4e3ausing\u58f0\u660e\u548cnamespace\u522b\u540d\u3002 The Problem \u547d\u540d\u7a7a\u95f4\u7684\u76ee\u7684\u662f\u5e2e\u52a9\u4ee3\u7801\u4f5c\u8005\u5728\u540d\u79f0\u67e5\u627e\u548c\u94fe\u63a5\u65f6\u907f\u514d\u540d\u79f0\u51b2\u7a81\u3002\u522b\u540d\u53ef\u80fd\u4f1a\u7834\u574f\u540d\u79f0\u7a7a\u95f4\u63d0\u4f9b\u7684\u4fdd\u62a4\u3002\u8fd9\u4e2a\u95ee\u9898\u6709\u4e24\u4e2a\u4e0d\u540c\u7684\u65b9\u9762\uff1a\u522b\u540d\u7684\u8303\u56f4\u548c\u76f8\u5bf9\u9650\u5b9a\u7b26\u7684\u4f7f\u7528\u3002 Scope of the Alias \u522b\u540d\u653e\u7f6e\u7684\u8303\u56f4\u53ef\u80fd\u4f1a\u5bf9\u4ee3\u7801\u7684\u53ef\u7ef4\u62a4\u6027\u4ea7\u751f\u5fae\u5999\u7684\u5f71\u54cd\u3002\u8003\u8651\u4ee5\u4e0b\u4e24\u4e2a\u53d8\u4f53\uff1a 1 2 3 4 5 6 using :: foo :: Quz ; namespace example { namespace util { using :: foo :: Bar ; \u4f7f\u7528using\u58f0\u660e\u4f7f\u5f97 Quz \u548c Bar \u53ef\u4ee5\u5f88\u597d\u7684\u5728\u6211\u4eec\u7684 ::example::util \u547d\u540d\u7a7a\u95f4\u4e2d\u5de5\u4f5c\uff0c\u907f\u514d\u4f7f\u7528\u5b8c\u5168\u9650\u5b9a\uff0c\u901a\u8fc7\u975e\u9650\u5b9a\u540d\u79f0\u67e5\u8be2 Bar \u548c Quz \u3002\u5bf9\u4e8e Bar \uff0c \u53ea\u8981\u547d\u540d\u7a7a\u95f4 ::example::util \u4e2d\u6ca1\u6709\u5176\u4ed6 Bar \u58f0\u660e\uff0c\u4e00\u5207\u90fd\u4f1a\u6309\u9884\u671f\u8fdb\u884c\u3002\u56e0\u4e3a\u8fd9\u662f\u60a8\u7684namespace\u7a7a\u95f4\uff0c\u56e0\u6b64\u4f60\u53ef\u4ee5\u63a7\u5236\u5b83\uff0c\u4e0d\u4f1a\u51fa\u73b0\u540d\u79f0\u51b2\u7a81\u3002 \u53e6\u4e00\u65b9\u9762\uff0c\u5982\u679c\u4ee5\u540e\u5305\u542b\u4e86\u4e00\u4e2a\u5934\u6587\u4ef6\uff0c\u5e76\u4e14\u8fd9\u4e2a\u5934\u6587\u4ef6\u4e5f\u58f0\u660e\u4e86\u4e00\u4e2a\u5168\u5c40\u7684\u540d\u79f0 Quz \uff0c\u90a3\u4e48\u8fd9\u4e2a Quz \u7684using\u58f0\u660e\u5c06\u4f1a\u53d8\u5f97\u4e0d\u6b63\u786e\u4e86\u3002\u56e0\u4e3a\u5b83\u8bd5\u56fe\u91cd\u65b0\u58f0\u660e\u540d\u79f0 Quz \u3002 \u5982\u679c\u53e6\u4e00\u4e2a\u5934\u6587\u4ef6\u4e2d\u58f0\u660e\u4e86 ::example::Quz \u6216 ::example::util::Quz \uff0c\u5219\u672a\u9650\u5b9a\u67e5\u627e\u5c06\u627e\u5230\u8fd9\u4e2a\u540d\u79f0\u800c\u4e0d\u662f\u60a8\u7684\u522b\u540d \u5982\u679c\u60a8\u4e0d\u5c06\u540d\u79f0\u6dfb\u52a0\u5230\u60a8\u4e0d\u62e5\u6709\u7684namespace\u7a7a\u95f4\uff08\u5305\u62ec\u5168\u5c40\u540d\u79f0\u7a7a\u95f4\uff09\u4e2d\uff0c\u5219\u53ef\u4ee5\u907f\u514d\u8fd9\u79cd\u8106\u5f31\u6027\u3002\u901a\u8fc7\u5c06\u522b\u540d\u653e\u7f6e\u5728\u60a8\u81ea\u5df1\u7684namespace\u7a7a\u95f4\u4e2d\uff0c\u672a\u9650\u5b9a\u7684\u67e5\u627e\u5c06\u9996\u5148\u67e5\u627e\u60a8\u7684\u522b\u540d\uff0c \u5e76\u4e14\u6c38\u8fdc\u4e0d\u4f1a\u7ee7\u7eed\u641c\u7d22\u5305\u542bnamespace\u7a7a\u95f4\u7684\u5185\u5bb9\u3002 \u901a\u5e38\uff0c\u58f0\u660e\u8d8a\u63a5\u8fd1\u4f7f\u7528\u70b9\uff0c\u5219\u53ef\u80fd\u7834\u574f\u4ee3\u7801\u7684\u8303\u56f4\u96c6\u8d8a\u5c0f\uff0c\u5728\u6211\u4eec\u4f8b\u5b50\u4e2d\u6700\u7cdf\u7cd5\u7684\u4e00\u4e2a\u662f Quz \uff0c\u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u6253\u7834\u5b83\u3002 Bar \u53ea\u80fd\u88ab ::example::util \u4e2d\u7684\u5176\u4ed6\u4ee3\u7801\u7834\u574f\uff0c \u5e76\u4e14\u5728\u672a\u547d\u540d\u7a7a\u95f4\u4e2d\u58f0\u660e\u548c\u4f7f\u7528\u7684\u540d\u79f0\u4e0d\u80fd\u88ab\u4efb\u4f55\u5176\u4ed6\u8303\u56f4\u7834\u574f\u3002\u6709\u5173\u793a\u4f8b\uff0c\u8bf7\u53c2 \u89c1Unnamed Namespaces \u3002 Relative Qualifiers \u4f7f\u7528 foo:: Bar\u7684\u5f62\u5f0f\u7684using\u58f0\u660e\u4f3c\u4e4e\u662f\u65e0\u5bb3\u7684\uff0c\u4f46\u5b9e\u9645\u4e0a\u662f\u6a21\u68f1\u4e24\u53ef\u7684\u3002\u95ee\u9898\u5728\u4e8e\uff0c\u4f9d\u9760namespace\u4e2d\u5df2\u7ecf\u5b58\u5728\u7684\u540d\u79f0\u662f\u5b89\u5168\u7684\uff0c\u4f46\u662f\u4f9d\u9760\u4e0d\u5b58\u5728\u7684\u540d\u79f0\u662f\u4e0d\u5b89\u5168\u7684\u3002\u8003\u8651\u4ee5\u4e0b\u4ee3\u7801: 1 2 3 4 namespace example { namespace util { using foo :: Bar ; \u4e0a\u9762\u7684\u4ee3\u7801\u4f9d\u8d56\u4e8e ::foo::Bar \u7684\u5b58\u5728\u6216\u8005\u662f\u4e0d\u5b58\u5728\u540d\u79f0\u7a7a\u95f4 ::example::foo \u548c ::example::util::foo \uff0c\u53ef\u4ee5\u901a\u8fc7\u5b8c\u5168\u9650\u5b9a\u6240\u4f7f\u7528\u7684\u540d\u79f0\u6765\u907f\u514d\u8fd9\u79cd\u8106\u5f31\u6027\uff1a\u4f7f\u7528 ::foo::Bar \u3002 \u76f8\u5bf9\u540d\u79f0\u552f\u4e00\u4e14\u4e0d\u80fd\u88ab\u5916\u90e8\u58f0\u660e\u7834\u574f\u7684\u552f\u4e00\u6761\u4ef6\u662f\u5b83\u662f\u5426\u5f15\u7528\u4e86\u5f53\u524dnamespace\u4e2d\u5df2\u7ecf\u5b58\u5728\u7684\u540d\u79f0\uff1a 1 2 3 4 5 6 7 8 9 namespace example { namespace util { namespace internal { struct Params { /* ... */ }; } // namespace internal using internal :: Params ; // OK, same as ::example::util::internal::Params \u4e0b\u9762\u9075\u5faa\u4e86\u4e0a\u4e00\u8282\u4e2d\u8ba8\u8bba\u7684\u76f8\u540c\u903b\u8f91 \u5982\u679c\u540d\u79f0\u4f4d\u4e8e\u540c\u7ea7\u547d\u540d\u7a7a\u95f4\u4e2d\uff0c\u4f8b\u5982 ::example::tools::Thing \uff0c\u8be5\u600e\u4e48\u529e\uff1f\u60a8\u53ef\u4ee5\u8bf4 tools::Thing \u6216 ::example::tools::Thing \u3002\u5b8c\u5168\u9650\u5b9a\u7684\u540d\u79f0\u59cb\u7ec8\u662f\u6b63\u786e\u7684\uff0c\u4f46\u4f7f\u7528\u76f8\u5bf9\u540d\u79f0\u4e5f\u53ef\u80fd\u662f\u9002\u5f53\u7684\u3002\u81ea\u5df1\u6765\u5224\u65ad\u3002 \u907f\u514d\u8bb8\u591a\u6b64\u7c7b\u95ee\u9898\u7684\u5ec9\u4ef7\u65b9\u6cd5\u662f\u4e0d\u5728\u9879\u76ee\u4e2d\u4f7f\u7528\u4e0e\u6d41\u884c\u7684\u9876\u7ea7namespace\u7a7a\u95f4\uff08\u4f8b\u5982util\uff09\u76f8\u540c\u7684namespace\u7a7a\u95f4\uff1b \u6837\u5f0f\u6307\u5357 \u660e\u786e\u5efa\u8bae\u8fd9\u79cd\u505a\u6cd5\u3002 Demo \u4ee5\u4e0b\u4ee3\u7801\u663e\u793a\u4e86\u4e24\u79cd\u9519\u8bef\u6a21\u5f0f\u7684\u793a\u4f8b\u3002 helper.h: 1 2 3 4 5 6 7 namespace bar { namespace foo { // ... } // namespace foo } // namespace bar some_feature.h: 1 extern int f ; Your code: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #include \"helper.h\" #include \"some_feature.h\" namespace foo { void f (); } // namespace foo // Failure mode #1: Alias at a bad scope. using foo :: f ; // Error: redeclaration (because of \"f\" declared in some_feature.h) namespace bar { // Failure mode #2: Alias badly qualified. using foo :: f ; // Error: No \"f\" in namespace ::bar::foo (because that namespace was declared in helper.h) // The recommended way, robust in the face of unrelated declarations: using :: foo :: f ; // OK void UseCase () { f (); } } // namespace bar Unnamed Namespaces \u53ef\u4ee5\u4ece\u5c01\u95ed\u7684namespace\u4e2d\u8bbf\u95ee\u653e\u7f6e\u5728unamed namespace\u4e2d\u7684using\u58f0\u660e\uff0c\u53cd\u4e4b\u4ea6\u7136\u3002\u5982\u679c\u6587\u4ef6\u9876\u90e8\u5df2\u7ecf\u6709\u4e00\u4e2aunamed namespace\uff0c \u5219\u6700\u597d\u5728\u5176\u4e2d\u653e\u7f6e\u6240\u6709\u522b\u540d\u3002\u4ece\u8be5unamed namespace\u4e2d\uff0c\u60a8\u53ef\u4ee5\u83b7\u5f97\u989d\u5916\u7684\u5065\u58ee\u6027\uff0c\u53ef\u4ee5\u907f\u514d\u4e0e\u5c01\u95ed\u7684namespace\u4e2d\u58f0\u660e\u7684\u5185\u5bb9\u53d1\u751f\u51b2\u7a81\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 namespace example { namespace util { namespace { // Put all using-declarations in here. Don't spread them over the file. using :: foo :: Bar ; using :: foo :: Quz ; // In here, Bar and Quz refer inalienably to your aliases. } // namespace // Can use both Bar and Quz here too. (But don't declare any entities called Bar or Quz yourself now.) Non-aliased names \u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u4e00\u76f4\u5728\u8c08\u8bba\u5bf9\u975e\u5f53\u524d\u6587\u4ef6\u7684namespace\u8fdb\u884c\u522b\u540d\u3002\u4f46\u662f\uff0c\u5982\u679c\u6211\u4eec\u60f3\u76f4\u63a5\u4f7f\u7528\u540d\u79f0\u800c\u4e0d\u662f\u521b\u5efa\u522b\u540d\u600e\u4e48\u529e\uff1f\u6211\u4eec\u5e94\u8be5\u8bf4 util::Status \u8fd8\u662f ::util::Status \uff1f \u6ca1\u6709\u660e\u663e\u7684\u7b54\u6848\u3002\u4e0d\u540c\u4e8e\u6211\u4eec\u5230\u76ee\u524d\u4e3a\u6b62\u8ba8\u8bba\u8fc7\u7684\u522b\u540d\u58f0\u660e\uff0c\u5b83\u4eec\u51fa\u73b0\u5728\u6587\u4ef6\u7684\u9876\u90e8\uff0c\u4e0e\u5b9e\u9645\u4ee3\u7801\u76f8\u8ddd\u751a\u8fdc\uff0c\u800c\u540d\u79f0\u7684\u76f4\u63a5\u4f7f\u7528\u4f1a\u5f71\u54cd\u4ee3\u7801\u7684\u672c\u5730\u53ef\u8bfb\u6027\u3002\u786e\u5b9e\uff0c\u76f8\u5bf9\u540d\u79f0\u5c06\u6765\u53ef\u80fd\u4f1a\u53d6\u6d88\uff0c \u4f46\u662f\u4f7f\u7528\u5b8c\u5168\u9650\u5b9a\u7684\u540d\u79f0\u4ee3\u4ef7\u5f88\u9ad8\u3002\u524d\u5bfc :: \u7b26\u53f7\u5f15\u8d77\u7684\u89c6\u89c9\u6df7\u4e71\u53ef\u80fd\u4f1a\u5206\u6563\u6ce8\u610f\u529b\uff0c\u4e0d\u503c\u5f97\u589e\u52a0\u9c81\u68d2\u6027\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8bf7\u6839\u636e\u81ea\u5df1\u7684\u5224\u65ad\u6765\u51b3\u5b9a\u60a8\u559c\u6b22\u54ea\u79cd\u6837\u5f0f\u3002\u53c2\u89c1 TotW 130 Acknowledgments \u4e00\u5207\u5f52\u529f\u4e8eRoman Perepelitsa\uff08romanp@google.com\uff09\uff0c\u4ed6\u6700\u521d\u5728\u90ae\u4ef6\u5217\u8868\u8ba8\u8bba\u4e2d\u63d0\u51fa\u4e86\u8fd9\u79cd\u98ce\u683c\uff0c\u5e76\u505a\u51fa\u4e86\u8bb8\u591a\u66f4\u6b63\u548c\u5f3a\u8c03\u3002\u4f46\u662f\uff0c\u6240\u6709\u9519\u8bef\u90fd\u662f\u6211\u7684\u3002","title":"Tip of the Week #119: Using-declarations and namespace aliases"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-119/#tip-of-the-week-119-using-declarations-and-namespace-aliases","text":"Originally posted as totw/119 on 2016-07-14 By Thomas K\u00f6ppe (tkoeppe@google.com) \u672cTips\u4e3a\u5728 .cc \u6587\u4ef6\u4e2d\u7f16\u5199using\u58f0\u660e\u548c\u540d\u79f0\u7a7a\u95f4\u522b\u540d\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7b80\u5355\u800c\u6709\u6548\u7684\u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u907f\u514d\u4e86\u4e00\u4e9b\u7ec6\u5fae\u7684\u9677\u9631 \u6df1\u5165\u7814\u7a76\u7ec6\u8282\u4e4b\u524d\uff0c\u5148\u770b\u4e00\u4e0b\uff0c\u4e0b\u9762\u8fd9\u4e2a\u793a\u4f8b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 namespace example { namespace makers { namespace { using :: otherlib :: BazBuilder ; using :: mylib :: BarFactory ; namespace abc = :: applied :: bitfiddling :: concepts ; // Private helper code here. } // namespace // Interface implementation code here. } // namespace makers } // namespace example \u8bb0\u4f4f\uff0c\u8fd9\u4e2aTips\u6240\u8ba8\u8bba\u7684\u8303\u56f4\u4ec5\u4ec5\u5728\u662f .cc \u6587\u4ef6\u4e2d\uff0c\u56e0\u4e3a\u60a8\u7edd\u4e0d\u5e94\u8be5\u5728\u5934\u6587\u4ef6\u4e2d\u653e\u7f6e\u522b\u540d\uff0c\u8fd9\u6837\u7684\u522b\u540d\u4e3a\u5b9e\u73b0\u8005\uff08\u548c\u5b9e\u73b0\u7684\u8bfb\u8005\uff09\u63d0\u4f9b\u4e86\u4fbf\u5229\uff0c \u800c\u4e0d\u662f\u4e3a\u4e86\u66b4\u9732\u7ed9\u4f7f\u7528\u8005\u7684\u4fbf\u5229\u3002(\u5f53\u7136\uff0c\u53ef\u4ee5\u5728\u5934\u6587\u4ef6\u4e2d\u58f0\u660e\u5c5e\u4e8e\u5bfc\u51fa\u7684API\u7684\u540d\u79f0\u522b\u540d\u3002)","title":"Tip of the Week #119: Using-declarations and namespace aliases"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-119/#summary","text":"\u4e0d\u8981\u5728\u5934\u6587\u4ef6\u4e2d\u58f0\u660enamespace\u522b\u540d\u6216\u8005\u662f\u65b9\u4fbf\u4f7f\u7528\u7684using\u58f0\u660e\uff0c\u4ec5\u5728 .cc \u4e2d\u58f0\u660e \u5728\u5185\u90e8\u7684\u547d\u540d\u7a7a\u95f4\uff08\u65e0\u8bba\u662f\u547d\u540d\u7684\u8fd8\u662f\u533f\u540d\u7684\uff09\u4e2d\u58f0\u660e\u547d\u540d\u7a7a\u95f4\u522b\u540d\u548cusing\u58f0\u660e\u3002 \uff08\u8bf7\u52ff\u4ec5\u4e3a\u6b64\u76ee\u7684\u6dfb\u52a0\u533f\u540d\u7a7a\u95f4\u3002\uff09 \u58f0\u660enamespace\u7a7a\u95f4\u522b\u540d\u548cusing\u58f0\u660e\u65f6\uff0c\u9664\u975e\u60a8\u5728\u5f53\u524d\u540d\u79f0\u7a7a\u95f4\u4e2d\u5f15\u7528\u540d\u79f0\uff0c\u5426\u5219\u8bf7\u4f7f\u7528\u5b8c\u5168\u9650\u5b9a\u540d\u79f0\uff08\u5e26\u6709\u524d\u5bfc :: \uff09\u3002 \u6709\u5173\u540d\u79f0\u7684\u5176\u4ed6\u7528\u9014\uff0c\u8bf7\u5728\u5408\u7406\u7684\u60c5\u51b5\u4e0b\u907f\u514d\u5b8c\u5168\u9650\u5b9a\uff0c\u8bf7\u53c2\u9605 TotW 130 \u8bf7\u8bb0\u4f4f\uff0c\u60a8\u59cb\u7ec8\u53ef\u4ee5\u5728\u5757\u4f5c\u7528\u57df\u4e2d\u62e5\u6709\u672c\u5730namespace\u522b\u540d\u6216using\u58f0\u660e\uff0c\u8fd9\u5728\u4ec5\u6709\u5934\u6587\u4ef6\u7684\u5e93\u4e2d\u975e\u5e38\u65b9\u4fbf","title":"Summary"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-119/#background","text":"C++ \u5c06\u540d\u79f0\u7ec4\u7ec7\u5230\u540d\u79f0\u7a7a\u95f4\u4e2d\u3002\u8fd9\u79cd\u81f3\u5173\u91cd\u8981\u7684\u529f\u80fd\u5141\u8bb8\u901a\u8fc7\u5c06\u540d\u79f0\u6240\u6709\u6743\u4fdd\u6301\u5728\u672c\u5730\u6765\u6269\u5c55\u4ee3\u7801\u5e93\uff0c\u4ece\u800c\u907f\u514d\u5728\u5176\u4ed6\u8303\u56f4\u5185\u53d1\u751f\u540d\u79f0\u51b2\u7a81\u3002\u4f46\u662f\uff0c\u7531\u4e8e\u9650\u5b9a\u540d\u79f0( foo::bar )\u901a\u5e38\u5f88\u957f\u4e14\u5f88\u5feb\u53d8\u5f97\u6df7\u4e71\uff0c \u56e0\u6b64\u547d\u540d\u7a7a\u95f4\u4f1a\u5e26\u6765\u4e00\u5b9a\u7684\u5916\u89c2\u8d1f\u62c5\u3002\u6211\u4eec\u7ecf\u5e38\u53d1\u73b0\u4f7f\u7528\u975e\u9650\u5b9a\u540d\u79f0( Bar )\u5f88\u65b9\u4fbf\uff0c\u53e6\u5916\uff0c\u6211\u4eec\u53ef\u80fd\u5e0c\u671b\u4e3a\u4e00\u4e2a\u957f\u671f\u4f46\u7ecf\u5e38\u4f7f\u7528\u7684\u547d\u540d\u7a7a\u95f4\u5f15\u5165\u4e00\u4e2a\u547d\u540d\u7a7a\u95f4\u522b\u540d\uff1a namespace eu = example::v1::util \u3002 \u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u5c06\u7edf\u79f0\u4e3ausing\u58f0\u660e\u548cnamespace\u522b\u540d\u3002","title":"Background"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-119/#the-problem","text":"\u547d\u540d\u7a7a\u95f4\u7684\u76ee\u7684\u662f\u5e2e\u52a9\u4ee3\u7801\u4f5c\u8005\u5728\u540d\u79f0\u67e5\u627e\u548c\u94fe\u63a5\u65f6\u907f\u514d\u540d\u79f0\u51b2\u7a81\u3002\u522b\u540d\u53ef\u80fd\u4f1a\u7834\u574f\u540d\u79f0\u7a7a\u95f4\u63d0\u4f9b\u7684\u4fdd\u62a4\u3002\u8fd9\u4e2a\u95ee\u9898\u6709\u4e24\u4e2a\u4e0d\u540c\u7684\u65b9\u9762\uff1a\u522b\u540d\u7684\u8303\u56f4\u548c\u76f8\u5bf9\u9650\u5b9a\u7b26\u7684\u4f7f\u7528\u3002","title":"The Problem"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-119/#scope-of-the-alias","text":"\u522b\u540d\u653e\u7f6e\u7684\u8303\u56f4\u53ef\u80fd\u4f1a\u5bf9\u4ee3\u7801\u7684\u53ef\u7ef4\u62a4\u6027\u4ea7\u751f\u5fae\u5999\u7684\u5f71\u54cd\u3002\u8003\u8651\u4ee5\u4e0b\u4e24\u4e2a\u53d8\u4f53\uff1a 1 2 3 4 5 6 using :: foo :: Quz ; namespace example { namespace util { using :: foo :: Bar ; \u4f7f\u7528using\u58f0\u660e\u4f7f\u5f97 Quz \u548c Bar \u53ef\u4ee5\u5f88\u597d\u7684\u5728\u6211\u4eec\u7684 ::example::util \u547d\u540d\u7a7a\u95f4\u4e2d\u5de5\u4f5c\uff0c\u907f\u514d\u4f7f\u7528\u5b8c\u5168\u9650\u5b9a\uff0c\u901a\u8fc7\u975e\u9650\u5b9a\u540d\u79f0\u67e5\u8be2 Bar \u548c Quz \u3002\u5bf9\u4e8e Bar \uff0c \u53ea\u8981\u547d\u540d\u7a7a\u95f4 ::example::util \u4e2d\u6ca1\u6709\u5176\u4ed6 Bar \u58f0\u660e\uff0c\u4e00\u5207\u90fd\u4f1a\u6309\u9884\u671f\u8fdb\u884c\u3002\u56e0\u4e3a\u8fd9\u662f\u60a8\u7684namespace\u7a7a\u95f4\uff0c\u56e0\u6b64\u4f60\u53ef\u4ee5\u63a7\u5236\u5b83\uff0c\u4e0d\u4f1a\u51fa\u73b0\u540d\u79f0\u51b2\u7a81\u3002 \u53e6\u4e00\u65b9\u9762\uff0c\u5982\u679c\u4ee5\u540e\u5305\u542b\u4e86\u4e00\u4e2a\u5934\u6587\u4ef6\uff0c\u5e76\u4e14\u8fd9\u4e2a\u5934\u6587\u4ef6\u4e5f\u58f0\u660e\u4e86\u4e00\u4e2a\u5168\u5c40\u7684\u540d\u79f0 Quz \uff0c\u90a3\u4e48\u8fd9\u4e2a Quz \u7684using\u58f0\u660e\u5c06\u4f1a\u53d8\u5f97\u4e0d\u6b63\u786e\u4e86\u3002\u56e0\u4e3a\u5b83\u8bd5\u56fe\u91cd\u65b0\u58f0\u660e\u540d\u79f0 Quz \u3002 \u5982\u679c\u53e6\u4e00\u4e2a\u5934\u6587\u4ef6\u4e2d\u58f0\u660e\u4e86 ::example::Quz \u6216 ::example::util::Quz \uff0c\u5219\u672a\u9650\u5b9a\u67e5\u627e\u5c06\u627e\u5230\u8fd9\u4e2a\u540d\u79f0\u800c\u4e0d\u662f\u60a8\u7684\u522b\u540d \u5982\u679c\u60a8\u4e0d\u5c06\u540d\u79f0\u6dfb\u52a0\u5230\u60a8\u4e0d\u62e5\u6709\u7684namespace\u7a7a\u95f4\uff08\u5305\u62ec\u5168\u5c40\u540d\u79f0\u7a7a\u95f4\uff09\u4e2d\uff0c\u5219\u53ef\u4ee5\u907f\u514d\u8fd9\u79cd\u8106\u5f31\u6027\u3002\u901a\u8fc7\u5c06\u522b\u540d\u653e\u7f6e\u5728\u60a8\u81ea\u5df1\u7684namespace\u7a7a\u95f4\u4e2d\uff0c\u672a\u9650\u5b9a\u7684\u67e5\u627e\u5c06\u9996\u5148\u67e5\u627e\u60a8\u7684\u522b\u540d\uff0c \u5e76\u4e14\u6c38\u8fdc\u4e0d\u4f1a\u7ee7\u7eed\u641c\u7d22\u5305\u542bnamespace\u7a7a\u95f4\u7684\u5185\u5bb9\u3002 \u901a\u5e38\uff0c\u58f0\u660e\u8d8a\u63a5\u8fd1\u4f7f\u7528\u70b9\uff0c\u5219\u53ef\u80fd\u7834\u574f\u4ee3\u7801\u7684\u8303\u56f4\u96c6\u8d8a\u5c0f\uff0c\u5728\u6211\u4eec\u4f8b\u5b50\u4e2d\u6700\u7cdf\u7cd5\u7684\u4e00\u4e2a\u662f Quz \uff0c\u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u6253\u7834\u5b83\u3002 Bar \u53ea\u80fd\u88ab ::example::util \u4e2d\u7684\u5176\u4ed6\u4ee3\u7801\u7834\u574f\uff0c \u5e76\u4e14\u5728\u672a\u547d\u540d\u7a7a\u95f4\u4e2d\u58f0\u660e\u548c\u4f7f\u7528\u7684\u540d\u79f0\u4e0d\u80fd\u88ab\u4efb\u4f55\u5176\u4ed6\u8303\u56f4\u7834\u574f\u3002\u6709\u5173\u793a\u4f8b\uff0c\u8bf7\u53c2 \u89c1Unnamed Namespaces \u3002","title":"Scope of the Alias"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-119/#relative-qualifiers","text":"\u4f7f\u7528 foo:: Bar\u7684\u5f62\u5f0f\u7684using\u58f0\u660e\u4f3c\u4e4e\u662f\u65e0\u5bb3\u7684\uff0c\u4f46\u5b9e\u9645\u4e0a\u662f\u6a21\u68f1\u4e24\u53ef\u7684\u3002\u95ee\u9898\u5728\u4e8e\uff0c\u4f9d\u9760namespace\u4e2d\u5df2\u7ecf\u5b58\u5728\u7684\u540d\u79f0\u662f\u5b89\u5168\u7684\uff0c\u4f46\u662f\u4f9d\u9760\u4e0d\u5b58\u5728\u7684\u540d\u79f0\u662f\u4e0d\u5b89\u5168\u7684\u3002\u8003\u8651\u4ee5\u4e0b\u4ee3\u7801: 1 2 3 4 namespace example { namespace util { using foo :: Bar ; \u4e0a\u9762\u7684\u4ee3\u7801\u4f9d\u8d56\u4e8e ::foo::Bar \u7684\u5b58\u5728\u6216\u8005\u662f\u4e0d\u5b58\u5728\u540d\u79f0\u7a7a\u95f4 ::example::foo \u548c ::example::util::foo \uff0c\u53ef\u4ee5\u901a\u8fc7\u5b8c\u5168\u9650\u5b9a\u6240\u4f7f\u7528\u7684\u540d\u79f0\u6765\u907f\u514d\u8fd9\u79cd\u8106\u5f31\u6027\uff1a\u4f7f\u7528 ::foo::Bar \u3002 \u76f8\u5bf9\u540d\u79f0\u552f\u4e00\u4e14\u4e0d\u80fd\u88ab\u5916\u90e8\u58f0\u660e\u7834\u574f\u7684\u552f\u4e00\u6761\u4ef6\u662f\u5b83\u662f\u5426\u5f15\u7528\u4e86\u5f53\u524dnamespace\u4e2d\u5df2\u7ecf\u5b58\u5728\u7684\u540d\u79f0\uff1a 1 2 3 4 5 6 7 8 9 namespace example { namespace util { namespace internal { struct Params { /* ... */ }; } // namespace internal using internal :: Params ; // OK, same as ::example::util::internal::Params \u4e0b\u9762\u9075\u5faa\u4e86\u4e0a\u4e00\u8282\u4e2d\u8ba8\u8bba\u7684\u76f8\u540c\u903b\u8f91 \u5982\u679c\u540d\u79f0\u4f4d\u4e8e\u540c\u7ea7\u547d\u540d\u7a7a\u95f4\u4e2d\uff0c\u4f8b\u5982 ::example::tools::Thing \uff0c\u8be5\u600e\u4e48\u529e\uff1f\u60a8\u53ef\u4ee5\u8bf4 tools::Thing \u6216 ::example::tools::Thing \u3002\u5b8c\u5168\u9650\u5b9a\u7684\u540d\u79f0\u59cb\u7ec8\u662f\u6b63\u786e\u7684\uff0c\u4f46\u4f7f\u7528\u76f8\u5bf9\u540d\u79f0\u4e5f\u53ef\u80fd\u662f\u9002\u5f53\u7684\u3002\u81ea\u5df1\u6765\u5224\u65ad\u3002 \u907f\u514d\u8bb8\u591a\u6b64\u7c7b\u95ee\u9898\u7684\u5ec9\u4ef7\u65b9\u6cd5\u662f\u4e0d\u5728\u9879\u76ee\u4e2d\u4f7f\u7528\u4e0e\u6d41\u884c\u7684\u9876\u7ea7namespace\u7a7a\u95f4\uff08\u4f8b\u5982util\uff09\u76f8\u540c\u7684namespace\u7a7a\u95f4\uff1b \u6837\u5f0f\u6307\u5357 \u660e\u786e\u5efa\u8bae\u8fd9\u79cd\u505a\u6cd5\u3002","title":"Relative Qualifiers"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-119/#demo","text":"\u4ee5\u4e0b\u4ee3\u7801\u663e\u793a\u4e86\u4e24\u79cd\u9519\u8bef\u6a21\u5f0f\u7684\u793a\u4f8b\u3002 helper.h: 1 2 3 4 5 6 7 namespace bar { namespace foo { // ... } // namespace foo } // namespace bar some_feature.h: 1 extern int f ; Your code: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #include \"helper.h\" #include \"some_feature.h\" namespace foo { void f (); } // namespace foo // Failure mode #1: Alias at a bad scope. using foo :: f ; // Error: redeclaration (because of \"f\" declared in some_feature.h) namespace bar { // Failure mode #2: Alias badly qualified. using foo :: f ; // Error: No \"f\" in namespace ::bar::foo (because that namespace was declared in helper.h) // The recommended way, robust in the face of unrelated declarations: using :: foo :: f ; // OK void UseCase () { f (); } } // namespace bar","title":"Demo"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-119/#unnamed-namespaces","text":"\u53ef\u4ee5\u4ece\u5c01\u95ed\u7684namespace\u4e2d\u8bbf\u95ee\u653e\u7f6e\u5728unamed namespace\u4e2d\u7684using\u58f0\u660e\uff0c\u53cd\u4e4b\u4ea6\u7136\u3002\u5982\u679c\u6587\u4ef6\u9876\u90e8\u5df2\u7ecf\u6709\u4e00\u4e2aunamed namespace\uff0c \u5219\u6700\u597d\u5728\u5176\u4e2d\u653e\u7f6e\u6240\u6709\u522b\u540d\u3002\u4ece\u8be5unamed namespace\u4e2d\uff0c\u60a8\u53ef\u4ee5\u83b7\u5f97\u989d\u5916\u7684\u5065\u58ee\u6027\uff0c\u53ef\u4ee5\u907f\u514d\u4e0e\u5c01\u95ed\u7684namespace\u4e2d\u58f0\u660e\u7684\u5185\u5bb9\u53d1\u751f\u51b2\u7a81\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 namespace example { namespace util { namespace { // Put all using-declarations in here. Don't spread them over the file. using :: foo :: Bar ; using :: foo :: Quz ; // In here, Bar and Quz refer inalienably to your aliases. } // namespace // Can use both Bar and Quz here too. (But don't declare any entities called Bar or Quz yourself now.)","title":"Unnamed Namespaces"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-119/#non-aliased-names","text":"\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u4e00\u76f4\u5728\u8c08\u8bba\u5bf9\u975e\u5f53\u524d\u6587\u4ef6\u7684namespace\u8fdb\u884c\u522b\u540d\u3002\u4f46\u662f\uff0c\u5982\u679c\u6211\u4eec\u60f3\u76f4\u63a5\u4f7f\u7528\u540d\u79f0\u800c\u4e0d\u662f\u521b\u5efa\u522b\u540d\u600e\u4e48\u529e\uff1f\u6211\u4eec\u5e94\u8be5\u8bf4 util::Status \u8fd8\u662f ::util::Status \uff1f \u6ca1\u6709\u660e\u663e\u7684\u7b54\u6848\u3002\u4e0d\u540c\u4e8e\u6211\u4eec\u5230\u76ee\u524d\u4e3a\u6b62\u8ba8\u8bba\u8fc7\u7684\u522b\u540d\u58f0\u660e\uff0c\u5b83\u4eec\u51fa\u73b0\u5728\u6587\u4ef6\u7684\u9876\u90e8\uff0c\u4e0e\u5b9e\u9645\u4ee3\u7801\u76f8\u8ddd\u751a\u8fdc\uff0c\u800c\u540d\u79f0\u7684\u76f4\u63a5\u4f7f\u7528\u4f1a\u5f71\u54cd\u4ee3\u7801\u7684\u672c\u5730\u53ef\u8bfb\u6027\u3002\u786e\u5b9e\uff0c\u76f8\u5bf9\u540d\u79f0\u5c06\u6765\u53ef\u80fd\u4f1a\u53d6\u6d88\uff0c \u4f46\u662f\u4f7f\u7528\u5b8c\u5168\u9650\u5b9a\u7684\u540d\u79f0\u4ee3\u4ef7\u5f88\u9ad8\u3002\u524d\u5bfc :: \u7b26\u53f7\u5f15\u8d77\u7684\u89c6\u89c9\u6df7\u4e71\u53ef\u80fd\u4f1a\u5206\u6563\u6ce8\u610f\u529b\uff0c\u4e0d\u503c\u5f97\u589e\u52a0\u9c81\u68d2\u6027\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8bf7\u6839\u636e\u81ea\u5df1\u7684\u5224\u65ad\u6765\u51b3\u5b9a\u60a8\u559c\u6b22\u54ea\u79cd\u6837\u5f0f\u3002\u53c2\u89c1 TotW 130","title":"Non-aliased names"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-119/#acknowledgments","text":"\u4e00\u5207\u5f52\u529f\u4e8eRoman Perepelitsa\uff08romanp@google.com\uff09\uff0c\u4ed6\u6700\u521d\u5728\u90ae\u4ef6\u5217\u8868\u8ba8\u8bba\u4e2d\u63d0\u51fa\u4e86\u8fd9\u79cd\u98ce\u683c\uff0c\u5e76\u505a\u51fa\u4e86\u8bb8\u591a\u66f4\u6b63\u548c\u5f3a\u8c03\u3002\u4f46\u662f\uff0c\u6240\u6709\u9519\u8bef\u90fd\u662f\u6211\u7684\u3002","title":"Acknowledgments"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-120/","text":"Tip of the Week #120: Return Values are Untouchable Originally posted as TotW #120 on August 16, 2012 by Samuel Benzaquen, (sbenza@google.com) \u8ba9\u6211\u4eec\u5047\u8bbe\u4f60\u6709\u4e0b\u9762\u8fd9\u4e2a\u4ee3\u7801\u7247\u6bb5\uff0c\u5b83\u4f9d\u9760RAII\u6765\u6e05\u7406\u8d44\u6e90\uff0c\u770b\u8d77\u6765\u4f3c\u4e4e\u4e00\u5207\u90fd\u7b26\u5408\u9884\u671f 1 2 3 4 5 6 7 8 9 10 11 12 13 MyStatus DoSomething () { MyStatus status ; auto log_on_error = RunWhenOutOfScope ([ & status ] { if ( ! status . ok ()) LOG ( ERROR ) << status ; }); status = DoA (); if ( ! status . ok ()) return status ; status = DoB (); if ( ! status . ok ()) return status ; status = DoC (); if ( ! status . ok ()) return status ; return status ; } \u5bf9\u4e0a\u9762\u7684\u4ee3\u7801\u7b80\u5355\u91cd\u6784\u4e0b\uff0c\u5c06\u6700\u540e\u4e00\u884c\u6539\u6210 return MyStatus() \uff0c\u7136\u540e\u4ee3\u7801\u5f00\u59cb\u505c\u6b62\u8f93\u51fa\u9519\u8bef\u65e5\u5fd7\u3002 \u5230\u5e95\u600e\u4e48\u56de\u4e8b? Summary return\u8bed\u53e5\u8fd0\u884c\u540e\uff0c\u5207\u52ff\u8bbf\u95ee\uff08\u8bfb\u6216\u5199\uff09\u51fd\u6570\u7684\u8fd4\u56de\u53d8\u91cf\uff0c\u9664\u975e\u60a8\u975e\u5e38\u5c0f\u5fc3\u5730\u6b63\u786e\u6267\u884c\u6b64\u64cd\u4f5c\uff0c\u5426\u5219\u884c\u4e3a\u662f\u4e0d\u786e\u5b9a\u7684\u3002 \u8fd4\u56de\u53d8\u91cf\u5728\u590d\u5236\u6216\u79fb\u52a8\u540e\u88ab\u6790\u6784\u51fd\u6570\u9690\u5f0f\u8bbf\u95ee\uff08\u8bf7\u53c2\u89c1C ++ 11\u6807\u51c6[stmt.return]\u7b2c6.6.3\u8282\uff09\uff0c\u8fd9\u662f\u8fd9\u79cd\u610f\u5916\u8bbf\u95ee\u7684\u53d1\u751f\u65b9\u5f0f\uff0c\u4f46\u590d\u5236/\u79fb\u52a8\u53ef\u80fd\u88ab\u5ffd\u7565\u3002 \u8fd9\u5c31\u662f\u884c\u4e3a\u672a\u5b9a\u4e49\u7684\u539f\u56e0\u3002 \u672cTips\u4ec5\u5728\u8fd4\u56de\u975e\u5f15\u7528\u5c40\u90e8\u53d8\u91cf\u65f6\u9002\u7528\u3002\u8fd4\u56de\u4efb\u4f55\u5176\u4ed6\u8868\u8fbe\u5f0f\u90fd\u4e0d\u4f1a\u89e6\u53d1\u6b64\u95ee\u9898\u3002 The Problem \u5bf9\u4e8ereturn\u8bed\u53e5\uff0c\u6709\u4e24\u79cd\u4e0d\u540c\u7684\u4f18\u5316\u53ef\u4ee5\u4fee\u6539\u6211\u4eec\u539f\u59cb\u4ee3\u7801\u6bb5\u7684\u884c\u4e3a\uff1aNRVO\uff08\u8bf7\u53c2\u89c1 TotW#11 \uff09\u548c\u9690\u5f0f\u79fb\u52a8\u3002 \u4e4b\u524d\u7684\u4ee3\u7801\u8d77\u4f5c\u7528\u4e86\uff0c\u56e0\u4e3a\u6b63\u5728\u8fdb\u884ccopy elision\uff0c\u5e76\u4e14return\u8bed\u53e5\u5b9e\u9645\u4e0a\u6ca1\u6709\u505a\u4efb\u4f55\u5de5\u4f5c\uff0c\u53d8\u91cfstatus\u5df2\u7ecf\u5728\u8fd4\u56de\u5730\u5740\u4e2d\u6784\u9020\uff0c\u5e76\u4e14\u6e05\u9664\u5bf9\u8c61\u5728return\u8bed\u53e5\u4e4b\u540e\u770b\u5230MyStatus\u5bf9\u8c61\u7684\u552f\u4e00\u5b9e\u4f8b\u5c31\u662fstatus\u3002 \u5728\u4e4b\u540e\u7684\u4ee3\u7801\u4e2d\uff0c\u672a\u4f7f\u7528copy elision\uff0c\u5e76\u4e14\u5c06\u8fd4\u56de\u7684\u53d8\u91cfmove\u5230\u8fd4\u56de\u503c\u4e2d\u3002 RunWhenOutOfScope() \u5728\u5b8c\u6210\u79fb\u52a8\u64cd\u4f5c\u540e\u8fd0\u884c\uff0c\u5e76\u4e14\u770b\u5230\u4eceMyStatus\u5bf9\u8c61\u79fb\u6765\u7684\u5bf9\u8c61\u3002 \u8bf7\u6ce8\u610f\uff0c\u4e4b\u524d\u7684\u4ee3\u7801\u4e5f\u4e0d\u6b63\u786e\uff0c\u56e0\u4e3a\u5b83\u4f9d\u8d56copy elision\u6765\u786e\u4fdd\u6b63\u786e\u6027\uff0c\u6211\u4eec\u9f13\u52b1\u60a8\u4f9d\u9760copy elision\u6765\u63d0\u9ad8\u6027\u80fd\uff08\u8bf7\u53c2\u89c1 TotW\uff0324 \uff09\uff0c\u4f46\u4e0d\u80fd\u4fdd\u8bc1\u6b63\u786e\u6027\uff0c \u6bd5\u7adf\uff0ccopy elision\u662f\u4e00\u4e2a\u53ef\u9009\u7684\u4f18\u5316\uff0c\u7f16\u8bd1\u5668\u9009\u9879\u6216\u7f16\u8bd1\u5668\u5b9e\u73b0\u7684\u8d28\u91cf\u4f1a\u5f71\u54cd\u662f\u5426\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\u3002 Solution \u4e0d\u8981\u5728return\u8bed\u53e5\u540e\u8bbf\u95eereturn\u7684\u53d8\u91cf\u3002\u6ce8\u610f\u5c40\u90e8\u53d8\u91cf\u7684\u6790\u6784\u51fd\u6570\u53ef\u80fd\u4f1a\u9690\u5f0f\u5730\u8bbf\u95eereturn\u7684\u53d8\u91cf\u3002 \u6700\u7b80\u5355\u7684\u89e3\u51b3\u65b9\u6848\u662f\u5c06\u529f\u80fd\u4e00\u5206\u4e3a\u4e8c\u3002\u4e00\u4e2a\u8d1f\u8d23\u6240\u6709\u5904\u7406\u5de5\u4f5c\uff0c\u4e00\u4e2a\u8c03\u7528\u7b2c\u4e00\u4e2a\u5e76\u8fdb\u884c\u4e8b\u540e\u5904\u7406\uff08\u5373\u767b\u5f55\u9519\u8bef\uff09\u3002\u4f8b\u5982\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 MyStatus DoSomething () { MyStatus status ; status = DoA (); if ( ! status . ok ()) return status ; status = DoB (); if ( ! status . ok ()) return status ; status = DoC (); if ( ! status . ok ()) return status ; return status ; } MyStatus DoSomethingAndLog () { MyStatus status = DoSomething (); if ( ! status . ok ()) LOG ( ERROR ) << status ; return status ; } \u5982\u679c\u4ec5\u8bfb\u53d6\u503c\uff0c\u5219\u8fd8\u53ef\u4ee5\u786e\u4fdd\u901a\u8fc7\u7981\u7528\u4f18\u5316\u6765\u5904\u7406\u3002\u8fd9\u91cc\u5f3a\u5236\u62f7\u8d1d\u4e00\u4e2a\u526f\u672c\uff0c\u6b64\u540e\u7684\u5904\u7406\u5c06\u770b\u4e0d\u5230\u88abmove\u7684\u503c\u3002\u4f8b\u5982\u3002\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 MyStatus DoSomething () { MyStatus status_no_nrvo ; // 'status' is a reference so NRVO and all associated optimizations // will be disabled. // The 'return status;' statements will always copy the object and Logger // will always see the correct value. MyStatus & status = status_no_nrvo ; auto log_on_error = RunWhenOutOfScope ([ & status ] { if ( ! status . ok ()) LOG ( ERROR ) << status ; }); status = DoA (); if ( ! status . ok ()) return status ; status = DoB (); if ( ! status . ok ()) return status ; status = DoC (); if ( ! status . ok ()) return status ; return status ; } Another example 1 2 3 4 5 6 7 std :: string EncodeVarInt ( int i ) { std :: string out ; StringOutputStream string_output ( & out ); CodedOutputStream coded_output ( & string_output ); coded_output . WriteVarint32 ( i ); return out ; } CodedOutputStream \u5728\u6790\u6784\u51fd\u6570\u4e2d\u8fdb\u884c\u4e00\u4e9b\u5de5\u4f5c\u4ee5\u4fee\u526a\u672a\u4f7f\u7528\u7684\u5c3e\u968f\u5b57\u8282\u3002\u5982\u679c\u672a\u53d1\u751fNRVO\uff0c\u6b64\u51fd\u6570\u53ef\u4ee5\u5728\u5b57\u7b26\u4e32\u4e0a\u4fdd\u7559\u5783\u573e\u5b57\u8282\u3002 \u8bf7\u6ce8\u610f\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u60a8\u65e0\u6cd5\u5f3a\u5236\u6267\u884cNRVO\uff0c\u5e76\u4e14\u7981\u7528\u5b83\u7684\u6280\u5de7\u4e5f\u65e0\u6d4e\u4e8e\u4e8b\u3002\u6211\u4eec\u5fc5\u987b\u5728return\u8bed\u53e5\u8fd0\u884c\u4e4b\u524d\u4fee\u6539\u8fd4\u56de\u503c\u3002 \u4e00\u4e2a\u597d\u7684\u89e3\u51b3\u65b9\u6848\u662f\u6dfb\u52a0\u4e00\u4e2a\u5757\u5e76\u5c06\u8be5\u51fd\u6570\u9650\u5236\u4e3a\u4ec5\u5728\u8be5\u5757\u5b8c\u6210\u540e\u624d\u8fd4\u56de\u3002\u50cf\u8fd9\u6837: 1 2 3 4 5 6 7 8 9 10 11 std :: string EncodeVarInt ( int i ) { std :: string out ; { StringOutputStream string_output ( & out ); CodedOutputStream coded_output ( & string_output ); coded_output . WriteVarint32 ( i ); } // At this point the streams are destroyed and they already flushed. // We can safely return 'out'. return out ; } Conclusion \u4e0d\u8981\u5bf9\u5c06\u8981\u8fd4\u56de\u7684\u5c40\u90e8\u53d8\u91cf\u6301\u6709\u5f15\u7528\u3002 \u60a8\u65e0\u6cd5\u63a7\u5236\u662f\u5426\u53d1\u751fNRVO\u3002\u7f16\u8bd1\u5668\u7684\u7248\u672c\u548c\u9009\u9879\u53ef\u4ee5\u4ece\u4e0b\u9762\u66f4\u6539\u6b64\u5185\u5bb9\u3002\u4e0d\u8981\u4f9d\u8d56\u4e8e\u5b83\u7684\u6b63\u786e\u6027\u3002 \u60a8\u65e0\u6cd5\u63a7\u5236\u8fd4\u56de\u7684\u5c40\u90e8\u53d8\u91cf\u662f\u5426\u89e6\u53d1\u9690\u5f0f\u79fb\u52a8\u3002\u60a8\u4f7f\u7528\u7684\u7c7b\u578b\u53ef\u80fd\u4f1a\u5728\u5c06\u6765\u8fdb\u884c\u66f4\u65b0\u4ee5\u652f\u6301\u79fb\u52a8\u64cd\u4f5c\uff0c\u6b64\u5916\uff0c\u672a\u6765\u7684\u8bed\u8a00\u6807\u51c6\u5c06\u5728\u66f4\u591a\u60c5\u51b5\u4e0b\u91c7\u7528\u9690\u5f0f\u79fb\u52a8\uff0c\u56e0\u6b64\u60a8\u4e0d\u80fd\u4ee5\u4e3a\u53ea\u662f\u56e0\u4e3a\u73b0\u5728\u4e0d\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\u5c31\u4e0d\u4f1a\u5728\u5c06\u6765\u53d1\u751f\u3002","title":"Tip of the Week #120: Return Values are Untouchable"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-120/#tip-of-the-week-120-return-values-are-untouchable","text":"Originally posted as TotW #120 on August 16, 2012 by Samuel Benzaquen, (sbenza@google.com) \u8ba9\u6211\u4eec\u5047\u8bbe\u4f60\u6709\u4e0b\u9762\u8fd9\u4e2a\u4ee3\u7801\u7247\u6bb5\uff0c\u5b83\u4f9d\u9760RAII\u6765\u6e05\u7406\u8d44\u6e90\uff0c\u770b\u8d77\u6765\u4f3c\u4e4e\u4e00\u5207\u90fd\u7b26\u5408\u9884\u671f 1 2 3 4 5 6 7 8 9 10 11 12 13 MyStatus DoSomething () { MyStatus status ; auto log_on_error = RunWhenOutOfScope ([ & status ] { if ( ! status . ok ()) LOG ( ERROR ) << status ; }); status = DoA (); if ( ! status . ok ()) return status ; status = DoB (); if ( ! status . ok ()) return status ; status = DoC (); if ( ! status . ok ()) return status ; return status ; } \u5bf9\u4e0a\u9762\u7684\u4ee3\u7801\u7b80\u5355\u91cd\u6784\u4e0b\uff0c\u5c06\u6700\u540e\u4e00\u884c\u6539\u6210 return MyStatus() \uff0c\u7136\u540e\u4ee3\u7801\u5f00\u59cb\u505c\u6b62\u8f93\u51fa\u9519\u8bef\u65e5\u5fd7\u3002 \u5230\u5e95\u600e\u4e48\u56de\u4e8b?","title":"Tip of the Week #120: Return Values are Untouchable"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-120/#summary","text":"return\u8bed\u53e5\u8fd0\u884c\u540e\uff0c\u5207\u52ff\u8bbf\u95ee\uff08\u8bfb\u6216\u5199\uff09\u51fd\u6570\u7684\u8fd4\u56de\u53d8\u91cf\uff0c\u9664\u975e\u60a8\u975e\u5e38\u5c0f\u5fc3\u5730\u6b63\u786e\u6267\u884c\u6b64\u64cd\u4f5c\uff0c\u5426\u5219\u884c\u4e3a\u662f\u4e0d\u786e\u5b9a\u7684\u3002 \u8fd4\u56de\u53d8\u91cf\u5728\u590d\u5236\u6216\u79fb\u52a8\u540e\u88ab\u6790\u6784\u51fd\u6570\u9690\u5f0f\u8bbf\u95ee\uff08\u8bf7\u53c2\u89c1C ++ 11\u6807\u51c6[stmt.return]\u7b2c6.6.3\u8282\uff09\uff0c\u8fd9\u662f\u8fd9\u79cd\u610f\u5916\u8bbf\u95ee\u7684\u53d1\u751f\u65b9\u5f0f\uff0c\u4f46\u590d\u5236/\u79fb\u52a8\u53ef\u80fd\u88ab\u5ffd\u7565\u3002 \u8fd9\u5c31\u662f\u884c\u4e3a\u672a\u5b9a\u4e49\u7684\u539f\u56e0\u3002 \u672cTips\u4ec5\u5728\u8fd4\u56de\u975e\u5f15\u7528\u5c40\u90e8\u53d8\u91cf\u65f6\u9002\u7528\u3002\u8fd4\u56de\u4efb\u4f55\u5176\u4ed6\u8868\u8fbe\u5f0f\u90fd\u4e0d\u4f1a\u89e6\u53d1\u6b64\u95ee\u9898\u3002","title":"Summary"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-120/#the-problem","text":"\u5bf9\u4e8ereturn\u8bed\u53e5\uff0c\u6709\u4e24\u79cd\u4e0d\u540c\u7684\u4f18\u5316\u53ef\u4ee5\u4fee\u6539\u6211\u4eec\u539f\u59cb\u4ee3\u7801\u6bb5\u7684\u884c\u4e3a\uff1aNRVO\uff08\u8bf7\u53c2\u89c1 TotW#11 \uff09\u548c\u9690\u5f0f\u79fb\u52a8\u3002 \u4e4b\u524d\u7684\u4ee3\u7801\u8d77\u4f5c\u7528\u4e86\uff0c\u56e0\u4e3a\u6b63\u5728\u8fdb\u884ccopy elision\uff0c\u5e76\u4e14return\u8bed\u53e5\u5b9e\u9645\u4e0a\u6ca1\u6709\u505a\u4efb\u4f55\u5de5\u4f5c\uff0c\u53d8\u91cfstatus\u5df2\u7ecf\u5728\u8fd4\u56de\u5730\u5740\u4e2d\u6784\u9020\uff0c\u5e76\u4e14\u6e05\u9664\u5bf9\u8c61\u5728return\u8bed\u53e5\u4e4b\u540e\u770b\u5230MyStatus\u5bf9\u8c61\u7684\u552f\u4e00\u5b9e\u4f8b\u5c31\u662fstatus\u3002 \u5728\u4e4b\u540e\u7684\u4ee3\u7801\u4e2d\uff0c\u672a\u4f7f\u7528copy elision\uff0c\u5e76\u4e14\u5c06\u8fd4\u56de\u7684\u53d8\u91cfmove\u5230\u8fd4\u56de\u503c\u4e2d\u3002 RunWhenOutOfScope() \u5728\u5b8c\u6210\u79fb\u52a8\u64cd\u4f5c\u540e\u8fd0\u884c\uff0c\u5e76\u4e14\u770b\u5230\u4eceMyStatus\u5bf9\u8c61\u79fb\u6765\u7684\u5bf9\u8c61\u3002 \u8bf7\u6ce8\u610f\uff0c\u4e4b\u524d\u7684\u4ee3\u7801\u4e5f\u4e0d\u6b63\u786e\uff0c\u56e0\u4e3a\u5b83\u4f9d\u8d56copy elision\u6765\u786e\u4fdd\u6b63\u786e\u6027\uff0c\u6211\u4eec\u9f13\u52b1\u60a8\u4f9d\u9760copy elision\u6765\u63d0\u9ad8\u6027\u80fd\uff08\u8bf7\u53c2\u89c1 TotW\uff0324 \uff09\uff0c\u4f46\u4e0d\u80fd\u4fdd\u8bc1\u6b63\u786e\u6027\uff0c \u6bd5\u7adf\uff0ccopy elision\u662f\u4e00\u4e2a\u53ef\u9009\u7684\u4f18\u5316\uff0c\u7f16\u8bd1\u5668\u9009\u9879\u6216\u7f16\u8bd1\u5668\u5b9e\u73b0\u7684\u8d28\u91cf\u4f1a\u5f71\u54cd\u662f\u5426\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\u3002","title":"The Problem"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-120/#solution","text":"\u4e0d\u8981\u5728return\u8bed\u53e5\u540e\u8bbf\u95eereturn\u7684\u53d8\u91cf\u3002\u6ce8\u610f\u5c40\u90e8\u53d8\u91cf\u7684\u6790\u6784\u51fd\u6570\u53ef\u80fd\u4f1a\u9690\u5f0f\u5730\u8bbf\u95eereturn\u7684\u53d8\u91cf\u3002 \u6700\u7b80\u5355\u7684\u89e3\u51b3\u65b9\u6848\u662f\u5c06\u529f\u80fd\u4e00\u5206\u4e3a\u4e8c\u3002\u4e00\u4e2a\u8d1f\u8d23\u6240\u6709\u5904\u7406\u5de5\u4f5c\uff0c\u4e00\u4e2a\u8c03\u7528\u7b2c\u4e00\u4e2a\u5e76\u8fdb\u884c\u4e8b\u540e\u5904\u7406\uff08\u5373\u767b\u5f55\u9519\u8bef\uff09\u3002\u4f8b\u5982\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 MyStatus DoSomething () { MyStatus status ; status = DoA (); if ( ! status . ok ()) return status ; status = DoB (); if ( ! status . ok ()) return status ; status = DoC (); if ( ! status . ok ()) return status ; return status ; } MyStatus DoSomethingAndLog () { MyStatus status = DoSomething (); if ( ! status . ok ()) LOG ( ERROR ) << status ; return status ; } \u5982\u679c\u4ec5\u8bfb\u53d6\u503c\uff0c\u5219\u8fd8\u53ef\u4ee5\u786e\u4fdd\u901a\u8fc7\u7981\u7528\u4f18\u5316\u6765\u5904\u7406\u3002\u8fd9\u91cc\u5f3a\u5236\u62f7\u8d1d\u4e00\u4e2a\u526f\u672c\uff0c\u6b64\u540e\u7684\u5904\u7406\u5c06\u770b\u4e0d\u5230\u88abmove\u7684\u503c\u3002\u4f8b\u5982\u3002\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 MyStatus DoSomething () { MyStatus status_no_nrvo ; // 'status' is a reference so NRVO and all associated optimizations // will be disabled. // The 'return status;' statements will always copy the object and Logger // will always see the correct value. MyStatus & status = status_no_nrvo ; auto log_on_error = RunWhenOutOfScope ([ & status ] { if ( ! status . ok ()) LOG ( ERROR ) << status ; }); status = DoA (); if ( ! status . ok ()) return status ; status = DoB (); if ( ! status . ok ()) return status ; status = DoC (); if ( ! status . ok ()) return status ; return status ; }","title":"Solution"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-120/#another-example","text":"1 2 3 4 5 6 7 std :: string EncodeVarInt ( int i ) { std :: string out ; StringOutputStream string_output ( & out ); CodedOutputStream coded_output ( & string_output ); coded_output . WriteVarint32 ( i ); return out ; } CodedOutputStream \u5728\u6790\u6784\u51fd\u6570\u4e2d\u8fdb\u884c\u4e00\u4e9b\u5de5\u4f5c\u4ee5\u4fee\u526a\u672a\u4f7f\u7528\u7684\u5c3e\u968f\u5b57\u8282\u3002\u5982\u679c\u672a\u53d1\u751fNRVO\uff0c\u6b64\u51fd\u6570\u53ef\u4ee5\u5728\u5b57\u7b26\u4e32\u4e0a\u4fdd\u7559\u5783\u573e\u5b57\u8282\u3002 \u8bf7\u6ce8\u610f\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u60a8\u65e0\u6cd5\u5f3a\u5236\u6267\u884cNRVO\uff0c\u5e76\u4e14\u7981\u7528\u5b83\u7684\u6280\u5de7\u4e5f\u65e0\u6d4e\u4e8e\u4e8b\u3002\u6211\u4eec\u5fc5\u987b\u5728return\u8bed\u53e5\u8fd0\u884c\u4e4b\u524d\u4fee\u6539\u8fd4\u56de\u503c\u3002 \u4e00\u4e2a\u597d\u7684\u89e3\u51b3\u65b9\u6848\u662f\u6dfb\u52a0\u4e00\u4e2a\u5757\u5e76\u5c06\u8be5\u51fd\u6570\u9650\u5236\u4e3a\u4ec5\u5728\u8be5\u5757\u5b8c\u6210\u540e\u624d\u8fd4\u56de\u3002\u50cf\u8fd9\u6837: 1 2 3 4 5 6 7 8 9 10 11 std :: string EncodeVarInt ( int i ) { std :: string out ; { StringOutputStream string_output ( & out ); CodedOutputStream coded_output ( & string_output ); coded_output . WriteVarint32 ( i ); } // At this point the streams are destroyed and they already flushed. // We can safely return 'out'. return out ; }","title":"Another example"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-120/#conclusion","text":"\u4e0d\u8981\u5bf9\u5c06\u8981\u8fd4\u56de\u7684\u5c40\u90e8\u53d8\u91cf\u6301\u6709\u5f15\u7528\u3002 \u60a8\u65e0\u6cd5\u63a7\u5236\u662f\u5426\u53d1\u751fNRVO\u3002\u7f16\u8bd1\u5668\u7684\u7248\u672c\u548c\u9009\u9879\u53ef\u4ee5\u4ece\u4e0b\u9762\u66f4\u6539\u6b64\u5185\u5bb9\u3002\u4e0d\u8981\u4f9d\u8d56\u4e8e\u5b83\u7684\u6b63\u786e\u6027\u3002 \u60a8\u65e0\u6cd5\u63a7\u5236\u8fd4\u56de\u7684\u5c40\u90e8\u53d8\u91cf\u662f\u5426\u89e6\u53d1\u9690\u5f0f\u79fb\u52a8\u3002\u60a8\u4f7f\u7528\u7684\u7c7b\u578b\u53ef\u80fd\u4f1a\u5728\u5c06\u6765\u8fdb\u884c\u66f4\u65b0\u4ee5\u652f\u6301\u79fb\u52a8\u64cd\u4f5c\uff0c\u6b64\u5916\uff0c\u672a\u6765\u7684\u8bed\u8a00\u6807\u51c6\u5c06\u5728\u66f4\u591a\u60c5\u51b5\u4e0b\u91c7\u7528\u9690\u5f0f\u79fb\u52a8\uff0c\u56e0\u6b64\u60a8\u4e0d\u80fd\u4ee5\u4e3a\u53ea\u662f\u56e0\u4e3a\u73b0\u5728\u4e0d\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\u5c31\u4e0d\u4f1a\u5728\u5c06\u6765\u53d1\u751f\u3002","title":"Conclusion"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-122/","text":"Tip of the Week #122: Test Fixtures, Clarity, and Dataflow Originally published as totw/122 on 2016-08-30 By Titus Winters (titus@google.com) Updated 2017-10-20 Quicklink: abseil.io/tips/122 Be obscure clearly. \u2014 E.B. White \u6d4b\u8bd5\u4ee3\u7801\u4e0e\u751f\u4ea7\u4ee3\u7801\u6709\u4f55\u4e0d\u540c\uff1f\u4e00\u65b9\u9762\uff0c\u6d4b\u8bd5\u672a\u7ecf\u6d4b\u8bd5\uff1a\u5f53\u60a8\u7f16\u5199\u5206\u6563\u5728\u591a\u4e2a\u6587\u4ef6\u4e2d\u5e76\u5177\u6709\u6570\u767e\u884c SetUp \u7684\u6df7\u4e71\u7684\u610f\u5927\u5229\u9762\u6761\u4ee3\u7801\u65f6\uff0c\u8c01\u80fd\u786e\u4fdd\u6d4b\u8bd5\u771f\u6b63\u5728\u6d4b\u8bd5\u6240\u9700\u7684\u5185\u5bb9\u5462\uff1f \u60a8\u7684\u4ee3\u7801\u5ba1\u9605\u8005\u5e38\u5e38\u4e0d\u5f97\u4e0d\u5047\u8bbe Setup \u662f\u6709\u610f\u4e49\u7684\uff0c\u5e76\u4e14\u6700\u591a\u53ea\u80fd\u5bf9\u6bcf\u4e2a\u5355\u72ec\u7684\u6d4b\u8bd5\u7528\u4f8b\u8fdb\u884c\u903b\u8f91\u68c0\u67e5\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u53d1\u751f\u67d0\u4e9b\u53d8\u5316\uff0c\u60a8\u7684\u6d4b\u8bd5\u5f88\u53ef\u80fd\u4f1a\u5931\u8d25\uff0c\u4f46\u662f\u5f88\u5c11\u77e5\u9053\u662f\u5426\u6b63\u786e\u3002 \u53e6\u4e00\u65b9\u9762\uff0c\u5982\u679c\u60a8\u4f7f\u6bcf\u4e2a\u6d4b\u8bd5\u90fd\u5c3d\u53ef\u80fd\u7b80\u5355\u660e\u4e86\uff0c\u5219\u901a\u8fc7\u68c0\u67e5\uff0c\u7406\u89e3\u5176\u903b\u8f91\u5e76\u68c0\u67e5\u66f4\u9ad8\u8d28\u91cf\u7684\u6d4b\u8bd5\u903b\u8f91\u5c06\u66f4\u5bb9\u6613\u53d1\u73b0\u5b83\u662f\u6b63\u786e\u7684\u3002\u8ba9\u6211\u4eec\u770b\u4e00\u4e9b\u5b9e\u73b0\u8be5\u76ee\u6807\u7684\u7b80\u5355\u65b9\u6cd5\u3002 Dataflow in Fixtures \u8003\u8651\u4e0b\u9762\u7684\u4f8b\u5b50: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 class FrobberTest : public :: testing :: Test { protected : void ConfigureExampleA () { example_ = \"Example A\" ; frobber_ . Init ( example_ ); expected_ = \"Result A\" ; } void ConfigureExampleB () { example_ = \"Example B\" ; frobber_ . Init ( example_ ); expected_ = \"Result B\" ; } Frobber frobber_ ; string example_ ; string expected_ ; }; TEST_F ( FrobberTest , CalculatesA ) { ConfigureExampleA (); string result = frobber_ . Calculate (); EXPECT_EQ ( result , expected_ ); } TEST_F ( FrobberTest , CalculatesB ) { ConfigureExampleB (); string result = frobber_ . Calculate (); EXPECT_EQ ( result , expected_ ); } \u5728\u8fd9\u4e2a\u76f8\u5f53\u7b80\u5355\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u7684\u6d4b\u8bd5\u8de8\u8d8a\u4e8630\u884c\u4ee3\u7801\uff0c\u6211\u4eec\u5f88\u5bb9\u6613\u60f3\u8c6110\u500d\u4e8e\u8fd9\u4e2a\u503c\u7684\u4e0d\u90a3\u4e48\u7b80\u5355\u7684\u4f8b\u5b50:\u4efb\u4f55\u4e00\u4e2a\u5c4f\u5e55\u90fd\u65e0\u6cd5\u5bb9\u7eb3\u8fd9\u4e48\u591a\u3002 \u60f3\u8981\u9a8c\u8bc1\u4ee3\u7801\u6b63\u786e\u7684\u8bfb\u8005\u6216\u4ee3\u7801\u5ba1\u9605\u8005\u5fc5\u987b\u8fdb\u884c\u5982\u4e0b\u626b\u63cf\uff1a OK\u8fd9\u662f FrobberTest \uff0c\u5728\u8fd9\u91cc\u5b9a\u4e49\u4e86\u2026\u2026\u54e6\uff0c\u8fd9\u4e2a\u6587\u4ef6\uff0c\u597d\u4e86\u3002 ConfigureExampleA \u2026\u8fd9\u662f FrobberTest \u65b9\u6cd5\u3002\u5b83\u5bf9\u67d0\u4e9b\u6210\u5458\u53d8\u91cf\u8d77\u4f5c\u7528\u3002\u8fd9\u4e9b\u662f\u4ec0\u4e48\u7c7b\u578b\u7684\uff1f\u4ed6\u4eec\u5982\u4f55\u521d\u59cb\u5316\uff1f OK\uff0c Frobber \u548c\u4e24\u4e2a\u5b57\u7b26\u4e32\u3002\u6709 Setup \u5417\uff1f\u597d\uff0c\u9ed8\u8ba4\u6784\u9020\u3002 \u56de\u5230\u6d4b\u8bd5\uff1a\u597d\u7684\uff0c\u6211\u4eec\u8ba1\u7b97\u51fa\u4e00\u4e2a\u7ed3\u679c\uff0c\u5e76\u5c06\u5176\u4e0e\u671f\u671b\u7684\u7ed3\u679c\u8fdb\u884c\u6bd4\u8f83\u2026\u2026\u2026\u2026\u6211\u4eec\u53c8\u5728\u5176\u4e2d\u5b58\u50a8\u4e86\u4ec0\u4e48\uff1f\u201d \u4e0e\u4ee5\u66f4\u7b80\u5355\u7684\u6837\u5f0f\u7f16\u5199\u7684\u7b49\u6548\u4ee3\u7801\u8fdb\u884c\u6bd4\u8f83\uff1a 1 2 3 4 5 6 7 8 9 10 11 TEST ( FrobberTest , CalculatesA ) { Frobber frobber ; frobber . Init ( \"Example A\" ); EXPECT_EQ ( frobber . Calculate (), \"Result A\" ); } TEST ( FrobberTest , CalculatesB ) { Frobber frobber ; frobber . Init ( \"Example B\" ); EXPECT_EQ ( frobber . Calculate (), \"Result B\" ); } \u91c7\u7528\u8fd9\u79cd\u98ce\u683c\uff0c\u5373\u4f7f\u5728\u4e00\u4e2a\u62e5\u6709\u6570\u767e\u4e2a\u6d4b\u8bd5\u7684\u4e16\u754c\u4e2d\uff0c\u6211\u4eec\u4e5f\u80fd\u901a\u8fc7\u672c\u5730\u4fe1\u606f\u51c6\u786e\u5730\u77e5\u9053\u53d1\u751f\u4e86\u4ec0\u4e48\u3002 Prefer Free Functions \u5728\u524d\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6240\u6709\u53d8\u91cf\u521d\u59cb\u5316\u90fd\u5f88\u7b80\u6d01\uff0c\u5728\u5b9e\u9645\u6d4b\u8bd5\u4e2d\uff0c\u60c5\u51b5\u5e76\u975e\u603b\u662f\u5982\u6b64\u3002\u4f46\u662f\uff0c\u5173\u4e8e\u6570\u636e\u6d41\u548c\u907f\u514d\u56fa\u5b9a\u88c5\u7f6e\u7684\u76f8\u540c\u60f3\u6cd5\u53ef\u80fd\u9002\u7528\u3002\u8003\u8651\u4ee5\u4e0bprotobuf\u793a\u4f8b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 class BobberTest : public :: testing :: Test { protected : void SetUp () override { bobber1_ = PARSE_TEXT_PROTO ( R \" ( id: 17 artist: \"Beyonce\" when: \"2012-10-10 12:39:54 -04:00\" price_usd: 200 ) \" ); bobber2_ = PARSE_TEXT_PROTO ( R \" ( id: 21 artist: \"The Shouting Matches\" when: \"2016-08-24 20:30:21 -04:00\" price_usd: 60 ) \" ); } BobberProto bobber1_ ; BobberProto bobber2_ ; }; TEST_F ( BobberTest , UsesProtos ) { Bobber bobber ({ bobber1_ , bobber2_ }); SomeCall (); EXPECT_THAT ( bobber . MostRecent (), EqualsProto ( bobber2_ )); } \u540c\u6837\uff0c\u96c6\u4e2d\u5f0f\u91cd\u6784\u4f1a\u5bfc\u81f4\u5f88\u591a\u95f4\u63a5\u64cd\u4f5c\uff1a\u58f0\u660e\u548c\u521d\u59cb\u5316\u662f\u5206\u5f00\u7684\uff0c\u5e76\u4e14\u53ef\u80fd\u4e0e\u5b9e\u9645\u4f7f\u7528\u76f8\u53bb\u751a\u8fdc\uff0c\u6b64\u5916\uff0c\u7531\u4e8e SomeCall() \u5728\u4e2d\u95f4\uff0c\u800c\u4e14\u6211\u4eec\u4f7f\u7528\u7684\u662f fixture \u548c fixture \u6210\u5458\u53d8\u91cf\uff0c \u5982\u679c\u4e0d\u68c0\u67e5 SomeCall() \u7684\u7ec6\u8282\uff0c\u5c31\u65e0\u6cd5\u786e\u4fdd\u5728\u521d\u59cb\u5316\u548c EXPECT_THAT \u9a8c\u8bc1\u4e4b\u95f4 bobber1_ \u548c bobber2_ \u6ca1\u6709\u88ab\u4fee\u6539\u3002\u53ef\u80fd\u9700\u8981\u67e5\u770b\u66f4\u591a\u7684\u4ee3\u7801\u3002 \u8003\u8651\u5982\u4e0b\u4ee3\u7801\u4ee3\u66ff: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 BobberProto RecentCheapConcert () { return PARSE_TEXT_PROTO ( R \" ( id: 21 artist: \"The Shouting Matches\" when: \"2016-08-24 20:30:21 -04:00\" price_usd: 60 ) \" ); } BobberProto PastExpensiveConcert () { return PARSE_TEXT_PROTO ( R \" ( id: 17 artist: \"Beyonce\" when: \"2012-10-10 12:39:54 -04:00\" price_usd: 200 ) \" ); } TEST ( BobberTest , UsesProtos ) { Bobber bobber ({ PastExpensiveConcert (), RecentCheapConcert ()}); SomeCall (); EXPECT_THAT ( bobber . MostRecent (), EqualsProto ( RecentCheapConcert ())); } \u5c06\u521d\u59cb\u5316\u79fb\u5230\u666e\u901a\u51fd\u6570\u4e2d\u53ef\u4ee5\u6e05\u695a\u5730\u8868\u660e\u6ca1\u6709\u9690\u85cf\u7684\u6570\u636e\u6d41\u3002\u7cbe\u5fc3\u9009\u62e9\u7684helper\u540d\u79f0\u610f\u5473\u7740\u60a8\u53ef\u80fd\u751a\u81f3\u65e0\u9700\u5411\u4e0a\u67e5\u770b\u4ee3\u7801\u5373\u53ef\u786e\u8ba4\u6d4b\u8bd5\u7684\u6b63\u786e\u6027\uff0c\u751a\u81f3\u65e0\u9700\u67e5\u770bhelper\u65b9\u6cd5\u7684\u5177\u4f53\u5b9e\u73b0\u7ec6\u8282\u3002 Five Easy Steps \u901a\u5e38\uff0c\u60a8\u53ef\u4ee5\u6309\u7167\u4ee5\u4e0b\u6b65\u9aa4\u63d0\u9ad8\u6d4b\u8bd5\u7684\u53ef\u8bfb\u6027: \u5c3d\u91cf\u907f\u514d\u4f7f\u7528fixtures\uff0c\u6709\u65f6\u5019\u4e0d\u662f\u3002 \u5982\u679c\u4f60\u5728\u4f7f\u7528fixtures\uff0c\u90a3\u4e48\u8bf7\u907f\u514d\u4f7f\u7528fixture\u7684\u6210\u5458\u53d8\u91cf\uff0c\u4ee5\u7c7b\u4f3c\u4e8e\u5168\u5c40\u53d8\u91cf\u7684\u65b9\u5f0f\u5f00\u59cb\u5bf9\u5b83\u4eec\u8fdb\u884c\u64cd\u4f5c\u592a\u5bb9\u6613\u4e86\uff1a\u6570\u636e\u6d41\u5f88\u96be\u8ddf\u8e2a\uff0c\u56e0\u4e3a\u5939\u6742\u4e2d\u7684\u4efb\u4f55\u4ee3\u7801\u8def\u5f84\u90fd\u53ef\u80fd\u4f1a\u4fee\u6539\u6210\u5458\u3002 \u5982\u679c\u60a8\u9700\u8981\u5bf9\u53d8\u91cf\u8fdb\u884c\u590d\u6742\u7684\u521d\u59cb\u5316\uff0c\u8fd9\u56de\u4f7f\u7684\u6bcf\u4e2a\u6d4b\u8bd5\u96be\u4ee5\u9605\u8bfb\uff0c\u8bf7\u8003\u8651\u4e00\u4e2a\u8f85\u52a9\u51fd\u6570\uff08\u4e0d\u662ffixture\u7684\u4e00\u90e8\u5206\uff09\uff0c\u8be5\u51fd\u6570\u5b9e\u73b0\u4e86\u5177\u4f53\u7684\u521d\u59cb\u5316\u5e76\u76f4\u63a5\u8fd4\u56de\u5bf9\u8c61\u3002 \u5982\u679c\u5fc5\u987b\u4f7f\u7528\u5305\u542b\u6210\u5458\u53d8\u91cf\u7684fixtures\uff0c\u8bf7\u5c1d\u8bd5\u907f\u514d\u53d7\u7528\u76f4\u63a5\u5bf9\u8fd9\u4e9b\u6210\u5458\u8fdb\u884c\u64cd\u4f5c\u7684\u65b9\u6cd5\uff1a\u5c3d\u53ef\u80fd\u5c06\u5b83\u4eec\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\uff0c\u4ee5\u4f7f\u6570\u636e\u6d41\u6e05\u6670\u3002 \u5c1d\u8bd5\u5728\u7f16\u5199\u6d4b\u8bd5\u540d\u79f0\u4e4b\u524d\u5148\u7f16\u5199\u6d4b\u8bd5\uff1a\u5982\u679c\u60a8\u4ece\u4ee4\u4eba\u6109\u5feb\u7684\u7528\u6cd5\u5165\u624b\uff0c\u90a3\u4e48\u60a8\u7684API\u901a\u5e38\u4f1a\u66f4\u597d\uff0c\u5e76\u4e14\u60a8\u7684\u6d4b\u8bd5\u51e0\u4e4e\u603b\u662f\u66f4\u52a0\u6e05\u6670\u3002","title":"Tip of the Week #122: Test Fixtures, Clarity, and Dataflow"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-122/#tip-of-the-week-122-test-fixtures-clarity-and-dataflow","text":"Originally published as totw/122 on 2016-08-30 By Titus Winters (titus@google.com) Updated 2017-10-20 Quicklink: abseil.io/tips/122 Be obscure clearly. \u2014 E.B. White \u6d4b\u8bd5\u4ee3\u7801\u4e0e\u751f\u4ea7\u4ee3\u7801\u6709\u4f55\u4e0d\u540c\uff1f\u4e00\u65b9\u9762\uff0c\u6d4b\u8bd5\u672a\u7ecf\u6d4b\u8bd5\uff1a\u5f53\u60a8\u7f16\u5199\u5206\u6563\u5728\u591a\u4e2a\u6587\u4ef6\u4e2d\u5e76\u5177\u6709\u6570\u767e\u884c SetUp \u7684\u6df7\u4e71\u7684\u610f\u5927\u5229\u9762\u6761\u4ee3\u7801\u65f6\uff0c\u8c01\u80fd\u786e\u4fdd\u6d4b\u8bd5\u771f\u6b63\u5728\u6d4b\u8bd5\u6240\u9700\u7684\u5185\u5bb9\u5462\uff1f \u60a8\u7684\u4ee3\u7801\u5ba1\u9605\u8005\u5e38\u5e38\u4e0d\u5f97\u4e0d\u5047\u8bbe Setup \u662f\u6709\u610f\u4e49\u7684\uff0c\u5e76\u4e14\u6700\u591a\u53ea\u80fd\u5bf9\u6bcf\u4e2a\u5355\u72ec\u7684\u6d4b\u8bd5\u7528\u4f8b\u8fdb\u884c\u903b\u8f91\u68c0\u67e5\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u53d1\u751f\u67d0\u4e9b\u53d8\u5316\uff0c\u60a8\u7684\u6d4b\u8bd5\u5f88\u53ef\u80fd\u4f1a\u5931\u8d25\uff0c\u4f46\u662f\u5f88\u5c11\u77e5\u9053\u662f\u5426\u6b63\u786e\u3002 \u53e6\u4e00\u65b9\u9762\uff0c\u5982\u679c\u60a8\u4f7f\u6bcf\u4e2a\u6d4b\u8bd5\u90fd\u5c3d\u53ef\u80fd\u7b80\u5355\u660e\u4e86\uff0c\u5219\u901a\u8fc7\u68c0\u67e5\uff0c\u7406\u89e3\u5176\u903b\u8f91\u5e76\u68c0\u67e5\u66f4\u9ad8\u8d28\u91cf\u7684\u6d4b\u8bd5\u903b\u8f91\u5c06\u66f4\u5bb9\u6613\u53d1\u73b0\u5b83\u662f\u6b63\u786e\u7684\u3002\u8ba9\u6211\u4eec\u770b\u4e00\u4e9b\u5b9e\u73b0\u8be5\u76ee\u6807\u7684\u7b80\u5355\u65b9\u6cd5\u3002","title":"Tip of the Week #122: Test Fixtures, Clarity, and Dataflow"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-122/#dataflow-in-fixtures","text":"\u8003\u8651\u4e0b\u9762\u7684\u4f8b\u5b50: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 class FrobberTest : public :: testing :: Test { protected : void ConfigureExampleA () { example_ = \"Example A\" ; frobber_ . Init ( example_ ); expected_ = \"Result A\" ; } void ConfigureExampleB () { example_ = \"Example B\" ; frobber_ . Init ( example_ ); expected_ = \"Result B\" ; } Frobber frobber_ ; string example_ ; string expected_ ; }; TEST_F ( FrobberTest , CalculatesA ) { ConfigureExampleA (); string result = frobber_ . Calculate (); EXPECT_EQ ( result , expected_ ); } TEST_F ( FrobberTest , CalculatesB ) { ConfigureExampleB (); string result = frobber_ . Calculate (); EXPECT_EQ ( result , expected_ ); } \u5728\u8fd9\u4e2a\u76f8\u5f53\u7b80\u5355\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u7684\u6d4b\u8bd5\u8de8\u8d8a\u4e8630\u884c\u4ee3\u7801\uff0c\u6211\u4eec\u5f88\u5bb9\u6613\u60f3\u8c6110\u500d\u4e8e\u8fd9\u4e2a\u503c\u7684\u4e0d\u90a3\u4e48\u7b80\u5355\u7684\u4f8b\u5b50:\u4efb\u4f55\u4e00\u4e2a\u5c4f\u5e55\u90fd\u65e0\u6cd5\u5bb9\u7eb3\u8fd9\u4e48\u591a\u3002 \u60f3\u8981\u9a8c\u8bc1\u4ee3\u7801\u6b63\u786e\u7684\u8bfb\u8005\u6216\u4ee3\u7801\u5ba1\u9605\u8005\u5fc5\u987b\u8fdb\u884c\u5982\u4e0b\u626b\u63cf\uff1a OK\u8fd9\u662f FrobberTest \uff0c\u5728\u8fd9\u91cc\u5b9a\u4e49\u4e86\u2026\u2026\u54e6\uff0c\u8fd9\u4e2a\u6587\u4ef6\uff0c\u597d\u4e86\u3002 ConfigureExampleA \u2026\u8fd9\u662f FrobberTest \u65b9\u6cd5\u3002\u5b83\u5bf9\u67d0\u4e9b\u6210\u5458\u53d8\u91cf\u8d77\u4f5c\u7528\u3002\u8fd9\u4e9b\u662f\u4ec0\u4e48\u7c7b\u578b\u7684\uff1f\u4ed6\u4eec\u5982\u4f55\u521d\u59cb\u5316\uff1f OK\uff0c Frobber \u548c\u4e24\u4e2a\u5b57\u7b26\u4e32\u3002\u6709 Setup \u5417\uff1f\u597d\uff0c\u9ed8\u8ba4\u6784\u9020\u3002 \u56de\u5230\u6d4b\u8bd5\uff1a\u597d\u7684\uff0c\u6211\u4eec\u8ba1\u7b97\u51fa\u4e00\u4e2a\u7ed3\u679c\uff0c\u5e76\u5c06\u5176\u4e0e\u671f\u671b\u7684\u7ed3\u679c\u8fdb\u884c\u6bd4\u8f83\u2026\u2026\u2026\u2026\u6211\u4eec\u53c8\u5728\u5176\u4e2d\u5b58\u50a8\u4e86\u4ec0\u4e48\uff1f\u201d \u4e0e\u4ee5\u66f4\u7b80\u5355\u7684\u6837\u5f0f\u7f16\u5199\u7684\u7b49\u6548\u4ee3\u7801\u8fdb\u884c\u6bd4\u8f83\uff1a 1 2 3 4 5 6 7 8 9 10 11 TEST ( FrobberTest , CalculatesA ) { Frobber frobber ; frobber . Init ( \"Example A\" ); EXPECT_EQ ( frobber . Calculate (), \"Result A\" ); } TEST ( FrobberTest , CalculatesB ) { Frobber frobber ; frobber . Init ( \"Example B\" ); EXPECT_EQ ( frobber . Calculate (), \"Result B\" ); } \u91c7\u7528\u8fd9\u79cd\u98ce\u683c\uff0c\u5373\u4f7f\u5728\u4e00\u4e2a\u62e5\u6709\u6570\u767e\u4e2a\u6d4b\u8bd5\u7684\u4e16\u754c\u4e2d\uff0c\u6211\u4eec\u4e5f\u80fd\u901a\u8fc7\u672c\u5730\u4fe1\u606f\u51c6\u786e\u5730\u77e5\u9053\u53d1\u751f\u4e86\u4ec0\u4e48\u3002","title":"Dataflow in Fixtures"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-122/#prefer-free-functions","text":"\u5728\u524d\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6240\u6709\u53d8\u91cf\u521d\u59cb\u5316\u90fd\u5f88\u7b80\u6d01\uff0c\u5728\u5b9e\u9645\u6d4b\u8bd5\u4e2d\uff0c\u60c5\u51b5\u5e76\u975e\u603b\u662f\u5982\u6b64\u3002\u4f46\u662f\uff0c\u5173\u4e8e\u6570\u636e\u6d41\u548c\u907f\u514d\u56fa\u5b9a\u88c5\u7f6e\u7684\u76f8\u540c\u60f3\u6cd5\u53ef\u80fd\u9002\u7528\u3002\u8003\u8651\u4ee5\u4e0bprotobuf\u793a\u4f8b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 class BobberTest : public :: testing :: Test { protected : void SetUp () override { bobber1_ = PARSE_TEXT_PROTO ( R \" ( id: 17 artist: \"Beyonce\" when: \"2012-10-10 12:39:54 -04:00\" price_usd: 200 ) \" ); bobber2_ = PARSE_TEXT_PROTO ( R \" ( id: 21 artist: \"The Shouting Matches\" when: \"2016-08-24 20:30:21 -04:00\" price_usd: 60 ) \" ); } BobberProto bobber1_ ; BobberProto bobber2_ ; }; TEST_F ( BobberTest , UsesProtos ) { Bobber bobber ({ bobber1_ , bobber2_ }); SomeCall (); EXPECT_THAT ( bobber . MostRecent (), EqualsProto ( bobber2_ )); } \u540c\u6837\uff0c\u96c6\u4e2d\u5f0f\u91cd\u6784\u4f1a\u5bfc\u81f4\u5f88\u591a\u95f4\u63a5\u64cd\u4f5c\uff1a\u58f0\u660e\u548c\u521d\u59cb\u5316\u662f\u5206\u5f00\u7684\uff0c\u5e76\u4e14\u53ef\u80fd\u4e0e\u5b9e\u9645\u4f7f\u7528\u76f8\u53bb\u751a\u8fdc\uff0c\u6b64\u5916\uff0c\u7531\u4e8e SomeCall() \u5728\u4e2d\u95f4\uff0c\u800c\u4e14\u6211\u4eec\u4f7f\u7528\u7684\u662f fixture \u548c fixture \u6210\u5458\u53d8\u91cf\uff0c \u5982\u679c\u4e0d\u68c0\u67e5 SomeCall() \u7684\u7ec6\u8282\uff0c\u5c31\u65e0\u6cd5\u786e\u4fdd\u5728\u521d\u59cb\u5316\u548c EXPECT_THAT \u9a8c\u8bc1\u4e4b\u95f4 bobber1_ \u548c bobber2_ \u6ca1\u6709\u88ab\u4fee\u6539\u3002\u53ef\u80fd\u9700\u8981\u67e5\u770b\u66f4\u591a\u7684\u4ee3\u7801\u3002 \u8003\u8651\u5982\u4e0b\u4ee3\u7801\u4ee3\u66ff: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 BobberProto RecentCheapConcert () { return PARSE_TEXT_PROTO ( R \" ( id: 21 artist: \"The Shouting Matches\" when: \"2016-08-24 20:30:21 -04:00\" price_usd: 60 ) \" ); } BobberProto PastExpensiveConcert () { return PARSE_TEXT_PROTO ( R \" ( id: 17 artist: \"Beyonce\" when: \"2012-10-10 12:39:54 -04:00\" price_usd: 200 ) \" ); } TEST ( BobberTest , UsesProtos ) { Bobber bobber ({ PastExpensiveConcert (), RecentCheapConcert ()}); SomeCall (); EXPECT_THAT ( bobber . MostRecent (), EqualsProto ( RecentCheapConcert ())); } \u5c06\u521d\u59cb\u5316\u79fb\u5230\u666e\u901a\u51fd\u6570\u4e2d\u53ef\u4ee5\u6e05\u695a\u5730\u8868\u660e\u6ca1\u6709\u9690\u85cf\u7684\u6570\u636e\u6d41\u3002\u7cbe\u5fc3\u9009\u62e9\u7684helper\u540d\u79f0\u610f\u5473\u7740\u60a8\u53ef\u80fd\u751a\u81f3\u65e0\u9700\u5411\u4e0a\u67e5\u770b\u4ee3\u7801\u5373\u53ef\u786e\u8ba4\u6d4b\u8bd5\u7684\u6b63\u786e\u6027\uff0c\u751a\u81f3\u65e0\u9700\u67e5\u770bhelper\u65b9\u6cd5\u7684\u5177\u4f53\u5b9e\u73b0\u7ec6\u8282\u3002","title":"Prefer Free Functions"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-122/#five-easy-steps","text":"\u901a\u5e38\uff0c\u60a8\u53ef\u4ee5\u6309\u7167\u4ee5\u4e0b\u6b65\u9aa4\u63d0\u9ad8\u6d4b\u8bd5\u7684\u53ef\u8bfb\u6027: \u5c3d\u91cf\u907f\u514d\u4f7f\u7528fixtures\uff0c\u6709\u65f6\u5019\u4e0d\u662f\u3002 \u5982\u679c\u4f60\u5728\u4f7f\u7528fixtures\uff0c\u90a3\u4e48\u8bf7\u907f\u514d\u4f7f\u7528fixture\u7684\u6210\u5458\u53d8\u91cf\uff0c\u4ee5\u7c7b\u4f3c\u4e8e\u5168\u5c40\u53d8\u91cf\u7684\u65b9\u5f0f\u5f00\u59cb\u5bf9\u5b83\u4eec\u8fdb\u884c\u64cd\u4f5c\u592a\u5bb9\u6613\u4e86\uff1a\u6570\u636e\u6d41\u5f88\u96be\u8ddf\u8e2a\uff0c\u56e0\u4e3a\u5939\u6742\u4e2d\u7684\u4efb\u4f55\u4ee3\u7801\u8def\u5f84\u90fd\u53ef\u80fd\u4f1a\u4fee\u6539\u6210\u5458\u3002 \u5982\u679c\u60a8\u9700\u8981\u5bf9\u53d8\u91cf\u8fdb\u884c\u590d\u6742\u7684\u521d\u59cb\u5316\uff0c\u8fd9\u56de\u4f7f\u7684\u6bcf\u4e2a\u6d4b\u8bd5\u96be\u4ee5\u9605\u8bfb\uff0c\u8bf7\u8003\u8651\u4e00\u4e2a\u8f85\u52a9\u51fd\u6570\uff08\u4e0d\u662ffixture\u7684\u4e00\u90e8\u5206\uff09\uff0c\u8be5\u51fd\u6570\u5b9e\u73b0\u4e86\u5177\u4f53\u7684\u521d\u59cb\u5316\u5e76\u76f4\u63a5\u8fd4\u56de\u5bf9\u8c61\u3002 \u5982\u679c\u5fc5\u987b\u4f7f\u7528\u5305\u542b\u6210\u5458\u53d8\u91cf\u7684fixtures\uff0c\u8bf7\u5c1d\u8bd5\u907f\u514d\u53d7\u7528\u76f4\u63a5\u5bf9\u8fd9\u4e9b\u6210\u5458\u8fdb\u884c\u64cd\u4f5c\u7684\u65b9\u6cd5\uff1a\u5c3d\u53ef\u80fd\u5c06\u5b83\u4eec\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\uff0c\u4ee5\u4f7f\u6570\u636e\u6d41\u6e05\u6670\u3002 \u5c1d\u8bd5\u5728\u7f16\u5199\u6d4b\u8bd5\u540d\u79f0\u4e4b\u524d\u5148\u7f16\u5199\u6d4b\u8bd5\uff1a\u5982\u679c\u60a8\u4ece\u4ee4\u4eba\u6109\u5feb\u7684\u7528\u6cd5\u5165\u624b\uff0c\u90a3\u4e48\u60a8\u7684API\u901a\u5e38\u4f1a\u66f4\u597d\uff0c\u5e76\u4e14\u60a8\u7684\u6d4b\u8bd5\u51e0\u4e4e\u603b\u662f\u66f4\u52a0\u6e05\u6670\u3002","title":"Five Easy Steps"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-123/","text":"Tip of the Week #123: absl::optional and std::unique_ptr Originally posted as totw/123 on 2016-09-06 By Alexey Sokolov (sokolov@google.com) and Etienne Dechamps (edechamps@google.com) How to Store Values \u672cTips\u8ba8\u8bba\u4e86\u51e0\u79cd\u5b58\u50a8\u503c\u7684\u65b9\u6cd5\u3002\u8fd9\u91cc\u6211\u4eec\u4ee5\u7c7b\u6210\u5458\u53d8\u91cf\u4e3a\u4f8b\uff0c\u4f46\u662f\u4ee5\u4e0b\u8bb8\u591a\u8981\u70b9\u4e5f\u9002\u7528\u4e8e\u5c40\u90e8\u53d8\u91cf\u3002 1 2 3 4 5 6 7 8 9 10 11 #include <memory> #include \"third_party/absl/types/optional.h\" #include \".../bar.h\" class Foo { ... private : Bar val_ ; absl :: optional < Bar > opt_ ; std :: unique_ptr < Bar > ptr_ ; }; As a Bare Object \u8fd9\u662f\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u3002 val_ \u5206\u522b\u5728 Foo \u7684\u6784\u9020\u51fd\u6570\u548c Foo \u7684\u6790\u6784\u51fd\u6570\u4e2d\u8fdb\u884c\u6784\u9020\u548c\u9500\u6bc1\u7684\u3002\u5982\u679c Bar \u5177\u6709\u9ed8\u8ba4\u6784\u9020\u51fd\u6570\uff0c\u751a\u81f3\u65e0\u9700\u663e\u5f0f\u521d\u59cb\u5316\u3002 val _\u975e\u5e38\u5b89\u5168\uff0c\u56e0\u4e3a\u5176\u503c\u4e0d\u80fd\u4e3a null \u3002\u8fd9\u6837\u53ef\u4ee5\u6d88\u9664\u4e00\u7c7b\u6f5c\u5728\u7684\u9519\u8bef\u3002 \u4f46\u662f\u88f8\u7684\u5bf9\u8c61\u4e0d\u662f\u5f88\u7075\u6d3b\uff1a val_ \u7684\u751f\u5b58\u671f\u4ece\u6839\u672c\u4e0a\u4e0e\u5176\u7236 Foo \u5bf9\u8c61\u7684\u751f\u547d\u5468\u671f\u76f8\u5173\uff0c\u8fd9\u6709\u65f6\u662f\u4e0d\u671f\u671b\u7684\uff0c\u5982\u679c Bar \u652f\u6301\u79fb\u52a8\u6216\u4ea4\u6362\u64cd\u4f5c\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e9b\u64cd\u4f5c\u66ff\u6362 val_ \u7684\u5185\u5bb9\uff0c \u800c\u4efb\u4f55\u73b0\u6709\u7684 val_ \u6307\u9488\u6216\u5f15\u7528\u5c06\u7ee7\u7eed\u6307\u5411\u6216\u5f15\u7528\u540c\u4e00 val_ \u5bf9\u8c61\uff08\u4f5c\u4e3a\u5bb9\u5668\uff09\uff0c\u800c\u4e0d\u662f\u6307\u5411\u5176\u4e2d\u5b58\u50a8\u7684\u503c\u3002 \u9700\u8981\u4f20\u9012\u7ed9 Bar \u6784\u9020\u51fd\u6570\u7684\u4efb\u4f55\u53c2\u6570\u90fd\u5fc5\u987b\u5728 Foo \u7684\u6784\u9020\u51fd\u6570\u7684\u521d\u59cb\u5316\u5217\u8868\u4e2d\u8fdb\u884c\u8ba1\u7b97\uff0c\u5982\u679c\u6d89\u53ca\u590d\u6742\u7684\u8868\u8fbe\u5f0f\uff0c\u5219\u53ef\u80fd\u4f1a\u5f88\u56f0\u96be\u3002 As absl::optional \u8fd9\u662f\u88f8\u9732\u5bf9\u8c61\u7684\u7b80\u5355\u6027\u4e0e std::unique_ptr \u7684\u7075\u6d3b\u6027\u4e4b\u95f4\u7ed3\u5408\u4f53\uff0c\u8be5\u5bf9\u8c61\u5b58\u50a8\u5728 Foo \u4e2d\uff0c\u4f46\u662f\u4e0e\u88f8\u5bf9\u8c61\u4e0d\u540c\uff0c absl::optional \u53ef\u4ee5\u4e3a\u7a7a\u3002 \u53ef\u4ee5\u968f\u65f6\u901a\u8fc7\u8d4b\u503c (opt_ = ...) \u6216\u901a\u8fc7\u539f\u5730\u6784\u9020\u5bf9\u8c61 (opt_.emplace\uff08...)) \u6765\u586b\u5145\u5b83\u3002\u7531\u4e8e\u5bf9\u8c61\u662f\u5185\u8054\u5b58\u50a8\u7684\uff0c\u56e0\u6b64\u6709\u5173\u5728\u6808\u4e0a\u5206\u914d\u5927\u5bf9\u8c61\u7684\u5e38\u89c1\u8b66\u544a\u4e5f\u9002\u7528\u4e8e absl::optional \u5c31\u50cf\u88f8\u5bf9\u8c61\u4e00\u6837\u3002\u53e6\u8bf7\u6ce8\u610f\uff0c\u7a7a\u7684 absl::optional \u4f7f\u7528\u7684\u5185\u5b58\u4e0e\u586b\u5145\u7684\u5185\u5b58\u4e00\u6837\u591a\u3002 \u4e0e\u88f8\u5bf9\u8c61\u76f8\u6bd4\uff0c absl::optional \u5177\u6709\u4e00\u4e9b\u7f3a\u70b9\uff1a \u5bf9\u4e8e\u8bfb\u8005\u6765\u8bf4\uff0c\u5bf9\u8c61\u6784\u9020\u548c\u6790\u6784\u53d1\u751f\u7684\u5730\u65b9\u4e0d\u592a\u660e\u663e\u3002 \u5b58\u5728\u8bbf\u95ee\u4e0d\u5b58\u5728\u7684\u5bf9\u8c61\u7684\u98ce\u9669 As std::unique_ptr \u8fd9\u662f\u6700\u7075\u6d3b\u7684\u65b9\u5f0f\u3002\u8be5\u5bf9\u8c61\u5b58\u50a8\u5728 Foo \u5916\u90e8\u3002\u5c31\u50cf absl::optional \u4e00\u6837\uff0c std::unique_ptr \u53ef\u4ee5\u4e3a\u7a7a\uff0c\u4f46\u662f,\u4e0e absl::optional \u4e0d\u540c\u7684\u662f\uff0c \u53ef\u4ee5\u5c06\u5bf9\u8c61\u7684\u6240\u6709\u6743\u8f6c\u79fb\u5230\u522b\u7684\u5bf9\u8c61\u4e0a(\u901a\u8fc7\u4e00\u4e2a\u79fb\u52a8\u64cd\u4f5c),\u6216\u8005\u4ece\u522b\u7684\u5bf9\u8c61\u83b7\u53d6\u6240\u6709\u6743(\u6784\u9020\u6216\u901a\u8fc7\u8d4b\u503c)\u65f6,\u6216\u8005\u5047\u8bbe\u4ece\u4e00\u4e2a\u539f\u59cb\u6307\u9488\u83b7\u53d6\u6240\u6709\u6743(\u6784\u9020\u6216\u901a\u8fc7 ptr_ = absl::WrapUnique(\u2026) ) \u66f4\u591a\u7ec6\u8282\u53ef\u4ee5\u53c2\u8003 TotW 126 \u3002 \u5f53 std::unique_ptr \u4e3anull\u65f6\uff0c\u5b83\u6ca1\u6709\u5206\u914d\u5bf9\u8c61\uff0c\u4ec5\u6d88\u8017\u4e861\u4e2a\u6307\u9488\u5927\u5c0f\u3002 \u5982\u679c\u5bf9\u8c61\u53ef\u80fd\u9700\u8981\u8d85\u8fc7 std::unique_ptr (\u6240\u6709\u6743\u8f6c\u79fb)\u7684\u4f5c\u7528\u57df\uff0c\u5219\u6709\u5fc5\u8981\u5c06\u5bf9\u8c61\u5305\u88c5\u5728 std::unique_ptr \u4e2d\u3002 \u8fd9\u79cd\u7075\u6d3b\u6027\u4f1a\u5e26\u6765\u4e00\u4e9b\u6210\u672c\uff1a \u589e\u52a0\u8bfb\u8005\u7684\u8ba4\u77e5\u8d1f\u62c5: \u5b58\u50a8\u5728\u5185\u90e8\u7684\u5185\u5bb9\uff08 Bar \u6216\u4ece Bar \u6d3e\u751f\u7684\u4e1c\u897f\uff09\u4e0d\u592a\u660e\u663e\u3002\u4f46\u662f\uff0c\u7531\u4e8e\u8bfb\u8005\u53ea\u80fd\u5c06\u6ce8\u610f\u529b\u96c6\u4e2d\u5728\u6307\u9488\u6240\u62e5\u6709\u7684\u57fa\u672c\u63a5\u53e3\uff0c\u56e0\u6b64\u4e5f\u53ef\u80fd\u51cf\u8f7b\u8ba4\u77e5\u8d1f\u62c5\u3002 \u5b83\u751a\u81f3\u4e0d\u5982\u4f7f\u7528 absl::optional \u53d1\u751f\u5bf9\u8c61\u6784\u9020\u548c\u6790\u6784\u7684\u60c5\u51b5\u90a3\u4e48\u660e\u663e\uff0c\u56e0\u4e3a\u53ef\u4ee5\u8f6c\u8ba9\u5bf9\u8c61\u7684\u6240\u6709\u6743\u3002 \u4e0e absl::optional \u4e00\u6837\uff0c\u5b58\u5728\u8bbf\u95ee\u4e0d\u5b58\u5728\u7684\u5bf9\u8c61\u7684\u98ce\u9669\uff0c\u4e5f\u5c31\u662f\u8457\u540d\u7684\u7a7a\u6307\u9488\u89e3\u5f15\u7528\u95ee\u9898\u3002 \u4ed6\u7684\u6307\u9488\u5f15\u5165\u4e86\u53e6\u5916\u4e00\u4e2a\u95f4\u63a5\u7ea7\u522b\uff0c\u8be5\u7ea7\u522b\u9700\u8981\u5806\u5206\u914d\uff0c\u5e76\u4e14\u5bf9CPU\u7f13\u5b58\u4e0d\u53cb\u597d\u3002\u8fd9\u662f\u5426\u91cd\u8981\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u53d6\u51b3\u4e8e\u7279\u5b9a\u7684\u7528\u4f8b\u3002 \u5373\u4f7f Bar \u662f\u53ef\u4ee5\u590d\u5236\u7684\uff0c\u4f46\u662f std::unique_ptr<Bar> \u4ecd\u7136\u662f\u4e0d\u53ef\u590d\u5236\u7684\uff0c \u8fd9\u5bfc\u81f4 Foo \u4e5f\u4e0d\u80fd\u88ab\u590d\u5236\u3002 Conclusion \u4e0e\u5f80\u5e38\u4e00\u6837\uff0c\u52aa\u529b\u907f\u514d\u4e0d\u5fc5\u8981\u7684\u590d\u6742\u6027\uff0c\u5e76\u4f7f\u7528\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u3002\u5982\u679c\u9002\u5408\u60a8\u7684\u60c5\u51b5\uff0c\u5219\u6700\u597d\u9009\u62e9\u88f8\u9732\u7684\u5bf9\u8c61\u3002\u5426\u5219\uff0c\u8bf7\u5c1d\u8bd5 absl::optional \u3002\u4f5c\u4e3a\u6700\u540e\u7684\u9009\u62e9\uff0c\u8bf7\u4f7f\u7528 std::unique_ptr \u3002","title":"Tip of the Week #123: absl::optional and std::unique_ptr"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-123/#tip-of-the-week-123-absloptional-and-stdunique_ptr","text":"Originally posted as totw/123 on 2016-09-06 By Alexey Sokolov (sokolov@google.com) and Etienne Dechamps (edechamps@google.com)","title":"Tip of the Week #123: absl::optional and std::unique_ptr"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-123/#how-to-store-values","text":"\u672cTips\u8ba8\u8bba\u4e86\u51e0\u79cd\u5b58\u50a8\u503c\u7684\u65b9\u6cd5\u3002\u8fd9\u91cc\u6211\u4eec\u4ee5\u7c7b\u6210\u5458\u53d8\u91cf\u4e3a\u4f8b\uff0c\u4f46\u662f\u4ee5\u4e0b\u8bb8\u591a\u8981\u70b9\u4e5f\u9002\u7528\u4e8e\u5c40\u90e8\u53d8\u91cf\u3002 1 2 3 4 5 6 7 8 9 10 11 #include <memory> #include \"third_party/absl/types/optional.h\" #include \".../bar.h\" class Foo { ... private : Bar val_ ; absl :: optional < Bar > opt_ ; std :: unique_ptr < Bar > ptr_ ; };","title":"How to Store Values"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-123/#as-a-bare-object","text":"\u8fd9\u662f\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u3002 val_ \u5206\u522b\u5728 Foo \u7684\u6784\u9020\u51fd\u6570\u548c Foo \u7684\u6790\u6784\u51fd\u6570\u4e2d\u8fdb\u884c\u6784\u9020\u548c\u9500\u6bc1\u7684\u3002\u5982\u679c Bar \u5177\u6709\u9ed8\u8ba4\u6784\u9020\u51fd\u6570\uff0c\u751a\u81f3\u65e0\u9700\u663e\u5f0f\u521d\u59cb\u5316\u3002 val _\u975e\u5e38\u5b89\u5168\uff0c\u56e0\u4e3a\u5176\u503c\u4e0d\u80fd\u4e3a null \u3002\u8fd9\u6837\u53ef\u4ee5\u6d88\u9664\u4e00\u7c7b\u6f5c\u5728\u7684\u9519\u8bef\u3002 \u4f46\u662f\u88f8\u7684\u5bf9\u8c61\u4e0d\u662f\u5f88\u7075\u6d3b\uff1a val_ \u7684\u751f\u5b58\u671f\u4ece\u6839\u672c\u4e0a\u4e0e\u5176\u7236 Foo \u5bf9\u8c61\u7684\u751f\u547d\u5468\u671f\u76f8\u5173\uff0c\u8fd9\u6709\u65f6\u662f\u4e0d\u671f\u671b\u7684\uff0c\u5982\u679c Bar \u652f\u6301\u79fb\u52a8\u6216\u4ea4\u6362\u64cd\u4f5c\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e9b\u64cd\u4f5c\u66ff\u6362 val_ \u7684\u5185\u5bb9\uff0c \u800c\u4efb\u4f55\u73b0\u6709\u7684 val_ \u6307\u9488\u6216\u5f15\u7528\u5c06\u7ee7\u7eed\u6307\u5411\u6216\u5f15\u7528\u540c\u4e00 val_ \u5bf9\u8c61\uff08\u4f5c\u4e3a\u5bb9\u5668\uff09\uff0c\u800c\u4e0d\u662f\u6307\u5411\u5176\u4e2d\u5b58\u50a8\u7684\u503c\u3002 \u9700\u8981\u4f20\u9012\u7ed9 Bar \u6784\u9020\u51fd\u6570\u7684\u4efb\u4f55\u53c2\u6570\u90fd\u5fc5\u987b\u5728 Foo \u7684\u6784\u9020\u51fd\u6570\u7684\u521d\u59cb\u5316\u5217\u8868\u4e2d\u8fdb\u884c\u8ba1\u7b97\uff0c\u5982\u679c\u6d89\u53ca\u590d\u6742\u7684\u8868\u8fbe\u5f0f\uff0c\u5219\u53ef\u80fd\u4f1a\u5f88\u56f0\u96be\u3002","title":"As a Bare Object"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-123/#as-absloptional","text":"\u8fd9\u662f\u88f8\u9732\u5bf9\u8c61\u7684\u7b80\u5355\u6027\u4e0e std::unique_ptr \u7684\u7075\u6d3b\u6027\u4e4b\u95f4\u7ed3\u5408\u4f53\uff0c\u8be5\u5bf9\u8c61\u5b58\u50a8\u5728 Foo \u4e2d\uff0c\u4f46\u662f\u4e0e\u88f8\u5bf9\u8c61\u4e0d\u540c\uff0c absl::optional \u53ef\u4ee5\u4e3a\u7a7a\u3002 \u53ef\u4ee5\u968f\u65f6\u901a\u8fc7\u8d4b\u503c (opt_ = ...) \u6216\u901a\u8fc7\u539f\u5730\u6784\u9020\u5bf9\u8c61 (opt_.emplace\uff08...)) \u6765\u586b\u5145\u5b83\u3002\u7531\u4e8e\u5bf9\u8c61\u662f\u5185\u8054\u5b58\u50a8\u7684\uff0c\u56e0\u6b64\u6709\u5173\u5728\u6808\u4e0a\u5206\u914d\u5927\u5bf9\u8c61\u7684\u5e38\u89c1\u8b66\u544a\u4e5f\u9002\u7528\u4e8e absl::optional \u5c31\u50cf\u88f8\u5bf9\u8c61\u4e00\u6837\u3002\u53e6\u8bf7\u6ce8\u610f\uff0c\u7a7a\u7684 absl::optional \u4f7f\u7528\u7684\u5185\u5b58\u4e0e\u586b\u5145\u7684\u5185\u5b58\u4e00\u6837\u591a\u3002 \u4e0e\u88f8\u5bf9\u8c61\u76f8\u6bd4\uff0c absl::optional \u5177\u6709\u4e00\u4e9b\u7f3a\u70b9\uff1a \u5bf9\u4e8e\u8bfb\u8005\u6765\u8bf4\uff0c\u5bf9\u8c61\u6784\u9020\u548c\u6790\u6784\u53d1\u751f\u7684\u5730\u65b9\u4e0d\u592a\u660e\u663e\u3002 \u5b58\u5728\u8bbf\u95ee\u4e0d\u5b58\u5728\u7684\u5bf9\u8c61\u7684\u98ce\u9669","title":"As absl::optional"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-123/#as-stdunique_ptr","text":"\u8fd9\u662f\u6700\u7075\u6d3b\u7684\u65b9\u5f0f\u3002\u8be5\u5bf9\u8c61\u5b58\u50a8\u5728 Foo \u5916\u90e8\u3002\u5c31\u50cf absl::optional \u4e00\u6837\uff0c std::unique_ptr \u53ef\u4ee5\u4e3a\u7a7a\uff0c\u4f46\u662f,\u4e0e absl::optional \u4e0d\u540c\u7684\u662f\uff0c \u53ef\u4ee5\u5c06\u5bf9\u8c61\u7684\u6240\u6709\u6743\u8f6c\u79fb\u5230\u522b\u7684\u5bf9\u8c61\u4e0a(\u901a\u8fc7\u4e00\u4e2a\u79fb\u52a8\u64cd\u4f5c),\u6216\u8005\u4ece\u522b\u7684\u5bf9\u8c61\u83b7\u53d6\u6240\u6709\u6743(\u6784\u9020\u6216\u901a\u8fc7\u8d4b\u503c)\u65f6,\u6216\u8005\u5047\u8bbe\u4ece\u4e00\u4e2a\u539f\u59cb\u6307\u9488\u83b7\u53d6\u6240\u6709\u6743(\u6784\u9020\u6216\u901a\u8fc7 ptr_ = absl::WrapUnique(\u2026) ) \u66f4\u591a\u7ec6\u8282\u53ef\u4ee5\u53c2\u8003 TotW 126 \u3002 \u5f53 std::unique_ptr \u4e3anull\u65f6\uff0c\u5b83\u6ca1\u6709\u5206\u914d\u5bf9\u8c61\uff0c\u4ec5\u6d88\u8017\u4e861\u4e2a\u6307\u9488\u5927\u5c0f\u3002 \u5982\u679c\u5bf9\u8c61\u53ef\u80fd\u9700\u8981\u8d85\u8fc7 std::unique_ptr (\u6240\u6709\u6743\u8f6c\u79fb)\u7684\u4f5c\u7528\u57df\uff0c\u5219\u6709\u5fc5\u8981\u5c06\u5bf9\u8c61\u5305\u88c5\u5728 std::unique_ptr \u4e2d\u3002 \u8fd9\u79cd\u7075\u6d3b\u6027\u4f1a\u5e26\u6765\u4e00\u4e9b\u6210\u672c\uff1a \u589e\u52a0\u8bfb\u8005\u7684\u8ba4\u77e5\u8d1f\u62c5: \u5b58\u50a8\u5728\u5185\u90e8\u7684\u5185\u5bb9\uff08 Bar \u6216\u4ece Bar \u6d3e\u751f\u7684\u4e1c\u897f\uff09\u4e0d\u592a\u660e\u663e\u3002\u4f46\u662f\uff0c\u7531\u4e8e\u8bfb\u8005\u53ea\u80fd\u5c06\u6ce8\u610f\u529b\u96c6\u4e2d\u5728\u6307\u9488\u6240\u62e5\u6709\u7684\u57fa\u672c\u63a5\u53e3\uff0c\u56e0\u6b64\u4e5f\u53ef\u80fd\u51cf\u8f7b\u8ba4\u77e5\u8d1f\u62c5\u3002 \u5b83\u751a\u81f3\u4e0d\u5982\u4f7f\u7528 absl::optional \u53d1\u751f\u5bf9\u8c61\u6784\u9020\u548c\u6790\u6784\u7684\u60c5\u51b5\u90a3\u4e48\u660e\u663e\uff0c\u56e0\u4e3a\u53ef\u4ee5\u8f6c\u8ba9\u5bf9\u8c61\u7684\u6240\u6709\u6743\u3002 \u4e0e absl::optional \u4e00\u6837\uff0c\u5b58\u5728\u8bbf\u95ee\u4e0d\u5b58\u5728\u7684\u5bf9\u8c61\u7684\u98ce\u9669\uff0c\u4e5f\u5c31\u662f\u8457\u540d\u7684\u7a7a\u6307\u9488\u89e3\u5f15\u7528\u95ee\u9898\u3002 \u4ed6\u7684\u6307\u9488\u5f15\u5165\u4e86\u53e6\u5916\u4e00\u4e2a\u95f4\u63a5\u7ea7\u522b\uff0c\u8be5\u7ea7\u522b\u9700\u8981\u5806\u5206\u914d\uff0c\u5e76\u4e14\u5bf9CPU\u7f13\u5b58\u4e0d\u53cb\u597d\u3002\u8fd9\u662f\u5426\u91cd\u8981\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u53d6\u51b3\u4e8e\u7279\u5b9a\u7684\u7528\u4f8b\u3002 \u5373\u4f7f Bar \u662f\u53ef\u4ee5\u590d\u5236\u7684\uff0c\u4f46\u662f std::unique_ptr<Bar> \u4ecd\u7136\u662f\u4e0d\u53ef\u590d\u5236\u7684\uff0c \u8fd9\u5bfc\u81f4 Foo \u4e5f\u4e0d\u80fd\u88ab\u590d\u5236\u3002","title":"As std::unique_ptr"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-123/#conclusion","text":"\u4e0e\u5f80\u5e38\u4e00\u6837\uff0c\u52aa\u529b\u907f\u514d\u4e0d\u5fc5\u8981\u7684\u590d\u6742\u6027\uff0c\u5e76\u4f7f\u7528\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u3002\u5982\u679c\u9002\u5408\u60a8\u7684\u60c5\u51b5\uff0c\u5219\u6700\u597d\u9009\u62e9\u88f8\u9732\u7684\u5bf9\u8c61\u3002\u5426\u5219\uff0c\u8bf7\u5c1d\u8bd5 absl::optional \u3002\u4f5c\u4e3a\u6700\u540e\u7684\u9009\u62e9\uff0c\u8bf7\u4f7f\u7528 std::unique_ptr \u3002","title":"Conclusion"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-126/","text":"Tip of the Week #126: make_unique is the new new Originally posted as totw/126 on 2016-12-12 By James Dennett (jdennett@google.com) based on a mailing list post by Titus Winters (titus@google.com) \u968f\u7740\u4ee3\u7801\u5e93\u7684\u6269\u5c55\uff0c\u6211\u4eec\u8d8a\u6765\u8d8a\u96be\u4e86\u89e3\u6211\u4eec\u6240\u4f9d\u8d56\u7684\u6240\u6709\u7ec6\u8282\u3002\u5373\u4f7f\u62e5\u6709\u6df1\u539a\u7684\u77e5\u8bc6\u4e5f\u4e0d\u80fd\u89e3\u51b3\u95ee\u9898\uff1a\u65e0\u8bba\u662f\u5728\u7f16\u5199\u4ee3\u7801\u8fd8\u662f\u5728code review\u65f6\uff0c \u6211\u4eec\u90fd\u5fc5\u987b\u4f9d\u9760\u63a5\u53e3\u548c\u5951\u7ea6\u6765\u77e5\u9053\u4ee3\u7801\u6b63\u786e\u3002\u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\uff0c\u7c7b\u578b\u7cfb\u7edf\u53ef\u4ee5\u4ee5\u66f4\u901a\u7528\u65b9\u5f0f\u63d0\u4f9b\u8fd9\u4e9b\u5951\u7ea6\u3002 \u4e00\u81f4\u7684\u4f7f\u7528\u7c7b\u578b\u7cfb\u7edf\u5951\u7ea6\uff0c\u53ef\u4ee5\u901a\u8fc7\u8bc6\u522b\u5206\u914d \u5728\u5806\u4e0a\u7684\u5bf9\u8c61\u548c\u6240\u6709\u6743\u8f6c\u79fb\u7684\u4f4d\u7f6e\u6765\u7b80\u5316\u4ee3\u7801\u7684\u7f16\u5199\u548c\u68c0\u67e5\u3002 \u5c3d\u7ba1\u5728 C++ \u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528plain value\u6765\u51cf\u5c11\u5bf9\u52a8\u6001\u5185\u5b58\u5206\u914d\u7684\u9700\u6c42\uff0c\u4f46\u6709\u65f6\u6211\u4eec\u9700\u8981\u52a8\u6001\u5bf9\u8c61\u6765\u5ef6\u957f\u5176\u4f5c\u7528\u57df\u3002 \u52a8\u6001\u5206\u914d\u5bf9\u8c61\u65f6\uff0c C++ \u4ee3\u7801\u5e94\u9996\u9009\u667a\u80fd\u6307\u9488\uff08\u6700\u5e38\u89c1\u7684\u662f std::unique_ptr \uff09\uff0c\u800c\u4e0d\u662f\u539f\u59cb\u6307\u9488\u3002\u8fd9\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5173\u4e8e\u5206\u914d\u548c\u6240\u6709\u6743\u8f6c\u79fb\u7684\u4e00\u81f4\u7684\u89c6\u89d2\uff0c \u5e76\u5728\u9700\u8981\u5bf9\u6240\u6709\u6743\u95ee\u9898\u8fdb\u884c\u66f4\u4ed4\u7ec6\u68c0\u67e5\u7684\u4ee3\u7801\u5904\u7559\u4e0b\u4e86\u66f4\u6e05\u6670\u7684\u89c6\u89c9\u4fe1\u53f7\u3002 \u4e24\u4e2a\u5173\u952e\u5de5\u5177\uff0c\u4e00\u4e2a\u662f absl::make_unique (\u5728 C++11 \u65f6\u4ee3\u5b9e\u73b0\u4e86C++14\u4e2d\u7684 std::make_unique \uff0c\u63d0\u4f9b\u4e86\u4e00\u4e2a\u65e0\u6cc4\u6f0f\u7248\u672c\u7684\u5185\u5b58\u5206\u914d)\u3002 \u53e6\u5916\u4e00\u4e2a\u5de5\u5177\u662f absl::WrapUnique (\u7528\u4e8e\u5c06\u5177\u6709\u6240\u6709\u6743\u7684\u88f8\u6307\u9488\u5305\u88c5\u6210 std::unique_ptr \u7c7b\u578b)\uff0c\u4ed6\u7684\u5b9e\u73b0\u53ef\u4ee5\u5728 absl/memory/memory.h \u4e2d\u53d1\u73b0\u3002 Why Avoid new? \u4e3a\u4ec0\u4e48\u5728\u4ee3\u7801\u4e2d\u5e94\u8be5\u4f18\u5148\u4f7f\u7528\u667a\u80fd\u6307\u9488\u4ee3\u66ff\u901a\u8fc7new\u6765\u5206\u914d\u7684\u88f8\u6307\u9488\u3002 \u5982\u679c\u53ef\u80fd\u7684\u5316\uff0c\u5728\u7c7b\u578b\u7cfb\u7edf\u4e2d\u6240\u6709\u6743\u662f\u6700\u597d\u7684\u8868\u8fbe\u3002\u4ed6\u5141\u8bb8 How Should We Choose Which to Use? Summary absl::make_unique \u548c absl::WrapUnique \u76f8\u6bd4\uff0c\u4f18\u5148\u4f7f\u7528 absl::make_unique \uff0c\u800c absl::WrapUnique \u548c new \u76f8\u6bd4\uff0c\u4f18\u5148\u4f7f\u7528 absl::WrapUnique","title":"Tip of the Week #126: `make_unique` is the new `new`"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-126/#tip-of-the-week-126-make_unique-is-the-new-new","text":"Originally posted as totw/126 on 2016-12-12 By James Dennett (jdennett@google.com) based on a mailing list post by Titus Winters (titus@google.com) \u968f\u7740\u4ee3\u7801\u5e93\u7684\u6269\u5c55\uff0c\u6211\u4eec\u8d8a\u6765\u8d8a\u96be\u4e86\u89e3\u6211\u4eec\u6240\u4f9d\u8d56\u7684\u6240\u6709\u7ec6\u8282\u3002\u5373\u4f7f\u62e5\u6709\u6df1\u539a\u7684\u77e5\u8bc6\u4e5f\u4e0d\u80fd\u89e3\u51b3\u95ee\u9898\uff1a\u65e0\u8bba\u662f\u5728\u7f16\u5199\u4ee3\u7801\u8fd8\u662f\u5728code review\u65f6\uff0c \u6211\u4eec\u90fd\u5fc5\u987b\u4f9d\u9760\u63a5\u53e3\u548c\u5951\u7ea6\u6765\u77e5\u9053\u4ee3\u7801\u6b63\u786e\u3002\u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\uff0c\u7c7b\u578b\u7cfb\u7edf\u53ef\u4ee5\u4ee5\u66f4\u901a\u7528\u65b9\u5f0f\u63d0\u4f9b\u8fd9\u4e9b\u5951\u7ea6\u3002 \u4e00\u81f4\u7684\u4f7f\u7528\u7c7b\u578b\u7cfb\u7edf\u5951\u7ea6\uff0c\u53ef\u4ee5\u901a\u8fc7\u8bc6\u522b\u5206\u914d \u5728\u5806\u4e0a\u7684\u5bf9\u8c61\u548c\u6240\u6709\u6743\u8f6c\u79fb\u7684\u4f4d\u7f6e\u6765\u7b80\u5316\u4ee3\u7801\u7684\u7f16\u5199\u548c\u68c0\u67e5\u3002 \u5c3d\u7ba1\u5728 C++ \u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528plain value\u6765\u51cf\u5c11\u5bf9\u52a8\u6001\u5185\u5b58\u5206\u914d\u7684\u9700\u6c42\uff0c\u4f46\u6709\u65f6\u6211\u4eec\u9700\u8981\u52a8\u6001\u5bf9\u8c61\u6765\u5ef6\u957f\u5176\u4f5c\u7528\u57df\u3002 \u52a8\u6001\u5206\u914d\u5bf9\u8c61\u65f6\uff0c C++ \u4ee3\u7801\u5e94\u9996\u9009\u667a\u80fd\u6307\u9488\uff08\u6700\u5e38\u89c1\u7684\u662f std::unique_ptr \uff09\uff0c\u800c\u4e0d\u662f\u539f\u59cb\u6307\u9488\u3002\u8fd9\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5173\u4e8e\u5206\u914d\u548c\u6240\u6709\u6743\u8f6c\u79fb\u7684\u4e00\u81f4\u7684\u89c6\u89d2\uff0c \u5e76\u5728\u9700\u8981\u5bf9\u6240\u6709\u6743\u95ee\u9898\u8fdb\u884c\u66f4\u4ed4\u7ec6\u68c0\u67e5\u7684\u4ee3\u7801\u5904\u7559\u4e0b\u4e86\u66f4\u6e05\u6670\u7684\u89c6\u89c9\u4fe1\u53f7\u3002 \u4e24\u4e2a\u5173\u952e\u5de5\u5177\uff0c\u4e00\u4e2a\u662f absl::make_unique (\u5728 C++11 \u65f6\u4ee3\u5b9e\u73b0\u4e86C++14\u4e2d\u7684 std::make_unique \uff0c\u63d0\u4f9b\u4e86\u4e00\u4e2a\u65e0\u6cc4\u6f0f\u7248\u672c\u7684\u5185\u5b58\u5206\u914d)\u3002 \u53e6\u5916\u4e00\u4e2a\u5de5\u5177\u662f absl::WrapUnique (\u7528\u4e8e\u5c06\u5177\u6709\u6240\u6709\u6743\u7684\u88f8\u6307\u9488\u5305\u88c5\u6210 std::unique_ptr \u7c7b\u578b)\uff0c\u4ed6\u7684\u5b9e\u73b0\u53ef\u4ee5\u5728 absl/memory/memory.h \u4e2d\u53d1\u73b0\u3002","title":"Tip of the Week #126: make_unique is the new new"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-126/#why-avoid-new","text":"\u4e3a\u4ec0\u4e48\u5728\u4ee3\u7801\u4e2d\u5e94\u8be5\u4f18\u5148\u4f7f\u7528\u667a\u80fd\u6307\u9488\u4ee3\u66ff\u901a\u8fc7new\u6765\u5206\u914d\u7684\u88f8\u6307\u9488\u3002 \u5982\u679c\u53ef\u80fd\u7684\u5316\uff0c\u5728\u7c7b\u578b\u7cfb\u7edf\u4e2d\u6240\u6709\u6743\u662f\u6700\u597d\u7684\u8868\u8fbe\u3002\u4ed6\u5141\u8bb8","title":"Why Avoid new?"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-126/#how-should-we-choose-which-to-use","text":"","title":"How Should We Choose Which to Use?"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-126/#summary","text":"absl::make_unique \u548c absl::WrapUnique \u76f8\u6bd4\uff0c\u4f18\u5148\u4f7f\u7528 absl::make_unique \uff0c\u800c absl::WrapUnique \u548c new \u76f8\u6bd4\uff0c\u4f18\u5148\u4f7f\u7528 absl::WrapUnique","title":"Summary"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-24/","text":"Tip of the Week #24: Copies, Abbrv Originally posted as TotW #24 on Nov 26, 2012 by Titus Winters, (titus@google.com) and Chandler Carruth (chandlerc@google.com) \u201cTo copy others is necessary, but to copy oneself is pathetic.\u201d - Pablo Picasso \u6ce8\u610f : \u6709\u5173\u540d\u79f0\u8ba1\u6570\u548c\u526f\u672c\u4e0e\u79fb\u52a8\u7684\u6307\u5bfc\uff0c\u8bf7\u53c2\u89c1 TotW 77 \u548c TotW 55 One Name, No Copy; Two Names, Two Copies \u5f53\u8bc4\u4f30\u662f\u5426\u5728\u4efb\u4f55\u7ed9\u5b9a\u8303\u56f4\u5185\u662f\u5426\u6709\u526f\u672c(\u5305\u62ec\u89e6\u53d1 RVO \u7684\u60c5\u51b5)\u65f6\uff0c\u8bf7\u68c0\u67e5\u4f60\u7684\u6570\u636e\u88ab\u591a\u5c11\u4e2a\u53d8\u91cf\u540d\u5f15\u7528\u3002 \u5728\u4efb\u4f55\u65f6\u5019\u5982\u679c\u4e00\u4e2a\u6570\u636e\u6709\u4e24\u4efd\u526f\u672c\u7684\u8bdd\uff0c\u90a3\u4e48\u4f60\u4e00\u5b9a\u62e5\u6709\u4e24\u4e2a\u6709\u6548\u7684\u540d\u5b57\u6765\u5f15\u7528\u8fd9\u4e24\u4e2a\u526f\u672c\u3002\u5176\u4ed6\u60c5\u51b5\u4e0b\u7f16\u8bd1\u5668\u4f1a\u8d1f\u8d23\u5220\u9664\u526f\u672c\u3002 Examples \u8ba9\u6211\u4eec\u6765\u770b\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u770b\u770b\u5b9e\u9645\u60c5\u51b5\u4e0b\u662f\u5982\u4f55\u8fd0\u4f5c\u7684: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 std :: string build (); std :: string foo ( std :: string arg ) { return arg ; // no copying here, only one name for the data \u201carg\u201d. } void bar () { std :: string local = build (); // only 1 instance -- only 1 name // no copying, a reference won\u2019t incur a copy std :: string & local_ref = local ; // one copy operation, there are now two named collections of data. std :: string second = foo ( local ); } \u5927\u591a\u6570\u60c5\u51b5\u4e0b\u8fd9\u90fd\u4e0d\u91cd\u8981\uff0c\u786e\u4fdd\u60a8\u7684\u4ee3\u7801\u53ef\u8bfb\u5e76\u4e14\u4e00\u81f4\u662f\u975e\u5e38\u91cd\u8981\u7684\u3002\u800c\u4e0d\u662f\u62c5\u5fc3\u526f\u672c\u62f7\u8d1d\u548c\u6027\u80fd\u3002\u4e00\u5982\u65e2\u5f80\uff0c\u4e0d\u8981\u8fc7\u65e9\u4f18\u5316\u3002\u4f46\u662f\u5982\u679c\u4f60\u53d1\u73b0\u4ece\u5934\u5f00\u59cb\u7f16\u5199\u4ee3\u7801\u7684\u8bdd\u4f60\u53ef\u4ee5\u63d0\u4f9b\u4e00\u4e2a\u66f4\u52a0\u5e72\u51c0\u548c\u4e00\u81f4\u7684API\u8fd4\u56de\u503c\uff0c\u4e0d\u8981\u56e0\u4e3a\u5b83\u53ef\u80fd\u4f1a\u5e26\u6765\u62f7\u8d1d\u800c\u59a5\u534f\uff0c\u4f60\u5728\u5341\u5e74\u524d\u7528 C++ \u5b66\u4e60\u8fc7\u7684\u6240\u6709\u5185\u5bb9\u90fd\u662f\u9519\u8bef\u7684\u3002 As always: profile before you optimize. But, if you find yourself writing code from scratch \u2013 and can provide a clean and consistent API that returns its values \u2013 don\u2019t discount code that seems like it would make copies: everything you learned about copies in C++ a decade ago is wrong. \u6700\u540e\u4e00\u6bb5\u7ffb\u8bd1\u7684\u4e0d\u592a\u597d\uff0c\u5982\u679c\u6709\u66f4\u597d\u7684\u7ffb\u8bd1\uff0c\u8bf7\u544a\u77e5\u6211\u3002","title":"Tip of the Week #24: Copies, Abbrv"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-24/#tip-of-the-week-24-copies-abbrv","text":"Originally posted as TotW #24 on Nov 26, 2012 by Titus Winters, (titus@google.com) and Chandler Carruth (chandlerc@google.com) \u201cTo copy others is necessary, but to copy oneself is pathetic.\u201d - Pablo Picasso \u6ce8\u610f : \u6709\u5173\u540d\u79f0\u8ba1\u6570\u548c\u526f\u672c\u4e0e\u79fb\u52a8\u7684\u6307\u5bfc\uff0c\u8bf7\u53c2\u89c1 TotW 77 \u548c TotW 55","title":"Tip of the Week #24: Copies, Abbrv"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-24/#one-name-no-copy-two-names-two-copies","text":"\u5f53\u8bc4\u4f30\u662f\u5426\u5728\u4efb\u4f55\u7ed9\u5b9a\u8303\u56f4\u5185\u662f\u5426\u6709\u526f\u672c(\u5305\u62ec\u89e6\u53d1 RVO \u7684\u60c5\u51b5)\u65f6\uff0c\u8bf7\u68c0\u67e5\u4f60\u7684\u6570\u636e\u88ab\u591a\u5c11\u4e2a\u53d8\u91cf\u540d\u5f15\u7528\u3002 \u5728\u4efb\u4f55\u65f6\u5019\u5982\u679c\u4e00\u4e2a\u6570\u636e\u6709\u4e24\u4efd\u526f\u672c\u7684\u8bdd\uff0c\u90a3\u4e48\u4f60\u4e00\u5b9a\u62e5\u6709\u4e24\u4e2a\u6709\u6548\u7684\u540d\u5b57\u6765\u5f15\u7528\u8fd9\u4e24\u4e2a\u526f\u672c\u3002\u5176\u4ed6\u60c5\u51b5\u4e0b\u7f16\u8bd1\u5668\u4f1a\u8d1f\u8d23\u5220\u9664\u526f\u672c\u3002","title":"One Name, No Copy; Two Names, Two Copies"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-24/#examples","text":"\u8ba9\u6211\u4eec\u6765\u770b\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u770b\u770b\u5b9e\u9645\u60c5\u51b5\u4e0b\u662f\u5982\u4f55\u8fd0\u4f5c\u7684: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 std :: string build (); std :: string foo ( std :: string arg ) { return arg ; // no copying here, only one name for the data \u201carg\u201d. } void bar () { std :: string local = build (); // only 1 instance -- only 1 name // no copying, a reference won\u2019t incur a copy std :: string & local_ref = local ; // one copy operation, there are now two named collections of data. std :: string second = foo ( local ); } \u5927\u591a\u6570\u60c5\u51b5\u4e0b\u8fd9\u90fd\u4e0d\u91cd\u8981\uff0c\u786e\u4fdd\u60a8\u7684\u4ee3\u7801\u53ef\u8bfb\u5e76\u4e14\u4e00\u81f4\u662f\u975e\u5e38\u91cd\u8981\u7684\u3002\u800c\u4e0d\u662f\u62c5\u5fc3\u526f\u672c\u62f7\u8d1d\u548c\u6027\u80fd\u3002\u4e00\u5982\u65e2\u5f80\uff0c\u4e0d\u8981\u8fc7\u65e9\u4f18\u5316\u3002\u4f46\u662f\u5982\u679c\u4f60\u53d1\u73b0\u4ece\u5934\u5f00\u59cb\u7f16\u5199\u4ee3\u7801\u7684\u8bdd\u4f60\u53ef\u4ee5\u63d0\u4f9b\u4e00\u4e2a\u66f4\u52a0\u5e72\u51c0\u548c\u4e00\u81f4\u7684API\u8fd4\u56de\u503c\uff0c\u4e0d\u8981\u56e0\u4e3a\u5b83\u53ef\u80fd\u4f1a\u5e26\u6765\u62f7\u8d1d\u800c\u59a5\u534f\uff0c\u4f60\u5728\u5341\u5e74\u524d\u7528 C++ \u5b66\u4e60\u8fc7\u7684\u6240\u6709\u5185\u5bb9\u90fd\u662f\u9519\u8bef\u7684\u3002 As always: profile before you optimize. But, if you find yourself writing code from scratch \u2013 and can provide a clean and consistent API that returns its values \u2013 don\u2019t discount code that seems like it would make copies: everything you learned about copies in C++ a decade ago is wrong. \u6700\u540e\u4e00\u6bb5\u7ffb\u8bd1\u7684\u4e0d\u592a\u597d\uff0c\u5982\u679c\u6709\u66f4\u597d\u7684\u7ffb\u8bd1\uff0c\u8bf7\u544a\u77e5\u6211\u3002","title":"Examples"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-3/","text":"Tip of the Week #3: String Concatenation and operator+ vs. StrCat() Originally published as totw/3 on 2012-05-11 Updated 2017-09-18; revised 2018-01-22 \u5f53\u4e00\u4e2areviewer\u8bf4\"\u4e0d\u8981\u4f7f\u7528string\u7684\u8fde\u63a5\u64cd\u4f5c\uff0c\u8fd9\u4e0d\u9ad8\u6548\"\uff0c\u901a\u5e38\u4f1a\u8ba9\u63d0\u4ea4\u4ee3\u7801\u7684\u4eba\u5f88\u60ca\u8bb6\u3002 std::string::operator+ \u662f\u5982\u4f55\u4f4e\u6548\u7684\u5462? \u662f\u4e0d\u662f\u5f88\u96be\u5f04\u9519? \u4e8b\u5b9e\u8bc1\u660e\uff0c\u8fd9\u79cd\u4f4e\u6548\u5e76\u4e0d\u660e\u663e\uff0c\u8fd9\u4e24\u4e2a\u7247\u6bb5\u5728\u5b9e\u9645\u6267\u884c\u4e2d\u6709\u7740\u63a5\u8fd1\u76f8\u540c\u7684\u6267\u884c\u65f6\u95f4: 1 2 3 4 5 6 7 std :: string foo = LongString1 (); std :: string bar = LongString2 (); std :: string foobar = foo + bar ; std :: string foo = LongString1 (); std :: string bar = LongString2 (); std :: string foobar = absl :: StrCat ( foo , bar ); \u4f46\u662f\u5bf9\u4e8e\u4e0b\u9762\u4e24\u4e2a\u7247\u6bb5\u5374\u4e0d\u662f\u5982\u6b64: 1 2 3 4 5 6 7 8 9 std :: string foo = LongString1 (); std :: string bar = LongString2 (); std :: string baz = LongString3 (); string foobar = foo + bar + baz ; std :: string foo = LongString1 (); std :: string bar = LongString2 (); std :: string baz = LongString3 (); std :: string foobar = absl :: StrCat ( foo , bar , baz ); \u5f53\u6211\u4eec\u5206\u89e3\u4e00\u4e0b foo + bar + baz \u8868\u8fbe\u5f0f\u4e2d\u53d1\u751f\u7684\u60c5\u51b5\uff0c\u5c31\u53ef\u4ee5\u7406\u89e3\u4e0a\u9762\u4e24\u79cd\u60c5\u51b5\u6709\u6240\u4e0d\u540c\u7684\u539f\u56e0\u4e86\u3002\u5728C++\u4e2d\u6ca1\u6709\u4e09\u4e2a\u53c2\u6570\u7684\u64cd\u4f5c\u7b26\uff0c\u6240\u4ee5\u5fc5\u987b\u8981\u6267\u884c\u4e8c\u6b21 string::operator+ \u64cd\u4f5c\u624d\u80fd\u5b8c\u6210\u4e09\u4e2a\u5b57\u7b26\u4e32\u7684\u76f8\u52a0\u3002\u5728\u4e24\u6b21\u8c03\u7528\u4e4b\u95f4\u4f1a\u6784\u9020\u51fa\u4e00\u4e2a\u4e34\u65f6\u7684\u5b57\u7b26\u4e32\u56e0\u6b64 std::string foobar = foo + bar + baz \u7b49\u540c\u5982\u4e0b: 1 2 std :: string temp = foo + bar ; std :: string foobar = std :: move ( temp ) + baz ; \u5177\u4f53\u6765\u8bf4\u5c31\u662ffoo\u548cbar\u7684\u5185\u5bb9\u5728\u653e\u5165foobar\u4e4b\u524d\u5fc5\u987b\u5148\u590d\u5236\u5230\u4e00\u4e2a\u4e34\u65f6\u4f4d\u7f6e(\u6709\u5173 std::move \uff0c\u770b Tip of the Week #77: Temporaries, moves, and copies )\u3002 C++11 \u5141\u8bb8\u7b2c\u4e8c\u6b21\u8fde\u63a5\u64cd\u4f5c\u7684\u65f6\u5019\u4e0d\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 string \u5bf9\u8c61\u7684\uff1a std::move(temp) + baz \u7b49\u540c\u4e8e std::move(temp.append(baz)) \u3002\u7136\u540e\u6709\u53ef\u80fd\u5176\u5185\u90e8buffer\u5927\u5c0f\u4e0d\u591f\u5bfc\u81f4\u5185\u5b58\u91cd\u65b0\u5206\u914d(\u4f1a\u5bfc\u81f4\u989d\u5916\u7684\u62f7\u8d1d)\uff0c\u56e0\u6b64\u5728\u6700\u574f\u7684\u60c5\u51b5\u4e0b\uff0c n \u5b57\u7b26\u4e32\u8fde\u63a5\u7684\u65f6\u5019\u9700\u8981 O(n) \u6b21\u5185\u5b58\u91cd\u5206\u914d\u3002 \u4e00\u4e2a\u597d\u7684\u66ff\u4ee3\u65b9\u6cd5\u5c31\u662f\u4f7f\u7528 absl::StrCat() \uff0c\u4e00\u4e2a\u4e0d\u9519\u7684\u5e2e\u52a9\u51fd\u6570\u5176\u5b9e\u73b0\u5728 absl/strings/str_cat.h \u6587\u4ef6\u4e2d\uff0c\u901a\u8fc7\u8ba1\u7b97\u5fc5\u8981\u7684\u5b57\u7b26\u4e32\u957f\u5ea6\uff0c\u9884\u5148\u5206\u914d\u5927\u5c0f\uff0c\u5e76\u5c06\u6240\u6709\u8f93\u5165\u6570\u636e\u8fdb\u884c\u8fde\u63a5\uff0c\u5176\u590d\u6742\u5ea6\u4f18\u5316\u5230 O(n) \uff0c\u540c\u6837\u5bf9\u4e8e\u4ee5\u4e0b\u60c5\u51b5\uff1a 1 foobar += foo + bar + baz ; \u4f7f\u7528 abs::StrAppend \u53ef\u4ee5\u5e26\u6765\u540c\u6837\u7684\u4f18\u5316: 1 absl :: StrAppend ( & foobar , foo , bar , baz ); \u540c\u6837\uff0c absl::StrCat() and absl::StrAppend() \u5bf9\u9664\u4e86\u5b57\u7b26\u4e32\u7c7b\u578b\u610f\u5916\u7684\u7c7b\u578b\u8fdb\u884c\u64cd\u4f5c: \u53ef\u4ee5\u4f7f\u7528 absl::StrCat / absl::StrAppend \u5bf9 int32_t , uint32_t , int64_t , uint64_t , float , double , const char* , and string_view \u7b49\u7c7b\u578b\u8fdb\u884c\u8f6c\u6362\uff0c\u50cf\u5982\u4e0b\u8fd9\u6837\uff1a 1 std :: string foo = absl :: StrCat ( \"The year is \" , year );","title":"Tip of the Week #3: String Concatenation and operator+ vs. StrCat()"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-3/#tip-of-the-week-3-string-concatenation-and-operator-vs-strcat","text":"Originally published as totw/3 on 2012-05-11 Updated 2017-09-18; revised 2018-01-22 \u5f53\u4e00\u4e2areviewer\u8bf4\"\u4e0d\u8981\u4f7f\u7528string\u7684\u8fde\u63a5\u64cd\u4f5c\uff0c\u8fd9\u4e0d\u9ad8\u6548\"\uff0c\u901a\u5e38\u4f1a\u8ba9\u63d0\u4ea4\u4ee3\u7801\u7684\u4eba\u5f88\u60ca\u8bb6\u3002 std::string::operator+ \u662f\u5982\u4f55\u4f4e\u6548\u7684\u5462? \u662f\u4e0d\u662f\u5f88\u96be\u5f04\u9519? \u4e8b\u5b9e\u8bc1\u660e\uff0c\u8fd9\u79cd\u4f4e\u6548\u5e76\u4e0d\u660e\u663e\uff0c\u8fd9\u4e24\u4e2a\u7247\u6bb5\u5728\u5b9e\u9645\u6267\u884c\u4e2d\u6709\u7740\u63a5\u8fd1\u76f8\u540c\u7684\u6267\u884c\u65f6\u95f4: 1 2 3 4 5 6 7 std :: string foo = LongString1 (); std :: string bar = LongString2 (); std :: string foobar = foo + bar ; std :: string foo = LongString1 (); std :: string bar = LongString2 (); std :: string foobar = absl :: StrCat ( foo , bar ); \u4f46\u662f\u5bf9\u4e8e\u4e0b\u9762\u4e24\u4e2a\u7247\u6bb5\u5374\u4e0d\u662f\u5982\u6b64: 1 2 3 4 5 6 7 8 9 std :: string foo = LongString1 (); std :: string bar = LongString2 (); std :: string baz = LongString3 (); string foobar = foo + bar + baz ; std :: string foo = LongString1 (); std :: string bar = LongString2 (); std :: string baz = LongString3 (); std :: string foobar = absl :: StrCat ( foo , bar , baz ); \u5f53\u6211\u4eec\u5206\u89e3\u4e00\u4e0b foo + bar + baz \u8868\u8fbe\u5f0f\u4e2d\u53d1\u751f\u7684\u60c5\u51b5\uff0c\u5c31\u53ef\u4ee5\u7406\u89e3\u4e0a\u9762\u4e24\u79cd\u60c5\u51b5\u6709\u6240\u4e0d\u540c\u7684\u539f\u56e0\u4e86\u3002\u5728C++\u4e2d\u6ca1\u6709\u4e09\u4e2a\u53c2\u6570\u7684\u64cd\u4f5c\u7b26\uff0c\u6240\u4ee5\u5fc5\u987b\u8981\u6267\u884c\u4e8c\u6b21 string::operator+ \u64cd\u4f5c\u624d\u80fd\u5b8c\u6210\u4e09\u4e2a\u5b57\u7b26\u4e32\u7684\u76f8\u52a0\u3002\u5728\u4e24\u6b21\u8c03\u7528\u4e4b\u95f4\u4f1a\u6784\u9020\u51fa\u4e00\u4e2a\u4e34\u65f6\u7684\u5b57\u7b26\u4e32\u56e0\u6b64 std::string foobar = foo + bar + baz \u7b49\u540c\u5982\u4e0b: 1 2 std :: string temp = foo + bar ; std :: string foobar = std :: move ( temp ) + baz ; \u5177\u4f53\u6765\u8bf4\u5c31\u662ffoo\u548cbar\u7684\u5185\u5bb9\u5728\u653e\u5165foobar\u4e4b\u524d\u5fc5\u987b\u5148\u590d\u5236\u5230\u4e00\u4e2a\u4e34\u65f6\u4f4d\u7f6e(\u6709\u5173 std::move \uff0c\u770b Tip of the Week #77: Temporaries, moves, and copies )\u3002 C++11 \u5141\u8bb8\u7b2c\u4e8c\u6b21\u8fde\u63a5\u64cd\u4f5c\u7684\u65f6\u5019\u4e0d\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 string \u5bf9\u8c61\u7684\uff1a std::move(temp) + baz \u7b49\u540c\u4e8e std::move(temp.append(baz)) \u3002\u7136\u540e\u6709\u53ef\u80fd\u5176\u5185\u90e8buffer\u5927\u5c0f\u4e0d\u591f\u5bfc\u81f4\u5185\u5b58\u91cd\u65b0\u5206\u914d(\u4f1a\u5bfc\u81f4\u989d\u5916\u7684\u62f7\u8d1d)\uff0c\u56e0\u6b64\u5728\u6700\u574f\u7684\u60c5\u51b5\u4e0b\uff0c n \u5b57\u7b26\u4e32\u8fde\u63a5\u7684\u65f6\u5019\u9700\u8981 O(n) \u6b21\u5185\u5b58\u91cd\u5206\u914d\u3002 \u4e00\u4e2a\u597d\u7684\u66ff\u4ee3\u65b9\u6cd5\u5c31\u662f\u4f7f\u7528 absl::StrCat() \uff0c\u4e00\u4e2a\u4e0d\u9519\u7684\u5e2e\u52a9\u51fd\u6570\u5176\u5b9e\u73b0\u5728 absl/strings/str_cat.h \u6587\u4ef6\u4e2d\uff0c\u901a\u8fc7\u8ba1\u7b97\u5fc5\u8981\u7684\u5b57\u7b26\u4e32\u957f\u5ea6\uff0c\u9884\u5148\u5206\u914d\u5927\u5c0f\uff0c\u5e76\u5c06\u6240\u6709\u8f93\u5165\u6570\u636e\u8fdb\u884c\u8fde\u63a5\uff0c\u5176\u590d\u6742\u5ea6\u4f18\u5316\u5230 O(n) \uff0c\u540c\u6837\u5bf9\u4e8e\u4ee5\u4e0b\u60c5\u51b5\uff1a 1 foobar += foo + bar + baz ; \u4f7f\u7528 abs::StrAppend \u53ef\u4ee5\u5e26\u6765\u540c\u6837\u7684\u4f18\u5316: 1 absl :: StrAppend ( & foobar , foo , bar , baz ); \u540c\u6837\uff0c absl::StrCat() and absl::StrAppend() \u5bf9\u9664\u4e86\u5b57\u7b26\u4e32\u7c7b\u578b\u610f\u5916\u7684\u7c7b\u578b\u8fdb\u884c\u64cd\u4f5c: \u53ef\u4ee5\u4f7f\u7528 absl::StrCat / absl::StrAppend \u5bf9 int32_t , uint32_t , int64_t , uint64_t , float , double , const char* , and string_view \u7b49\u7c7b\u578b\u8fdb\u884c\u8f6c\u6362\uff0c\u50cf\u5982\u4e0b\u8fd9\u6837\uff1a 1 std :: string foo = absl :: StrCat ( \"The year is \" , year );","title":"Tip of the Week #3: String Concatenation and operator+ vs. StrCat()"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-36/","text":"Tip of the Week #36: New Join API Originally published as totw/36 on 2013-03-21 By Greg Miller (jgm@google.com) Updated 2018-01-24 \u201cI got a good mind to join a club and beat you over the head with it.\u201d \u2013 Groucho Marx \u4f60\u4eec\u8bb8\u591a\u4eba\u8981\u6c42\u63d0\u4f9b\u65b0\u7684 Join API \uff0c\u5e76\u4e14\u6211\u4eec\u4e5f\u542c\u5230\u4f60\u7684\u58f0\u97f3\u3002\u6211\u4eec\u73b0\u5728\u6709\u4e00\u4e2a Join \u7684\u51fd\u6570\u6765\u66ff\u6362\u4ed6\u4eec\u6240\u6709\u3002\u5b83\u62fc\u5199\u4e3a absl::StrJoin \uff0c\u4f60\u53ea\u9700\u8981\u7ed9\u5b83\u4e00\u4e2a\u8981\u52a0\u5165\u7684\u5bf9\u8c61\u548c\u4e00\u4e2a\u5206\u9694\u7b26\u4e32\u7684\u96c6\u5408\uff0c\u5269\u4e0b\u7684\u5c31\u5b8c\u6210\u4e86\u3002\u5b83\u5c06\u4e0e std::string \u3001 absl::string_view \u3001 int \u3001 double \u7684\u96c6\u5408\u4e00\u8d77\u5de5\u4f5c\u3002\u4efb\u4f55 absl::StrCat \u6240\u652f\u6301\u7684\u7c7b\u578b absl::StrJoin \u90fd\u652f\u6301\uff0c \u5bf9\u4e8e\u4e0d\u652f\u6301\u7684\u7c7b\u578b\u53ef\u4ee5\u901a\u8fc7\u63d0\u4f9b\u4e00\u4e2a\u5b9a\u5236\u7684 Formatter \u6765\u652f\u6301;\u6211\u4eec\u5c06\u5728\u4e0b\u9762\u770b\u5230\u5982\u4f55\u4f7f\u7528 Formatter \u6765\u8ba9\u6211\u4eec\u5f88\u597d\u5730\u52a0\u5165\u5bf9map\u7c7b\u578b\u7684\u652f\u6301 \u3002 \u73b0\u5728\u6765\u4e3e\u4e00\u4e9b\u7b80\u5355\u7684\u4f8b\u5b50\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 std :: vector < std :: string > v = { \"a\" , \"b\" , \"c\" }; std :: string s = absl :: StrJoin ( v , \"-\" ); // s == \"a-b-c\" std :: vector < absl :: string_view > v = { \"a\" , \"b\" , \"c\" }; std :: string s = absl :: StrJoin ( v . begin (), v . end (), \"-\" ); // s == \"a-b-c\" std :: vector < int > v = { 1 , 2 , 3 }; std :: string s = absl :: StrJoin ( v , \"-\" ); // s == \"1-2-3\" const int a [] = { 1 , 2 , 3 }; std :: string s = absl :: StrJoin ( a , \"-\" ); // s == \"1-2-3\" \u4e0b\u9762\u7684\u4f8b\u5b50\u901a\u8fc7\u6dfb\u52a0\u4e00\u4e2a Formatter \u51fd\u6570\u5e76\u4f7f\u7528\u4e86\u4e00\u4e2a\u4e0d\u901a\u7684\u5206\u9694\u7b26\u6765\u683c\u5f0f\u5316map\u7c7b\u578b\uff0c\u8fd9\u4f7f\u5f97\u8f93\u51fa\u7ed3\u679c\u66f4\u597d\u5e76\u4e14\u53ef\u8bfb\u3002 1 2 3 std :: map < std :: string , int > m = {{ \"a\" , 1 }, { \"b\" , 2 }, { \"c\" , 3 }}; std :: string s = absl :: StrJoin ( m , \";\" , absl :: PairFormatter ( \"=\" )); // s == \"a=1;b=2;c=3\" \u4f60\u4e5f\u53ef\u4ee5\u4f20\u9012\u4e00\u4e2aC++\u7684lambda\u8868\u8fbe\u5f0f\u4f5c\u4e3a Formatter \u3002 1 2 3 4 5 std :: vector < Foo > foos = GetFoos (); std :: string s = absl :: StrJoin ( foos , \", \" , []( std :: string * out , const Foo & foo ) { absl :: StrAppend ( out , foo . ToString ()); }); \u8bf7\u53c2\u8003 absl/strings/str_join.h \u6765\u83b7\u53d6\u66f4\u591a\u7ec6\u8282\u3002","title":"Tip of the Week #36: New Join API"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-36/#tip-of-the-week-36-new-join-api","text":"Originally published as totw/36 on 2013-03-21 By Greg Miller (jgm@google.com) Updated 2018-01-24 \u201cI got a good mind to join a club and beat you over the head with it.\u201d \u2013 Groucho Marx \u4f60\u4eec\u8bb8\u591a\u4eba\u8981\u6c42\u63d0\u4f9b\u65b0\u7684 Join API \uff0c\u5e76\u4e14\u6211\u4eec\u4e5f\u542c\u5230\u4f60\u7684\u58f0\u97f3\u3002\u6211\u4eec\u73b0\u5728\u6709\u4e00\u4e2a Join \u7684\u51fd\u6570\u6765\u66ff\u6362\u4ed6\u4eec\u6240\u6709\u3002\u5b83\u62fc\u5199\u4e3a absl::StrJoin \uff0c\u4f60\u53ea\u9700\u8981\u7ed9\u5b83\u4e00\u4e2a\u8981\u52a0\u5165\u7684\u5bf9\u8c61\u548c\u4e00\u4e2a\u5206\u9694\u7b26\u4e32\u7684\u96c6\u5408\uff0c\u5269\u4e0b\u7684\u5c31\u5b8c\u6210\u4e86\u3002\u5b83\u5c06\u4e0e std::string \u3001 absl::string_view \u3001 int \u3001 double \u7684\u96c6\u5408\u4e00\u8d77\u5de5\u4f5c\u3002\u4efb\u4f55 absl::StrCat \u6240\u652f\u6301\u7684\u7c7b\u578b absl::StrJoin \u90fd\u652f\u6301\uff0c \u5bf9\u4e8e\u4e0d\u652f\u6301\u7684\u7c7b\u578b\u53ef\u4ee5\u901a\u8fc7\u63d0\u4f9b\u4e00\u4e2a\u5b9a\u5236\u7684 Formatter \u6765\u652f\u6301;\u6211\u4eec\u5c06\u5728\u4e0b\u9762\u770b\u5230\u5982\u4f55\u4f7f\u7528 Formatter \u6765\u8ba9\u6211\u4eec\u5f88\u597d\u5730\u52a0\u5165\u5bf9map\u7c7b\u578b\u7684\u652f\u6301 \u3002 \u73b0\u5728\u6765\u4e3e\u4e00\u4e9b\u7b80\u5355\u7684\u4f8b\u5b50\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 std :: vector < std :: string > v = { \"a\" , \"b\" , \"c\" }; std :: string s = absl :: StrJoin ( v , \"-\" ); // s == \"a-b-c\" std :: vector < absl :: string_view > v = { \"a\" , \"b\" , \"c\" }; std :: string s = absl :: StrJoin ( v . begin (), v . end (), \"-\" ); // s == \"a-b-c\" std :: vector < int > v = { 1 , 2 , 3 }; std :: string s = absl :: StrJoin ( v , \"-\" ); // s == \"1-2-3\" const int a [] = { 1 , 2 , 3 }; std :: string s = absl :: StrJoin ( a , \"-\" ); // s == \"1-2-3\" \u4e0b\u9762\u7684\u4f8b\u5b50\u901a\u8fc7\u6dfb\u52a0\u4e00\u4e2a Formatter \u51fd\u6570\u5e76\u4f7f\u7528\u4e86\u4e00\u4e2a\u4e0d\u901a\u7684\u5206\u9694\u7b26\u6765\u683c\u5f0f\u5316map\u7c7b\u578b\uff0c\u8fd9\u4f7f\u5f97\u8f93\u51fa\u7ed3\u679c\u66f4\u597d\u5e76\u4e14\u53ef\u8bfb\u3002 1 2 3 std :: map < std :: string , int > m = {{ \"a\" , 1 }, { \"b\" , 2 }, { \"c\" , 3 }}; std :: string s = absl :: StrJoin ( m , \";\" , absl :: PairFormatter ( \"=\" )); // s == \"a=1;b=2;c=3\" \u4f60\u4e5f\u53ef\u4ee5\u4f20\u9012\u4e00\u4e2aC++\u7684lambda\u8868\u8fbe\u5f0f\u4f5c\u4e3a Formatter \u3002 1 2 3 4 5 std :: vector < Foo > foos = GetFoos (); std :: string s = absl :: StrJoin ( foos , \", \" , []( std :: string * out , const Foo & foo ) { absl :: StrAppend ( out , foo . ToString ()); }); \u8bf7\u53c2\u8003 absl/strings/str_join.h \u6765\u83b7\u53d6\u66f4\u591a\u7ec6\u8282\u3002","title":"Tip of the Week #36: New Join API"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-42/","text":"Tip of the Week #42: Prefer Factory Functions to Initializer Methods Originally posted as totw/42 on 2013-05-10 By Geoffrey Romer (gromer@google.com) Revised 2017-12-21 \u201cThe man who builds a factory builds a temple; the man who works there worships there, and to each is due, not scorn and blame, but reverence and praise.\u201d \u2013 Calvin Coolidge \u5728\u4e0d\u5141\u8bb8\u5f02\u5e38\u7684\u73af\u5883\u4e2d(\u4f8b\u5982\u5728Google\u5185\u90e8)\uff0c\u6709\u6548\u7684 C++ \u6784\u9020\u51fd\u6570\u5fc5\u987b\u6210\u529f\uff0c\u56e0\u4e3a\u5b83\u6ca1\u6709\u529e\u6cd5\u628a\u9519\u8bef\u62a5\u544a\u7ed9\u5b83\u7684\u8c03\u7528\u8005\u3002\u5f53\u7136\u4f60\u53ef\u4ee5\u4f7f\u7528 abort() \uff0c\u4f46\u662f\u8fd9\u6837\u505a\u4f1a\u5bfc\u81f4\u6574\u4e2a\u7a0b\u5e8f crash \u3002\u8fd9\u5728\u751f\u4ea7\u73af\u5883\u7684\u4ee3\u7801\u4e2d\u901a\u5e38\u662f\u4e0d\u88ab\u63a5\u53d7\u7684\u3002 \u5982\u679c\u4f60\u7684\u7c7b\u521d\u59cb\u5316\u903b\u8f91\u65e0\u6cd5\u907f\u514d\u5931\u8d25\u7684\u53ef\u80fd\uff0c\u4e00\u4e2a\u5e38\u89c1\u7684\u529e\u6cd5\u5c31\u662f\u7ed9\u8fd9\u4e2a\u7c7b\u63d0\u4f9b\u4e00\u4e2a initializer \u65b9\u6cd5(\u4e5f\u88ab\u79f0\u4e3a\"init method\")\uff0c\u7528\u6765\u6267\u884c\u4efb\u4f55\u53ef\u80fd\u4f1a\u5931\u8d25\u7684\u521d\u59cb\u5316\u5de5\u4f5c\uff0c\u5e76\u901a\u8fc7\u8fd4\u56de\u503c\u6765\u901a\u77e5\u8c03\u7528\u8005\u521d\u59cb\u5316\u5931\u8d25\u3002\u5047\u8bbe\u7528\u6237\u901a\u5e38\u5728\u6784\u9020\u5b8c\u6210\u540e\u4f1a\u7acb\u5373\u8c03\u7528\u8fd9\u4e2a\u521d\u59cb\u5316\u65b9\u6cd5\uff0c\u5982\u679c\u5931\u8d25\u4e86\u5c31\u7acb\u5373\u9500\u6bc1\u8be5\u5bf9\u8c61\uff0c\u7136\u800c\u8fd9\u4e2a\u5047\u8bbe\u5e76\u4e0d\u603b\u662f\u8bb0\u5f55\u5728\u6848\uff0c\u4e5f\u4e0d\u603b\u662f\u5f3a\u5236\u88ab\u7ea6\u675f\u8981\u6267\u884c\u7684\u3002\u7528\u6237\u5f88\u5bb9\u6613\u4f1a\u5728\u521d\u59cb\u5316\u4e4b\u524d\u5c31\u5f00\u59cb\u8c03\u7528\u5176\u5b83\u65b9\u6cd5\uff0c\u6216\u8005\u5728\u521d\u59cb\u5316\u5931\u8d25\u540e\u8c03\u7528\u3002\u6709\u7684\u65f6\u5019\u7c7b\u5b9e\u9645\u4e0a\u662f\u9f13\u52b1\u8fd9\u79cd\u884c\u4e3a\u7684\uff0c\u4f8b\u5982\u901a\u8fc7\u63d0\u4f9b\u4e00\u4e2a\u5728\u521d\u59cb\u5316\u4e4b\u524d\u7528\u4e8e\u914d\u7f6e\u5bf9\u8c61\u7684\u65b9\u6cd5\uff0c\u53c8\u6216\u8005\u80fd\u591f\u5728\u521d\u59cb\u5316\u5931\u8d25\u540e\u8bfb\u53d6\u5230\u9519\u8bef\u3002 \u8fd9\u4e2a\u8bbe\u8ba1\u4f1a\u8ba9\u4f60\u81f3\u5c11\u7ef4\u62a4\u4e00\u4e2a\u81f3\u5c11\u6709\u4e24\u4e2a\u4e0d\u540c\u7528\u6237\u53ef\u89c1\u72b6\u6001\u7684\u7c7b\uff0c\u901a\u5e38\u6709\u4e09\u4e2a: \u521d\u59cb\u5316\u3001\u672a\u521d\u59cb\u5316\u548c\u521d\u59cb\u5316\u5931\u8d25\u3002\u8fd9\u6837\u7684\u8bbe\u8ba1\u5de5\u4f5c\u9700\u8981\u5f88\u591a\u89c4\u5219\u8981\u9075\u5b88\uff0c\u8fd9\u4e2a\u7c7b\u7684\u6bcf\u4e00\u4e2a\u65b9\u6cd5\u90fd\u9700\u8981\u6307\u5b9a\u53ef\u4ee5\u5728\u54ea\u4e9b\u72b6\u6001\u4e0b\u88ab\u8c03\u7528\uff0c\u7528\u6237\u5fc5\u987b\u9075\u5b88\u8fd9\u4e9b\u89c4\u5219\uff0c\u5982\u679c\u8fd9\u4e2a\u89c4\u5219\u5931\u6548\u4e86\uff0c\u90a3\u4e48\u5ba2\u6237\u7aef\u5f00\u53d1\u4eba\u5458\u4f1a\u7f16\u5199\u51fa\u4efb\u4f55\u53ef\u80fd\u53d1\u751f\u7684\u4ee3\u7801\uff0c\u65e0\u8bba\u4f60\u6253\u7b97\u5982\u4f55\u53bb\u652f\u6301\u3002\u5f53\u8fd9\u79cd\u60c5\u51b5\u53d1\u751f\u4e86\uff0c\u90a3\u4e48\u53ef\u7ef4\u62a4\u6027\u53d8\u5f97\u5f88\u5dee\uff0c\u56e0\u4e3a\u4f60\u7684\u5b9e\u73b0\u5fc5\u987b\u5f00\u59cb\u652f\u6301\u4efb\u4f55\u53ef\u80fd\u7684\u521d\u59cb\u5316\u65b9\u6cd5\u8c03\u7528\u7684\u7ec4\u5408\u3002\u5b9e\u9645\u4e0a\u4f60\u7684\u8fd9\u4e9b\u5b9e\u73b0\u5df2\u7ecf\u53d8\u6210\u4e86\u4f60\u7684\u63a5\u53e3\u7684\u4e00\u90e8\u5206\u4e86 ( Hyrum\u2019s Law )\u3002 \u5e78\u8fd0\u7684\u662f\uff0c\u6709\u4e00\u4e2a\u7b80\u5355\u7684\u65b9\u6848\u5e76\u4e14\u6ca1\u6709\u8fd9\u4e9b\u7f3a\u70b9\uff1a\u63d0\u4f9b\u4e00\u4e2a\u5de5\u5382\u51fd\u6570\uff0c\u5b83\u53ef\u4ee5\u521b\u5efa\u5e76\u521d\u59cb\u5316\u7c7b\u7684\u5b9e\u4f8b\uff0c\u5e76\u8fd4\u56de\u8fd9\u4e2a\u7c7b\u7684\u6307\u9488\u6216 absl::optional ( TotW #123 )\uff0c\u4f7f\u7528 null \u6765\u8868\u660e\u5931\u8d25\u3002\u8fd9\u662f\u4e00\u4e2a\u4f7f\u7528 unique_ptr<> \u7684\u73a9\u5177\u793a\u4f8b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 // foo.h class Foo { public : // Factory method: creates and returns a Foo. // May return null on failure. static std :: unique_ptr < Foo > Create (); // Foo is not copyable. Foo ( const Foo & ) = delete ; Foo & operator = ( const Foo & ) = delete ; private : // Clients can't invoke the constructor directly. Foo (); }; // foo.c std :: unique_ptr < Foo > Foo :: Create () { // Note that since Foo's constructor is private, we have to use new. return absl :: WrapUnique ( new Foo ()); } \u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\uff0c\u8fd9\u79cd\u6a21\u5f0f\u662f\u4e24\u5168\u5176\u7f8e\u7684\uff0c\u5de5\u5382\u51fd\u6570 Foo::Create \u50cf\u6784\u9020\u51fd\u6570\u4e00\u6837\uff0c\u66b4\u9732\u51fa\u4e00\u4e2a\u5df2\u7ecf\u5b8c\u5168\u521d\u59cb\u5316\u597d\u7684\u5bf9\u8c61\uff0c\u548c\u6784\u9020\u51fd\u6570\u4e0d\u540c\u7684\u662f\uff0c\u8fd9\u79cd\u65b9\u5f0f\u53ef\u4ee5\u50cf\u8c03\u7528\u521d\u59cb\u5316\u65b9\u6cd5\u4e00\u6837\u5728\u5931\u8d25\u7684\u65f6\u5019\u53ef\u4ee5\u77e5\u9053\u3002\u5de5\u5382\u51fd\u6570\u7684\u53e6\u5916\u4e00\u4e2a\u4f18\u70b9\u5c31\u662f\u53ef\u4ee5\u8fd4\u56de\u4efb\u4f55\u5b50\u7c7b\u7684\u5b9e\u4f8b(\u5982\u679c\u662f\u4f7f\u7528 absl::optional \u4f5c\u4e3a\u8fd4\u56de\u7c7b\u578b\u7684\u8bdd\uff0c\u8fd9\u662f\u4e0d\u53ef\u80fd\u7684\u3002)\u8fd9\u5141\u8bb8\u4f60\u5728\u4e0d\u66f4\u65b0\u7528\u6237\u4ee3\u7801\u7684\u60c5\u51b5\u4e0b\u66f4\u6362\u53e6\u5916\u4e00\u79cd\u5b9e\u73b0\uff0c\u751a\u81f3\u662f\u6839\u636e\u7528\u6237\u7684\u8f93\u5165\u52a8\u6001\u7684\u9009\u62e9\u5b9e\u73b0\u7c7b\u3002 \u8fd9\u79cd\u65b9\u6cd5\u7684\u4e3b\u8981\u7f3a\u70b9\u5c31\u662f\u5b83\u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u6307\u5411\u5806\u4e0a\u5206\u914d\u7684\u5bf9\u8c61\uff0c\u6240\u4ee5\u4e0d\u9002\u5408\u90a3\u79cd\u8bbe\u8ba1\u5728\u5806\u6808\u4e0a\u7684\u503c\u7c7b\u578b\u3002\u8fd9\u79cd\u7c7b\u901a\u5e38\u4e0d\u9700\u8981\u590d\u6742\u7684\u521d\u59cb\u5316\u3002\u53e6\u5916\u5de5\u5382\u51fd\u6570\u65e0\u6cd5\u7528\u505a\u4e00\u4e2a\u6d3e\u751f\u7c7b\u7684\u6784\u9020\u51fd\u6570\u9700\u8981\u8c03\u7528\u7236\u7c7b\u7684\u521d\u59cb\u5316\u51fd\u6570\u8fdb\u884c\u521d\u59cb\u5316\u7684\u573a\u666f\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u521d\u59cb\u5316\u65b9\u6cd5\u901a\u5e38\u5728\u7236\u7c7b\u4e2d\u90fd\u662f protected \u7c7b\u578b\u7684\u3002\u5c3d\u7ba1\u5982\u6b64\u516c\u5171 API \u4ecd\u7136\u53ef\u4ee5\u4f7f\u7528\u5de5\u5382\u51fd\u6570\u3002","title":"Tip of the Week #42: Prefer Factory Functions to Initializer Methods"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-42/#tip-of-the-week-42-prefer-factory-functions-to-initializer-methods","text":"Originally posted as totw/42 on 2013-05-10 By Geoffrey Romer (gromer@google.com) Revised 2017-12-21 \u201cThe man who builds a factory builds a temple; the man who works there worships there, and to each is due, not scorn and blame, but reverence and praise.\u201d \u2013 Calvin Coolidge \u5728\u4e0d\u5141\u8bb8\u5f02\u5e38\u7684\u73af\u5883\u4e2d(\u4f8b\u5982\u5728Google\u5185\u90e8)\uff0c\u6709\u6548\u7684 C++ \u6784\u9020\u51fd\u6570\u5fc5\u987b\u6210\u529f\uff0c\u56e0\u4e3a\u5b83\u6ca1\u6709\u529e\u6cd5\u628a\u9519\u8bef\u62a5\u544a\u7ed9\u5b83\u7684\u8c03\u7528\u8005\u3002\u5f53\u7136\u4f60\u53ef\u4ee5\u4f7f\u7528 abort() \uff0c\u4f46\u662f\u8fd9\u6837\u505a\u4f1a\u5bfc\u81f4\u6574\u4e2a\u7a0b\u5e8f crash \u3002\u8fd9\u5728\u751f\u4ea7\u73af\u5883\u7684\u4ee3\u7801\u4e2d\u901a\u5e38\u662f\u4e0d\u88ab\u63a5\u53d7\u7684\u3002 \u5982\u679c\u4f60\u7684\u7c7b\u521d\u59cb\u5316\u903b\u8f91\u65e0\u6cd5\u907f\u514d\u5931\u8d25\u7684\u53ef\u80fd\uff0c\u4e00\u4e2a\u5e38\u89c1\u7684\u529e\u6cd5\u5c31\u662f\u7ed9\u8fd9\u4e2a\u7c7b\u63d0\u4f9b\u4e00\u4e2a initializer \u65b9\u6cd5(\u4e5f\u88ab\u79f0\u4e3a\"init method\")\uff0c\u7528\u6765\u6267\u884c\u4efb\u4f55\u53ef\u80fd\u4f1a\u5931\u8d25\u7684\u521d\u59cb\u5316\u5de5\u4f5c\uff0c\u5e76\u901a\u8fc7\u8fd4\u56de\u503c\u6765\u901a\u77e5\u8c03\u7528\u8005\u521d\u59cb\u5316\u5931\u8d25\u3002\u5047\u8bbe\u7528\u6237\u901a\u5e38\u5728\u6784\u9020\u5b8c\u6210\u540e\u4f1a\u7acb\u5373\u8c03\u7528\u8fd9\u4e2a\u521d\u59cb\u5316\u65b9\u6cd5\uff0c\u5982\u679c\u5931\u8d25\u4e86\u5c31\u7acb\u5373\u9500\u6bc1\u8be5\u5bf9\u8c61\uff0c\u7136\u800c\u8fd9\u4e2a\u5047\u8bbe\u5e76\u4e0d\u603b\u662f\u8bb0\u5f55\u5728\u6848\uff0c\u4e5f\u4e0d\u603b\u662f\u5f3a\u5236\u88ab\u7ea6\u675f\u8981\u6267\u884c\u7684\u3002\u7528\u6237\u5f88\u5bb9\u6613\u4f1a\u5728\u521d\u59cb\u5316\u4e4b\u524d\u5c31\u5f00\u59cb\u8c03\u7528\u5176\u5b83\u65b9\u6cd5\uff0c\u6216\u8005\u5728\u521d\u59cb\u5316\u5931\u8d25\u540e\u8c03\u7528\u3002\u6709\u7684\u65f6\u5019\u7c7b\u5b9e\u9645\u4e0a\u662f\u9f13\u52b1\u8fd9\u79cd\u884c\u4e3a\u7684\uff0c\u4f8b\u5982\u901a\u8fc7\u63d0\u4f9b\u4e00\u4e2a\u5728\u521d\u59cb\u5316\u4e4b\u524d\u7528\u4e8e\u914d\u7f6e\u5bf9\u8c61\u7684\u65b9\u6cd5\uff0c\u53c8\u6216\u8005\u80fd\u591f\u5728\u521d\u59cb\u5316\u5931\u8d25\u540e\u8bfb\u53d6\u5230\u9519\u8bef\u3002 \u8fd9\u4e2a\u8bbe\u8ba1\u4f1a\u8ba9\u4f60\u81f3\u5c11\u7ef4\u62a4\u4e00\u4e2a\u81f3\u5c11\u6709\u4e24\u4e2a\u4e0d\u540c\u7528\u6237\u53ef\u89c1\u72b6\u6001\u7684\u7c7b\uff0c\u901a\u5e38\u6709\u4e09\u4e2a: \u521d\u59cb\u5316\u3001\u672a\u521d\u59cb\u5316\u548c\u521d\u59cb\u5316\u5931\u8d25\u3002\u8fd9\u6837\u7684\u8bbe\u8ba1\u5de5\u4f5c\u9700\u8981\u5f88\u591a\u89c4\u5219\u8981\u9075\u5b88\uff0c\u8fd9\u4e2a\u7c7b\u7684\u6bcf\u4e00\u4e2a\u65b9\u6cd5\u90fd\u9700\u8981\u6307\u5b9a\u53ef\u4ee5\u5728\u54ea\u4e9b\u72b6\u6001\u4e0b\u88ab\u8c03\u7528\uff0c\u7528\u6237\u5fc5\u987b\u9075\u5b88\u8fd9\u4e9b\u89c4\u5219\uff0c\u5982\u679c\u8fd9\u4e2a\u89c4\u5219\u5931\u6548\u4e86\uff0c\u90a3\u4e48\u5ba2\u6237\u7aef\u5f00\u53d1\u4eba\u5458\u4f1a\u7f16\u5199\u51fa\u4efb\u4f55\u53ef\u80fd\u53d1\u751f\u7684\u4ee3\u7801\uff0c\u65e0\u8bba\u4f60\u6253\u7b97\u5982\u4f55\u53bb\u652f\u6301\u3002\u5f53\u8fd9\u79cd\u60c5\u51b5\u53d1\u751f\u4e86\uff0c\u90a3\u4e48\u53ef\u7ef4\u62a4\u6027\u53d8\u5f97\u5f88\u5dee\uff0c\u56e0\u4e3a\u4f60\u7684\u5b9e\u73b0\u5fc5\u987b\u5f00\u59cb\u652f\u6301\u4efb\u4f55\u53ef\u80fd\u7684\u521d\u59cb\u5316\u65b9\u6cd5\u8c03\u7528\u7684\u7ec4\u5408\u3002\u5b9e\u9645\u4e0a\u4f60\u7684\u8fd9\u4e9b\u5b9e\u73b0\u5df2\u7ecf\u53d8\u6210\u4e86\u4f60\u7684\u63a5\u53e3\u7684\u4e00\u90e8\u5206\u4e86 ( Hyrum\u2019s Law )\u3002 \u5e78\u8fd0\u7684\u662f\uff0c\u6709\u4e00\u4e2a\u7b80\u5355\u7684\u65b9\u6848\u5e76\u4e14\u6ca1\u6709\u8fd9\u4e9b\u7f3a\u70b9\uff1a\u63d0\u4f9b\u4e00\u4e2a\u5de5\u5382\u51fd\u6570\uff0c\u5b83\u53ef\u4ee5\u521b\u5efa\u5e76\u521d\u59cb\u5316\u7c7b\u7684\u5b9e\u4f8b\uff0c\u5e76\u8fd4\u56de\u8fd9\u4e2a\u7c7b\u7684\u6307\u9488\u6216 absl::optional ( TotW #123 )\uff0c\u4f7f\u7528 null \u6765\u8868\u660e\u5931\u8d25\u3002\u8fd9\u662f\u4e00\u4e2a\u4f7f\u7528 unique_ptr<> \u7684\u73a9\u5177\u793a\u4f8b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 // foo.h class Foo { public : // Factory method: creates and returns a Foo. // May return null on failure. static std :: unique_ptr < Foo > Create (); // Foo is not copyable. Foo ( const Foo & ) = delete ; Foo & operator = ( const Foo & ) = delete ; private : // Clients can't invoke the constructor directly. Foo (); }; // foo.c std :: unique_ptr < Foo > Foo :: Create () { // Note that since Foo's constructor is private, we have to use new. return absl :: WrapUnique ( new Foo ()); } \u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\uff0c\u8fd9\u79cd\u6a21\u5f0f\u662f\u4e24\u5168\u5176\u7f8e\u7684\uff0c\u5de5\u5382\u51fd\u6570 Foo::Create \u50cf\u6784\u9020\u51fd\u6570\u4e00\u6837\uff0c\u66b4\u9732\u51fa\u4e00\u4e2a\u5df2\u7ecf\u5b8c\u5168\u521d\u59cb\u5316\u597d\u7684\u5bf9\u8c61\uff0c\u548c\u6784\u9020\u51fd\u6570\u4e0d\u540c\u7684\u662f\uff0c\u8fd9\u79cd\u65b9\u5f0f\u53ef\u4ee5\u50cf\u8c03\u7528\u521d\u59cb\u5316\u65b9\u6cd5\u4e00\u6837\u5728\u5931\u8d25\u7684\u65f6\u5019\u53ef\u4ee5\u77e5\u9053\u3002\u5de5\u5382\u51fd\u6570\u7684\u53e6\u5916\u4e00\u4e2a\u4f18\u70b9\u5c31\u662f\u53ef\u4ee5\u8fd4\u56de\u4efb\u4f55\u5b50\u7c7b\u7684\u5b9e\u4f8b(\u5982\u679c\u662f\u4f7f\u7528 absl::optional \u4f5c\u4e3a\u8fd4\u56de\u7c7b\u578b\u7684\u8bdd\uff0c\u8fd9\u662f\u4e0d\u53ef\u80fd\u7684\u3002)\u8fd9\u5141\u8bb8\u4f60\u5728\u4e0d\u66f4\u65b0\u7528\u6237\u4ee3\u7801\u7684\u60c5\u51b5\u4e0b\u66f4\u6362\u53e6\u5916\u4e00\u79cd\u5b9e\u73b0\uff0c\u751a\u81f3\u662f\u6839\u636e\u7528\u6237\u7684\u8f93\u5165\u52a8\u6001\u7684\u9009\u62e9\u5b9e\u73b0\u7c7b\u3002 \u8fd9\u79cd\u65b9\u6cd5\u7684\u4e3b\u8981\u7f3a\u70b9\u5c31\u662f\u5b83\u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u6307\u5411\u5806\u4e0a\u5206\u914d\u7684\u5bf9\u8c61\uff0c\u6240\u4ee5\u4e0d\u9002\u5408\u90a3\u79cd\u8bbe\u8ba1\u5728\u5806\u6808\u4e0a\u7684\u503c\u7c7b\u578b\u3002\u8fd9\u79cd\u7c7b\u901a\u5e38\u4e0d\u9700\u8981\u590d\u6742\u7684\u521d\u59cb\u5316\u3002\u53e6\u5916\u5de5\u5382\u51fd\u6570\u65e0\u6cd5\u7528\u505a\u4e00\u4e2a\u6d3e\u751f\u7c7b\u7684\u6784\u9020\u51fd\u6570\u9700\u8981\u8c03\u7528\u7236\u7c7b\u7684\u521d\u59cb\u5316\u51fd\u6570\u8fdb\u884c\u521d\u59cb\u5316\u7684\u573a\u666f\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u521d\u59cb\u5316\u65b9\u6cd5\u901a\u5e38\u5728\u7236\u7c7b\u4e2d\u90fd\u662f protected \u7c7b\u578b\u7684\u3002\u5c3d\u7ba1\u5982\u6b64\u516c\u5171 API \u4ecd\u7136\u53ef\u4ee5\u4f7f\u7528\u5de5\u5382\u51fd\u6570\u3002","title":"Tip of the Week #42: Prefer Factory Functions to Initializer Methods"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-45/","text":"Tip of the Week #45: Avoid Flags, Especially in Library Code Originally posted as TotW #45 on June 3, 2013 *by Titus Winters \u201cWhat I really want is the behavior of my code to be controlled by a global variable that cannot be statically predicted, whose usage is incompletely logged, and which can only be removed from my code with great difficulty.\u201d \u2013 Nobody, Ever \u751f\u4ea7\u4ee3\u7801\u4e2d\u6807\u5fd7\u7684\u5e38\u89c1\u7528\u6cd5\uff0c\u7279\u522b\u662f\u5728\u5e93\u4e2d\uff0c\u662f\u4e00\u4e2a\u9519\u8bef\u3002\u9664\u975e\u771f\u7684\u6709\u5fc5\u8981\uff0c\u5426\u5219\u4e0d\u8981\u5728\u90a3\u91cc\u4f7f\u7528`flag\uff0c\u6211\u4eec\u8bf4\u4e86\u3002 \u6807\u5fd7\u662f\u5168\u5c40\u53d8\u91cf\uff0c\u53ea\u4f1a\u66f4\u7cdf\uff1a\u4f60\u4e0d\u77e5\u9053\u8fd9\u4e2a\u53d8\u91cf\u5728\u4ee3\u7801\u4e2d\u5728\u54ea\u91cc\u88ab\u8bbf\u95ee\uff0c\u4e00\u4e2aFlag\u53ef\u80fd\u4e0d\u4ec5\u4ec5\u5728\u542f\u52a8\u7684\u65f6\u5019\u88ab\u8bbe\u7f6e\uff0c\u800c\u4e14\u53ef\u4ee5\u901a\u8fc7\u4efb\u610f\u65b9\u5f0f\u7a0d\u540e\u4fee\u6539\u3002 \u5982\u679c\u4f60\u5728\u4f60\u7684\u4e8c\u8fdb\u5236\u4e2d\u8fd0\u884c\u4e86\u4e00\u4e2aserver\uff0c\u901a\u5e38\u65e0\u6cd5\u4fdd\u8bc1\u60a8\u7684flag\u7684\u503c\u5728\u6bcf\u6b21\u5468\u671f\u90fd\u4fdd\u6301\u4e0d\u53d8\uff0c\u4e5f\u4e0d\u4fdd\u8bc1\u5728\u503c\u6539\u53d8\u65f6\u4f1a\u6709\u4efb\u4f55\u901a\u77e5\uff0c\u4e5f\u6ca1\u6709\u4efb\u4f55\u53d1\u73b0 \u8fd9\u79cd\u53d8\u5316\u7684\u65b9\u6cd5\u3002 \u5982\u679c\u4f60\u53ef\u4ee5\u5728\u751f\u4ea7\u73af\u5883\u4e0b\u76f4\u63a5\u8bb0\u5f55\u4f60\u7684\u6bcf\u4e00\u4e2a\u4e8c\u8fdb\u5236\u7684\u76f4\u63a5\u8c03\u7528\uff0c\u5c06\u5176\u5b58\u50a8\u5728\u65e5\u5fd7\u4e2d\uff0c\u8fd9\u662fOK\u7684\uff0c\u4f46\u662f\u5927\u591a\u6570\u73af\u5883\u662f\u65e0\u6cd5\u8fd9\u6837\u5de5\u4f5c\u7684\u3002\u5bf9\u4e8e\u5e93\u4ee3\u7801\u6765\u8bf4\uff0c\u8fd9\u79cd \u4e0d\u786e\u5b9a\u6027\u7279\u522b\u5371\u9669\u3002\u4f60\u600e\u4e48\u77e5\u9053\u67d0\u4e2a\u7279\u5b9a\u7684\u529f\u80fd\u7684\u4f7f\u7528\u4f55\u65f6\u771f\u7684\u7ed3\u675f? \u7b80\u5355\u7684\u7b54\u6848\u662f: \u4f60\u505a\u4e0d\u5230\u3002 \u6b64\u5916Flags\u4e5f\u4f7f\u5f97\u5904\u7406dead code\u53d8\u7684\u66f4\u52a0\u6709\u6311\u6218\u3002\u5728\u8fc1\u79fb\u5230\u4e00\u4e2a\u65b0\u7684backends\u7684\u65f6\u5019\uff0c\u4f60\u8ba4\u4e3a\u5220\u9664\u9057\u7559\u4ee3\u7801\u53ea\u662f\u5220\u9664\u4e0d\u5fc5\u8981\u7684\u6784\u5efa\u4f9d\u8d56\u5173\u7cfb\uff0c\u5e76\u53d1\u5e03\u5386\u53f2\u8bb0\u5f55\u4e2d\u6700\u4ee4\u4eba\u6ee1\u610f\u7684 git rm \u3002 \u4f60\u9519\u4e86\uff0c\u5982\u679c\u4f60\u7684\u9057\u7559\u4e8c\u8fdb\u5236\u6587\u4ef6\u6709\u6570\u767e\u4e2a\u7531\u751f\u4ea7\u4ee3\u7801\u5b9a\u4e49\u548c\u5f15\u7528\u7684Flag\uff0c\u90a3\u4e48\u7b80\u5355\u5730\u5220\u9664\u6b7b\u4ee3\u7801\u5c06\u7ed9\u60a8\u7684\u53d1\u5e03\u5de5\u7a0b\u5e08\u5e26\u6765\u5de8\u5927\u7684\u95ee\u9898\uff1a\u5728\u8fd9\u6837\u7684\u66f4\u6539\u4e4b\u540e\u51e0\u4e4e\u6ca1\u6709\u7a0b\u5e8f\u4f1a\u542f\u52a8\u3002 \u8fd9\u662f\u6240\u6709\u8fd9\u4e00\u5207\u4e2d\u6700\u7cdf\u7cd5\u7684\u90e8\u5206\uff1f 2012\u5e74\u521d\u5728\u8c37\u6b4c\u8fdb\u884c\u7684\u4e00\u9879\u5206\u6790\u53d1\u73b0\uff0c\u5927\u591a\u6570 C++ flag\uff0c\u4ece\u672a\u5b9e\u9645\u53d8\u5316\u3002 \u4f46\u662f\uff0cFlag\u5728\u67d0\u4e9b\u573a\u5408\u662f\u5408\u9002\u7684\uff1a\u6bd4\u5982\u7528flags\u6765\u63a7\u5236backstrace\u7684\u6253\u5370\uff0cFeature Flag\uff0c\u66f4\u5e7f\u6cdb\u5730\u8bf4\uff0c\u7528\u4e8e\u5c06\u540d\u79f0/\u503c\u8f93\u5165\u4f20\u9012\u7ed9\u4e8c\u8fdb\u5236\u6587\u4ef6\u5e76\u4ec5\u5728 main() \u4e2d\u4f7f\u7528\u7684\u6807\u5fd7\u6bd4\u4f4d\u7f6e\u53c2\u6570\u66f4\u6613\u4e8e\u7ef4\u62a4\u3002 \u5373\u4f7f\u8003\u8651\u5230\u8fd9\u4e9b\u8b66\u544a\uff0c\u73b0\u5728\u6211\u4eec\u90fd\u5e94\u8be5\u597d\u597d\u5ba1\u89c6\u4e0b\u6211\u4eec\u5bf9Flag\u7684\u4f7f\u7528\u3002\u4e0b\u6b21\u4f60\u60f3\u5728\u4f60\u7684\u5e93\u4e2d\u6dfb\u52a0\u4e00\u4e2aFlag\u7684\u65f6\u5019\uff0c\u82b1\u70b9\u65f6\u95f4\u5bfb\u627e\u4e00\u4e2a\u66f4\u597d\u7684\u65b9\u6cd5\u3002\u4f8b\u5982\u53ef\u4ee5\u663e\u793a\u7684\u4f20\u9012\u914d\u7f6e \u8fd9\u51e0\u4e4e\u603b\u662f\u66f4\u5bb9\u6613\u3001\u5408\u7406\u7684\u63a8\u7406\uff0c\u4f46\u662f\u4e5f\u66f4\u5bb9\u6613\u7ef4\u62a4\u3002\u53c8\u6216\u8005\u662f\u5c06\u6570\u5b57Flag\u8f6c\u6362\u4e3a\u7f16\u8bd1\u65f6\u5e38\u91cf\u3002\u5982\u679c\u5728\u4ee3\u7801\u8bc4\u5ba1\u4e2d\u9047\u5230\u65b0\u7684Flag\uff0c\u8bf7\u62b5\u5236\u3002\u6bcf\u4e00\u4e2aFlag\u7684\u5f15\u5165\u90fd\u5e94\u8be5\u662f\u5408\u7406\u7684\u3002","title":"Tip of the Week #45: Avoid Flags, Especially in Library Code"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-45/#tip-of-the-week-45-avoid-flags-especially-in-library-code","text":"Originally posted as TotW #45 on June 3, 2013 *by Titus Winters \u201cWhat I really want is the behavior of my code to be controlled by a global variable that cannot be statically predicted, whose usage is incompletely logged, and which can only be removed from my code with great difficulty.\u201d \u2013 Nobody, Ever \u751f\u4ea7\u4ee3\u7801\u4e2d\u6807\u5fd7\u7684\u5e38\u89c1\u7528\u6cd5\uff0c\u7279\u522b\u662f\u5728\u5e93\u4e2d\uff0c\u662f\u4e00\u4e2a\u9519\u8bef\u3002\u9664\u975e\u771f\u7684\u6709\u5fc5\u8981\uff0c\u5426\u5219\u4e0d\u8981\u5728\u90a3\u91cc\u4f7f\u7528`flag\uff0c\u6211\u4eec\u8bf4\u4e86\u3002 \u6807\u5fd7\u662f\u5168\u5c40\u53d8\u91cf\uff0c\u53ea\u4f1a\u66f4\u7cdf\uff1a\u4f60\u4e0d\u77e5\u9053\u8fd9\u4e2a\u53d8\u91cf\u5728\u4ee3\u7801\u4e2d\u5728\u54ea\u91cc\u88ab\u8bbf\u95ee\uff0c\u4e00\u4e2aFlag\u53ef\u80fd\u4e0d\u4ec5\u4ec5\u5728\u542f\u52a8\u7684\u65f6\u5019\u88ab\u8bbe\u7f6e\uff0c\u800c\u4e14\u53ef\u4ee5\u901a\u8fc7\u4efb\u610f\u65b9\u5f0f\u7a0d\u540e\u4fee\u6539\u3002 \u5982\u679c\u4f60\u5728\u4f60\u7684\u4e8c\u8fdb\u5236\u4e2d\u8fd0\u884c\u4e86\u4e00\u4e2aserver\uff0c\u901a\u5e38\u65e0\u6cd5\u4fdd\u8bc1\u60a8\u7684flag\u7684\u503c\u5728\u6bcf\u6b21\u5468\u671f\u90fd\u4fdd\u6301\u4e0d\u53d8\uff0c\u4e5f\u4e0d\u4fdd\u8bc1\u5728\u503c\u6539\u53d8\u65f6\u4f1a\u6709\u4efb\u4f55\u901a\u77e5\uff0c\u4e5f\u6ca1\u6709\u4efb\u4f55\u53d1\u73b0 \u8fd9\u79cd\u53d8\u5316\u7684\u65b9\u6cd5\u3002 \u5982\u679c\u4f60\u53ef\u4ee5\u5728\u751f\u4ea7\u73af\u5883\u4e0b\u76f4\u63a5\u8bb0\u5f55\u4f60\u7684\u6bcf\u4e00\u4e2a\u4e8c\u8fdb\u5236\u7684\u76f4\u63a5\u8c03\u7528\uff0c\u5c06\u5176\u5b58\u50a8\u5728\u65e5\u5fd7\u4e2d\uff0c\u8fd9\u662fOK\u7684\uff0c\u4f46\u662f\u5927\u591a\u6570\u73af\u5883\u662f\u65e0\u6cd5\u8fd9\u6837\u5de5\u4f5c\u7684\u3002\u5bf9\u4e8e\u5e93\u4ee3\u7801\u6765\u8bf4\uff0c\u8fd9\u79cd \u4e0d\u786e\u5b9a\u6027\u7279\u522b\u5371\u9669\u3002\u4f60\u600e\u4e48\u77e5\u9053\u67d0\u4e2a\u7279\u5b9a\u7684\u529f\u80fd\u7684\u4f7f\u7528\u4f55\u65f6\u771f\u7684\u7ed3\u675f? \u7b80\u5355\u7684\u7b54\u6848\u662f: \u4f60\u505a\u4e0d\u5230\u3002 \u6b64\u5916Flags\u4e5f\u4f7f\u5f97\u5904\u7406dead code\u53d8\u7684\u66f4\u52a0\u6709\u6311\u6218\u3002\u5728\u8fc1\u79fb\u5230\u4e00\u4e2a\u65b0\u7684backends\u7684\u65f6\u5019\uff0c\u4f60\u8ba4\u4e3a\u5220\u9664\u9057\u7559\u4ee3\u7801\u53ea\u662f\u5220\u9664\u4e0d\u5fc5\u8981\u7684\u6784\u5efa\u4f9d\u8d56\u5173\u7cfb\uff0c\u5e76\u53d1\u5e03\u5386\u53f2\u8bb0\u5f55\u4e2d\u6700\u4ee4\u4eba\u6ee1\u610f\u7684 git rm \u3002 \u4f60\u9519\u4e86\uff0c\u5982\u679c\u4f60\u7684\u9057\u7559\u4e8c\u8fdb\u5236\u6587\u4ef6\u6709\u6570\u767e\u4e2a\u7531\u751f\u4ea7\u4ee3\u7801\u5b9a\u4e49\u548c\u5f15\u7528\u7684Flag\uff0c\u90a3\u4e48\u7b80\u5355\u5730\u5220\u9664\u6b7b\u4ee3\u7801\u5c06\u7ed9\u60a8\u7684\u53d1\u5e03\u5de5\u7a0b\u5e08\u5e26\u6765\u5de8\u5927\u7684\u95ee\u9898\uff1a\u5728\u8fd9\u6837\u7684\u66f4\u6539\u4e4b\u540e\u51e0\u4e4e\u6ca1\u6709\u7a0b\u5e8f\u4f1a\u542f\u52a8\u3002 \u8fd9\u662f\u6240\u6709\u8fd9\u4e00\u5207\u4e2d\u6700\u7cdf\u7cd5\u7684\u90e8\u5206\uff1f 2012\u5e74\u521d\u5728\u8c37\u6b4c\u8fdb\u884c\u7684\u4e00\u9879\u5206\u6790\u53d1\u73b0\uff0c\u5927\u591a\u6570 C++ flag\uff0c\u4ece\u672a\u5b9e\u9645\u53d8\u5316\u3002 \u4f46\u662f\uff0cFlag\u5728\u67d0\u4e9b\u573a\u5408\u662f\u5408\u9002\u7684\uff1a\u6bd4\u5982\u7528flags\u6765\u63a7\u5236backstrace\u7684\u6253\u5370\uff0cFeature Flag\uff0c\u66f4\u5e7f\u6cdb\u5730\u8bf4\uff0c\u7528\u4e8e\u5c06\u540d\u79f0/\u503c\u8f93\u5165\u4f20\u9012\u7ed9\u4e8c\u8fdb\u5236\u6587\u4ef6\u5e76\u4ec5\u5728 main() \u4e2d\u4f7f\u7528\u7684\u6807\u5fd7\u6bd4\u4f4d\u7f6e\u53c2\u6570\u66f4\u6613\u4e8e\u7ef4\u62a4\u3002 \u5373\u4f7f\u8003\u8651\u5230\u8fd9\u4e9b\u8b66\u544a\uff0c\u73b0\u5728\u6211\u4eec\u90fd\u5e94\u8be5\u597d\u597d\u5ba1\u89c6\u4e0b\u6211\u4eec\u5bf9Flag\u7684\u4f7f\u7528\u3002\u4e0b\u6b21\u4f60\u60f3\u5728\u4f60\u7684\u5e93\u4e2d\u6dfb\u52a0\u4e00\u4e2aFlag\u7684\u65f6\u5019\uff0c\u82b1\u70b9\u65f6\u95f4\u5bfb\u627e\u4e00\u4e2a\u66f4\u597d\u7684\u65b9\u6cd5\u3002\u4f8b\u5982\u53ef\u4ee5\u663e\u793a\u7684\u4f20\u9012\u914d\u7f6e \u8fd9\u51e0\u4e4e\u603b\u662f\u66f4\u5bb9\u6613\u3001\u5408\u7406\u7684\u63a8\u7406\uff0c\u4f46\u662f\u4e5f\u66f4\u5bb9\u6613\u7ef4\u62a4\u3002\u53c8\u6216\u8005\u662f\u5c06\u6570\u5b57Flag\u8f6c\u6362\u4e3a\u7f16\u8bd1\u65f6\u5e38\u91cf\u3002\u5982\u679c\u5728\u4ee3\u7801\u8bc4\u5ba1\u4e2d\u9047\u5230\u65b0\u7684Flag\uff0c\u8bf7\u62b5\u5236\u3002\u6bcf\u4e00\u4e2aFlag\u7684\u5f15\u5165\u90fd\u5e94\u8be5\u662f\u5408\u7406\u7684\u3002","title":"Tip of the Week #45: Avoid Flags, Especially in Library Code"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-49/","text":"Tip of the Week #49: Argument-Dependent Lookup Originally posted as totw/49 on 2013-07-14 \u201c\u2026whatever disappearing trail of its legalistic argle-bargle one chooses to follow\u2026\u201d \u2013Antonin Scalia, U.S. v Windsor dissenting opinion Overview \u4e00\u4e2a\u51fd\u6570\u8c03\u7528\u8868\u8fbe\u5f0f\u5982 func(a,b,c) \uff0c\u5176\u4e2d\u51fd\u6570\u88ab\u547d\u540d\u4e3a\u4e0d\u4f7f\u7528 :: \u64cd\u4f5c\u7b26\u7684\uff0c\u8fd9\u88ab\u79f0\u4e3a\u672a\u9650\u5b9a\u540d\u79f0\u3002\u5f53 C++ \u4ee3\u7801\u5f15\u7528\u4e00\u4e2a\u672a\u9650\u5b9a\u540d\u79f0\u7684\u51fd\u6570\u65f6\uff0c\u7f16\u8bd1\u5668\u4f1a\u53bb\u6267\u884c\u5339\u914d\u51fd\u6570\u58f0\u660e\u7684\u641c\u7d22\u3002\u4ee4\u4eba\u6709\u4e9b\u4eba\u60ca\u8bb6\u7684\u662f(\u4e0e\u5176\u4ed6\u8bed\u8a00\u4e0d\u540c)\uff0c\u9664\u4e86\u5728\u8c03\u7528\u8005\u7684\u4f5c\u7528\u57df\u5185\u67e5\u627e\u5916\uff0c\u641c\u7d22\u7684\u8303\u56f4\u8fd8\u5305\u62ec\u4e86\u51fd\u6570\u53c2\u6570\u7c7b\u578b\u76f8\u5173\u8054\u7684\u540d\u79f0\u7a7a\u95f4\uff0c\u8fd9\u79cd\u989d\u5916\u7684\u67e5\u627e\u88ab\u79f0\u4e3a Argument-Dependent Lookup (ADL) \uff0c\u8fd9\u7edd\u5bf9\u662f\u5728\u4f60\u7684\u4ee3\u7801\u4e2d\u53d1\u751f\u7684\uff0c\u6240\u4ee5\u4f60\u4f1a\u66f4\u597d\u7684\u7406\u89e3\u5b83\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u3002 Name Lookup Basics \u4e00\u4e2a\u51fd\u6570\u8c03\u7528\u5fc5\u987b\u6620\u5c04\u5230\u4e00\u4e2a\u7f16\u8bd1\u5668\u5b9a\u4e49\u7684\u7684\u51fd\u6570\u3002\u8fd9\u79cd\u5339\u914d\u5173\u7cfb\u7684\u6620\u5c04\u662f\u5728\u4e24\u4e2a\u72ec\u7acb\u7684\u4e32\u884c\u5904\u7406\u9636\u6bb5\u5b8c\u6210\u7684\uff0c\u7b2c\u4e00\u6b65\u5c31\u662f\u540d\u79f0\u89e3\u6790\uff0c\u5e94\u7528\u4e8e\u4e00\u4e9b\u4f5c\u7528\u57df\u7684\u641c\u7d22\u89c4\u5219\u53bb\u4ea7\u751f\u4e00\u7cfb\u5217\u53ef\u4ee5\u5339\u914d\u7684\u51fd\u6570\u540d\uff0c\u800c\u91cd\u8f7d\u51b3\u7b56\u91c7\u7528\u8be5\u540d\u79f0\u67e5\u627e\u4ea7\u751f\u7684\u91cd\u8f7d\uff0c\u5e76\u5c1d\u8bd5\u9009\u62e9\u4e00\u4e2a\u548c\u8c03\u7528\u5904\u4f20\u5165\u7684\u53c2\u6570\u6700\u5339\u914d\u7684\u51fd\u6570\u540d\u79f0\u3002\u8bb0\u4f4f\u8fd9\u4e2a\u533a\u522b\uff0c\u540d\u79f0\u89e3\u6790\u662f\u7b2c\u4e00\u6b65\uff0c\u5b83\u5e76\u4e0d\u8bd5\u56fe\u786e\u5b9a\u51fd\u6570\u662f\u5426\u5339\u914d\uff0c\u5b83\u751a\u81f3\u4e0d\u8003\u8651\u53c2\u6570\uff0c\u5b83\u53ea\u662f\u5728\u4f5c\u7528\u57df\u5185\u641c\u7d22\u51fd\u6570\u540d\u79f0\uff0c\u91cd\u8f7d\u89e3\u6790\u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u590d\u6742\u7684\u8bdd\u9898\uff0c\u4f46\u73b0\u5728\u4e0d\u662f\u6211\u4eec\u7684\u91cd\u70b9\u3002\u53ea\u8981\u77e5\u9053\u5b83\u662f\u4e00\u4e2a\u5355\u72ec\u7684\u5904\u7406\u9636\u6bb5\uff0c\u5b83\u53ef\u4ee5\u4ece\u540d\u79f0\u67e5\u627e\u4e2d\u83b7\u53d6\u8f93\u5165\u3002 \u5f53\u9047\u5230\u4e00\u4e2a\u672a\u9650\u5b9a\u51fd\u6570\u8c03\u7528\u65f6\uff0c\u8be5\u51fd\u6570\u540d\u79f0\u53ef\u80fd\u4f1a\u51fa\u73b0\u51e0\u4e2a\u72ec\u7acb\u7684\u641c\u7d22\u5e8f\u5217\uff0c\u6bcf\u4e00\u4e2a\u641c\u7d22\u5e8f\u5217\u90fd\u4f1a\u8bd5\u56fe\u5339\u914d\u4e00\u7cfb\u5217\u7684\u91cd\u8f7d\u540d\u79f0\u3002\u6700\u660e\u663e\u7684\u641c\u7d22\u5e8f\u5217\u5c31\u662f\u4ece\u8c03\u7528\u70b9\u7684\u4f5c\u7528\u57df\u5f00\u59cb\u5904\u5f00\u59cb\u5411\u5916\u641c\u7d22\u3002 1 2 3 4 5 6 namespace b { void func (); namespace internal { void test () { func (); } // ok: finds b::func(). } // b::internal } // b \u8fd9\u4e2a\u540d\u79f0\u67e5\u627e\u4e0eADL\u65e0\u5173( func \u6ca1\u6709\u53c2\u6570)\uff0c\u5b83\u53ea\u662f\u7b80\u5355\u7684\u4ece\u51fd\u6570\u8c03\u7528\u5904\u5411\u5916\u641c\u7d22\u3002\u4ece\u672c\u5730\u51fd\u6570\u4f5c\u7528\u57df\u5411\u5916\u8fdb\u884c\uff0c\u5230\u7c7b\u4f5c\u7528\u57df\u3001\u5c01\u95ed\u7c7b\u4f5c\u7528\u57df\u548c\u57fa\u7c7b\uff0c\u7136\u540e\u5230\u547d\u540d\u7a7a\u95f4\u4f5c\u7528\u57df\uff0c\u5e76\u8fdb\u5165\u5230\u5c01\u95ed\u547d\u540d\u7a7a\u95f4\uff0c\u6700\u540e\u5230\u5168\u5c40\u547d\u540d\u7a7a\u95f4\u3002 \u540d\u79f0\u67e5\u8be2\u901a\u8fc7\u4e00\u7cfb\u5217\u65e5\u76ca\u6269\u5927\u7684\u8303\u56f4\u8fdb\u884c\u7740\uff0c\u53ea\u8981\u627e\u5230\u5177\u6709\u76ee\u6807\u540d\u79f0\u7684\u4efb\u4f55\u5c31\u4f1a\u505c\u6b62\u8fdb\u884c\u641c\u7d22\u3002\u65e0\u8bba\u8be5\u51fd\u6570\u7684\u53c2\u6570\u662f\u5426\u4e0e\u8c03\u7528\u70b9\u63d0\u4f9b\u7684\u51fd\u6570\u51fd\u6570\u517c\u5bb9\u3002\u5f53\u9047\u5230\u5305\u542b\u81f3\u5c11\u4e00\u4e2a\u5177\u6709\u76ee\u6807\u540d\u79f0\u7684\u51fd\u6570\u58f0\u660e\u7684\u4f5c\u7528\u57df\u65f6\uff0c\u8be5\u4f5c\u7528\u57df\u4e2d\u7684\u91cd\u8f7d\u51b3\u7b56\u5c06\u6210\u4e3a\u8be5\u540d\u79f0\u67e5\u627e\u7684\u7ed3\u679c\u3002 \u8fd9\u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\u6709\u8bf4\u660e\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 namespace b { void func ( const string & ); // b::func namespace internal { void func ( int ); // b::internal::func namespace deep { void test () { string s ( \"hello\" ); func ( s ); // error: finds only b::internal::func(int). } } // b::internal::deep } // b::internal } // b \u4e0a\u9762\u7684\u4f8b\u5b50\u4f1a\u8ba9\u4eba\u5f88\u56f0\u60d1\u8ba4\u4e3a func(s) \u8868\u8fbe\u5f0f\u4f1a\u5ffd\u7565\u6389 void func(int) \uff0c\u5e76\u7ee7\u7eed\u5230\u4e0b\u4e00\u4e2a\u4f5c\u7528\u57df\u4e2d\u5bfb\u627e\u5230 b::func(const string&) \u3002\u7136\u800c\u540d\u79f0\u89e3\u6790\u7684\u65f6\u5019\u5e76\u4e0d\u4f1a\u8003\u8651\u5230\u53c2\u6570\u7c7b\u578b\uff0c\u5b83\u4ec5\u4ec5\u627e\u90a3\u4e9b\u51fd\u6570\u540d\u5b57\u53eb func \u7684\u5e76\u6700\u7ec8\u5728 b::internal \u8fd9\u4e2a\u4f5c\u7528\u57df\u4e2d\u627e\u5230\u5e76\u505c\u4e0b\u4e86\u3002\u7ed3\u679c\u5c31\u662f\u5c06\u4e00\u4e2a\u660e\u663e\u4e0d\u597d\u7684\u5339\u914d\u4ea4\u7ed9\u4e86\u91cd\u8f7d\u51b3\u7b56\u9636\u6bb5\u6765\u8bc4\u4f30\u4e86\u3002\u6700\u7ec8 b::func(const string&) \u8fd9\u4e2a\u51fd\u6570\u4e5f\u6ca1\u6709\u51fa\u73b0\u5728\u91cd\u8f7d\u51b3\u7b56\u7684\u9636\u6bb5\u3002 \u4f5c\u7528\u57df\u641c\u7d22\u987a\u5e8f\u7684\u4e00\u4e2a\u91cd\u8981\u542b\u4e49\u662f\uff0c\u641c\u7d22\u987a\u5e8f\u4e2d\u8f83\u65e9\u51fa\u73b0\u7684\u4f5c\u7528\u57df\u4e2d\u7684\u91cd\u8f7d\u5c06\u4f1a\u9690\u85cf\u540e\u9762\u7684\u4f5c\u7528\u57df\u4e2d\u7684\u91cd\u8f7d\u3002 Argument-Dependent Lookup \u5982\u679c\u4e00\u4e2a\u51fd\u6570\u8c03\u7528\u4f20\u9012\u4e86\u51fd\u6570\u90a3\u4e48\u51e0\u4e2a\u5e76\u884c\u7684\u540d\u79f0\u67e5\u627e\u8fc7\u7a0b\u90fd\u4f1a\u540c\u65f6\u8fdb\u884c\uff0c\u8fd9\u4e9b\u989d\u5916\u7684\u67e5\u627e\u662f\u4ece\u8fd9\u4e2a\u51fd\u6570\u7684\u6bcf\u4e00\u4e2a\u8c03\u7528\u53c2\u6570\u6240\u5728\u7684\u547d\u540d\u7a7a\u95f4\u4e2d\u5f00\u59cb\u3002\u5f53\u9047\u5230\u540d\u79f0\u5339\u914d\u7684\u4f5c\u7528\u57df\u65f6\u5e76\u4e0d\u4f1a\u505c\u6b62\u67e5\u627e\uff0c\u53ea\u6709\u9047\u5230\u5339\u914d\u7684\u90a3\u4e00\u4e2a\u624d\u4f1a\u7ed3\u675f\u3002 The Simple Case \u8003\u8651\u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 namespace aspace { struct A {}; void func ( const A & ); // found by ADL name lookup on 'a'. } // namespace aspace namespace bspace { void func ( int ); // found by lexical scope name lookup void test () { aspace :: A a ; func ( a ); // aspace::func(const aspace::A&) } } // namespace bspace \u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\u5728\u8c03\u7528 func(a) \u65f6\u4f1a\u5b58\u5728\u4e24\u4e2a\u540d\u79f0\u67e5\u627e\u7684\u8fc7\u7a0b\uff0c\u4e00\u4e2a\u662f\u4ece bspace::test() \u6240\u5728\u7684\u4f5c\u7528\u57df\u5f00\u59cb\u5411\u5916\u8fdb\u884c\u540d\u79f0\u7684\u67e5\u627e\uff0c\u5f53\u6ca1\u6709\u53d1\u73b0\u6709\u4efb\u4f55\u5339\u914d\u7684\u540d\u79f0\u65f6\u5c31\u5f00\u59cb\u5728 bspace \u6240\u5728\u4f5c\u7528\u57df\u4e2d\u8fdb\u884c\u67e5\u627e\uff0c\u5e76\u53d1\u73b0\u4e86 func(int) \u4e8e\u662f\u505c\u6b62\u4e86\u67e5\u627e\u3002\u53e6\u5916\u4e00\u4e2a\u540d\u79f0\u67e5\u627e\u7684\u8fc7\u7a0b\u662f ADL \uff0c\u5b83\u662f\u4ece\u51fd\u6570\u7684\u8c03\u7528\u53c2\u6570 a \u6240\u5728\u7684namespace\u5f00\u59cb\uff0c\u8fd9\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\u5c31\u662f aspace \uff0c\u5728\u8fd9\u4e2anamespace\u4e2d\u627e\u5230\u4e86 aspace::func(const aspace::A&) \u5e76\u505c\u6b62\u3002\u6700\u540e\u5c06\u8fd9\u4e24\u4e2a\u5339\u914d\u5230\u7684\u51fd\u51fd\u6570\u4ea4\u7ed9\u91cd\u8f7d\u51b3\u7b56\uff0c\u5728\u91cd\u8f7d\u51b3\u7b56\u9636\u6bb5\u4f1a\u6839\u636e\u53c2\u6570\u8fdb\u884c\u6700\u4f73\u5339\u914d\uff0c\u6700\u540e\u5bfb\u627e\u5230\u7684\u6700\u4f73\u5339\u914d\u5c31\u662f aspace::func(const aspace::A&) \uff0c\u800c bspace::func(int) \u5728\u91cd\u8f7d\u9636\u6bb5\u53d1\u73b0\u5176\u53c2\u6570\u5e76\u4e0d\u5339\u914d\u6240\u4ee5\u88ab\u62d2\u7edd\u4e86\u3002 \u57fa\u4e8e\u8c03\u7528\u5904\u6240\u5728\u4f5c\u7528\u57df\u5f00\u59cb\u7684\u540d\u79f0\u67e5\u627e\u548c\u6bcf\u4e2a\u56e0\u4e3a ADL \u6240\u89e6\u53d1\u7684\u540d\u79f0\u67e5\u627e\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u662f\u5e76\u884c\u53d1\u751f\u7684\uff0c\u6bcf\u4e00\u4e2a\u641c\u7d22\u90fd\u4f1a\u8fd4\u56de\u4e00\u7ec4\u5019\u9009\u7684\u51fd\u6570\u91cd\u8f7d\u3002\u6240\u6709\u7684\u8fd9\u4e9b\u641c\u7d22\u6240\u4ea7\u51fa\u7684\u7ed3\u679c\u90fd\u4f1a\u653e\u5728\u4e00\u4e2a\u96c6\u5408\u4e2d\uff0c\u6700\u540e\u901a\u8fc7\u91cd\u8f7d\u51b3\u7b56\u9636\u6bb5\u4ee5\u786e\u5b9a\u6700\u4f73\u7684\u5339\u914d\u3002\u5982\u679c\u6709\u4e00\u6279\u6700\u4f73\u7684\u5339\u914d\uff0c\u90a3\u4e48\u7f16\u8bd1\u5668\u5c31\u4f1a\u53d1\u51fa\u4e00\u4e2a\u6a21\u7cca\u7684\u9519\u8bef \"\u53ea\u80fd\u6709\u4e00\u4e2a\u6700\u4f73\u7684\u5339\u914d\"\uff0c\u5982\u679c\u6ca1\u6709\u627e\u5230\u4efb\u4f55\u4e00\u4e2a\u6700\u4f73\u7684\u5339\u914d\uff0c\u7f16\u8bd1\u5668\u4e5f\u4f1a\u62a5\u51fa\u4e00\u4e2a\u9519\u8bef \"\u5fc5\u987b\u8981\u6709\u4e00\u4e2a\u5339\u914d\"\u3002 Type-Associated Namespaces \u524d\u9762\u7684\u4f8b\u5b50\u662f\u4e00\u4e2a\u6bd4\u8f83\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u66f4\u590d\u6742\u7684\u7c7b\u578b\u53ef\u4ee5\u6709\u591a\u4e2a\u4e0e\u4e4b\u5173\u8054\u7684 namespace \uff0c\u8fd9\u4e2a\u4e0e\u4e4b\u5173\u8054\u7684 namespace \u5305\u62ec\u4e86\u4e0e\u8fd9\u4e2a\u7c7b\u578b\u76f8\u5173\u7684\u4efb\u4f55 namespace \uff0c\u53c2\u6570\u7c7b\u578b\u7684\u5168\u79f0\u6240\u5728\u7684 namespace \u5c31\u662f\u5176\u4e2d\u7684\u4e00\u90e8\u5206\uff0c\u6b64\u5916\u8fd8\u6709\u6a21\u7248\u53c2\u6570\u7684\u7c7b\u578b\u6240\u5728\u7684 namespace \uff0c\u8fd8\u5305\u62ec\u4e86\u5176\u76f4\u63a5\u6216\u95f4\u63a5\u7684\u7236\u7c7b\u6240\u5728\u7684 namespace \u3002\u4f8b\u5982\u4e00\u4e2a\u5355\u53c2\u6570\u7684\u51fd\u6570\u8c03\u7528 a::A<b::B, c::internal::C*> \u5c06\u4f1a\u4ea7\u751f a \u3001 b \u3001 c::internal \u7b49\u4e09\u4e2a\u641c\u7d22\u7684\u57df\uff0c\u5728\u6bcf\u4e00\u4e2a\u641c\u7d22\u7684\u57df\u4e2d\u90fd\u4f1a\u67e5\u627e\u548c\u8c03\u7528\u51fd\u6570\u540d\u79f0\u76f8\u540c\u7684\u51fd\u6570\u3002\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\u5c31\u663e\u793a\u4e86\u8fd9\u4e9b\u6548\u679c\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 namespace aspace { struct A {}; template < typename T > struct AGeneric {}; void func ( const A & ); template < typename T > void find_me ( const T & ); } // namespace aspace namespace bspace { typedef aspace :: A AliasForA ; struct B : aspace :: A {}; template < typename T > struct BGeneric {}; void test () { // ok: base class namespace searched. func ( B ()); // ok: template parameter namespace searched. find_me ( BGeneric < aspace :: A > ()); // ok: template namespace searched. find_me ( aspace :: AGeneric < int > ()); } } // namespace bspace Tips \u968f\u7740\u57fa\u672c\u7684\u540d\u79f0\u67e5\u627e\u673a\u5236\u5728\u4f60\u7684\u8111\u6d77\u4e2d\u5f00\u59cb\u8bb0\u5fc6\u72b9\u65b0\u540e\uff0c\u8bf7\u8003\u8651\u4e0b\u9762\u8fd9\u4e9b Tips \uff0c\u8fd9\u4e9b Tips \u53ef\u80fd\u4f1a\u5e2e\u52a9\u60a8\u5199\u51fa\u66f4\u4f73\u7684 C++ \u4ee3\u7801\u3002 Type Aliases \u6709\u7684\u65f6\u5019\u8981\u786e\u5b9a\u4e00\u4e2a\u7c7b\u578b\u6240\u5173\u8054\u7684 namespace \u662f\u9700\u8981\u82b1\u4e00\u4e9b\u65f6\u95f4\u6765\u8fa8\u522b\u7684\u3002 typedef \u548c using \u58f0\u660e\u53ef\u4ee5\u7ed9\u4e00\u4e2a\u7c7b\u578b\u5f15\u5165\u522b\u540d\u3002\u5728\u8fd9\u4e9b\u60c5\u51b5\u4e0b\uff0c\u9009\u62e9\u8981\u641c\u7d22\u7684 namespace \u5217\u8868\u4e4b\u524d\u9700\u8981\u5c06\u8fd9\u4e9b\u522b\u540d\u8fdb\u884c\u89e3\u6790\uff0c\u5e76\u6269\u5c55\u4e3a\u4ed6\u4eec\u7684\u6e90\u7c7b\u578b\u3002\u8fd9\u662f typedef \u548c using \u58f0\u660e\u53ef\u80fd\u4f1a\u5e26\u6765\u7684\u4e00\u4e9b\u8bef\u5bfc\uff0c\u56e0\u4e3a\u4ed6\u4eec\u53ef\u80fd\u4f1a\u5bfc\u81f4\u60a8\u5728\u5bf9ADL\u9700\u8981\u641c\u7d22\u54ea\u4e9b namespace \u65f6\u4f1a\u8fdb\u884c\u4e0d\u6b63\u786e\u7684\u9884\u6d4b\u3002\u5982\u4e0b\u6240\u793a\uff1a 1 2 3 4 5 6 namespace cspace { // ok: note that this searches aspace, not bspace. void test () { func ( bspace :: AliasForA ()); } } // namespace cspace Caveat Iterator \u5bf9\u8fed\u4ee3\u5668\u8981\u5c0f\u5fc3\u3002\u4f60\u4e0d\u77e5\u9053\u4ed6\u4eec\u5173\u8054\u7684\u662f\u4ec0\u4e48 namespace \uff0c\u6240\u4ee5\u4e0d\u8981\u4f9d\u8d56\u4e8e ADL \u6765\u89e3\u51b3\u6d89\u53ca\u8fed\u4ee3\u5668\u7684\u51fd\u6570\u8c03\u7528\u7684\u540d\u79f0\u89e3\u6790\u3002\u5b83\u4eec\u53ef\u80fd\u53ea\u662f\u6307\u5411\u5143\u7d20\u7684\u6307\u9488\uff0c\u6216\u8005\u53ef\u80fd\u662f\u5728\u4e00\u4e2a\u4e0e\u5bb9\u5668\u5b9e\u73b0\u6240\u5728\u7684 namespace \u65e0\u5173\u7684\u4e00\u4e2a\u79c1\u6709 namespace \u4e2d\u3002 1 2 3 4 5 6 7 namespace d { int test () { std :: vector < int > vec ( a ); // maybe this compiles, maybe not! return count ( vec . begin (), vec . end (), 0 ); } } // namespace d \u4e0a\u9762\u7684\u4ee3\u7801\u4f9d\u8d56\u4e8e std::vector<int>::iterator \u662f int* (\u8fd9\u662f\u53ef\u80fd\u7684)\uff0c\u8fd8\u662f\u67d0\u4e2a\u7c7b\u578b\u5728\u5177\u6709 count \u91cd\u8f7d\u51fd\u6570\u7684\u547d\u540d\u7a7a\u95f4\u4e2d(\u5982 std::count() )\u3002\u8fd9\u53ef\u80fd\u4f1a\u5728\u67d0\u4e9b\u5e73\u53f0\u4e0a\u662f\u53ef\u4ee5\u8fd0\u884c\u7684\uff0c\u800c\u5728\u5176\u4ed6\u5e73\u53f0\u4e0a\u5219\u65e0\u6cd5\u8fd0\u884c\uff0c\u6216\u8005\u5b83\u53ef\u4ee5\u5728 debug \u4e0b\u53ef\u4ee5\u6b63\u5e38\u5de5\u4f5c\uff0c\u800c\u5728 release \u4e0b\u65e0\u6cd5\u8fd0\u884c\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\u4f7f\u7528\u5e26\u6709\u9650\u5b9a\u540d\u79f0\u7684\u51fd\u6570\u8c03\u7528\u65b9\u5f0f\u4f1a\u66f4\u597d\uff0c\u4f8b\u5982\u53ef\u4ee5\u50cf\u8fd9\u6837\u6765\u8c03\u7528 count \u51fd\u6570\uff0c std::cout() \u3002 Overloaded Operators \u8fd0\u7b97\u7b26(\u4f8b\u5982 + \u6216 << )\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u662f\u4e00\u79cd\u51fd\u6570\u540d\u79f0\uff0c\u4f8b\u5982 operator+(a,b) \u6216 operator<<(a,b) \u8fd9\u4e9b\u90fd\u88ab\u8ba4\u4e3a\u662f\u672a\u9650\u5b9a\u540d\u79f0\u7684\u8c03\u7528\u3002 ADL \u6700\u91cd\u8981\u7684\u5e94\u7528\u5c31\u662f\u7528\u4e8e\u5728\u901a\u8fc7 operator<< \u6765\u8bb0\u5f55\u65e5\u5fd7\u7684\u65f6\u5019\u3002\u901a\u5e38\u6211\u4eec\u4f1a\u770b\u5230\u50cf std::cout << obj; \u8fd9\u6837\u7684\u8c03\u7528\uff0c\u5bf9\u4e8e obj \u6211\u4eec\u5047\u5b9a\u8ba4\u4e3a\u5b83\u7684\u7c7b\u578b\u662f O::Obj \u3002\u8fd9\u4e2a\u8bed\u53e5\u5c55\u5f00\u6765\u770b\u5c31\u662f\u8fd9\u6837\u7684 operator<<(std::ostream&, const O::Obj&) \uff0c\u662f\u4e00\u4e2a\u672a\u9650\u5b9a\u540d\u79f0\u7684\u51fd\u6570\u8c03\u7528\uff0c\u5b83\u5c06\u4f1a\u901a\u8fc7 ADL \u4ece std::ostream \u53c2\u6570\u6240\u5bf9\u5e94\u7684 std namespace \u4e2d\u8fdb\u884c\u540d\u79f0\u7684\u67e5\u627e\uff0c\u4ee5\u53ca\u7b2c\u4e8c\u4e2a\u53c2\u6570 0::0bj \u7684 0 namespace \u4e2d\u8fdb\u884c\u67e5\u627e\uff0c\u5f53\u7136\u8fd8\u4f1a\u4ece\u51fd\u6570\u8c03\u7528\u5904\u6240\u5728\u7684\u4f5c\u7528\u57df\u5f00\u59cb\u5411\u5916\u8fdb\u884c\u67e5\u627e\u3002 \u5c06\u8fd9\u4e9b\u8fd0\u7b97\u7b26\u653e\u5728\u4e0e\u4ed6\u4eec\u8981\u64cd\u4f5c\u7684\u7528\u6237\u81ea\u5b9a\u4e49\u7c7b\u578b\u76f8\u540c\u7684\u540d\u79f0\u7a7a\u95f4\u4e2d\u5f88\u91cd\u8981\uff1a\u5728\u4e0a\u9762\u7684 namespace 0 \u7684\u4f8b\u5b50\u4e2d\uff0c\u5982\u679c\u5c06 operator<< \u653e\u5728\u50cf :: (\u5168\u5c40 namespace )\u8fd9\u6837\u7684\u5916\u90e8 namespace \u4e2d\uff0c\u8be5\u64cd\u4f5c\u7b26\u5c06\u5de5\u4f5c\u4e00\u6bb5\u65f6\u95f4\uff0c\u76f4\u5230\u6709\u4eba\u975e\u5e38\u65e0\u8f9c\u7684\u5c06\u4e00\u4e2a\u4e0d\u76f8\u5e72\u7684\u5176\u4ed6\u7c7b\u578b\u7684 operator<< \u64cd\u4f5c\u7b26\u653e\u5728 namespace 0 \u4e2d Fundamental Types \u8bf7\u6ce8\u610f\uff0c\u57fa\u672c\u7c7b\u578b(\u5982 int \u3001 double \u7b49)\u4e0d\u548c\u5168\u5c40 namespace \u5173\u8054\u3002\u5b83\u4eec\u4e0d\u5173\u8054\u4efb\u4f55 namespace \uff0c\u4e5f\u4e0d\u4f1a\u5bf9 ADL \u4ea7\u751f\u4f5c\u7528\uff0c\u6307\u9488\u548c\u6570\u7ec4\u7c7b\u578b\u548c\u4ed6\u4eec\u6240\u6307\u5411\u7684\u5bf9\u8c61\u548c\u6216\u5143\u7d20\u7c7b\u578b\u6240\u5728\u7684 namespace \u8fdb\u884c\u5173\u8054\u3002 Refactoring Gotchas \u5982\u679c\u5c06\u53c2\u6570\u7c7b\u578b\u66f4\u6539\u4e3a\u975e\u9650\u5b9a\u51fd\u6570\u8c03\u7528\u7684\u8bdd\uff0c\u4f1a\u5f71\u54cd\u90a3\u4e9b\u5177\u6709\u91cd\u8f7d\u7684\u51fd\u6570\u8c03\u7528\u884c\u4e3a\u3002\u53ea\u662f\u5c06\u4e00\u4e2a\u7c7b\u578b\u79fb\u52a8\u5230 namespace \u4e2d\uff0c\u5e76\u5728\u65e7\u7684\u547d\u540d\u7a7a\u95f4\u4e2d\u4f7f\u7528 typedef \u4ee5\u5b9e\u73b0\u517c\u5bb9\u6027\uff0c\u8fd9\u662f\u6ca1\u6709\u5e2e\u52a9\u7684\uff0c\u5b9e\u9645\u4e0a\u53ea\u4f1a\u4f7f\u95ee\u9898\u66f4\u96be\u88ab\u8bca\u65ad\u3002\u5c06\u7c7b\u578b\u79fb\u52a8\u5230\u65b0\u7684\u547d\u540d\u7a7a\u95f4\u4e2d\u65f6\u8981\u5c0f\u5fc3\u3002 \u7c7b\u4f3c\u7684\uff0c\u5c06\u51fd\u6570\u79fb\u52a8\u5230\u65b0\u7684 namespace \u4e2d\uff0c\u5e76\u8bbe\u7f6e\u597d using \u58f0\u660e\u3002\u8fd9\u610f\u5473\u7740\u975e\u9650\u5b9a\u7684\u8c03\u7528\u53ef\u80fd\u5c06\u4e0d\u4f1a\u627e\u5230\u4ed6\uff0c\u53ef\u60b2\u7684\u662f\uff0c\u4ed6\u4eec\u4ecd\u7136\u53ef\u4ee5\u901a\u8fc7\u627e\u5230\u4e0d\u540c\u7684\u51fd\u6570\u91cd\u8f7d\u6765\u5b8c\u6210\u7f16\u8bd1\u3002\u5f53\u79fb\u52a8\u4e00\u4e2a\u51fd\u6570\u5230\u65b0\u7684 namespace \u4e2d\u65f6\u8981\u5c0f\u5fc3\u3002 Final Thought \u76f8\u5bf9\u8f83\u5c11\u7684\u7a0b\u5e8f\u5458\u7406\u89e3\u4e0e\u51fd\u6570\u67e5\u627e\u76f8\u5173\u7684\u786e\u5207\u89c4\u5219\u548c\u6781\u7aef\u60c5\u51b5\uff0c\u8be5\u8bed\u8a00\u89c4\u8303\u91cc\u9762\u5305\u542b\u4e8613\u9875\u5173\u4e8e\u540d\u79f0\u641c\u7d22\u5305\u542b\u4e86\u54ea\u4e9b\u89c4\u5219\u3001\u7279\u6b8a\u60c5\u51b5\u3001\u4ee5\u53ca\u548c\u53cb\u5143\u51fd\u6570\u95ed\u5305\u7c7b\u641c\u7d22\u8303\u56f4\u7b49\uff0c\u9700\u8981\u4f60\u989d\u5916\u7684\u5c0f\u5fc3\u3002\u5c3d\u7ba1\u5b58\u5728\u8fd9\u4e9b\u590d\u6742\u6027\uff0c\u4f46\u5982\u679c\u60a8\u59cb\u7ec8\u7262\u8bb0\u5e76\u884c\u540d\u79f0\u641c\u7d22\u7684\u57fa\u672c\u6982\u5ff5\uff0c\u90a3\u4e48\u60a8\u5c06\u6709\u8db3\u591f\u7684\u57fa\u7840\u6765\u7406\u89e3\u51fd\u6570\u8c03\u7528\u548c\u8fd0\u7b97\u7b26\u662f\u5982\u4f55\u89e3\u6790\u7684\u3002\u73b0\u5728\u901a\u8fc7\u672c\u6587\uff0c\u60a8\u5c06\u80fd\u591f\u7406\u89e3\u51fd\u6570\u8c03\u7528\u548c\u8fd0\u7b97\u7b26\u662f\u5982\u4f55\u9009\u62e9\u51fd\u6570\u58f0\u660e\u7684\uff0c\u5e76\u4e14\u5f53\u53d1\u751f\u91cd\u8f7d\u51b3\u8bae\u5931\u8d25\u548c\u540d\u79f0\u8986\u76d6\u7b49\u4ee4\u4eba\u8d39\u89e3\u7684\u6784\u5efa\u9519\u8bef\u65f6\uff0c\u4f60\u5c06\u66f4\u5bb9\u6613\u8bca\u65ad\u3002","title":"Tip of the Week #49: Argument-Dependent Lookup"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-49/#tip-of-the-week-49-argument-dependent-lookup","text":"Originally posted as totw/49 on 2013-07-14 \u201c\u2026whatever disappearing trail of its legalistic argle-bargle one chooses to follow\u2026\u201d \u2013Antonin Scalia, U.S. v Windsor dissenting opinion","title":"Tip of the Week #49: Argument-Dependent Lookup"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-49/#overview","text":"\u4e00\u4e2a\u51fd\u6570\u8c03\u7528\u8868\u8fbe\u5f0f\u5982 func(a,b,c) \uff0c\u5176\u4e2d\u51fd\u6570\u88ab\u547d\u540d\u4e3a\u4e0d\u4f7f\u7528 :: \u64cd\u4f5c\u7b26\u7684\uff0c\u8fd9\u88ab\u79f0\u4e3a\u672a\u9650\u5b9a\u540d\u79f0\u3002\u5f53 C++ \u4ee3\u7801\u5f15\u7528\u4e00\u4e2a\u672a\u9650\u5b9a\u540d\u79f0\u7684\u51fd\u6570\u65f6\uff0c\u7f16\u8bd1\u5668\u4f1a\u53bb\u6267\u884c\u5339\u914d\u51fd\u6570\u58f0\u660e\u7684\u641c\u7d22\u3002\u4ee4\u4eba\u6709\u4e9b\u4eba\u60ca\u8bb6\u7684\u662f(\u4e0e\u5176\u4ed6\u8bed\u8a00\u4e0d\u540c)\uff0c\u9664\u4e86\u5728\u8c03\u7528\u8005\u7684\u4f5c\u7528\u57df\u5185\u67e5\u627e\u5916\uff0c\u641c\u7d22\u7684\u8303\u56f4\u8fd8\u5305\u62ec\u4e86\u51fd\u6570\u53c2\u6570\u7c7b\u578b\u76f8\u5173\u8054\u7684\u540d\u79f0\u7a7a\u95f4\uff0c\u8fd9\u79cd\u989d\u5916\u7684\u67e5\u627e\u88ab\u79f0\u4e3a Argument-Dependent Lookup (ADL) \uff0c\u8fd9\u7edd\u5bf9\u662f\u5728\u4f60\u7684\u4ee3\u7801\u4e2d\u53d1\u751f\u7684\uff0c\u6240\u4ee5\u4f60\u4f1a\u66f4\u597d\u7684\u7406\u89e3\u5b83\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u3002","title":"Overview"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-49/#name-lookup-basics","text":"\u4e00\u4e2a\u51fd\u6570\u8c03\u7528\u5fc5\u987b\u6620\u5c04\u5230\u4e00\u4e2a\u7f16\u8bd1\u5668\u5b9a\u4e49\u7684\u7684\u51fd\u6570\u3002\u8fd9\u79cd\u5339\u914d\u5173\u7cfb\u7684\u6620\u5c04\u662f\u5728\u4e24\u4e2a\u72ec\u7acb\u7684\u4e32\u884c\u5904\u7406\u9636\u6bb5\u5b8c\u6210\u7684\uff0c\u7b2c\u4e00\u6b65\u5c31\u662f\u540d\u79f0\u89e3\u6790\uff0c\u5e94\u7528\u4e8e\u4e00\u4e9b\u4f5c\u7528\u57df\u7684\u641c\u7d22\u89c4\u5219\u53bb\u4ea7\u751f\u4e00\u7cfb\u5217\u53ef\u4ee5\u5339\u914d\u7684\u51fd\u6570\u540d\uff0c\u800c\u91cd\u8f7d\u51b3\u7b56\u91c7\u7528\u8be5\u540d\u79f0\u67e5\u627e\u4ea7\u751f\u7684\u91cd\u8f7d\uff0c\u5e76\u5c1d\u8bd5\u9009\u62e9\u4e00\u4e2a\u548c\u8c03\u7528\u5904\u4f20\u5165\u7684\u53c2\u6570\u6700\u5339\u914d\u7684\u51fd\u6570\u540d\u79f0\u3002\u8bb0\u4f4f\u8fd9\u4e2a\u533a\u522b\uff0c\u540d\u79f0\u89e3\u6790\u662f\u7b2c\u4e00\u6b65\uff0c\u5b83\u5e76\u4e0d\u8bd5\u56fe\u786e\u5b9a\u51fd\u6570\u662f\u5426\u5339\u914d\uff0c\u5b83\u751a\u81f3\u4e0d\u8003\u8651\u53c2\u6570\uff0c\u5b83\u53ea\u662f\u5728\u4f5c\u7528\u57df\u5185\u641c\u7d22\u51fd\u6570\u540d\u79f0\uff0c\u91cd\u8f7d\u89e3\u6790\u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u590d\u6742\u7684\u8bdd\u9898\uff0c\u4f46\u73b0\u5728\u4e0d\u662f\u6211\u4eec\u7684\u91cd\u70b9\u3002\u53ea\u8981\u77e5\u9053\u5b83\u662f\u4e00\u4e2a\u5355\u72ec\u7684\u5904\u7406\u9636\u6bb5\uff0c\u5b83\u53ef\u4ee5\u4ece\u540d\u79f0\u67e5\u627e\u4e2d\u83b7\u53d6\u8f93\u5165\u3002 \u5f53\u9047\u5230\u4e00\u4e2a\u672a\u9650\u5b9a\u51fd\u6570\u8c03\u7528\u65f6\uff0c\u8be5\u51fd\u6570\u540d\u79f0\u53ef\u80fd\u4f1a\u51fa\u73b0\u51e0\u4e2a\u72ec\u7acb\u7684\u641c\u7d22\u5e8f\u5217\uff0c\u6bcf\u4e00\u4e2a\u641c\u7d22\u5e8f\u5217\u90fd\u4f1a\u8bd5\u56fe\u5339\u914d\u4e00\u7cfb\u5217\u7684\u91cd\u8f7d\u540d\u79f0\u3002\u6700\u660e\u663e\u7684\u641c\u7d22\u5e8f\u5217\u5c31\u662f\u4ece\u8c03\u7528\u70b9\u7684\u4f5c\u7528\u57df\u5f00\u59cb\u5904\u5f00\u59cb\u5411\u5916\u641c\u7d22\u3002 1 2 3 4 5 6 namespace b { void func (); namespace internal { void test () { func (); } // ok: finds b::func(). } // b::internal } // b \u8fd9\u4e2a\u540d\u79f0\u67e5\u627e\u4e0eADL\u65e0\u5173( func \u6ca1\u6709\u53c2\u6570)\uff0c\u5b83\u53ea\u662f\u7b80\u5355\u7684\u4ece\u51fd\u6570\u8c03\u7528\u5904\u5411\u5916\u641c\u7d22\u3002\u4ece\u672c\u5730\u51fd\u6570\u4f5c\u7528\u57df\u5411\u5916\u8fdb\u884c\uff0c\u5230\u7c7b\u4f5c\u7528\u57df\u3001\u5c01\u95ed\u7c7b\u4f5c\u7528\u57df\u548c\u57fa\u7c7b\uff0c\u7136\u540e\u5230\u547d\u540d\u7a7a\u95f4\u4f5c\u7528\u57df\uff0c\u5e76\u8fdb\u5165\u5230\u5c01\u95ed\u547d\u540d\u7a7a\u95f4\uff0c\u6700\u540e\u5230\u5168\u5c40\u547d\u540d\u7a7a\u95f4\u3002 \u540d\u79f0\u67e5\u8be2\u901a\u8fc7\u4e00\u7cfb\u5217\u65e5\u76ca\u6269\u5927\u7684\u8303\u56f4\u8fdb\u884c\u7740\uff0c\u53ea\u8981\u627e\u5230\u5177\u6709\u76ee\u6807\u540d\u79f0\u7684\u4efb\u4f55\u5c31\u4f1a\u505c\u6b62\u8fdb\u884c\u641c\u7d22\u3002\u65e0\u8bba\u8be5\u51fd\u6570\u7684\u53c2\u6570\u662f\u5426\u4e0e\u8c03\u7528\u70b9\u63d0\u4f9b\u7684\u51fd\u6570\u51fd\u6570\u517c\u5bb9\u3002\u5f53\u9047\u5230\u5305\u542b\u81f3\u5c11\u4e00\u4e2a\u5177\u6709\u76ee\u6807\u540d\u79f0\u7684\u51fd\u6570\u58f0\u660e\u7684\u4f5c\u7528\u57df\u65f6\uff0c\u8be5\u4f5c\u7528\u57df\u4e2d\u7684\u91cd\u8f7d\u51b3\u7b56\u5c06\u6210\u4e3a\u8be5\u540d\u79f0\u67e5\u627e\u7684\u7ed3\u679c\u3002 \u8fd9\u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\u6709\u8bf4\u660e\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 namespace b { void func ( const string & ); // b::func namespace internal { void func ( int ); // b::internal::func namespace deep { void test () { string s ( \"hello\" ); func ( s ); // error: finds only b::internal::func(int). } } // b::internal::deep } // b::internal } // b \u4e0a\u9762\u7684\u4f8b\u5b50\u4f1a\u8ba9\u4eba\u5f88\u56f0\u60d1\u8ba4\u4e3a func(s) \u8868\u8fbe\u5f0f\u4f1a\u5ffd\u7565\u6389 void func(int) \uff0c\u5e76\u7ee7\u7eed\u5230\u4e0b\u4e00\u4e2a\u4f5c\u7528\u57df\u4e2d\u5bfb\u627e\u5230 b::func(const string&) \u3002\u7136\u800c\u540d\u79f0\u89e3\u6790\u7684\u65f6\u5019\u5e76\u4e0d\u4f1a\u8003\u8651\u5230\u53c2\u6570\u7c7b\u578b\uff0c\u5b83\u4ec5\u4ec5\u627e\u90a3\u4e9b\u51fd\u6570\u540d\u5b57\u53eb func \u7684\u5e76\u6700\u7ec8\u5728 b::internal \u8fd9\u4e2a\u4f5c\u7528\u57df\u4e2d\u627e\u5230\u5e76\u505c\u4e0b\u4e86\u3002\u7ed3\u679c\u5c31\u662f\u5c06\u4e00\u4e2a\u660e\u663e\u4e0d\u597d\u7684\u5339\u914d\u4ea4\u7ed9\u4e86\u91cd\u8f7d\u51b3\u7b56\u9636\u6bb5\u6765\u8bc4\u4f30\u4e86\u3002\u6700\u7ec8 b::func(const string&) \u8fd9\u4e2a\u51fd\u6570\u4e5f\u6ca1\u6709\u51fa\u73b0\u5728\u91cd\u8f7d\u51b3\u7b56\u7684\u9636\u6bb5\u3002 \u4f5c\u7528\u57df\u641c\u7d22\u987a\u5e8f\u7684\u4e00\u4e2a\u91cd\u8981\u542b\u4e49\u662f\uff0c\u641c\u7d22\u987a\u5e8f\u4e2d\u8f83\u65e9\u51fa\u73b0\u7684\u4f5c\u7528\u57df\u4e2d\u7684\u91cd\u8f7d\u5c06\u4f1a\u9690\u85cf\u540e\u9762\u7684\u4f5c\u7528\u57df\u4e2d\u7684\u91cd\u8f7d\u3002","title":"Name Lookup Basics"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-49/#argument-dependent-lookup","text":"\u5982\u679c\u4e00\u4e2a\u51fd\u6570\u8c03\u7528\u4f20\u9012\u4e86\u51fd\u6570\u90a3\u4e48\u51e0\u4e2a\u5e76\u884c\u7684\u540d\u79f0\u67e5\u627e\u8fc7\u7a0b\u90fd\u4f1a\u540c\u65f6\u8fdb\u884c\uff0c\u8fd9\u4e9b\u989d\u5916\u7684\u67e5\u627e\u662f\u4ece\u8fd9\u4e2a\u51fd\u6570\u7684\u6bcf\u4e00\u4e2a\u8c03\u7528\u53c2\u6570\u6240\u5728\u7684\u547d\u540d\u7a7a\u95f4\u4e2d\u5f00\u59cb\u3002\u5f53\u9047\u5230\u540d\u79f0\u5339\u914d\u7684\u4f5c\u7528\u57df\u65f6\u5e76\u4e0d\u4f1a\u505c\u6b62\u67e5\u627e\uff0c\u53ea\u6709\u9047\u5230\u5339\u914d\u7684\u90a3\u4e00\u4e2a\u624d\u4f1a\u7ed3\u675f\u3002","title":"Argument-Dependent Lookup"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-49/#the-simple-case","text":"\u8003\u8651\u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 namespace aspace { struct A {}; void func ( const A & ); // found by ADL name lookup on 'a'. } // namespace aspace namespace bspace { void func ( int ); // found by lexical scope name lookup void test () { aspace :: A a ; func ( a ); // aspace::func(const aspace::A&) } } // namespace bspace \u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\u5728\u8c03\u7528 func(a) \u65f6\u4f1a\u5b58\u5728\u4e24\u4e2a\u540d\u79f0\u67e5\u627e\u7684\u8fc7\u7a0b\uff0c\u4e00\u4e2a\u662f\u4ece bspace::test() \u6240\u5728\u7684\u4f5c\u7528\u57df\u5f00\u59cb\u5411\u5916\u8fdb\u884c\u540d\u79f0\u7684\u67e5\u627e\uff0c\u5f53\u6ca1\u6709\u53d1\u73b0\u6709\u4efb\u4f55\u5339\u914d\u7684\u540d\u79f0\u65f6\u5c31\u5f00\u59cb\u5728 bspace \u6240\u5728\u4f5c\u7528\u57df\u4e2d\u8fdb\u884c\u67e5\u627e\uff0c\u5e76\u53d1\u73b0\u4e86 func(int) \u4e8e\u662f\u505c\u6b62\u4e86\u67e5\u627e\u3002\u53e6\u5916\u4e00\u4e2a\u540d\u79f0\u67e5\u627e\u7684\u8fc7\u7a0b\u662f ADL \uff0c\u5b83\u662f\u4ece\u51fd\u6570\u7684\u8c03\u7528\u53c2\u6570 a \u6240\u5728\u7684namespace\u5f00\u59cb\uff0c\u8fd9\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\u5c31\u662f aspace \uff0c\u5728\u8fd9\u4e2anamespace\u4e2d\u627e\u5230\u4e86 aspace::func(const aspace::A&) \u5e76\u505c\u6b62\u3002\u6700\u540e\u5c06\u8fd9\u4e24\u4e2a\u5339\u914d\u5230\u7684\u51fd\u51fd\u6570\u4ea4\u7ed9\u91cd\u8f7d\u51b3\u7b56\uff0c\u5728\u91cd\u8f7d\u51b3\u7b56\u9636\u6bb5\u4f1a\u6839\u636e\u53c2\u6570\u8fdb\u884c\u6700\u4f73\u5339\u914d\uff0c\u6700\u540e\u5bfb\u627e\u5230\u7684\u6700\u4f73\u5339\u914d\u5c31\u662f aspace::func(const aspace::A&) \uff0c\u800c bspace::func(int) \u5728\u91cd\u8f7d\u9636\u6bb5\u53d1\u73b0\u5176\u53c2\u6570\u5e76\u4e0d\u5339\u914d\u6240\u4ee5\u88ab\u62d2\u7edd\u4e86\u3002 \u57fa\u4e8e\u8c03\u7528\u5904\u6240\u5728\u4f5c\u7528\u57df\u5f00\u59cb\u7684\u540d\u79f0\u67e5\u627e\u548c\u6bcf\u4e2a\u56e0\u4e3a ADL \u6240\u89e6\u53d1\u7684\u540d\u79f0\u67e5\u627e\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u662f\u5e76\u884c\u53d1\u751f\u7684\uff0c\u6bcf\u4e00\u4e2a\u641c\u7d22\u90fd\u4f1a\u8fd4\u56de\u4e00\u7ec4\u5019\u9009\u7684\u51fd\u6570\u91cd\u8f7d\u3002\u6240\u6709\u7684\u8fd9\u4e9b\u641c\u7d22\u6240\u4ea7\u51fa\u7684\u7ed3\u679c\u90fd\u4f1a\u653e\u5728\u4e00\u4e2a\u96c6\u5408\u4e2d\uff0c\u6700\u540e\u901a\u8fc7\u91cd\u8f7d\u51b3\u7b56\u9636\u6bb5\u4ee5\u786e\u5b9a\u6700\u4f73\u7684\u5339\u914d\u3002\u5982\u679c\u6709\u4e00\u6279\u6700\u4f73\u7684\u5339\u914d\uff0c\u90a3\u4e48\u7f16\u8bd1\u5668\u5c31\u4f1a\u53d1\u51fa\u4e00\u4e2a\u6a21\u7cca\u7684\u9519\u8bef \"\u53ea\u80fd\u6709\u4e00\u4e2a\u6700\u4f73\u7684\u5339\u914d\"\uff0c\u5982\u679c\u6ca1\u6709\u627e\u5230\u4efb\u4f55\u4e00\u4e2a\u6700\u4f73\u7684\u5339\u914d\uff0c\u7f16\u8bd1\u5668\u4e5f\u4f1a\u62a5\u51fa\u4e00\u4e2a\u9519\u8bef \"\u5fc5\u987b\u8981\u6709\u4e00\u4e2a\u5339\u914d\"\u3002","title":"The Simple Case"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-49/#type-associated-namespaces","text":"\u524d\u9762\u7684\u4f8b\u5b50\u662f\u4e00\u4e2a\u6bd4\u8f83\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u66f4\u590d\u6742\u7684\u7c7b\u578b\u53ef\u4ee5\u6709\u591a\u4e2a\u4e0e\u4e4b\u5173\u8054\u7684 namespace \uff0c\u8fd9\u4e2a\u4e0e\u4e4b\u5173\u8054\u7684 namespace \u5305\u62ec\u4e86\u4e0e\u8fd9\u4e2a\u7c7b\u578b\u76f8\u5173\u7684\u4efb\u4f55 namespace \uff0c\u53c2\u6570\u7c7b\u578b\u7684\u5168\u79f0\u6240\u5728\u7684 namespace \u5c31\u662f\u5176\u4e2d\u7684\u4e00\u90e8\u5206\uff0c\u6b64\u5916\u8fd8\u6709\u6a21\u7248\u53c2\u6570\u7684\u7c7b\u578b\u6240\u5728\u7684 namespace \uff0c\u8fd8\u5305\u62ec\u4e86\u5176\u76f4\u63a5\u6216\u95f4\u63a5\u7684\u7236\u7c7b\u6240\u5728\u7684 namespace \u3002\u4f8b\u5982\u4e00\u4e2a\u5355\u53c2\u6570\u7684\u51fd\u6570\u8c03\u7528 a::A<b::B, c::internal::C*> \u5c06\u4f1a\u4ea7\u751f a \u3001 b \u3001 c::internal \u7b49\u4e09\u4e2a\u641c\u7d22\u7684\u57df\uff0c\u5728\u6bcf\u4e00\u4e2a\u641c\u7d22\u7684\u57df\u4e2d\u90fd\u4f1a\u67e5\u627e\u548c\u8c03\u7528\u51fd\u6570\u540d\u79f0\u76f8\u540c\u7684\u51fd\u6570\u3002\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\u5c31\u663e\u793a\u4e86\u8fd9\u4e9b\u6548\u679c\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 namespace aspace { struct A {}; template < typename T > struct AGeneric {}; void func ( const A & ); template < typename T > void find_me ( const T & ); } // namespace aspace namespace bspace { typedef aspace :: A AliasForA ; struct B : aspace :: A {}; template < typename T > struct BGeneric {}; void test () { // ok: base class namespace searched. func ( B ()); // ok: template parameter namespace searched. find_me ( BGeneric < aspace :: A > ()); // ok: template namespace searched. find_me ( aspace :: AGeneric < int > ()); } } // namespace bspace","title":"Type-Associated Namespaces"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-49/#tips","text":"\u968f\u7740\u57fa\u672c\u7684\u540d\u79f0\u67e5\u627e\u673a\u5236\u5728\u4f60\u7684\u8111\u6d77\u4e2d\u5f00\u59cb\u8bb0\u5fc6\u72b9\u65b0\u540e\uff0c\u8bf7\u8003\u8651\u4e0b\u9762\u8fd9\u4e9b Tips \uff0c\u8fd9\u4e9b Tips \u53ef\u80fd\u4f1a\u5e2e\u52a9\u60a8\u5199\u51fa\u66f4\u4f73\u7684 C++ \u4ee3\u7801\u3002","title":"Tips"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-49/#type-aliases","text":"\u6709\u7684\u65f6\u5019\u8981\u786e\u5b9a\u4e00\u4e2a\u7c7b\u578b\u6240\u5173\u8054\u7684 namespace \u662f\u9700\u8981\u82b1\u4e00\u4e9b\u65f6\u95f4\u6765\u8fa8\u522b\u7684\u3002 typedef \u548c using \u58f0\u660e\u53ef\u4ee5\u7ed9\u4e00\u4e2a\u7c7b\u578b\u5f15\u5165\u522b\u540d\u3002\u5728\u8fd9\u4e9b\u60c5\u51b5\u4e0b\uff0c\u9009\u62e9\u8981\u641c\u7d22\u7684 namespace \u5217\u8868\u4e4b\u524d\u9700\u8981\u5c06\u8fd9\u4e9b\u522b\u540d\u8fdb\u884c\u89e3\u6790\uff0c\u5e76\u6269\u5c55\u4e3a\u4ed6\u4eec\u7684\u6e90\u7c7b\u578b\u3002\u8fd9\u662f typedef \u548c using \u58f0\u660e\u53ef\u80fd\u4f1a\u5e26\u6765\u7684\u4e00\u4e9b\u8bef\u5bfc\uff0c\u56e0\u4e3a\u4ed6\u4eec\u53ef\u80fd\u4f1a\u5bfc\u81f4\u60a8\u5728\u5bf9ADL\u9700\u8981\u641c\u7d22\u54ea\u4e9b namespace \u65f6\u4f1a\u8fdb\u884c\u4e0d\u6b63\u786e\u7684\u9884\u6d4b\u3002\u5982\u4e0b\u6240\u793a\uff1a 1 2 3 4 5 6 namespace cspace { // ok: note that this searches aspace, not bspace. void test () { func ( bspace :: AliasForA ()); } } // namespace cspace","title":"Type Aliases"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-49/#caveat-iterator","text":"\u5bf9\u8fed\u4ee3\u5668\u8981\u5c0f\u5fc3\u3002\u4f60\u4e0d\u77e5\u9053\u4ed6\u4eec\u5173\u8054\u7684\u662f\u4ec0\u4e48 namespace \uff0c\u6240\u4ee5\u4e0d\u8981\u4f9d\u8d56\u4e8e ADL \u6765\u89e3\u51b3\u6d89\u53ca\u8fed\u4ee3\u5668\u7684\u51fd\u6570\u8c03\u7528\u7684\u540d\u79f0\u89e3\u6790\u3002\u5b83\u4eec\u53ef\u80fd\u53ea\u662f\u6307\u5411\u5143\u7d20\u7684\u6307\u9488\uff0c\u6216\u8005\u53ef\u80fd\u662f\u5728\u4e00\u4e2a\u4e0e\u5bb9\u5668\u5b9e\u73b0\u6240\u5728\u7684 namespace \u65e0\u5173\u7684\u4e00\u4e2a\u79c1\u6709 namespace \u4e2d\u3002 1 2 3 4 5 6 7 namespace d { int test () { std :: vector < int > vec ( a ); // maybe this compiles, maybe not! return count ( vec . begin (), vec . end (), 0 ); } } // namespace d \u4e0a\u9762\u7684\u4ee3\u7801\u4f9d\u8d56\u4e8e std::vector<int>::iterator \u662f int* (\u8fd9\u662f\u53ef\u80fd\u7684)\uff0c\u8fd8\u662f\u67d0\u4e2a\u7c7b\u578b\u5728\u5177\u6709 count \u91cd\u8f7d\u51fd\u6570\u7684\u547d\u540d\u7a7a\u95f4\u4e2d(\u5982 std::count() )\u3002\u8fd9\u53ef\u80fd\u4f1a\u5728\u67d0\u4e9b\u5e73\u53f0\u4e0a\u662f\u53ef\u4ee5\u8fd0\u884c\u7684\uff0c\u800c\u5728\u5176\u4ed6\u5e73\u53f0\u4e0a\u5219\u65e0\u6cd5\u8fd0\u884c\uff0c\u6216\u8005\u5b83\u53ef\u4ee5\u5728 debug \u4e0b\u53ef\u4ee5\u6b63\u5e38\u5de5\u4f5c\uff0c\u800c\u5728 release \u4e0b\u65e0\u6cd5\u8fd0\u884c\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\u4f7f\u7528\u5e26\u6709\u9650\u5b9a\u540d\u79f0\u7684\u51fd\u6570\u8c03\u7528\u65b9\u5f0f\u4f1a\u66f4\u597d\uff0c\u4f8b\u5982\u53ef\u4ee5\u50cf\u8fd9\u6837\u6765\u8c03\u7528 count \u51fd\u6570\uff0c std::cout() \u3002","title":"Caveat Iterator"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-49/#overloaded-operators","text":"\u8fd0\u7b97\u7b26(\u4f8b\u5982 + \u6216 << )\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u662f\u4e00\u79cd\u51fd\u6570\u540d\u79f0\uff0c\u4f8b\u5982 operator+(a,b) \u6216 operator<<(a,b) \u8fd9\u4e9b\u90fd\u88ab\u8ba4\u4e3a\u662f\u672a\u9650\u5b9a\u540d\u79f0\u7684\u8c03\u7528\u3002 ADL \u6700\u91cd\u8981\u7684\u5e94\u7528\u5c31\u662f\u7528\u4e8e\u5728\u901a\u8fc7 operator<< \u6765\u8bb0\u5f55\u65e5\u5fd7\u7684\u65f6\u5019\u3002\u901a\u5e38\u6211\u4eec\u4f1a\u770b\u5230\u50cf std::cout << obj; \u8fd9\u6837\u7684\u8c03\u7528\uff0c\u5bf9\u4e8e obj \u6211\u4eec\u5047\u5b9a\u8ba4\u4e3a\u5b83\u7684\u7c7b\u578b\u662f O::Obj \u3002\u8fd9\u4e2a\u8bed\u53e5\u5c55\u5f00\u6765\u770b\u5c31\u662f\u8fd9\u6837\u7684 operator<<(std::ostream&, const O::Obj&) \uff0c\u662f\u4e00\u4e2a\u672a\u9650\u5b9a\u540d\u79f0\u7684\u51fd\u6570\u8c03\u7528\uff0c\u5b83\u5c06\u4f1a\u901a\u8fc7 ADL \u4ece std::ostream \u53c2\u6570\u6240\u5bf9\u5e94\u7684 std namespace \u4e2d\u8fdb\u884c\u540d\u79f0\u7684\u67e5\u627e\uff0c\u4ee5\u53ca\u7b2c\u4e8c\u4e2a\u53c2\u6570 0::0bj \u7684 0 namespace \u4e2d\u8fdb\u884c\u67e5\u627e\uff0c\u5f53\u7136\u8fd8\u4f1a\u4ece\u51fd\u6570\u8c03\u7528\u5904\u6240\u5728\u7684\u4f5c\u7528\u57df\u5f00\u59cb\u5411\u5916\u8fdb\u884c\u67e5\u627e\u3002 \u5c06\u8fd9\u4e9b\u8fd0\u7b97\u7b26\u653e\u5728\u4e0e\u4ed6\u4eec\u8981\u64cd\u4f5c\u7684\u7528\u6237\u81ea\u5b9a\u4e49\u7c7b\u578b\u76f8\u540c\u7684\u540d\u79f0\u7a7a\u95f4\u4e2d\u5f88\u91cd\u8981\uff1a\u5728\u4e0a\u9762\u7684 namespace 0 \u7684\u4f8b\u5b50\u4e2d\uff0c\u5982\u679c\u5c06 operator<< \u653e\u5728\u50cf :: (\u5168\u5c40 namespace )\u8fd9\u6837\u7684\u5916\u90e8 namespace \u4e2d\uff0c\u8be5\u64cd\u4f5c\u7b26\u5c06\u5de5\u4f5c\u4e00\u6bb5\u65f6\u95f4\uff0c\u76f4\u5230\u6709\u4eba\u975e\u5e38\u65e0\u8f9c\u7684\u5c06\u4e00\u4e2a\u4e0d\u76f8\u5e72\u7684\u5176\u4ed6\u7c7b\u578b\u7684 operator<< \u64cd\u4f5c\u7b26\u653e\u5728 namespace 0 \u4e2d","title":"Overloaded Operators"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-49/#fundamental-types","text":"\u8bf7\u6ce8\u610f\uff0c\u57fa\u672c\u7c7b\u578b(\u5982 int \u3001 double \u7b49)\u4e0d\u548c\u5168\u5c40 namespace \u5173\u8054\u3002\u5b83\u4eec\u4e0d\u5173\u8054\u4efb\u4f55 namespace \uff0c\u4e5f\u4e0d\u4f1a\u5bf9 ADL \u4ea7\u751f\u4f5c\u7528\uff0c\u6307\u9488\u548c\u6570\u7ec4\u7c7b\u578b\u548c\u4ed6\u4eec\u6240\u6307\u5411\u7684\u5bf9\u8c61\u548c\u6216\u5143\u7d20\u7c7b\u578b\u6240\u5728\u7684 namespace \u8fdb\u884c\u5173\u8054\u3002","title":"Fundamental Types"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-49/#refactoring-gotchas","text":"\u5982\u679c\u5c06\u53c2\u6570\u7c7b\u578b\u66f4\u6539\u4e3a\u975e\u9650\u5b9a\u51fd\u6570\u8c03\u7528\u7684\u8bdd\uff0c\u4f1a\u5f71\u54cd\u90a3\u4e9b\u5177\u6709\u91cd\u8f7d\u7684\u51fd\u6570\u8c03\u7528\u884c\u4e3a\u3002\u53ea\u662f\u5c06\u4e00\u4e2a\u7c7b\u578b\u79fb\u52a8\u5230 namespace \u4e2d\uff0c\u5e76\u5728\u65e7\u7684\u547d\u540d\u7a7a\u95f4\u4e2d\u4f7f\u7528 typedef \u4ee5\u5b9e\u73b0\u517c\u5bb9\u6027\uff0c\u8fd9\u662f\u6ca1\u6709\u5e2e\u52a9\u7684\uff0c\u5b9e\u9645\u4e0a\u53ea\u4f1a\u4f7f\u95ee\u9898\u66f4\u96be\u88ab\u8bca\u65ad\u3002\u5c06\u7c7b\u578b\u79fb\u52a8\u5230\u65b0\u7684\u547d\u540d\u7a7a\u95f4\u4e2d\u65f6\u8981\u5c0f\u5fc3\u3002 \u7c7b\u4f3c\u7684\uff0c\u5c06\u51fd\u6570\u79fb\u52a8\u5230\u65b0\u7684 namespace \u4e2d\uff0c\u5e76\u8bbe\u7f6e\u597d using \u58f0\u660e\u3002\u8fd9\u610f\u5473\u7740\u975e\u9650\u5b9a\u7684\u8c03\u7528\u53ef\u80fd\u5c06\u4e0d\u4f1a\u627e\u5230\u4ed6\uff0c\u53ef\u60b2\u7684\u662f\uff0c\u4ed6\u4eec\u4ecd\u7136\u53ef\u4ee5\u901a\u8fc7\u627e\u5230\u4e0d\u540c\u7684\u51fd\u6570\u91cd\u8f7d\u6765\u5b8c\u6210\u7f16\u8bd1\u3002\u5f53\u79fb\u52a8\u4e00\u4e2a\u51fd\u6570\u5230\u65b0\u7684 namespace \u4e2d\u65f6\u8981\u5c0f\u5fc3\u3002","title":"Refactoring Gotchas"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-49/#final-thought","text":"\u76f8\u5bf9\u8f83\u5c11\u7684\u7a0b\u5e8f\u5458\u7406\u89e3\u4e0e\u51fd\u6570\u67e5\u627e\u76f8\u5173\u7684\u786e\u5207\u89c4\u5219\u548c\u6781\u7aef\u60c5\u51b5\uff0c\u8be5\u8bed\u8a00\u89c4\u8303\u91cc\u9762\u5305\u542b\u4e8613\u9875\u5173\u4e8e\u540d\u79f0\u641c\u7d22\u5305\u542b\u4e86\u54ea\u4e9b\u89c4\u5219\u3001\u7279\u6b8a\u60c5\u51b5\u3001\u4ee5\u53ca\u548c\u53cb\u5143\u51fd\u6570\u95ed\u5305\u7c7b\u641c\u7d22\u8303\u56f4\u7b49\uff0c\u9700\u8981\u4f60\u989d\u5916\u7684\u5c0f\u5fc3\u3002\u5c3d\u7ba1\u5b58\u5728\u8fd9\u4e9b\u590d\u6742\u6027\uff0c\u4f46\u5982\u679c\u60a8\u59cb\u7ec8\u7262\u8bb0\u5e76\u884c\u540d\u79f0\u641c\u7d22\u7684\u57fa\u672c\u6982\u5ff5\uff0c\u90a3\u4e48\u60a8\u5c06\u6709\u8db3\u591f\u7684\u57fa\u7840\u6765\u7406\u89e3\u51fd\u6570\u8c03\u7528\u548c\u8fd0\u7b97\u7b26\u662f\u5982\u4f55\u89e3\u6790\u7684\u3002\u73b0\u5728\u901a\u8fc7\u672c\u6587\uff0c\u60a8\u5c06\u80fd\u591f\u7406\u89e3\u51fd\u6570\u8c03\u7528\u548c\u8fd0\u7b97\u7b26\u662f\u5982\u4f55\u9009\u62e9\u51fd\u6570\u58f0\u660e\u7684\uff0c\u5e76\u4e14\u5f53\u53d1\u751f\u91cd\u8f7d\u51b3\u8bae\u5931\u8d25\u548c\u540d\u79f0\u8986\u76d6\u7b49\u4ee4\u4eba\u8d39\u89e3\u7684\u6784\u5efa\u9519\u8bef\u65f6\uff0c\u4f60\u5c06\u66f4\u5bb9\u6613\u8bca\u65ad\u3002","title":"Final Thought"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-55/","text":"Tip of the Week #55: Name Counting and unique_ptr Originally published as totw/55 on 2013-09-12 by Titus Winters (titus@google.com) Updated 2017-10-20 Quicklink: abseil.io/tips/55 \u201cThough we may know Him by a thousand names, He is one and the same to us all.\u201d - Mahatma Gandhi \u901a\u4fd7\u6765\u8bf4\uff0c\u503c\u7684\"\u540d\u79f0\"\u53ef\u4ee5\u662f\u4efb\u4f55\u503c\u7c7b\u578b\u7684\u53d8\u91cf(\u4e0d\u662f\u6307\u9488\uff0c\u4e5f\u4e0d\u662f\u5f15\u7528)\uff0c\u5728\u4efb\u4f55\u8303\u56f4\u5185\uff0c\u5b83\u5305\u542b\u7279\u5b9a\u7684\u6570\u636e\u503c(\u4e25\u683c\u6765\u8bf4\uff0c\u8fd9\u91cc\u8ba8\u8bba\u7684\"\u540d\u79f0\"\u6307\u7684\u662f\u5de6\u503c)\u3002 std::unique_ptr \u6bd4\u8f83\u7279\u6b8a\uff0c\u5b83\u8981\u6c42\u5b58\u5165\u7684\u503c\u53ea\u80fd\u6709\u4e00\u4e2a\u5bf9\u5e94\u7684\u540d\u79f0\uff0c \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0cC++\u8bed\u8a00\u59d4\u5458\u4f1a\uff0c\u4f1a\u4e3a std::unique_ptr \u9009\u62e9\u4e86\u4e00\u4e2a\u975e\u5e38\u5408\u9002\u7684\u540d\u79f0\u3002\u5b58\u50a8\u5728 std::unique_ptr \u4e2d\u4efb\u4f55\u975e\u7a7a\u6307\u9488\u7684\u503c\u5fc5\u987b\u5728\u4efb\u4f55\u65f6\u5019\u53ea\u51fa\u73b0\u5728\u4e00\u4e2a std::unique_ptr \u4e2d\u3002\u6807\u51c6\u5e93\u5728\u8bbe\u8ba1\u7684\u65f6\u5019\u5c31\u5f3a\u5236\u4e86\u8fd9\u4e2a\u884c\u4e3a\u3002 std::unique_ptr \u4ee3\u7801\u76f8\u5173\u7684\u8bb8\u591a\u7f16\u8bd1\u95ee\u9898\u90fd\u53ef\u4ee5\u901a\u8fc7\u5b66\u4e60\u5982\u4f55\u8bc6\u522b std::unique_ptr \u7684\u540d\u79f0\u8ba1\u6570\u6765\u89e3\u51b3: \u8ba1\u6570\u662f1\u662f\u6b63\u5e38\u7684\uff0c\u4f46\u662f\u540c\u4e00\u6307\u9488\u503c\u6709\u591a\u4e2a\u540d\u79f0\u5c31\u6709\u95ee\u9898\u4e86\u3002 \u8ba9\u6211\u4eec\u6765\u7edf\u8ba1\u4e00\u4e0b\u540d\u5b57\u5427\uff0c\u5728\u6bcf\u4e00\u884c\u7684\u5730\u65b9\uff0c\u8ba1\u7b97\u8fd9\u4e2a\u70b9\u548c std::unique_ptr \u6240\u5305\u542b\u7684\u6307\u9488\u76f8\u540c\u7684\u540d\u79f0\u6709\u51e0\u4e2a(\u65e0\u8bba\u662f\u5426\u5728\u8303\u56f4\u5185).\u5982\u679c\u4f60\u6709\u53d1\u73b0\u6709\u591a\u4e2a\u540d\u79f0\u7684\u503c\u4e3a\u76f8\u540c\u6307\u9488\u7684\u8bdd\u3002\u90a3\u5c31\u662f\u9519\u8bef\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 std :: unique_ptr < Foo > NewFoo () { return std :: unique_ptr < Foo > ( new Foo ( 1 )); } void AcceptFoo ( std :: unique_ptr < Foo > f ) { f -> PrintDebugString (); } void Simple () { AcceptFoo ( NewFoo ()); } void DoesNotBuild () { std :: unique_ptr < Foo > g = NewFoo (); AcceptFoo ( g ); // DOES NOT COMPILE! } void SmarterThanTheCompilerButNot () { Foo * j = new Foo ( 2 ); // Compiles, BUT VIOLATES THE RULE and will double-delete at runtime. std :: unique_ptr < Foo > k ( j ); std :: unique_ptr < Foo > l ( j ); } \u5728 Simple \u51fd\u6570\u4e2d\uff0c NewFoo() \u5206\u914d\u4e86\u552f\u4e00\u7684\u6307\u9488\uff0c\u53ef\u4ee5\u901a\u8fc7 AccepFoo() \u4e2d\u7684\u540d\u79f0 f \u6765\u5f15\u7528\u4e86\u5b83\u3002 DoesNotBuild \u548c Simple \u76f8\u53cd\uff0c NewFoo() \u5206\u914d\u7684\u6307\u9488\u6709\u4e24\u4e2a\u540d\u79f0\u5f15\u7528\u5b83\uff0c\u4e00\u4e2a\u662f g ,\u53e6\u5916\u4e00\u4e2a\u662f AccepFoo \u4e2d\u7684 f \u3002 \u8fd9\u662f\u4e00\u4e2a\u7ecf\u5178\u7684\u552f\u4e00\u6027\u8fdd\u89c4: \u5728\u6267\u884c\u7684\u4efb\u4f55\u7ed9\u5b9a\u70b9\uff0c std::unique_ptr (\u6216\u8005\u66f4\u4e00\u822c\u6765\u8bf4\uff0c\u4efb\u4f55\u53ea\u79fb\u52a8\u7c7b\u578b)\u6301\u6709\u7684\u4efb\u4f55\u503c\u53ea\u80fd\u6709\u4e00\u4e2a\u4e0d\u540c\u7684\u540d\u79f0\u5f15\u7528\u3002\u4efb\u4f55\u770b\u8d77\u6765\u50cf\u662f\u901a\u8fc7\u62f7\u8d1d\u5f15\u5165\u4e86\u540d\u79f0\u526f\u672c\u7684\u884c\u4e3a\u90fd\u662f\u7981\u6b62\u7684\uff0c\u4e0d\u4f1a\u8fdb\u884c\u7f16\u8bd1\u3002 1 2 scratch . cc : error : call to deleted constructor of std :: unique_ptr < Foo > ' AcceptFoo ( g ); \u5373\u4f7f\u4f60\u901a\u8fc7\u4e86\u7f16\u8bd1\uff0c std::unique_ptr \u7684\u8fd0\u884c\u65f6\u4ecd\u7136\u4f1a\u68c0\u6d4b\u5230\u8fd9\u79cd\u884c\u4e3a\u3002\u4efb\u4f55\u65f6\u5019\u4f60\u7ed9 std::unique_ptr \u5f15\u5165\u4e86\u591a\u4e2a\u540d\u79f0\uff0c\u4f60\u4ee5\u4e3a\u9a97\u8fc7\u4e86\u7f16\u8bd1\u5668(\u770b SmarterThanTheCompilerButNot \u51fd\u6570)\uff0c\u7f16\u8bd1\u6ca1\u6709\u95ee\u9898\uff0c\u4f46\u4f60\u4f1a\u9047\u5230\u8fd0\u884c\u65f6\u7684\u5185\u5b58\u95ee\u9898\u3002 \u73b0\u5728\u95ee\u9898\u53d8\u6210\u4e86\uff0c\u6211\u4eec\u5982\u4f55\u5220\u9664\u540d\u79f0? C++11 \u4e2d\u901a\u8fc7 std::move \u7684\u5f62\u5f0f\u4e3a\u5b83\u63d0\u4f9b\u4e86\u89e3\u51b3\u65b9\u6848\u3002 1 2 3 4 void EraseTheName () { std :: unique_ptr < Foo > h = NewFoo (); AcceptFoo ( std :: move ( h )); // Fixes DoesNotBuild with std::move } std::move \u7684\u8c03\u7528\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u4e00\u4e2a\u540d\u79f0\u64e6\u9664: \u611f\u5ff5\u4e0a\u6765\u8bb2\uff0c\u4f60\u53ef\u4ee5\u505c\u6b62\u5bf9 h \u8fdb\u884c\u540d\u79f0\u5f15\u7528\u7684\u8ba1\u6570\u4e86\u3002\u73b0\u5728\u4e0a\u9762\u7684\u4ee3\u7801\u901a\u8fc7\u4e86\u540d\u79f0\u552f\u4e00\u6027\u7684\u539f\u5219\u4e86\uff0c\u901a\u8fc7 NewFoo \u5206\u914d\u7684\u552f\u4e00\u6027\u6307\u9488\u53ea\u6709\u4e00\u4e2a\u540d\u79f0 h \uff0c\u8c03\u7528 AcceptFoo \u7684\u65f6\u5019\u540c\u6837\u4e5f\u53ea\u6709\u4e00\u4e2a\u540d\u79f0\u5f15\u7528\u5b83\uff0c\u56e0\u4e3a\u901a\u8fc7 std::move \u5df2\u7ecf\u628a\u540d\u79f0 h \u7ed9\u64e6\u9664\u4e86\u3002 \u540d\u79f0\u8ba1\u6570\u662f\u73b0\u4ee3C++\u4e2d\u4e00\u4e2a\u5f88\u65b9\u4fbf\u7684\u6280\u5de7\uff0c\u5bf9\u4e8e\u90a3\u4e9b\u4e0d\u719f\u6089\u5de6\u503c\u548c\u53f3\u503c\u7684\u4eba\u6765\u8bf4\uff0c\u8fd9\u4e2a\u673a\u5236\u53ef\u4ee5\u5e2e\u52a9\u4f60\u8bc6\u522b\u4e0d\u5fc5\u8981\u7684\u62f7\u8d1d\uff0c\u5e2e\u52a9\u4f60\u6b63\u786e\u4f7f\u7528 std::unique_ptr \u3002\u5982\u679c\u4f60\u53d1\u73b0\u67d0\u4e2a\u503c\u6709\u592a\u591a\u7684\u540d\u79f0\uff0c\u8bf7\u4f7f\u7528 std::move \u5220\u9664\u4e0d\u9700\u8981\u7684\u540d\u79f0\u3002","title":"Tip of the Week #55: Name Counting and unique_ptr"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-55/#tip-of-the-week-55-name-counting-and-unique_ptr","text":"Originally published as totw/55 on 2013-09-12 by Titus Winters (titus@google.com) Updated 2017-10-20 Quicklink: abseil.io/tips/55 \u201cThough we may know Him by a thousand names, He is one and the same to us all.\u201d - Mahatma Gandhi \u901a\u4fd7\u6765\u8bf4\uff0c\u503c\u7684\"\u540d\u79f0\"\u53ef\u4ee5\u662f\u4efb\u4f55\u503c\u7c7b\u578b\u7684\u53d8\u91cf(\u4e0d\u662f\u6307\u9488\uff0c\u4e5f\u4e0d\u662f\u5f15\u7528)\uff0c\u5728\u4efb\u4f55\u8303\u56f4\u5185\uff0c\u5b83\u5305\u542b\u7279\u5b9a\u7684\u6570\u636e\u503c(\u4e25\u683c\u6765\u8bf4\uff0c\u8fd9\u91cc\u8ba8\u8bba\u7684\"\u540d\u79f0\"\u6307\u7684\u662f\u5de6\u503c)\u3002 std::unique_ptr \u6bd4\u8f83\u7279\u6b8a\uff0c\u5b83\u8981\u6c42\u5b58\u5165\u7684\u503c\u53ea\u80fd\u6709\u4e00\u4e2a\u5bf9\u5e94\u7684\u540d\u79f0\uff0c \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0cC++\u8bed\u8a00\u59d4\u5458\u4f1a\uff0c\u4f1a\u4e3a std::unique_ptr \u9009\u62e9\u4e86\u4e00\u4e2a\u975e\u5e38\u5408\u9002\u7684\u540d\u79f0\u3002\u5b58\u50a8\u5728 std::unique_ptr \u4e2d\u4efb\u4f55\u975e\u7a7a\u6307\u9488\u7684\u503c\u5fc5\u987b\u5728\u4efb\u4f55\u65f6\u5019\u53ea\u51fa\u73b0\u5728\u4e00\u4e2a std::unique_ptr \u4e2d\u3002\u6807\u51c6\u5e93\u5728\u8bbe\u8ba1\u7684\u65f6\u5019\u5c31\u5f3a\u5236\u4e86\u8fd9\u4e2a\u884c\u4e3a\u3002 std::unique_ptr \u4ee3\u7801\u76f8\u5173\u7684\u8bb8\u591a\u7f16\u8bd1\u95ee\u9898\u90fd\u53ef\u4ee5\u901a\u8fc7\u5b66\u4e60\u5982\u4f55\u8bc6\u522b std::unique_ptr \u7684\u540d\u79f0\u8ba1\u6570\u6765\u89e3\u51b3: \u8ba1\u6570\u662f1\u662f\u6b63\u5e38\u7684\uff0c\u4f46\u662f\u540c\u4e00\u6307\u9488\u503c\u6709\u591a\u4e2a\u540d\u79f0\u5c31\u6709\u95ee\u9898\u4e86\u3002 \u8ba9\u6211\u4eec\u6765\u7edf\u8ba1\u4e00\u4e0b\u540d\u5b57\u5427\uff0c\u5728\u6bcf\u4e00\u884c\u7684\u5730\u65b9\uff0c\u8ba1\u7b97\u8fd9\u4e2a\u70b9\u548c std::unique_ptr \u6240\u5305\u542b\u7684\u6307\u9488\u76f8\u540c\u7684\u540d\u79f0\u6709\u51e0\u4e2a(\u65e0\u8bba\u662f\u5426\u5728\u8303\u56f4\u5185).\u5982\u679c\u4f60\u6709\u53d1\u73b0\u6709\u591a\u4e2a\u540d\u79f0\u7684\u503c\u4e3a\u76f8\u540c\u6307\u9488\u7684\u8bdd\u3002\u90a3\u5c31\u662f\u9519\u8bef\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 std :: unique_ptr < Foo > NewFoo () { return std :: unique_ptr < Foo > ( new Foo ( 1 )); } void AcceptFoo ( std :: unique_ptr < Foo > f ) { f -> PrintDebugString (); } void Simple () { AcceptFoo ( NewFoo ()); } void DoesNotBuild () { std :: unique_ptr < Foo > g = NewFoo (); AcceptFoo ( g ); // DOES NOT COMPILE! } void SmarterThanTheCompilerButNot () { Foo * j = new Foo ( 2 ); // Compiles, BUT VIOLATES THE RULE and will double-delete at runtime. std :: unique_ptr < Foo > k ( j ); std :: unique_ptr < Foo > l ( j ); } \u5728 Simple \u51fd\u6570\u4e2d\uff0c NewFoo() \u5206\u914d\u4e86\u552f\u4e00\u7684\u6307\u9488\uff0c\u53ef\u4ee5\u901a\u8fc7 AccepFoo() \u4e2d\u7684\u540d\u79f0 f \u6765\u5f15\u7528\u4e86\u5b83\u3002 DoesNotBuild \u548c Simple \u76f8\u53cd\uff0c NewFoo() \u5206\u914d\u7684\u6307\u9488\u6709\u4e24\u4e2a\u540d\u79f0\u5f15\u7528\u5b83\uff0c\u4e00\u4e2a\u662f g ,\u53e6\u5916\u4e00\u4e2a\u662f AccepFoo \u4e2d\u7684 f \u3002 \u8fd9\u662f\u4e00\u4e2a\u7ecf\u5178\u7684\u552f\u4e00\u6027\u8fdd\u89c4: \u5728\u6267\u884c\u7684\u4efb\u4f55\u7ed9\u5b9a\u70b9\uff0c std::unique_ptr (\u6216\u8005\u66f4\u4e00\u822c\u6765\u8bf4\uff0c\u4efb\u4f55\u53ea\u79fb\u52a8\u7c7b\u578b)\u6301\u6709\u7684\u4efb\u4f55\u503c\u53ea\u80fd\u6709\u4e00\u4e2a\u4e0d\u540c\u7684\u540d\u79f0\u5f15\u7528\u3002\u4efb\u4f55\u770b\u8d77\u6765\u50cf\u662f\u901a\u8fc7\u62f7\u8d1d\u5f15\u5165\u4e86\u540d\u79f0\u526f\u672c\u7684\u884c\u4e3a\u90fd\u662f\u7981\u6b62\u7684\uff0c\u4e0d\u4f1a\u8fdb\u884c\u7f16\u8bd1\u3002 1 2 scratch . cc : error : call to deleted constructor of std :: unique_ptr < Foo > ' AcceptFoo ( g ); \u5373\u4f7f\u4f60\u901a\u8fc7\u4e86\u7f16\u8bd1\uff0c std::unique_ptr \u7684\u8fd0\u884c\u65f6\u4ecd\u7136\u4f1a\u68c0\u6d4b\u5230\u8fd9\u79cd\u884c\u4e3a\u3002\u4efb\u4f55\u65f6\u5019\u4f60\u7ed9 std::unique_ptr \u5f15\u5165\u4e86\u591a\u4e2a\u540d\u79f0\uff0c\u4f60\u4ee5\u4e3a\u9a97\u8fc7\u4e86\u7f16\u8bd1\u5668(\u770b SmarterThanTheCompilerButNot \u51fd\u6570)\uff0c\u7f16\u8bd1\u6ca1\u6709\u95ee\u9898\uff0c\u4f46\u4f60\u4f1a\u9047\u5230\u8fd0\u884c\u65f6\u7684\u5185\u5b58\u95ee\u9898\u3002 \u73b0\u5728\u95ee\u9898\u53d8\u6210\u4e86\uff0c\u6211\u4eec\u5982\u4f55\u5220\u9664\u540d\u79f0? C++11 \u4e2d\u901a\u8fc7 std::move \u7684\u5f62\u5f0f\u4e3a\u5b83\u63d0\u4f9b\u4e86\u89e3\u51b3\u65b9\u6848\u3002 1 2 3 4 void EraseTheName () { std :: unique_ptr < Foo > h = NewFoo (); AcceptFoo ( std :: move ( h )); // Fixes DoesNotBuild with std::move } std::move \u7684\u8c03\u7528\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u4e00\u4e2a\u540d\u79f0\u64e6\u9664: \u611f\u5ff5\u4e0a\u6765\u8bb2\uff0c\u4f60\u53ef\u4ee5\u505c\u6b62\u5bf9 h \u8fdb\u884c\u540d\u79f0\u5f15\u7528\u7684\u8ba1\u6570\u4e86\u3002\u73b0\u5728\u4e0a\u9762\u7684\u4ee3\u7801\u901a\u8fc7\u4e86\u540d\u79f0\u552f\u4e00\u6027\u7684\u539f\u5219\u4e86\uff0c\u901a\u8fc7 NewFoo \u5206\u914d\u7684\u552f\u4e00\u6027\u6307\u9488\u53ea\u6709\u4e00\u4e2a\u540d\u79f0 h \uff0c\u8c03\u7528 AcceptFoo \u7684\u65f6\u5019\u540c\u6837\u4e5f\u53ea\u6709\u4e00\u4e2a\u540d\u79f0\u5f15\u7528\u5b83\uff0c\u56e0\u4e3a\u901a\u8fc7 std::move \u5df2\u7ecf\u628a\u540d\u79f0 h \u7ed9\u64e6\u9664\u4e86\u3002 \u540d\u79f0\u8ba1\u6570\u662f\u73b0\u4ee3C++\u4e2d\u4e00\u4e2a\u5f88\u65b9\u4fbf\u7684\u6280\u5de7\uff0c\u5bf9\u4e8e\u90a3\u4e9b\u4e0d\u719f\u6089\u5de6\u503c\u548c\u53f3\u503c\u7684\u4eba\u6765\u8bf4\uff0c\u8fd9\u4e2a\u673a\u5236\u53ef\u4ee5\u5e2e\u52a9\u4f60\u8bc6\u522b\u4e0d\u5fc5\u8981\u7684\u62f7\u8d1d\uff0c\u5e2e\u52a9\u4f60\u6b63\u786e\u4f7f\u7528 std::unique_ptr \u3002\u5982\u679c\u4f60\u53d1\u73b0\u67d0\u4e2a\u503c\u6709\u592a\u591a\u7684\u540d\u79f0\uff0c\u8bf7\u4f7f\u7528 std::move \u5220\u9664\u4e0d\u9700\u8981\u7684\u540d\u79f0\u3002","title":"Tip of the Week #55: Name Counting and unique_ptr"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-59/","text":"Tip of the Week #59: Joining Tuples Originally published as totw/59 on 2013-10-21 By Greg Miller (jgm@google.com) Updated 2018-01-24 \u201cNow join your hands, and with your hands your hearts.\u201d \u2013Henry VI, William Shakespeare 2013\u5e74\u7684\u4e09\u6708\u6211\u4eec\u5728 Tips #36 \u4e2d\u5ba3\u5e03\u4e86\u4e00\u4e2a\u65b0\u7684 string joining API\uff0c\u5927\u5bb6\u5bf9\u4e8e\u65b0\u7684API\u7684\u53cd\u9988\u662f\u975e\u5e38\u79ef\u6781\u7684\uff0c\u6211\u4eec\u52aa\u529b\u4f7f\u8fd9\u4e2aAPI\u66f4\u597d\u3002\u5728\u53cd\u9988\u7684\u610f\u89c1\u4e2d\u6700\u91cd\u8981\u7684\u662f\u63d0\u4f9b\u8fde\u63a5\u4e0d\u540c\u7c7b\u578b\u6570\u636e\u7684\u529f\u80fd\u3002\u6211\u4eec\u6ca1\u6709\u4f7f\u7528\u53ef\u53d8\u53c2\u6570\u6216\u8005\u662f\u53ef\u53d8\u6a21\u7248\u7684\u65b9\u5f0f\u6765\u5b9e\u73b0\uff0c\u800c\u662f\u9009\u62e9\u652f\u6301 std::tuple \uff0c\u901a\u8fc7 std::tuple \u95f4\u63a5\u7684\u6765\u652f\u6301\u3002\u8fd9\u5f88\u597d\u7684\u6ee1\u8db3\u4e86\u9700\u6c42\u3002\u53ea\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u5305\u542b\u4e0d\u540c\u7c7b\u578b\u6570\u636e\u7684 std::tuple \u5373\u53ef\uff0c absl::StrJoin \u4f1a\u50cf\u5176\u5b83\u4efb\u4f55\u5bb9\u5668\u4e00\u6837\u63a5\u6536\u5b83\u3002\u8fd9\u91cc\u6709\u4e00\u4e9b\u4f8b\u5b50\uff0c\u5982\u4e0b: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 auto tup = std :: make_tuple ( 123 , \"abc\" , 0.456 ); std :: string s = absl :: StrJoin ( tup , \"-\" ); s = absl :: StrJoin ( std :: make_tuple ( 123 , \"abc\" , 0.456 ), \"-\" ); int a = 123 ; std :: string b = \"abc\" ; double c = 0.456 ; // Works, but copies all arguments. s = absl :: StrJoin ( std :: make_tuple ( a , b , c ), \"-\" ); // No copies, but only works with lvalues. s = absl :: StrJoin ( std :: tie ( a , b , c ), \"-\" ); // No copies, and works with lvalues and rvalues. s = absl :: StrJoin ( std :: forward_as_tuple ( 123 , MakeFoo (), c ), \"-\" ); \u548c\u5176\u4ed6\u4efb\u4f55\u5bb9\u5668\u4e00\u6837\uff0c\u9ed8\u8ba4 tuple \u4e2d\u7684\u5143\u7d20\u662f\u901a\u8fc7 absl::AlphaNumFormatter \u8fd9\u4e2aformatted\u6765\u8fdb\u884c\u683c\u5f0f\u5316\u7684\uff0c\u5982\u679c\u4f60\u7684 tuple \u4e2d\u5305\u542b\u4e86\u9ed8\u8ba4 Formatter \u65e0\u6cd5\u683c\u5f0f\u5316\u7684\u7c7b\u578b\uff0c\u4f60\u53ef\u4ee5\u81ea\u5b9a\u4e49 Formatter \u3002\u4f60\u81ea\u5b9a\u4e49\u7684 Formatter \u5bf9\u8c61\u53ef\u80fd\u9700\u8981\u5305\u542b\u591a\u4e2a operator \u91cd\u8f7d\u3002\u4f8b\u5982: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 struct Foo {}; struct Bar {}; struct MyFormatter { void operator ()( string * out , const Foo & f ) const { out -> append ( \"Foo\" ); } void operator ()( string * out , const Bar & b ) const { out -> append ( \"Bar\" ); } }; std :: string s = absl :: StrJoin ( std :: forward_as_tuple ( Foo (), Bar ()), \"-\" , MyFormatter ()); EXPECT_EQ ( s , \"Foo-Bar\" ); absl::StrJoin API\u7684\u76ee\u6807\u662f\u901a\u8fc7\u4e00\u81f4\u7684\u8bed\u6cd5\u6765join\u4efb\u4f55\u96c6\u5408\u3001range\u3001list\u6216\u4e00\u7ec4\u6570\u636e\u3002\u6211\u4eec\u8ba4\u4e3a\u52a0\u5165 std::tuple \u5bf9\u8c61\u975e\u5e38\u9002\u5408\u8fd9\u4e2a\u76ee\u6807\uff0c\u5e76\u672aAPI\u589e\u52a0\u4e86\u66f4\u591a\u7684\u7075\u6d3b\u6027\u3002","title":"Tip of the Week #59: Joining Tuples"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-59/#tip-of-the-week-59-joining-tuples","text":"Originally published as totw/59 on 2013-10-21 By Greg Miller (jgm@google.com) Updated 2018-01-24 \u201cNow join your hands, and with your hands your hearts.\u201d \u2013Henry VI, William Shakespeare 2013\u5e74\u7684\u4e09\u6708\u6211\u4eec\u5728 Tips #36 \u4e2d\u5ba3\u5e03\u4e86\u4e00\u4e2a\u65b0\u7684 string joining API\uff0c\u5927\u5bb6\u5bf9\u4e8e\u65b0\u7684API\u7684\u53cd\u9988\u662f\u975e\u5e38\u79ef\u6781\u7684\uff0c\u6211\u4eec\u52aa\u529b\u4f7f\u8fd9\u4e2aAPI\u66f4\u597d\u3002\u5728\u53cd\u9988\u7684\u610f\u89c1\u4e2d\u6700\u91cd\u8981\u7684\u662f\u63d0\u4f9b\u8fde\u63a5\u4e0d\u540c\u7c7b\u578b\u6570\u636e\u7684\u529f\u80fd\u3002\u6211\u4eec\u6ca1\u6709\u4f7f\u7528\u53ef\u53d8\u53c2\u6570\u6216\u8005\u662f\u53ef\u53d8\u6a21\u7248\u7684\u65b9\u5f0f\u6765\u5b9e\u73b0\uff0c\u800c\u662f\u9009\u62e9\u652f\u6301 std::tuple \uff0c\u901a\u8fc7 std::tuple \u95f4\u63a5\u7684\u6765\u652f\u6301\u3002\u8fd9\u5f88\u597d\u7684\u6ee1\u8db3\u4e86\u9700\u6c42\u3002\u53ea\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u5305\u542b\u4e0d\u540c\u7c7b\u578b\u6570\u636e\u7684 std::tuple \u5373\u53ef\uff0c absl::StrJoin \u4f1a\u50cf\u5176\u5b83\u4efb\u4f55\u5bb9\u5668\u4e00\u6837\u63a5\u6536\u5b83\u3002\u8fd9\u91cc\u6709\u4e00\u4e9b\u4f8b\u5b50\uff0c\u5982\u4e0b: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 auto tup = std :: make_tuple ( 123 , \"abc\" , 0.456 ); std :: string s = absl :: StrJoin ( tup , \"-\" ); s = absl :: StrJoin ( std :: make_tuple ( 123 , \"abc\" , 0.456 ), \"-\" ); int a = 123 ; std :: string b = \"abc\" ; double c = 0.456 ; // Works, but copies all arguments. s = absl :: StrJoin ( std :: make_tuple ( a , b , c ), \"-\" ); // No copies, but only works with lvalues. s = absl :: StrJoin ( std :: tie ( a , b , c ), \"-\" ); // No copies, and works with lvalues and rvalues. s = absl :: StrJoin ( std :: forward_as_tuple ( 123 , MakeFoo (), c ), \"-\" ); \u548c\u5176\u4ed6\u4efb\u4f55\u5bb9\u5668\u4e00\u6837\uff0c\u9ed8\u8ba4 tuple \u4e2d\u7684\u5143\u7d20\u662f\u901a\u8fc7 absl::AlphaNumFormatter \u8fd9\u4e2aformatted\u6765\u8fdb\u884c\u683c\u5f0f\u5316\u7684\uff0c\u5982\u679c\u4f60\u7684 tuple \u4e2d\u5305\u542b\u4e86\u9ed8\u8ba4 Formatter \u65e0\u6cd5\u683c\u5f0f\u5316\u7684\u7c7b\u578b\uff0c\u4f60\u53ef\u4ee5\u81ea\u5b9a\u4e49 Formatter \u3002\u4f60\u81ea\u5b9a\u4e49\u7684 Formatter \u5bf9\u8c61\u53ef\u80fd\u9700\u8981\u5305\u542b\u591a\u4e2a operator \u91cd\u8f7d\u3002\u4f8b\u5982: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 struct Foo {}; struct Bar {}; struct MyFormatter { void operator ()( string * out , const Foo & f ) const { out -> append ( \"Foo\" ); } void operator ()( string * out , const Bar & b ) const { out -> append ( \"Bar\" ); } }; std :: string s = absl :: StrJoin ( std :: forward_as_tuple ( Foo (), Bar ()), \"-\" , MyFormatter ()); EXPECT_EQ ( s , \"Foo-Bar\" ); absl::StrJoin API\u7684\u76ee\u6807\u662f\u901a\u8fc7\u4e00\u81f4\u7684\u8bed\u6cd5\u6765join\u4efb\u4f55\u96c6\u5408\u3001range\u3001list\u6216\u4e00\u7ec4\u6570\u636e\u3002\u6211\u4eec\u8ba4\u4e3a\u52a0\u5165 std::tuple \u5bf9\u8c61\u975e\u5e38\u9002\u5408\u8fd9\u4e2a\u76ee\u6807\uff0c\u5e76\u672aAPI\u589e\u52a0\u4e86\u66f4\u591a\u7684\u7075\u6d3b\u6027\u3002","title":"Tip of the Week #59: Joining Tuples"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-61/","text":"Tip of the Week #61: Default Member Initializers Originally posted as Totw #61 on Nov 12, 2013 by Michael Chastain (mec.desktop@gmail.com) Updated October, 2016 Declaring Default Member Initialization \u4e00\u4e2a\u9ed8\u8ba4\u7684\u6210\u5458\u521d\u59cb\u5316\u58f0\u660e\u662f\u7528\u4e8e\u7ed9\u6210\u5458\u5728\u6784\u9020\u7684\u65f6\u5019\u63d0\u4f9b\u4e00\u4e2a\u9ed8\u8ba4\u503c\uff0c\u770b\u8d77\u6765\u50cf\u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801: 1 2 3 4 class Client { private : int chunks_in_flight_ = 0 ; }; \u8fd9\u79cd\u9ed8\u8ba4\u7684\u6210\u5458\u521d\u59cb\u5316\u4f1a\u81ea\u52a8\u6dfb\u52a0\u5230\u7c7b\u7684\u6240\u6709\u6784\u9020\u51fd\u6570\u4e2d\uff0c\u751a\u81f3\u5305\u62ecC++\u7f16\u8bd1\u5668\u5408\u6210\u7684\u6784\u9020\u51fd\u6570\u3002\u7c7b\u7684\u6210\u5458\u9ed8\u8ba4\u521d\u59cb\u5316\u8fd9\u79cd\u65b9\u5f0f\u5bf9\u4e8e\u62e5\u6709\u4f17\u591a\u6570\u636e\u6210\u5458\u7684\u7c7b\u6765\u8bf4\u5f88\u6709\u7528\uff0c\u5c24\u5176\u662f\u5bf9\u4e8e\u50cf bool \u3001 int \u3001 double \u548c\u88f8\u6307\u9488\u7b49\u7c7b\u578b\u3002\u8fd9\u4e9b\u57fa\u672c\u7c7b\u578b\u7684\u975e\u9759\u6001\u7684\u6570\u636e\u6210\u5458\u7ecf\u5e38\u4f1a\u5fd8\u8bb0\u5728\u6784\u9020\u51fd\u6570\u4e2d\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u4f46\u662f\u4efb\u4f55\u7c7b\u578b\u7684\u975e\u9759\u6001\u6570\u636e\u6210\u5458\u90fd\u53ef\u80fd\u5177\u6709\u521d\u59cb\u5316\u7a0b\u5e8f\u3002 Non-static data members of any type may have initializers, though. \u6700\u540e\u4e00\u53e5\u7ffb\u8bd1\u7684\u4e0d\u597d\uff0c\u611f\u89c9\u6ca1\u6709\u4e0a\u4e0b\u6587 \u9ed8\u8ba4\u7684\u6210\u5458\u521d\u59cb\u5316\u5bf9\u4e8e\u90a3\u4e9b\u7528\u6237\u6ca1\u6709\u7f16\u5199\u6784\u9020\u51fd\u6570\u7684\u7b80\u5355\u7ed3\u6784\u6765\u8bf4\uff0c\u4e5f\u5f88\u6709\u7528: 1 2 3 4 5 6 struct Options { bool use_loas = true ; bool log_pii = false ; int timeout_ms = 60 * 1000 ; std :: array < int , 4 > timeout_backoff_ms = { 10 , 100 , 1000 , 10 * 1000 }; }; Member Initialization Overrides \u5982\u679c\u5bf9\u4e00\u4e2a\u5df2\u7ecf\u6709\u9ed8\u8ba4\u521d\u59cb\u5316\u503c\u7684\u6570\u636e\u6210\u5458\u5728\u6784\u9020\u51fd\u6570\u4e2d\u518d\u6b21\u8fdb\u884c\u4e86\u521d\u59cb\u5316\uff0c\u90a3\u4e48\u6784\u9020\u51fd\u6570\u4e2d\u7684\u9ed8\u8ba4\u503c\u5c06\u4f1a\u8986\u76d6\u9ed8\u8ba4\u7684\u6210\u5458\u521d\u59cb\u5316\u503c\u3002 1 2 3 4 5 6 7 8 9 10 11 class Frobber { public : Frobber () : ptr_ ( nullptr ), length_ ( 0 ) { } Frobber ( const char * ptr , size_t length ) : ptr_ ( ptr ), length_ ( length ) { } Frobber ( const char * ptr ) : ptr_ ( ptr ) { } private : const char * ptr_ ; // length_ has a non-static class member initializer const size_t length_ = strlen ( ptr_ ); } \u4e0a\u9762\u7684\u4ee3\u7801\u7b49\u540c\u4e8e\u4e0b\u9762\u8fd9\u79cd C++98 \u98ce\u683c\u7684\u4ee3\u7801: 1 2 3 4 5 6 7 8 9 10 11 class Frobber { public : Frobber () : ptr_ ( nullptr ), length_ ( 0 ) { } Frobber ( const char * ptr , size_t length ) : ptr_ ( ptr ), length_ ( length ) { } Frobber ( const char * ptr ) : ptr_ ( ptr ), length_ ( strlen ( ptr_ )) { } private : const char * ptr_ ; const size_t length_ ; } \u6ce8\u610f\u6700\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c Forbber \u7684\u7b2c\u4e00\u4e2a\u548c\u7b2c\u4e8c\u4e2a\u6784\u9020\u51fd\u6570\u5bf9\u4e8e\u975e\u9759\u6001\u7684\u6570\u636e\u6210\u5458\u90fd\u6709\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u8fd9\u4e24\u4e2a\u6784\u9020\u51fd\u6570\u5c06\u4e0d\u4f1a\u4f7f\u7528\u7ed9 length_ \u8bbe\u7f6e\u7684\u9ed8\u8ba4\u521d\u59cb\u5316\u503c\u3002\u7136\u540e Forbber \u7684\u7b2c\u4e09\u4e2a\u6784\u9020\u51fd\u6570\u662f\u6ca1\u6709\u5bf9 length_ \u8fdb\u884c\u6784\u9020\u521d\u59cb\u5316\u7684\uff0c\u56e0\u6b64\u8fd9\u4e2a\u6784\u9020\u51fd\u6570\u4e2d length_ \u4f7f\u7528\u7684\u662f\u9ed8\u8ba4\u6210\u5458\u521d\u59cb\u5316\u7684\u503c\u3002 \u548cC++\u4e00\u6837\uff0c\u6240\u6709\u7684\u975e\u9759\u6001\u53d8\u91cf\u90fd\u6309\u5176\u58f0\u660e\u7684\u987a\u5e8f\u8fdb\u884c\u521d\u59cb\u5316\u3002 \u5728 Forbber \u7684\u4e09\u4e2a\u6784\u9020\u51fd\u6570\u4e2d\u7684\u524d\u4e24\u4e2a\uff0c\u6784\u9020\u51fd\u6570\u90fd length_ \u6210\u5458\u63d0\u4f9b\u4e86\u521d\u59cb\u503c\u3002\u90a3\u4e48\u6784\u9020\u51fd\u6570\u7684\u521d\u59cb\u5316\u4f1a\u66ff\u4ee3\u9ed8\u8ba4\u7684\u6210\u5458\u521d\u59cb\u5316\uff0c\u4e5f\u5c31\u662f\u8bf4\u975e\u9759\u6001\u7684\u7c7b\u6210\u5458\u521d\u59cb\u5316\u5c06\u4e0d\u4f1a\u4e3a\u8fd9\u4e9b\u6784\u9020\u51fd\u6570\u751f\u6210\u521d\u59cb\u5316\u7684\u4ee3\u7801\u3002 \u6ce8\u610f\uff0c\u4e00\u4e9b\u6765\u7684\u6587\u6863\u53ef\u80fd\u5c06\u9ed8\u8ba4\u6210\u5458\u521d\u59cb\u5316\u79f0\u4e3a\u975e\u9759\u6001\u6570\u636e\u6210\u5458\u521d\u59cb\u5316\uff0c\u7b80\u5199\u4e3aNSDMIs. Conclusion \u9ed8\u8ba4\u7684\u6210\u5458\u521d\u59cb\u5316\u4e0d\u4f1a\u8ba9\u4f60\u7684\u7a0b\u5e8f\u53d8\u7684\u66f4\u5feb\uff0c\u5b83\u53ea\u4f1a\u5e2e\u52a9\u4f60\u51cf\u5c11\u56e0\u4e3a\u9057\u6f0f\u5bfc\u81f4\u7684bug\uff0c\u5c24\u5176\u662f\u5f53\u6709\u4eba\u6dfb\u52a0\u65b0\u7684\u6784\u9020\u51fd\u6570\u6216\u65b0\u7684\u6570\u636e\u6210\u5458\u65f6\u3002 \u4e3b\u8981\u4e0d\u8981\u5c06\u975e\u9759\u6001\u7684\u7c7b\u6210\u5458\u521d\u59cb\u5316\u4e0e\u9759\u6001\u7684\u7c7b\u6210\u5458\u521d\u59cb\u5316\u6df7\u6dc6\u3002 1 2 3 4 class Alpha { private : static int counter_ = 0 ; }; \u8fd9\u662f\u4e00\u4e2a\u8001\u7684\u7279\u6027\uff0c counter_ \u662f\u4e00\u4e2a static \u7c7b\u6210\u5458\uff0c\u8fd9\u662f\u5e26\u6709\u521d\u59cb\u5316\u503c\u7684\u7684\u9759\u6001\u58f0\u660e\u3002\u8fd9\u4e0e\u975e\u9759\u6001\u6570\u636e\u6210\u5458\u521d\u59cb\u5316\u662f\u4e0d\u540c\u7684\u3002\u5c31\u50cf\u9759\u6001\u6210\u5458\u53d8\u91cf\u4e0e\u975e\u9759\u6001\u6210\u5458\u53d8\u91cf\u4e0d\u540c\u4e00\u6837\u3002","title":"Tip of the Week #61: Default Member Initializers"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-61/#tip-of-the-week-61-default-member-initializers","text":"Originally posted as Totw #61 on Nov 12, 2013 by Michael Chastain (mec.desktop@gmail.com) Updated October, 2016","title":"Tip of the Week #61: Default Member Initializers"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-61/#declaring-default-member-initialization","text":"\u4e00\u4e2a\u9ed8\u8ba4\u7684\u6210\u5458\u521d\u59cb\u5316\u58f0\u660e\u662f\u7528\u4e8e\u7ed9\u6210\u5458\u5728\u6784\u9020\u7684\u65f6\u5019\u63d0\u4f9b\u4e00\u4e2a\u9ed8\u8ba4\u503c\uff0c\u770b\u8d77\u6765\u50cf\u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801: 1 2 3 4 class Client { private : int chunks_in_flight_ = 0 ; }; \u8fd9\u79cd\u9ed8\u8ba4\u7684\u6210\u5458\u521d\u59cb\u5316\u4f1a\u81ea\u52a8\u6dfb\u52a0\u5230\u7c7b\u7684\u6240\u6709\u6784\u9020\u51fd\u6570\u4e2d\uff0c\u751a\u81f3\u5305\u62ecC++\u7f16\u8bd1\u5668\u5408\u6210\u7684\u6784\u9020\u51fd\u6570\u3002\u7c7b\u7684\u6210\u5458\u9ed8\u8ba4\u521d\u59cb\u5316\u8fd9\u79cd\u65b9\u5f0f\u5bf9\u4e8e\u62e5\u6709\u4f17\u591a\u6570\u636e\u6210\u5458\u7684\u7c7b\u6765\u8bf4\u5f88\u6709\u7528\uff0c\u5c24\u5176\u662f\u5bf9\u4e8e\u50cf bool \u3001 int \u3001 double \u548c\u88f8\u6307\u9488\u7b49\u7c7b\u578b\u3002\u8fd9\u4e9b\u57fa\u672c\u7c7b\u578b\u7684\u975e\u9759\u6001\u7684\u6570\u636e\u6210\u5458\u7ecf\u5e38\u4f1a\u5fd8\u8bb0\u5728\u6784\u9020\u51fd\u6570\u4e2d\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u4f46\u662f\u4efb\u4f55\u7c7b\u578b\u7684\u975e\u9759\u6001\u6570\u636e\u6210\u5458\u90fd\u53ef\u80fd\u5177\u6709\u521d\u59cb\u5316\u7a0b\u5e8f\u3002 Non-static data members of any type may have initializers, though. \u6700\u540e\u4e00\u53e5\u7ffb\u8bd1\u7684\u4e0d\u597d\uff0c\u611f\u89c9\u6ca1\u6709\u4e0a\u4e0b\u6587 \u9ed8\u8ba4\u7684\u6210\u5458\u521d\u59cb\u5316\u5bf9\u4e8e\u90a3\u4e9b\u7528\u6237\u6ca1\u6709\u7f16\u5199\u6784\u9020\u51fd\u6570\u7684\u7b80\u5355\u7ed3\u6784\u6765\u8bf4\uff0c\u4e5f\u5f88\u6709\u7528: 1 2 3 4 5 6 struct Options { bool use_loas = true ; bool log_pii = false ; int timeout_ms = 60 * 1000 ; std :: array < int , 4 > timeout_backoff_ms = { 10 , 100 , 1000 , 10 * 1000 }; };","title":"Declaring Default Member Initialization"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-61/#member-initialization-overrides","text":"\u5982\u679c\u5bf9\u4e00\u4e2a\u5df2\u7ecf\u6709\u9ed8\u8ba4\u521d\u59cb\u5316\u503c\u7684\u6570\u636e\u6210\u5458\u5728\u6784\u9020\u51fd\u6570\u4e2d\u518d\u6b21\u8fdb\u884c\u4e86\u521d\u59cb\u5316\uff0c\u90a3\u4e48\u6784\u9020\u51fd\u6570\u4e2d\u7684\u9ed8\u8ba4\u503c\u5c06\u4f1a\u8986\u76d6\u9ed8\u8ba4\u7684\u6210\u5458\u521d\u59cb\u5316\u503c\u3002 1 2 3 4 5 6 7 8 9 10 11 class Frobber { public : Frobber () : ptr_ ( nullptr ), length_ ( 0 ) { } Frobber ( const char * ptr , size_t length ) : ptr_ ( ptr ), length_ ( length ) { } Frobber ( const char * ptr ) : ptr_ ( ptr ) { } private : const char * ptr_ ; // length_ has a non-static class member initializer const size_t length_ = strlen ( ptr_ ); } \u4e0a\u9762\u7684\u4ee3\u7801\u7b49\u540c\u4e8e\u4e0b\u9762\u8fd9\u79cd C++98 \u98ce\u683c\u7684\u4ee3\u7801: 1 2 3 4 5 6 7 8 9 10 11 class Frobber { public : Frobber () : ptr_ ( nullptr ), length_ ( 0 ) { } Frobber ( const char * ptr , size_t length ) : ptr_ ( ptr ), length_ ( length ) { } Frobber ( const char * ptr ) : ptr_ ( ptr ), length_ ( strlen ( ptr_ )) { } private : const char * ptr_ ; const size_t length_ ; } \u6ce8\u610f\u6700\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c Forbber \u7684\u7b2c\u4e00\u4e2a\u548c\u7b2c\u4e8c\u4e2a\u6784\u9020\u51fd\u6570\u5bf9\u4e8e\u975e\u9759\u6001\u7684\u6570\u636e\u6210\u5458\u90fd\u6709\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u8fd9\u4e24\u4e2a\u6784\u9020\u51fd\u6570\u5c06\u4e0d\u4f1a\u4f7f\u7528\u7ed9 length_ \u8bbe\u7f6e\u7684\u9ed8\u8ba4\u521d\u59cb\u5316\u503c\u3002\u7136\u540e Forbber \u7684\u7b2c\u4e09\u4e2a\u6784\u9020\u51fd\u6570\u662f\u6ca1\u6709\u5bf9 length_ \u8fdb\u884c\u6784\u9020\u521d\u59cb\u5316\u7684\uff0c\u56e0\u6b64\u8fd9\u4e2a\u6784\u9020\u51fd\u6570\u4e2d length_ \u4f7f\u7528\u7684\u662f\u9ed8\u8ba4\u6210\u5458\u521d\u59cb\u5316\u7684\u503c\u3002 \u548cC++\u4e00\u6837\uff0c\u6240\u6709\u7684\u975e\u9759\u6001\u53d8\u91cf\u90fd\u6309\u5176\u58f0\u660e\u7684\u987a\u5e8f\u8fdb\u884c\u521d\u59cb\u5316\u3002 \u5728 Forbber \u7684\u4e09\u4e2a\u6784\u9020\u51fd\u6570\u4e2d\u7684\u524d\u4e24\u4e2a\uff0c\u6784\u9020\u51fd\u6570\u90fd length_ \u6210\u5458\u63d0\u4f9b\u4e86\u521d\u59cb\u503c\u3002\u90a3\u4e48\u6784\u9020\u51fd\u6570\u7684\u521d\u59cb\u5316\u4f1a\u66ff\u4ee3\u9ed8\u8ba4\u7684\u6210\u5458\u521d\u59cb\u5316\uff0c\u4e5f\u5c31\u662f\u8bf4\u975e\u9759\u6001\u7684\u7c7b\u6210\u5458\u521d\u59cb\u5316\u5c06\u4e0d\u4f1a\u4e3a\u8fd9\u4e9b\u6784\u9020\u51fd\u6570\u751f\u6210\u521d\u59cb\u5316\u7684\u4ee3\u7801\u3002 \u6ce8\u610f\uff0c\u4e00\u4e9b\u6765\u7684\u6587\u6863\u53ef\u80fd\u5c06\u9ed8\u8ba4\u6210\u5458\u521d\u59cb\u5316\u79f0\u4e3a\u975e\u9759\u6001\u6570\u636e\u6210\u5458\u521d\u59cb\u5316\uff0c\u7b80\u5199\u4e3aNSDMIs.","title":"Member Initialization Overrides"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-61/#conclusion","text":"\u9ed8\u8ba4\u7684\u6210\u5458\u521d\u59cb\u5316\u4e0d\u4f1a\u8ba9\u4f60\u7684\u7a0b\u5e8f\u53d8\u7684\u66f4\u5feb\uff0c\u5b83\u53ea\u4f1a\u5e2e\u52a9\u4f60\u51cf\u5c11\u56e0\u4e3a\u9057\u6f0f\u5bfc\u81f4\u7684bug\uff0c\u5c24\u5176\u662f\u5f53\u6709\u4eba\u6dfb\u52a0\u65b0\u7684\u6784\u9020\u51fd\u6570\u6216\u65b0\u7684\u6570\u636e\u6210\u5458\u65f6\u3002 \u4e3b\u8981\u4e0d\u8981\u5c06\u975e\u9759\u6001\u7684\u7c7b\u6210\u5458\u521d\u59cb\u5316\u4e0e\u9759\u6001\u7684\u7c7b\u6210\u5458\u521d\u59cb\u5316\u6df7\u6dc6\u3002 1 2 3 4 class Alpha { private : static int counter_ = 0 ; }; \u8fd9\u662f\u4e00\u4e2a\u8001\u7684\u7279\u6027\uff0c counter_ \u662f\u4e00\u4e2a static \u7c7b\u6210\u5458\uff0c\u8fd9\u662f\u5e26\u6709\u521d\u59cb\u5316\u503c\u7684\u7684\u9759\u6001\u58f0\u660e\u3002\u8fd9\u4e0e\u975e\u9759\u6001\u6570\u636e\u6210\u5458\u521d\u59cb\u5316\u662f\u4e0d\u540c\u7684\u3002\u5c31\u50cf\u9759\u6001\u6210\u5458\u53d8\u91cf\u4e0e\u975e\u9759\u6001\u6210\u5458\u53d8\u91cf\u4e0d\u540c\u4e00\u6837\u3002","title":"Conclusion"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-64/","text":"Tip of the Week #64: Raw String Literals Originally published as totw/64 on 2013-12-09 By Titus Winters (titus@google.com) Updated 2017-10-23 Quicklink: abseil.io/tips/64 \"(?:\\\"(?:\\\\\\\"|[^\\\"]) \\\"|'(?:\\\\'|[^']) ')\"; \u2014 A cat walking over the keyboard . . . or maybe what the fox says . . . no, actually just a highly- escaped regexp found in real C++ code. \u5947\u602a\u7684\u662f\u5728C++\u4e2d\u4f60\u53ef\u80fd\u4f1a\u56e0\u4e3a\u8f6c\u4e49\u7684\u95ee\u9898\u5bfc\u81f4\u4f60\u65e0\u6cd5\u7406\u89e3\u6b63\u5e38\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u3002\u540c\u6837\uff0c\u4f60\u5728\u5c06 Protobuf \u6216\u8005\u662f JSON \u6570\u636e\u5d4c\u5165\u5230\u5355\u5143\u6d4b\u8bd5\u4e2d\u7684\u6587\u672c\u65f6\uff0c\u60a8\u53ef\u80fd\u4f1a\u56e0\u4e3a\u8981\u4fdd\u7559\u5f15\u53f7\u548c\u6362\u884c\u7b26\u800c\u611f\u5230\u607c\u706b\u3002\u5f53\u4f60\u5fc5\u987b\u4f7f\u7528\u8f6c\u4e49(\u6216\u8005\u66f4\u4e3a\u7cdf\u7cd5\u7684\u591a\u91cd\u8f6c\u4e49\u7684\u65f6)\u65f6\uff0c\u4ee3\u7801\u7684\u6e05\u6670\u5ea6\u4f1a\u6025\u5267\u4e0b\u964d\u3002 \u5e78\u8fd0\u7684\u662f\uff0c\u6709\u4e00\u4e2a\u65b0\u7684C++11\u7684\u7279\u6027 raw string literals \uff0c\u5b83\u6d88\u9664\u4e86\u8f6c\u4e49\u7684\u9700\u8981\u3002 The Raw String Literal Format \u4e00\u4e2a raw string literals \u5177\u6709\u5982\u4e0b\u7684\u8bed\u6cd5\u683c\u5f0f: 1 R \" tag( whatever you want to say )tag \" tag \u662f\u4e00\u4e2a\u6700\u591a16\u4e2a\u5b57\u7b26\u7684\u5e8f\u5217(\u7a7a\u7684 tag \u4e5f\u662f\u53ef\u4ee5\u7684)\u3002 \"tag \u548c tag\" \u4e4b\u95f4\u7684\u5b57\u7b26\u4e32\u5c31\u662f\u6574\u4e2a\u5b57\u7b26\u4e32\u7684\u5185\u5bb9\u3002 tag \u53ef\u4ee5\u5305\u542b\u9664\u4e86 {} \u3001 \\ \u548c\u7a7a\u767d\u5916\u7684\u4efb\u4f55\u5b57\u7b26\u3002\u53ef\u4ee5\u770b\u4e0b\uff0c\u4e0b\u9762\u4e24\u7aef\u4ee3\u7801\u7684\u5dee\u5f02\uff1a 1 2 3 4 5 const char concert_17_raw [] = \"id: 17 \\n \" \"artist: \\\" Beyonce \\\"\\n \" \"date: \\\" Wed Oct 10 12:39:54 EDT 2012 \\\"\\n \" \"price_usd: 200 \\n \" ; 1 2 3 4 5 const char concert_17_raw [] = R \" ( id: 17 artist: \"Beyonce\" date: \"Wed Oct 10 12:39:54 EDT 2012\" price_usd: 200 ) \" ; Special Cases \u6ce8\u610f\u9501\u8fdb\u89c4\u5219\uff0c\u5f53\u9047\u5230 raw string literals \u53ef\u80fd\u4f1a\u5305\u542b\u65b0\u884c\u7684\u60c5\u51b5\uff0c\u4f1a\u8ba9\u4f60\u9762\u4e34\u5982\u4f55\u5bf9\u539f\u59cb\u5b57\u7b26\u4e32\u7684\u7b2c\u4e00\u884c\u8fdb\u884c\u9501\u8fdb\u7684\u5c34\u5c2c\u7684\u9009\u62e9\u3002\u56e0\u4e3a protobuf \u7684\u6587\u672c\u662f\u5ffd\u7565\u7a7a\u767d\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u901a\u8fc7\u6dfb\u52a0\u4e00\u4e2a\u524d\u5bfc \\n \u6765\u907f\u514d\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f46\u662f\u4e0d\u662f\u6240\u6709\u7684\u539f\u59cb\u5b57\u7b26\u4e32\u7684\u4f7f\u7528\u90fd\u5982\u6b64\u5bbd\u5bb9\u3002 \u5f53\u9047\u5230\u539f\u59cb\u5b57\u7b26\u4e32\u4e2d\u5305\u542b )\" \u7684\u65f6\u5019\u4f1a\u5bfc\u81f4\u4e0d\u80fd\u5c06 ) \u4f5c\u4e3a\u7ed3\u675f\u7684\u5206\u5272\u7b26\uff0c\u8fd9\u4e2a\u65f6\u5019\u4e00\u4e2a\u975e\u7a7a\u7684 tag \u4f1a\u5f88\u6709\u7528\uff1a 1 std :: string my_string = R \" foo( This contains quoted parens \"()\" )foo \" ; Conclusion raw string literals \u80af\u5b9a\u4e0d\u662f\u6211\u4eec\u5927\u591a\u6570\u4eba\u7684\u65e5\u5e38\u5de5\u5177\uff0c\u4f46\u662f\u6709\u7684\u65f6\u5019\u5584\u7528\u8fd9\u79cd\u65b0\u7684\u8bed\u8a00\u529f\u80fd\u4f1a\u589e\u52a0\u4ee3\u7801\u7684\u53ef\u8bfb\u6027\u3002\u56e0\u6b64\u4e0b\u6b21\u5f53\u60a8\u8bd5\u56fe\u641e\u6e05\u695a\u662f\u5426\u9700\u8981 \\\\ \u6216\u8005 \\\\\\\\ \u7684\u65f6\u5019\uff0c\u8bf7\u5c1d\u8bd5\u4f7f\u7528 raw string literal \u66ff\u6362\u3002\u4f60\u7684\u8bfb\u8005\u4f1a\u611f\u8c22\u4f60\uff0c\u5373\u4f7f\u8fd9\u6837\uff0c\u6b63\u5219\u8868\u8fbe\u5f0f\u4ecd\u7136\u5f88\u96be\u3002 1 R \" regexp( (?:\"(?:\\\\\"|[^\"])*\"|'(?:\\\\'|[^'])*') )regexp \"","title":"Tip of the Week #64: Raw String Literals"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-64/#tip-of-the-week-64-raw-string-literals","text":"Originally published as totw/64 on 2013-12-09 By Titus Winters (titus@google.com) Updated 2017-10-23 Quicklink: abseil.io/tips/64 \"(?:\\\"(?:\\\\\\\"|[^\\\"]) \\\"|'(?:\\\\'|[^']) ')\"; \u2014 A cat walking over the keyboard . . . or maybe what the fox says . . . no, actually just a highly- escaped regexp found in real C++ code. \u5947\u602a\u7684\u662f\u5728C++\u4e2d\u4f60\u53ef\u80fd\u4f1a\u56e0\u4e3a\u8f6c\u4e49\u7684\u95ee\u9898\u5bfc\u81f4\u4f60\u65e0\u6cd5\u7406\u89e3\u6b63\u5e38\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u3002\u540c\u6837\uff0c\u4f60\u5728\u5c06 Protobuf \u6216\u8005\u662f JSON \u6570\u636e\u5d4c\u5165\u5230\u5355\u5143\u6d4b\u8bd5\u4e2d\u7684\u6587\u672c\u65f6\uff0c\u60a8\u53ef\u80fd\u4f1a\u56e0\u4e3a\u8981\u4fdd\u7559\u5f15\u53f7\u548c\u6362\u884c\u7b26\u800c\u611f\u5230\u607c\u706b\u3002\u5f53\u4f60\u5fc5\u987b\u4f7f\u7528\u8f6c\u4e49(\u6216\u8005\u66f4\u4e3a\u7cdf\u7cd5\u7684\u591a\u91cd\u8f6c\u4e49\u7684\u65f6)\u65f6\uff0c\u4ee3\u7801\u7684\u6e05\u6670\u5ea6\u4f1a\u6025\u5267\u4e0b\u964d\u3002 \u5e78\u8fd0\u7684\u662f\uff0c\u6709\u4e00\u4e2a\u65b0\u7684C++11\u7684\u7279\u6027 raw string literals \uff0c\u5b83\u6d88\u9664\u4e86\u8f6c\u4e49\u7684\u9700\u8981\u3002","title":"Tip of the Week #64: Raw String Literals"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-64/#the-raw-string-literal-format","text":"\u4e00\u4e2a raw string literals \u5177\u6709\u5982\u4e0b\u7684\u8bed\u6cd5\u683c\u5f0f: 1 R \" tag( whatever you want to say )tag \" tag \u662f\u4e00\u4e2a\u6700\u591a16\u4e2a\u5b57\u7b26\u7684\u5e8f\u5217(\u7a7a\u7684 tag \u4e5f\u662f\u53ef\u4ee5\u7684)\u3002 \"tag \u548c tag\" \u4e4b\u95f4\u7684\u5b57\u7b26\u4e32\u5c31\u662f\u6574\u4e2a\u5b57\u7b26\u4e32\u7684\u5185\u5bb9\u3002 tag \u53ef\u4ee5\u5305\u542b\u9664\u4e86 {} \u3001 \\ \u548c\u7a7a\u767d\u5916\u7684\u4efb\u4f55\u5b57\u7b26\u3002\u53ef\u4ee5\u770b\u4e0b\uff0c\u4e0b\u9762\u4e24\u7aef\u4ee3\u7801\u7684\u5dee\u5f02\uff1a 1 2 3 4 5 const char concert_17_raw [] = \"id: 17 \\n \" \"artist: \\\" Beyonce \\\"\\n \" \"date: \\\" Wed Oct 10 12:39:54 EDT 2012 \\\"\\n \" \"price_usd: 200 \\n \" ; 1 2 3 4 5 const char concert_17_raw [] = R \" ( id: 17 artist: \"Beyonce\" date: \"Wed Oct 10 12:39:54 EDT 2012\" price_usd: 200 ) \" ;","title":"The Raw String Literal Format"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-64/#special-cases","text":"\u6ce8\u610f\u9501\u8fdb\u89c4\u5219\uff0c\u5f53\u9047\u5230 raw string literals \u53ef\u80fd\u4f1a\u5305\u542b\u65b0\u884c\u7684\u60c5\u51b5\uff0c\u4f1a\u8ba9\u4f60\u9762\u4e34\u5982\u4f55\u5bf9\u539f\u59cb\u5b57\u7b26\u4e32\u7684\u7b2c\u4e00\u884c\u8fdb\u884c\u9501\u8fdb\u7684\u5c34\u5c2c\u7684\u9009\u62e9\u3002\u56e0\u4e3a protobuf \u7684\u6587\u672c\u662f\u5ffd\u7565\u7a7a\u767d\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u901a\u8fc7\u6dfb\u52a0\u4e00\u4e2a\u524d\u5bfc \\n \u6765\u907f\u514d\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f46\u662f\u4e0d\u662f\u6240\u6709\u7684\u539f\u59cb\u5b57\u7b26\u4e32\u7684\u4f7f\u7528\u90fd\u5982\u6b64\u5bbd\u5bb9\u3002 \u5f53\u9047\u5230\u539f\u59cb\u5b57\u7b26\u4e32\u4e2d\u5305\u542b )\" \u7684\u65f6\u5019\u4f1a\u5bfc\u81f4\u4e0d\u80fd\u5c06 ) \u4f5c\u4e3a\u7ed3\u675f\u7684\u5206\u5272\u7b26\uff0c\u8fd9\u4e2a\u65f6\u5019\u4e00\u4e2a\u975e\u7a7a\u7684 tag \u4f1a\u5f88\u6709\u7528\uff1a 1 std :: string my_string = R \" foo( This contains quoted parens \"()\" )foo \" ;","title":"Special Cases"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-64/#conclusion","text":"raw string literals \u80af\u5b9a\u4e0d\u662f\u6211\u4eec\u5927\u591a\u6570\u4eba\u7684\u65e5\u5e38\u5de5\u5177\uff0c\u4f46\u662f\u6709\u7684\u65f6\u5019\u5584\u7528\u8fd9\u79cd\u65b0\u7684\u8bed\u8a00\u529f\u80fd\u4f1a\u589e\u52a0\u4ee3\u7801\u7684\u53ef\u8bfb\u6027\u3002\u56e0\u6b64\u4e0b\u6b21\u5f53\u60a8\u8bd5\u56fe\u641e\u6e05\u695a\u662f\u5426\u9700\u8981 \\\\ \u6216\u8005 \\\\\\\\ \u7684\u65f6\u5019\uff0c\u8bf7\u5c1d\u8bd5\u4f7f\u7528 raw string literal \u66ff\u6362\u3002\u4f60\u7684\u8bfb\u8005\u4f1a\u611f\u8c22\u4f60\uff0c\u5373\u4f7f\u8fd9\u6837\uff0c\u6b63\u5219\u8868\u8fbe\u5f0f\u4ecd\u7136\u5f88\u96be\u3002 1 R \" regexp( (?:\"(?:\\\\\"|[^\"])*\"|'(?:\\\\'|[^'])*') )regexp \"","title":"Conclusion"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-65/","text":"Tip of the Week #65: Putting Things in their Place Originally posted as totw/65 on 2013-12-12 By Hyrum Wright (hyrum@hyrumwright.org) \u201cLet me \u2019splain. No, there is too much. Let me sum up.\u201d \u2013Inigo Montoya C++11 \u4e2d\u6dfb\u52a0\u4e86\u4e00\u79cd\u65b0\u65b9\u5f0f\u5f80\u6807\u51c6\u5bb9\u5668\u4e2d\u63d2\u5165\u5143\u7d20\uff0c\u90a3\u5c31\u662f emplace() \u7cfb\u5217\u65b9\u6cd5\u4e86\u3002\u8fd9\u4e9b\u65b9\u6cd5\u4f1a\u76f4\u63a5\u5728\u5bb9\u5668\u4e2d\u521b\u5efa\u5bf9\u8c61\uff0c\u907f\u514d\u521b\u5efa\u4e34\u65f6\u5bf9\u8c61\uff0c\u7136\u540e\u901a\u8fc7\u62f7\u8d1d\u6216\u8005\u79fb\u52a8\u5bf9\u8c61\u5230\u5bb9\u5668\u4e2d\u3002\u8fd9\u5bf9\u4e8e\u51e0\u4e4e\u6240\u6709\u7684\u5bf9\u8c61\u6765\u8bf4\u907f\u514d\u4e86\u62f7\u8d1d\uff0c\u66f4\u52a0\u9ad8\u6548\u3002\u5c24\u5176\u662f\u5bf9\u4e8e\u5f80\u6807\u51c6\u5bb9\u5668\u4e2d\u5b58\u50a8\u53ea\u80fd\u79fb\u52a8\u7684\u5bf9\u8c61(\u4f8b\u5982 std::unique_ptr )\u5c31\u66f4\u4e3a\u65b9\u4fbf\u4e86\u3002 The Old Way and the New Way \u8ba9\u6211\u4eec\u901a\u8fc7\u4f7f\u7528 vector \u6765\u5b58\u50a8\u7684\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u6765\u5bf9\u6bd4\u4e0b\u4e24\u79cd\u65b9\u5f0f\u3002\u7b2c\u4e00\u4e2a\u4f8b\u5b50\u662fC++11\u4e4b\u524d\u7684\u7f16\u7801\u98ce\u683c: 1 2 3 4 5 6 7 8 9 10 class Foo { public : Foo ( int x , int y ); \u2026 }; void addFoo () { std :: vector < Foo > v1 ; v1 . push_back ( Foo ( 1 , 2 )); } \u901a\u8fc7\u4f7f\u7528\u8001\u7684 push_back \u65b9\u6cd5\uff0c\u4f1a\u5bfc\u81f4Foo\u5bf9\u8c61\u88ab\u6784\u9020\u4e24\u6b21\uff0c\u4e00\u6b21\u662f\u4e34\u65f6\u6784\u9020\u4e00\u4e2aFoo\u5bf9\u8c61\uff0c\u7136\u540e\u5c06\u4e34\u65f6\u5bf9\u8c61\u8fdb\u884c\u79fb\u52a8\u6784\u9020\uff0c\u653e\u5230\u5bb9\u5668\u4e2d\u3002 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 C++11 \u5f15\u5165\u7684 emplace_back() \uff0c\u8fd9\u79cd\u65b9\u5f0f\u53ea\u4f1a\u5f15\u5165\u4e00\u4e2a\u5bf9\u8c61\u7684\u6784\u9020\uff0c\u662f\u76f4\u63a5\u5728 vector \u5bb9\u5668\u5143\u7d20\u6240\u5728\u5185\u5b58\u4e0a\u6784\u9020\u3002\u6b63\u662f\u7531\u4e8e emplace \u7cfb\u5217\u51fd\u6570\u5c06\u5176\u53c2\u6570\u76f4\u63a5\u8f6c\u53d1\u7ed9\u5e95\u5c42\u5bf9\u8c61\u7684\u6784\u9020\u51fd\u6570\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u63d0\u4f9b\u6784\u9020\u51fd\u6570\u53c2\u6570\uff0c\u4ece\u800c\u65e0\u9700\u521b\u5efa\u4e34\u65f6\u7684 Foo \u5bf9\u8c61\u3002 1 2 3 4 void addBetterFoo () { std :: vector < Foo > v2 ; v2 . emplace_back ( 1 , 2 ); } Using Emplace Methods for Move-Only Operations \u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u5df2\u7ecf\u7814\u7a76\u8fc7 emplace \u65b9\u6cd5\u53ef\u4ee5\u63d0\u9ad8\u6027\u80fd\u7684\u60c5\u51b5\uff0c\u6b64\u5916\u5b83\u53ef\u4ee5\u8ba9\u4e4b\u524d\u4e0d\u80fd\u5de5\u4f5c\u7684\u4ee3\u7801\u53ef\u4ee5\u6b63\u5e38\u5de5\u4f5c\uff0c\u4f8b\u5982\u5bb9\u5668\u4e2d\u7684\u7c7b\u578b\u662f\u53ea\u80fd\u88ab\u79fb\u52a8\u7684\u7c7b\u578b\u50cf std::unique_ptr \u3002\u8003\u8651\u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801: 1 std :: vector < std :: unique_ptr < Foo >> v1 ; \u5982\u4f55\u624d\u80fd\u5411\u8fd9\u4e2a\u5bb9\u5668\u4e2d\u63d2\u5165\u4e00\u4e2a\u5143\u7d20\u5462? \u4e00\u79cd\u65b9\u5f0f\u5c31\u662f\u901a\u8fc7 push_back \u76f4\u63a5\u5728\u53c2\u6570\u4e2d\u6784\u9020\u5bf9\u8c61: 1 v1 . push_back ( std :: unique_ptr < Foo > ( new Foo ( 1 , 2 ))); \u8fd9\u79cd\u8bed\u6cd5\u6709\u6548\uff0c\u4f46\u53ef\u80fd\u6709\u70b9\u7b28\u62d9\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u89e3\u51b3\u8fd9\u79cd\u6df7\u4e71\u7684\u4f20\u7edf\u65b9\u5f0f\u5145\u6ee1\u4e86\u590d\u6742\u6027\uff1a 1 2 Foo * f2 = new Foo ( 1 , 2 ); v1 . push_back ( std :: unique_ptr < Foo > ( f2 )); \u4e0a\u9762\u8fd9\u6bb5\u4ee3\u7801\u53ef\u4ee5\u7f16\u8bd1\uff0c\u4f46\u662f\u5b83\u4f7f\u5f97\u5728\u88ab\u63d2\u5165\u524d\uff0c\u6307\u9488\u7684\u6240\u6709\u6743\u53d8\u7684\u4e0d\u6e05\u6670\u3002\u751a\u81f3\u66f4\u7cdf\u7cd5\u7684\u662f\uff0c vector \u62e5\u6709\u4e86\u8be5\u5bf9\u8c61\uff0c\u4f46\u662f f2 \u4ecd\u7136\u6709\u6548\uff0c\u5e76\u4e14\u6709\u53ef\u80fd\u5728\u6b64\u540e\u88ab\u5220\u9664\u3002\u5bf9\u4e8e\u4e0d\u77e5\u60c5\u7684\u8bfb\u8005\u6765\u8bf4\uff0c\u8fd9\u79cd\u6240\u6709\u6743\u6a21\u5f0f\u53ef\u80fd\u4f1a\u4ee4\u4eba\u56f0\u60d1\uff0c\u7279\u522b\u662f\u5982\u679c\u6784\u9020\u548c\u63d2\u5165\u4e0d\u662f\u5982\u4e0a\u6240\u8ff0\u7684\u987a\u5e8f\u4e8b\u4ef6\u3002 \u5176\u4ed6\u7684\u89e3\u51b3\u65b9\u6848\u751a\u81f3\u90fd\u65e0\u6cd5\u7f16\u8bd1\uff0c\u56e0\u4e3a unique_ptr \u662f\u4e0d\u80fd\u88ab\u62f7\u8d1d\u7684: 1 2 3 std :: unique_ptr < Foo > f ( new Foo ( 1 , 2 )); v1 . push_back ( f ); // Does not compile! v1 . push_back ( new Foo ( 1 , 2 )); // Does not compile! \u4f7f\u7528 emplace \u65b9\u6cd5\u4f1a\u4f7f\u5f97\u5bf9\u8c61\u7684\u521b\u5efa\u66f4\u4e3a\u76f4\u89c2\uff0c\u5982\u679c\u4f60\u9700\u8981\u628a unique_ptr \u653e\u5230 vector \u5bb9\u5668\u4e2d\uff0c\u53ef\u4ee5\u50cf\u4e0b\u9762\u8fd9\u6837\u901a\u8fc7 std::move \u6765\u5b8c\u6210: 1 2 3 std :: unique_ptr < Foo > f ( new Foo ( 1 , 2 )); v1 . emplace_back ( new Foo ( 1 , 2 )); v1 . push_back ( std :: move ( f )); \u901a\u8fc7\u628a emplace \u548c\u6807\u51c6\u7684\u8fed\u4ee3\u5668\u7ed3\u5408\uff0c\u53ef\u4ee5\u5c06\u5bf9\u8c61\u63d2\u5165\u5230 vector \u5bb9\u5668\u4e2d\u7684\u4efb\u4f55\u4f4d\u7f6e: 1 v1 . emplace ( v1 . begin (), new Foo ( 1 , 2 )); \u5b9e\u9645\u4e0a\uff0c\u6211\u4eec\u4e0d\u5e0c\u671b\u770b\u5230\u4e0a\u8ff0\u6784\u9020unique_ptr\u7684\u8fd9\u4e9b\u65b9\u6cd5\uff0c\u800c\u662f\u5e0c\u671b\u901a\u8fc7 std::make_unique (C++14)\uff0c\u6216\u8005\u662f absl::make_unique (C++11)\u3002 Conclusion \u672c\u6587\u4f7f\u7528 vector \u6765\u4f5c\u4e3aexample\u4e2d\u7684\u6807\u51c6\u5bb9\u5668\uff0c\u5b9e\u9645\u4e0a emplace \u540c\u6837\u4e5f\u9002\u7528\u4e8e map \u3001 list \u4ee5\u53ca\u5176\u5b83\u7684STL\u5bb9\u5668\u3002\u5f53 unique_ptr \u548c emplace \u7ed3\u5408\uff0c\u4f7f\u5f97\u5728\u5806\u4e0a\u5206\u914d\u7684\u5bf9\u8c61\u5176\u6240\u6709\u6743\u7684\u8bed\u4e49\u66f4\u52a0\u6e05\u6670\u3002\u5e0c\u671b\u901a\u8fc7\u672c\u6587\u80fd\u8ba9\u60a8\u611f\u53d7\u5230\u65b0\u7684\u5bb9\u5668\u65b9\u6cd5\u7684\u5f3a\u5927\u529f\u80fd\uff0c\u4ee5\u53ca\u6ee1\u8db3\u5728\u60a8\u81ea\u5df1\u7684\u4ee3\u7801\u4e2d\u9002\u5f53\u4f7f\u7528\u5b83\u4eec\u7684\u613f\u671b\u3002","title":"Tip of the Week #65: Putting Things in their Place"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-65/#tip-of-the-week-65-putting-things-in-their-place","text":"Originally posted as totw/65 on 2013-12-12 By Hyrum Wright (hyrum@hyrumwright.org) \u201cLet me \u2019splain. No, there is too much. Let me sum up.\u201d \u2013Inigo Montoya C++11 \u4e2d\u6dfb\u52a0\u4e86\u4e00\u79cd\u65b0\u65b9\u5f0f\u5f80\u6807\u51c6\u5bb9\u5668\u4e2d\u63d2\u5165\u5143\u7d20\uff0c\u90a3\u5c31\u662f emplace() \u7cfb\u5217\u65b9\u6cd5\u4e86\u3002\u8fd9\u4e9b\u65b9\u6cd5\u4f1a\u76f4\u63a5\u5728\u5bb9\u5668\u4e2d\u521b\u5efa\u5bf9\u8c61\uff0c\u907f\u514d\u521b\u5efa\u4e34\u65f6\u5bf9\u8c61\uff0c\u7136\u540e\u901a\u8fc7\u62f7\u8d1d\u6216\u8005\u79fb\u52a8\u5bf9\u8c61\u5230\u5bb9\u5668\u4e2d\u3002\u8fd9\u5bf9\u4e8e\u51e0\u4e4e\u6240\u6709\u7684\u5bf9\u8c61\u6765\u8bf4\u907f\u514d\u4e86\u62f7\u8d1d\uff0c\u66f4\u52a0\u9ad8\u6548\u3002\u5c24\u5176\u662f\u5bf9\u4e8e\u5f80\u6807\u51c6\u5bb9\u5668\u4e2d\u5b58\u50a8\u53ea\u80fd\u79fb\u52a8\u7684\u5bf9\u8c61(\u4f8b\u5982 std::unique_ptr )\u5c31\u66f4\u4e3a\u65b9\u4fbf\u4e86\u3002","title":"Tip of the Week #65: Putting Things in their Place"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-65/#the-old-way-and-the-new-way","text":"\u8ba9\u6211\u4eec\u901a\u8fc7\u4f7f\u7528 vector \u6765\u5b58\u50a8\u7684\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u6765\u5bf9\u6bd4\u4e0b\u4e24\u79cd\u65b9\u5f0f\u3002\u7b2c\u4e00\u4e2a\u4f8b\u5b50\u662fC++11\u4e4b\u524d\u7684\u7f16\u7801\u98ce\u683c: 1 2 3 4 5 6 7 8 9 10 class Foo { public : Foo ( int x , int y ); \u2026 }; void addFoo () { std :: vector < Foo > v1 ; v1 . push_back ( Foo ( 1 , 2 )); } \u901a\u8fc7\u4f7f\u7528\u8001\u7684 push_back \u65b9\u6cd5\uff0c\u4f1a\u5bfc\u81f4Foo\u5bf9\u8c61\u88ab\u6784\u9020\u4e24\u6b21\uff0c\u4e00\u6b21\u662f\u4e34\u65f6\u6784\u9020\u4e00\u4e2aFoo\u5bf9\u8c61\uff0c\u7136\u540e\u5c06\u4e34\u65f6\u5bf9\u8c61\u8fdb\u884c\u79fb\u52a8\u6784\u9020\uff0c\u653e\u5230\u5bb9\u5668\u4e2d\u3002 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 C++11 \u5f15\u5165\u7684 emplace_back() \uff0c\u8fd9\u79cd\u65b9\u5f0f\u53ea\u4f1a\u5f15\u5165\u4e00\u4e2a\u5bf9\u8c61\u7684\u6784\u9020\uff0c\u662f\u76f4\u63a5\u5728 vector \u5bb9\u5668\u5143\u7d20\u6240\u5728\u5185\u5b58\u4e0a\u6784\u9020\u3002\u6b63\u662f\u7531\u4e8e emplace \u7cfb\u5217\u51fd\u6570\u5c06\u5176\u53c2\u6570\u76f4\u63a5\u8f6c\u53d1\u7ed9\u5e95\u5c42\u5bf9\u8c61\u7684\u6784\u9020\u51fd\u6570\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u63d0\u4f9b\u6784\u9020\u51fd\u6570\u53c2\u6570\uff0c\u4ece\u800c\u65e0\u9700\u521b\u5efa\u4e34\u65f6\u7684 Foo \u5bf9\u8c61\u3002 1 2 3 4 void addBetterFoo () { std :: vector < Foo > v2 ; v2 . emplace_back ( 1 , 2 ); }","title":"The Old Way and the New Way"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-65/#using-emplace-methods-for-move-only-operations","text":"\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u5df2\u7ecf\u7814\u7a76\u8fc7 emplace \u65b9\u6cd5\u53ef\u4ee5\u63d0\u9ad8\u6027\u80fd\u7684\u60c5\u51b5\uff0c\u6b64\u5916\u5b83\u53ef\u4ee5\u8ba9\u4e4b\u524d\u4e0d\u80fd\u5de5\u4f5c\u7684\u4ee3\u7801\u53ef\u4ee5\u6b63\u5e38\u5de5\u4f5c\uff0c\u4f8b\u5982\u5bb9\u5668\u4e2d\u7684\u7c7b\u578b\u662f\u53ea\u80fd\u88ab\u79fb\u52a8\u7684\u7c7b\u578b\u50cf std::unique_ptr \u3002\u8003\u8651\u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801: 1 std :: vector < std :: unique_ptr < Foo >> v1 ; \u5982\u4f55\u624d\u80fd\u5411\u8fd9\u4e2a\u5bb9\u5668\u4e2d\u63d2\u5165\u4e00\u4e2a\u5143\u7d20\u5462? \u4e00\u79cd\u65b9\u5f0f\u5c31\u662f\u901a\u8fc7 push_back \u76f4\u63a5\u5728\u53c2\u6570\u4e2d\u6784\u9020\u5bf9\u8c61: 1 v1 . push_back ( std :: unique_ptr < Foo > ( new Foo ( 1 , 2 ))); \u8fd9\u79cd\u8bed\u6cd5\u6709\u6548\uff0c\u4f46\u53ef\u80fd\u6709\u70b9\u7b28\u62d9\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u89e3\u51b3\u8fd9\u79cd\u6df7\u4e71\u7684\u4f20\u7edf\u65b9\u5f0f\u5145\u6ee1\u4e86\u590d\u6742\u6027\uff1a 1 2 Foo * f2 = new Foo ( 1 , 2 ); v1 . push_back ( std :: unique_ptr < Foo > ( f2 )); \u4e0a\u9762\u8fd9\u6bb5\u4ee3\u7801\u53ef\u4ee5\u7f16\u8bd1\uff0c\u4f46\u662f\u5b83\u4f7f\u5f97\u5728\u88ab\u63d2\u5165\u524d\uff0c\u6307\u9488\u7684\u6240\u6709\u6743\u53d8\u7684\u4e0d\u6e05\u6670\u3002\u751a\u81f3\u66f4\u7cdf\u7cd5\u7684\u662f\uff0c vector \u62e5\u6709\u4e86\u8be5\u5bf9\u8c61\uff0c\u4f46\u662f f2 \u4ecd\u7136\u6709\u6548\uff0c\u5e76\u4e14\u6709\u53ef\u80fd\u5728\u6b64\u540e\u88ab\u5220\u9664\u3002\u5bf9\u4e8e\u4e0d\u77e5\u60c5\u7684\u8bfb\u8005\u6765\u8bf4\uff0c\u8fd9\u79cd\u6240\u6709\u6743\u6a21\u5f0f\u53ef\u80fd\u4f1a\u4ee4\u4eba\u56f0\u60d1\uff0c\u7279\u522b\u662f\u5982\u679c\u6784\u9020\u548c\u63d2\u5165\u4e0d\u662f\u5982\u4e0a\u6240\u8ff0\u7684\u987a\u5e8f\u4e8b\u4ef6\u3002 \u5176\u4ed6\u7684\u89e3\u51b3\u65b9\u6848\u751a\u81f3\u90fd\u65e0\u6cd5\u7f16\u8bd1\uff0c\u56e0\u4e3a unique_ptr \u662f\u4e0d\u80fd\u88ab\u62f7\u8d1d\u7684: 1 2 3 std :: unique_ptr < Foo > f ( new Foo ( 1 , 2 )); v1 . push_back ( f ); // Does not compile! v1 . push_back ( new Foo ( 1 , 2 )); // Does not compile! \u4f7f\u7528 emplace \u65b9\u6cd5\u4f1a\u4f7f\u5f97\u5bf9\u8c61\u7684\u521b\u5efa\u66f4\u4e3a\u76f4\u89c2\uff0c\u5982\u679c\u4f60\u9700\u8981\u628a unique_ptr \u653e\u5230 vector \u5bb9\u5668\u4e2d\uff0c\u53ef\u4ee5\u50cf\u4e0b\u9762\u8fd9\u6837\u901a\u8fc7 std::move \u6765\u5b8c\u6210: 1 2 3 std :: unique_ptr < Foo > f ( new Foo ( 1 , 2 )); v1 . emplace_back ( new Foo ( 1 , 2 )); v1 . push_back ( std :: move ( f )); \u901a\u8fc7\u628a emplace \u548c\u6807\u51c6\u7684\u8fed\u4ee3\u5668\u7ed3\u5408\uff0c\u53ef\u4ee5\u5c06\u5bf9\u8c61\u63d2\u5165\u5230 vector \u5bb9\u5668\u4e2d\u7684\u4efb\u4f55\u4f4d\u7f6e: 1 v1 . emplace ( v1 . begin (), new Foo ( 1 , 2 )); \u5b9e\u9645\u4e0a\uff0c\u6211\u4eec\u4e0d\u5e0c\u671b\u770b\u5230\u4e0a\u8ff0\u6784\u9020unique_ptr\u7684\u8fd9\u4e9b\u65b9\u6cd5\uff0c\u800c\u662f\u5e0c\u671b\u901a\u8fc7 std::make_unique (C++14)\uff0c\u6216\u8005\u662f absl::make_unique (C++11)\u3002","title":"Using Emplace Methods for Move-Only Operations"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-65/#conclusion","text":"\u672c\u6587\u4f7f\u7528 vector \u6765\u4f5c\u4e3aexample\u4e2d\u7684\u6807\u51c6\u5bb9\u5668\uff0c\u5b9e\u9645\u4e0a emplace \u540c\u6837\u4e5f\u9002\u7528\u4e8e map \u3001 list \u4ee5\u53ca\u5176\u5b83\u7684STL\u5bb9\u5668\u3002\u5f53 unique_ptr \u548c emplace \u7ed3\u5408\uff0c\u4f7f\u5f97\u5728\u5806\u4e0a\u5206\u914d\u7684\u5bf9\u8c61\u5176\u6240\u6709\u6743\u7684\u8bed\u4e49\u66f4\u52a0\u6e05\u6670\u3002\u5e0c\u671b\u901a\u8fc7\u672c\u6587\u80fd\u8ba9\u60a8\u611f\u53d7\u5230\u65b0\u7684\u5bb9\u5668\u65b9\u6cd5\u7684\u5f3a\u5927\u529f\u80fd\uff0c\u4ee5\u53ca\u6ee1\u8db3\u5728\u60a8\u81ea\u5df1\u7684\u4ee3\u7801\u4e2d\u9002\u5f53\u4f7f\u7528\u5b83\u4eec\u7684\u613f\u671b\u3002","title":"Conclusion"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-74/","text":"Tip of the Week #74: Delegating and Inheriting Constructors Originally posted as totw/74 on 2014-04-21 By Bradley White (bww@google.com) \u201cDelegating work works, provided the one delegating works, too.\u201d \u2013 Robert Half \u5f53\u4e00\u4e2a\u7c7b\u6709\u591a\u4e2a\u6784\u9020\u51fd\u6570\u7684\u65f6\u5019\uff0c\u901a\u5e38\u8fd9\u4e9b\u6784\u9020\u51fd\u6570\u53d8\u4f53\u4e2d\u4f1a\u6267\u884c\u76f8\u4f3c\u7684\u521d\u59cb\u5316\u903b\u8f91\uff0c\u4e3a\u4e86\u907f\u514d\u4ee3\u7801\u5197\u4f59\uff0c\u8bb8\u591a\u8f83\u65e7\u7684\u7c7b\u91c7\u7528\u5728\u6784\u9020\u51fd\u6570\u4e2d\u8c03\u7528\u79c1\u6709\u7684 SharedInit() \u65b9\u6cd5\u6765\u521d\u59cb\u5316\uff0c\u4f8b\u5982: 1 2 3 4 5 6 7 8 9 class C { public : C ( int x , string s ) { SharedInit ( x , s ); } explicit C ( int x ) { SharedInit ( x , \"\" ); } explicit C ( string s ) { SharedInit ( 0 , s ); } C () { SharedInit ( 0 , \"\" ); } private : void SharedInit ( int x , string s ) { \u2026 } }; C++11 \u63d0\u4f9b\u4e86\u4e00\u79cd\u65b0\u7684\u673a\u5236\uff0c\u59d4\u6258\u6784\u9020\uff0c\u901a\u8fc7\u5141\u8bb8\u6839\u636e\u53e6\u5916\u4e00\u4e2a\u6784\u9020\u51fd\u6570\u6765\u5b9a\u4e49\u4e00\u4e2a\u65b0\u7684\u6784\u9020\u51fd\u6570\u6765\u6e05\u6670\u5730\u5904\u7406\u8fd9\u79cd\u60c5\u51b5\u3002\u5e76\u4e14\u5bf9\u4e8e\u90a3\u4e9b\u6210\u5458\u7684\u9ed8\u8ba4\u521d\u59cb\u5316\u6210\u672c\u975e\u5e38\u6602\u8d35\u7684\u573a\u666f\u4e5f\u4f1a\u5e26\u6765\u6027\u80fd\u4e0a\u7684\u63d0\u5347 1 2 3 4 5 6 7 class C { public : C ( int x , string s ) { \u2026 } explicit C ( int x ) : C ( x , \"\" ) {} explicit C ( string s ) : C ( 0 , s ) {} C () : C ( 0 , \"\" ) {} }; \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679c\u4f60\u59d4\u6258\u4e86\u53e6\u5916\u4e00\u4e2a\u6784\u9020\u51fd\u6570\u5c31\u6ca1\u6709\u529e\u6cd5\u4f7f\u7528\u6210\u5458\u521d\u59cb\u5316\u5217\u8868\u4e86\uff0c\u6240\u6709\u7684\u521d\u59cb\u5316\u52a8\u4f5c\u90fd\u9700\u8981\u5728\u59d4\u6258\u7684\u6784\u9020\u51fd\u6570\u4e2d\u5b8c\u6210\uff0c\u5982\u679c\u6240\u6709\u5171\u4eab\u4ee3\u7801\u90fd\u662fset\u6210\u5458\uff0c\u5219\u5355\u72ec\u7684\u6210\u5458\u521d\u59cb\u5316\u5217\u8868\u6216\u7c7b\u5185\u521d\u59cb\u503c\u8bbe\u5b9a\u9879\u53ef\u80fd\u6bd4\u4f7f\u7528\u59d4\u6258\u6784\u9020\u51fd\u6570\u66f4\u6e05\u6670\u3002\u5584\u7528\u5224\u65ad\u529b\u3002 \u5728\u59d4\u6258\u6784\u9020\u51fd\u6570\u8fd4\u56de\u4e4b\u524d\uff0c\u5bf9\u8c61\u4e0d\u88ab\u89c6\u4e3a\u5b8c\u6574\u7684\u3002\u5728\u5b9e\u8df5\u4e2d\u4ec5\u5728\u6784\u9020\u51fd\u6570\u53ef\u4ee5\u629b\u51fa\u5f02\u5e38\u7684\u65f6\u5019\uff0c\u624d\u4f1a\u8d77\u4f5c\u7528\u3002\u56e0\u4e3a\u5b83\u4eec\u5c06\u59d4\u6258\u7684\u5bf9\u8c61\u4fdd\u7559\u4e3a\u4e0d\u5b8c\u6574\u7684\u72b6\u6001\u3002 \u6b64\u5916\uff0c\u5bf9\u4e8e\u542b\u6709\u591a\u4e2a\u6784\u9020\u51fd\u6570\u7684\u7c7b\u6765\u8bf4\uff0c\u5176\u6d3e\u751f\u7c7b\u5982\u4f55\u5728\u907f\u514d\u6784\u9020\u51fd\u6570\u4ee3\u7801\u4e0d\u91cd\u590d\u7684\u60c5\u51b5\u4e0b\u8fdb\u884c\u6784\u9020\u5462?\uff0c\u6bd4\u5982\uff0c\u8003\u8651\u4e00\u4e2a\u7c7bC\u7684\u6d3e\u751f\u7c7bD\uff0c\u8fd9\u4e2a\u7c7b\u4ec5\u4ec5\u6dfb\u52a0\u4e86\u4e00\u4e2a\u65b0\u7684\u6210\u5458\u51fd\u6570\u3002 1 2 3 4 class D : public C { public : void NewMethod (); }; D\u5982\u4f55\u8fdb\u884c\u6784\u9020\u5462?\u6211\u4eec\u60f3\u7b80\u5355\u5730\u91cd\u7528C\u4e2d\u7684\u90a3\u4e9b\uff0c\u800c\u4e0d\u662f\u5199\u51fa\u6240\u6709\u7684\u8f6c\u53d1\u6837\u677f\uff0cC++11\u901a\u8fc7\u65b0\u7684\u7ee7\u627f\u6784\u9020\u51fd\u6570\u673a\u5236\u5b9e\u73b0\u4e86\u8fd9\u4e00\u70b9\u3002 1 2 3 4 5 class D : public C { public : using C :: C ; // inherit all constructors from C void NewMethod (); }; \u901a\u8fc7 using C::C \u8fd9\u79cd\u65b0\u7684\u5f62\u5f0f\uff0c\u5c31\u53ef\u4ee5\u91cd\u7528\u7c7bC\u6240\u6709\u7684\u6784\u9020\u51fd\u6570\u3002 \u4f46\u8bf7\u6ce8\u610f\uff0c\u5f53\u6d3e\u751f\u7c7b\u4e0d\u6dfb\u52a0\u9700\u8981\u663e\u5f0f\u521d\u59cb\u5316\u7684\u65b0\u6570\u636e\u6210\u5458\u65f6\uff0c\u53ea\u5e94\u7ee7\u627f\u6784\u9020\u51fd\u6570\u3002\u5b9e\u9645\u4e0a\uff0c\u6837\u5f0f\u6307\u5357\u8b66\u544a\u4e0d\u8981\u7ee7\u627f\u6784\u9020\u51fd\u6570\uff0c\u9664\u975e\u65b0\u6210\u5458\uff08\u5982\u679c\u6709\uff09\u5177\u6709\u7c7b\u5185\u521d\u59cb\u5316\u3002 \u56e0\u6b64\uff0c\u7ee7\u7eed\u4f7f\u7528 C++11 \u7684\u59d4\u6258\u548c\u7ee7\u627f\u6784\u9020\u51fd\u6570\uff0c\u5b83\u4eec\u53ef\u4ee5\u51cf\u5c11\u91cd\u590d\uff0c\u6d88\u9664\u8f6c\u53d1\u6837\u677f\uff0c\u6216\u8005\u4f7f\u60a8\u7684\u7c7b\u66f4\u7b80\u5355\uff0c\u66f4\u6e05\u6670\u3002","title":"Tip of the Week #74: Delegating and Inheriting Constructors"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-74/#tip-of-the-week-74-delegating-and-inheriting-constructors","text":"Originally posted as totw/74 on 2014-04-21 By Bradley White (bww@google.com) \u201cDelegating work works, provided the one delegating works, too.\u201d \u2013 Robert Half \u5f53\u4e00\u4e2a\u7c7b\u6709\u591a\u4e2a\u6784\u9020\u51fd\u6570\u7684\u65f6\u5019\uff0c\u901a\u5e38\u8fd9\u4e9b\u6784\u9020\u51fd\u6570\u53d8\u4f53\u4e2d\u4f1a\u6267\u884c\u76f8\u4f3c\u7684\u521d\u59cb\u5316\u903b\u8f91\uff0c\u4e3a\u4e86\u907f\u514d\u4ee3\u7801\u5197\u4f59\uff0c\u8bb8\u591a\u8f83\u65e7\u7684\u7c7b\u91c7\u7528\u5728\u6784\u9020\u51fd\u6570\u4e2d\u8c03\u7528\u79c1\u6709\u7684 SharedInit() \u65b9\u6cd5\u6765\u521d\u59cb\u5316\uff0c\u4f8b\u5982: 1 2 3 4 5 6 7 8 9 class C { public : C ( int x , string s ) { SharedInit ( x , s ); } explicit C ( int x ) { SharedInit ( x , \"\" ); } explicit C ( string s ) { SharedInit ( 0 , s ); } C () { SharedInit ( 0 , \"\" ); } private : void SharedInit ( int x , string s ) { \u2026 } }; C++11 \u63d0\u4f9b\u4e86\u4e00\u79cd\u65b0\u7684\u673a\u5236\uff0c\u59d4\u6258\u6784\u9020\uff0c\u901a\u8fc7\u5141\u8bb8\u6839\u636e\u53e6\u5916\u4e00\u4e2a\u6784\u9020\u51fd\u6570\u6765\u5b9a\u4e49\u4e00\u4e2a\u65b0\u7684\u6784\u9020\u51fd\u6570\u6765\u6e05\u6670\u5730\u5904\u7406\u8fd9\u79cd\u60c5\u51b5\u3002\u5e76\u4e14\u5bf9\u4e8e\u90a3\u4e9b\u6210\u5458\u7684\u9ed8\u8ba4\u521d\u59cb\u5316\u6210\u672c\u975e\u5e38\u6602\u8d35\u7684\u573a\u666f\u4e5f\u4f1a\u5e26\u6765\u6027\u80fd\u4e0a\u7684\u63d0\u5347 1 2 3 4 5 6 7 class C { public : C ( int x , string s ) { \u2026 } explicit C ( int x ) : C ( x , \"\" ) {} explicit C ( string s ) : C ( 0 , s ) {} C () : C ( 0 , \"\" ) {} }; \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679c\u4f60\u59d4\u6258\u4e86\u53e6\u5916\u4e00\u4e2a\u6784\u9020\u51fd\u6570\u5c31\u6ca1\u6709\u529e\u6cd5\u4f7f\u7528\u6210\u5458\u521d\u59cb\u5316\u5217\u8868\u4e86\uff0c\u6240\u6709\u7684\u521d\u59cb\u5316\u52a8\u4f5c\u90fd\u9700\u8981\u5728\u59d4\u6258\u7684\u6784\u9020\u51fd\u6570\u4e2d\u5b8c\u6210\uff0c\u5982\u679c\u6240\u6709\u5171\u4eab\u4ee3\u7801\u90fd\u662fset\u6210\u5458\uff0c\u5219\u5355\u72ec\u7684\u6210\u5458\u521d\u59cb\u5316\u5217\u8868\u6216\u7c7b\u5185\u521d\u59cb\u503c\u8bbe\u5b9a\u9879\u53ef\u80fd\u6bd4\u4f7f\u7528\u59d4\u6258\u6784\u9020\u51fd\u6570\u66f4\u6e05\u6670\u3002\u5584\u7528\u5224\u65ad\u529b\u3002 \u5728\u59d4\u6258\u6784\u9020\u51fd\u6570\u8fd4\u56de\u4e4b\u524d\uff0c\u5bf9\u8c61\u4e0d\u88ab\u89c6\u4e3a\u5b8c\u6574\u7684\u3002\u5728\u5b9e\u8df5\u4e2d\u4ec5\u5728\u6784\u9020\u51fd\u6570\u53ef\u4ee5\u629b\u51fa\u5f02\u5e38\u7684\u65f6\u5019\uff0c\u624d\u4f1a\u8d77\u4f5c\u7528\u3002\u56e0\u4e3a\u5b83\u4eec\u5c06\u59d4\u6258\u7684\u5bf9\u8c61\u4fdd\u7559\u4e3a\u4e0d\u5b8c\u6574\u7684\u72b6\u6001\u3002 \u6b64\u5916\uff0c\u5bf9\u4e8e\u542b\u6709\u591a\u4e2a\u6784\u9020\u51fd\u6570\u7684\u7c7b\u6765\u8bf4\uff0c\u5176\u6d3e\u751f\u7c7b\u5982\u4f55\u5728\u907f\u514d\u6784\u9020\u51fd\u6570\u4ee3\u7801\u4e0d\u91cd\u590d\u7684\u60c5\u51b5\u4e0b\u8fdb\u884c\u6784\u9020\u5462?\uff0c\u6bd4\u5982\uff0c\u8003\u8651\u4e00\u4e2a\u7c7bC\u7684\u6d3e\u751f\u7c7bD\uff0c\u8fd9\u4e2a\u7c7b\u4ec5\u4ec5\u6dfb\u52a0\u4e86\u4e00\u4e2a\u65b0\u7684\u6210\u5458\u51fd\u6570\u3002 1 2 3 4 class D : public C { public : void NewMethod (); }; D\u5982\u4f55\u8fdb\u884c\u6784\u9020\u5462?\u6211\u4eec\u60f3\u7b80\u5355\u5730\u91cd\u7528C\u4e2d\u7684\u90a3\u4e9b\uff0c\u800c\u4e0d\u662f\u5199\u51fa\u6240\u6709\u7684\u8f6c\u53d1\u6837\u677f\uff0cC++11\u901a\u8fc7\u65b0\u7684\u7ee7\u627f\u6784\u9020\u51fd\u6570\u673a\u5236\u5b9e\u73b0\u4e86\u8fd9\u4e00\u70b9\u3002 1 2 3 4 5 class D : public C { public : using C :: C ; // inherit all constructors from C void NewMethod (); }; \u901a\u8fc7 using C::C \u8fd9\u79cd\u65b0\u7684\u5f62\u5f0f\uff0c\u5c31\u53ef\u4ee5\u91cd\u7528\u7c7bC\u6240\u6709\u7684\u6784\u9020\u51fd\u6570\u3002 \u4f46\u8bf7\u6ce8\u610f\uff0c\u5f53\u6d3e\u751f\u7c7b\u4e0d\u6dfb\u52a0\u9700\u8981\u663e\u5f0f\u521d\u59cb\u5316\u7684\u65b0\u6570\u636e\u6210\u5458\u65f6\uff0c\u53ea\u5e94\u7ee7\u627f\u6784\u9020\u51fd\u6570\u3002\u5b9e\u9645\u4e0a\uff0c\u6837\u5f0f\u6307\u5357\u8b66\u544a\u4e0d\u8981\u7ee7\u627f\u6784\u9020\u51fd\u6570\uff0c\u9664\u975e\u65b0\u6210\u5458\uff08\u5982\u679c\u6709\uff09\u5177\u6709\u7c7b\u5185\u521d\u59cb\u5316\u3002 \u56e0\u6b64\uff0c\u7ee7\u7eed\u4f7f\u7528 C++11 \u7684\u59d4\u6258\u548c\u7ee7\u627f\u6784\u9020\u51fd\u6570\uff0c\u5b83\u4eec\u53ef\u4ee5\u51cf\u5c11\u91cd\u590d\uff0c\u6d88\u9664\u8f6c\u53d1\u6837\u677f\uff0c\u6216\u8005\u4f7f\u60a8\u7684\u7c7b\u66f4\u7b80\u5355\uff0c\u66f4\u6e05\u6670\u3002","title":"Tip of the Week #74: Delegating and Inheriting Constructors"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-77/","text":"Tip of the Week #77: Temporaries, Moves, and Copies Originally published as totw/77 on 2014-07-09 By Titus Winters (titus@google.com) Updated 2017-10-20 Quicklink: abseil.io/tips/77 \u5728\u4e0d\u65ad\u5c1d\u8bd5\u5f04\u6e05\u695a\u5982\u4f55\u5411 non-language-lawyers \u7684\u4eba\u89e3\u91ca C++11\u662f\u5982\u4f55\u6539\u53d8\u4e8b\u7269\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u63d0\u51fa\u4e86\"\u4f55\u65f6\u590d\u5236\"\u7684\u7cfb\u5217\u6587\u7ae0\uff0c \u672c\u6587\u662f\u8fd9\u4e2a\u7cfb\u5217\u4e2d\u7684\u4e00\u90e8\u5206\uff0c\u672c\u6587\u8bd5\u56fe\u7b80\u5316C++\u4e2d\u4f55\u65f6\u5305\u542b\u526f\u672c\u7684\u89c4\u5219\uff0c\u5e76\u7528\u4e00\u7ec4\u66f4\u7b80\u5355\u7684\u89c4\u5219\u8fdb\u884c\u66ff\u6362\u3002 Can You Count to 2? \u60a8\u53ef\u4ee5? \u771f\u68d2\uff0c\u8bf7\u8bb0\u4f4f\uff0c\"\u540d\u79f0\u89c4\u5219\" \u610f\u5473\u7740\u60a8\u53ef\u4ee5\u5206\u914d\u7ed9\u67d0\u4e2a\u8d44\u6e90\u7684\u6bcf\u4e2a\u552f\u4e00\u540d\u79f0\u4f1a\u5f71\u54cd\u8be5\u5bf9\u8c61\u7684\u5b58\u5728\u7684\u526f\u672c\u6570\u91cf(\u53ef\u4ee5\u53c2\u8003 ToW 55 \u5173\u4e8e\u540d\u79f0\u8ba1\u6570\u90e8\u5206) Name Counting, in Brief \u5982\u679c\u4f60\u62c5\u5fc3\u4f60\u7684\u67d0\u4e9b\u4ee3\u7801\u884c\u53ef\u80fd\u4f1a\u5bfc\u81f4\u521b\u5efa\u4e00\u4e2a\u65b0\u526f\u672c\u3002\u90a3\u4e48\u8bf7\u8ba4\u771f\u770b\u4e0b\u5f53\u524d\u8981\u590d\u5236\u7684\u6570\u636e\u5b58\u5728\u591a\u5c11\u4e2a\u540d\u79f0? \u800c\u8fd9\u53ea\u6709\u4e09\u79cd\u60c5\u51b5\u9700\u8981\u8003\u8651: Two Names: It\u2019s a Copy \u8fd9\u5f88\u7b80\u5355\uff0c\u76f8\u540c\u7684\u6570\u636e\u5982\u679c\u6709\u4e24\u4e2a\u540d\u5b57\u5c31\u662f\u62f7\u8d1d\u3002 1 2 3 4 5 6 7 std :: vector < int > foo ; FillAVectorOfIntsByOutputParameterSoNobodyThinksAboutCopies ( & foo ); std :: vector < int > bar = foo ; // Yep, this is a copy. std :: map < int , string > my_map ; string forty_two = \"42\" ; my_map [ 5 ] = forty_two ; // Also a copy: my_map[5] counts as a name. One Name: It\u2019s a Move \u8fd9\u4e2a\u6709\u70b9\u4ee4\u4eba\u60ca\u8bb6: C++11 \u8ba4\u8bc6\u5230\u5982\u679c\u4f60\u4e0d\u80fd\u518d\u5f15\u7528\u4e00\u4e2a\u540d\u5b57\uff0c\u90a3\u4e48\u4f60\u4e5f\u4e0d\u4f1a\u53bb\u5173\u5fc3\u90a3\u4e2a\u6570\u636e\u4e86\u3002\u901a\u8fc7 return \u53ef\u4ee5\u5f88\u5bb9\u6613\u8bc6\u522b\u51fa\u8fd9\u79cd\u60c5\u51b5\u3002 1 2 3 4 5 6 7 std :: vector < int > GetSomeInts () { std :: vector < int > ret = { 1 , 2 , 3 , 4 }; return ret ; } // Just a move: either \"ret\" or \"foo\" has the data, but never both at once. std :: vector < int > foo = GetSomeInts (); \u53e6\u5916\u4e00\u79cd\u65b9\u5f0f\u5c31\u662f\u901a\u8fc7\u662f\u8c03\u7528 std::move() \u7684\u65b9\u6cd5\u544a\u8bc9\u7f16\u8bd1\u5668\u8fd9\u4e2a\u540d\u5b57\u5df2\u7ecf\u4e0d\u4f7f\u7528\u4e86(\u6765\u81ea ToW 55 \u7684\u201c\u540d\u5b57\u64e6\u9664\u5668\u201d\u90e8\u5206) 1 2 3 4 5 6 7 8 std :: vector < int > foo = GetSomeInts (); // Not a copy, move allows the compiler to treat foo as a // temporary, so this is invoking the move constructor for // std::vector<int>. // Note that it isn\u2019t the call to std::move that does the moving, // it\u2019s the constructor. The call to std::move just allows foo to // be treated as a temporary (rather than as an object with a name). std :: vector < int > bar = std :: move ( foo ); Zero Names: It\u2019s a Temporary \u4e34\u65f6\u53d8\u91cf\u4e5f\u5f88\u7279\u522b\uff1a\u5982\u679c\u4f60\u60f3\u907f\u514d\u590d\u5236\uff0c\u8bf7\u907f\u514d\u4e3a\u53d8\u91cf\u63d0\u4f9b\u540d\u79f0 1 2 3 4 5 6 void OperatesOnVector ( const std :: vector < int >& v ); // No copies: the values in the vector returned by GetSomeInts() // will be moved (O(1)) into the temporary constructed between these // calls and passed by reference into OperatesOnVector(). OperatesOnVector ( GetSomeInts ()); Beware: Zombies \u4e0a\u6587\u4e2d\u63d0\u5230\u7684\u8fd9\u4e9b(\u9664\u4e86 std::move \u672c\u8eab\u5916)\u5e0c\u671b\u7406\u89e3\u8d77\u6765\u66f4\u52a0\u76f4\u89c2\uff0c\u8fd9\u662f\u56e0\u4e3a\u5728C++11\u4e4b\u524d\u7684\u51e0\u5e74\u91cc\uff0c\u6211\u4eec\u90fd\u5efa\u7acb\u4e86\u6bd4\u8f83\u5947\u602a\u7684\u526f\u672c\u6982\u5ff5\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u6ca1\u6709\u5783\u573e\u6536\u96c6\u5668\u7684\u8bed\u8a00\u6765\u8bf4\uff0c\u8fd9\u79cd\u526f\u672c\u8bc6\u522b\u7684\u65b9\u5f0f \u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u51fa\u8272\u7684\u6027\u80fd\u548c\u76f4\u89c2\u7684\u7406\u89e3\u3002\u7136\u540e\u8fd9\u5e76\u975e\u6ca1\u6709\u5371\u9669\uff0c\u4e00\u4e2a\u5f88\u5927\u7684\u95ee\u9898\u5c31\u662f\uff0c\u5f53\u503c\u88ab move \u8d70\u540e\uff0c\u5269\u4e0b\u7684\u662f\u4ec0\u4e48? 1 2 T bar = std :: move ( foo ); CHECK ( foo . empty ()); // Is this valid? Maybe, but don\u2019t count on it. \u5bf9\u4e8e\u5269\u4e0b\u7684\u503c\uff0c\u6211\u4eec\u80fd\u505a\u4e9b\u4ec0\u4e48? \u8fd9\u662f\u4e00\u4e2a\u5f88\u96be\u7684\u95ee\u9898\u3002\u5bf9\u4e8e\u5927\u591a\u6570\u6807\u51c6\u5e93\u7684\u7c7b\u578b\u6765\u8bf4\uff0c\u5269\u4e0b\u7684\u503c\u662f \"\u6709\u6548\u7684\uff0c\u4f46\u672a\u6307\u660e\u7684\u72b6\u6001\"\uff0c\u975e\u6807\u51c6\u7c7b\u578b\u901a\u5e38\u9075\u5faa\u76f8\u540c\u7684\u89c4\u5219\u3002 \u6700\u4e3a\u5b89\u5168\u7684\u65b9\u6cd5\u5c31\u662f\u8fdc\u79bb\u8fd9\u4e9b\u5bf9\u8c61\uff0c\u4f60\u53ef\u4ee5\u91cd\u65b0\u7ed9\u4ed6\u4eec\u8d4b\u503c\uff0c\u6216\u8005\u8ba9\u5b83\u4eec\u79bb\u5f00\u4f5c\u7528\u57df\u8fdb\u884c\u6790\u6784\uff0c\u4f46\u662f\u4e0d\u8981\u5bf9\u5176\u72b6\u6001\u4f5c\u51fa\u4efb\u4f55\u5176\u4ed6\u7684\u5047\u8bbe\u3002 Clang-tidy \u63d0\u4f9b\u4e86\u4e00\u4e9b static-checking \u673a\u5236\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u6765\u6355\u6349\u51fa\u73b0 use-after move \u7684\u4ee3\u7801( misc-use-after-move static-checking\u7684\u4e00\u79cd)\uff0c\u800c\u9759\u6001\u5206\u6790\u6c38\u8fdc\u65e0\u6cd5\u6355\u6349\u6240\u6709\u8fd9\u4e9b \u6211\u4eec\u8fd8\u662f\u9700\u8981\u5728\u4ee3\u7801\u5ba1\u67e5\u4e2d\u53d1\u73b0\u8fd9\u7c7b\u95ee\u9898\uff0c\u5e76\u5728\u60a8\u81ea\u5df1\u7684\u4ee3\u7801\u4e2d\u907f\u514d\u5b83\u4eec\u3002 Wait, std::move Doesn\u2019t Move? \u662f\u7684\uff0c\u867d\u7136\u6211\u4eec\u770b\u5230\u8c03\u7528\u4e86 std::move \uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u5e76\u4e0d\u662f\u79fb\u52a8\u81ea\u5df1\uff0c\u4ec5\u4ec5\u662f\u5c06\u5176\u8f6c\u6362\u4e3a\u53f3\u503c\u5f15\u7528\u7684\u7c7b\u578b\u3002\u7136\u540e\u53e6\u5916\u4e00\u4e2a\u53d8\u91cf\u901a\u8fc7\u79fb\u52a8\u6784\u9020\u6216\u8005\u79fb\u52a8\u8d4b\u503c\u6765\u63a5\u6536\u3002 1 2 3 4 std :: vector < int > foo = GetSomeInts (); std :: move ( foo ); // Does nothing. // Invokes std::vector<int>\u2019s move-constructor. std :: vector < int > bar = std :: move ( foo ); \u8fd9\u5e94\u8be5\u51e0\u4e4e\u4e0d\u4f1a\u53d1\u751f\u4ec0\u4e48\uff0c\u4f60\u4e5f\u4e0d\u5e94\u8be5\u5728\u8fd9\u4e0a\u9762\u6d6a\u8d39\u592a\u591a\u7cbe\u529b\u3002\u6211\u503c\u63d0\u5230\u4e86\uff0c \u5982\u679c std::move \u548c\u79fb\u52a8\u6784\u9020\u51fd\u6570\u4e4b\u95f4\u7684\u8fde\u63a5\u8ba9\u4f60\u611f\u5230\u56f0\u60d1. Aaaagh! It\u2019s All Complicated! Why!?! \u7b2c\u4e00: \u771f\u7684\u6ca1\u90a3\u4e48\u7cdf\uff0c\u7531\u4e8e\u6211\u4eec\u5927\u591a\u6570\u503c\u7c7b\u578b(\u5305\u62ecprotobuf)\u4e2d\u90fd\u6709\u79fb\u52a8\u64cd\u4f5c\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4e0d\u8ba8\u8bba \u8fd9\u662f\u526f\u672c\u5417? \u8fd9\u6709\u6548\u5417? \u53ea\u9700\u8981\u6570\u540d\u5b57\uff0c\u4e24\u4e2a\u540d\u5b57\uff0c\u4e00\u4efd\u526f\u672c\uff0c\u5c0f\u4e8e\u4e24\u4e2a\u540d\u5b57\u7684\u5c31\u6ca1\u6709\u526f\u672c\u4e86\u3002 \u5ffd\u7565\u526f\u672c\u95ee\u9898\uff0c\u503c\u8bed\u4e49\u66f4\u6e05\u6670\uff0c\u66f4\u5bb9\u6613\u63a8\u7406\uff0c\u8003\u8651\u4e0b\u9762\u8fd9\u4e24\u4e2a\u64cd\u4f5c: 1 2 3 4 5 6 7 8 9 void Foo ( std :: vector < string >* paths ) { ExpandGlob ( GenerateGlob (), paths ); } std :: vector < string > Bar () { std :: vector < string > paths ; ExpandGlob ( GenerateGlob (), & paths ); return paths ; } \u8fd9\u4e9b\u662f\u4e00\u6837\u7684\u5417\uff1f \u5982\u679c *paths \u4e2d\u5b58\u5728\u6570\u636e\uff0c\u90a3\u4e48\u6570\u636e\u662f\u4ec0\u4e48? \u4f60\u600e\u4e48\u77e5\u9053? \u5bf9\u4e8e\u8bfb\u8005\u6765\u8bf4\uff0c\u503c\u8bed\u4e49\u6bd4\u8f93\u5165/\u8f93\u51fa\u53c2\u6570\u66f4\u5bb9\u6613\u63a8\u7406\uff0c\u5728\u8fd9\u91cc\uff0c\u60a8\u9700\u8981\u8003\u8651\u5b58\u5728\u7684\u6570\u636e\u53d1\u751f\u4e86\u4ec0\u4e48\uff0c\u4ee5\u53ca \u662f\u5426\u5b58\u5728\u6307\u9488\u7684\u6240\u6709\u53d1\u751f\u4e86\u8f6c\u79fb\u3002 \u7531\u4e8e\u5728\u5904\u7406\u503c\uff08\u800c\u4e0d\u662f\u6307\u9488\uff09\u65f6\u5bf9\u751f\u5b58\u671f\u548c\u7528\u6cd5\u7684\u4fdd\u8bc1\u66f4\u7b80\u5355\uff0c\u6240\u4ee5\u7f16\u8bd1\u5668\u7684\u4f18\u5316\u5668\u66f4\u5bb9\u6613\u5bf9\u8fd9\u79cd\u6837\u5f0f\u7684\u4ee3\u7801\u8fdb\u884c\u64cd\u4f5c\u3002 \u826f\u597d\u7ba1\u7406\u7684\u503c\u8bed\u4e49\u8fd8\u53ef\u4ee5\u6700\u5c0f\u5316\u5bf9\u5206\u914d\u5668\u7684\u653b\u51fb\uff08\u8fd9\u5f88\u4fbf\u5b9c\uff0c\u4f46\u4e0d\u662f\u514d\u8d39\u7684\uff09\u3002\u4e00\u65e6\u6211\u4eec\u4e86\u89e3\u4e86\u79fb\u52a8\u8bed\u4e49\u662f\u5982\u4f55\u5e2e\u52a9\u6211\u4eec\u6d88\u9664\u526f\u672c\u7684\uff0c \u7f16\u8bd1\u5668\u7684\u4f18\u5316\u5668\u5c31\u53ef\u4ee5\u66f4\u597d\u5730\u89e3\u91ca\u5bf9\u8c61\u7c7b\u578b\u3001\u751f\u547d\u671f\u3001\u865a\u62df\u5206\u6d3e\u4ee5\u53ca\u5176\u4ed6\u8bb8\u591a\u6709\u52a9\u4e8e\u751f\u6210\u66f4\u9ad8\u6548\u673a\u5668\u4ee3\u7801\u7684\u95ee\u9898\u3002 \u7531\u4e8e\u5927\u591a\u6570\u5b9e\u7528\u7a0b\u5e8f\u4ee3\u7801\u73b0\u5728\u90fd\u5177\u6709\u79fb\u52a8\u6027\uff0c\u6211\u4eec\u5e94\u8be5\u505c\u6b62\u62c5\u5fc3\u526f\u672c\u548c\u6307\u9488\u8bed\u4e49\uff0c\u800c\u4e13\u6ce8\u4e8e\u7f16\u5199\u7b80\u5355\u6613\u61c2\u7684\u4ee3\u7801\u3002 \u8bf7\u786e\u4fdd\u60a8\u7406\u89e3\u65b0\u7684\u89c4\u5219\uff1a\u5e76\u4e0d\u662f\u60a8\u9047\u5230\u7684\u6240\u6709\u9057\u7559\u63a5\u53e3\u90fd\u53ef\u4ee5\u66f4\u65b0\u4e3a\u6309\u503c\u8fd4\u56de\uff08\u800c\u4e0d\u662f\u6309\u8f93\u51fa\u53c2\u6570\u8fd4\u56de\uff09\uff0c\u56e0\u6b64\u59cb\u7ec8\u4f1a\u6709\u6837\u5f0f\u7684\u6df7\u5408\u3002\u5f53\u4e00\u4e2a\u6bd4\u53e6\u4e00\u4e2a\u66f4\u5408\u9002\u7684\u65f6\u5019\uff0c\u4f60\u7406\u89e3\u8fd9\u4e00\u70b9\u5f88\u91cd\u8981\u3002","title":"Tip of the Week #77: Temporaries, Moves, and Copies"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-77/#tip-of-the-week-77-temporaries-moves-and-copies","text":"Originally published as totw/77 on 2014-07-09 By Titus Winters (titus@google.com) Updated 2017-10-20 Quicklink: abseil.io/tips/77 \u5728\u4e0d\u65ad\u5c1d\u8bd5\u5f04\u6e05\u695a\u5982\u4f55\u5411 non-language-lawyers \u7684\u4eba\u89e3\u91ca C++11\u662f\u5982\u4f55\u6539\u53d8\u4e8b\u7269\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u63d0\u51fa\u4e86\"\u4f55\u65f6\u590d\u5236\"\u7684\u7cfb\u5217\u6587\u7ae0\uff0c \u672c\u6587\u662f\u8fd9\u4e2a\u7cfb\u5217\u4e2d\u7684\u4e00\u90e8\u5206\uff0c\u672c\u6587\u8bd5\u56fe\u7b80\u5316C++\u4e2d\u4f55\u65f6\u5305\u542b\u526f\u672c\u7684\u89c4\u5219\uff0c\u5e76\u7528\u4e00\u7ec4\u66f4\u7b80\u5355\u7684\u89c4\u5219\u8fdb\u884c\u66ff\u6362\u3002","title":"Tip of the Week #77: Temporaries, Moves, and Copies"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-77/#can-you-count-to-2","text":"\u60a8\u53ef\u4ee5? \u771f\u68d2\uff0c\u8bf7\u8bb0\u4f4f\uff0c\"\u540d\u79f0\u89c4\u5219\" \u610f\u5473\u7740\u60a8\u53ef\u4ee5\u5206\u914d\u7ed9\u67d0\u4e2a\u8d44\u6e90\u7684\u6bcf\u4e2a\u552f\u4e00\u540d\u79f0\u4f1a\u5f71\u54cd\u8be5\u5bf9\u8c61\u7684\u5b58\u5728\u7684\u526f\u672c\u6570\u91cf(\u53ef\u4ee5\u53c2\u8003 ToW 55 \u5173\u4e8e\u540d\u79f0\u8ba1\u6570\u90e8\u5206)","title":"Can You Count to 2?"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-77/#name-counting-in-brief","text":"\u5982\u679c\u4f60\u62c5\u5fc3\u4f60\u7684\u67d0\u4e9b\u4ee3\u7801\u884c\u53ef\u80fd\u4f1a\u5bfc\u81f4\u521b\u5efa\u4e00\u4e2a\u65b0\u526f\u672c\u3002\u90a3\u4e48\u8bf7\u8ba4\u771f\u770b\u4e0b\u5f53\u524d\u8981\u590d\u5236\u7684\u6570\u636e\u5b58\u5728\u591a\u5c11\u4e2a\u540d\u79f0? \u800c\u8fd9\u53ea\u6709\u4e09\u79cd\u60c5\u51b5\u9700\u8981\u8003\u8651:","title":"Name Counting, in Brief"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-77/#two-names-its-a-copy","text":"\u8fd9\u5f88\u7b80\u5355\uff0c\u76f8\u540c\u7684\u6570\u636e\u5982\u679c\u6709\u4e24\u4e2a\u540d\u5b57\u5c31\u662f\u62f7\u8d1d\u3002 1 2 3 4 5 6 7 std :: vector < int > foo ; FillAVectorOfIntsByOutputParameterSoNobodyThinksAboutCopies ( & foo ); std :: vector < int > bar = foo ; // Yep, this is a copy. std :: map < int , string > my_map ; string forty_two = \"42\" ; my_map [ 5 ] = forty_two ; // Also a copy: my_map[5] counts as a name.","title":"Two Names: It\u2019s a Copy"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-77/#one-name-its-a-move","text":"\u8fd9\u4e2a\u6709\u70b9\u4ee4\u4eba\u60ca\u8bb6: C++11 \u8ba4\u8bc6\u5230\u5982\u679c\u4f60\u4e0d\u80fd\u518d\u5f15\u7528\u4e00\u4e2a\u540d\u5b57\uff0c\u90a3\u4e48\u4f60\u4e5f\u4e0d\u4f1a\u53bb\u5173\u5fc3\u90a3\u4e2a\u6570\u636e\u4e86\u3002\u901a\u8fc7 return \u53ef\u4ee5\u5f88\u5bb9\u6613\u8bc6\u522b\u51fa\u8fd9\u79cd\u60c5\u51b5\u3002 1 2 3 4 5 6 7 std :: vector < int > GetSomeInts () { std :: vector < int > ret = { 1 , 2 , 3 , 4 }; return ret ; } // Just a move: either \"ret\" or \"foo\" has the data, but never both at once. std :: vector < int > foo = GetSomeInts (); \u53e6\u5916\u4e00\u79cd\u65b9\u5f0f\u5c31\u662f\u901a\u8fc7\u662f\u8c03\u7528 std::move() \u7684\u65b9\u6cd5\u544a\u8bc9\u7f16\u8bd1\u5668\u8fd9\u4e2a\u540d\u5b57\u5df2\u7ecf\u4e0d\u4f7f\u7528\u4e86(\u6765\u81ea ToW 55 \u7684\u201c\u540d\u5b57\u64e6\u9664\u5668\u201d\u90e8\u5206) 1 2 3 4 5 6 7 8 std :: vector < int > foo = GetSomeInts (); // Not a copy, move allows the compiler to treat foo as a // temporary, so this is invoking the move constructor for // std::vector<int>. // Note that it isn\u2019t the call to std::move that does the moving, // it\u2019s the constructor. The call to std::move just allows foo to // be treated as a temporary (rather than as an object with a name). std :: vector < int > bar = std :: move ( foo );","title":"One Name: It\u2019s a Move"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-77/#zero-names-its-a-temporary","text":"\u4e34\u65f6\u53d8\u91cf\u4e5f\u5f88\u7279\u522b\uff1a\u5982\u679c\u4f60\u60f3\u907f\u514d\u590d\u5236\uff0c\u8bf7\u907f\u514d\u4e3a\u53d8\u91cf\u63d0\u4f9b\u540d\u79f0 1 2 3 4 5 6 void OperatesOnVector ( const std :: vector < int >& v ); // No copies: the values in the vector returned by GetSomeInts() // will be moved (O(1)) into the temporary constructed between these // calls and passed by reference into OperatesOnVector(). OperatesOnVector ( GetSomeInts ());","title":"Zero Names: It\u2019s a Temporary"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-77/#beware-zombies","text":"\u4e0a\u6587\u4e2d\u63d0\u5230\u7684\u8fd9\u4e9b(\u9664\u4e86 std::move \u672c\u8eab\u5916)\u5e0c\u671b\u7406\u89e3\u8d77\u6765\u66f4\u52a0\u76f4\u89c2\uff0c\u8fd9\u662f\u56e0\u4e3a\u5728C++11\u4e4b\u524d\u7684\u51e0\u5e74\u91cc\uff0c\u6211\u4eec\u90fd\u5efa\u7acb\u4e86\u6bd4\u8f83\u5947\u602a\u7684\u526f\u672c\u6982\u5ff5\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u6ca1\u6709\u5783\u573e\u6536\u96c6\u5668\u7684\u8bed\u8a00\u6765\u8bf4\uff0c\u8fd9\u79cd\u526f\u672c\u8bc6\u522b\u7684\u65b9\u5f0f \u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u51fa\u8272\u7684\u6027\u80fd\u548c\u76f4\u89c2\u7684\u7406\u89e3\u3002\u7136\u540e\u8fd9\u5e76\u975e\u6ca1\u6709\u5371\u9669\uff0c\u4e00\u4e2a\u5f88\u5927\u7684\u95ee\u9898\u5c31\u662f\uff0c\u5f53\u503c\u88ab move \u8d70\u540e\uff0c\u5269\u4e0b\u7684\u662f\u4ec0\u4e48? 1 2 T bar = std :: move ( foo ); CHECK ( foo . empty ()); // Is this valid? Maybe, but don\u2019t count on it. \u5bf9\u4e8e\u5269\u4e0b\u7684\u503c\uff0c\u6211\u4eec\u80fd\u505a\u4e9b\u4ec0\u4e48? \u8fd9\u662f\u4e00\u4e2a\u5f88\u96be\u7684\u95ee\u9898\u3002\u5bf9\u4e8e\u5927\u591a\u6570\u6807\u51c6\u5e93\u7684\u7c7b\u578b\u6765\u8bf4\uff0c\u5269\u4e0b\u7684\u503c\u662f \"\u6709\u6548\u7684\uff0c\u4f46\u672a\u6307\u660e\u7684\u72b6\u6001\"\uff0c\u975e\u6807\u51c6\u7c7b\u578b\u901a\u5e38\u9075\u5faa\u76f8\u540c\u7684\u89c4\u5219\u3002 \u6700\u4e3a\u5b89\u5168\u7684\u65b9\u6cd5\u5c31\u662f\u8fdc\u79bb\u8fd9\u4e9b\u5bf9\u8c61\uff0c\u4f60\u53ef\u4ee5\u91cd\u65b0\u7ed9\u4ed6\u4eec\u8d4b\u503c\uff0c\u6216\u8005\u8ba9\u5b83\u4eec\u79bb\u5f00\u4f5c\u7528\u57df\u8fdb\u884c\u6790\u6784\uff0c\u4f46\u662f\u4e0d\u8981\u5bf9\u5176\u72b6\u6001\u4f5c\u51fa\u4efb\u4f55\u5176\u4ed6\u7684\u5047\u8bbe\u3002 Clang-tidy \u63d0\u4f9b\u4e86\u4e00\u4e9b static-checking \u673a\u5236\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u6765\u6355\u6349\u51fa\u73b0 use-after move \u7684\u4ee3\u7801( misc-use-after-move static-checking\u7684\u4e00\u79cd)\uff0c\u800c\u9759\u6001\u5206\u6790\u6c38\u8fdc\u65e0\u6cd5\u6355\u6349\u6240\u6709\u8fd9\u4e9b \u6211\u4eec\u8fd8\u662f\u9700\u8981\u5728\u4ee3\u7801\u5ba1\u67e5\u4e2d\u53d1\u73b0\u8fd9\u7c7b\u95ee\u9898\uff0c\u5e76\u5728\u60a8\u81ea\u5df1\u7684\u4ee3\u7801\u4e2d\u907f\u514d\u5b83\u4eec\u3002","title":"Beware: Zombies"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-77/#wait-stdmove-doesnt-move","text":"\u662f\u7684\uff0c\u867d\u7136\u6211\u4eec\u770b\u5230\u8c03\u7528\u4e86 std::move \uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u5e76\u4e0d\u662f\u79fb\u52a8\u81ea\u5df1\uff0c\u4ec5\u4ec5\u662f\u5c06\u5176\u8f6c\u6362\u4e3a\u53f3\u503c\u5f15\u7528\u7684\u7c7b\u578b\u3002\u7136\u540e\u53e6\u5916\u4e00\u4e2a\u53d8\u91cf\u901a\u8fc7\u79fb\u52a8\u6784\u9020\u6216\u8005\u79fb\u52a8\u8d4b\u503c\u6765\u63a5\u6536\u3002 1 2 3 4 std :: vector < int > foo = GetSomeInts (); std :: move ( foo ); // Does nothing. // Invokes std::vector<int>\u2019s move-constructor. std :: vector < int > bar = std :: move ( foo ); \u8fd9\u5e94\u8be5\u51e0\u4e4e\u4e0d\u4f1a\u53d1\u751f\u4ec0\u4e48\uff0c\u4f60\u4e5f\u4e0d\u5e94\u8be5\u5728\u8fd9\u4e0a\u9762\u6d6a\u8d39\u592a\u591a\u7cbe\u529b\u3002\u6211\u503c\u63d0\u5230\u4e86\uff0c \u5982\u679c std::move \u548c\u79fb\u52a8\u6784\u9020\u51fd\u6570\u4e4b\u95f4\u7684\u8fde\u63a5\u8ba9\u4f60\u611f\u5230\u56f0\u60d1.","title":"Wait, std::move Doesn\u2019t Move?"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-77/#aaaagh-its-all-complicated-why","text":"\u7b2c\u4e00: \u771f\u7684\u6ca1\u90a3\u4e48\u7cdf\uff0c\u7531\u4e8e\u6211\u4eec\u5927\u591a\u6570\u503c\u7c7b\u578b(\u5305\u62ecprotobuf)\u4e2d\u90fd\u6709\u79fb\u52a8\u64cd\u4f5c\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4e0d\u8ba8\u8bba \u8fd9\u662f\u526f\u672c\u5417? \u8fd9\u6709\u6548\u5417? \u53ea\u9700\u8981\u6570\u540d\u5b57\uff0c\u4e24\u4e2a\u540d\u5b57\uff0c\u4e00\u4efd\u526f\u672c\uff0c\u5c0f\u4e8e\u4e24\u4e2a\u540d\u5b57\u7684\u5c31\u6ca1\u6709\u526f\u672c\u4e86\u3002 \u5ffd\u7565\u526f\u672c\u95ee\u9898\uff0c\u503c\u8bed\u4e49\u66f4\u6e05\u6670\uff0c\u66f4\u5bb9\u6613\u63a8\u7406\uff0c\u8003\u8651\u4e0b\u9762\u8fd9\u4e24\u4e2a\u64cd\u4f5c: 1 2 3 4 5 6 7 8 9 void Foo ( std :: vector < string >* paths ) { ExpandGlob ( GenerateGlob (), paths ); } std :: vector < string > Bar () { std :: vector < string > paths ; ExpandGlob ( GenerateGlob (), & paths ); return paths ; } \u8fd9\u4e9b\u662f\u4e00\u6837\u7684\u5417\uff1f \u5982\u679c *paths \u4e2d\u5b58\u5728\u6570\u636e\uff0c\u90a3\u4e48\u6570\u636e\u662f\u4ec0\u4e48? \u4f60\u600e\u4e48\u77e5\u9053? \u5bf9\u4e8e\u8bfb\u8005\u6765\u8bf4\uff0c\u503c\u8bed\u4e49\u6bd4\u8f93\u5165/\u8f93\u51fa\u53c2\u6570\u66f4\u5bb9\u6613\u63a8\u7406\uff0c\u5728\u8fd9\u91cc\uff0c\u60a8\u9700\u8981\u8003\u8651\u5b58\u5728\u7684\u6570\u636e\u53d1\u751f\u4e86\u4ec0\u4e48\uff0c\u4ee5\u53ca \u662f\u5426\u5b58\u5728\u6307\u9488\u7684\u6240\u6709\u53d1\u751f\u4e86\u8f6c\u79fb\u3002 \u7531\u4e8e\u5728\u5904\u7406\u503c\uff08\u800c\u4e0d\u662f\u6307\u9488\uff09\u65f6\u5bf9\u751f\u5b58\u671f\u548c\u7528\u6cd5\u7684\u4fdd\u8bc1\u66f4\u7b80\u5355\uff0c\u6240\u4ee5\u7f16\u8bd1\u5668\u7684\u4f18\u5316\u5668\u66f4\u5bb9\u6613\u5bf9\u8fd9\u79cd\u6837\u5f0f\u7684\u4ee3\u7801\u8fdb\u884c\u64cd\u4f5c\u3002 \u826f\u597d\u7ba1\u7406\u7684\u503c\u8bed\u4e49\u8fd8\u53ef\u4ee5\u6700\u5c0f\u5316\u5bf9\u5206\u914d\u5668\u7684\u653b\u51fb\uff08\u8fd9\u5f88\u4fbf\u5b9c\uff0c\u4f46\u4e0d\u662f\u514d\u8d39\u7684\uff09\u3002\u4e00\u65e6\u6211\u4eec\u4e86\u89e3\u4e86\u79fb\u52a8\u8bed\u4e49\u662f\u5982\u4f55\u5e2e\u52a9\u6211\u4eec\u6d88\u9664\u526f\u672c\u7684\uff0c \u7f16\u8bd1\u5668\u7684\u4f18\u5316\u5668\u5c31\u53ef\u4ee5\u66f4\u597d\u5730\u89e3\u91ca\u5bf9\u8c61\u7c7b\u578b\u3001\u751f\u547d\u671f\u3001\u865a\u62df\u5206\u6d3e\u4ee5\u53ca\u5176\u4ed6\u8bb8\u591a\u6709\u52a9\u4e8e\u751f\u6210\u66f4\u9ad8\u6548\u673a\u5668\u4ee3\u7801\u7684\u95ee\u9898\u3002 \u7531\u4e8e\u5927\u591a\u6570\u5b9e\u7528\u7a0b\u5e8f\u4ee3\u7801\u73b0\u5728\u90fd\u5177\u6709\u79fb\u52a8\u6027\uff0c\u6211\u4eec\u5e94\u8be5\u505c\u6b62\u62c5\u5fc3\u526f\u672c\u548c\u6307\u9488\u8bed\u4e49\uff0c\u800c\u4e13\u6ce8\u4e8e\u7f16\u5199\u7b80\u5355\u6613\u61c2\u7684\u4ee3\u7801\u3002 \u8bf7\u786e\u4fdd\u60a8\u7406\u89e3\u65b0\u7684\u89c4\u5219\uff1a\u5e76\u4e0d\u662f\u60a8\u9047\u5230\u7684\u6240\u6709\u9057\u7559\u63a5\u53e3\u90fd\u53ef\u4ee5\u66f4\u65b0\u4e3a\u6309\u503c\u8fd4\u56de\uff08\u800c\u4e0d\u662f\u6309\u8f93\u51fa\u53c2\u6570\u8fd4\u56de\uff09\uff0c\u56e0\u6b64\u59cb\u7ec8\u4f1a\u6709\u6837\u5f0f\u7684\u6df7\u5408\u3002\u5f53\u4e00\u4e2a\u6bd4\u53e6\u4e00\u4e2a\u66f4\u5408\u9002\u7684\u65f6\u5019\uff0c\u4f60\u7406\u89e3\u8fd9\u4e00\u70b9\u5f88\u91cd\u8981\u3002","title":"Aaaagh! It\u2019s All Complicated! Why!?!"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-86/","text":"Tip of the Week #86: Enumerating with Class Originally posted as totw/86 on 2015-01-05 By Bradley White (bww@google.com) \u201cShow class, \u2026 and display character.\u201d - Bear Bryant. \u679a\u4e3e\uff0c\u6216\u8005\u7b80\u5355\u5730\u8bf4\u662f enum \uff0c\u662f\u4e00\u79cd\u53ef\u4ee5\u4fdd\u5b58\u6307\u5b9a\u6574\u6570\u96c6\u4e4b\u4e00\u7684\u7c7b\u578b\u3002\u8fd9\u4e2a\u96c6\u5408\u7684\u4e00\u4e9b\u503c\u53ef\u4ee5\u88ab\u547d\u540d\u4e3a\u679a\u4e3e\u503c\u3002 Unscoped Enumerations \u8fd9\u4e2a\u5bf9\u4e8eC++\u7a0b\u5e8f\u5458\u6765\u8bf4\u4e0d\u4f1a\u964c\u751f\uff0c\u4f46\u662f\u5728C++11\u4e4b\u524d\u679a\u4e3e\u6709\u4e24\u4e2a\u7f3a\u70b9\uff0c\u679a\u4e3e\u7684\u540d\u79f0: \u548c\u679a\u4e3e\u7c7b\u578b\u76f8\u540c\u7684scope\u5185 \u679a\u4e3e\u7684\u503c\u53ef\u4ee5\u9690\u5f0f\u8f6c\u6362\u4e3a\u6574\u578b \u56e0\u6b64\u5728C++98\u65f6\uff0c\u53ef\u4ee5\u50cf\u4e0b\u9762\u8fd9\u6837: 1 2 3 enum CursorDirection { kLeft , kRight , kUp , kDown }; CursorDirection d = kLeft ; // OK: enumerator in scope int i = kRight ; // OK: enumerator converts to int \u4f46\u662f\u8fd9\u4f1a\u5bfc\u81f4\u679a\u4e3e\u503c\u7684\u91cd\u5b9a\u4e49\uff0c\u4e0b\u9762\u662f\u4e00\u4e2a\u65b0\u7684\u679a\u4e3e\u7c7b\u578b\uff0c\u4f46\u662f\u679a\u4e3e\u503c\u5374\u53d1\u751f\u4e86\u91cd\u5b9a\u4e49 1 2 // error: redeclarations of kLeft and kRight enum PoliticalOrientation { kLeft , kCenter , kRight }; C++11 \u4ee5\u4e00\u79cd\u65b0\u7684\u65b9\u5f0f\u4fee\u6539\u4e86\u672a\u4f5c\u7528\u57df\u679a\u4e3e\u7684\u884c\u4e3a\uff1a\u679a\u4e3e\u503c\u8981\u901a\u8fc7\u679a\u4e3e\u7c7b\u578b\u6765\u5f15\u7528\uff0c\u4f46\u662f\u4e3a\u4e86\u517c\u5bb9\uff0c\u4ecd\u7136\u652f\u6301\u76f4\u63a5\u4f7f\u7528\u679a\u4e3e\u503c\uff0c\u5df2\u7ecf\u9690\u5f0f\u8f6c\u6362\u4e3a\u6574\u578b\u3002 \u56e0\u6b64 C++11 \u540e\uff0c\u53ef\u4ee5\u8fd9\u6837\u6765\u4f7f\u7528\u679a\u4e3e\u7c7b\u578b 1 2 CursorDirection d = CursorDirection :: kLeft ; // OK in C++11 int i = CursorDirection :: kRight ; // OK: still converts to int \u4f46\u662f\u91cd\u65b0\u5b9a\u4e49\u679a\u4e3e\u503c\u4ecd\u7136\u4f1a\u51fa\u73b0\u91cd\u5b9a\u4e49\u9519\u8bef\u3002 Scoped Enumerations \u636e\u89c2\u5bdf\uff0c\u9690\u5f0f\u8f6c\u6362\u4e3a\u6574\u578b\u662f\u5e38\u89c1\u7684bug\u6765\u6e90\uff0c\u800c\u7531\u4e8e\u679a\u4e3e\u503c\u548c\u679a\u4e3e\u7c7b\u578b\u662f\u5728\u7edf\u4e00scope\u5185\u7684\uff0c\u4ece\u800c\u5bfc\u81f4\u547d\u540d\u7a7a\u95f4\u6c61\u67d3\u4f1a\u7ed9\u5927\u578b\u591a\u5e93\u9879\u76ee\u5e26\u6765\u95ee\u9898\u3002\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e24\u4e2a\u95ee\u9898 C++11\u5f15\u5165\u4e86\u4e00\u4e2a\u65b0\u7684\u6982\u5ff5: \u4f5c\u7528\u57df\u679a\u4e3e\u3002 \u4f5c\u7528\u57df\u679a\u4e3e\uff0c\u901a\u8fc7\u5173\u952e\u5b57 enum class \u6765\u5b9a\u4e49\uff0c\u679a\u4e3e\u503c \u53ea\u5728\u5bf9\u5e94\u679a\u4e3e\u7c7b\u578b\u8303\u56f4\u5185\u751f\u6548 \u6ca1\u529e\u6cd5\u9690\u5f0f\u8f6c\u6362\u4e3a\u6574\u578b \u4f8b\u5982\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50: 1 2 3 4 enum class CursorDirection { kLeft , kRight , kUp , kDown }; CursorDirection d = kLeft ; // error: kLeft not in this scope CursorDirection d2 = CursorDirection :: kLeft ; // OK int i = CursorDirection :: kRight ; // error: no conversion \u8fd8\u6709\u8fd9\u4e2a\u4f8b\u5b50: 1 2 // OK: kLeft and kRight are local to each scoped enum enum class PoliticalOrientation { kLeft , kCenter , kRight }; \u8fd9\u4e9b\u7b80\u5355\u7684\u66f4\u6539\u6d88\u9664\u4e86\u666e\u901a\u679a\u4e3e\u7684\u95ee\u9898\uff0c\u56e0\u6b64\u5728\u6240\u6709\u65b0\u4ee3\u7801\u4e2d\u9996\u9009\u679a\u4e3e\u7c7b\u3002 \u4f7f\u7528scoped enum\u610f\u5473\u7740\u5982\u679c\u60a8\u4ecd\u7136\u9700\u8981\u8fd9\u6837\u7684\u8f6c\u6362\uff0c\u5219\u5fc5\u987b\u8981\u663e\u793a\u7684\u5c06\u5176\u8f6c\u6362\u4e3a\u6574\u578b\uff0c\uff08\u4f8b\u5982\uff0c\u5728\u8bb0\u5f55\u679a\u4e3e\u503c\u65f6\uff0c\u6216\u5bf9\u7c7b\u4f3c\u6807\u5fd7\u7684\u679a\u4e3e\u503c\u4f7f\u7528\u6309\u4f4d\u8fd0\u7b97\u65f6\uff09\uff0c \u4f7f\u7528 std::hash \u8fdb\u884c\u6563\u5217\u5c06\u7ee7\u7eed\u5de5\u4f5c\uff08\u4f8b\u5982\uff0c std::unordered_map<CursorDirection\uff0cint> \uff09\u3002 Underlying Enumeration Types C++ 11\u8fd8\u5f15\u5165\u4e86\u4e3a\u4e24\u79cd\u679a\u4e3e\u7c7b\u578b\u6307\u5b9a\u57fa\u7840\u7c7b\u578b\u7684\u80fd\u529b\u3002\u4ee5\u524d\uff0c\u679a\u4e3e\u7684\u57fa\u672c\u6574\u6570\u7c7b\u578b\u662f\u901a\u8fc7\u68c0\u67e5\u679a\u4e3e\u6570\u7684\u7b26\u53f7\u548c\u5927\u5c0f\u6765\u786e\u5b9a\u7684\uff0c\u4f46\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u663e\u5f0f\u4e86\u3002\u4f8b\u5982\uff0c\u2026 1 2 // Use \"int\" as the underlying type for CursorDirection enum class CursorDirection : int { kLeft , kRight , kUp , kDown }; \u56e0\u4e3a\u8fd9\u4e2a\u679a\u4e3e\u503c\u8303\u56f4\u5f88\u5c0f\uff0c\u5982\u679c\u6211\u4eec\u5e0c\u671b\u907f\u514d\u5728\u5b58\u50a8 cursordirection \u7684\u503c\u65f6\u6d6a\u8d39\u7a7a\u95f4\uff0c\u6211\u4eec\u53ef\u4ee5\u6307\u5b9a\u5176\u5e95\u5c42\u5b58\u50a8\u7c7b\u578b\u4e3a char \u3002 1 2 // Use \"char\" as the underlying type for CursorDirection enum class CursorDirection : char { kLeft , kRight , kUp , kDown }; \u5982\u679c\u679a\u4e3e\u503c\u8d85\u8fc7\u4e86\u5e95\u5c42\u5b58\u50a8\u7c7b\u578b\u7684\u5927\u5c0f\u8303\u56f4\uff0c\u7f16\u8bd1\u5668\u4f1a\u62a5\u544a\u9519\u8bef\u3002 Conclusion \u5728\u65b0\u7684\u4ee3\u7801\u4e2d\uff0c\u4f18\u5148\u4f7f\u7528 enum class \uff0c\u8fd9\u5c06\u4f1a\u51cf\u5c11\u540d\u79f0\u6c61\u67d3\uff0c\u5e76\u4e14\u53ef\u4ee5\u907f\u514d\u56e0\u4e3a\u9690\u85cf\u5f0f\u8f6c\u6362\u5e26\u6765\u7684bug\u3002 1 enum class Parting { kSoLong , kFarewell , kAufWiedersehen , kAdieu };","title":"Tip of the Week #86: Enumerating with Class"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-86/#tip-of-the-week-86-enumerating-with-class","text":"Originally posted as totw/86 on 2015-01-05 By Bradley White (bww@google.com) \u201cShow class, \u2026 and display character.\u201d - Bear Bryant. \u679a\u4e3e\uff0c\u6216\u8005\u7b80\u5355\u5730\u8bf4\u662f enum \uff0c\u662f\u4e00\u79cd\u53ef\u4ee5\u4fdd\u5b58\u6307\u5b9a\u6574\u6570\u96c6\u4e4b\u4e00\u7684\u7c7b\u578b\u3002\u8fd9\u4e2a\u96c6\u5408\u7684\u4e00\u4e9b\u503c\u53ef\u4ee5\u88ab\u547d\u540d\u4e3a\u679a\u4e3e\u503c\u3002","title":"Tip of the Week #86: Enumerating with Class"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-86/#unscoped-enumerations","text":"\u8fd9\u4e2a\u5bf9\u4e8eC++\u7a0b\u5e8f\u5458\u6765\u8bf4\u4e0d\u4f1a\u964c\u751f\uff0c\u4f46\u662f\u5728C++11\u4e4b\u524d\u679a\u4e3e\u6709\u4e24\u4e2a\u7f3a\u70b9\uff0c\u679a\u4e3e\u7684\u540d\u79f0: \u548c\u679a\u4e3e\u7c7b\u578b\u76f8\u540c\u7684scope\u5185 \u679a\u4e3e\u7684\u503c\u53ef\u4ee5\u9690\u5f0f\u8f6c\u6362\u4e3a\u6574\u578b \u56e0\u6b64\u5728C++98\u65f6\uff0c\u53ef\u4ee5\u50cf\u4e0b\u9762\u8fd9\u6837: 1 2 3 enum CursorDirection { kLeft , kRight , kUp , kDown }; CursorDirection d = kLeft ; // OK: enumerator in scope int i = kRight ; // OK: enumerator converts to int \u4f46\u662f\u8fd9\u4f1a\u5bfc\u81f4\u679a\u4e3e\u503c\u7684\u91cd\u5b9a\u4e49\uff0c\u4e0b\u9762\u662f\u4e00\u4e2a\u65b0\u7684\u679a\u4e3e\u7c7b\u578b\uff0c\u4f46\u662f\u679a\u4e3e\u503c\u5374\u53d1\u751f\u4e86\u91cd\u5b9a\u4e49 1 2 // error: redeclarations of kLeft and kRight enum PoliticalOrientation { kLeft , kCenter , kRight }; C++11 \u4ee5\u4e00\u79cd\u65b0\u7684\u65b9\u5f0f\u4fee\u6539\u4e86\u672a\u4f5c\u7528\u57df\u679a\u4e3e\u7684\u884c\u4e3a\uff1a\u679a\u4e3e\u503c\u8981\u901a\u8fc7\u679a\u4e3e\u7c7b\u578b\u6765\u5f15\u7528\uff0c\u4f46\u662f\u4e3a\u4e86\u517c\u5bb9\uff0c\u4ecd\u7136\u652f\u6301\u76f4\u63a5\u4f7f\u7528\u679a\u4e3e\u503c\uff0c\u5df2\u7ecf\u9690\u5f0f\u8f6c\u6362\u4e3a\u6574\u578b\u3002 \u56e0\u6b64 C++11 \u540e\uff0c\u53ef\u4ee5\u8fd9\u6837\u6765\u4f7f\u7528\u679a\u4e3e\u7c7b\u578b 1 2 CursorDirection d = CursorDirection :: kLeft ; // OK in C++11 int i = CursorDirection :: kRight ; // OK: still converts to int \u4f46\u662f\u91cd\u65b0\u5b9a\u4e49\u679a\u4e3e\u503c\u4ecd\u7136\u4f1a\u51fa\u73b0\u91cd\u5b9a\u4e49\u9519\u8bef\u3002","title":"Unscoped Enumerations"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-86/#scoped-enumerations","text":"\u636e\u89c2\u5bdf\uff0c\u9690\u5f0f\u8f6c\u6362\u4e3a\u6574\u578b\u662f\u5e38\u89c1\u7684bug\u6765\u6e90\uff0c\u800c\u7531\u4e8e\u679a\u4e3e\u503c\u548c\u679a\u4e3e\u7c7b\u578b\u662f\u5728\u7edf\u4e00scope\u5185\u7684\uff0c\u4ece\u800c\u5bfc\u81f4\u547d\u540d\u7a7a\u95f4\u6c61\u67d3\u4f1a\u7ed9\u5927\u578b\u591a\u5e93\u9879\u76ee\u5e26\u6765\u95ee\u9898\u3002\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e24\u4e2a\u95ee\u9898 C++11\u5f15\u5165\u4e86\u4e00\u4e2a\u65b0\u7684\u6982\u5ff5: \u4f5c\u7528\u57df\u679a\u4e3e\u3002 \u4f5c\u7528\u57df\u679a\u4e3e\uff0c\u901a\u8fc7\u5173\u952e\u5b57 enum class \u6765\u5b9a\u4e49\uff0c\u679a\u4e3e\u503c \u53ea\u5728\u5bf9\u5e94\u679a\u4e3e\u7c7b\u578b\u8303\u56f4\u5185\u751f\u6548 \u6ca1\u529e\u6cd5\u9690\u5f0f\u8f6c\u6362\u4e3a\u6574\u578b \u4f8b\u5982\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50: 1 2 3 4 enum class CursorDirection { kLeft , kRight , kUp , kDown }; CursorDirection d = kLeft ; // error: kLeft not in this scope CursorDirection d2 = CursorDirection :: kLeft ; // OK int i = CursorDirection :: kRight ; // error: no conversion \u8fd8\u6709\u8fd9\u4e2a\u4f8b\u5b50: 1 2 // OK: kLeft and kRight are local to each scoped enum enum class PoliticalOrientation { kLeft , kCenter , kRight }; \u8fd9\u4e9b\u7b80\u5355\u7684\u66f4\u6539\u6d88\u9664\u4e86\u666e\u901a\u679a\u4e3e\u7684\u95ee\u9898\uff0c\u56e0\u6b64\u5728\u6240\u6709\u65b0\u4ee3\u7801\u4e2d\u9996\u9009\u679a\u4e3e\u7c7b\u3002 \u4f7f\u7528scoped enum\u610f\u5473\u7740\u5982\u679c\u60a8\u4ecd\u7136\u9700\u8981\u8fd9\u6837\u7684\u8f6c\u6362\uff0c\u5219\u5fc5\u987b\u8981\u663e\u793a\u7684\u5c06\u5176\u8f6c\u6362\u4e3a\u6574\u578b\uff0c\uff08\u4f8b\u5982\uff0c\u5728\u8bb0\u5f55\u679a\u4e3e\u503c\u65f6\uff0c\u6216\u5bf9\u7c7b\u4f3c\u6807\u5fd7\u7684\u679a\u4e3e\u503c\u4f7f\u7528\u6309\u4f4d\u8fd0\u7b97\u65f6\uff09\uff0c \u4f7f\u7528 std::hash \u8fdb\u884c\u6563\u5217\u5c06\u7ee7\u7eed\u5de5\u4f5c\uff08\u4f8b\u5982\uff0c std::unordered_map<CursorDirection\uff0cint> \uff09\u3002","title":"Scoped Enumerations"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-86/#underlying-enumeration-types","text":"C++ 11\u8fd8\u5f15\u5165\u4e86\u4e3a\u4e24\u79cd\u679a\u4e3e\u7c7b\u578b\u6307\u5b9a\u57fa\u7840\u7c7b\u578b\u7684\u80fd\u529b\u3002\u4ee5\u524d\uff0c\u679a\u4e3e\u7684\u57fa\u672c\u6574\u6570\u7c7b\u578b\u662f\u901a\u8fc7\u68c0\u67e5\u679a\u4e3e\u6570\u7684\u7b26\u53f7\u548c\u5927\u5c0f\u6765\u786e\u5b9a\u7684\uff0c\u4f46\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u663e\u5f0f\u4e86\u3002\u4f8b\u5982\uff0c\u2026 1 2 // Use \"int\" as the underlying type for CursorDirection enum class CursorDirection : int { kLeft , kRight , kUp , kDown }; \u56e0\u4e3a\u8fd9\u4e2a\u679a\u4e3e\u503c\u8303\u56f4\u5f88\u5c0f\uff0c\u5982\u679c\u6211\u4eec\u5e0c\u671b\u907f\u514d\u5728\u5b58\u50a8 cursordirection \u7684\u503c\u65f6\u6d6a\u8d39\u7a7a\u95f4\uff0c\u6211\u4eec\u53ef\u4ee5\u6307\u5b9a\u5176\u5e95\u5c42\u5b58\u50a8\u7c7b\u578b\u4e3a char \u3002 1 2 // Use \"char\" as the underlying type for CursorDirection enum class CursorDirection : char { kLeft , kRight , kUp , kDown }; \u5982\u679c\u679a\u4e3e\u503c\u8d85\u8fc7\u4e86\u5e95\u5c42\u5b58\u50a8\u7c7b\u578b\u7684\u5927\u5c0f\u8303\u56f4\uff0c\u7f16\u8bd1\u5668\u4f1a\u62a5\u544a\u9519\u8bef\u3002","title":"Underlying Enumeration Types"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-86/#conclusion","text":"\u5728\u65b0\u7684\u4ee3\u7801\u4e2d\uff0c\u4f18\u5148\u4f7f\u7528 enum class \uff0c\u8fd9\u5c06\u4f1a\u51cf\u5c11\u540d\u79f0\u6c61\u67d3\uff0c\u5e76\u4e14\u53ef\u4ee5\u907f\u514d\u56e0\u4e3a\u9690\u85cf\u5f0f\u8f6c\u6362\u5e26\u6765\u7684bug\u3002 1 enum class Parting { kSoLong , kFarewell , kAufWiedersehen , kAdieu };","title":"Conclusion"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-88/","text":"Tip of the Week #88: Initialization: =, (), and {} Originally posted as TotW #88 on Jan 27, 2015 by Titus Winters (titus@google.com), on behalf of the Google C++ Style Arbiters C++11\u63d0\u4f9b\u4e86\u4e00\u79cd\u65b0\u7684\u8bed\u6cd5\uff0c\u88ab\u79f0\u4e3a \u7edf\u4e00\u521d\u59cb\u5316\u8bed\u6cd5 \uff0c\u5176\u76ee\u7684\u662f\u4e3a\u4e86\u7edf\u4e00\u5404\u79cd\u98ce\u683c\u7684\u521d\u59cb\u5316\u65b9\u5f0f\uff0c\u4ece\u800c \u907f\u514d\u4e00\u4e9b\u4ee4\u4eba\u70e6\u607c\u7684\u89e3\u6790 \uff0c\u4ee5\u53ca\u907f\u514d\u7a84\u5316\u8f6c\u6362\u7b49 \u8fd9\u4e2a\u65b0\u7684\u673a\u5236\uff0c\u610f\u5473\u7740\u73b0\u5728\u6709\u4e86\u53e6\u5916\u4e00\u79cd\u521d\u59cb\u5316\u7684\u8bed\u6cd5\uff0c\u5e76\u6709\u4e86\u81ea\u5df1\u7684\u6298\u8877\u65b9\u6848\u3002 C++11 Brace Initialization \u4e00\u4e9b\u7edf\u4e00\u521d\u59cb\u5316\u8bed\u6cd5\u7684\u652f\u6301\u8005\u5efa\u8bae\u6211\u4eec\u4f7f\u7528 {} \u548c\u76f4\u63a5\u521d\u59cb\u5316\uff08\u4e0d\u4f7f\u7528\u201c=\u201d\uff0c\u5c3d\u7ba1\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u4e24\u79cd\u5f62\u5f0f\u90fd\u8c03\u7528\u540c\u4e00\u4e2a\u6784\u9020\u51fd\u6570\uff09\u6765\u521d\u59cb\u5316\u6240\u6709\u7c7b\u578b\uff1a 1 2 3 int x { 2 }; std :: string foo { \"Hello World\" }; std :: vector < int > v { 1 , 2 , 3 }; \u548c\u4e0b\u9762\u8fd9\u79cd 1 2 3 int x = 2 ; std :: string foo = \"Hello World\" ; std :: vector < int > v = { 1 , 2 , 3 }; \u8fd9\u4e2a\u65b9\u6cd5\u6709\u4e24\u4e2a\u7f3a\u70b9: \u9996\u5148\uff0c\u201c\u7edf\u4e00\u201d\u662f\u4e00\u4e2a\u5ef6\u4f38\uff1a\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u5728\u8c03\u7528\u4ec0\u4e48\u4ee5\u53ca\u5982\u4f55\u8c03\u7528\u4e2d\u4ecd\u7136\u5b58\u5728\u6b67\u4e49\uff08\u5bf9\u4e8e\u666e\u901a\u8bfb\u8005\uff0c\u800c\u4e0d\u662f\u7f16\u8bd1\u5668\uff09\u3002 1 2 std :: vector < std :: string > strings { 2 }; // A vector of two empty strings. std :: vector < int > ints { 2 }; // A vector containing only the integer 2. \u5176\u6b21\uff0c\u8fd9\u79cd\u8bed\u6cd5\u5e76\u4e0d\u5b8c\u5168\u76f4\u89c2\uff0c\u6ca1\u6709\u5176\u4ed6\u901a\u7528\u8bed\u8a00\u4f7f\u7528\u8fd9\u79cd\u8bed\u6cd5\uff0c\u8fd9\u79cd\u8bed\u8a00\u5f53\u7136\u53ef\u4ee5\u5f15\u5165\u65b0\u7684\u3001\u4ee4\u4eba\u60ca\u8bb6\u7684\u8bed\u6cd5\uff0c\u800c\u4e14\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff08\u7279\u522b\u662f\u5728\u6cdb\u578b\u4ee3\u7801\u4e2d\uff09\u6709\u5fc5\u8981\u4f7f\u7528\u8fd9\u79cd\u8bed\u8a00\u7684\u6280\u672f\u539f\u56e0\u3002 \u91cd\u8981\u7684\u95ee\u9898\u662f\uff1a\u6211\u4eec\u5e94\u8be5\u5728\u591a\u5927\u7a0b\u5ea6\u4e0a\u6539\u53d8\u6211\u4eec\u7684\u4e60\u60ef\u548c\u5bf9\u8bed\u8a00\u7684\u7406\u89e3\u6765\u5229\u7528\u8fd9\u79cd\u6539\u53d8\uff1f\u5728\u6539\u53d8\u6211\u4eec\u7684\u4e60\u60ef\u6216\u73b0\u6709\u4ee3\u7801\u65f6\uff0c\u8fd9\u4e9b\u597d\u5904\u503c\u5f97\u4ed8\u51fa\u4ee3\u4ef7\u5417\uff1f\u5bf9\u4e8e\u7edf\u4e00\u7684\u521d\u59cb\u5316\u8bed\u6cd5\uff0c\u6211\u4eec\u4e00\u822c\u4e0d\u8ba4\u4e3a\u597d\u5904\u5927\u4e8e\u7f3a\u70b9\u3002 Best Practices for Initialization \u76f8\u53cd\uff0c\u5bf9\u4e8e\u201c\u5982\u4f55\u521d\u59cb\u5316\u53d8\u91cf\u201d\uff0c\u6211\u4eec\u5efa\u8bae\u4f7f\u7528\u4ee5\u4e0b\u6307\u5bfc\u539f\u5219\u3002\u201c\uff0c\u65e2\u8981\u9075\u5faa\u81ea\u5df1\u7684\u4ee3\u7801\uff0c\u4e5f\u8981\u5728\u4ee3\u7801\u8bc4\u8bba\u4e2d\u5f15\u7528\uff1a \u5f53\u76f4\u63a5\u521d\u59cb\u5316\u5b57\u9762\u503c\u7684\u65f6\u5019\uff0c\u4f7f\u7528\u8d4b\u503c\u8bed\u6cd5(\u4f8b\u5982: int \u3001 float \u3001 std::string \u503c\u65f6)\uff0c\u5bf9\u4e8e\u667a\u80fd\u6307\u9488\u4f8b\u5982 std::shared_ptr \u3001 std::unique_ptr \u4ee5\u53ca\u5bb9\u5668( std::vector \u3001 std::map \u7b49)\u65f6\u6267\u884c struct\u521d\u59cb\u5316 \u6216\u8005\u662f\u505a\u62f7\u8d1d\u521d\u59cb\u5316 1 2 3 4 5 6 int x = 2 ; std :: string foo = \"Hello World\" ; std :: vector < int > v = { 1 , 2 , 3 }; std :: unique_ptr < Matrix > matrix = NewMatrix ( rows , cols ); MyStruct x = { true , 5.0 }; MyProto copied_proto = original_proto ; \u66ff\u4ee3\u5982\u4e0b\u4ee3\u7801: 1 2 3 4 5 6 7 // Bad code int x { 2 }; std :: string foo { \"Hello World\" }; std :: vector < int > v { 1 , 2 , 3 }; std :: unique_ptr < Matrix > matrix { NewMatrix ( rows , cols )}; MyStruct x { true , 5.0 }; MyProto copied_proto { original_proto }; \u5f53\u521d\u59cb\u5316\u9700\u8981\u6267\u884c\u67d0\u4e9b\u903b\u8f91\u7684\u65f6\u5019\uff0c\u4f7f\u7528\u4f20\u7edf\u7684\u6784\u9020\u8bed\u6cd5(\u5e26\u6709\u62ec\u53f7\u7684)\uff0c\u800c\u4e0d\u662f\u7b80\u5355\u7684\u5c06\u503c\u7ec4\u5408\u5728\u4e00\u8d77 1 2 Frobber frobber ( size , & bazzer_to_duplicate ); std :: vector < double > fifty_pies ( 50 , 3.14 ); \u76f8\u6bd4\u4e8e\u5982\u4e0b\u4ee3\u7801: 1 2 3 4 5 6 7 // Bad code // Could invoke an intializer list constructor, or a two-argument constructor. Frobber frobber { size , & bazzer_to_duplicate }; // Makes a vector of two doubles. std :: vector < double > fifty_pies { 50 , 3.14 }; \u4ec5\u5f53\u4e0a\u8ff0\u65b9\u6cd5\u65e0\u6cd5\u7f16\u8bd1\u7684\u65f6\u5019\uff0c\u624d\u4f7f\u7528 {} \u521d\u59cb\u5316\uff0c\u800c\u4e0d\u662f = 1 2 3 4 5 6 7 8 9 10 class Foo { public : Foo ( int a , int b , int c ) : array_ { a , b , c } {} private : int array_ [ 5 ]; // Requires {}s because the constructor is marked explicit // and the type is non-copyable. EventManager em { EventManager :: Options ()}; }; \u7528\u4e8e\u4e0d\u8981\u5c06 {} \u521d\u59cb\u5316\u548c auto \u6df7\u5408\u5728\u4e00\u8d77\u4f7f\u7528 1 2 3 // Bad code auto x { 1 }; auto y = { 2 }; // This is a std::initializer_list<int>! (\u5bf9\u4e8e\u8bed\u8a00\u5f8b\u5e08\u6765\u8bf4\uff1a\u5728\u53ef\u7528\u65f6\uff0c\u9996\u9009\u590d\u5236\u521d\u59cb\u5316\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u521d\u59cb\u5316\uff1b\u5728\u8bc9\u8bf8\u76f4\u63a5\u521d\u59cb\u5316\u65f6\uff0c\u4f18\u5148\u4f7f\u7528\u5927\u62ec\u53f7\u800c\u4e0d\u662f\u62ec\u53f7) \u6216\u8bb8\u5bf9\u4e8e\u8fd9\u4e2a\u95ee\u9898\u7684\u63cf\u8ff0\u6700\u597d\u7684\u6587\u7ae0\u662f\u6765\u81ea\u4e8e Herb Sutter \u7684 GotW \uff0c\u5c3d\u7ba1\u4ed6\u5c55\u793a\u7684example\u4e2d\u5305\u542b\u4e86 \u76f4\u63a5\u901a\u8fc7 {} \u6765\u521d\u59cb\u5316int\u7c7b\u578b\uff0c\u4f46\u662f\u6700\u7ec8\u4ed6\u7684\u5efa\u8bae\u548c\u6211\u4eec\u8fd9\u91cc\u7684\u5185\u5bb9\u5927\u81f4\u76f8\u7b26\uff0c\u5176\u4e2d\u6709\u4e00\u4e2a\u8b66\u544a: Herb \u8bf4\uff0c\u4f60\u66f4\u559c\u6b22\u53ea\u770b\u5230 = \u7b26\u53f7\uff0c\u6211\u4eec\u6beb\u4e0d\u542b\u7cca\u5730\u5e0c\u671b\u770b\u5230\u8fd9\u4e00\u70b9\u3002 \u7ed3\u5408\u5728\u591a\u53c2\u6570\u6784\u9020\u51fd\u6570\u4e0a\u66f4\u4e00\u81f4\u5730\u4f7f\u7528\u663e\u5f0f\uff08\u53c2\u89c1\u63d0\u793a Tips 142 \uff09\uff0c\u8fd9\u63d0\u4f9b\u4e86\u53ef\u8bfb\u6027\uff0c\u663e\u5f0f\u6027\u548c\u6b63\u786e\u6027\u4e4b\u95f4\u7684\u5e73\u8861\u3002 Conclusion \u7edf\u4e00\u521d\u59cb\u5316\u8bed\u6cd5\u7684\u6743\u8861\uff0c\u901a\u5e38\u662f\u4e0d\u503c\u5f97\uff1a \u6211\u4eec\u7684\u7f16\u8bd1\u5668\u5df2\u7ecf\u8b66\u544a\u8fc7\u6700\u4ee4\u4eba\u70e6\u607c\u7684\u89e3\u6790(\u4f60\u53ef\u4ee5\u4f7f\u7528\u5927\u62ec\u53f7\u6765\u521d\u59cb\u5316\u6216\u8005\u6dfb\u52a0parents\u6765\u89e3\u51b3\u95ee\u9898)\uff0c\u8fd8\u6709\u7a84\u5316\u8f6c\u6362\u5e76\u4e0d\u503c\u5f97\u5927\u62ec\u53f7\u5e26\u6765\u7684\u53ef\u8bfb\u6027\u95ee\u9898(\u6700\u7ec8\uff0c\u6211\u4eec\u9700\u8981\u6709\u4e00\u79cd\u4e0d\u540c\u7684 \u65b9\u6848\u6765\u89e3\u51b3\u7a84\u5316\u8f6c\u6362\u7684\u95ee\u9898)\u3002 Style Arbiters \u8ba4\u4e3a\u8fd9\u4e2a\u95ee\u9898\u4e0d\u8db3\u4ee5\u5236\u5b9a\u6b63\u5f0f\u7684\u89c4\u5219\uff0c\u7279\u522b\u662f\u56e0\u4e3a\u6709\u4e9b\u60c5\u51b5(\u7279\u522b\u662f\u5728\u901a\u7528\u4ee3\u7801\u4e2d)\u7a84\u5316\u8f6c\u6362\u7528\u4e8e\u652f\u6491\u521d\u59cb\u5316\u53ef\u80fd\u662f\u5408\u7406\u7684\u3002","title":"Tip of the Week #88: Initialization: =, (), and {}"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-88/#tip-of-the-week-88-initialization-and","text":"Originally posted as TotW #88 on Jan 27, 2015 by Titus Winters (titus@google.com), on behalf of the Google C++ Style Arbiters C++11\u63d0\u4f9b\u4e86\u4e00\u79cd\u65b0\u7684\u8bed\u6cd5\uff0c\u88ab\u79f0\u4e3a \u7edf\u4e00\u521d\u59cb\u5316\u8bed\u6cd5 \uff0c\u5176\u76ee\u7684\u662f\u4e3a\u4e86\u7edf\u4e00\u5404\u79cd\u98ce\u683c\u7684\u521d\u59cb\u5316\u65b9\u5f0f\uff0c\u4ece\u800c \u907f\u514d\u4e00\u4e9b\u4ee4\u4eba\u70e6\u607c\u7684\u89e3\u6790 \uff0c\u4ee5\u53ca\u907f\u514d\u7a84\u5316\u8f6c\u6362\u7b49 \u8fd9\u4e2a\u65b0\u7684\u673a\u5236\uff0c\u610f\u5473\u7740\u73b0\u5728\u6709\u4e86\u53e6\u5916\u4e00\u79cd\u521d\u59cb\u5316\u7684\u8bed\u6cd5\uff0c\u5e76\u6709\u4e86\u81ea\u5df1\u7684\u6298\u8877\u65b9\u6848\u3002","title":"Tip of the Week #88: Initialization: =, (), and {}"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-88/#c11-brace-initialization","text":"\u4e00\u4e9b\u7edf\u4e00\u521d\u59cb\u5316\u8bed\u6cd5\u7684\u652f\u6301\u8005\u5efa\u8bae\u6211\u4eec\u4f7f\u7528 {} \u548c\u76f4\u63a5\u521d\u59cb\u5316\uff08\u4e0d\u4f7f\u7528\u201c=\u201d\uff0c\u5c3d\u7ba1\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u4e24\u79cd\u5f62\u5f0f\u90fd\u8c03\u7528\u540c\u4e00\u4e2a\u6784\u9020\u51fd\u6570\uff09\u6765\u521d\u59cb\u5316\u6240\u6709\u7c7b\u578b\uff1a 1 2 3 int x { 2 }; std :: string foo { \"Hello World\" }; std :: vector < int > v { 1 , 2 , 3 }; \u548c\u4e0b\u9762\u8fd9\u79cd 1 2 3 int x = 2 ; std :: string foo = \"Hello World\" ; std :: vector < int > v = { 1 , 2 , 3 }; \u8fd9\u4e2a\u65b9\u6cd5\u6709\u4e24\u4e2a\u7f3a\u70b9: \u9996\u5148\uff0c\u201c\u7edf\u4e00\u201d\u662f\u4e00\u4e2a\u5ef6\u4f38\uff1a\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u5728\u8c03\u7528\u4ec0\u4e48\u4ee5\u53ca\u5982\u4f55\u8c03\u7528\u4e2d\u4ecd\u7136\u5b58\u5728\u6b67\u4e49\uff08\u5bf9\u4e8e\u666e\u901a\u8bfb\u8005\uff0c\u800c\u4e0d\u662f\u7f16\u8bd1\u5668\uff09\u3002 1 2 std :: vector < std :: string > strings { 2 }; // A vector of two empty strings. std :: vector < int > ints { 2 }; // A vector containing only the integer 2. \u5176\u6b21\uff0c\u8fd9\u79cd\u8bed\u6cd5\u5e76\u4e0d\u5b8c\u5168\u76f4\u89c2\uff0c\u6ca1\u6709\u5176\u4ed6\u901a\u7528\u8bed\u8a00\u4f7f\u7528\u8fd9\u79cd\u8bed\u6cd5\uff0c\u8fd9\u79cd\u8bed\u8a00\u5f53\u7136\u53ef\u4ee5\u5f15\u5165\u65b0\u7684\u3001\u4ee4\u4eba\u60ca\u8bb6\u7684\u8bed\u6cd5\uff0c\u800c\u4e14\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff08\u7279\u522b\u662f\u5728\u6cdb\u578b\u4ee3\u7801\u4e2d\uff09\u6709\u5fc5\u8981\u4f7f\u7528\u8fd9\u79cd\u8bed\u8a00\u7684\u6280\u672f\u539f\u56e0\u3002 \u91cd\u8981\u7684\u95ee\u9898\u662f\uff1a\u6211\u4eec\u5e94\u8be5\u5728\u591a\u5927\u7a0b\u5ea6\u4e0a\u6539\u53d8\u6211\u4eec\u7684\u4e60\u60ef\u548c\u5bf9\u8bed\u8a00\u7684\u7406\u89e3\u6765\u5229\u7528\u8fd9\u79cd\u6539\u53d8\uff1f\u5728\u6539\u53d8\u6211\u4eec\u7684\u4e60\u60ef\u6216\u73b0\u6709\u4ee3\u7801\u65f6\uff0c\u8fd9\u4e9b\u597d\u5904\u503c\u5f97\u4ed8\u51fa\u4ee3\u4ef7\u5417\uff1f\u5bf9\u4e8e\u7edf\u4e00\u7684\u521d\u59cb\u5316\u8bed\u6cd5\uff0c\u6211\u4eec\u4e00\u822c\u4e0d\u8ba4\u4e3a\u597d\u5904\u5927\u4e8e\u7f3a\u70b9\u3002","title":"C++11 Brace Initialization"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-88/#best-practices-for-initialization","text":"\u76f8\u53cd\uff0c\u5bf9\u4e8e\u201c\u5982\u4f55\u521d\u59cb\u5316\u53d8\u91cf\u201d\uff0c\u6211\u4eec\u5efa\u8bae\u4f7f\u7528\u4ee5\u4e0b\u6307\u5bfc\u539f\u5219\u3002\u201c\uff0c\u65e2\u8981\u9075\u5faa\u81ea\u5df1\u7684\u4ee3\u7801\uff0c\u4e5f\u8981\u5728\u4ee3\u7801\u8bc4\u8bba\u4e2d\u5f15\u7528\uff1a \u5f53\u76f4\u63a5\u521d\u59cb\u5316\u5b57\u9762\u503c\u7684\u65f6\u5019\uff0c\u4f7f\u7528\u8d4b\u503c\u8bed\u6cd5(\u4f8b\u5982: int \u3001 float \u3001 std::string \u503c\u65f6)\uff0c\u5bf9\u4e8e\u667a\u80fd\u6307\u9488\u4f8b\u5982 std::shared_ptr \u3001 std::unique_ptr \u4ee5\u53ca\u5bb9\u5668( std::vector \u3001 std::map \u7b49)\u65f6\u6267\u884c struct\u521d\u59cb\u5316 \u6216\u8005\u662f\u505a\u62f7\u8d1d\u521d\u59cb\u5316 1 2 3 4 5 6 int x = 2 ; std :: string foo = \"Hello World\" ; std :: vector < int > v = { 1 , 2 , 3 }; std :: unique_ptr < Matrix > matrix = NewMatrix ( rows , cols ); MyStruct x = { true , 5.0 }; MyProto copied_proto = original_proto ; \u66ff\u4ee3\u5982\u4e0b\u4ee3\u7801: 1 2 3 4 5 6 7 // Bad code int x { 2 }; std :: string foo { \"Hello World\" }; std :: vector < int > v { 1 , 2 , 3 }; std :: unique_ptr < Matrix > matrix { NewMatrix ( rows , cols )}; MyStruct x { true , 5.0 }; MyProto copied_proto { original_proto }; \u5f53\u521d\u59cb\u5316\u9700\u8981\u6267\u884c\u67d0\u4e9b\u903b\u8f91\u7684\u65f6\u5019\uff0c\u4f7f\u7528\u4f20\u7edf\u7684\u6784\u9020\u8bed\u6cd5(\u5e26\u6709\u62ec\u53f7\u7684)\uff0c\u800c\u4e0d\u662f\u7b80\u5355\u7684\u5c06\u503c\u7ec4\u5408\u5728\u4e00\u8d77 1 2 Frobber frobber ( size , & bazzer_to_duplicate ); std :: vector < double > fifty_pies ( 50 , 3.14 ); \u76f8\u6bd4\u4e8e\u5982\u4e0b\u4ee3\u7801: 1 2 3 4 5 6 7 // Bad code // Could invoke an intializer list constructor, or a two-argument constructor. Frobber frobber { size , & bazzer_to_duplicate }; // Makes a vector of two doubles. std :: vector < double > fifty_pies { 50 , 3.14 }; \u4ec5\u5f53\u4e0a\u8ff0\u65b9\u6cd5\u65e0\u6cd5\u7f16\u8bd1\u7684\u65f6\u5019\uff0c\u624d\u4f7f\u7528 {} \u521d\u59cb\u5316\uff0c\u800c\u4e0d\u662f = 1 2 3 4 5 6 7 8 9 10 class Foo { public : Foo ( int a , int b , int c ) : array_ { a , b , c } {} private : int array_ [ 5 ]; // Requires {}s because the constructor is marked explicit // and the type is non-copyable. EventManager em { EventManager :: Options ()}; }; \u7528\u4e8e\u4e0d\u8981\u5c06 {} \u521d\u59cb\u5316\u548c auto \u6df7\u5408\u5728\u4e00\u8d77\u4f7f\u7528 1 2 3 // Bad code auto x { 1 }; auto y = { 2 }; // This is a std::initializer_list<int>! (\u5bf9\u4e8e\u8bed\u8a00\u5f8b\u5e08\u6765\u8bf4\uff1a\u5728\u53ef\u7528\u65f6\uff0c\u9996\u9009\u590d\u5236\u521d\u59cb\u5316\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u521d\u59cb\u5316\uff1b\u5728\u8bc9\u8bf8\u76f4\u63a5\u521d\u59cb\u5316\u65f6\uff0c\u4f18\u5148\u4f7f\u7528\u5927\u62ec\u53f7\u800c\u4e0d\u662f\u62ec\u53f7) \u6216\u8bb8\u5bf9\u4e8e\u8fd9\u4e2a\u95ee\u9898\u7684\u63cf\u8ff0\u6700\u597d\u7684\u6587\u7ae0\u662f\u6765\u81ea\u4e8e Herb Sutter \u7684 GotW \uff0c\u5c3d\u7ba1\u4ed6\u5c55\u793a\u7684example\u4e2d\u5305\u542b\u4e86 \u76f4\u63a5\u901a\u8fc7 {} \u6765\u521d\u59cb\u5316int\u7c7b\u578b\uff0c\u4f46\u662f\u6700\u7ec8\u4ed6\u7684\u5efa\u8bae\u548c\u6211\u4eec\u8fd9\u91cc\u7684\u5185\u5bb9\u5927\u81f4\u76f8\u7b26\uff0c\u5176\u4e2d\u6709\u4e00\u4e2a\u8b66\u544a: Herb \u8bf4\uff0c\u4f60\u66f4\u559c\u6b22\u53ea\u770b\u5230 = \u7b26\u53f7\uff0c\u6211\u4eec\u6beb\u4e0d\u542b\u7cca\u5730\u5e0c\u671b\u770b\u5230\u8fd9\u4e00\u70b9\u3002 \u7ed3\u5408\u5728\u591a\u53c2\u6570\u6784\u9020\u51fd\u6570\u4e0a\u66f4\u4e00\u81f4\u5730\u4f7f\u7528\u663e\u5f0f\uff08\u53c2\u89c1\u63d0\u793a Tips 142 \uff09\uff0c\u8fd9\u63d0\u4f9b\u4e86\u53ef\u8bfb\u6027\uff0c\u663e\u5f0f\u6027\u548c\u6b63\u786e\u6027\u4e4b\u95f4\u7684\u5e73\u8861\u3002","title":"Best Practices for Initialization"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-88/#conclusion","text":"\u7edf\u4e00\u521d\u59cb\u5316\u8bed\u6cd5\u7684\u6743\u8861\uff0c\u901a\u5e38\u662f\u4e0d\u503c\u5f97\uff1a \u6211\u4eec\u7684\u7f16\u8bd1\u5668\u5df2\u7ecf\u8b66\u544a\u8fc7\u6700\u4ee4\u4eba\u70e6\u607c\u7684\u89e3\u6790(\u4f60\u53ef\u4ee5\u4f7f\u7528\u5927\u62ec\u53f7\u6765\u521d\u59cb\u5316\u6216\u8005\u6dfb\u52a0parents\u6765\u89e3\u51b3\u95ee\u9898)\uff0c\u8fd8\u6709\u7a84\u5316\u8f6c\u6362\u5e76\u4e0d\u503c\u5f97\u5927\u62ec\u53f7\u5e26\u6765\u7684\u53ef\u8bfb\u6027\u95ee\u9898(\u6700\u7ec8\uff0c\u6211\u4eec\u9700\u8981\u6709\u4e00\u79cd\u4e0d\u540c\u7684 \u65b9\u6848\u6765\u89e3\u51b3\u7a84\u5316\u8f6c\u6362\u7684\u95ee\u9898)\u3002 Style Arbiters \u8ba4\u4e3a\u8fd9\u4e2a\u95ee\u9898\u4e0d\u8db3\u4ee5\u5236\u5b9a\u6b63\u5f0f\u7684\u89c4\u5219\uff0c\u7279\u522b\u662f\u56e0\u4e3a\u6709\u4e9b\u60c5\u51b5(\u7279\u522b\u662f\u5728\u901a\u7528\u4ee3\u7801\u4e2d)\u7a84\u5316\u8f6c\u6362\u7528\u4e8e\u652f\u6491\u521d\u59cb\u5316\u53ef\u80fd\u662f\u5408\u7406\u7684\u3002","title":"Conclusion"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-90/","text":"Tip of the Week #90: Retired Flags Originally posted as TotW #90 on March 19, 2015 *by Titus Winters \u5173\u4e8e\u6211\u4eec\u4f7f\u7528\u547d\u4ee4\u884c\u6807\u5fd7\u7684\u4e00\u4e2a\u4ee4\u4eba\u6cae\u4e27\u7684\u4e8b\u60c5\u662f\u5f88\u96be\u5b89\u5168\u5730\u4ece\u4e8c\u8fdb\u5236\u548c\u751f\u4ea7\u670d\u52a1\u5668\u4e0a\u5220\u9664\u6807\u5fd7\uff08\u8bf7\u8bbf\u95eehttps://abseil.io/tips/45\u4e86\u89e3\u4e00\u4e9b\u4ee4\u4eba\u6cae\u4e27\u7684\u8bef\u7528\uff09\u3002\u9ebb\u70e6\uff1f \u5982\u679c\u6307\u5b9a\u4e0d\u518d\u5b9a\u4e49\u7684\u6807\u5fd7\uff0c\u4e8c\u8fdb\u5236\u5c06\u4e0d\u4f1a\u542f\u52a8\uff0c\u56e0\u6b64\u5220\u9664\u6807\u5fd7\u53ef\u80fd\u9700\u8981C++\u4ee3\u7801\u4e0e\u4f5c\u4e1a\u542f\u52a8\u811a\u672c\u548c\u914d\u7f6e\u4e4b\u95f4\u7684\u534f\u8c03\u3002 \u5728\u4e00\u4e9b\u573a\u666f\u4e0b\uff0c\u8fd9\u79cd\u534f\u8c03\u662f\u76f8\u5f53\u6709\u6311\u6218\u7684(\u57fa\u4e8e\u4e8c\u8fdb\u5236\u7248\u672c\u6765\u8c03\u6574\u751f\u4ea7\u4ee3\u7801)\uff0c\u90a3\u6709\u66f4\u597d\u7684\u65b9\u5f0f\u5417\uff1f \u6709\u3002\u524d\u6bb5\u65f6\u95f4\u6211\u4eec\u5728 C++ \u547d\u4ee4\u884c\u6807\u5fd7\u7cfb\u7edf\u4e2d\u6dfb\u52a0\u4e86\u4e00\u4e2a\u540d\u4e3a\u201c\u9000\u5f79\u6807\u5fd7\u201d\u7684\u65b0\u6982\u5ff5 ABSL_RETIRED_FLAG \u9000\u5f79\u6807\u5fd7\u5728C++\u4e2d\u4e0d\u521b\u5efa\u7b26\u53f7(\u4e0d\u518d\u9700\u8981\u4f9d\u8d56FLAGS_some_flag\u5168\u5c40\u53d8\u91cf)\uff0c\u4e0d\u4f1a\u51fa\u73b0\u5728 --help \u4e2d\u3002\u4f46\u5728\u547d\u4ee4\u884c\u4e2d\u6307\u5b9a\u65f6\u5c06\u88ab\u63a5\u53d7\uff08\u867d\u7136\u5c06\u8bb0\u5f55ERROR\u65e5\u5fd7\uff09\uff0c \u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u4ee3\u7801\u5c06\u4e0d\u518d\u4f7f\u7528\u7684\u6807\u5fd7\u53ef\u4ee5\u6807\u8bb0\u4e3a\u201c\u9000\u5f79\u201d\uff0c\u4ece\u800c\u5c06 C++ \u4ee3\u7801\u66f4\u6539\u4e0e\u751f\u4ea7\u914d\u7f6e\u66f4\u6539\u5206\u5f00\u3002\u4e00\u65e6\u914d\u7f6e\u66f4\u6539\u5168\u90e8\u6e05\u9664\uff0c\u5c31\u53ef\u4ee5\u4e00\u52b3\u6c38\u9038\u5730\u5220\u9664\u9000\u5f79\u6807\u5fd7\u3002 \u9000\u5f79\u6807\u5fd7\u88ab\u8bbe\u8ba1\u7528\u4e8e\u8bb8\u591a\u60c5\u51b5\uff08\u5305\u62ec\u6d89\u53ca\u4ea4\u53c9\u4ed3\u5e93\u3001\u975e\u539f\u5b50\u63d0\u4ea4\u8981\u6c42\u7b49\u60c5\u51b5\uff09\u3002\u4e00\u4e2a\u975e\u5e38\u7b80\u5355\u7684\u9000\u5f79\u6807\u5fd7\u7684\u6b65\u9aa4\u53ef\u80fd\u5982\u4e0b\u6240\u793a\uff1a \u5728\u4ee3\u7801\u4e2d\u79fb\u9664\u5bf9\u4e8e FLAGS_frobber \u7684\u4f7f\u7528 \u5982\u679c\u4f60\u9075\u5faahttps://abseil.io/tips/45\u7684\u5efa\u8bae\u5e76\u4e3b\u8981\u4f7f\u7528\u6765\u81ea main() \u7684\u6807\u5fd7\uff0c\u8fd9\u5e94\u8be5\u5f88\u5bb9\u6613\u505a\u5e76\u68c0\u67e5\u3002 \u66f4\u6539\u6807\u5fd7\u7684\u5b9a\u4e49\u4ee5\u4f7f\u5176\u9000\u5f79 1 ABSL_FLAG ( type , frobber , \"default\" , \"Which frobber to use?\" ); \u5c06\u5176\u53d8\u6210: 1 ABSL_RETIRED_FLAG ( type , frobber , \"default\" , \"retired\" ); \u7b49\u5f85\u4e8c\u8fdb\u5236\u7248\u672c\u3002\u4e00\u65e6\u6240\u6709\u670d\u52a1\u5355\u5143\u4e2d\u7684\u6240\u6709\u4f5c\u4e1a\u90fd\u8c03\u7528\u65b0\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u60a8\u5c31\u53ef\u4ee5\u7ee7\u7eed \u4ece\u751f\u4ea7\u914d\u7f6e\u4e2d\u5220\u9664\u6807\u5fd7\u3002\u4e00\u65e6\u641c\u7d22\u76f8\u5173\u7684\u751f\u4ea7\u914d\u7f6e\u663e\u793a\u6ca1\u6709\u547d\u4e2d frobber \u6807\u5fd7\uff0c\u4f60\u53ef\u4ee5\u7ee7\u7eed\u3002 \u79fb\u9664\u9000\u5f79\u6807\u5fd7 \u5230\u6b64\u4e3a\u6b62\uff0c\u6211\u4eec\u5df2\u7ecf\u6210\u529f\u5730\u5220\u9664\u4e86\u975e\u5e38\u590d\u6742\u7684\u6807\u5fd7\uff1a\u8fd9\u9879\u5de5\u4f5c\u7684\u52a8\u673a\u662f\u5220\u9664\u9057\u7559\u5185\u90e8\u6587\u4ef6\u7cfb\u7edf\u4e2d\u5b9a\u4e49\u7684\u6807\u5fd7\uff0c\u8fd9\u66f4\u4e3a\u590d\u6742\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u6807\u5fd7\u662f\u5728\u5e93\u4e2d\u5b9a\u4e49\u7684(\u56e0\u6b64\u8bb8\u591a\u4e8c\u8fdb\u5236\u6587\u4ef6\u5728\u4f7f\u7528)\u3002 \u4ece\u6211\u4eec\u6240\u770b\u5230\u7684\u60c5\u51b5\u6765\u770b\uff0c\u5373\u4f7f\u662f\u6700\u590d\u6742\u7684\u6807\u5fd7\u5220\u9664\u4e5f\u53ef\u4ee5\u4f7f\u7528\u6b64\u7cfb\u7edf\u5b89\u5168\u5730\u542f\u7528\u3002\u6240\u4ee5\uff0c\u4e0b\u6b21\u4f60\u60f3\u77e5\u9053\u5982\u4f55\u5b89\u5168\u5730\u79fb\u9664\u4e00\u4e2a\u6807\u5fd7\u65f6\uff0c\u53ef\u4ee5\u8003\u8651\u5c06\u5176\u9000\u5f79\uff0c\u7136\u540e\u4e00\u6b65\u4e00\u6b65\u5730\u8fdb\u884c\u3002","title":"Tip of the Week #90: Retired Flags"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-90/#tip-of-the-week-90-retired-flags","text":"Originally posted as TotW #90 on March 19, 2015 *by Titus Winters \u5173\u4e8e\u6211\u4eec\u4f7f\u7528\u547d\u4ee4\u884c\u6807\u5fd7\u7684\u4e00\u4e2a\u4ee4\u4eba\u6cae\u4e27\u7684\u4e8b\u60c5\u662f\u5f88\u96be\u5b89\u5168\u5730\u4ece\u4e8c\u8fdb\u5236\u548c\u751f\u4ea7\u670d\u52a1\u5668\u4e0a\u5220\u9664\u6807\u5fd7\uff08\u8bf7\u8bbf\u95eehttps://abseil.io/tips/45\u4e86\u89e3\u4e00\u4e9b\u4ee4\u4eba\u6cae\u4e27\u7684\u8bef\u7528\uff09\u3002\u9ebb\u70e6\uff1f \u5982\u679c\u6307\u5b9a\u4e0d\u518d\u5b9a\u4e49\u7684\u6807\u5fd7\uff0c\u4e8c\u8fdb\u5236\u5c06\u4e0d\u4f1a\u542f\u52a8\uff0c\u56e0\u6b64\u5220\u9664\u6807\u5fd7\u53ef\u80fd\u9700\u8981C++\u4ee3\u7801\u4e0e\u4f5c\u4e1a\u542f\u52a8\u811a\u672c\u548c\u914d\u7f6e\u4e4b\u95f4\u7684\u534f\u8c03\u3002 \u5728\u4e00\u4e9b\u573a\u666f\u4e0b\uff0c\u8fd9\u79cd\u534f\u8c03\u662f\u76f8\u5f53\u6709\u6311\u6218\u7684(\u57fa\u4e8e\u4e8c\u8fdb\u5236\u7248\u672c\u6765\u8c03\u6574\u751f\u4ea7\u4ee3\u7801)\uff0c\u90a3\u6709\u66f4\u597d\u7684\u65b9\u5f0f\u5417\uff1f \u6709\u3002\u524d\u6bb5\u65f6\u95f4\u6211\u4eec\u5728 C++ \u547d\u4ee4\u884c\u6807\u5fd7\u7cfb\u7edf\u4e2d\u6dfb\u52a0\u4e86\u4e00\u4e2a\u540d\u4e3a\u201c\u9000\u5f79\u6807\u5fd7\u201d\u7684\u65b0\u6982\u5ff5 ABSL_RETIRED_FLAG \u9000\u5f79\u6807\u5fd7\u5728C++\u4e2d\u4e0d\u521b\u5efa\u7b26\u53f7(\u4e0d\u518d\u9700\u8981\u4f9d\u8d56FLAGS_some_flag\u5168\u5c40\u53d8\u91cf)\uff0c\u4e0d\u4f1a\u51fa\u73b0\u5728 --help \u4e2d\u3002\u4f46\u5728\u547d\u4ee4\u884c\u4e2d\u6307\u5b9a\u65f6\u5c06\u88ab\u63a5\u53d7\uff08\u867d\u7136\u5c06\u8bb0\u5f55ERROR\u65e5\u5fd7\uff09\uff0c \u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u4ee3\u7801\u5c06\u4e0d\u518d\u4f7f\u7528\u7684\u6807\u5fd7\u53ef\u4ee5\u6807\u8bb0\u4e3a\u201c\u9000\u5f79\u201d\uff0c\u4ece\u800c\u5c06 C++ \u4ee3\u7801\u66f4\u6539\u4e0e\u751f\u4ea7\u914d\u7f6e\u66f4\u6539\u5206\u5f00\u3002\u4e00\u65e6\u914d\u7f6e\u66f4\u6539\u5168\u90e8\u6e05\u9664\uff0c\u5c31\u53ef\u4ee5\u4e00\u52b3\u6c38\u9038\u5730\u5220\u9664\u9000\u5f79\u6807\u5fd7\u3002 \u9000\u5f79\u6807\u5fd7\u88ab\u8bbe\u8ba1\u7528\u4e8e\u8bb8\u591a\u60c5\u51b5\uff08\u5305\u62ec\u6d89\u53ca\u4ea4\u53c9\u4ed3\u5e93\u3001\u975e\u539f\u5b50\u63d0\u4ea4\u8981\u6c42\u7b49\u60c5\u51b5\uff09\u3002\u4e00\u4e2a\u975e\u5e38\u7b80\u5355\u7684\u9000\u5f79\u6807\u5fd7\u7684\u6b65\u9aa4\u53ef\u80fd\u5982\u4e0b\u6240\u793a\uff1a \u5728\u4ee3\u7801\u4e2d\u79fb\u9664\u5bf9\u4e8e FLAGS_frobber \u7684\u4f7f\u7528 \u5982\u679c\u4f60\u9075\u5faahttps://abseil.io/tips/45\u7684\u5efa\u8bae\u5e76\u4e3b\u8981\u4f7f\u7528\u6765\u81ea main() \u7684\u6807\u5fd7\uff0c\u8fd9\u5e94\u8be5\u5f88\u5bb9\u6613\u505a\u5e76\u68c0\u67e5\u3002 \u66f4\u6539\u6807\u5fd7\u7684\u5b9a\u4e49\u4ee5\u4f7f\u5176\u9000\u5f79 1 ABSL_FLAG ( type , frobber , \"default\" , \"Which frobber to use?\" ); \u5c06\u5176\u53d8\u6210: 1 ABSL_RETIRED_FLAG ( type , frobber , \"default\" , \"retired\" ); \u7b49\u5f85\u4e8c\u8fdb\u5236\u7248\u672c\u3002\u4e00\u65e6\u6240\u6709\u670d\u52a1\u5355\u5143\u4e2d\u7684\u6240\u6709\u4f5c\u4e1a\u90fd\u8c03\u7528\u65b0\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u60a8\u5c31\u53ef\u4ee5\u7ee7\u7eed \u4ece\u751f\u4ea7\u914d\u7f6e\u4e2d\u5220\u9664\u6807\u5fd7\u3002\u4e00\u65e6\u641c\u7d22\u76f8\u5173\u7684\u751f\u4ea7\u914d\u7f6e\u663e\u793a\u6ca1\u6709\u547d\u4e2d frobber \u6807\u5fd7\uff0c\u4f60\u53ef\u4ee5\u7ee7\u7eed\u3002 \u79fb\u9664\u9000\u5f79\u6807\u5fd7 \u5230\u6b64\u4e3a\u6b62\uff0c\u6211\u4eec\u5df2\u7ecf\u6210\u529f\u5730\u5220\u9664\u4e86\u975e\u5e38\u590d\u6742\u7684\u6807\u5fd7\uff1a\u8fd9\u9879\u5de5\u4f5c\u7684\u52a8\u673a\u662f\u5220\u9664\u9057\u7559\u5185\u90e8\u6587\u4ef6\u7cfb\u7edf\u4e2d\u5b9a\u4e49\u7684\u6807\u5fd7\uff0c\u8fd9\u66f4\u4e3a\u590d\u6742\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u6807\u5fd7\u662f\u5728\u5e93\u4e2d\u5b9a\u4e49\u7684(\u56e0\u6b64\u8bb8\u591a\u4e8c\u8fdb\u5236\u6587\u4ef6\u5728\u4f7f\u7528)\u3002 \u4ece\u6211\u4eec\u6240\u770b\u5230\u7684\u60c5\u51b5\u6765\u770b\uff0c\u5373\u4f7f\u662f\u6700\u590d\u6742\u7684\u6807\u5fd7\u5220\u9664\u4e5f\u53ef\u4ee5\u4f7f\u7528\u6b64\u7cfb\u7edf\u5b89\u5168\u5730\u542f\u7528\u3002\u6240\u4ee5\uff0c\u4e0b\u6b21\u4f60\u60f3\u77e5\u9053\u5982\u4f55\u5b89\u5168\u5730\u79fb\u9664\u4e00\u4e2a\u6807\u5fd7\u65f6\uff0c\u53ef\u4ee5\u8003\u8651\u5c06\u5176\u9000\u5f79\uff0c\u7136\u540e\u4e00\u6b65\u4e00\u6b65\u5730\u8fdb\u884c\u3002","title":"Tip of the Week #90: Retired Flags"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-93/","text":"Tip of the Week #93: using absl::Span Originally posted as TotW #93 on April 23, 2015 by Samuel Benzaquen (sbenza@google.com) \u5728Google\u7684\u65f6\u5019\uff0c\u5f53\u6211\u4eec\u8981\u5904\u7406 unowned strings (\u4e0d\u62e5\u6709\u5b57\u7b26\u4e32\u7684\u751f\u547d\u5468\u671f)\u7684\u65f6\u5019\uff0c\u6211\u4eec\u60ef\u4f8b\u4f1a\u53bb\u4f7f\u7528 absl::string_view \u4f5c\u4e3a\u51fd\u6570\u53c2\u6570\u548c\u8fd4\u56de\u7c7b\u578b\u3002\u901a\u8fc7\u5b83 \u53ef\u4ee5\u4f7f\u5f97API\u66f4\u7075\u6d3b\uff0c\u800c\u4e14\u8fd8\u53ef\u4ee5\u901a\u8fc7\u907f\u514d\u4e0d\u5fc5\u8981\u7684 std::string \u8f6c\u6362\u6765\u63d0\u9ad8\u6027\u80fd\u3002(See TotW #1 ) absl::string_view \u6709\u4e00\u4e2a\u66f4\u901a\u7528\u7684\u5144\u5f1f\u53eb\u505a absl::Span \uff0c absl::Span<const T> \u5c31\u662f\u5bf9 std::vector<T> \u7684\u5f15\u7528\uff0c\u5c31\u597d\u6bd4 absl::string_view \u548c std::string \u7684\u5173\u7cfb\u3002 \u5b83\u63d0\u4f9b\u4e86\u53ea\u8bfb\u63a5\u53e3\u6765\u8bbf\u95ee vector \u4e2d\u7684\u5143\u7d20\u3002\u5e76\u4e14\u8fd8\u53ef\u4ee5\u4ece\u975evector\u7c7b\u578b\u8fdb\u884c\u6784\u9020(\u6bd4\u5982\u6570\u7ec4\u3001\u521d\u59cb\u5316\u5217\u8868\u7b49)\uff0c\u800c\u4e14\u4e0d\u4f1a\u5e26\u6765\u5143\u7d20\u62f7\u8d1d\u7684\u5f00\u9500\u3002 const \u53ef\u4ee5\u53bb\u6389\uff0c absl::Span<const T> \u662f\u5bf9\u6570\u7ec4\u7684\u4e00\u4e2a\u53ea\u8bfb\u7684\u89c6\u56fe\uff0c\u5176\u4e2d\u7684\u5143\u7d20\u662f\u4e0d\u53ef\u53d8\u7684\uff0c\u800c absl::Span<T> \u5219\u5141\u8bb8\u975econst\u6765\u8bbf\u95ee\u5143\u7d20\uff0c\u4f46\u8fd9\u9700\u8981\u663e\u793a\u7684\u6784\u9020 absl::Span<T> \u3002 Note on std::span / gsl::span \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u867d\u7136 absl::Span \u5728\u8bbe\u8ba1\u548c\u76ee\u7684\u4e0a\u4e0e std::span \u63d0\u6848\uff08\u4ee5\u53ca\u73b0\u6709\u7684 gsl::span \u53c2\u8003\u5b9e\u73b0\uff09\u7c7b\u4f3c\uff0c\u4f46\u662f absl::Span \u76ee\u524d\u4e0d\u4fdd\u8bc1\u662f\u4efb\u4f55\u6700\u7ec8\u6807\u51c6\u7684\u66ff\u4ee3\u54c1\uff0c \u56e0\u4e3a std::span \u63d0\u6848\u4ecd\u5728\u5f00\u53d1\u4e2d\u5e76\u4e14\u6b63\u5728\u8fdb\u884c\u66f4\u6539\u3002 \u76f8\u53cd\uff0c absl::Span \u65e8\u5728\u4f7f\u4e00\u4e2a\u63a5\u53e3\u5c3d\u53ef\u80fd\u4e0e absl::string_view \u76f8\u4f3c\uff0c\u800c\u4e0d\u662f\u7279\u5b9a\u4e8e\u5b57\u7b26\u4e32\u7684\u529f\u80fd\u3002 As Function Parameters \u4f7f\u7528 absl::Span \u4f5c\u4e3a\u51fd\u6570\u53c2\u6570\u5176\u4f18\u70b9\u7c7b\u4f3c\u4e8e\u4f7f\u7528 absl::string_view \u3002 \u8c03\u7528\u7740\u53ef\u4ee5\u4f20\u9012vector\u7684\u4e00\u90e8\u5206\u3001\u6216\u8005\u4f20\u9012\u6570\u7ec4\uff0c\u53ea\u8981\u662f\u517c\u5bb9\u7c7b\u6570\u7ec4\u7684\u5bb9\u5668\u5c31\u90fd\u53ef\u4ee5\u3002\u6bd4\u5982: absl::InlinedVector \u3001 absl::FixedArray \u3001 google::protobuf::RepeatedField \u7b49 \u548c absl::string_view \u4e00\u6837\uff0c\u901a\u5e38\u4f7f\u7528 absl::Span \u7684\u503c\u7c7b\u578b\u4f5c\u4e3a\u51fd\u6570\u53c2\u6570\uff0c\u8fd9\u79cd\u4ece\u4e8b\u8981\u6bd4\u901a\u8fc7\u4f20\u9012const\u5f15\u7528\u8981\u66f4\u5feb(\u5728\u5927\u591a\u6570\u5e73\u53f0\u4e0b)\uff0c\u53ef\u4ee5\u4ea7\u751f\u66f4\u5c0f\u7684\u4ee3\u7801\u3002 absl::Span \u7684\u57fa\u672c\u4f8b\u5b50: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 void TakesVector ( const std :: vector < int >& ints ); void TakesSpan ( absl :: Span < const int > ints ); void PassOnlyFirst3Elements () { std :: vector < int > ints = MakeInts (); // We need to create a temporary vector, and incur an allocation and a copy. TakesVector ( std :: vector < int > ( ints . begin (), ints . begin () + 3 )); // No copy or allocations are made when using Span. TakesSpan ( absl :: Span < const int > ( ints . data (), 3 )); } void PassALiteral () { // This creates a temporary std::vector<int>. TakesVector ({ 1 , 2 , 3 }); // Span does not need a temporary allocation and copy, so it is faster. TakesSpan ({ 1 , 2 , 3 }); } void IHaveAnArray () { int values [ 10 ] = ...; // Once more, a temporary std::vector<int> is created. TakesVector ( std :: vector < int > ( std :: begin ( values ), std :: end ( values ))); // Just pass the array. Span detects the size automatically. // No copy was made. TakesSpan ( values ); } Buffer Overflow Prevention \u56e0\u4e3a absl::Span \u77e5\u9053\u81ea\u5df1\u5b58\u50a8\u7684\u5143\u7d20\u7684\u957f\u5ea6\uff0c\u56e0\u6b64\u5b83\u7684API\u53ef\u4ee5\u83b7\u5f97\u8d85\u8fc7C\u98ce\u683c\u7684\u6307\u9488/\u957f\u5ea6\u7ec4\u5408\u6240\u5e26\u6765\u7684\u5b89\u5168\u6027\u3002 \u5b89\u5168\u7684 memcpy() \u7684\u4f8b\u5b50 1 2 3 4 5 6 // Bad code void BadUser () { int src [] = { 1 , 2 , 3 }; int dest [ 2 ]; memcpy ( dest , src , ABSL_ARRAYSIZE ( src ) * sizeof ( int )); // oops! Dest overflowed. } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // A simple example, but takes advantage that the sizes of the Spans are known // and prevents the above mistake. template < typename T > bool SaferMemCpy ( absl :: Span < T > dest , absl :: Span < const T > src ) { if ( src . size () > dest . size ()) { return false ; } memcpy ( dest . data (), src . data (), src . size ()); return true ; } void GoodUser () { int src [] = { 1 , 2 , 3 }, dest [ 2 ]; // No overflow! SaferMemCpy ( absl :: MakeSpan ( dest ), absl :: Span < const int > ( src )); } Const Correctness for Vector of Pointers \u4f20\u9012 std::vector<T*> \u7684\u6700\u5927\u95ee\u9898\u5728\u4e8e\u4f60\u6ca1\u529e\u6cd5\u5728\u4e0d\u6539\u53d8\u5bb9\u5668\u7c7b\u578b\u7684\u60c5\u51b5\u4e0b\u8ba9\u6307\u9488\u53d8\u6210const\u3002 \u4efb\u4f55\u51fd\u6570\u4f7f\u7528 const std::vector<T*>& \u4f5c\u4e3a\u53c2\u6570\u867d\u7136\u4e0d\u80fd\u4fee\u6539vector\u672c\u8eab\uff0c\u4f46\u662f\u5374\u53ef\u4ee5\u4fee\u6539vector\u4e2d\u7684\u5143\u7d20\u3002\u8fd9\u5bf9\u4e8e\u8fd4\u56de const std::vector<T*>& \u7684\u573a\u666f\u4e5f\u662f\u76f8\u540c\u7684\u6548\u679c\u3002 \u4f60\u65e0\u6cd5\u963b\u6b62\u8c03\u7528\u8005\u6765\u4fee\u6539 T \u7684\u503c\u3002 \u901a\u7528\u7684\u89e3\u51b3\u65b9\u6848\u5305\u62ec\u5c06vector\u62f7\u8d1d\u3001\u6216\u8005cast\u6210\u6b63\u786e\u7684\u7c7b\u578b\u3002\u8fd9\u4e2a\u89e3\u51b3\u65b9\u6848\u5f88\u6162\uff0c\u5e76\u4e14\u4f1a\u4ea7\u751f\u672a\u5b9a\u4e49\u884c\u4e3a\uff0c\u5e94\u8be5\u8981\u907f\u514d\u3002\u4f7f\u7528 absl::Span \u6765\u66ff\u4ee3\u3002 \u4f5c\u4e3a\u51fd\u6570\u53c2\u6570\u7684\u4f8b\u5b50: \u8003\u8651\u5982\u4e0b Frob \u7684\u53d8\u79cd: 1 2 3 void FrobFastWeak ( const std :: vector < Foo *>& v ); void FrobSlowStrong ( const std :: vector < const Foo *>& v ); void FrobFastStrong ( absl :: Span < const Foo * const > v ); \u4e0a\u8ff0\u53d8\u79cd\u524d\u4e24\u4e2a\u662f\u4e0d\u5b8c\u7f8e\u7684\uff0c\u6700\u540e\u4e00\u4e2a\u662f\u597d\u7684\u3002 1 2 3 4 5 6 // fast and easy to type but not const-safe FrobFastWeak ( v ); // slow and noisy, but safe. FrobSlowStrong ( std :: vector < const Foo *> ( v . begin (), v . end ())); // fast, safe, and clear! FrobFastStrong ( v ); Accessor\u7684\u4f8b\u5b50: 1 2 3 4 5 6 7 8 9 10 11 12 13 class DontDoThis { public : // Don\u2019t modify my Foos, pretty please. const std :: vector < Foo *>& shallow_foos () const { return foos_ ; } private : std :: vector < Foo *> foos_ ; }; void Caller ( const DontDoThis & my_class ) { // Modifies a foo even though my_class is a reference-to-const my_class -> foos ()[ 0 ] -> SomeNonConstOp (); } 1 2 3 4 5 6 7 8 9 10 11 12 13 // Good code class DoThisInstead { public : absl :: Span < const Foo * const > foos () const { return foos_ ; } private : std :: vector < Foo *> foos_ ; }; void Caller ( const DoThisInstead & my_class ) { // This one doesn't compile. // my_class.foos()[0]->SomeNonConstOp(); } Conclusion \u9002\u5f53\u7684\u4f7f\u7528 absl::Span \uff0c\u53ef\u4ee5\u63d0\u4f9b\u89e3\u8026\uff0c\u4ee5\u53ca\u5e26\u6765 const \u6b63\u786e\u6027\u548c\u6027\u80fd\u7684\u4f18\u70b9\u3002 \u6700\u91cd\u8981\u7684\u662f\u6ce8\u610f\u5230absl::Span\u7684\u884c\u4e3a\u548cabsl::string_view\u5f88\u50cf\uff0c\u90fd\u662f\u5bf9\u6570\u636e\u7684\u5f15\u7528\u3002\u540c\u6837\uff0c absl::string_view \u7684\u4f7f\u7528\u4e0a\u7684\u4e00\u4e9b\u8b66\u544a\uff0c\u4e5f\u9002\u7528\u4e8e absl::Span \u7279\u522b\u662f\u4e00\u4e2a absl::Span \u7684\u751f\u547d\u5468\u671f\u4e0d\u80fd\u8d85\u8fc7\u5b83\u6240\u5f15\u7528\u7684\u6570\u636e\u3002","title":"Tip of the Week #93: using absl::Span"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-93/#tip-of-the-week-93-using-abslspan","text":"Originally posted as TotW #93 on April 23, 2015 by Samuel Benzaquen (sbenza@google.com) \u5728Google\u7684\u65f6\u5019\uff0c\u5f53\u6211\u4eec\u8981\u5904\u7406 unowned strings (\u4e0d\u62e5\u6709\u5b57\u7b26\u4e32\u7684\u751f\u547d\u5468\u671f)\u7684\u65f6\u5019\uff0c\u6211\u4eec\u60ef\u4f8b\u4f1a\u53bb\u4f7f\u7528 absl::string_view \u4f5c\u4e3a\u51fd\u6570\u53c2\u6570\u548c\u8fd4\u56de\u7c7b\u578b\u3002\u901a\u8fc7\u5b83 \u53ef\u4ee5\u4f7f\u5f97API\u66f4\u7075\u6d3b\uff0c\u800c\u4e14\u8fd8\u53ef\u4ee5\u901a\u8fc7\u907f\u514d\u4e0d\u5fc5\u8981\u7684 std::string \u8f6c\u6362\u6765\u63d0\u9ad8\u6027\u80fd\u3002(See TotW #1 ) absl::string_view \u6709\u4e00\u4e2a\u66f4\u901a\u7528\u7684\u5144\u5f1f\u53eb\u505a absl::Span \uff0c absl::Span<const T> \u5c31\u662f\u5bf9 std::vector<T> \u7684\u5f15\u7528\uff0c\u5c31\u597d\u6bd4 absl::string_view \u548c std::string \u7684\u5173\u7cfb\u3002 \u5b83\u63d0\u4f9b\u4e86\u53ea\u8bfb\u63a5\u53e3\u6765\u8bbf\u95ee vector \u4e2d\u7684\u5143\u7d20\u3002\u5e76\u4e14\u8fd8\u53ef\u4ee5\u4ece\u975evector\u7c7b\u578b\u8fdb\u884c\u6784\u9020(\u6bd4\u5982\u6570\u7ec4\u3001\u521d\u59cb\u5316\u5217\u8868\u7b49)\uff0c\u800c\u4e14\u4e0d\u4f1a\u5e26\u6765\u5143\u7d20\u62f7\u8d1d\u7684\u5f00\u9500\u3002 const \u53ef\u4ee5\u53bb\u6389\uff0c absl::Span<const T> \u662f\u5bf9\u6570\u7ec4\u7684\u4e00\u4e2a\u53ea\u8bfb\u7684\u89c6\u56fe\uff0c\u5176\u4e2d\u7684\u5143\u7d20\u662f\u4e0d\u53ef\u53d8\u7684\uff0c\u800c absl::Span<T> \u5219\u5141\u8bb8\u975econst\u6765\u8bbf\u95ee\u5143\u7d20\uff0c\u4f46\u8fd9\u9700\u8981\u663e\u793a\u7684\u6784\u9020 absl::Span<T> \u3002","title":"Tip of the Week #93: using absl::Span"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-93/#note-on-stdspan-gslspan","text":"\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u867d\u7136 absl::Span \u5728\u8bbe\u8ba1\u548c\u76ee\u7684\u4e0a\u4e0e std::span \u63d0\u6848\uff08\u4ee5\u53ca\u73b0\u6709\u7684 gsl::span \u53c2\u8003\u5b9e\u73b0\uff09\u7c7b\u4f3c\uff0c\u4f46\u662f absl::Span \u76ee\u524d\u4e0d\u4fdd\u8bc1\u662f\u4efb\u4f55\u6700\u7ec8\u6807\u51c6\u7684\u66ff\u4ee3\u54c1\uff0c \u56e0\u4e3a std::span \u63d0\u6848\u4ecd\u5728\u5f00\u53d1\u4e2d\u5e76\u4e14\u6b63\u5728\u8fdb\u884c\u66f4\u6539\u3002 \u76f8\u53cd\uff0c absl::Span \u65e8\u5728\u4f7f\u4e00\u4e2a\u63a5\u53e3\u5c3d\u53ef\u80fd\u4e0e absl::string_view \u76f8\u4f3c\uff0c\u800c\u4e0d\u662f\u7279\u5b9a\u4e8e\u5b57\u7b26\u4e32\u7684\u529f\u80fd\u3002","title":"Note on std::span / gsl::span"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-93/#as-function-parameters","text":"\u4f7f\u7528 absl::Span \u4f5c\u4e3a\u51fd\u6570\u53c2\u6570\u5176\u4f18\u70b9\u7c7b\u4f3c\u4e8e\u4f7f\u7528 absl::string_view \u3002 \u8c03\u7528\u7740\u53ef\u4ee5\u4f20\u9012vector\u7684\u4e00\u90e8\u5206\u3001\u6216\u8005\u4f20\u9012\u6570\u7ec4\uff0c\u53ea\u8981\u662f\u517c\u5bb9\u7c7b\u6570\u7ec4\u7684\u5bb9\u5668\u5c31\u90fd\u53ef\u4ee5\u3002\u6bd4\u5982: absl::InlinedVector \u3001 absl::FixedArray \u3001 google::protobuf::RepeatedField \u7b49 \u548c absl::string_view \u4e00\u6837\uff0c\u901a\u5e38\u4f7f\u7528 absl::Span \u7684\u503c\u7c7b\u578b\u4f5c\u4e3a\u51fd\u6570\u53c2\u6570\uff0c\u8fd9\u79cd\u4ece\u4e8b\u8981\u6bd4\u901a\u8fc7\u4f20\u9012const\u5f15\u7528\u8981\u66f4\u5feb(\u5728\u5927\u591a\u6570\u5e73\u53f0\u4e0b)\uff0c\u53ef\u4ee5\u4ea7\u751f\u66f4\u5c0f\u7684\u4ee3\u7801\u3002 absl::Span \u7684\u57fa\u672c\u4f8b\u5b50: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 void TakesVector ( const std :: vector < int >& ints ); void TakesSpan ( absl :: Span < const int > ints ); void PassOnlyFirst3Elements () { std :: vector < int > ints = MakeInts (); // We need to create a temporary vector, and incur an allocation and a copy. TakesVector ( std :: vector < int > ( ints . begin (), ints . begin () + 3 )); // No copy or allocations are made when using Span. TakesSpan ( absl :: Span < const int > ( ints . data (), 3 )); } void PassALiteral () { // This creates a temporary std::vector<int>. TakesVector ({ 1 , 2 , 3 }); // Span does not need a temporary allocation and copy, so it is faster. TakesSpan ({ 1 , 2 , 3 }); } void IHaveAnArray () { int values [ 10 ] = ...; // Once more, a temporary std::vector<int> is created. TakesVector ( std :: vector < int > ( std :: begin ( values ), std :: end ( values ))); // Just pass the array. Span detects the size automatically. // No copy was made. TakesSpan ( values ); }","title":"As Function Parameters"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-93/#buffer-overflow-prevention","text":"\u56e0\u4e3a absl::Span \u77e5\u9053\u81ea\u5df1\u5b58\u50a8\u7684\u5143\u7d20\u7684\u957f\u5ea6\uff0c\u56e0\u6b64\u5b83\u7684API\u53ef\u4ee5\u83b7\u5f97\u8d85\u8fc7C\u98ce\u683c\u7684\u6307\u9488/\u957f\u5ea6\u7ec4\u5408\u6240\u5e26\u6765\u7684\u5b89\u5168\u6027\u3002 \u5b89\u5168\u7684 memcpy() \u7684\u4f8b\u5b50 1 2 3 4 5 6 // Bad code void BadUser () { int src [] = { 1 , 2 , 3 }; int dest [ 2 ]; memcpy ( dest , src , ABSL_ARRAYSIZE ( src ) * sizeof ( int )); // oops! Dest overflowed. } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // A simple example, but takes advantage that the sizes of the Spans are known // and prevents the above mistake. template < typename T > bool SaferMemCpy ( absl :: Span < T > dest , absl :: Span < const T > src ) { if ( src . size () > dest . size ()) { return false ; } memcpy ( dest . data (), src . data (), src . size ()); return true ; } void GoodUser () { int src [] = { 1 , 2 , 3 }, dest [ 2 ]; // No overflow! SaferMemCpy ( absl :: MakeSpan ( dest ), absl :: Span < const int > ( src )); }","title":"Buffer Overflow Prevention"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-93/#const-correctness-for-vector-of-pointers","text":"\u4f20\u9012 std::vector<T*> \u7684\u6700\u5927\u95ee\u9898\u5728\u4e8e\u4f60\u6ca1\u529e\u6cd5\u5728\u4e0d\u6539\u53d8\u5bb9\u5668\u7c7b\u578b\u7684\u60c5\u51b5\u4e0b\u8ba9\u6307\u9488\u53d8\u6210const\u3002 \u4efb\u4f55\u51fd\u6570\u4f7f\u7528 const std::vector<T*>& \u4f5c\u4e3a\u53c2\u6570\u867d\u7136\u4e0d\u80fd\u4fee\u6539vector\u672c\u8eab\uff0c\u4f46\u662f\u5374\u53ef\u4ee5\u4fee\u6539vector\u4e2d\u7684\u5143\u7d20\u3002\u8fd9\u5bf9\u4e8e\u8fd4\u56de const std::vector<T*>& \u7684\u573a\u666f\u4e5f\u662f\u76f8\u540c\u7684\u6548\u679c\u3002 \u4f60\u65e0\u6cd5\u963b\u6b62\u8c03\u7528\u8005\u6765\u4fee\u6539 T \u7684\u503c\u3002 \u901a\u7528\u7684\u89e3\u51b3\u65b9\u6848\u5305\u62ec\u5c06vector\u62f7\u8d1d\u3001\u6216\u8005cast\u6210\u6b63\u786e\u7684\u7c7b\u578b\u3002\u8fd9\u4e2a\u89e3\u51b3\u65b9\u6848\u5f88\u6162\uff0c\u5e76\u4e14\u4f1a\u4ea7\u751f\u672a\u5b9a\u4e49\u884c\u4e3a\uff0c\u5e94\u8be5\u8981\u907f\u514d\u3002\u4f7f\u7528 absl::Span \u6765\u66ff\u4ee3\u3002 \u4f5c\u4e3a\u51fd\u6570\u53c2\u6570\u7684\u4f8b\u5b50: \u8003\u8651\u5982\u4e0b Frob \u7684\u53d8\u79cd: 1 2 3 void FrobFastWeak ( const std :: vector < Foo *>& v ); void FrobSlowStrong ( const std :: vector < const Foo *>& v ); void FrobFastStrong ( absl :: Span < const Foo * const > v ); \u4e0a\u8ff0\u53d8\u79cd\u524d\u4e24\u4e2a\u662f\u4e0d\u5b8c\u7f8e\u7684\uff0c\u6700\u540e\u4e00\u4e2a\u662f\u597d\u7684\u3002 1 2 3 4 5 6 // fast and easy to type but not const-safe FrobFastWeak ( v ); // slow and noisy, but safe. FrobSlowStrong ( std :: vector < const Foo *> ( v . begin (), v . end ())); // fast, safe, and clear! FrobFastStrong ( v ); Accessor\u7684\u4f8b\u5b50: 1 2 3 4 5 6 7 8 9 10 11 12 13 class DontDoThis { public : // Don\u2019t modify my Foos, pretty please. const std :: vector < Foo *>& shallow_foos () const { return foos_ ; } private : std :: vector < Foo *> foos_ ; }; void Caller ( const DontDoThis & my_class ) { // Modifies a foo even though my_class is a reference-to-const my_class -> foos ()[ 0 ] -> SomeNonConstOp (); } 1 2 3 4 5 6 7 8 9 10 11 12 13 // Good code class DoThisInstead { public : absl :: Span < const Foo * const > foos () const { return foos_ ; } private : std :: vector < Foo *> foos_ ; }; void Caller ( const DoThisInstead & my_class ) { // This one doesn't compile. // my_class.foos()[0]->SomeNonConstOp(); }","title":"Const Correctness for Vector of Pointers"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-93/#conclusion","text":"\u9002\u5f53\u7684\u4f7f\u7528 absl::Span \uff0c\u53ef\u4ee5\u63d0\u4f9b\u89e3\u8026\uff0c\u4ee5\u53ca\u5e26\u6765 const \u6b63\u786e\u6027\u548c\u6027\u80fd\u7684\u4f18\u70b9\u3002 \u6700\u91cd\u8981\u7684\u662f\u6ce8\u610f\u5230absl::Span\u7684\u884c\u4e3a\u548cabsl::string_view\u5f88\u50cf\uff0c\u90fd\u662f\u5bf9\u6570\u636e\u7684\u5f15\u7528\u3002\u540c\u6837\uff0c absl::string_view \u7684\u4f7f\u7528\u4e0a\u7684\u4e00\u4e9b\u8b66\u544a\uff0c\u4e5f\u9002\u7528\u4e8e absl::Span \u7279\u522b\u662f\u4e00\u4e2a absl::Span \u7684\u751f\u547d\u5468\u671f\u4e0d\u80fd\u8d85\u8fc7\u5b83\u6240\u5f15\u7528\u7684\u6570\u636e\u3002","title":"Conclusion"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-94/","text":"Tip of the Week #94: Callsite Readability and bool Parameters Originally posted as totw/94 on 2015-04-27 By Geoff Romer (gromer@google.com) Revised 2017-10-25 \u201cOf the many forms of false culture, a premature converse with abstractions is perhaps the most likely to prove fatal to the growth of \u2026 vigour of intellect.\u201d \u2014 George Boole. \u5047\u8bbe\u4f60\u9047\u5230\u8fd9\u6837\u7684\u4ee3\u7801: 1 2 3 int main ( int argc , char * argv []) { ParseCommandLineFlags ( & argc , & argv , false ); } \u4f60\u53ef\u4ee5\u544a\u8bc9\u6211\u8fd9\u6bb5\u4ee3\u7801\u662f\u4ec0\u4e48\u610f\u601d\u5417? \u7279\u522b\u662f\u6700\u540e\u4e00\u4e2a\u53c2\u6570\u7684\u542b\u4e49? \u73b0\u5728\u5047\u8bbe\u60a8\u4e4b\u524d\u9047\u5230\u8fc7\u8fd9\u4e2a\u51fd\u6570\uff0c\u5e76\u4e14\u60a8\u77e5\u9053\u6700\u540e\u4e00\u4e2a\u53c2\u6570\u4e0e\u8c03\u7528\u540e\u662f\u5426\u5728argv\u4e2d\u4fdd\u7559\u547d\u4ee4\u884c\u6807\u5fd7\u6709\u5173\u3002\u4f60\u80fd\u8bf4\u51fa\u4ec0\u4e48\u60c5\u51b5\u4e0b\u662ftrue\u7684\uff0c\u4ec0\u4e48\u60c5\u51b5\u4e0b\u662ffalse\u5462\uff1f \u5f53\u7136\u4f60\u4e0d\u77e5\u9053\uff0c\u56e0\u4e3a\u8fd9\u662f\u5047\u8bbe\uff0c\u4f46\u5373\u4f7f\u5728\u771f\u5b9e\u7684\u4ee3\u7801\u4e2d\uff0c\u4e0e\u8bb0\u4f4f\u6bcf\u4e2a\u51fd\u6570\u53c2\u6570\u7684\u542b\u4e49\u76f8\u6bd4\uff0c\u548c\u82b1\u65f6\u95f4\u53bb\u67e5\u627e\u6211\u4eec\u9047\u5230\u7684\u6bcf\u4e2a\u51fd\u6570\u8c03\u7528\u7684\u6587\u7ae0\u76f8\u6bd4\uff0c\u6211\u4eec\u7684\u5927\u8111\u6709\u66f4\u597d\u7684\u4e8b\u60c5\u8981\u505a\uff0c\u6211\u4eec\u5fc5\u987b\u80fd\u591f\u901a\u8fc7\u67e5\u770b\u8c03\u7528\u70b9\u6765\u5bf9\u51fd\u6570\u8c03\u7528\u7684\u542b\u4e49\u505a\u51fa\u76f8\u5f53\u597d\u7684\u731c\u6d4b\u3002 \u7cbe\u5fc3\u9009\u62e9\u7684\u51fd\u6570\u540d\u662f\u4f7f\u51fd\u6570\u8c03\u7528\u53ef\u8bfb\u6027\u7684\u5173\u952e\uff0c\u4f46\u5b83\u4eec\u901a\u5e38\u662f\u4e0d\u591f\u7684\u3002\u6211\u4eec\u901a\u5e38\u8fd8\u9700\u8981\u63d0\u4f9b\u4e00\u4e9b\u5173\u4e8e\u5b83\u4eec\u7684\u542b\u4e49\u7684\u7ebf\u7d22\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u5728\u6b64\u4e4b\u524d\u4ece\u672a\u770b\u5230\u8fc7 string_view \uff0c\u90a3\u4e48\u60a8\u53ef\u80fd\u4e0d\u77e5\u9053\u5982\u4f55\u6784\u9020 absl::string_view s(x, y) \uff0c\u4f46\u662f absl::string_view s(my_str.data(), my_str.size()); \u548c absl::string_view s(\"foo\"); \u66f4\u52a0\u6e05\u6670\u3002bool\u53c2\u6570\u7684\u95ee\u9898\u5728\u4e8e\uff0c\u8c03\u7528\u70b9\u5904\u7684\u53c2\u6570\u901a\u5e38\u662f\u5b57\u9762\u503ctrue\u6216false\uff0c\u5e76\u4e14\u8fd9\u4f7f\u5f97\u8bfb\u8005\u6ca1\u6709\u5173\u4e8e\u53c2\u6570\u542b\u4e49\u7684\u4e0a\u4e0b\u6587\u63d0\u793a\uff0c\u6b63\u5982\u6211\u4eec\u5728 ParseCommandLineFlags\uff08\uff09 \u793a\u4f8b\u4e2d\u770b\u5230\u7684\u90a3\u6837\u3002\u5982\u679c\u5b58\u5728\u591a\u4e2abool\u53c2\u6570\uff0c\u5219\u6b64\u95ee\u9898\u66f4\u52a0\u590d\u6742\uff0c\u56e0\u4e3a\u73b0\u5728\u60a8\u8fd8\u6709\u53e6\u5916\u4e00\u4e2a\u95ee\u9898\uff0c\u5373\u786e\u5b9a\u54ea\u4e2a\u53c2\u6570\u662f\u54ea\u4e2a\u7528\u9014\u3002 \u90a3\u4e48\u6211\u4eec\u5982\u4f55\u4fee\u590d\u8fd9\u4e2a\u4f8b\u5b50\u7684\u4ee3\u7801\u5462\uff1f\u4e00\u4e2a\uff08\u4e0d\u592a\u597d\uff09\u53ef\u80fd\u6027\u662f\u505a\u8fd9\u6837\u7684\u4e8b\u60c5\uff1a 1 2 3 int main ( int argc , char * argv []) { ParseCommandLineFlags ( & argc , & argv , false /* preserve flags */ ); } \u8fd9\u79cd\u65b9\u6cd5\u7684\u7f3a\u70b9\u662f\u663e\u800c\u6613\u89c1\u7684\uff1a\u4e0d\u6e05\u695a\u8be5comment\u662f\u5426\u63cf\u8ff0\u4e86\u53c2\u6570\u7684\u542b\u4e49\u6216\u53c2\u6570\u7684\u6548\u679c\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5b83\u662f\u8bf4\u6211\u4eec\u4fdd\u7559\u4e86flag\uff0c\u8fd8\u662f\u8bf4\u6211\u4eec\u4fdd\u7559\u7684flag\u662ffalse\uff1f\u5373\u4f7fcomment\u8bbe\u6cd5\u660e\u786e\u8bf4\u660e\uff0ccomment\u4ecd\u7136\u5b58\u5728\u4e0e\u4ee3\u7801\u4e0d\u540c\u6b65\u7684\u98ce\u9669\u3002 \u66f4\u597d\u7684\u65b9\u6cd5\u662f\u5728\u6ce8\u91ca\u4e2d\u6307\u5b9a\u53c2\u6570\u7684\u540d\u79f0\uff1a 1 2 3 int main ( int argc , char * argv []) { ParseCommandLineFlags ( & argc , & argv , /*remove_flags=*/ false ); } \u8fd9\u66f4\u52a0\u6e05\u6670\uff0c\u5e76\u4e14\u4e0d\u592a\u53ef\u80fd\u4e0e\u4ee3\u7801\u5931\u53bb\u540c\u6b65\u3002 Clang-tidy \u751a\u81f3\u4f1a\u68c0\u67e5\u6ce8\u91ca\u662f\u5426\u5177\u6709\u6b63\u786e\u7684\u53c2\u6570\u540d\u79f0\u3002\u8f83\u4e0d\u6a21\u7cca\u4f46\u8f83\u957f\u7684\u53d8\u4f53\u662f\u4f7f\u7528\u53d8\u91cf\u6765\u89e3\u91ca\uff1a 1 2 3 4 int main ( int argc , char * argv []) { const bool remove_flags = false ; ParseCommandLineFlags ( & argc , & argv , remove_flags ); } \u4f46\u662f\uff0c\u7f16\u8bd1\u5668\u4e0d\u4f1a\u68c0\u67e5\u89e3\u91ca\u53d8\u91cf\u540d\u79f0\uff0c\u56e0\u6b64\u5b83\u4eec\u53ef\u80fd\u662f\u9519\u8bef\u7684\u3002\u5f53\u60a8\u6709\u591a\u4e2abool\u53c2\u6570\u65f6\uff0c\u8fd9\u662f\u4e00\u4e2a\u7279\u6b8a\u95ee\u9898\uff0c\u53ef\u80fd\u4f1a\u88ab\u8c03\u7528\u8005\u8c03\u6362\u3002 \u6240\u6709\u8fd9\u4e9b\u65b9\u6cd5\u8fd8\u4f9d\u8d56\u4e8e\u7a0b\u5e8f\u5458\u59cb\u7ec8\u8bb0\u4f4f\u6dfb\u52a0\u8fd9\u4e9b\u6ce8\u91ca\u6216\u53d8\u91cf\uff0c\u5e76\u6b63\u786e\u5730\u6267\u884c\u6b64\u64cd\u4f5c\uff08\u5c3d\u7ba1clang-tidy\u5c06\u68c0\u67e5\u53c2\u6570\u540d\u79f0\u6ce8\u91ca\u7684\u6b63\u786e\u6027\uff09\u3002 \u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\uff0c\u6700\u597d\u7684\u89e3\u51b3\u65b9\u6848\u662f\u9996\u5148\u907f\u514d\u4f7f\u7528bool\u53c2\u6570\uff0c\u800c\u662f\u4f7f\u7528\u679a\u4e3e\u3002\u4f8b\u5982\uff0c ParseCommandLineFlags\uff08\uff09 \u53ef\u4ee5\u50cf\u8fd9\u6837\u58f0\u660e\uff1a 1 2 enum ShouldRemoveFlags { kDontRemoveFlags , kRemoveFlags }; void ParseCommandLineFlags ( int * argc , char *** argv , ShouldRemoveFlags remove_flags ); \u6700\u7ec8\u53ef\u80fd\u50cf\u4e0b\u9762\u8fd9\u6837\u8c03\u7528: 1 2 3 int main ( int argc , char * argv []) { ParseCommandLineFlags ( & argc , & argv , kDontRemoveFlags ); } \u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528\u679a\u4e3e\u7c7b\uff0c\u5982 TotW 86 \u4e2d\u6240\u8ff0\uff0c\u4f46\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u60a8\u9700\u8981\u4f7f\u7528\u7a0d\u5fae\u4e0d\u540c\u7684\u547d\u540d\u7ea6\u5b9a\uff0c\u4f8b\u5982 1 2 3 4 5 enum class ShouldRemoveFlags { kNo , kYes }; \u2026 int main ( int argc , char * argv []) { ParseCommandLineFlags ( & argc , & argv , ShouldRemoveFlags :: kNo ); } \u663e\u7136\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u5fc5\u987b\u5728\u5b9a\u4e49\u51fd\u6570\u65f6\u5b9e\u73b0;\u4f60\u4e0d\u80fd\u5728\u8c03\u7528\u65f6\u771f\u6b63\u9009\u62e9\u5b83\uff08\u4f60\u53ef\u4ee5\u4f2a\u9020\u5b83\uff0c\u4f46\u6536\u6548\u751a\u5fae\uff09\u3002\u56e0\u6b64\uff0c\u5f53\u60a8\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u65f6\uff0c\u7279\u522b\u662f\u5982\u679c\u5b83\u5c06\u88ab\u5e7f\u6cdb\u4f7f\u7528\uff0c\u90a3\u4e48\u60a8\u6709\u8d23\u4efb\u4ed4\u7ec6\u8003\u8651\u5982\u4f55\u8c03\u7528\uff0c\u7279\u522b\u662f\u5bf9bool\u53c2\u6570\u6301\u6000\u7591\u6001\u5ea6\u3002","title":"Tip of the Week #94: Callsite Readability and bool Parameters"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-94/#tip-of-the-week-94-callsite-readability-and-bool-parameters","text":"Originally posted as totw/94 on 2015-04-27 By Geoff Romer (gromer@google.com) Revised 2017-10-25 \u201cOf the many forms of false culture, a premature converse with abstractions is perhaps the most likely to prove fatal to the growth of \u2026 vigour of intellect.\u201d \u2014 George Boole. \u5047\u8bbe\u4f60\u9047\u5230\u8fd9\u6837\u7684\u4ee3\u7801: 1 2 3 int main ( int argc , char * argv []) { ParseCommandLineFlags ( & argc , & argv , false ); } \u4f60\u53ef\u4ee5\u544a\u8bc9\u6211\u8fd9\u6bb5\u4ee3\u7801\u662f\u4ec0\u4e48\u610f\u601d\u5417? \u7279\u522b\u662f\u6700\u540e\u4e00\u4e2a\u53c2\u6570\u7684\u542b\u4e49? \u73b0\u5728\u5047\u8bbe\u60a8\u4e4b\u524d\u9047\u5230\u8fc7\u8fd9\u4e2a\u51fd\u6570\uff0c\u5e76\u4e14\u60a8\u77e5\u9053\u6700\u540e\u4e00\u4e2a\u53c2\u6570\u4e0e\u8c03\u7528\u540e\u662f\u5426\u5728argv\u4e2d\u4fdd\u7559\u547d\u4ee4\u884c\u6807\u5fd7\u6709\u5173\u3002\u4f60\u80fd\u8bf4\u51fa\u4ec0\u4e48\u60c5\u51b5\u4e0b\u662ftrue\u7684\uff0c\u4ec0\u4e48\u60c5\u51b5\u4e0b\u662ffalse\u5462\uff1f \u5f53\u7136\u4f60\u4e0d\u77e5\u9053\uff0c\u56e0\u4e3a\u8fd9\u662f\u5047\u8bbe\uff0c\u4f46\u5373\u4f7f\u5728\u771f\u5b9e\u7684\u4ee3\u7801\u4e2d\uff0c\u4e0e\u8bb0\u4f4f\u6bcf\u4e2a\u51fd\u6570\u53c2\u6570\u7684\u542b\u4e49\u76f8\u6bd4\uff0c\u548c\u82b1\u65f6\u95f4\u53bb\u67e5\u627e\u6211\u4eec\u9047\u5230\u7684\u6bcf\u4e2a\u51fd\u6570\u8c03\u7528\u7684\u6587\u7ae0\u76f8\u6bd4\uff0c\u6211\u4eec\u7684\u5927\u8111\u6709\u66f4\u597d\u7684\u4e8b\u60c5\u8981\u505a\uff0c\u6211\u4eec\u5fc5\u987b\u80fd\u591f\u901a\u8fc7\u67e5\u770b\u8c03\u7528\u70b9\u6765\u5bf9\u51fd\u6570\u8c03\u7528\u7684\u542b\u4e49\u505a\u51fa\u76f8\u5f53\u597d\u7684\u731c\u6d4b\u3002 \u7cbe\u5fc3\u9009\u62e9\u7684\u51fd\u6570\u540d\u662f\u4f7f\u51fd\u6570\u8c03\u7528\u53ef\u8bfb\u6027\u7684\u5173\u952e\uff0c\u4f46\u5b83\u4eec\u901a\u5e38\u662f\u4e0d\u591f\u7684\u3002\u6211\u4eec\u901a\u5e38\u8fd8\u9700\u8981\u63d0\u4f9b\u4e00\u4e9b\u5173\u4e8e\u5b83\u4eec\u7684\u542b\u4e49\u7684\u7ebf\u7d22\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u5728\u6b64\u4e4b\u524d\u4ece\u672a\u770b\u5230\u8fc7 string_view \uff0c\u90a3\u4e48\u60a8\u53ef\u80fd\u4e0d\u77e5\u9053\u5982\u4f55\u6784\u9020 absl::string_view s(x, y) \uff0c\u4f46\u662f absl::string_view s(my_str.data(), my_str.size()); \u548c absl::string_view s(\"foo\"); \u66f4\u52a0\u6e05\u6670\u3002bool\u53c2\u6570\u7684\u95ee\u9898\u5728\u4e8e\uff0c\u8c03\u7528\u70b9\u5904\u7684\u53c2\u6570\u901a\u5e38\u662f\u5b57\u9762\u503ctrue\u6216false\uff0c\u5e76\u4e14\u8fd9\u4f7f\u5f97\u8bfb\u8005\u6ca1\u6709\u5173\u4e8e\u53c2\u6570\u542b\u4e49\u7684\u4e0a\u4e0b\u6587\u63d0\u793a\uff0c\u6b63\u5982\u6211\u4eec\u5728 ParseCommandLineFlags\uff08\uff09 \u793a\u4f8b\u4e2d\u770b\u5230\u7684\u90a3\u6837\u3002\u5982\u679c\u5b58\u5728\u591a\u4e2abool\u53c2\u6570\uff0c\u5219\u6b64\u95ee\u9898\u66f4\u52a0\u590d\u6742\uff0c\u56e0\u4e3a\u73b0\u5728\u60a8\u8fd8\u6709\u53e6\u5916\u4e00\u4e2a\u95ee\u9898\uff0c\u5373\u786e\u5b9a\u54ea\u4e2a\u53c2\u6570\u662f\u54ea\u4e2a\u7528\u9014\u3002 \u90a3\u4e48\u6211\u4eec\u5982\u4f55\u4fee\u590d\u8fd9\u4e2a\u4f8b\u5b50\u7684\u4ee3\u7801\u5462\uff1f\u4e00\u4e2a\uff08\u4e0d\u592a\u597d\uff09\u53ef\u80fd\u6027\u662f\u505a\u8fd9\u6837\u7684\u4e8b\u60c5\uff1a 1 2 3 int main ( int argc , char * argv []) { ParseCommandLineFlags ( & argc , & argv , false /* preserve flags */ ); } \u8fd9\u79cd\u65b9\u6cd5\u7684\u7f3a\u70b9\u662f\u663e\u800c\u6613\u89c1\u7684\uff1a\u4e0d\u6e05\u695a\u8be5comment\u662f\u5426\u63cf\u8ff0\u4e86\u53c2\u6570\u7684\u542b\u4e49\u6216\u53c2\u6570\u7684\u6548\u679c\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5b83\u662f\u8bf4\u6211\u4eec\u4fdd\u7559\u4e86flag\uff0c\u8fd8\u662f\u8bf4\u6211\u4eec\u4fdd\u7559\u7684flag\u662ffalse\uff1f\u5373\u4f7fcomment\u8bbe\u6cd5\u660e\u786e\u8bf4\u660e\uff0ccomment\u4ecd\u7136\u5b58\u5728\u4e0e\u4ee3\u7801\u4e0d\u540c\u6b65\u7684\u98ce\u9669\u3002 \u66f4\u597d\u7684\u65b9\u6cd5\u662f\u5728\u6ce8\u91ca\u4e2d\u6307\u5b9a\u53c2\u6570\u7684\u540d\u79f0\uff1a 1 2 3 int main ( int argc , char * argv []) { ParseCommandLineFlags ( & argc , & argv , /*remove_flags=*/ false ); } \u8fd9\u66f4\u52a0\u6e05\u6670\uff0c\u5e76\u4e14\u4e0d\u592a\u53ef\u80fd\u4e0e\u4ee3\u7801\u5931\u53bb\u540c\u6b65\u3002 Clang-tidy \u751a\u81f3\u4f1a\u68c0\u67e5\u6ce8\u91ca\u662f\u5426\u5177\u6709\u6b63\u786e\u7684\u53c2\u6570\u540d\u79f0\u3002\u8f83\u4e0d\u6a21\u7cca\u4f46\u8f83\u957f\u7684\u53d8\u4f53\u662f\u4f7f\u7528\u53d8\u91cf\u6765\u89e3\u91ca\uff1a 1 2 3 4 int main ( int argc , char * argv []) { const bool remove_flags = false ; ParseCommandLineFlags ( & argc , & argv , remove_flags ); } \u4f46\u662f\uff0c\u7f16\u8bd1\u5668\u4e0d\u4f1a\u68c0\u67e5\u89e3\u91ca\u53d8\u91cf\u540d\u79f0\uff0c\u56e0\u6b64\u5b83\u4eec\u53ef\u80fd\u662f\u9519\u8bef\u7684\u3002\u5f53\u60a8\u6709\u591a\u4e2abool\u53c2\u6570\u65f6\uff0c\u8fd9\u662f\u4e00\u4e2a\u7279\u6b8a\u95ee\u9898\uff0c\u53ef\u80fd\u4f1a\u88ab\u8c03\u7528\u8005\u8c03\u6362\u3002 \u6240\u6709\u8fd9\u4e9b\u65b9\u6cd5\u8fd8\u4f9d\u8d56\u4e8e\u7a0b\u5e8f\u5458\u59cb\u7ec8\u8bb0\u4f4f\u6dfb\u52a0\u8fd9\u4e9b\u6ce8\u91ca\u6216\u53d8\u91cf\uff0c\u5e76\u6b63\u786e\u5730\u6267\u884c\u6b64\u64cd\u4f5c\uff08\u5c3d\u7ba1clang-tidy\u5c06\u68c0\u67e5\u53c2\u6570\u540d\u79f0\u6ce8\u91ca\u7684\u6b63\u786e\u6027\uff09\u3002 \u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\uff0c\u6700\u597d\u7684\u89e3\u51b3\u65b9\u6848\u662f\u9996\u5148\u907f\u514d\u4f7f\u7528bool\u53c2\u6570\uff0c\u800c\u662f\u4f7f\u7528\u679a\u4e3e\u3002\u4f8b\u5982\uff0c ParseCommandLineFlags\uff08\uff09 \u53ef\u4ee5\u50cf\u8fd9\u6837\u58f0\u660e\uff1a 1 2 enum ShouldRemoveFlags { kDontRemoveFlags , kRemoveFlags }; void ParseCommandLineFlags ( int * argc , char *** argv , ShouldRemoveFlags remove_flags ); \u6700\u7ec8\u53ef\u80fd\u50cf\u4e0b\u9762\u8fd9\u6837\u8c03\u7528: 1 2 3 int main ( int argc , char * argv []) { ParseCommandLineFlags ( & argc , & argv , kDontRemoveFlags ); } \u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528\u679a\u4e3e\u7c7b\uff0c\u5982 TotW 86 \u4e2d\u6240\u8ff0\uff0c\u4f46\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u60a8\u9700\u8981\u4f7f\u7528\u7a0d\u5fae\u4e0d\u540c\u7684\u547d\u540d\u7ea6\u5b9a\uff0c\u4f8b\u5982 1 2 3 4 5 enum class ShouldRemoveFlags { kNo , kYes }; \u2026 int main ( int argc , char * argv []) { ParseCommandLineFlags ( & argc , & argv , ShouldRemoveFlags :: kNo ); } \u663e\u7136\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u5fc5\u987b\u5728\u5b9a\u4e49\u51fd\u6570\u65f6\u5b9e\u73b0;\u4f60\u4e0d\u80fd\u5728\u8c03\u7528\u65f6\u771f\u6b63\u9009\u62e9\u5b83\uff08\u4f60\u53ef\u4ee5\u4f2a\u9020\u5b83\uff0c\u4f46\u6536\u6548\u751a\u5fae\uff09\u3002\u56e0\u6b64\uff0c\u5f53\u60a8\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u65f6\uff0c\u7279\u522b\u662f\u5982\u679c\u5b83\u5c06\u88ab\u5e7f\u6cdb\u4f7f\u7528\uff0c\u90a3\u4e48\u60a8\u6709\u8d23\u4efb\u4ed4\u7ec6\u8003\u8651\u5982\u4f55\u8c03\u7528\uff0c\u7279\u522b\u662f\u5bf9bool\u53c2\u6570\u6301\u6000\u7591\u6001\u5ea6\u3002","title":"Tip of the Week #94: Callsite Readability and bool Parameters"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-99/","text":"Tip of the Week #99: Nonmember Interface Etiquette Originally posted as totw/99 on 2015-06-24 Revised 2017-10-10 C++ \u7c7b\u7684\u63a5\u53e3\u4e0d\u9650\u4e8e\u5176\u6210\u5458\u6216\u5176\u5b9a\u4e49\u3002\u5728\u8bc4\u4f30API\u65f6\uff0c\u6211\u4eec\u5fc5\u987b\u8003\u8651\u9664\u4e86\u7c7b\u4e3b\u4f53\u5916\u7684\u5176\u4ed6\u5b9a\u4e49\uff0c\u8fd9\u4e9b\u5b9a\u4e49\u4e0e\u5176\u516c\u5171\u6210\u5458\u4e00\u6837\uff0c\u53ef\u80fd\u662f\u5176\u63a5\u53e3\u7684\u4e00\u90e8\u5206\u3002 \u8fd9\u4e9b\u5916\u90e8\u63a5\u53e3\u5305\u62echasher\u548ctraits\u7684\u6a21\u7248\u7279\u5316\u3001\u975e\u6210\u5458\u64cd\u4f5c\u7b26(\u4f8b\u5982\u8f93\u51fa\u548c\u5173\u7cfb\u8fd0\u7b97\u7b26\u7b49)\uff0c\u8fd8\u6709\u4e00\u4e9b\u5176\u4ed6\u4e00\u4e9b\u8bbe\u8ba1\u7528\u4e8e\u501f\u52a9ADL(argument-dependent lookup)\u7684\u89c4\u8303\u6210\u5458\u51fd\u6570\u3002\u5176\u4e2d\u6700\u503c\u5f97\u5173\u6ce8\u7684\u662f swap() \u4e0b\u9762\u4f8b\u4e3e\u4e86\u4e00\u4e9b\u793a\u4f8b\u7c7b: space::Key 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 namespace space { class Key { ... }; bool operator == ( const Key & a , const Key & b ); bool operator < ( const Key & a , const Key & b ); void swap ( Key & a , Key & b ); // standard streaming std :: ostream & operator << ( std :: ostream & os , const Key & x ); // gTest printing void PrintTo ( const Key & x , std :: ostream * os ); // new-style flag extension: bool ParseFlag ( const string & text , Key * dst , string * err ); string UnparseFlag ( const Key & v ); } // namespace space HASH_NAMESPACE_BEGIN template <> struct hash < space :: Key > { size_t operator ()( const space :: Key & x ) const ; }; HASH_NAMESPACE_END \u9519\u8bef\u5730\u8fdb\u884c\u8fd9\u7c7b\u6269\u5c55\u4f1a\u5e26\u6765\u4e00\u4e9b\u91cd\u8981\u7684\u98ce\u9669\uff0c\u56e0\u6b64\u672c\u6587\u5c06\u5c1d\u8bd5\u63d0\u4f9b\u4e00\u4e9b\u6307\u5bfc\u3002 The Proper Namespace \u901a\u5e38\uff0c\u8bbe\u8ba1\u4e3a\u975e\u6210\u5458\u51fd\u6570\u7684\u63a5\u53e3\u53ef\u4ee5\u901a\u8fc7ADL(\u4f9d\u8d56\u4e8e\u53c2\u6570\u6240\u5728namespace\u6765\u67e5\u627e)\u6765\u627e\u5230\uff08ADL\uff0c\u8bf7\u53c2\u89c1 TotW 49 \uff09\u5176\u5b9a\u4e49\u3002\u8fd0\u7b97\u64cd\u4f5c\u7b26\u51fd\u6570\u548c\u7c7b\u4f3c\u64cd\u4f5c\u7b26\u7684\u4e00\u4e9b\u51fd\u6570(\u6700\u503c\u5f97\u6ce8\u610f\u7684\u662fswap) \u8fd9\u4e9b\u90fd\u662f\u8bbe\u8ba1\u6210\u901a\u8fc7ADL\u6765\u67e5\u627e\u7684\u3002\u800cADL\u5de5\u4f5c\u7684\u524d\u63d0\u662f\u8fd9\u4e9b\u51fd\u6570\u7684\u5b9a\u4e49\u8981\u548c\u5176\u8981\u64cd\u4f5c\u7684\u81ea\u5b9a\u4e49\u7c7b\u578b\u5728\u4e00\u4e2anamespace\u4e2d\u3002\u76f8\u5173\u8054\u7684namespace\u5305\u62ec\u5176\u57fa\u7c7b\u548c\u7c7b\u6a21\u677f\u7684\u53c2\u6570\u3002\u4e00\u4e2a\u5e38\u89c1\u7684\u9519\u8bef\u662f\u628a\u8fd9\u4e9b\u51fd\u6570\u653e\u5728\u5168\u5c40\u547d\u540d\u7a7a\u95f4\u3002\u4e3a\u4e86\u8bf4\u660e\u8fd9\u4e2a\u95ee\u9898\uff0c\u8003\u8651\u4e0b\u9762\u7684\u4ee3\u7801\u4e2d\u7684 good(x) \u548c bad(x) \u51fd\u6570\u7684\u8c03\u7528\u662f\u6b63\u786e\u7684\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 namespace library { struct Letter {}; void good ( Letter ); } // namespace library // bad is improperly placed in global namespace void bad ( library :: Letter ); namespace client { void good (); void bad (); void test ( const library :: Letter & x ) { good ( x ); // ok: 'library::good' is found by ADL. bad ( x ); // oops: '::bad' is hidden by 'client::bad'. } } // namespace client \u6ce8\u610f library::good() \u548c ::bad() \u4e4b\u95f4\u7684\u533a\u522b\u3002 test() \u51fd\u6570\u4f9d\u8d56\u4e8e\u5305\u542b\u8c03\u7528\u70b9\u6240\u5728\u7684namespace\u4e2d\u7f3a\u5c11\u4efb\u4f55\u540d\u4e3a bad() \u7684\u51fd\u6570\uff0c client::bad \u5c06 ::bad \u9690\u85cf\u4e86\u3002 \u4e0e\u6b64\u540c\u65f6\uff0c\u65e0\u8bba test() \u51fd\u6570\u53ca\u5176\u8303\u56f4\u4e2d\u5b58\u5728\u4ec0\u4e48\u5176\u4ed6\u5143\u7d20\uff0c\u90fd\u53ef\u4ee5\u627e\u5230\u6b63\u786e good() \u51fd\u6570\u3002","title":"Tip of the Week #99: Nonmember Interface Etiquette"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-99/#tip-of-the-week-99-nonmember-interface-etiquette","text":"Originally posted as totw/99 on 2015-06-24 Revised 2017-10-10 C++ \u7c7b\u7684\u63a5\u53e3\u4e0d\u9650\u4e8e\u5176\u6210\u5458\u6216\u5176\u5b9a\u4e49\u3002\u5728\u8bc4\u4f30API\u65f6\uff0c\u6211\u4eec\u5fc5\u987b\u8003\u8651\u9664\u4e86\u7c7b\u4e3b\u4f53\u5916\u7684\u5176\u4ed6\u5b9a\u4e49\uff0c\u8fd9\u4e9b\u5b9a\u4e49\u4e0e\u5176\u516c\u5171\u6210\u5458\u4e00\u6837\uff0c\u53ef\u80fd\u662f\u5176\u63a5\u53e3\u7684\u4e00\u90e8\u5206\u3002 \u8fd9\u4e9b\u5916\u90e8\u63a5\u53e3\u5305\u62echasher\u548ctraits\u7684\u6a21\u7248\u7279\u5316\u3001\u975e\u6210\u5458\u64cd\u4f5c\u7b26(\u4f8b\u5982\u8f93\u51fa\u548c\u5173\u7cfb\u8fd0\u7b97\u7b26\u7b49)\uff0c\u8fd8\u6709\u4e00\u4e9b\u5176\u4ed6\u4e00\u4e9b\u8bbe\u8ba1\u7528\u4e8e\u501f\u52a9ADL(argument-dependent lookup)\u7684\u89c4\u8303\u6210\u5458\u51fd\u6570\u3002\u5176\u4e2d\u6700\u503c\u5f97\u5173\u6ce8\u7684\u662f swap() \u4e0b\u9762\u4f8b\u4e3e\u4e86\u4e00\u4e9b\u793a\u4f8b\u7c7b: space::Key 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 namespace space { class Key { ... }; bool operator == ( const Key & a , const Key & b ); bool operator < ( const Key & a , const Key & b ); void swap ( Key & a , Key & b ); // standard streaming std :: ostream & operator << ( std :: ostream & os , const Key & x ); // gTest printing void PrintTo ( const Key & x , std :: ostream * os ); // new-style flag extension: bool ParseFlag ( const string & text , Key * dst , string * err ); string UnparseFlag ( const Key & v ); } // namespace space HASH_NAMESPACE_BEGIN template <> struct hash < space :: Key > { size_t operator ()( const space :: Key & x ) const ; }; HASH_NAMESPACE_END \u9519\u8bef\u5730\u8fdb\u884c\u8fd9\u7c7b\u6269\u5c55\u4f1a\u5e26\u6765\u4e00\u4e9b\u91cd\u8981\u7684\u98ce\u9669\uff0c\u56e0\u6b64\u672c\u6587\u5c06\u5c1d\u8bd5\u63d0\u4f9b\u4e00\u4e9b\u6307\u5bfc\u3002","title":"Tip of the Week #99: Nonmember Interface Etiquette"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/tips/tips-99/#the-proper-namespace","text":"\u901a\u5e38\uff0c\u8bbe\u8ba1\u4e3a\u975e\u6210\u5458\u51fd\u6570\u7684\u63a5\u53e3\u53ef\u4ee5\u901a\u8fc7ADL(\u4f9d\u8d56\u4e8e\u53c2\u6570\u6240\u5728namespace\u6765\u67e5\u627e)\u6765\u627e\u5230\uff08ADL\uff0c\u8bf7\u53c2\u89c1 TotW 49 \uff09\u5176\u5b9a\u4e49\u3002\u8fd0\u7b97\u64cd\u4f5c\u7b26\u51fd\u6570\u548c\u7c7b\u4f3c\u64cd\u4f5c\u7b26\u7684\u4e00\u4e9b\u51fd\u6570(\u6700\u503c\u5f97\u6ce8\u610f\u7684\u662fswap) \u8fd9\u4e9b\u90fd\u662f\u8bbe\u8ba1\u6210\u901a\u8fc7ADL\u6765\u67e5\u627e\u7684\u3002\u800cADL\u5de5\u4f5c\u7684\u524d\u63d0\u662f\u8fd9\u4e9b\u51fd\u6570\u7684\u5b9a\u4e49\u8981\u548c\u5176\u8981\u64cd\u4f5c\u7684\u81ea\u5b9a\u4e49\u7c7b\u578b\u5728\u4e00\u4e2anamespace\u4e2d\u3002\u76f8\u5173\u8054\u7684namespace\u5305\u62ec\u5176\u57fa\u7c7b\u548c\u7c7b\u6a21\u677f\u7684\u53c2\u6570\u3002\u4e00\u4e2a\u5e38\u89c1\u7684\u9519\u8bef\u662f\u628a\u8fd9\u4e9b\u51fd\u6570\u653e\u5728\u5168\u5c40\u547d\u540d\u7a7a\u95f4\u3002\u4e3a\u4e86\u8bf4\u660e\u8fd9\u4e2a\u95ee\u9898\uff0c\u8003\u8651\u4e0b\u9762\u7684\u4ee3\u7801\u4e2d\u7684 good(x) \u548c bad(x) \u51fd\u6570\u7684\u8c03\u7528\u662f\u6b63\u786e\u7684\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 namespace library { struct Letter {}; void good ( Letter ); } // namespace library // bad is improperly placed in global namespace void bad ( library :: Letter ); namespace client { void good (); void bad (); void test ( const library :: Letter & x ) { good ( x ); // ok: 'library::good' is found by ADL. bad ( x ); // oops: '::bad' is hidden by 'client::bad'. } } // namespace client \u6ce8\u610f library::good() \u548c ::bad() \u4e4b\u95f4\u7684\u533a\u522b\u3002 test() \u51fd\u6570\u4f9d\u8d56\u4e8e\u5305\u542b\u8c03\u7528\u70b9\u6240\u5728\u7684namespace\u4e2d\u7f3a\u5c11\u4efb\u4f55\u540d\u4e3a bad() \u7684\u51fd\u6570\uff0c client::bad \u5c06 ::bad \u9690\u85cf\u4e86\u3002 \u4e0e\u6b64\u540c\u65f6\uff0c\u65e0\u8bba test() \u51fd\u6570\u53ca\u5176\u8303\u56f4\u4e2d\u5b58\u5728\u4ec0\u4e48\u5176\u4ed6\u5143\u7d20\uff0c\u90fd\u53ef\u4ee5\u627e\u5230\u6b63\u786e good() \u51fd\u6570\u3002","title":"The Proper Namespace"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/golang/","text":"Basic golang\u7684\u7c7b\u578b\u8f6c\u6362\u53ef\u4ee5\u662f\u7a84\u5316\u7684\uff0c\u4f8b\u5982\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50: 1 2 var x int64 = 64000 var y int16 = int16(x) GOTRACEBACK=crash go\u7a0b\u5e8f\u5728\u5954\u6e83\u7684\u65f6\u5019\u4ea7\u751fcore dump\u6587\u4ef6 go build -gcflags=all=\"-N -l\" \u5173\u95ed\u7f16\u8bd1\u5668\u4f18\u5316 go build -gcflags=\"-dwarflocationlists=true\" The flag causes the compiler to add location lists that helps debuggers work with optimized binaries. \u65e0\u8bba\u666e\u901a\u7684for\u5faa\u73af\u8fd8\u662frange\u8fed\u4ee3\uff0c\u5176\u5b9a\u4e49\u7684\u5c40\u90e8\u53d8\u91cf\u90fd\u4f1a\u88ab\u91cd\u590d\u4f7f\u7528 1 2 3 4 5 6 7 8 9 10 11 12 13 14 package main func main() { data := [3]string{\"a\", \"b\", \"c\"} for i, s := range data { println(&i, &s) } } tianqianzyfdeMacBook-Pro-2:go-study tianqian.zyf$ ./go-study 0xc000042700 0xc000042718 0xc000042700 0xc000042718 0xc000042700 0xc000042718 \u8fd9\u4f1a\u5bf9\u95ed\u5305\u4ea7\u751f\u5f71\u54cd\uff0c\u5982\u679c\u95ed\u5305\u5f15\u7528\u4e0a\u8ff0\u7684\u5c40\u90e8\u53d8\u91cf\uff0c\u4f1a\u5bfc\u81f4\u5f15\u7528\u7684\u5185\u5bb9\u662f\u8fed\u4ee3\u7ed3\u675f\u540e\u7684\u5185\u5bb9\u3002 range\u4f1a\u590d\u5236\u76ee\u6807\u6570\u636e\uff0c\u53d7\u76f4\u63a5\u5f71\u54cd\u7684\u662f\u6570\u7ec4\uff0c\u53ef\u6539\u7528\u6570\u7ec4\u6307\u9488\u6216\u5207\u7247\u7c7b\u578b defer\u8bed\u53e5\u7684\u4e4b\u524d\u662f\u5728return\u8bed\u53e5\u4e4b\u540e\u6267\u884c\u7684\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 package main func test () ( z int ) { defer func () { println ( \"defer:\" , z ) z += 100 }() return 100 } func main () { println ( \"test:\" , test ()) } tianqianzyfdeMacBook - Pro - 2 : go - study tianqian . zyf $ . / go - study defer : 100 test : 200 \u5b57\u5178\u5207\u7247\u90fd\u662f\u5f15\u7528\u7c7b\u578b\uff0c\u62f7\u8d1d\u5f00\u9500\u4f4e \u7f16\u8bd1\u5668\u4f1a\u8fdb\u884c\u9003\u9038\u5206\u6790\u5c06\u6808\u4e0a\u53d8\u91cf\u5206\u914d\u5728\u5806\u4e0a go build -gcflags \"-N -l -m\" -N(\u7981\u7528\u4ee3\u7801\u4f18\u5316) \u7981\u7528\u51fd\u6570\u5185\u8054(-l)\uff0c\u8f93\u51fa\u4f18\u5316\u4fe1\u606f(-m) []byte\u548cstring\u7684\u5934\u90e8\u7ed3\u6784\u76f8\u540c\u53ef\u4ee5\u901aunsafe.Pointer\u6765\u4e92\u76f8\u8f6c\u6362 \u5b57\u7b26\u4e32\u662f\u4e0d\u53ef\u53d8\uff0c\u5bf9\u5176\u4fee\u6539\u9700\u8981\u5c06\u5176\u8f6c\u6362\u4e3a []byte \u6216\u8005\u662f []rune \uff0c\u8f6c\u6362\u7684\u8fc7\u7a0b\u662f\u9700\u8981\u91cd\u65b0\u5206\u914d\u5185\u5b58\u548c\u590d\u5236\u7684 golang\u5728\u7f16\u8bd1\u5668\u5c42\u9762\u4f1a\u5bf9[]byte\u8f6c\u6362\u4e3astring\u8fdb\u884cmap\u67e5\u8be2\u7684\u65f6\u5019\u8fdb\u884c\u4f18\u5316\uff0c\u907f\u514dstring\u62f7\u8d1d golang\u5728\u7f16\u8bd1\u5668\u5c42\u9762\u4f1a\u5bf9string\u8f6c\u6362[]byte\uff0c\u8fdb\u884cfor range\u8fed\u4ee3\u65f6\uff0c\u76f4\u63a5\u53d6\u5b57\u8282\u8d4b\u503c\u7ed9\u5c40\u90e8\u53d8\u91cf string.Join \u4e00\u6b21\u6027\u5206\u914d\u5185\u5b58\u7b49\u540c\u4e8ebytes.Buffer\u5148Grow\u4e8b\u5148\u51c6\u5907\u8db3\u591f\u7684\u5185\u5b58 slice\u7c7b\u578b\u4e0d\u652f\u6301\u6bd4\u8f83\u64cd\u4f5c\uff0c\u4ec5\u80fd\u5224\u65ad\u662f\u5426\u4e3anil\uff0c slice\u7684len\u3001cap\u3001\u5e95\u5c42\u6570\u7ec4\u7684\u957f\u5ea6\uff0c\u5f53\u8d85\u8fc7cap\u7684\u65f6\u5019\u4f1a\u6309\u7167cap\u8fdb\u884c2\u500d\u7684\u6269\u5bb9(\u5e76\u975e\u603b\u662f2\u500d\uff0c\u5bf9\u4e8e\u8f83\u5927\u7684slice\u5219\u662f1/4) \u4e0d\u80fd\u5bf9nil\u5b57\u5178\u8fdb\u884c\u5199\u64cd\u4f5c\uff0c\u4f46\u662f\u5374\u80fd\u8bfb \u5b57\u5178\u5bf9\u8c61\u672c\u8eab\u5c31\u662f\u6307\u9488\u5305\u88c5\u7684\uff0c\u4f20\u53c2\u7684\u65f6\u5019\u65e0\u987b\u518d\u6b21\u53d6\u5730\u5740 \u5bf9\u4e8e\u6d77\u91cf\u5c0f\u5bf9\u8c61\u5e94\u8be5\u76f4\u63a5\u7528\u503c\u62f7\u8d1d\uff0c\u800c\u975e\u6307\u9488\uff0c\u8fd9\u6709\u52a9\u4e8e\u51cf\u5c11\u9700\u8981\u626b\u63cf\u7684\u5bf9\u8c61\u6570\u91cf\uff0c\u5927\u5e45\u7f29\u77ed\u5783\u573e\u56de\u6536\u65f6\u95f4 \u7a7a\u7ed3\u6784\u90fd\u6307\u5411runtime.zerobase \u4e0d\u80fd\u5c06\u57fa\u7840\u7c7b\u578b\u548c\u5176\u5bf9\u5e94\u7684\u6307\u9488\u7c7b\u578b\u540c\u65f6\u533f\u540d\u5d4c\u5165\u5230\u7ed3\u6784\u4e2d(\u672c\u8d28\u4e0a\u4e24\u8005\u7684\u9690\u5f0f\u540d\u5b57\u76f8\u540c) \u5982\u4f55\u9009\u62e9\u65b9\u6cd5\u7684receiver\u7684\u7c7b\u578b \u8981\u4fee\u6539\u5b9e\u4f8b\u7684\u72b6\u6001\u7528 *T \u65e0\u987b\u4fee\u6539\u72b6\u6001\u7684\u5c0f\u5bf9\u8c61\u6216\u56fa\u5b9a\u503c\uff0c\u5efa\u8bae\u7528 T \u5927\u5bf9\u8c61\u5efa\u8bae\u7528 *T \uff0c\u4ee5\u51cf\u5c11\u590d\u5236\u6210\u672c \u5f15\u7528\u7c7b\u578b\u3001\u5b57\u7b26\u4e32\u3001\u51fd\u6570\u7b49\u6307\u9488\u5305\u88c5\u5bf9\u8c61\uff0c\u76f4\u63a5\u7528T \u82e5\u5305\u542b\u4e86 Mutex \u7b49\u540c\u6b65\u5b57\u6bb5\uff0c\u7528 *T \uff0c\u907f\u514d\u56e0\u590d\u5236\u6784\u9020\u6210\u9501\u64cd\u4f5c\u800c\u65e0\u6548 \u5176\u4ed6\u65e0\u6cd5\u786e\u5b9a\u7684\u60c5\u51b5\u90fd\u7528 *T \u65b9\u6cd5\u96c6\uff0c\u901a\u8fc7reflect.TypeOf\u62ff\u5230\u53cd\u5c04\u7684\u5bf9\u8c61\uff0c\u7136\u540e\u901a\u8fc7NumMethod\u53ef\u4ee5\u5f97\u5230\u65b9\u6cd5\u96c6\u7684\u6570\u91cf\uff0c\u901a\u8fc7Method\u62ff\u5230\u65b9\u6cd5\u5bf9\u8c61\uff0c\u901a\u8fc7\u65b9\u6cd5\u5bf9\u8c61\u7684 Name\u65b9\u6cd5\u62ff\u5230\u65b9\u6cd5\u540d\uff0c\u901a\u8fc7Type\u65b9\u6cd5\u62ff\u5230\u65b9\u6cd5\u7684\u58f0\u660e \u7c7b\u578bT\u7684\u65b9\u6cd5\u96c6\u5305\u542b\u4e86\u6240\u6709receiver T\u7684\u65b9\u6cd5 \u7c7b\u578b *T \u65b9\u6cd5\u96c6\u5305\u542b\u4e86\u6240\u6709 receiver T + *T \u65b9\u6cd5 \u533f\u540d\u5d4c\u5165S\uff0cT\u65b9\u6cd5\u96c6\u5305\u542b\u4e86\u6240\u6709receiver S\u7684\u65b9\u6cd5 \u533f\u540d\u5d4c\u5165 *S \uff0cT\u65b9\u6cd5\u96c6\u5305\u542b\u4e86\u6240\u6709 receiver S + *S \u65b9\u6cd5 \u533f\u540d\u5d4c\u5165 *S \u6216S, *T \u65b9\u6cd5\u96c6\u5305\u542b\u4e86\u6240\u6709 receiver S + *S \u7684\u65b9\u6cd5 Method Expression \u548cMethod Value \u63a5\u53e3\u901a\u5e38\u4ee5er\u4f5c\u4e3a\u540e\u7f00\u540d \u8d85\u96c6\u63a5\u53e3\u53ef\u4ee5\u9690\u5f0f\u8f6c\u6362\u4e3a\u5b50\u96c6 \u5c06\u5bf9\u8c61\u8d4b\u503c\u7ed9\u63a5\u53e3\u7684\u53d8\u91cf\u65f6\uff0c\u4f1a\u590d\u5236\u8be5\u5bf9\u8c61\uff0c\u89e3\u51b3\u529e\u6cd5\u5c31\u662f\u5c06\u5bf9\u8c61\u6307\u9488\u8d4b\u503c\u7ed9\u63a5\u53e3\u3002 \u53ea\u6709\u5c06\u63a5\u53e3\u53d8\u91cf\u5185\u90e8\u7684\u4e24\u4e2a\u6307\u9488(itab\uff0cdata)\u90fd\u4e3anil\u65f6\uff0c\u63a5\u53e3\u624d\u7b49\u4e8enil \u9ed8\u8ba4\u534f\u7a0b\u7684\u5806\u6808\u5927\u5c0f\u65f62KB\uff0c\u53ef\u4ee5\u6269\u5927\u3002 rumtime.GOMAXPROCS\uff0cruntime.NumCPU \u4e00\u6b21\u6027\u7684\u4e8b\u4ef6\u4f7f\u7528close\u6765\u89e6\u53d1\uff0c\u8fde\u7eed\u6216\u591a\u6837\u6027\u4e8b\u4ef6\uff0c\u53ef\u4f20\u9012\u4e0d\u540c\u6570\u636e\u6807\u5fd7\u6765\u5b9e\u73b0\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528sync.Cond\u6765\u5b9e\u73b0\u5355\u64ad\u706b\u5e7f\u64ad\u4e8b\u4ef6 \u5411\u5df2\u5173\u95ed\u7684\u901a\u9053\u53d1\u9001\u6570\u636e\u4f1a\u5f15\u53d1panic\uff0c\u4ece\u5df2\u5173\u95ed\u7684\u901a\u9053\u63a5\u6536\u6570\u636e\uff0c\u8fd4\u56de\u5df2\u7f13\u51b2\u6570\u636e\u6216\u96f6\u503c\uff0c\u65e0\u8bba\u6536\u53d1\uff0cnil\u901a\u9053\u90fd\u4f1a\u963b\u585e\uff0c\u91cd\u590d\u5173\u95ed\u901a\u9053\u4f1a\u5f15\u53d1panic\u3002 \u901a\u5e38\u4f7f\u7528\u7c7b\u578b\u8f6c\u6362\u6765\u83b7\u53d6\u5355\u5411\u901a\u9053\uff0c\u5e76\u5206\u522b\u8d4b\u4e88\u64cd\u4f5c\u53cc\u65b9\uff0c\u4e0d\u80fd\u5728\u5355\u5411\u901a\u9053\u4e0a\u505a\u9006\u5411\u64cd\u4f5c\uff0c\u540c\u6837close\u4e0d\u80fd\u4f5c\u7528\u4e8e\u63a5\u6536\u7aef\uff0c\u65e0\u6cd5\u5c06\u5355\u5411\u901a\u9053\u91cd\u65b0\u8f6c\u6362\u56de\u53bb\u3002 \u65e0\u8bba\u662f\u5426\u6267\u884creciver\uff0c\u6240\u6709\u5ef6\u8fdf\u8c03\u7528\u90fd\u4f1a\u88ab\u6267\u884c \u8fde\u7eed\u8c03\u7528panic\uff0c\u4ec5\u6700\u540e\u4e00\u4e2a\u4f1a\u88abrecover\u6355\u83b7\uff0crecover\u5fc5\u987b\u5728\u5ef6\u8fdf\u51fd\u6570\u4e2d\u6267\u884c\u624d\u6709\u6548 1 2 3 4 5 6 7 8 9 10 11 12 13 14 package main import \"log\" func main () { defer func () { if err := recover (); err != nil { log . Fatalln ( err ) } }() panic ( \"I am dead\" ) println ( \"exit.\" ) // \u6ca1\u6709\u6267\u884c } runtime/debug debug.PrintStack() \u8f93\u51fa\u5b8c\u6574\u7684\u8c03\u7528\u5806\u6808\u4fe1\u606f runtime.GC() \u4e3b\u52a8\u5783\u573e\u56de\u6536\u3001 GODEBUG=\"gctrace=1,schedtrace=1000,scheddetail=1\" sync.Mutex \u4e0d\u80fd\u590d\u5236\u4f1a\u5bfc\u81f4\u5931\u6548\uff0c\u6240\u4ee5\u5f53\u5305\u542b\u4e86 sync.Mutex \u7684\u533f\u540d\u5b57\u6bb5\u7684\u65f6\u5019\uff0c\u9700\u8981\u5c06\u5176\u5b9e\u73b0\u4e3a\u6307\u9488\u578b\u7684receiver\uff0c\u6216\u8005\u5d4c\u5165 *sync.Mutex \u5305\u5185\u6bcf\u4e00\u4e2a\u6e90\u7801\u6587\u4ef6\u90fd\u53ef\u4ee5\u5b9a\u4e49\u4e00\u5230\u591a\u4e2a\u521d\u59cb\u5316\u51fd\u6570\uff0c\u4f46\u662f\u7f16\u8bd1\u5668\u4e0d\u4fdd\u8bc1\u6267\u884c\u6b21\u5e8f\uff0c\u53ea\u80fd\u4fdd\u8bc1\u6240\u6709\u7684\u521d\u59cb\u5316\u51fd\u6570\u90fd\u662f\u5355\u4e00\u7ebf\u7a0b\u6267\u884c\u7684\uff0c\u4e14\u4ec5\u6267\u884c\u4e00\u6b21 \u6240\u6709\u4fdd\u5b58\u5728internal\u76ee\u5f55\u4e0b\u7684\u5305(\u5305\u62ec\u81ea\u8eab)\u4ec5\u80fd\u88ab\u5176\u7236\u76ee\u5f55\u4e0b\u7684\u5305(\u542b\u6240\u6709\u5c42\u6b21\u7684\u5b50\u76ee\u5f55)\u8bbf\u95ee io.MultiWriter \u53ef\u4ee5\u63a5\u6536\u591a\u4e2awriter(\u53ea\u8981\u5b9e\u73b0\u4e86 io.writer \u5373\u53ef)\uff0c\u901a\u8fc7 io.MultiWriter \u53ef\u4ee5\u5c06\u6570\u636e\u5199\u5165\u5230\u591a\u4e2awriter\u4e2d \u6267\u884c\u4e00\u4e2ashell\u547d\u4ee4(exec.Command)\u5e76\u62ff\u5230\u7ed3\u679c cmd.CombinedOutput cmd.Stdout \u548c cmd.Stderr cmd.StdoutPipe \u548c cmd.StderrPipe cmd.Env \u8bbe\u7f6e\u7a0b\u5e8f\u6267\u884c\u7684\u73af\u5883\u53d8\u91cf https://blog.drewolson.org/dependency-injection-in-go \u4f9d\u8d56\u6ce8\u5165 DIC go\u4e2d\u7684struct tag\u53ef\u4ee5\u63a7\u5236json encode\u7684\u8f93\u51fa\u683c\u5f0f 1 2 3 4 5 6 7 8 9 10 11 12 type Person struct { Firstname string `json:\"first\"` Middlename string `json:\"middle,omitempty\"` // omitempty\u53ef\u4ee5\u7701\u7565 Lastname string `json:\"last\"` SSID int64 `json:\"-\"` // \u4e0d\u5c06\u8fd9\u4e2a\u5b57\u6bb5\u7f16\u7801\u8f93\u51fa City string `json:\"city,omitempty\"` Country string `json:\"country\"` Telephone int64 `json:\"tel,string\"` // \u8f93\u51fa\u7c7b\u578b\u4e3astring } interface slice \u6ca1\u529e\u6cd5\u628a\u4e00\u4e2aslice\u8d4b\u503c\u7ed9\u4e00\u4e2ainterface slice 1 2 var dataSlice []int = foo() var interfaceSlice []interface{} = dataSlice https://github.com/golang/go/wiki/InterfaceSlice profiling CPU profiling runtime\u6bcf\u969410ms\u4e2d\u65ad\u81ea\u5df1\uff0c\u7136\u540e\u8bb0\u5f55\u4e0b\u5f53\u524d\u534f\u7a0b\u7684stack trace Memory profiling \u53ea\u8bb0\u5f55\u5806\u5206\u914d\u573a\u666f\u4e0b\u7684stack trace\uff0c\u6808\u5206\u914d\u5219\u4e0d\u4f1a\u8bb0\u5f55\uff0c\u4e5f\u662f\u91c7\u6837\u7684\u65b9\u5f0f\uff0c\u6bcf1000\u6b21\u5206\u914d\u5c31\u91c7\u6837\u4e00\u6b21\uff0c\u8fd9\u4e2a\u6bd4\u7387\u53ef\u4ee5\u6539\u53d8\u3002 \u56e0\u4e3aMemory profiling\u662f\u57fa\u4e8e\u5806\u5206\u914d\u4e86\u4f46\u662f\u6ca1\u6709\u4f7f\u7528\u7684\u5185\u5b58\u8fdb\u884c\u91c7\u6837\u7684\uff0c\u6240\u4ee5\u7528Memory profiling\u6765\u63a2\u6d4b\u7a0b\u5e8f\u7684\u5185\u5b58\u4f7f\u7528\u91cf\u662f\u5f88\u96be\u7684\u3002 Block profiling\u548c\u8bb0\u5f55\u534f\u7a0b\u82b1\u5728\u7b49\u5f85\u5171\u4eab\u8d44\u6e90\u4e0a\u7684\u65f6\u95f4\uff0c\u8fd9\u4e2a\u5bf9\u4e8e\u63a2\u6d4b\u7a0b\u5e8f\u662f\u5426\u542b\u6709\u5e76\u53d1\u74f6\u9888\u5f88\u6709\u5e2e\u52a9\u3002 \u53d1\u9001\u548c\u63a5\u6536\u4e00\u4e2aunbuffered\u7684channel \u7ed9\u4e00\u4e2afull channel\u53d1\u9001\u6d88\u606f\uff0c\u6216\u8005\u4ece\u4e00\u4e2a\u7a7a\u7684channel\u4e0a\u63a5\u6536\u6d88\u606f \u8bd5\u56fe\u8c03\u7528sync.Mutex\u7684Lock\u65b9\u6cd5\uff0c\u4f46\u662f\u88ab\u5176\u4ed6\u534f\u7a0b\u9501\u4f4f Mutex profiling Do not enable more than one kind of profile at a time. \u5173\u95edCPU\u53d8\u9891\uff0c\u4f7fCPU\u59cb\u7ec8\u5904\u4e8e\u9ad8\u9891 1 2 3 4 5 6 $ sudo bash # for i in /sys/devices/system/cpu/cpu[0-7] do echo performance > $i/cpufreq/scaling_governor done # 6. --inuse_objects \u663e\u793a\u5206\u914d\u7684\u5185\u5b58\u6570\u91cf\u800c\u4e0d\u662f\u5927\u5c0f 7. pprof \u57fa\u672c\u4f7f\u7528(cpuprofile) 1 2 3 4 5 6 7 8 9 10 11 12 var cpuprofile = flag.String(\"cpuprofile\", \"\", \"write cpu profile to file\") func main() { flag.Parse() if *cpuprofile != \"\" { f, err := os.Create(*cpuprofile) if err != nil { log.Fatal(err) } pprof.StartCPUProfile(f) defer pprof.StopCPUProfile() } Programing Pattern \u89e6\u53d1\u4fe1\u53f7\u540e\uff0c\u7a0b\u5e8f\u9000\u51fa \u7a0b\u5e8f\u901a\u8fc7\u4e00\u4e2astop\u4fe1\u53f7\u6765\u63a7\u5236\u7a0b\u5e8f\u7684\u751f\u547d\u7684\u5468\u671f\uff0c\u5728\u7a0b\u5e8f\u7684\u6700\u540e\u8c03\u7528WaitSignal\u6765\u7b49\u5f85\u4fe1\u53f7\u5230\u6765\u3002 1 2 3 4 5 6 7 8 // WaitSignal awaits for SIGINT or SIGTERM and closes the channel func WaitSignal(stop chan struct{}) { sigs := make(chan os.Signal, 1) signal.Notify(sigs, syscall.SIGINT, syscall.SIGTERM) <-sigs close(stop) _ = log.Sync() } Go Pattern PubSub Worker Scheduler Replicated service client Protocol multiplexer 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 type ProtocolMux interface { Init(Service) Call(Msg) Msg } type Service interface { ReadTag(Msg) int64 Send(Msg) Recv() Msg } type Mux struct { srv Service send chan Msg mu sync.Mutex pending map[int64]chan<- Msg } Concurrency sync.Pool 1 2 3 4 5 6 7 8 9 10 11 12 13 14 myPool := &sync.Pool{ // \u81ea\u5b9a\u4e49\u5bf9\u8c61\u7684\u521b\u5efa New: func() interface{} { fmt.Println(\"Creating new instance.\") return struct{}{} }, } // \u521b\u5efa\u4e00\u4e2a\u5bf9\u8c61\uff0c\u4f46\u662f\u6ca1\u6709\u653e\u5230Pool\u4e2d\u8fdb\u884c\u590d\u7528 myPool.Get() // \u521b\u5efa\u4e00\u4e2a\u5bf9\u8c61 instance := myPool.Get() // \u5c06\u521b\u5efa\u7684\u5bf9\u8c61\u653e\u5230Pool\u4e2d\u590d\u7528 myPool.Put(instance) runtime.GOMAXPROCS(runtime.NumCPU()) \u6307\u7684\u662fOS\u7ebf\u7a0b\u6570\uff0c\u5c31\u662fM\u7684\u89d2\u8272 Golang\u8c03\u5ea6\u5668\u4e2d\u7684\u4e09\u4e2a\u5b9e\u4f53 Goroutine(G) OS thread or machine (M) Context or processor (P) \u907f\u514d\u5f80close\u7684channel\u5199\u5165 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 // \u5c06channel\u7684write\u548cclose\u63a7\u5236\u5728\u4e00\u4e2a\u4f5c\u7528\u57df\u5185\uff0c\u4fdd\u8bc1\u4e0d\u4f1a\u51fa\u73b0write\u4e00\u4e2aclose\u7684channel chanOwner := func () <- chan int { results := make ( chan int , 5 ) go func () { defer close ( results ) for i := 0 ; i <= 5 ; i ++ { results <- i } }() return results } // \u8fd4\u56de\u53ea\u8bfbchannel\uff0c\u9650\u5236channel\u7684\u529f\u80fd consumer := func ( results <- chan int ) { for result := range results { fmt . Printf ( \"Received: %d\\n\" , result ) } fmt . Println ( \"Done receiving!\" ) } results := chanOwner () consumer ( results ) or-channel \u7528\u6765select\u4e0d\u5b9a\u6570\u91cf\u7684channel\uff0c\u901a\u8fc7\u9012\u5f52\u7684\u65b9\u5f0f\u6765\u5b9e\u73b0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 var or func ( channels ...<- chan interface {}) <- chan interface {} or = func ( channels ...<- chan interface {}) <- chan interface {} { switch len ( channels ) { case 0 : return nil case 1 : return channels [ 0 ] } orDone := make ( chan interface {}) go func () { defer close ( orDone ) switch len ( channels ) { case 2 : select { case <- channels [ 0 ]: case <- channels [ 1 ]: } default : select { case <- channels [ 0 ]: case <- channels [ 1 ]: case <- channels [ 2 ]: case <- or ( append ( channels [ 3 :], orDone ) ... ): } } }() return orDone } \u534f\u7a0b\u4e2d\u53d1\u751f\u7684\u9519\u8bef\u4e5f\u5e94\u8be5\u901a\u8fc7channel\u66b4\u9732\u51fa\u6765\uff0c\u5c06error\u548c\u7ed3\u679c\u5c01\u88c5\u5728\u4e00\u8d77 1 2 3 4 type Result struct { Error error // \u534f\u7a0b\u901a\u8fc7channel\u8fd4\u56de\u7684\u7ed3\u679c } FanIn\u7684\u5b9e\u73b0\uff0c\u5c06\u591a\u4e2achannel\u6c47\u805a\u5230\u4e00\u4e2achannel\u8f93\u51fa 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 fanIn := func ( done <- chan interface {}, channels ...<- chan interface {}, ) <- chan interface {} { var wg sync . WaitGroup multiplexedStream := make ( chan interface {}) multiplex := func ( c <- chan interface {}) { defer wg . Done () for i := range c { select { case <- done : return case multiplexedStream <- i : } } } // Select from all the channels wg . Add ( len ( channels )) for _ , c := range channels { go multiplex ( c ) } // Wait for all the reads to complete go func () { wg . Wait () close ( multiplexedStream ) }() return multiplexedStream } orDone channel 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 orDone := func ( done , c <- chan interface {}) <- chan interface {} { valStream := make ( chan interface {}) go func () { defer close ( valStream ) for { select { case <- done : return case v , ok := <- c : if ok == false { return } select { case valStream <- v : case <- done : } } } }() return valStream } tee channel 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 tee := func ( done <- chan interface {}, in <- chan interface {}, ) ( _ , _ <- chan interface {}) { <- chan interface {}) { out1 := make ( chan interface {}) out2 := make ( chan interface {}) go func () { defer close ( out1 ) defer close ( out2 ) for val := range orDone ( done , in ) { var out1 , out2 = out1 , out2 for i := 0 ; i < 2 ; i ++ { select { case <- done : // \u7b2c\u4e00\u6b21\u5199\u5165\u540e\u4f1a\u53d8\u6210nil\uff0c\u540e\u9762\u518d\u5199\u5165\u5c31\u4f1ablock\u4e86\uff0c\u5c31\u8f6e\u5230\u4e0b\u4e00\u4e2achannel\u5199\u5165\u4e86 case out1 <- val : out1 = nil case out2 <- val : out2 = nil } } } }() return out1 , out2 } bridge channel 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 bridge := func ( done <- chan interface {}, // \u7c7b\u578b\u662f<-chan interface{}\u7684chan chanStream <- chan <- chan interface {}, ) <- chan interface {} { valStream := make ( chan interface {}) go func () { defer close ( valStream ) for { var stream <- chan interface {} select { // \u83b7\u53d6\u4e00\u4e2achan case maybeStream , ok := <- chanStream : if ok == false { return } stream = maybeStream case <- done : return } // \u904d\u5386\u8fd9\u4e2achan for val := range orDone ( done , stream ) { select { case valStream <- val : case <- done : } } } }() return valStream } \u7f16\u8bd1\u65f6\u68c0\u6d4b\u67d0\u4e2astruct\u662f\u5426\u5b9e\u73b0\u5bf9\u5e94\u7684\u63a5\u53e3 1 2 // \u5728struct\u5b9e\u73b0\u7684\u6587\u4ef6\u6587\u4ef6\u4e2d\uff0c\u521b\u5efa\u4e00\u4e2a\u533f\u540d\u5168\u5c40\u53d8\u91cf\uff0c\u5982\u4e0b var _ \u63a5\u53e3\u7c7b\u578b = &\u5177\u4f53\u5b9e\u73b0\u7684struct{} Garbage Collection \u5783\u573e\u56de\u6536\u7684\u4e09\u4e2a\u9636\u6bb5: Mark Setup - STW \u6253\u5f00\u5199\u5c4f\u969c\uff0c\u56e0\u4e3a\u5e94\u7528\u7a0b\u5e8f\u7684\u534f\u7a0b\u548c\u5783\u573e\u56de\u6536\u5668\u7684\u534f\u7a0b\u662f\u5e76\u53d1\u8fd0\u884c\u7684\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u6570\u636e\u7684\u5b8c\u6574\u6027\uff0c\u9700\u8981\u6253\u5f00\u5199\u5c4f\u969c\u3002\u6253\u5f00\u5199\u5c4f\u969c\u9700\u8981\u8ba9\u6240\u6709\u534f\u7a0b \u90fd\u505c\u6b62\u5de5\u4f5c\u3002 Marking - Concurrent Mark Termination - STW \u5982\u4f55\u4fdd\u8bc1\u6587\u4ef6\u9501\u4e0d\u4f1a\u91ca\u653e 1 2 3 4 5 6 7 8 9 10 11 12 13 go \u91cc\u521b\u5efa\u4e00\u4e2a file \u65f6\uff0c\u4f1a\u9ed8\u8ba4\u8bbe\u7f6e\u4e00\u4e2a Finalizer\uff0c\u5f53\u8fd9\u4e2a File \u56de\u6536\u65f6\u89e6\u53d1\uff0c\u5173\u95ed\u6587\u4ef6 fd\uff0c\u9632\u6b62 fd \u6cc4\u9732\u3002 \u5728\u8fdb\u7a0b\u4e0d\u9700\u8981\u6587\u4ef6\u9501\u4e4b\u524d\uff0c\u5fc5\u987b\u8981\u4fdd\u8bc1\u6587\u4ef6\u9501\u7684 file \u5bf9\u8c61\u4e00\u76f4\u662f reachable\u3002\u53ef\u4ee5\u4f7f\u7528 runtime.KeepAlive\u3002\u5982\uff1a func main() { r := runner{} if err := r.lock(); err != nil { fmt.Printf(\"%s\\n\", err) return } defer runtime.KeepAlive(r.f) r.run() } debouncing \u901a\u8fc7\u4e00\u4e2atimer\u6765\u5b9e\u73b0\u4e86\u4e00\u4e2a\u9632\u6296\u52a8\uff0c\u907f\u514d\u5927\u91cfevent\u5bfc\u81f4callback\u8c03\u7528\u591a\u6b21\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 // Add to the FileWatcher the provided file and execute the provided function // on any change event for this file. // Using a debouncing mechanism to avoid calling the callback multiple times // per event. func (s *Server) addFileWatcher(file string, callback func()) { _ = s.fileWatcher.Add(file) go func() { var timerC <-chan time.Time for { select { case <-timerC: timerC = nil callback() case <-s.fileWatcher.Events(file): // Use a timer to debounce configuration updates if timerC == nil { timerC = time.After(100 * time.Millisecond) } } } }() } \u6307\u9488\u7684\u539f\u5b50\u66f4\u65b0 1 2 3 4 // \u539f\u5b50\u66f4\u65b0 atomic . StorePointer (( * unsafe . Pointer )( unsafe . Pointer ( & w . MeshConfig )), unsafe . Pointer ( meshConfig )) // \u539f\u5b50\u8bfb ( * meshconfig . MeshConfig )( atomic . LoadPointer (( * unsafe . Pointer )( unsafe . Pointer ( & w . MeshConfig ))))","title":"Index"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/golang/#basic","text":"golang\u7684\u7c7b\u578b\u8f6c\u6362\u53ef\u4ee5\u662f\u7a84\u5316\u7684\uff0c\u4f8b\u5982\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50: 1 2 var x int64 = 64000 var y int16 = int16(x) GOTRACEBACK=crash go\u7a0b\u5e8f\u5728\u5954\u6e83\u7684\u65f6\u5019\u4ea7\u751fcore dump\u6587\u4ef6 go build -gcflags=all=\"-N -l\" \u5173\u95ed\u7f16\u8bd1\u5668\u4f18\u5316 go build -gcflags=\"-dwarflocationlists=true\" The flag causes the compiler to add location lists that helps debuggers work with optimized binaries. \u65e0\u8bba\u666e\u901a\u7684for\u5faa\u73af\u8fd8\u662frange\u8fed\u4ee3\uff0c\u5176\u5b9a\u4e49\u7684\u5c40\u90e8\u53d8\u91cf\u90fd\u4f1a\u88ab\u91cd\u590d\u4f7f\u7528 1 2 3 4 5 6 7 8 9 10 11 12 13 14 package main func main() { data := [3]string{\"a\", \"b\", \"c\"} for i, s := range data { println(&i, &s) } } tianqianzyfdeMacBook-Pro-2:go-study tianqian.zyf$ ./go-study 0xc000042700 0xc000042718 0xc000042700 0xc000042718 0xc000042700 0xc000042718 \u8fd9\u4f1a\u5bf9\u95ed\u5305\u4ea7\u751f\u5f71\u54cd\uff0c\u5982\u679c\u95ed\u5305\u5f15\u7528\u4e0a\u8ff0\u7684\u5c40\u90e8\u53d8\u91cf\uff0c\u4f1a\u5bfc\u81f4\u5f15\u7528\u7684\u5185\u5bb9\u662f\u8fed\u4ee3\u7ed3\u675f\u540e\u7684\u5185\u5bb9\u3002 range\u4f1a\u590d\u5236\u76ee\u6807\u6570\u636e\uff0c\u53d7\u76f4\u63a5\u5f71\u54cd\u7684\u662f\u6570\u7ec4\uff0c\u53ef\u6539\u7528\u6570\u7ec4\u6307\u9488\u6216\u5207\u7247\u7c7b\u578b defer\u8bed\u53e5\u7684\u4e4b\u524d\u662f\u5728return\u8bed\u53e5\u4e4b\u540e\u6267\u884c\u7684\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 package main func test () ( z int ) { defer func () { println ( \"defer:\" , z ) z += 100 }() return 100 } func main () { println ( \"test:\" , test ()) } tianqianzyfdeMacBook - Pro - 2 : go - study tianqian . zyf $ . / go - study defer : 100 test : 200 \u5b57\u5178\u5207\u7247\u90fd\u662f\u5f15\u7528\u7c7b\u578b\uff0c\u62f7\u8d1d\u5f00\u9500\u4f4e \u7f16\u8bd1\u5668\u4f1a\u8fdb\u884c\u9003\u9038\u5206\u6790\u5c06\u6808\u4e0a\u53d8\u91cf\u5206\u914d\u5728\u5806\u4e0a go build -gcflags \"-N -l -m\" -N(\u7981\u7528\u4ee3\u7801\u4f18\u5316) \u7981\u7528\u51fd\u6570\u5185\u8054(-l)\uff0c\u8f93\u51fa\u4f18\u5316\u4fe1\u606f(-m) []byte\u548cstring\u7684\u5934\u90e8\u7ed3\u6784\u76f8\u540c\u53ef\u4ee5\u901aunsafe.Pointer\u6765\u4e92\u76f8\u8f6c\u6362 \u5b57\u7b26\u4e32\u662f\u4e0d\u53ef\u53d8\uff0c\u5bf9\u5176\u4fee\u6539\u9700\u8981\u5c06\u5176\u8f6c\u6362\u4e3a []byte \u6216\u8005\u662f []rune \uff0c\u8f6c\u6362\u7684\u8fc7\u7a0b\u662f\u9700\u8981\u91cd\u65b0\u5206\u914d\u5185\u5b58\u548c\u590d\u5236\u7684 golang\u5728\u7f16\u8bd1\u5668\u5c42\u9762\u4f1a\u5bf9[]byte\u8f6c\u6362\u4e3astring\u8fdb\u884cmap\u67e5\u8be2\u7684\u65f6\u5019\u8fdb\u884c\u4f18\u5316\uff0c\u907f\u514dstring\u62f7\u8d1d golang\u5728\u7f16\u8bd1\u5668\u5c42\u9762\u4f1a\u5bf9string\u8f6c\u6362[]byte\uff0c\u8fdb\u884cfor range\u8fed\u4ee3\u65f6\uff0c\u76f4\u63a5\u53d6\u5b57\u8282\u8d4b\u503c\u7ed9\u5c40\u90e8\u53d8\u91cf string.Join \u4e00\u6b21\u6027\u5206\u914d\u5185\u5b58\u7b49\u540c\u4e8ebytes.Buffer\u5148Grow\u4e8b\u5148\u51c6\u5907\u8db3\u591f\u7684\u5185\u5b58 slice\u7c7b\u578b\u4e0d\u652f\u6301\u6bd4\u8f83\u64cd\u4f5c\uff0c\u4ec5\u80fd\u5224\u65ad\u662f\u5426\u4e3anil\uff0c slice\u7684len\u3001cap\u3001\u5e95\u5c42\u6570\u7ec4\u7684\u957f\u5ea6\uff0c\u5f53\u8d85\u8fc7cap\u7684\u65f6\u5019\u4f1a\u6309\u7167cap\u8fdb\u884c2\u500d\u7684\u6269\u5bb9(\u5e76\u975e\u603b\u662f2\u500d\uff0c\u5bf9\u4e8e\u8f83\u5927\u7684slice\u5219\u662f1/4) \u4e0d\u80fd\u5bf9nil\u5b57\u5178\u8fdb\u884c\u5199\u64cd\u4f5c\uff0c\u4f46\u662f\u5374\u80fd\u8bfb \u5b57\u5178\u5bf9\u8c61\u672c\u8eab\u5c31\u662f\u6307\u9488\u5305\u88c5\u7684\uff0c\u4f20\u53c2\u7684\u65f6\u5019\u65e0\u987b\u518d\u6b21\u53d6\u5730\u5740 \u5bf9\u4e8e\u6d77\u91cf\u5c0f\u5bf9\u8c61\u5e94\u8be5\u76f4\u63a5\u7528\u503c\u62f7\u8d1d\uff0c\u800c\u975e\u6307\u9488\uff0c\u8fd9\u6709\u52a9\u4e8e\u51cf\u5c11\u9700\u8981\u626b\u63cf\u7684\u5bf9\u8c61\u6570\u91cf\uff0c\u5927\u5e45\u7f29\u77ed\u5783\u573e\u56de\u6536\u65f6\u95f4 \u7a7a\u7ed3\u6784\u90fd\u6307\u5411runtime.zerobase \u4e0d\u80fd\u5c06\u57fa\u7840\u7c7b\u578b\u548c\u5176\u5bf9\u5e94\u7684\u6307\u9488\u7c7b\u578b\u540c\u65f6\u533f\u540d\u5d4c\u5165\u5230\u7ed3\u6784\u4e2d(\u672c\u8d28\u4e0a\u4e24\u8005\u7684\u9690\u5f0f\u540d\u5b57\u76f8\u540c) \u5982\u4f55\u9009\u62e9\u65b9\u6cd5\u7684receiver\u7684\u7c7b\u578b \u8981\u4fee\u6539\u5b9e\u4f8b\u7684\u72b6\u6001\u7528 *T \u65e0\u987b\u4fee\u6539\u72b6\u6001\u7684\u5c0f\u5bf9\u8c61\u6216\u56fa\u5b9a\u503c\uff0c\u5efa\u8bae\u7528 T \u5927\u5bf9\u8c61\u5efa\u8bae\u7528 *T \uff0c\u4ee5\u51cf\u5c11\u590d\u5236\u6210\u672c \u5f15\u7528\u7c7b\u578b\u3001\u5b57\u7b26\u4e32\u3001\u51fd\u6570\u7b49\u6307\u9488\u5305\u88c5\u5bf9\u8c61\uff0c\u76f4\u63a5\u7528T \u82e5\u5305\u542b\u4e86 Mutex \u7b49\u540c\u6b65\u5b57\u6bb5\uff0c\u7528 *T \uff0c\u907f\u514d\u56e0\u590d\u5236\u6784\u9020\u6210\u9501\u64cd\u4f5c\u800c\u65e0\u6548 \u5176\u4ed6\u65e0\u6cd5\u786e\u5b9a\u7684\u60c5\u51b5\u90fd\u7528 *T \u65b9\u6cd5\u96c6\uff0c\u901a\u8fc7reflect.TypeOf\u62ff\u5230\u53cd\u5c04\u7684\u5bf9\u8c61\uff0c\u7136\u540e\u901a\u8fc7NumMethod\u53ef\u4ee5\u5f97\u5230\u65b9\u6cd5\u96c6\u7684\u6570\u91cf\uff0c\u901a\u8fc7Method\u62ff\u5230\u65b9\u6cd5\u5bf9\u8c61\uff0c\u901a\u8fc7\u65b9\u6cd5\u5bf9\u8c61\u7684 Name\u65b9\u6cd5\u62ff\u5230\u65b9\u6cd5\u540d\uff0c\u901a\u8fc7Type\u65b9\u6cd5\u62ff\u5230\u65b9\u6cd5\u7684\u58f0\u660e \u7c7b\u578bT\u7684\u65b9\u6cd5\u96c6\u5305\u542b\u4e86\u6240\u6709receiver T\u7684\u65b9\u6cd5 \u7c7b\u578b *T \u65b9\u6cd5\u96c6\u5305\u542b\u4e86\u6240\u6709 receiver T + *T \u65b9\u6cd5 \u533f\u540d\u5d4c\u5165S\uff0cT\u65b9\u6cd5\u96c6\u5305\u542b\u4e86\u6240\u6709receiver S\u7684\u65b9\u6cd5 \u533f\u540d\u5d4c\u5165 *S \uff0cT\u65b9\u6cd5\u96c6\u5305\u542b\u4e86\u6240\u6709 receiver S + *S \u65b9\u6cd5 \u533f\u540d\u5d4c\u5165 *S \u6216S, *T \u65b9\u6cd5\u96c6\u5305\u542b\u4e86\u6240\u6709 receiver S + *S \u7684\u65b9\u6cd5 Method Expression \u548cMethod Value \u63a5\u53e3\u901a\u5e38\u4ee5er\u4f5c\u4e3a\u540e\u7f00\u540d \u8d85\u96c6\u63a5\u53e3\u53ef\u4ee5\u9690\u5f0f\u8f6c\u6362\u4e3a\u5b50\u96c6 \u5c06\u5bf9\u8c61\u8d4b\u503c\u7ed9\u63a5\u53e3\u7684\u53d8\u91cf\u65f6\uff0c\u4f1a\u590d\u5236\u8be5\u5bf9\u8c61\uff0c\u89e3\u51b3\u529e\u6cd5\u5c31\u662f\u5c06\u5bf9\u8c61\u6307\u9488\u8d4b\u503c\u7ed9\u63a5\u53e3\u3002 \u53ea\u6709\u5c06\u63a5\u53e3\u53d8\u91cf\u5185\u90e8\u7684\u4e24\u4e2a\u6307\u9488(itab\uff0cdata)\u90fd\u4e3anil\u65f6\uff0c\u63a5\u53e3\u624d\u7b49\u4e8enil \u9ed8\u8ba4\u534f\u7a0b\u7684\u5806\u6808\u5927\u5c0f\u65f62KB\uff0c\u53ef\u4ee5\u6269\u5927\u3002 rumtime.GOMAXPROCS\uff0cruntime.NumCPU \u4e00\u6b21\u6027\u7684\u4e8b\u4ef6\u4f7f\u7528close\u6765\u89e6\u53d1\uff0c\u8fde\u7eed\u6216\u591a\u6837\u6027\u4e8b\u4ef6\uff0c\u53ef\u4f20\u9012\u4e0d\u540c\u6570\u636e\u6807\u5fd7\u6765\u5b9e\u73b0\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528sync.Cond\u6765\u5b9e\u73b0\u5355\u64ad\u706b\u5e7f\u64ad\u4e8b\u4ef6 \u5411\u5df2\u5173\u95ed\u7684\u901a\u9053\u53d1\u9001\u6570\u636e\u4f1a\u5f15\u53d1panic\uff0c\u4ece\u5df2\u5173\u95ed\u7684\u901a\u9053\u63a5\u6536\u6570\u636e\uff0c\u8fd4\u56de\u5df2\u7f13\u51b2\u6570\u636e\u6216\u96f6\u503c\uff0c\u65e0\u8bba\u6536\u53d1\uff0cnil\u901a\u9053\u90fd\u4f1a\u963b\u585e\uff0c\u91cd\u590d\u5173\u95ed\u901a\u9053\u4f1a\u5f15\u53d1panic\u3002 \u901a\u5e38\u4f7f\u7528\u7c7b\u578b\u8f6c\u6362\u6765\u83b7\u53d6\u5355\u5411\u901a\u9053\uff0c\u5e76\u5206\u522b\u8d4b\u4e88\u64cd\u4f5c\u53cc\u65b9\uff0c\u4e0d\u80fd\u5728\u5355\u5411\u901a\u9053\u4e0a\u505a\u9006\u5411\u64cd\u4f5c\uff0c\u540c\u6837close\u4e0d\u80fd\u4f5c\u7528\u4e8e\u63a5\u6536\u7aef\uff0c\u65e0\u6cd5\u5c06\u5355\u5411\u901a\u9053\u91cd\u65b0\u8f6c\u6362\u56de\u53bb\u3002 \u65e0\u8bba\u662f\u5426\u6267\u884creciver\uff0c\u6240\u6709\u5ef6\u8fdf\u8c03\u7528\u90fd\u4f1a\u88ab\u6267\u884c \u8fde\u7eed\u8c03\u7528panic\uff0c\u4ec5\u6700\u540e\u4e00\u4e2a\u4f1a\u88abrecover\u6355\u83b7\uff0crecover\u5fc5\u987b\u5728\u5ef6\u8fdf\u51fd\u6570\u4e2d\u6267\u884c\u624d\u6709\u6548 1 2 3 4 5 6 7 8 9 10 11 12 13 14 package main import \"log\" func main () { defer func () { if err := recover (); err != nil { log . Fatalln ( err ) } }() panic ( \"I am dead\" ) println ( \"exit.\" ) // \u6ca1\u6709\u6267\u884c } runtime/debug debug.PrintStack() \u8f93\u51fa\u5b8c\u6574\u7684\u8c03\u7528\u5806\u6808\u4fe1\u606f runtime.GC() \u4e3b\u52a8\u5783\u573e\u56de\u6536\u3001 GODEBUG=\"gctrace=1,schedtrace=1000,scheddetail=1\" sync.Mutex \u4e0d\u80fd\u590d\u5236\u4f1a\u5bfc\u81f4\u5931\u6548\uff0c\u6240\u4ee5\u5f53\u5305\u542b\u4e86 sync.Mutex \u7684\u533f\u540d\u5b57\u6bb5\u7684\u65f6\u5019\uff0c\u9700\u8981\u5c06\u5176\u5b9e\u73b0\u4e3a\u6307\u9488\u578b\u7684receiver\uff0c\u6216\u8005\u5d4c\u5165 *sync.Mutex \u5305\u5185\u6bcf\u4e00\u4e2a\u6e90\u7801\u6587\u4ef6\u90fd\u53ef\u4ee5\u5b9a\u4e49\u4e00\u5230\u591a\u4e2a\u521d\u59cb\u5316\u51fd\u6570\uff0c\u4f46\u662f\u7f16\u8bd1\u5668\u4e0d\u4fdd\u8bc1\u6267\u884c\u6b21\u5e8f\uff0c\u53ea\u80fd\u4fdd\u8bc1\u6240\u6709\u7684\u521d\u59cb\u5316\u51fd\u6570\u90fd\u662f\u5355\u4e00\u7ebf\u7a0b\u6267\u884c\u7684\uff0c\u4e14\u4ec5\u6267\u884c\u4e00\u6b21 \u6240\u6709\u4fdd\u5b58\u5728internal\u76ee\u5f55\u4e0b\u7684\u5305(\u5305\u62ec\u81ea\u8eab)\u4ec5\u80fd\u88ab\u5176\u7236\u76ee\u5f55\u4e0b\u7684\u5305(\u542b\u6240\u6709\u5c42\u6b21\u7684\u5b50\u76ee\u5f55)\u8bbf\u95ee io.MultiWriter \u53ef\u4ee5\u63a5\u6536\u591a\u4e2awriter(\u53ea\u8981\u5b9e\u73b0\u4e86 io.writer \u5373\u53ef)\uff0c\u901a\u8fc7 io.MultiWriter \u53ef\u4ee5\u5c06\u6570\u636e\u5199\u5165\u5230\u591a\u4e2awriter\u4e2d \u6267\u884c\u4e00\u4e2ashell\u547d\u4ee4(exec.Command)\u5e76\u62ff\u5230\u7ed3\u679c cmd.CombinedOutput cmd.Stdout \u548c cmd.Stderr cmd.StdoutPipe \u548c cmd.StderrPipe cmd.Env \u8bbe\u7f6e\u7a0b\u5e8f\u6267\u884c\u7684\u73af\u5883\u53d8\u91cf https://blog.drewolson.org/dependency-injection-in-go \u4f9d\u8d56\u6ce8\u5165 DIC go\u4e2d\u7684struct tag\u53ef\u4ee5\u63a7\u5236json encode\u7684\u8f93\u51fa\u683c\u5f0f 1 2 3 4 5 6 7 8 9 10 11 12 type Person struct { Firstname string `json:\"first\"` Middlename string `json:\"middle,omitempty\"` // omitempty\u53ef\u4ee5\u7701\u7565 Lastname string `json:\"last\"` SSID int64 `json:\"-\"` // \u4e0d\u5c06\u8fd9\u4e2a\u5b57\u6bb5\u7f16\u7801\u8f93\u51fa City string `json:\"city,omitempty\"` Country string `json:\"country\"` Telephone int64 `json:\"tel,string\"` // \u8f93\u51fa\u7c7b\u578b\u4e3astring } interface slice \u6ca1\u529e\u6cd5\u628a\u4e00\u4e2aslice\u8d4b\u503c\u7ed9\u4e00\u4e2ainterface slice 1 2 var dataSlice []int = foo() var interfaceSlice []interface{} = dataSlice https://github.com/golang/go/wiki/InterfaceSlice","title":"Basic"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/golang/#profiling","text":"CPU profiling runtime\u6bcf\u969410ms\u4e2d\u65ad\u81ea\u5df1\uff0c\u7136\u540e\u8bb0\u5f55\u4e0b\u5f53\u524d\u534f\u7a0b\u7684stack trace Memory profiling \u53ea\u8bb0\u5f55\u5806\u5206\u914d\u573a\u666f\u4e0b\u7684stack trace\uff0c\u6808\u5206\u914d\u5219\u4e0d\u4f1a\u8bb0\u5f55\uff0c\u4e5f\u662f\u91c7\u6837\u7684\u65b9\u5f0f\uff0c\u6bcf1000\u6b21\u5206\u914d\u5c31\u91c7\u6837\u4e00\u6b21\uff0c\u8fd9\u4e2a\u6bd4\u7387\u53ef\u4ee5\u6539\u53d8\u3002 \u56e0\u4e3aMemory profiling\u662f\u57fa\u4e8e\u5806\u5206\u914d\u4e86\u4f46\u662f\u6ca1\u6709\u4f7f\u7528\u7684\u5185\u5b58\u8fdb\u884c\u91c7\u6837\u7684\uff0c\u6240\u4ee5\u7528Memory profiling\u6765\u63a2\u6d4b\u7a0b\u5e8f\u7684\u5185\u5b58\u4f7f\u7528\u91cf\u662f\u5f88\u96be\u7684\u3002 Block profiling\u548c\u8bb0\u5f55\u534f\u7a0b\u82b1\u5728\u7b49\u5f85\u5171\u4eab\u8d44\u6e90\u4e0a\u7684\u65f6\u95f4\uff0c\u8fd9\u4e2a\u5bf9\u4e8e\u63a2\u6d4b\u7a0b\u5e8f\u662f\u5426\u542b\u6709\u5e76\u53d1\u74f6\u9888\u5f88\u6709\u5e2e\u52a9\u3002 \u53d1\u9001\u548c\u63a5\u6536\u4e00\u4e2aunbuffered\u7684channel \u7ed9\u4e00\u4e2afull channel\u53d1\u9001\u6d88\u606f\uff0c\u6216\u8005\u4ece\u4e00\u4e2a\u7a7a\u7684channel\u4e0a\u63a5\u6536\u6d88\u606f \u8bd5\u56fe\u8c03\u7528sync.Mutex\u7684Lock\u65b9\u6cd5\uff0c\u4f46\u662f\u88ab\u5176\u4ed6\u534f\u7a0b\u9501\u4f4f Mutex profiling Do not enable more than one kind of profile at a time. \u5173\u95edCPU\u53d8\u9891\uff0c\u4f7fCPU\u59cb\u7ec8\u5904\u4e8e\u9ad8\u9891 1 2 3 4 5 6 $ sudo bash # for i in /sys/devices/system/cpu/cpu[0-7] do echo performance > $i/cpufreq/scaling_governor done # 6. --inuse_objects \u663e\u793a\u5206\u914d\u7684\u5185\u5b58\u6570\u91cf\u800c\u4e0d\u662f\u5927\u5c0f 7. pprof \u57fa\u672c\u4f7f\u7528(cpuprofile) 1 2 3 4 5 6 7 8 9 10 11 12 var cpuprofile = flag.String(\"cpuprofile\", \"\", \"write cpu profile to file\") func main() { flag.Parse() if *cpuprofile != \"\" { f, err := os.Create(*cpuprofile) if err != nil { log.Fatal(err) } pprof.StartCPUProfile(f) defer pprof.StopCPUProfile() }","title":"profiling"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/golang/#programing-pattern","text":"\u89e6\u53d1\u4fe1\u53f7\u540e\uff0c\u7a0b\u5e8f\u9000\u51fa \u7a0b\u5e8f\u901a\u8fc7\u4e00\u4e2astop\u4fe1\u53f7\u6765\u63a7\u5236\u7a0b\u5e8f\u7684\u751f\u547d\u7684\u5468\u671f\uff0c\u5728\u7a0b\u5e8f\u7684\u6700\u540e\u8c03\u7528WaitSignal\u6765\u7b49\u5f85\u4fe1\u53f7\u5230\u6765\u3002 1 2 3 4 5 6 7 8 // WaitSignal awaits for SIGINT or SIGTERM and closes the channel func WaitSignal(stop chan struct{}) { sigs := make(chan os.Signal, 1) signal.Notify(sigs, syscall.SIGINT, syscall.SIGTERM) <-sigs close(stop) _ = log.Sync() }","title":"Programing Pattern"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/golang/#go-pattern","text":"PubSub Worker Scheduler Replicated service client Protocol multiplexer 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 type ProtocolMux interface { Init(Service) Call(Msg) Msg } type Service interface { ReadTag(Msg) int64 Send(Msg) Recv() Msg } type Mux struct { srv Service send chan Msg mu sync.Mutex pending map[int64]chan<- Msg }","title":"Go Pattern"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/golang/#concurrency","text":"sync.Pool 1 2 3 4 5 6 7 8 9 10 11 12 13 14 myPool := &sync.Pool{ // \u81ea\u5b9a\u4e49\u5bf9\u8c61\u7684\u521b\u5efa New: func() interface{} { fmt.Println(\"Creating new instance.\") return struct{}{} }, } // \u521b\u5efa\u4e00\u4e2a\u5bf9\u8c61\uff0c\u4f46\u662f\u6ca1\u6709\u653e\u5230Pool\u4e2d\u8fdb\u884c\u590d\u7528 myPool.Get() // \u521b\u5efa\u4e00\u4e2a\u5bf9\u8c61 instance := myPool.Get() // \u5c06\u521b\u5efa\u7684\u5bf9\u8c61\u653e\u5230Pool\u4e2d\u590d\u7528 myPool.Put(instance) runtime.GOMAXPROCS(runtime.NumCPU()) \u6307\u7684\u662fOS\u7ebf\u7a0b\u6570\uff0c\u5c31\u662fM\u7684\u89d2\u8272 Golang\u8c03\u5ea6\u5668\u4e2d\u7684\u4e09\u4e2a\u5b9e\u4f53 Goroutine(G) OS thread or machine (M) Context or processor (P) \u907f\u514d\u5f80close\u7684channel\u5199\u5165 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 // \u5c06channel\u7684write\u548cclose\u63a7\u5236\u5728\u4e00\u4e2a\u4f5c\u7528\u57df\u5185\uff0c\u4fdd\u8bc1\u4e0d\u4f1a\u51fa\u73b0write\u4e00\u4e2aclose\u7684channel chanOwner := func () <- chan int { results := make ( chan int , 5 ) go func () { defer close ( results ) for i := 0 ; i <= 5 ; i ++ { results <- i } }() return results } // \u8fd4\u56de\u53ea\u8bfbchannel\uff0c\u9650\u5236channel\u7684\u529f\u80fd consumer := func ( results <- chan int ) { for result := range results { fmt . Printf ( \"Received: %d\\n\" , result ) } fmt . Println ( \"Done receiving!\" ) } results := chanOwner () consumer ( results ) or-channel \u7528\u6765select\u4e0d\u5b9a\u6570\u91cf\u7684channel\uff0c\u901a\u8fc7\u9012\u5f52\u7684\u65b9\u5f0f\u6765\u5b9e\u73b0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 var or func ( channels ...<- chan interface {}) <- chan interface {} or = func ( channels ...<- chan interface {}) <- chan interface {} { switch len ( channels ) { case 0 : return nil case 1 : return channels [ 0 ] } orDone := make ( chan interface {}) go func () { defer close ( orDone ) switch len ( channels ) { case 2 : select { case <- channels [ 0 ]: case <- channels [ 1 ]: } default : select { case <- channels [ 0 ]: case <- channels [ 1 ]: case <- channels [ 2 ]: case <- or ( append ( channels [ 3 :], orDone ) ... ): } } }() return orDone } \u534f\u7a0b\u4e2d\u53d1\u751f\u7684\u9519\u8bef\u4e5f\u5e94\u8be5\u901a\u8fc7channel\u66b4\u9732\u51fa\u6765\uff0c\u5c06error\u548c\u7ed3\u679c\u5c01\u88c5\u5728\u4e00\u8d77 1 2 3 4 type Result struct { Error error // \u534f\u7a0b\u901a\u8fc7channel\u8fd4\u56de\u7684\u7ed3\u679c } FanIn\u7684\u5b9e\u73b0\uff0c\u5c06\u591a\u4e2achannel\u6c47\u805a\u5230\u4e00\u4e2achannel\u8f93\u51fa 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 fanIn := func ( done <- chan interface {}, channels ...<- chan interface {}, ) <- chan interface {} { var wg sync . WaitGroup multiplexedStream := make ( chan interface {}) multiplex := func ( c <- chan interface {}) { defer wg . Done () for i := range c { select { case <- done : return case multiplexedStream <- i : } } } // Select from all the channels wg . Add ( len ( channels )) for _ , c := range channels { go multiplex ( c ) } // Wait for all the reads to complete go func () { wg . Wait () close ( multiplexedStream ) }() return multiplexedStream } orDone channel 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 orDone := func ( done , c <- chan interface {}) <- chan interface {} { valStream := make ( chan interface {}) go func () { defer close ( valStream ) for { select { case <- done : return case v , ok := <- c : if ok == false { return } select { case valStream <- v : case <- done : } } } }() return valStream } tee channel 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 tee := func ( done <- chan interface {}, in <- chan interface {}, ) ( _ , _ <- chan interface {}) { <- chan interface {}) { out1 := make ( chan interface {}) out2 := make ( chan interface {}) go func () { defer close ( out1 ) defer close ( out2 ) for val := range orDone ( done , in ) { var out1 , out2 = out1 , out2 for i := 0 ; i < 2 ; i ++ { select { case <- done : // \u7b2c\u4e00\u6b21\u5199\u5165\u540e\u4f1a\u53d8\u6210nil\uff0c\u540e\u9762\u518d\u5199\u5165\u5c31\u4f1ablock\u4e86\uff0c\u5c31\u8f6e\u5230\u4e0b\u4e00\u4e2achannel\u5199\u5165\u4e86 case out1 <- val : out1 = nil case out2 <- val : out2 = nil } } } }() return out1 , out2 } bridge channel 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 bridge := func ( done <- chan interface {}, // \u7c7b\u578b\u662f<-chan interface{}\u7684chan chanStream <- chan <- chan interface {}, ) <- chan interface {} { valStream := make ( chan interface {}) go func () { defer close ( valStream ) for { var stream <- chan interface {} select { // \u83b7\u53d6\u4e00\u4e2achan case maybeStream , ok := <- chanStream : if ok == false { return } stream = maybeStream case <- done : return } // \u904d\u5386\u8fd9\u4e2achan for val := range orDone ( done , stream ) { select { case valStream <- val : case <- done : } } } }() return valStream }","title":"Concurrency"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/golang/#struct","text":"1 2 // \u5728struct\u5b9e\u73b0\u7684\u6587\u4ef6\u6587\u4ef6\u4e2d\uff0c\u521b\u5efa\u4e00\u4e2a\u533f\u540d\u5168\u5c40\u53d8\u91cf\uff0c\u5982\u4e0b var _ \u63a5\u53e3\u7c7b\u578b = &\u5177\u4f53\u5b9e\u73b0\u7684struct{}","title":"\u7f16\u8bd1\u65f6\u68c0\u6d4b\u67d0\u4e2astruct\u662f\u5426\u5b9e\u73b0\u5bf9\u5e94\u7684\u63a5\u53e3"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/golang/#garbage-collection","text":"\u5783\u573e\u56de\u6536\u7684\u4e09\u4e2a\u9636\u6bb5: Mark Setup - STW \u6253\u5f00\u5199\u5c4f\u969c\uff0c\u56e0\u4e3a\u5e94\u7528\u7a0b\u5e8f\u7684\u534f\u7a0b\u548c\u5783\u573e\u56de\u6536\u5668\u7684\u534f\u7a0b\u662f\u5e76\u53d1\u8fd0\u884c\u7684\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u6570\u636e\u7684\u5b8c\u6574\u6027\uff0c\u9700\u8981\u6253\u5f00\u5199\u5c4f\u969c\u3002\u6253\u5f00\u5199\u5c4f\u969c\u9700\u8981\u8ba9\u6240\u6709\u534f\u7a0b \u90fd\u505c\u6b62\u5de5\u4f5c\u3002 Marking - Concurrent Mark Termination - STW","title":"Garbage Collection"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/golang/#_1","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 go \u91cc\u521b\u5efa\u4e00\u4e2a file \u65f6\uff0c\u4f1a\u9ed8\u8ba4\u8bbe\u7f6e\u4e00\u4e2a Finalizer\uff0c\u5f53\u8fd9\u4e2a File \u56de\u6536\u65f6\u89e6\u53d1\uff0c\u5173\u95ed\u6587\u4ef6 fd\uff0c\u9632\u6b62 fd \u6cc4\u9732\u3002 \u5728\u8fdb\u7a0b\u4e0d\u9700\u8981\u6587\u4ef6\u9501\u4e4b\u524d\uff0c\u5fc5\u987b\u8981\u4fdd\u8bc1\u6587\u4ef6\u9501\u7684 file \u5bf9\u8c61\u4e00\u76f4\u662f reachable\u3002\u53ef\u4ee5\u4f7f\u7528 runtime.KeepAlive\u3002\u5982\uff1a func main() { r := runner{} if err := r.lock(); err != nil { fmt.Printf(\"%s\\n\", err) return } defer runtime.KeepAlive(r.f) r.run() }","title":"\u5982\u4f55\u4fdd\u8bc1\u6587\u4ef6\u9501\u4e0d\u4f1a\u91ca\u653e"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/golang/#debouncing","text":"\u901a\u8fc7\u4e00\u4e2atimer\u6765\u5b9e\u73b0\u4e86\u4e00\u4e2a\u9632\u6296\u52a8\uff0c\u907f\u514d\u5927\u91cfevent\u5bfc\u81f4callback\u8c03\u7528\u591a\u6b21\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 // Add to the FileWatcher the provided file and execute the provided function // on any change event for this file. // Using a debouncing mechanism to avoid calling the callback multiple times // per event. func (s *Server) addFileWatcher(file string, callback func()) { _ = s.fileWatcher.Add(file) go func() { var timerC <-chan time.Time for { select { case <-timerC: timerC = nil callback() case <-s.fileWatcher.Events(file): // Use a timer to debounce configuration updates if timerC == nil { timerC = time.After(100 * time.Millisecond) } } } }() }","title":"debouncing"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/golang/#_2","text":"1 2 3 4 // \u539f\u5b50\u66f4\u65b0 atomic . StorePointer (( * unsafe . Pointer )( unsafe . Pointer ( & w . MeshConfig )), unsafe . Pointer ( meshConfig )) // \u539f\u5b50\u8bfb ( * meshconfig . MeshConfig )( atomic . LoadPointer (( * unsafe . Pointer )( unsafe . Pointer ( & w . MeshConfig ))))","title":"\u6307\u9488\u7684\u539f\u5b50\u66f4\u65b0"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/golang/note/","text":"Go Tips https://martin.baillie.id/wrote/gotchas-in-the-go-network-packages-defaults/","title":"Go Tips"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/golang/note/#go-tips","text":"https://martin.baillie.id/wrote/gotchas-in-the-go-network-packages-defaults/","title":"Go Tips"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/lua/","text":"Lua\u8bed\u8a00\u57fa\u7840 \u5b57\u7b26\u4e32\u8fde\u63a5\u7528 .. \u5b57\u7b26\u4e32\u957f\u5ea6\u7528 # \u6570\u5b57\u5b57\u7b26\u4e32\u76f8\u52a0\u4f1a\u8f6c\u6362\u4e3a\u6570\u5b57\u76f8\u52a0 Lua\u4e2d\u7684\u8868\u53ef\u4ee5\u662fhashmap\u3001\u53ef\u4ee5\u662f\u5173\u8054\u6570\u7ec4\uff0c\u6ca1\u521d\u59cb\u5316\u7684table\u662fnil\uff0c\u8868\u7684\u503c\u4e0d\u80fd\u662fnil Lua\u4e2d\u7684\u6570\u7ec4\u7d22\u5f15\u662f\u4ece1\u5f00\u59cb Lua\u4e2d\u7684\u4e3b\u8981\u5de5\u4f5c\u5728\u534f\u7a0b\u4e2d\uff0c\u4efb\u610f\u65f6\u523b\u53ea\u80fd\u8fd0\u884c\u4e00\u4e2a\u534f\u7a0b\uff0c\u5e76\u4e14\u5904\u4e8e\u8fd0\u884c\u72b6\u6001\u7684\u534f\u7a0b\u53ea\u6709\u5728\u88ab\u6302\u8d77\u65f6\u624d\u4f1a\u505c\u6b62\u3002 userdata\u662f\u4e00\u79cd\u7528\u6237\u81ea\u5b9a\u4e49\u7c7b\u578b\uff0c\u7531\u5e94\u7528\u7a0b\u5e8f\u6216\u8005C++\u521b\u5efa\u7684\u7c7b\u578b\uff0c\u53ef\u4ee5\u5c06\u4efb\u610fC++\u7684\u4efb\u610f\u6570\u636e\u7c7b\u578b\u7684\u6570\u636e\u8f6c\u5b58\u50a8\u5728Lua\u53d8\u91cf\u4e2d ipairs\u548cpairs\u90fd\u662f\u8fed\u4ee3\u5668\uff0c\u5176\u4e2dipars\u53ea\u8fed\u4ee3\u7d22\u5f15\u7c7b\u578b\u7684\u5143\u7d20\uff0cpairs\u5219\u662f\u6240\u6709 module\u673a\u5236\u672c\u8d28\u4e0a\u5c31\u662f\u4e00\u4e2amodule\u8868\uff0c\u5c06\u9700\u8981\u66b4\u9732\u51fa\u6765\u7684\u65b9\u6cd5\u586b\u5165module\u8868\u4e2d\u5373\u53ef lua\u4e2d\u7684goto\u8bed\u53e5\u5b58\u5728\u4e00\u4e9b\u9650\u5236 \u4e0d\u80fdjump\u5230block\u4e2d\uff0c\u56e0\u4e3alabel\u5982\u679c\u5728block\u4e2d\uff0c\u5bf9\u5916\u5c31\u4e0d\u53ef\u89c1\u4e86 \u4e0d\u80fd\u8df3\u51fa\u51fd\u6570 \u4e0d\u80fdjump\u5230\u4e00\u4e2a\u672c\u5730\u53d8\u91cf\u7684\u4f5c\u7528\u57df\u4e2d repeat\u5173\u952e\u5b57 return \u5173\u952e\u5b57 For syntactic reasons, a return can appear only as the last statement of a block: in other words, as the last statement in our chunk or just before an end, an else, or an until. For instance, in the next example, return is the last statement of the then block: Lua\u539f\u7406 Lua\u4e2d\u4e00\u6bb5\u53ef\u4ee5\u88ab\u89e3\u91ca\u5668\u89e3\u91ca\u6267\u884c\u7684\u4ee3\u7801\u53eb\u505aChunk\uff0cLuac\u5c06\u6e90\u4ee3\u7801\u7ffb\u8bd1\u6210\u4e8c\u8fdb\u5236\u7684Chunk\uff0c\u7136\u540e\u4ea4\u7531Lua\u6765\u89e3\u91ca\u8fd0\u884c Lua\u7f16\u8bd1\u5668\u662f\u4ee5\u51fd\u6570\u4e3a\u5355\u4f4d\u8fdb\u884c\u7f16\u8bd1\uff0c\u6bcf\u4e00\u4e2a\u51fd\u6570\u4f1a\u88abLua\u7f16\u8bd1\u5668\u7f16\u8bd1\u4e3a\u4e00\u4e2a\u5185\u90e8\u7ed3\u6784\uff0c\u8fd9\u4e2a\u7ed3\u6784\u53eb\u505a\u539f\u578b\uff0c \u4e3b\u8981\u5305\u542b\u516d\u4e2a\u90e8\u5206: \u51fd\u6570\u7684\u57fa\u672c\u4fe1\u606f(\u53c2\u6570\u6570\u91cf\u3001\u5c40\u90e8\u53d8\u91cf\u7b49)\u3001\u5b57\u8282\u7801\u3001\u5e38\u91cf\u8868\u3001Upvalue\u8868\u3001\u8c03\u8bd5\u4fe1\u606f\u3001\u5b50\u51fd\u6570\u539f\u578b\u8868 1 2 3 4 5 6 7 8 print ( \"Hello World\" ) \u8f6c\u6362\u4e3a : function main (...) print ( \"Hello World\" ) return end \u4f7f\u7528\u4e24\u4e2a -l \u9009\u9879\u53ef\u4ee5\u8fdb\u5165\u8be6\u7ec6\u6a21\u5f0f\uff0c\u6253\u5370\u51fa\u5e38\u91cf\u8868\u3001\u5c40\u90e8\u53d8\u91cf\u8868\u3001Upvalue\u8868\u7b49\u4fe1\u606f luac -l -l hello.lua 1 2 3 4 5 6 7 8 9 10 11 12 main < hello . lua : 0 , 0 > ( 4 instructions at 0x7f8440c031c0 ) 0 + params , 2 slots , 1 upvalue , 0 locals , 2 constants , 0 functions 1 [ 1 ] GETTABUP 0 0 - 1 ; _ENV \"print\" 2 [ 1 ] LOADK 1 - 2 ; \"Hello World\" 3 [ 1 ] CALL 0 2 1 4 [ 1 ] RETURN 0 1 constants ( 2 ) for 0x7f8440c031c0 : 1 \"print\" 2 \"Hello World\" locals ( 0 ) for 0x7f8440c031c0 : upvalues ( 1 ) for 0x7f8440c031c0 : 0 _ENV 1 0 \u4e00\u4e2a\u4e8c\u8fdb\u5236chunk\u4e3b\u8981\u7531\u5934\u90e8\u3001\u4e3b\u51fd\u6570\u4e2d\u7684upvalues\u8868\u7684\u6570\u91cf\u3001\u51fd\u6570\u539f\u578b\u7b49\u4e09\u4e2a\u90e8\u5206\u7ec4\u6210\uff0c\u5176\u4e2d\u5934\u90e8\u603b\u517130\u4e2a\u5b57\u8282\uff0c\u5305\u542b\u4e86 \u7b7e\u540d\u3001\u7248\u672c\u53f7\u3001\u683c\u5f0f\u53f7\u3001LUAC_DATA\u3001\u5404\u79cd\u6570\u636e\u7c7b\u578b\u5360\u7528\u7684\u5b57\u8282\u6570\u3001\u4ee5\u53ca\u5927\u5c0f\u7aef\u3001\u6d6e\u70b9\u6570\u683c\u5f0f\u8bc6\u522b\u4fe1\u606f\u7b49\u3002\u7b7e\u540d\u7684\u503c\u662f 0x1B4C7561 \uff0c\u5176 \u5b57\u9762\u91cf\u7684\u5f62\u5f0f\u5c31\u662f \\x1bLua \uff0c\u7248\u672c\u53f7\u7531\u4e09\u4e2a\u90e8\u5206\u7ec4\u6210\u3001Major Version\u3001Minor Verison\u3001Release Version\uff0c\b\u53ea\u4f1a\u4fdd\u5b58 Major\u548cMinor\u7684\u7248\u672c\u53f7\uff0c\u56e0\u4e3aRelease\u53f7\u53ea\u8868\u793abug\u4fee\u590d\uff0c\u4e0d\u5f71\u54cd\u4e8c\u8fdb\u5236\u683c\u5f0f\u3002chunk\u683c\u5f0f\u53f7\u9ed8\u8ba4\u662f0\uff0c\u8868\u793achunk\u7684\u683c\u5f0f\u3002 LUAC_DATA\u5360\u516d\u4e2a\u5b57\u8282\uff0c\u524d\u4e8c\u4e2a\u5b57\u8282\u662f0x1993\u8fd9\u662flua\u7684\u53d1\u5e03\u5e74\u4efd\u3001\u540e\u9762\u56db\u4e2a\u5b57\u8282\u662f0x0D\u30010x0A\u30010x1\u30010A\u3002\u5269\u4e0b\u7684\u5c31\u662fcint\u3001size_t\u3001Lua\u865a\u62df\u673a\u6307\u4ee4\u3001lua\u6574\u6570\u3001 lua\u6d6e\u70b9\u6570\u7b49\u4e94\u79cd\u6570\u636e\u7c7b\u578b\u7684\u5360\u7528\u7684\u5b57\u8282\u6570\u5927\u5c0f\u3002\u63a5\u7740\u4f1a\u6709\u4e00\u4e2aLUAC_INT\uff0c\u5176\u503c\u4e3a0x5678\uff0c 1 2 3 4 5 6 7 8 9 10 $ xxd -u -g 1 luac.out 00000000 : 1B 4C 75 61 53 00 19 93 0D 0A 1A 0A 04 08 04 08 .LuaS........... 00000010 : 08 78 56 00 00 00 00 00 00 00 00 00 00 00 28 77 .xV........... ( w 00000020 : 40 01 0B 40 68 65 6C 6C 6F 2E 6C 75 61 00 00 00 @..@hello.lua... 00000030 : 00 00 00 00 00 00 01 02 04 00 00 00 06 00 40 00 ..............@. 00000040 : 41 40 00 00 24 40 00 01 26 00 80 00 02 00 00 00 A@.. $@ .. & ....... 00000050 : 04 06 70 72 69 6E 74 04 0C 48 65 6C 6C 6F 20 57 ..print..Hello W 00000060 : 6F 72 6C 64 01 00 00 00 01 00 00 00 00 00 04 00 orld............ 00000070 : 00 00 01 00 00 00 01 00 00 00 01 00 00 00 01 00 ................ 00000080 : 00 00 00 00 00 00 01 00 00 00 05 5F 45 4E 56 ..........._ENV \u51fd\u6570\u539f\u578b\u4e3b\u8981\u5305\u542b\u4e86\u51fd\u6570\u7684\u57fa\u672c\u4fe1\u606f\u3001\u6307\u4ee4\u8868\u3001\u5e38\u91cf\u8868\u3001upvalue\u8868\u3001\u5b50\u51fd\u6570\u539f\u578b\u8868\u4ee5\u53ca\u8c03\u8bd5\u4fe1\u606f\u7b49\u3002 \u57fa\u672c\u4fe1\u606f\u5305\u62ec\u6e90\u6587\u4ef6\u540d\u3001\u8d77\u6b62\u884c\u53f7\u3001\u56fa\u5b9a\u53c2\u6570\u4e2a\u6570\u3001\u662f\u5426\u662fvararg\u51fd\u6570\u4ee5\u53ca\u8fd0\u884c\u51fd\u6570\u6240\u5fc5\u8981\u7684\u5bc4\u5b58\u5668\u6570\u91cf \u8c03\u8bd5\u4fe1\u606f\u5305\u62ec\u884c\u53f7\u8868\u3001\u5c40\u90e8\u53d8\u91cf\u8868\u4ee5\u53caupvalue\u540d\u5217\u8868\u7b49\u3002 Lua \u6307\u4ee4 Lua\u865a\u62df\u673a\u6307\u4ee4\u53ef\u4ee5\u5206\u4e3a\u56db\u7c7b\u3001\u5206\u522b\u5bf9\u5e94\u56db\u79cd\u7f16\u7801\u6a21\u5f0f:iABC\u3001iABx\u3001iAsBx\u3001iAx iABC \u53ef\u4ee5\u643a\u5e26A\u3001B\u3001C\u4e09\u4e2a\u64cd\u4f5c\u6570\uff0c\u5206\u522b\u5360\u75288\u30019\u30019\u4e2a\u6bd4\u7279 iABx \u53ef\u4ee5\u643a\u5e26A\u548cBx\u4e24\u4e2a\u64cd\u4f5c\u6570\u3001\u5206\u522b\u5360\u75288\u548c18\u4e2a\u6bd4\u7279 iAsBx \u53ef\u4ee5\u643a\u5e26A\u548csBx\u4e24\u4e2a\u64cd\u4f5c\u6570 iAx \u53ea\u643a\u5e26\u4e00\u4e2a\u64cd\u4f5c\u6570\uff0c\u5360\u752826\u4e2a\u6bd4\u7279 \u53ea\u6709iAsBx\u6a21\u5f0f\u4e0b\u7684sBx\u64cd\u4f5c\u6570\u4f1a\u88ab\u89e3\u91ca\u6210\u6709\u7b26\u53f7\u6574\u6570\uff0c\u5176\u4ed6\u60c5\u51b5\u4e0b\u64cd\u4f5c\u6570\u90fd\u89e3\u91ca\u4e3a\u65e0\u7b26\u53f7\u6574\u6570\u3002 Lua API lua_State\u662f\u5bf9\u89e3\u91ca\u5668\u72b6\u6001\u7684\u5c01\u88c5\uff0c\u53ef\u4ee5\u5728\u591a\u4e2a\u89e3\u91ca\u5668\u5b9e\u4f8b\u4e4b\u95f4\u8fdb\u884c\u5207\u6362\uff0c\u4f7f\u7528lua_newstate\u7c7b\u521b\u5efalua_State\u5b9e\u4f8b Lua\u4e2d\u4e00\u5171\u652f\u63018\u79cd\u6570\u636e\u7c7b\u578b\uff0c\u5206\u522b\u662fnil\u3001\u5e03\u5c14\u3001\u6570\u5b57\u3001\u5b57\u7b26\u4e32\u3001\u8868\u3001\u51fd\u6570\u3001\u7ebf\u7a0b\u3001\u7528\u6237\u6570\u636e Lua C API Lua\u4e0eC/C++\u4ea4\u4e92\u7684\u6838\u5fc3\u5728\u4e8e\u865a\u62df\u6808\uff0c\u4e3a\u4ec0\u4e48\u8fd9\u4e48\u8bf4\u5462? \u5728lua\u4e2d\u6211\u4eec\u53ef\u4ee5\u5f88\u7b80\u5355\u7684\u901a\u8fc7 t[k] = v \u6765\u64cd\u4f5c\u4e00\u4e2a\u8868\uff0c\u5e76\u4e14k\u548cv\u662f\u4efb\u610flua\u7c7b\u578b\uff0c \u4f46\u662f\u5728C\u4e2d\u8981\u60f3\u5b9e\u73b0\u8fd9\u4e2a\u80fd\u529b\u5c31\u6bd4\u8f83\u56f0\u96be\u4e86\uff0cC\u4e2d\u7684\u7c7b\u578b\u90fd\u662f\u9759\u6001\u7684\uff0c\u6211\u4eec\u53ef\u80fd\u9700\u8981\u63d0\u4f9b\u4e0d\u540clua\u7c7b\u578b\u7684\u91cd\u8f7d\u51fd\u6570\u624d\u80fd\u5b9e\u73b0\u8fd9\u4e2a\u8868\u7684\u8d4b\u503c\u64cd\u4f5c\u3002 \u6216\u8005\u662f\u63d0\u4f9b\u4e00\u4e2a\u590d\u5408\u7c7b\u578b\uff0c\u4ed6\u53ef\u4ee5\u8868\u793a\u4efb\u4f55lua\u7c7b\u578b\u3002 1 2 3 4 5 6 7 8 lua_Integer luaL_checkinteger ( lua_State * L , int arg ); \u68c0\u67e5\u51fd\u6570\u7684\u7b2c arg \u4e2a\u53c2\u6570\u662f\u5426\u662f\u4e00\u4e2a\u6574\u6570\uff08\u6216\u662f\u53ef\u4ee5\u88ab\u8f6c\u6362\u4e3a\u4e00\u4e2a\u6574\u6570\uff09\u5e76\u4ee5 lua_Integer \u7c7b\u578b\u8fd4\u56de\u8fd9\u4e2a\u6574\u6570\u503c\u3002 void luaL_argcheck ( lua_State * L , int cond , int arg , const char * extramsg ); \u68c0\u67e5 cond \u662f\u5426\u4e3a\u771f\u3002\u5982\u679c\u4e0d\u4e3a\u771f\uff0c\u4ee5\u6807\u51c6\u4fe1\u606f\u5f62\u5f0f\u629b\u51fa\u4e00\u4e2a\u9519\u8bef\uff08\u53c2\u89c1 luaL_argerror \uff09\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 void lua_pushnil ( lua_State * L ); void lua_pushboolea ( lua_State * L , int bool ); void lua_pushnumber ( lua_State * L , lua_Number n ); void lua_pushinteger ( lua_State * L , lua_Integer n ); void lua_pushlstring ( lua_State * L , const char * s , size_t len ); void lua_pushstring ( lua_State * L , const char * s ); // \u9ed8\u8ba4\u7684 lua\u6808\u5927\u5c0f\u662f20 \uff0c\u901a\u8fc7 LUA_MINISTACK\u5b9a\u4e49 int lua_checkstack ( lua_State * L , int sz ); // \u5bf9 lua_checkstack\u7684\u5c01\u88c5 \uff0c\u4e0d\u8fd4\u56de\u9519\u8bef\u7801\uff0c\u4f1a\u8fd4\u56de\u9519\u8bef\u5185\u5bb9 void luaL_checkstack ( lua_State * L , int sz , const char * msg ); // \u68c0\u67e5\u5806\u6808\u6307\u5b9a\u4f4d\u7f6e\u7684\u503c\u662f\u5426\u662f\u6307\u5b9a\u7c7b\u578b int lua_is * ( lua_State * L , int index ); 1 typedef int ( * lua_CFunction ) ( lua_State * L ); \u7528\u6765\u521b\u5efa\u4e00\u4e2a lua_State \uff0c\u4e00\u4e2a lua_State \u5c31\u8868\u793a\u4e00\u4e2alua\u865a\u62df\u673a\uff0c\u6240\u6709\u7684lua API\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u90fd\u662f lua_State 1 2 lua_open () // lua5 .1 \u7684\u8bed\u6cd5 luaL_newstate () // \u6700\u65b0\u7684\u7528\u6cd5 \u7528\u6765\u52a0\u8f7d\u6807\u51c6\u5e93 1 luaL_openlibs \u8fd0\u884clua\u811a\u672c 1 2 3 4 int luaL_dostring ( lua_State * L , const char * str ); Loads and runs the given string . It is defined as the following macro : ( luaL_loadstring ( L , str ) || lua_pcall ( L , 0 , LUA_MULTRET , 0 )) 1 2 3 4 LUA_GCCOUNT LUA_GCCOUNTB lua_gc","title":"Index"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/lua/#lua","text":"\u5b57\u7b26\u4e32\u8fde\u63a5\u7528 .. \u5b57\u7b26\u4e32\u957f\u5ea6\u7528 # \u6570\u5b57\u5b57\u7b26\u4e32\u76f8\u52a0\u4f1a\u8f6c\u6362\u4e3a\u6570\u5b57\u76f8\u52a0 Lua\u4e2d\u7684\u8868\u53ef\u4ee5\u662fhashmap\u3001\u53ef\u4ee5\u662f\u5173\u8054\u6570\u7ec4\uff0c\u6ca1\u521d\u59cb\u5316\u7684table\u662fnil\uff0c\u8868\u7684\u503c\u4e0d\u80fd\u662fnil Lua\u4e2d\u7684\u6570\u7ec4\u7d22\u5f15\u662f\u4ece1\u5f00\u59cb Lua\u4e2d\u7684\u4e3b\u8981\u5de5\u4f5c\u5728\u534f\u7a0b\u4e2d\uff0c\u4efb\u610f\u65f6\u523b\u53ea\u80fd\u8fd0\u884c\u4e00\u4e2a\u534f\u7a0b\uff0c\u5e76\u4e14\u5904\u4e8e\u8fd0\u884c\u72b6\u6001\u7684\u534f\u7a0b\u53ea\u6709\u5728\u88ab\u6302\u8d77\u65f6\u624d\u4f1a\u505c\u6b62\u3002 userdata\u662f\u4e00\u79cd\u7528\u6237\u81ea\u5b9a\u4e49\u7c7b\u578b\uff0c\u7531\u5e94\u7528\u7a0b\u5e8f\u6216\u8005C++\u521b\u5efa\u7684\u7c7b\u578b\uff0c\u53ef\u4ee5\u5c06\u4efb\u610fC++\u7684\u4efb\u610f\u6570\u636e\u7c7b\u578b\u7684\u6570\u636e\u8f6c\u5b58\u50a8\u5728Lua\u53d8\u91cf\u4e2d ipairs\u548cpairs\u90fd\u662f\u8fed\u4ee3\u5668\uff0c\u5176\u4e2dipars\u53ea\u8fed\u4ee3\u7d22\u5f15\u7c7b\u578b\u7684\u5143\u7d20\uff0cpairs\u5219\u662f\u6240\u6709 module\u673a\u5236\u672c\u8d28\u4e0a\u5c31\u662f\u4e00\u4e2amodule\u8868\uff0c\u5c06\u9700\u8981\u66b4\u9732\u51fa\u6765\u7684\u65b9\u6cd5\u586b\u5165module\u8868\u4e2d\u5373\u53ef lua\u4e2d\u7684goto\u8bed\u53e5\u5b58\u5728\u4e00\u4e9b\u9650\u5236 \u4e0d\u80fdjump\u5230block\u4e2d\uff0c\u56e0\u4e3alabel\u5982\u679c\u5728block\u4e2d\uff0c\u5bf9\u5916\u5c31\u4e0d\u53ef\u89c1\u4e86 \u4e0d\u80fd\u8df3\u51fa\u51fd\u6570 \u4e0d\u80fdjump\u5230\u4e00\u4e2a\u672c\u5730\u53d8\u91cf\u7684\u4f5c\u7528\u57df\u4e2d repeat\u5173\u952e\u5b57 return \u5173\u952e\u5b57 For syntactic reasons, a return can appear only as the last statement of a block: in other words, as the last statement in our chunk or just before an end, an else, or an until. For instance, in the next example, return is the last statement of the then block:","title":"Lua\u8bed\u8a00\u57fa\u7840"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/lua/#lua_1","text":"Lua\u4e2d\u4e00\u6bb5\u53ef\u4ee5\u88ab\u89e3\u91ca\u5668\u89e3\u91ca\u6267\u884c\u7684\u4ee3\u7801\u53eb\u505aChunk\uff0cLuac\u5c06\u6e90\u4ee3\u7801\u7ffb\u8bd1\u6210\u4e8c\u8fdb\u5236\u7684Chunk\uff0c\u7136\u540e\u4ea4\u7531Lua\u6765\u89e3\u91ca\u8fd0\u884c Lua\u7f16\u8bd1\u5668\u662f\u4ee5\u51fd\u6570\u4e3a\u5355\u4f4d\u8fdb\u884c\u7f16\u8bd1\uff0c\u6bcf\u4e00\u4e2a\u51fd\u6570\u4f1a\u88abLua\u7f16\u8bd1\u5668\u7f16\u8bd1\u4e3a\u4e00\u4e2a\u5185\u90e8\u7ed3\u6784\uff0c\u8fd9\u4e2a\u7ed3\u6784\u53eb\u505a\u539f\u578b\uff0c \u4e3b\u8981\u5305\u542b\u516d\u4e2a\u90e8\u5206: \u51fd\u6570\u7684\u57fa\u672c\u4fe1\u606f(\u53c2\u6570\u6570\u91cf\u3001\u5c40\u90e8\u53d8\u91cf\u7b49)\u3001\u5b57\u8282\u7801\u3001\u5e38\u91cf\u8868\u3001Upvalue\u8868\u3001\u8c03\u8bd5\u4fe1\u606f\u3001\u5b50\u51fd\u6570\u539f\u578b\u8868 1 2 3 4 5 6 7 8 print ( \"Hello World\" ) \u8f6c\u6362\u4e3a : function main (...) print ( \"Hello World\" ) return end \u4f7f\u7528\u4e24\u4e2a -l \u9009\u9879\u53ef\u4ee5\u8fdb\u5165\u8be6\u7ec6\u6a21\u5f0f\uff0c\u6253\u5370\u51fa\u5e38\u91cf\u8868\u3001\u5c40\u90e8\u53d8\u91cf\u8868\u3001Upvalue\u8868\u7b49\u4fe1\u606f luac -l -l hello.lua 1 2 3 4 5 6 7 8 9 10 11 12 main < hello . lua : 0 , 0 > ( 4 instructions at 0x7f8440c031c0 ) 0 + params , 2 slots , 1 upvalue , 0 locals , 2 constants , 0 functions 1 [ 1 ] GETTABUP 0 0 - 1 ; _ENV \"print\" 2 [ 1 ] LOADK 1 - 2 ; \"Hello World\" 3 [ 1 ] CALL 0 2 1 4 [ 1 ] RETURN 0 1 constants ( 2 ) for 0x7f8440c031c0 : 1 \"print\" 2 \"Hello World\" locals ( 0 ) for 0x7f8440c031c0 : upvalues ( 1 ) for 0x7f8440c031c0 : 0 _ENV 1 0 \u4e00\u4e2a\u4e8c\u8fdb\u5236chunk\u4e3b\u8981\u7531\u5934\u90e8\u3001\u4e3b\u51fd\u6570\u4e2d\u7684upvalues\u8868\u7684\u6570\u91cf\u3001\u51fd\u6570\u539f\u578b\u7b49\u4e09\u4e2a\u90e8\u5206\u7ec4\u6210\uff0c\u5176\u4e2d\u5934\u90e8\u603b\u517130\u4e2a\u5b57\u8282\uff0c\u5305\u542b\u4e86 \u7b7e\u540d\u3001\u7248\u672c\u53f7\u3001\u683c\u5f0f\u53f7\u3001LUAC_DATA\u3001\u5404\u79cd\u6570\u636e\u7c7b\u578b\u5360\u7528\u7684\u5b57\u8282\u6570\u3001\u4ee5\u53ca\u5927\u5c0f\u7aef\u3001\u6d6e\u70b9\u6570\u683c\u5f0f\u8bc6\u522b\u4fe1\u606f\u7b49\u3002\u7b7e\u540d\u7684\u503c\u662f 0x1B4C7561 \uff0c\u5176 \u5b57\u9762\u91cf\u7684\u5f62\u5f0f\u5c31\u662f \\x1bLua \uff0c\u7248\u672c\u53f7\u7531\u4e09\u4e2a\u90e8\u5206\u7ec4\u6210\u3001Major Version\u3001Minor Verison\u3001Release Version\uff0c\b\u53ea\u4f1a\u4fdd\u5b58 Major\u548cMinor\u7684\u7248\u672c\u53f7\uff0c\u56e0\u4e3aRelease\u53f7\u53ea\u8868\u793abug\u4fee\u590d\uff0c\u4e0d\u5f71\u54cd\u4e8c\u8fdb\u5236\u683c\u5f0f\u3002chunk\u683c\u5f0f\u53f7\u9ed8\u8ba4\u662f0\uff0c\u8868\u793achunk\u7684\u683c\u5f0f\u3002 LUAC_DATA\u5360\u516d\u4e2a\u5b57\u8282\uff0c\u524d\u4e8c\u4e2a\u5b57\u8282\u662f0x1993\u8fd9\u662flua\u7684\u53d1\u5e03\u5e74\u4efd\u3001\u540e\u9762\u56db\u4e2a\u5b57\u8282\u662f0x0D\u30010x0A\u30010x1\u30010A\u3002\u5269\u4e0b\u7684\u5c31\u662fcint\u3001size_t\u3001Lua\u865a\u62df\u673a\u6307\u4ee4\u3001lua\u6574\u6570\u3001 lua\u6d6e\u70b9\u6570\u7b49\u4e94\u79cd\u6570\u636e\u7c7b\u578b\u7684\u5360\u7528\u7684\u5b57\u8282\u6570\u5927\u5c0f\u3002\u63a5\u7740\u4f1a\u6709\u4e00\u4e2aLUAC_INT\uff0c\u5176\u503c\u4e3a0x5678\uff0c 1 2 3 4 5 6 7 8 9 10 $ xxd -u -g 1 luac.out 00000000 : 1B 4C 75 61 53 00 19 93 0D 0A 1A 0A 04 08 04 08 .LuaS........... 00000010 : 08 78 56 00 00 00 00 00 00 00 00 00 00 00 28 77 .xV........... ( w 00000020 : 40 01 0B 40 68 65 6C 6C 6F 2E 6C 75 61 00 00 00 @..@hello.lua... 00000030 : 00 00 00 00 00 00 01 02 04 00 00 00 06 00 40 00 ..............@. 00000040 : 41 40 00 00 24 40 00 01 26 00 80 00 02 00 00 00 A@.. $@ .. & ....... 00000050 : 04 06 70 72 69 6E 74 04 0C 48 65 6C 6C 6F 20 57 ..print..Hello W 00000060 : 6F 72 6C 64 01 00 00 00 01 00 00 00 00 00 04 00 orld............ 00000070 : 00 00 01 00 00 00 01 00 00 00 01 00 00 00 01 00 ................ 00000080 : 00 00 00 00 00 00 01 00 00 00 05 5F 45 4E 56 ..........._ENV \u51fd\u6570\u539f\u578b\u4e3b\u8981\u5305\u542b\u4e86\u51fd\u6570\u7684\u57fa\u672c\u4fe1\u606f\u3001\u6307\u4ee4\u8868\u3001\u5e38\u91cf\u8868\u3001upvalue\u8868\u3001\u5b50\u51fd\u6570\u539f\u578b\u8868\u4ee5\u53ca\u8c03\u8bd5\u4fe1\u606f\u7b49\u3002 \u57fa\u672c\u4fe1\u606f\u5305\u62ec\u6e90\u6587\u4ef6\u540d\u3001\u8d77\u6b62\u884c\u53f7\u3001\u56fa\u5b9a\u53c2\u6570\u4e2a\u6570\u3001\u662f\u5426\u662fvararg\u51fd\u6570\u4ee5\u53ca\u8fd0\u884c\u51fd\u6570\u6240\u5fc5\u8981\u7684\u5bc4\u5b58\u5668\u6570\u91cf \u8c03\u8bd5\u4fe1\u606f\u5305\u62ec\u884c\u53f7\u8868\u3001\u5c40\u90e8\u53d8\u91cf\u8868\u4ee5\u53caupvalue\u540d\u5217\u8868\u7b49\u3002","title":"Lua\u539f\u7406"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/lua/#lua_2","text":"Lua\u865a\u62df\u673a\u6307\u4ee4\u53ef\u4ee5\u5206\u4e3a\u56db\u7c7b\u3001\u5206\u522b\u5bf9\u5e94\u56db\u79cd\u7f16\u7801\u6a21\u5f0f:iABC\u3001iABx\u3001iAsBx\u3001iAx iABC \u53ef\u4ee5\u643a\u5e26A\u3001B\u3001C\u4e09\u4e2a\u64cd\u4f5c\u6570\uff0c\u5206\u522b\u5360\u75288\u30019\u30019\u4e2a\u6bd4\u7279 iABx \u53ef\u4ee5\u643a\u5e26A\u548cBx\u4e24\u4e2a\u64cd\u4f5c\u6570\u3001\u5206\u522b\u5360\u75288\u548c18\u4e2a\u6bd4\u7279 iAsBx \u53ef\u4ee5\u643a\u5e26A\u548csBx\u4e24\u4e2a\u64cd\u4f5c\u6570 iAx \u53ea\u643a\u5e26\u4e00\u4e2a\u64cd\u4f5c\u6570\uff0c\u5360\u752826\u4e2a\u6bd4\u7279 \u53ea\u6709iAsBx\u6a21\u5f0f\u4e0b\u7684sBx\u64cd\u4f5c\u6570\u4f1a\u88ab\u89e3\u91ca\u6210\u6709\u7b26\u53f7\u6574\u6570\uff0c\u5176\u4ed6\u60c5\u51b5\u4e0b\u64cd\u4f5c\u6570\u90fd\u89e3\u91ca\u4e3a\u65e0\u7b26\u53f7\u6574\u6570\u3002","title":"Lua \u6307\u4ee4"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/lua/#lua-api","text":"lua_State\u662f\u5bf9\u89e3\u91ca\u5668\u72b6\u6001\u7684\u5c01\u88c5\uff0c\u53ef\u4ee5\u5728\u591a\u4e2a\u89e3\u91ca\u5668\u5b9e\u4f8b\u4e4b\u95f4\u8fdb\u884c\u5207\u6362\uff0c\u4f7f\u7528lua_newstate\u7c7b\u521b\u5efalua_State\u5b9e\u4f8b Lua\u4e2d\u4e00\u5171\u652f\u63018\u79cd\u6570\u636e\u7c7b\u578b\uff0c\u5206\u522b\u662fnil\u3001\u5e03\u5c14\u3001\u6570\u5b57\u3001\u5b57\u7b26\u4e32\u3001\u8868\u3001\u51fd\u6570\u3001\u7ebf\u7a0b\u3001\u7528\u6237\u6570\u636e","title":"Lua API"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/lua/#lua-c-api","text":"Lua\u4e0eC/C++\u4ea4\u4e92\u7684\u6838\u5fc3\u5728\u4e8e\u865a\u62df\u6808\uff0c\u4e3a\u4ec0\u4e48\u8fd9\u4e48\u8bf4\u5462? \u5728lua\u4e2d\u6211\u4eec\u53ef\u4ee5\u5f88\u7b80\u5355\u7684\u901a\u8fc7 t[k] = v \u6765\u64cd\u4f5c\u4e00\u4e2a\u8868\uff0c\u5e76\u4e14k\u548cv\u662f\u4efb\u610flua\u7c7b\u578b\uff0c \u4f46\u662f\u5728C\u4e2d\u8981\u60f3\u5b9e\u73b0\u8fd9\u4e2a\u80fd\u529b\u5c31\u6bd4\u8f83\u56f0\u96be\u4e86\uff0cC\u4e2d\u7684\u7c7b\u578b\u90fd\u662f\u9759\u6001\u7684\uff0c\u6211\u4eec\u53ef\u80fd\u9700\u8981\u63d0\u4f9b\u4e0d\u540clua\u7c7b\u578b\u7684\u91cd\u8f7d\u51fd\u6570\u624d\u80fd\u5b9e\u73b0\u8fd9\u4e2a\u8868\u7684\u8d4b\u503c\u64cd\u4f5c\u3002 \u6216\u8005\u662f\u63d0\u4f9b\u4e00\u4e2a\u590d\u5408\u7c7b\u578b\uff0c\u4ed6\u53ef\u4ee5\u8868\u793a\u4efb\u4f55lua\u7c7b\u578b\u3002 1 2 3 4 5 6 7 8 lua_Integer luaL_checkinteger ( lua_State * L , int arg ); \u68c0\u67e5\u51fd\u6570\u7684\u7b2c arg \u4e2a\u53c2\u6570\u662f\u5426\u662f\u4e00\u4e2a\u6574\u6570\uff08\u6216\u662f\u53ef\u4ee5\u88ab\u8f6c\u6362\u4e3a\u4e00\u4e2a\u6574\u6570\uff09\u5e76\u4ee5 lua_Integer \u7c7b\u578b\u8fd4\u56de\u8fd9\u4e2a\u6574\u6570\u503c\u3002 void luaL_argcheck ( lua_State * L , int cond , int arg , const char * extramsg ); \u68c0\u67e5 cond \u662f\u5426\u4e3a\u771f\u3002\u5982\u679c\u4e0d\u4e3a\u771f\uff0c\u4ee5\u6807\u51c6\u4fe1\u606f\u5f62\u5f0f\u629b\u51fa\u4e00\u4e2a\u9519\u8bef\uff08\u53c2\u89c1 luaL_argerror \uff09\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 void lua_pushnil ( lua_State * L ); void lua_pushboolea ( lua_State * L , int bool ); void lua_pushnumber ( lua_State * L , lua_Number n ); void lua_pushinteger ( lua_State * L , lua_Integer n ); void lua_pushlstring ( lua_State * L , const char * s , size_t len ); void lua_pushstring ( lua_State * L , const char * s ); // \u9ed8\u8ba4\u7684 lua\u6808\u5927\u5c0f\u662f20 \uff0c\u901a\u8fc7 LUA_MINISTACK\u5b9a\u4e49 int lua_checkstack ( lua_State * L , int sz ); // \u5bf9 lua_checkstack\u7684\u5c01\u88c5 \uff0c\u4e0d\u8fd4\u56de\u9519\u8bef\u7801\uff0c\u4f1a\u8fd4\u56de\u9519\u8bef\u5185\u5bb9 void luaL_checkstack ( lua_State * L , int sz , const char * msg ); // \u68c0\u67e5\u5806\u6808\u6307\u5b9a\u4f4d\u7f6e\u7684\u503c\u662f\u5426\u662f\u6307\u5b9a\u7c7b\u578b int lua_is * ( lua_State * L , int index ); 1 typedef int ( * lua_CFunction ) ( lua_State * L ); \u7528\u6765\u521b\u5efa\u4e00\u4e2a lua_State \uff0c\u4e00\u4e2a lua_State \u5c31\u8868\u793a\u4e00\u4e2alua\u865a\u62df\u673a\uff0c\u6240\u6709\u7684lua API\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u90fd\u662f lua_State 1 2 lua_open () // lua5 .1 \u7684\u8bed\u6cd5 luaL_newstate () // \u6700\u65b0\u7684\u7528\u6cd5 \u7528\u6765\u52a0\u8f7d\u6807\u51c6\u5e93 1 luaL_openlibs \u8fd0\u884clua\u811a\u672c 1 2 3 4 int luaL_dostring ( lua_State * L , const char * str ); Loads and runs the given string . It is defined as the following macro : ( luaL_loadstring ( L , str ) || lua_pcall ( L , 0 , LUA_MULTRET , 0 )) 1 2 3 4 LUA_GCCOUNT LUA_GCCOUNTB lua_gc","title":"Lua C API"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/","text":"\u6bcf\u4e00\u4e2a\u5b58\u6d3b\u7684\u5b9e\u4f8b\u5bf9\u8c61\u90fd\u6709\u4e00\u4e2a\u552f\u4e00\u7684ID\u503c\uff0c\u4f46\u662f\u53ef\u80fd\u4f1a\u88ab\u590d\u7528\uff0c\u662f\u4e0d\u4fdd\u8bc1\u5728\u6574\u4e2a\u8fdb\u7a0b\u751f\u547d\u5468\u671f\u5185\u90fd\u662f\u552f\u4e00\u7684\u3002 dis\u6a21\u5757\u53ef\u7528\u4e8e\u53cd\u6c47\u7f16\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 In [ 1 ]: source = \"\"\" ...: print(\"hello, world!\") ...: print(1 + 2) ...: \"\"\" In [ 2 ]: code = compile ( source , \"demo\" , \"exec\" ) In [ 3 ]: import dis In [ 4 ]: dis . show_code ( code ) Name : < module > Filename : demo Argument count : 0 Kw - only arguments : 0 Number of locals : 0 Stack size : 2 Flags : NOFREE Constants : 0 : 'hello, world!' 1 : 3 2 : None Names : 0 : print In [ 5 ]: dis . dis ( code ) 2 0 LOAD_NAME 0 ( print ) 2 LOAD_CONST 0 ( 'hello, world!' ) 4 CALL_FUNCTION 1 6 POP_TOP 3 8 LOAD_NAME 0 ( print ) 10 LOAD_CONST 1 ( 3 ) 12 CALL_FUNCTION 1 14 POP_TOP 16 LOAD_CONST 2 ( None ) 18 RETURN_VALUE In [ 6 ]: exec ( code ) hello , world ! 3 py_compile\u6a21\u5757\u7528\u6765\u7f16\u8bd1\u4ee3\u7801\uff0c\u751f\u6210pyc\u6587\u4ef6\u3001compileall\u6a21\u5757\u7528\u4e8e\u7f16\u8bd1\u6574\u4e2a\u76ee\u5f55\u7b49 eval \u7528\u4e8e\u6267\u884c\u5355\u4e2a\u8868\u8fbe\u5f0f\u3001exec\u5219\u7528\u4e8e\u6267\u884c\u4ee3\u7801\u5757\uff0c\u65e0\u8bba\u662feval\u8fd8\u662fexec\u90fd\u9700\u8981\u643a\u5e26\u4e0a\u4e0b\u6587\u73af\u5883\uff0c\u9ed8\u8ba4\u76f4\u63a5\u4f7f\u7528\u5f53\u524d\u5168\u5c40\u548c\u672c\u5730\u540d\u5b57\u7a7a\u95f4\uff0c\u4e5f\u53ef\u4ee5\u6307\u5b9a\u540d\u5b57\u7a7a\u95f4 \u81ea\u5b9a\u4e49\u7c7b\u578b\u53ef\u4ee5\u91cd\u8f7d __bool__ \u548c __len__ \u6765\u5f71\u54cdbool\u8f6c\u6362\u7ed3\u679c\uff0c\u5bf9\u4e8e\u6570\u5b57\u96f6\u3001\u7a7a\u503c(None)\u3001\u7a7a\u5e8f\u5217\u3001\u7a7a\u5b57\u5178\u7b49\u88ab\u89c6\u4f5cFalse Enum\u679a\u4e3e\u7c7b\u578b \u9ed8\u8ba4\u662f\u6570\u5b57\u7c7b\u578b 1 2 3 4 5 6 7 8 9 10 11 In [ 49 ]: import enum In [ 50 ]: Color = enum . Enum ( \"Color\" , \"BLACK YELLOW BLUE RED\" ) In [ 51 ]: isinstance ( Color . BLACK , Color ) Out [ 51 ]: True In [ 52 ]: list ( Color ) Out [ 52 ]: [ < Color . BLACK : 1 > , < Color . YELLOW : 2 > , < Color . BLUE : 3 > , < Color . RED : 4 > ] In [ 53 ]: \u8fd8\u53ef\u4ee5\u901a\u8fc7\u7ee7\u627f\u6765\u81ea\u5b9a\u4e49\u591a\u79cd\u7c7b\u578b 1 Python\u4e2d\u6ca1\u6709\u6307\u9488\u548c\u5f15\u7528\uff0c\u5982\u679c\u9700\u8981\u5f15\u7528\u6570\u636e\u7684\u4e00\u90e8\u5206\u53ef\u4ee5\u4f7f\u7528 memoryview sys.intern \u5c06\u52a8\u6001\u5b57\u7b26\u4e32\u6c60\u5316\uff0c\u4ee5\u4fbf\u518d\u6b21\u590d\u7528 += vs + \u7684\u5dee\u5f02 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 >>> a = [ 1 , 2 ] >>> b = a >>> a = a + [ 3 , 4 ] >>> a [ 1 , 2 , 3 , 4 ] >>> b [ 1 , 2 ] >>> a = [ 1 , 2 ] >>> b = a >>> a += [ 3 , 4 ] >>> a [ 1 , 2 , 3 , 4 ] >>> b [ 1 , 2 , 3 , 4 ] >>> a is b True \u81ea\u5b9a\u4e49 __eq__ \u548c __lt__ \u7528\u6765\u5b9e\u73b0\u81ea\u5b9a\u4e49\u6392\u5e8f line_profiler\u3001memory_profiler pip3 install memory_profiler pip3 install line_profiler 1 2 3 4 5 6 7 8 @profile def test (): a = x [ 10 : - 10 ] b = x . split ( \",\" ) x = \"0,\" * ( 1 << 20 ) test () python3 - m memory_profiler main . py Class","title":"Index"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/#class","text":"","title":"Class"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/rust/","text":"\u8bed\u6cd5\u57fa\u7840 \u5e38\u89c1\u7684\u5c5e\u6027 #[allow(non_camel_case_types)] // \u5141\u8bb8\u975e\u9a7c\u5cf0\u547d\u540d\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u7c7b\u578b\u540d\u9700\u8981\u662f\u9a7c\u5cf0\u7c7b\u578b\uff0c\u5426\u5219\u4f1a\u6709\u8b66\u544a #![allow(overflowing_literals)] (TODO)Rust\u4e2d\u9ed8\u8ba4\u7684\u201c\u53d6\u5f15\u7528\u201d\u3001\u201c\u89e3\u5f15\u7528\u201d\u64cd\u4f5c\u662f\u4e92\u8865\u62b5\u6d88\u7684\u5173\u7cfb\uff0c \u4e92\u4e3a\u9006\u8fd0\u7b97\u3002\u4f46\u662f\uff0c\u5728Rust\u4e2d\uff0c\u53ea\u5141\u8bb8\u81ea\u5b9a\u4e49\u201c\u89e3\u5f15\u7528\u201d\uff0c\u4e0d\u5141\u8bb8\u81ea\u5b9a\u4e49\u201c\u53d6\u5f15\u7528\u201d\u3002 \u5982\u679c\u7c7b\u578b\u6709\u81ea\u5b9a\u4e49\u201c\u89e3\u5f15\u7528\u201d\uff0c\u90a3\u4e48\u5bf9\u5b83\u6267\u884c\u201c\u89e3\u5f15\u7528\u201d\u548c\u201c\u53d6\u5f15\u7528\u201d\u5c31\u4e0d\u518d\u662f\u4e92\u8865\u62b5\u6d88\u7684\u7ed3\u679c\u4e86\u3002\u5148 & \u540e * \u4ee5\u53ca\u5148 * \u540e & \u7684\u7ed3\u679c\u662f\u4e0d\u540c\u7684\u3002 \u51fd\u6570\u53c2\u6570\u53ef\u4ee5\u76f4\u63a5\u89e3\u6784\u4f5c\u4e3a\u4e00\u4e2a\u4e2a\u72ec\u7acb\u53c2\u6570 1 2 3 4 5 6 7 8 9 10 11 12 13 struct T { item1 : char , item2 : bool , } fn test ( T { item1 : arg1 , item2 : arg2 , } : T ) { println! ( \"{} {}\" , arg1 , arg2 ); } Closure \u9ed8\u8ba4\u662f\u5f15\u7528\u6355\u83b7\uff0c\u53ef\u4ee5\u901a\u8fc7move\u6765\u505atake Ownership\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u4e0a\u5e76\u4e0d\u4e00\u5b9a\u662fmove\uff0c\u6709\u53ef\u80fd\u662fcopy 1 2 3 4 5 6 7 8 9 10 11 12 13 pub trait Fn < Args > : FnMut < Args > { extern \"rust-call\" fn call ( & self , args : Args ) -> Self :: Output ; } pub trait FnMut < Args > : FnOnce < Args > { extern \"rust-call\" fn call_mut ( & mut self , args : Args ) -> Self :: Output ; } pub trait FnOnce < Args > { type Output ; extern \"rust-call\" fn call_once ( self , args : Args ) -> Self :: Output ; } try!\uff0c\u9047\u5230\u9519\u8bef\u7684\u65f6\u5019\u63d0\u524dreturn 1 2 3 4 5 6 7 8 9 let socket1 : TcpStream = try ! ( TcpStream :: connect ( \"127.0.0.1:8000\" )); // Is equivalent to... let maybe_socket : Result < TcpStream > = TcpStream :: connect ( \"127.0.0.1:8000\" ); let socket2 : TcpStream = match maybe_socket { Ok ( val ) => val , Err ( err ) => { return Err ( err ) } }; Option::unwrap\uff0c\u65b9\u4fbf\u4e86\u5bf9Option \u8fd4\u56de\u503c\u7684\u5904\u7406\uff0c\u4f46\u662f\u5982\u679c\u662fNone\u4f1a\u5bfc\u81f4\u6267\u884c panic 1 2 3 4 5 6 fn unwrap < T > ( & self ) -> T { match * self { None => panic! ( \"Called `Option::unwrap()` on a `None` value\" ), Some ( value ) => value , } } \u4e3a\u4ec0\u4e48&String\u662f&str?\uff0c\u56e0\u4e3aString\u5b9e\u73b0\u4e86Deref trait 1 2 3 4 pub trait Deref { type Target : ? Sized ; fn deref ( & self ) -> & Self :: Target ; } String\u8f6c&str\uff0c\u4e0d\u80fd\u76f4\u63a5\u4f7f\u7528str\uff0c\u5fc5\u987b\u662f&str\uff0cstr\u662f\u4e00\u4e2aunsized\u7684\u7c7b\u578b 1 2 let addr = \"192.168.0.1:3000\" . to_string (); TcpStream :: connect ( &* addr ); #[derive(...)] \u544a\u8bc9\u7f16\u8bd1\u5668\u63d2\u5165trait\u7684\u9ed8\u8ba4\u5b9e\u73b0 Sized(\u7c7b\u578b\u5fc5\u6709\u6709\u5e38\u91cf\u5927\u5c0f\uff0c\u5728\u7f16\u8bd1\u65f6)\uff0c\u9ed8\u8ba4\u6240\u6709\u7684\u7c7b\u578b\u90fd\u662fSized\u7684\uff0c?Sized(\u7c7b\u578b\u53ef\u80fd\u6709\u5927\u5c0f) example: Box allows T: ?Sized. Trait object\u5bf9\u8c61\u5b89\u5168\uff0c\u53ea\u6709\u662f\u5bf9\u8c61\u5b89\u5168\u7684trait\u624d\u53ef\u4ee5\u505a\u52a8\u6001\u591a\u6001\uff0c\u5426\u5219\u53ea\u80fdstatic dispatch 1 2 3 4 5 A trait is object - safe if : 1. It does not require that Self : Sized 2. Its methods must not use Self 3. Its methods must not have any type parameters 4. Its methods do not require that Self : Sized \u5173\u8054\u7c7b\u578b\uff0c\u548ctrait\u76f8\u5173\u7684\u7c7b\u578b 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // \u907f\u514d\u8fd9\u6837\uff0cN\u548cE\u5728\u8fd9\u91cc\u4e0d\u5e94\u8be5\u662f\u901a\u7528\u7c7b\u578b\uff0c\u800c\u662f\u4e00\u4e2a\u548cGraph\u76f8\u5173\u7684\u7c7b\u578b\u3002 trait Graph < N , E > { fn edges ( & self , & N ) -> Vec < E > ; // etc } trait Graph { type N ; type E ; fn edges ( & self , & Self :: N ) -> Vec < Self :: E > ; } impl Graph for MyGraph { type N = MyNode ; type E = MyEdge ; fn edges ( & self , n : & MyNode ) -> Vec < MyEdge > { /*...*/ } } Rust\u4e2d\u7684\u8303\u578b\u53ef\u4ee5\u6307\u5b9a\u6ee1\u8db3\u90a3\u4e9bTrait\u548cC++20\u4e2d\u7684Concept\u4e00\u81f4 1 2 3 4 5 6 7 8 9 10 11 12 13 // T\u9700\u8981\u6709Clone trait fn cloning_machine < T : Clone > ( t : T ) -> ( T , T ) { ( t . clone (), t . clone ()) } // where\u8bed\u53e5\u6765\u9009\u62e9 fn cloning_machine_2 < T > ( t : T ) -> ( T , T ) where T : Clone { ( t . clone (), t . clone ()) } // \u6ee1\u8db3\u591a\u4e2atrait fn clone_and_compare < T : Clone + Ord > ( t1 : T , t2 : T ) -> bool { t1 . clone () > t2 . clone () } match\u6a21\u5f0f\u5339\u914d\u7684\u65f6\u5019\u9ed8\u8ba4\u662f\u503c\u62f7\u8d1d\u7684\u65b9\u5f0f\uff0c\u53ef\u4ee5\u901a\u8fc7 ref \u6765\u521b\u5efa\u5f15\u7528\u6216\u8005\u662f\u901a\u8fc7 ref mut \u6765\u521b\u5efa\u53ef\u53d8\u7684\u5f15\u7528 1 2 3 4 5 6 // \u76f8\u5e94\u5730\uff0c\u5b9a\u4e49\u4e24\u4e2a\u975e\u5f15\u7528\u7684\u503c\uff0c\u901a\u8fc7 `ref` \u548c `mut` \u53ef\u4ee5\u53d6\u5f97\u5f15\u7528\u3002 let value = 5 ; // \u4f7f\u7528 `ref` \u5173\u952e\u5b57\u6765\u521b\u5efa\u5f15\u7528\u3002 match value { ref r => println! ( \"Got a reference to a value: {:?}\" , r ), } \u5982\u679cmatch\u662f\u5bf9\u4e00\u4e2a\u5f15\u7528\u8fdb\u884c\u6a21\u5f0f\u5339\u914d\u7684\u5316\u53ef\u4ee5\u901a\u8fc7 * \u6765\u89e3\u5f15\u7528\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u901a\u8fc7\u503c\u62f7\u8d1d\u7684\u65b9\u5f0f\u6765\u8fdb\u884c\u6a21\u5f0f\u89e3\u8026 1 2 3 4 5 6 7 // \u83b7\u5f97\u4e00\u4e2a `i32` \u7c7b\u578b\u7684\u5f15\u7528\u3002`&` \u8868\u793a\u83b7\u53d6\u4e00\u4e2a\u5f15\u7528\u3002 let reference = & 4 ; // \u4e3a\u4e86\u907f\u514d `&` \u7684\u4f7f\u7528\uff0c\u9700\u8981\u5728\u5339\u914d\u524d\u89e3\u5f15\u7528\u3002 match * reference { val => println! ( \"Got a value via dereferencing: {:?}\" , val ), } \u5982\u679cmatch\u662f\u5bf9\u4e00\u4e2a\u5f15\u7528\u8fdb\u884c\u6a21\u5f0f\u5339\u914d\u7684\u5316\uff0c\u53ef\u4ee5\u4f7f\u7528\u503c\u7684\u65b9\u5f0f\u3001 ref \u7684\u65b9\u5f0f\u6765\uff0c & \u7684\u65b9\u5f0f\u6765\u8fdb\u884c\u5339\u914d 1 2 3 4 5 6 7 let reference = & 4 ; match reference { // val => println!(\"xxxx\"), // ref val => println!(\"xxxxx\"), & val => println! ( \"Got a value via destructuring: {:?}\" , val ), } \u6a21\u5f0f\u5339\u914d\u7684\u65f6\u5019\u53ef\u4ee5\u901a\u8fc7 .. \u6765\u5ffd\u7565\u67d0\u4e9b\u53d8\u91cf match \u5339\u914d\u7684\u65f6\u5019\uff0c\u8fd8\u53ef\u4ee5\u989d\u5916\u6dfb\u52a0 guard \u6765\u8fc7\u6ee4 1 2 3 4 5 6 7 8 let pair = ( 2 , - 2 ); println! ( \"Tell me about {:?}\" , pair ); match pair { ( x , y ) if x == y => println! ( \"These are twins\" ), ( x , y ) if x + y == 0 => println! ( \"Antimatter, kaboom!\" ), ( x , _ ) if x % 2 == 1 => println! ( \"The first one is odd\" ), _ => println! ( \"No correlation...\" ), } match \u5339\u914d\u7684\u65f6\u5019\uff0c\u5982\u679c\u5339\u914d\u7684\u662f\u4e00\u7cfb\u5217\u7684\u503c\u65f6\u53ef\u4ee5\u901a\u8fc7 @ \u6765\u7ed1\u5b9a\u5339\u914d\u5230\u7684\u4e00\u7cfb\u5217\u503c 1 2 3 4 5 6 7 let age : u32 = 15 ; match age { 0 => println! ( \"I'm not born yet I guess\" ), n @ 1 .. . 12 => println! ( \"I'm a child of age {:?}\" , n ), n @ 13 .. . 19 => println! ( \"I'm a teen of age {:?}\" , n ), n => println! ( \"I'm an old person of age {:?}\" , n ), } \u4f7f\u7528 if let \u53ef\u4ee5\u7528\u6765\u8fdb\u884c\u6a21\u5f0f\u5339\u914d\uff0c\u907f\u514d\u4f7f\u7528match\u5bfc\u81f4\u4ee3\u7801\u5197\u4f59 1 2 3 4 5 6 7 let number = Some ( 7 ); if let Some ( i ) == number { //..... } else { //..... } \u6307\u5b9a\u95ed\u5305\u8fdb\u884c\u53d8\u91cf\u6355\u83b7\u7684\u65b9\u5f0f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 Fn \uff1a\u95ed\u5305\u9700\u8981\u901a\u8fc7\u5f15\u7528\uff08 & T \uff09\u6355\u83b7 FnMut \uff1a\u95ed\u5305\u9700\u8981\u901a\u8fc7\u53ef\u53d8\u5f15\u7528\uff08 & mut T \uff09\u6355\u83b7 FnOnce \uff1a\u95ed\u5305\u9700\u8981\u901a\u8fc7\u503c\uff08 T \uff09\u6355\u83b7 fn apply < F > ( f : F ) where // \u95ed\u5305\u6ca1\u6709\u8f93\u5165\u503c\u548c\u8fd4\u56de\u503c\u3002 F : FnOnce () { // ^ \u8bd5\u4e00\u8bd5\uff1a\u5c06 `FnOnce` \u6362\u6210 `Fn` \u6216 `FnMut`\u3002 f (); } // \u4f7f\u7528\u95ed\u5305\u5e76\u8fd4\u56de\u4e00\u4e2a `i32` \u6574\u578b\u7684\u51fd\u6570\u3002 fn apply_to_3 < F > ( f : F ) -> i32 where // \u95ed\u5305\u5904\u7406\u4e00\u4e2a `i32` \u6574\u578b\u5e76\u8fd4\u56de\u4e00\u4e2a `i32` \u6574\u578b\u3002 F : Fn ( i32 ) -> i32 { f ( 3 ) } borrowing When data is immutably borrowed, it also freezes. Frozen data can't be modified via the original object until all references to it go out of scope: Data can be immutably borrowed any number of times, but while immutably borrowed, the original data can't be mutably borrowed. On the other hand, only one mutable borrow is allowed at a time. The original data can be borrowed again only after the mutable reference goes out of scope 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 fn main () { let mut _mutable_integer = 7 i32 ; { // Borrow `_mutable_integer` let _large_integer = & _mutable_integer ; // Error! `_mutable_integer` is frozen in this scope _mutable_integer = 50 ; // FIXME ^ Comment out this line // `_large_integer` goes out of scope } // Ok! `_mutable_integer` is not frozen in this scope _mutable_integer = 3 ; } Function with lifetimes function signatures with lifetimes have a few constraints: any reference must have an annotated lifetime. any reference being returned must have the same lifetime as an input or be static. Diverging functions \u504f\u79bb\u51fd\u6570\u5c31\u662f\u8fd4\u56de\u503c\u662f ! \u7684\u51fd\u6570 #![no_std] \u7981\u7528rust std\u6807\u51c6\u5e93 #[panic_handler] \u81ea\u5b9a\u4e49panic hook\u51fd\u6570\uff0c\u6807\u51c6\u5e93\u63d0\u4f9b\u4e86\u9ed8\u8ba4\u7248\u672c 1 2 3 4 5 6 use core :: panic :: PanicInfo ; #[panic_handler] fn panic ( info : & PanicInfo ) -> ! { //.... } -C panic|unwind \u901a\u8fc7\u7f16\u8bd1\u9009\u9879\u6765\u5173\u95ed(\u901a\u8fc7panic\u6765\u66ff\u4ee3)\u6216\u8005\u542f\u7528\u6808\u89e3\u65cb\uff0c\u6216\u8005\u901a\u8fc7cargo\u6765\u5f00\u542f 1 2 3 4 5 [ profile . dev ] panic = \"abort\" [ profile . release ] panic = \"abort\" C\u8fd0\u884c\u65f6\u542f\u52a8\u540e\u8c03\u7528crt0\uff0c\u7136\u540e\u8c03\u7528rust\u7684\u8fd0\u884c\u65f6(\u6807\u8bb0\u4e3astart language item)\uff0crust\u8fd0\u884c\u65f6\u6700\u540e\u518d\u8c03\u7528main\u51fd\u6570 no_mangle \u5173\u95edname mangling -C link-arg=-nostartfiles \u94fe\u63a5\u7684\u65f6\u5019\u4e0d\u94fe\u63a5libc\u8fd0\u884c\u65f6 #![no_main] \u8986\u76d6entry point\uff0cLinux\u4e0b\u53ef\u4ee5\u7528\u5982\u4e0b\u51e1\u4e8b\u5b9a\u4e49\u65b0\u7684entry point 1 2 3 4 5 #[no_mangle] // extern \"C\" \u7528\u4e8e\u544a\u8bc9\u7f16\u8bd1\u5668\uff0c\u6309\u7167C\u7684\u8c03\u7528\u7ea6\u5b9a\u6765\u8fdb\u884c\u51fd\u6570\u8c03\u7528 pub extern \"C\" fn _start () -> ! { loop {} } --target \u6307\u5b9a\u7f16\u8bd1\u7684\u5e73\u53f0\uff0c CPU\u67b6\u6784 \u3001 vendor \u3001 OS \u3001 ABI \u7b49\uff0c\u4e0b\u9762\u662f\u4e00\u4e2atarget\u7684\u4f8b\u5b50\u3002 1 2 3 4 5 6 7 8 9 10 { \"llvm-target\" : \"x86_64-unknown-none\" , \"data-layout\" : \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\" , \"arch\" : \"x86_64\" , \"target-endian\" : \"little\" , \"target-pointer-width\" : \"64\" , \"target-c-int-width\" : \"32\" , \"os\" : \"none\" , \"executables\" : true , } Copy trait \u672c\u8d28\u4e0a\u5b9e\u73b0\u662f\u6dfb\u52a0\u4e86 #[lang = \"copy\"] \u7f16\u8bd1\u5668\u5c5e\u6027 #[repr(u8)] \u6307\u5b9aenum\u4f7f\u7528 u8 \u7c7b\u578b\u6765\u5b58\u50a8 eh_personality \u7528\u4e8e\u5b9e\u73b0\u6808\u89e3\u65cb\uff0c\u662f\u4e00\u4e2alanguage item\uff0c #[derive(Debug, Clone, Copy, PartialEq, Eq)] \u5f00\u542fCopy\u8bed\u4e49 repr(C) \u8ba9rust\u4e2d\u7684struct\u5b57\u6bb5\u987a\u5e8f\u548cC\u4e2d\u7684struct\u4e00\u81f4 core::fmt::Write Traits \u9700\u8981\u5b9e\u73b0 fn write_str(&mut self, s: &str) -> fmt::Result \u65b9\u6cd5\uff0c\u53ef\u4ee5\u8c03\u7528 write! \u5b8f\uff0c\u5199\u5165\u683c\u5f0f\u5316\u5b57\u7b26\u4e32 #[macro_export] \u628a\u5b9a\u4e49\u7684\u5b8f\u66b4\u9732\u51fa\u53bb\uff0c\u6240\u6709\u7684crate\u90fd\u53ef\u4ee5\u4f7f\u7528\uff0c\u5c5e\u4e8eroot namesapce #[doc(hidden)] \u4e0d\u7ed9public\u7684function\u751f\u6210\u6587\u6863\u4fe1\u606f cargo\u4e2d\u53ef\u4ee5\u5b9a\u4e49section dev-dependencies \u7528\u6765\u53ea\u5728\u5f00\u53d1\u622a\u65ad\u624d\u4f9d\u8d56\u7684crate rust\u6761\u4ef6\u7f16\u8bd1\u6765\u786e\u5b9a\u5c5e\u6027 #![cfg_attr(not(test), no_main)] \u3001 #[cfg(not(test))] \u3001 #![cfg_attr(test, allow(unused_imports))] \u7b49 \u6570\u7ec4\u6784\u9020\u7684\u65f6\u5019\u8981\u6c42\u7c7b\u578b\u662fCopy\u8bed\u4e49\u7684 array construction in Rust requires that the contained type is Copy \u901a\u8fc7 array_init \u53ef\u4ee5\u8ba9\u6570\u7ec4\u6784\u9020\u4e0d\u662fCopy\u8bed\u4e49\u7684\u7c7b\u578b\u3002 volatile crate\u5e93\u7528\u4e8e\u907f\u514d\u7f16\u8bd1\u5668\u7684\u4f18\u5316\uff0c\u5bf9\u4e8e\u4e00\u6bb5\u5185\u5b58\uff0c\u5982\u679c\u53ea\u6709\u5199\u6ca1\u6709\u8bfb\uff0c\u7f16\u8bd1\u5668\u53ef\u80fd\u4f1a\u628a\u5199\u64cd\u4f5c\u7ed9\u4f18\u5316\u6389\u3002 Box::leak \u7528\u4e8e\u5c06\u6d88\u8d39Box::new\u521b\u5efa\u51fa\u6765\u7684\u667a\u80fd\u6307\u9488\uff0c\u5e76\u8fd4\u56de 'a mut \u6307\u9488 \u6570\u7ec4\u7684\u6784\u9020\u9700\u8981\u5176\u7c7b\u578b\u662fCopy\u8bed\u4e49\u7684\uff0c\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u9700\u8981\u7528\u5230 array-init crate 1 2 3 4 5 6 7 8 9 10 11 12 // Volatile \u662fNon-Copy\u7684\u7c7b\u578b struct Buffer { chars : [[ Volatile < ScreenChar > ; BUFFER_WIDTH ]; BUFFER_HEIGHT ], } fn construct_buffer () -> Buffer { use array_init :: array_init ; Buffer { chars : array_init ( | _ | array_init ( | _ | Volatile :: new ( empty_char ()))), } } #[repr(transparent)] \u786e\u4fddstruct\u548c\u5185\u90e8\u7684\u7c7b\u578b\u662f\u4e00\u81f4\u7684\u5185\u5b58\u5e03\u5c40 1 2 3 // \u786e\u4fddColorCode\u548cu8\u662f\u4e00\u6837\u7684\u5185\u5b58\u5e03\u5c40 #[repr(transparent)] struct ColorCode ( u8 ); \u6d4b\u8bd5panic\u7684\u573a\u666f 1 2 3 4 5 #[should_panic] // or use: #[should_panic(expected = \"Some message\" )] fn it_works2 () { } \u8f93\u51fa\u6d4b\u8bd5\u8f93\u51fa\u5185\u5bb9 cargo test -- --color always --nocapture cargo test -- --nocapture set RUST_TEST_NOCAPTURE=1 \u81ea\u5b9a\u4e49ERROR 1 2 3 4 5 6 7 8 9 #[derive(Debug, PartialEq)] pub enum UUIDError { InvalidChar ( char ), InvalidGroupCount ( usize ), InvalidLength ( usize ), InvalidGroupLength ( u8 ), } type Result < T > = result :: Result < T , UUIDError > ; mem::replace \u5982\u4f55\u5c06\u4e00\u4e2a\u5bf9\u8c61\u7684\u503cmove\u5230\u5176\u4ed6\u5730\u65b9\uff0c\u7136\u540e\u91cd\u65b0\u8d4b\u503c\u5462? 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 pub struct List { head : Link , } enum Link { Empty , More ( Box < Node > ), } struct Node { elem : i32 , next : Link , } pub fn push ( & mut self , elem : i32 ) { let new_node = Box :: new ( Node { elem : elem , next : self . head , // \u8fd9\u91cc\u5c06self.head\u79fb\u52a8\u5230next }); // \u8fd9\u91cc\u8fdb\u884c\u4e86\u91cd\u65b0\u8d4b\u503c\uff0c\u7f16\u8bd1\u5668\u4f1a\u8b66\u544a\uff0c\u56e0\u4e3a\u4f7f\u7528\u4e86\u4e00\u4e2a\u5df2\u7ecf\u88abmoved\u7684\u53d8\u91cf self . head = Link :: More ( new_node ); } // mem::replace\u53ef\u4ee5\u4e00\u6b21\u6027\u5b8c\u6210\u8fd9\u4e2a\u4ea4\u6362\u8d4b\u503c\u7684\u52a8\u4f5c\uff0c\u4e5f\u53ef\u4ee5\u5148\u4e34\u65f6\u66ff\u6362\u4e3a\u4e00\u4e2a\u4e2d\u95f4\u503c\uff0c\u7136\u540e\u518d\u8d4b\u503c pub fn push ( & mut self , elem : i32 ) { let new_node = Box :: new ( Node { elem : elem , // \u5148\u66ff\u6362\u4e3a\u4e00\u4e2a\u4e2d\u95f4\u503c next : mem :: replace ( & mut self . head , Link :: Empty ), }); self . head = Link :: More ( new_node ); } Option\u7684take\u65b9\u6cd5\u5176\u5b9e\u5c31\u662f mem::replace(&mut variable, None) ; Option map\u65b9\u6cd5 map\u65b9\u6cd5\u7b49\u540c\u4e8e\u4e0b\u9762\u8fd9\u79cd\u5f62\u5f0f\uff0c\u901a\u8fc7\u6a21\u5f0f\u5339\u914dOption\u62ff\u5230\u5176\u4e2d\u7684\u5143\u7d20\uff0c\u4f20\u9012\u5230map\u4e2d\u7684lambda\u65b9\u6cd5\uff0c \u5bf9\u4e8eLambda\u65b9\u6cd5\u4e2d\u8fd4\u56de\u7684\u5143\u7d20\u901a\u8fc7Some\u8fdb\u884c\u5305\u88c5\u3002 1 match option { None => None , Some ( x ) => Some ( y ) } Option<&mut value> \u8c03\u7528map\u4f20\u9012\u7684value\u5c31\u662fmut\u7684 \u5982\u4f55\u521b\u5efa\u81ea\u5b9a\u4e49\u8fed\u4ee3\u5668 lifetime-elision Each elided lifetime in input position becomes a distinct lifetime parameter. If there is exactly one input lifetime position (elided or not), that lifetime is assigned to all elided output lifetimes. If there are multiple input lifetime positions, but one of them is &self or &mut self, the lifetime of self is assigned to all elided output lifetimes. Otherwise, it is an error to elide an output lifetime. mut\u4fee\u9970\u4f4d\u7f6e\u4e0d\u540c\uff0c\u5176\u542b\u4e49\u4e0d\u540c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 fn main () { let mut var = 0_ i32 ; // mut\u4fee\u9970\u53d8\u91cf\u540d\uff0c\u8868\u793a\u8fd9\u4e2a\u53d8\u91cf\u662f\u53ef\u4ee5\u91cd\u65b0\u6307\u5411\u65b0\u7684\u53d8\u91cf\u7684\u3002 { let p1 = & mut var ; // mut \u4fee\u9970\u7684\u662f\u501f\u7528\u6307\u9488&\uff0c\u8868\u793a\u88ab\u6307\u5411\u7684\u5bf9\u8c61\u662f\u53ef\u4ee5\u88ab\u4fee\u6539\u7684 * p1 = 1 ; } { let temp = 2_ i32 ; let mut p2 = & var ; // p2\u53ef\u4ee5\u91cd\u65b0\u6307\u5411\uff0c\u4f46\u662f\u65e0\u6cd5\u901a\u8fc7p2\u6765\u66f4\u6539var\u7684\u503c p2 = & temp } { let mut temp = 3_ i32 ; let mut p3 = & mut var ; // \u65e2\u53ef\u4ee5\u91cd\u65b0\u6307\u5411\uff0c\u4e5f\u53ef\u4ee5\u4fee\u6539var\u7684\u503c * p3 = 3 ; p3 = & mut temp } } \u5171\u4eab\u4e0d\u53ef\u53d8\u3001\u53ef\u53d8\u4e0d\u5171\u4eab\uff0c\u552f\u4e00\u4fee\u6539\u6743\u539f\u5219 error handling \u9488\u5bf9Option\u6216Result\u5904\u7406\u65b9\u5f0f\u76f8\u540c panic! 1 2 3 4 5 6 7 8 9 10 11 fn guess ( n : i32 ) -> bool { if n < 1 || n > 10 { panic! ( \"Invalid number: {}\" , n ); } n == 5 } fn main () { guess ( 11 ); } unwrap() \u7b49\u540c\u4e8ematch\u7684\u65f6\u5019\uff0c\u9047\u5230error\u6216None\u89e6\u53d1 panic! 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 impl < T > Option < T > { fn unwrap ( self ) -> T { match self { Option :: Some ( val ) => val , Option :: None => panic! ( \"called `Option::unwrap()` on a `None` value\" ), } } } use std :: env ; fn main () { let mut argv = env :: args (); let arg : String = argv . nth ( 1 ). unwrap (); let n : i32 = arg . parse (). unwrap (); println! ( \"{}\" , 2 * n ); } unwrap_or \u4eceOption\u4e2d\u83b7\u53d6\u503c\uff0c\u5982\u679c\u662fNone\u5c31\u8fd4\u56de\u6307\u5b9a\u7684\u9ed8\u8ba4\u503c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 fn unwrap_or < T > ( option : Option < T > , default : T ) -> T { match option { None => default , Some ( value ) => value , } } use std :: env ; fn main () { let mut argv = env :: args (); let arg : String = argv . nth ( 1 ). unwrap_or ( String :: from ( \"unknow number\" )); let n : i32 = arg . parse (). unwrap_or ( 2 ); println! ( \"arg: {}, number: {}\" , arg , 2 * n ); } map \u5c06Option\u89e3\u5f00\uff0c\u5982\u679c\u4e0d\u662fNone\u5c31\u56de\u8c03function\uff0c\u6700\u540e\u5c06\u8fd4\u56de\u503c\u5305\u88c5\u6210Option\uff0c\u672c\u8d28\u4e0a\u662f\u4e00\u79cdOption\u8f6c\u6362\u6210\u53e6\u5916\u4e00\u79cdOption 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 fn map < F , T , A > ( option : Option < T > , f : F ) -> Option < A > where F : FnOnce ( T ) -> A { match option { None => None , Some ( value ) => Some ( f ( value )), } } // Searches `haystack` for the Unicode character `needle`. If one is found, the // byte offset of the character is returned. Otherwise, `None` is returned. fn find ( haystack : & str , needle : char ) -> Option < usize > { for ( offset , c ) in haystack . char_indices () { if c == needle { return Some ( offset ); } } None } fn main () { let m = find ( \"findstring\" , 'd' ); println! ( \"size: {}\" , m . map ( | x | ( x + 100 ). to_string () + \"oo\" ). unwrap ()); } and_then \u8fd9\u4e2a\u548cmap\u76f8\u540c\uff0c\u53ea\u662f\u8981\u6c42function\u7684\u8fd4\u56de\u503c\u662fOption\uff0c\u4e0d\u5bf9\u5176\u8fd4\u56de\u503c\u5c01\u88c5\u6210Option 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 fn and_then < F , T , A > ( option : Option < T > , f : F ) -> Option < A > where F : FnOnce ( T ) -> Option < A > { match option { None => None , Some ( value ) => f ( value ), } } // Searches `haystack` for the Unicode character `needle`. If one is found, the // byte offset of the character is returned. Otherwise, `None` is returned. fn find ( haystack : & str , needle : char ) -> Option < usize > { for ( offset , c ) in haystack . char_indices () { if c == needle { return Some ( offset ); } } None } fn main () { let m = find ( \"findstring\" , 'd' ); println! ( \"size: {}\" , m . and_then ( | x | Some ( x . to_string () + \"test\" )). unwrap ()); } unwrap_or_else \u5982\u679c\u662fNone\u5c31\u56de\u8c03function\uff0c\u8fd9\u4e2afunction\u4f1a\u8fd4\u56de\u4e00\u4e2a\u503c\uff0c\u5426\u5219\u5c31\u76f4\u63a5\u8fd4\u56deOption\u7684\u503c 1 2 3 4 5 fn main () { let mut argv = env :: args (); let arg : String = argv . nth ( 1 ). unwrap_or_else ( || \"test\" . to_owned ()); println! ( \"arg: {}\" , arg ); } Result type alias idiom 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 use std :: num :: ParseIntError ; use std :: result ; type Result < T > = result :: Result < T , ParseIntError > ; fn double_number ( number_str : & str ) -> Result < i32 > { unimplemented! (); } fn double_number ( number_str : & str ) -> i32 { 2 * number_str . parse :: < i32 > (). unwrap () } fn main () { let n : i32 = double_number ( \"10\" ); assert_eq! ( n , 20 ); } // \u901a\u8fc7map\u6765\u8f6c\u6362 fn double_number ( number_str : & str ) -> i32 { 2 * number_str . parse :: < i32 > (). map ( | number | number + 10 ). unwrap () } fn main () { let n : i32 = double_number ( \"10\" ); assert_eq! ( n , 40 ); } ok_or \u5c06Option\u8f6c\u6362\u4e3aResult 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 fn ok_or < T , E > ( option : Option < T > , err : E ) -> Result < T , E > { match option { Some ( val ) => Ok ( val ), None => Err ( err ), } } use std :: env ; fn double_arg ( mut argv : env :: Args ) -> Result < i32 , String > { argv . nth ( 1 ) . ok_or ( \"Please give at least one argument\" . to_owned ()) . and_then ( | arg | arg . parse :: < i32 > (). map_err ( | err | err . to_string ())) } fn main () { match double_arg ( env :: args ()) { Ok ( n ) => println! ( \"{}\" , n ), Err ( err ) => println! ( \"Error: {}\" , err ), } } map_err Maps a Result<T, E> to Result<T, F> \uff0c\u5982\u679c\u662fOk\u5c31\u539f\u5c01\u4e0d\u52a8\u8fd4\u56de\uff0c\u5426\u5219\u5c31\u5c06error\u503c\u4f20\u9012\u7ed9fucntion\uff0c\u8fd4\u56de\u53e6\u4e00\u79cd\u7c7b\u578b\uff0c\u6700\u540e\u5c06\u7ed3\u679c\u5305\u88c5\u6210Result 1 2 3 4 5 6 7 8 9 10 11 12 13 pub fn map_err < F , O > ( self , op : O ) -> Result < T , F > where O : FnOnce ( E ) -> F , fn stringify ( x : u32 ) -> String { format! ( \"error code: {}\" , x ) } fn main () { let x : Result < u32 , u32 > = Ok ( 2 ); assert_eq! ( x . map_err ( stringify ), Ok ( 2 )); let x : Result < u32 , u32 > = Err ( 13 ); assert_eq! ( x . map_err ( stringify ), Err ( \"error code: 13\" . to_string ())); } try! or ? 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 macro_rules! try { ( $e : expr ) => ( match $e { Ok ( val ) => val , Err ( err ) => return Err ( err ), }); } use std :: fs :: File ; use std :: io :: Read ; use std :: path :: Path ; fn file_double < P : AsRef < Path >> ( file_path : P ) -> Result < i32 , String > { let mut file = File :: open ( file_path ). map_err ( | e | e . to_string ()) ? ; let mut contents = String :: new (); file . read_to_string ( & mut contents ). map_err ( | e | e . to_string ()) ? ; let n = contents . trim (). parse :: < i32 > (). map_err ( | e | e . to_string ()) ? ; Ok ( 2 * n ) } fn main () { match file_double ( \"foobar\" ) { Ok ( n ) => println! ( \"{}\" , n ), Err ( err ) => println! ( \"Error: {}\" , err ), } } use std :: fs :: File ; use std :: io :: Read ; use std :: path :: Path ; fn file_double < P : AsRef < Path >> ( file_path : P ) -> Result < i32 , String > { let mut file = try ! ( File :: open ( file_path ). map_err ( | e | e . to_string ())); let mut contents = String :: new (); try ! ( file . read_to_string ( & mut contents ). map_err ( | e | e . to_string ())); let n = try ! ( contents . trim (). parse :: < i32 > (). map_err ( | e | e . to_string ())); Ok ( 2 * n ) } fn main () { match file_double ( \"foobar\" ) { Ok ( n ) => println! ( \"{}\" , n ), Err ( err ) => println! ( \"Error: {}\" , err ), } } std::error::Error trait\uff0c\u81ea\u5b9a\u4e49\u9519\u8bef\u7c7b\u578b\uff0c\u9700\u8981\u5b9e\u73b0\u8fd9\u4e2atrait 1 2 3 4 5 6 7 8 9 use std :: fmt :: { Debug , Display }; trait Error : Debug + Display { /// A short description of the error. fn description ( & self ) -> & str ; /// The lower level cause of this error, if any. fn cause ( & self ) -> Option <& Error > { None } } Box<dyn Error> \u4f7f\u7528\u8fd9\u4e2a\u9519\u8bef\u7c7b\u578b\uff0c\u800c\u4e0d\u662f\u5177\u4f53\u7684\u7c7b\u578b\uff0c\u4f46\u662f\u4e0d\u80fd\u5411\u4e0b\u8f6c\u578b\uff0c\u6ca1\u529e\u6cd5\u62ff\u5230\u8fdb\u4e00\u6b65\u7684\u9519\u8bef\u4fe1\u606f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 use std :: error :: Error ; use std :: fs :: File ; use std :: io :: Read ; use std :: path :: Path ; // \u4efb\u4f55\u7c7b\u578b\u7684Error\u90fd\u53ef\u4ee5\u5411\u4e0a\u8f6c\u578b\u4e3aBox<dyn Error> fn file_double < P : AsRef < Path >> ( file_path : P ) -> Result < i32 , Box < dyn Error >> { let mut file = File :: open ( file_path ) ? ; let mut contents = String :: new (); file . read_to_string ( & mut contents ) ? ; let n = contents . trim (). parse :: < i32 > () ? ; Ok ( 2 * n ) } fn main () { match file_double ( \"foobar\" ) { Ok ( n ) => println! ( \"{}\" , n ), Err ( err ) => println! ( \"Error: {}\" , err ), } } expect \u5982\u679c\u662fNone\u5c31 panic! \uff0c\u5e76\u8f93\u51fa\u4e00\u6bb5\u81ea\u5b9a\u4e49\u7684\u9519\u8bef\u6d88\u606f\u3002 std::convert::From \u81ea\u5b9a\u4e49\u7c7b\u578b\u8f6c\u6362\uff0c\u53ef\u4ee5\u5c06\u81ea\u5b9a\u4e49\u7684\u9519\u8bef\u7c7b\u578b\u8f6c\u6362\u4e3a\u9884\u671f\u7684\u6807\u51c6\u9519\u8bef\u7c7b\u578b 1 2 3 trait From < T > { fn from ( T ) -> Self ; } failure::Error failure crate\uff0c\u7c7b\u4f3c\u4e8e Box<Error> \uff0c\u4f46\u662f\u8fd9\u4e2acrate\u989d\u5916\u53ef\u4ee5\u6253\u5370backtraces\uff0c\u4ee5\u53ca\u597d\u7684\u5411\u4e0b\u8f6c\u578b\u7684\u652f\u6301\u3002 map_or \u63d0\u4f9b\u9ed8\u8ba4\u503c\uff0c\u548cmap\u4e0d\u540c\u7684\u65f6\u5019\uff0c\u8fd9\u4e2a\u8fd4\u56de\u503c\u548c\u63d0\u4f9b\u7684\u9ed8\u8ba4\u503c\u7c7b\u578b\u4e00\u81f4\uff0c\u800c\u4e0d\u662f\u7528 option \u518d\u5305\u88c5\u4e00\u6b21 1 2 3 4 5 6 7 8 9 10 pub fn map_or < U , F > ( self , default : U , f : F ) -> U where F : FnOnce ( T ) -> U , let x = Some ( \"foo\" ); assert_eq! ( x . map_or ( 42 , | v | v . len ()), 3 ); let x : Option <& str > = None ; assert_eq! ( x . map_or ( 42 , | v | v . len ()), 42 ); unwrap_err \u5982\u679c\u503c\u662fOk\u5219\u4f1apanic\uff0c\u5982\u679c\u503c\u662ferr\u5219\u8fd4\u56de\u5bf9\u5e94\u7684Error\u503c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 pub fn unwrap_err ( self ) -> E Unwraps a result , yielding the content of an Err . Panics Panics if the value is an Ok , with a custom panic message provided by the Ok ' s value . use std :: error :: Error ; use std :: fs ; use std :: io ; use std :: num ; fn main () { let io_err : io :: Error = io :: Error :: last_os_error (); let parse_err : num :: ParseIntError = \"2\" . parse :: < i32 > (). unwrap_err (); println! ( \"{}\" , parse_err ); } \u5185\u90e8\u53ef\u53d8\u6027 \u5bf9\u8c61\u662f\u4e0d\u53ef\u53d8\u7684\uff0c\u4f46\u662f\u53c8\u9700\u8981\u67d0\u4e9b\u60c5\u51b5\u4e0b\u5185\u90e8\u7684\u4e00\u4e9b\u5b57\u6bb5\u662f\u53ef\u53d8\u7684\uff0c\u5178\u578b\u7684\u50cfRc\u3001Mutex\u7b49\uff0cRc\u5728\u8d4b\u503c\u7684\u65f6\u5019\uff0c\u5e0c\u671b\u5185\u90e8\u7684\u5f15\u7528\u8ba1\u6570\u53ef\u4ee5\u9012\u589e\u3002\u4f46\u662fRc\u81ea\u8eab\u662f\u4e0d\u53ef\u53d8\u7684\u3002 RefCell\u548cCell\u53ef\u7528\u4e8e\u5b9e\u73b0\u5185\u90e8\u53ef\u53d8\u6027\uff0c\u524d\u8005\u5e26\u6709\u8fd0\u884c\u65f6\u7684\u501f\u7528\u68c0\u67e5\uff0c\u540e\u8005\u6ca1\u6709\uff0c\u540e\u8005\u8981\u6c42\u7c7b\u578b\u5fc5\u987b\u5b9e\u73b0Cope trait\uff0c\u524d\u8005\u4e0d\u8981\u6c42\u3002\u8fd9\u4e24\u8005\u90fd\u662f\u975e\u7ebf\u7a0b\u5b89\u5168\u7684\u3002 \u7ebf\u7a0b\u5b89\u5168\u7248\u672c\u7684\u5185\u90e8\u53ef\u53d8\u6027 1. Copy\u7c7b\u578b Atomic*\u7c7b\u578b \u53ef\u4ee5\u5b9e\u73b0\u7ebf\u7a0b\u5b89\u5168\u7248\u672c\u7684\u5185\u90e8\u53ef\u53d8\u6027\u3002 2. Non-Copy\u7c7b\u578b Arc<RwLock<_>> Arc<Vec<RwLock<T>>> \u548c Arc<RwLock<Vec<T>>> \u524d\u8005\u4e0d\u80fd\u5e76\u53d1\u7684\u64cd\u4f5c Vec \uff0c\u4f46\u662f\u53ef\u4ee5\u5e76\u53d1\u7684\u64cd\u4f5c\u5176\u503cT\uff0c\u540e\u8005\u53ef\u4ee5\u5e76\u53d1\u7684\u64cd\u4f5cVec\uff0c\u4f46\u662f\u65e0\u6cd5\u5e76\u53d1\u64cd\u4f5cT \u5185\u90e8\u53ef\u53d8\u6027\u7684\u5185\u90e8\u5b9e\u73b0\u4f9d\u9760 UnsafeCell \uff0c\u8d77\u5185\u90e8\u5b9e\u73b0\u4f9d\u9760\u7f16\u8bd1\u5668 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 #[lang = \"unsafe_cell\" ] #[stable(feature = \"rust1\" , since = \"1.0.0\" )] pub struct UnsafeCell < T : ? Sized > { value : T , } // \u5c06\u4e0d\u53ef\u53d8\u8f6c\u6362\u4e3a\u53ef\u53d8 pub fn get ( & self ) -> * mut T { & self . value as * const T as * mut T } pub struct Cell < T > { value : UnsafeCell < T > , } pub fn get ( & self ) -> T { unsafe { * self . value . get () } } pub fn set ( & self , value : T ) { unsafe { * self . value . get () = value ; } } pub struct RefCell < T : ? Sized > { borrow : Cell < BorrowFlag > , value : UnsafeCell < T > , } pub fn borrow ( & self ) -> Ref < T > { match BorrowRef :: new ( & self . borrow ) { Some ( b ) => Ref { value : unsafe { &* self . value . get () }, borrow : b , }, None => panic! ( \"RefCell<T> already mutably borrowed\" ), } } & vs ref in Rust patterns match\u65e2\u53ef\u4ee5\u64cd\u4f5c\u5f15\u7528\u4e5f\u53ef\u4ee5\u64cd\u4f5cvalue 1 2 3 4 5 6 7 8 9 10 struct Foo ( String ); fn main () { // \u5339\u914d\u5f15\u7528\uff0c\u56e0\u6b64\u5e76\u6ca1\u6709\u53d1\u751fmove match foo { Foo ( x ) => println! ( \"Matched! {}\" , x ), }; // \u8fd9\u91cc\u4ecd\u7136\u8fd8\u53ef\u4ee5\u5bf9foo\u8fdb\u884c\u64cd\u4f5c\u3002\u5982\u679c\u4e0a\u9762\u6362\u6210\u5bf9value\u8fdb\u884cmatch\uff0c\u8fd9\u91cc\u5c31\u4f1a\u51fa\u73b0\u9519\u8bef\uff0c\u663e\u793afoo\u7684\u503c\u5df2\u7ecf\u88abmoved\u4e86 println! ( \"{}\" , foo . 0 ); } & \u4f5c\u7528\u4e8ematch\u4e00\u4e2a\u5f15\u7528\u7684\u65f6\u5019\uff0c\u7528\u4e8ematch\u8fd9\u4e2a\u5f15\u7528\u6307\u5411\u7684\u5bf9\u8c61 1 2 3 4 5 6 7 8 9 10 11 struct Foo ( String ); fn main () { let foo = & Foo ( String :: from ( \"test\" )); match foo { // \u5e76\u4e0d\u662fmatch\u5f15\u7528\u672c\u8eab\uff0c\u800c\u662f\u5f15\u7528\u6307\u5411\u7684\u5bf9\u8c61\uff0cfoo\u672c\u8eab\u662f\u5f15\u7528\uff0c\u5176\u5f15\u7528\u90e8\u5206\u6b63\u597d\u548cpattern\u7684`&`\u62b5\u6d88\uff0c\u4e5f\u5c31\u662f\u6240\u6709Foo(x) \u6b63\u597d\u5bf9\u4e8evalue\u90e8\u5206 & Foo ( x ) => println! ( \"Matched! {}\" , x ), }; //\u8fd9\u91cc\u5c31\u4f1a\u51fa\u73b0\u9519\u8bef\uff0c\u663e\u793afoo\u7684\u503c\u5df2\u7ecf\u88abmoved\u4e86 println! ( \"{}\" , foo . 0 ); } 2. ref \u4f5c\u7528\u4e8ematch\uff0c\u907f\u514dvalue\u88abmove\uff0c\u800c\u662f\u4f7f\u7528\u5f15\u7528\u83b7\u53d6match\u5339\u914d\u7684\u503c 1 2 3 4 5 6 7 8 9 10 struct Foo ( String ); fn main () { let foo = Foo ( String :: from ( \"test\" )); // \u5c3d\u7ba1\u662f\u5bf9value\u8fdb\u884cmatch\uff0c\u4f46\u662f\u901a\u8fc7ref\u5173\u952e\u5b57\uff0c\u4f7f\u5f97\u53ef\u4ee5\u901a\u8fc7\u5f15\u7528\u8fc7\u7684\u65b9\u5f0f\u8bbf\u95eematch\u5230\u7684\u503c match foo { Foo ( ref x ) => println! ( \"Matched! {}\" , x ), }; println! ( \"{}\" , foo . 0 ); } std::mem::uninitialized \u521d\u59cb\u5316\u6570\u7ec4\u7684\u65f6\u5019\uff0c\u5982\u679c\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u4e0d\u662fCopy\u7c7b\u578b\u7684\u6570\u636e\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u4f7f\u7528\u5230 std::mem::uninitialized \u548clibc\u4ea4\u4e92\u7684\u65f6\u5019\uff0c\u58f0\u660e\u4e00\u4e2a\u53d8\u91cf\uff0c\u8fd9\u4e2a\u53d8\u91cf\u8981\u88ablibc\u521d\u59cb\u5316 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 use std :: mem ; use std :: ptr ; // Only declare the array. This safely leaves it // uninitialized in a way that Rust will track for us. // However we can't initialize it element-by-element // safely, and we can't use the `[value; 1000]` // constructor because it only works with `Copy` data. let mut data : [ Vec < u32 > ; 1000 ]; unsafe { data = mem :: uninitialized (); for elem in & mut data [ .. ] { ptr :: write ( elem , Vec :: new ()); } } println! ( \"{:?}\" , & data [ 0 ]); 1 2 3 4 5 6 7 8 9 10 11 12 impl PlatformInfo { pub fn new () -> io :: Result < Self > { unsafe { let mut uts : utsname = mem :: uninitialized (); if uname ( & mut uts ) == 0 { Ok ( Self { inner : uts }) } else { Err ( io :: Error :: last_os_error ()) } } } } crate and mod crate\u662fRust\u4e2d\u72ec\u7acb\u7684\u7f16\u8bd1\u5355\u5143\uff0c\u6bcf\u4e00\u4e2acrate\u5bf9\u5e94\u751f\u6210\u4e00\u4e2a\u5e93\uff0c\u6216\u8005\u662f\u53ef\u6267\u884c\u6587\u4ef6\u3002 mod\u53ef\u4ee5\u7b80\u5355\u7406\u89e3\u6210\u547d\u540d\u7a7a\u95f4\uff0cmod\u53ef\u4ee5\u5d4c\u5957\uff0c\u8fd8\u53ef\u4ee5\u63a7\u5236\u5185\u90e8\u5143\u7d20\u7684\u53ef\u89c1\u6027\uff0cmod\u53ef\u4ee5\u5faa\u73af\u5f15\u7528\uff0ccrate\u4e4b\u95f4\u4e0d\u53ef\u4ee5\uff0crust\u9700\u8981\u628a\u6574\u4e2acrate\u5168\u90e8load\u624d\u80fd\u6267\u884c\u7f16\u8bd1\u3002 \u7248\u672c\u53f7\u7684\u6a21\u7cca\u5339\u914d: ^1.2.3 ==> 1.2.3 <= version < 2.0.0 (\u9ed8\u8ba4\u884c\u4e3a\uff0c\u76f4\u63a5\u5199\u4e00\u4e2a\u56fa\u5b9a\u7248\u672c\u53f7) ~1.2.3 ==> 1.2.3 <= version < 1.3.0 1.* ==> 1.0.0 <= version < 2.0.0 \u53ef\u4ee5\u6307\u5b9a\u5b98\u65b9\u4ed3\u5e93\u4e2d\u7684crate \u53ef\u4ee5\u6307\u5b9a\u672c\u5730\u7684crate \u53ef\u4ee5\u6307\u5b9agit pub use \u91cd\u65b0\u5bfc\u51fa\u6a21\u5757\u4e2d\u7684\u5143\u7d20\uff0c\u4f7f\u5f97\u5bfc\u51fa\u7684\u5143\u7d20\uff0c\u6210\u4e3a\u5f53\u524d\u6a21\u5757\u7684\u4e00\u90e8\u5206 \u6307\u5b9a\u65b9\u6cd5\u7684\u53ef\u89c1\u884c: pub(crate) pub(in xxx_mod) pub(self) \u6216\u8005 pub(in self) pub(super) \u6216\u8005 pub(in super) #[non_exhaustive] \u65b0\u589eenum\u6210\u5458\u7684\u65f6\u5019\uff0c\u4e0d\u7834\u574f\u517c\u5bb9\u6027 FFI Rust\u548cC\u662fABI\u517c\u5bb9\u7684\uff0c\u4f46\u662f\u9700\u8981\u6ee1\u8db3\u4e00\u4e9b\u6761\u4ef6 \u4f7f\u7528 extern C \u4fee\u9970\u7684 \u4f7f\u7528 #[no_mangle] \u4fee\u9970\u7684\u51fd\u6570 \u51fd\u6570\u53c2\u6570\u3001\u8fd4\u56de\u503c\u4e2d\u4f7f\u7528\u7684\u7c7b\u578b\uff0c\u5fc5\u987b\u662f\u5728Rust\u548cC\u4e2d\u5177\u5907\u540c\u6837\u7684\u5185\u5b58\u5e03\u5c40 C\u8c03\u7528Rut Step1: \u6309\u7167\u4e0a\u8ff0\u89c4\u5219\u7f16\u5199Rust\u63a5\u53e3\uff0c\u63d0\u4f9b\u7ed9C\u8c03\u7528 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #[no_mangle] pub extern \"C\" fn rust_capitalize ( s : * mut c_char ) { unsafe { let mut p = s as * mut u8 ; while * p != 0 { let ch = char :: from ( * p ); if ch . is_ascii () { let upper = ch . to_ascii_uppercase (); * p = upper as u8 ; } p = p . offset ( 1 ); } } } Step2: \u7f16\u8bd1\u6210C\u7684\u9759\u6001\u5e93 1 rustc --crate-type=staticlib capitalize.rs Step3: \u7f16\u5199C\u4ee3\u7801\u5f00\u59cb\u8c03\u7528 1 2 3 4 5 6 7 8 9 10 #include <stdlib.h> #include <stdio.h> // declare extern void rust_capitalize ( char * ); int main () { char str [] = \"hello world\" ; rust_capitalize ( str ); printf ( \"%s \\n \" , str ); return 0 ; } gcc -o main main.c -L. -l:libcapitalize.a -lpthread -ldl Rust\u8c03\u7528C\u5e93 Step1: \u7f16\u8bd1\u597dC\u7684\u9759\u6001\u5e93 Step2: \u5728Rust\u4e2d\u4f7f\u7528 #[link = \"library_name\"] \u6765\u627e\u5230\u5bf9\u5e94\u7684\u9759\u6001\u5e93\uff0c\u5e76\u901a\u8fc7 extern \"C\" \u8fdb\u884c\u65b9\u6cd5\u7684\u58f0\u660e 1 2 3 4 5 6 7 8 9 use std :: os :: raw :: c_int ; #[link(name = \"simple_math\" )] extern \"C\" { fn add_square ( a : c_int , b : c_int ) -> c_int ; } fn main () { let r = unsafe { add_square ( 2 , 2 ) }; println! ( \"{}\" , r ); } \u5bf9\u4e8e\u4e00\u4e9b\u590d\u6742\u6570\u636e\u7c7b\u578b\uff0c\u53ef\u4ee5\u901a\u8fc7struct\u5e76\u6dfb\u52a0 #[repr(C)] \u6765\u4fdd\u8bc1\u548cC\u7684\u5185\u5b58\u5e03\u5c40\u4e00\u81f4\u6765\u7ec4\u5408\u590d\u6742\u7684\u6570\u636e\u7c7b\u578b Step3: \u7f16\u8bd1\u8fd0\u884c \u6307\u5b9a\u9759\u6001\u5e93\u7684\u641c\u7d22\u8def\u5f84 rustc -L . call_math.rs \u6587\u6863\u548c\u6d4b\u8bd5 /// \u5f00\u5934\u7684\u6587\u6863\u88ab\u89c6\u4e3a\u662f\u7ed9\u5b83\u540e\u9762\u7684\u90a3\u4e2a\u5143\u7d20\u505a\u7684\u8bf4\u660e //! \u5f00\u5934\u7684\u6587\u6863\u88ab\u89c6\u4e3a\u662f\u7ed9\u5305\u542b\u8fd9\u5757\u6587\u6863\u7684\u5143\u7d20\u505a\u7684\u8bf4\u660e Rust\u6587\u6863\u91cc\u9762\u7684\u4ee3\u7801\u5757\uff0c\u5728\u4f7f\u7528cargo test\u547d\u4ee4\u65f6\uff0c\u4e5f\u662f\u4f1a\u88ab\u5f53\u505a\u6d4b\u8bd5\u7528\u4f8b\u6267\u884c\u7684\u3002 \u6587\u6863\u5185\u90e8\u652f\u6301markdown\u683c\u5f0f #[doc(include = \"external-doc.md\")] \u76f4\u63a5\u5f15\u7528\u5916\u90e8\u6587\u6863 #[cfg] \u5b83\u4e3b\u8981\u662f\u7528\u4e8e\u5b9e\u73b0\u5404\u79cd\u6761\u4ef6\u7f16\u8bd1\u3002\u6bd4\u5982 #[cfg(test)] \u610f\u601d\u662f\uff0c\u8fd9\u90e8\u5206\u4ee3\u7801\u53ea\u5728test\u8fd9\u4e2a\u5f00\u5173\u6253\u5f00\u7684\u65f6\u5019\u624d\u4f1a\u88ab \u7f16\u8bd1\u3002 1 2 3 4 #[cfg(any(unix, windows))] #[cfg(all(unix, target_pointer_width = \"32\" ))] #[cfg(not(foo))] #[cfg(any(not(unix), all(target_os= \"macos\" , target_arch = \"powerpc\" )))] \u81ea\u5b9a\u4e49\u5f00\u5173 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 [ features ] # \u9ed8\u8ba4\u5f00\u542f\u7684\u529f\u80fd\u5f00\u5173 default = [] # \u5b9a\u4e49\u4e00\u4e2a\u65b0\u7684\u529f\u80fd\u5f00\u5173 , \u4ee5\u53ca\u5b83\u6240\u4f9d\u8d56\u7684\u5176\u4ed6\u529f\u80fd # \u6211\u4eec\u5b9a\u4e49\u7684\u8fd9\u4e2a\u529f\u80fd\u4e0d\u4f9d\u8d56\u5176\u4ed6\u529f\u80fd , \u9ed8\u8ba4\u6ca1\u6709\u5f00\u542f my_feature_name = [] // \u7136\u540e\u5728\u4ee3\u7801\u4e2d\u8fdb\u884c\u5f15\u7528 #[cfg(feature = \"my_feature_name\" )] mod sub_module_name { } \u8fd9\u4e2a\u529f\u80fd\u662f\u5426\u5f00\u542f\uff0c\u53ef\u4ee5\u901a\u8fc7\u547d\u4ee4\u884c\u8fdb\u884c\u4f20\u9012 cargo build -- features \"my_feature_name\" #[ignore] \u6807\u8bb0\u6d4b\u8bd5\u7528\u4f8b\uff0c\u6682\u65f6\u5ffd\u7565\u8fd9\u4e2a\u6d4b\u8bd5 #[bench] \u6dfb\u52a0\u6027\u80fd\u6d4b\u8bd5\u7528\u4f8b DST DST(\u80d6\u6307\u9488)\u7684\u8bbe\u8ba1\uff0c\u907f\u514d\u4e86\u6570\u636e\u7c7b\u578b\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u65f6\u81ea\u52a8\u9000\u5316\u4e3a\u88f8\u6307\u9488\u7c7b\u578b\uff0c\u4e22\u5931\u957f\u5ea6\u4fe1\u606f\u7684\u95ee\u9898\uff0c\u4fdd\u8bc1\u4e86\u7c7b\u578b\u5b89\u5168\u3002 enum\u4e2d\u4e0d\u80fd\u5305\u542bDST\u7c7b\u578b\uff0cstruct\u4e2d\u53ea\u6709\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u53ef\u4ee5\u662fDST\uff0c\u5176\u4ed6\u5730\u65b9\u4e0d\u884c\uff0c\u5982\u679c\u5305\u542b\u6709DST\u7c7b\u578b\uff0c\u90a3\u4e48\u8fd9\u4e2a\u7ed3\u6784\u4f53\u4e5f\u5c31\u6210\u4e86DST\u7c7b\u578b macro Rust\u4e2d\u7684\u5b8f\u662f\u5728AST\u4e4b\u540e\u6267\u884c\u7684\uff0c\u56e0\u6b64\u5fc5\u987b\u7b26\u5408Rust\u8bed\u6cd5\uff0cRust\u9488\u5bf9\u8bed\u6cd5\u6269\u5c55\u63d0\u4f9b\u4e86\u4e0b\u5217\u51e0\u79cd\u8bed\u6cd5\u5f62\u5f0f\u3002 #[$arg] \u5982 #[derive(Clone)] \u3001 #[no_mangle] #![$arg] $name! $arg $name! $arg0 $arg1 \u800c\u5b8f\u5c31\u5c5e\u4e8e\u4e0a\u9762\u7684\u7b2c\u4e09\u79cd\u3002 item\u3001block\u3001stmt\u3001 pat\u3001expr\u3001ty\u3001 itent (is used for variable/function names) path tt ((token tree) item block stmt (statement) pat (pattern) expr (is used for expressions) ty (type) literal (is used for literal constants) vis(visibility qualifier) 1 2 macro_rules! MACRO_NAME { } hashmap\u5b8f\u7684\u4f7f\u7528\u4f8b\u5b50: 1 2 3 4 5 6 7 8 9 macro_rules! hashmap { ( $key : expr => $val : expr ) => { { let mut map = :: std :: collections :: HashMap :: new (); map . insert ( $key , $val ); map } } } \u5b8f\u53ef\u4ee5\u91cd\u8f7d\uff0c\u4e5f\u53ef\u4ee5\u91cd\u590d\u9012\u5f52\u8c03\u7528 \u5b8f\u7684\u53c2\u6570\u53ef\u4ee5\u4f7f\u7528+\u53f7\u6765\u8868\u793a\u91cd\u590d1\u5230\u591a\u6b21\u3001\u6216\u8005\u4f7f\u7528*\u8868\u793a\u91cd\u590d0\u5230\u591a\u6b21 \u51fd\u6570\u6ca1\u6709\u53c2\u6570\uff0c\u4f46\u662f\u5374\u5305\u542b\u4e86\u751f\u547d\u5468\u671f\u53c2\u6570\uff0c\u90a3\u4e48\u9ed8\u8ba4\u662f'static 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 // `print_refs` takes two references to `i32` which have different // lifetimes `'a` and `'b`. These two lifetimes must both be at // least as long as the function `print_refs`. fn print_refs <' a , ' b > ( x : & ' a i32 , y : & ' b i32 ) { println! ( \"x is {} and y is {}\" , x , y ); } // A function which takes no arguments, but has a lifetime parameter `'a`. fn failed_borrow <' a > () { let _x = 12 ; // ERROR: `_x` does not live long enough // _x\u7684\u751f\u547d\u5468\u671f\u663e\u7136\u6ca1\u6709'static\u957f //let y: &'a i32 = &_x; // Attempting to use the lifetime `'a` as an explicit type annotation // inside the function will fail because the lifetime of `&_x` is shorter // than that of `y`. A short lifetime cannot be coerced into a longer one. } fn main () { // Create variables to be borrowed below. let ( four , nine ) = ( 4 , 9 ); // Borrows (`&`) of both variables are passed into the function. print_refs ( & four , & nine ); // Any input which is borrowed must outlive the borrower. // In other words, the lifetime of `four` and `nine` must // be longer than that of `print_refs`. // \u751f\u547d\u5468\u671f\u9ed8\u8ba4\u662f'static failed_borrow (); // `failed_borrow` contains no references to force `'a` to be // longer than the lifetime of the function, but `'a` is longer. // Because the lifetime is never constrained, it defaults to `'static`. } \u5f53\u6570\u636e\u88ab\u4e0d\u53ef\u53d8\u501f\u7528\u7684\u65f6\u5019\uff0c\u90a3\u4e48\u5c06\u65e0\u6cd5\u901a\u8fc7\u539f\u6765\u53ef\u53d8\u7684\u53d8\u91cf\u8fdb\u884c\u6570\u636e\u7684\u4fee\u6539 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 fn main () { let mut _mutable_integer = 7 i32 ; { // Borrow `_mutable_integer` // \u505a\u4e86\u4e0d\u53ef\u53d8\u7684\u501f\u7528 let _large_integer = & _mutable_integer ; // Error! `_mutable_integer` is frozen in this scope // \u5bfc\u81f4\u539f\u6765\u7684\u7684\u65e0\u6cd5\u4fee\u6539 _mutable_integer = 50 ; // FIXME ^ Comment out this line // `_large_integer` goes out of scope } // Ok! `_mutable_integer` is not frozen in this scope _mutable_integer = 3 ; } \u5f53\u6570\u636e\u88abmove\u7684\u65f6\u5019\u53ef\u4ee5\u6539\u53d8\u5176\u53ef\u53d8\u6027 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 fn main () { let immutable_box = Box :: new ( 5 u32 ); println! ( \"immutable_box contains {}\" , immutable_box ); // Mutability error //*immutable_box = 4; // *Move* the box, changing the ownership (and mutability) let mut mutable_box = immutable_box ; println! ( \"mutable_box contains {}\" , mutable_box ); // Modify the contents of the box * mutable_box = 4 ; println! ( \"mutable_box now contains {}\" , mutable_box ); } error handle cargo Dev-dependencies are not used when compiling a package for building, but are used for compiling tests, examples, and benchmarks. [dev-dependencies] tempdir = \"0.3\" attribute This RFC introduces the #[non_exhaustive] attribute for enums and structs, which indicates that more variants/fields may be added to an enum/struct in the future. Adding this hint to enums will force downstream crates to add a wildcard arm to match statements, ensuring that adding new variants is not a breaking change. Adding this hint to structs or enum variants will prevent downstream crates from constructing or exhaustively matching, to ensure that adding new fields is not a breaking change. \u6280\u5de7 1 2 3 4 5 6 pub fn write_record<I, T>(&mut self, record: I) -> csv::Result<()> // \u5177\u5907\u8fed\u4ee3\u5668\u7684\u80fd\u529b\uff0c\u5e76\u4e14\u6ee1\u8db3AsRef<[u8]>\uff0c where I: IntoIterator<Item=T>, T: AsRef<[u8]> { // implementation elided } The AsRef<[u8]> bound is useful because types like String , &str , Vec<u8> and &[u8] all satisfy it. Lifetime trait PartialEq \u76f8\u7b49\u6bd4\u8f83\u3001\u5177\u5907\u5bf9\u79f0\u6027\u548c\u4f20\u9012\u6027 1 2 3 4 5 6 7 8 // \u5bf9\u79f0\u6027 assert! ( a == b && b == a ); assert! ( b == c && c == b ); assert! ( a == c && c == a ); // \u4f20\u9012\u6027 assert! ( a == b && b == c && a == c ); assert! ( c == b && b == a && c == a ); Eq \u5728 PartialEq \u7684\u57fa\u7840\u4e0a\u5177\u5907\u4e86\u81ea\u53cd\u6027\uff0c\u4e5f\u5c31\u662f\u5bf9\u4e8e\u4efb\u610f a \u6709 a == a \u5176\u4e2d\u6d6e\u70b9\u6570\u90fd\u5b9e\u73b0\u4e86 PartialEq \uff0c\u4f46\u662f\u6ca1\u6709\u5b9e\u73b0 Eq \uff0c\u56e0\u4e3a NaN != NaN PartialOrd \u5b9e\u73b0\u4e86 < \u3001 <= \u3001 > \u3001 >= \u7b49\u8fd0\u7b97\u7b26\uff0c\u5e76\u4e14\u5177\u5907\u975e\u5bf9\u79f0\u6027\u548c\u4f20\u9012\u6027 1 2 \u82e5 a < b \u5219 ! ( a > b ) \uff08\u975e\u5bf9\u79f0\u6027\uff09 \u82e5 a < b && b < c \u5219 a < c \uff08\u4f20\u9012\u6027\uff09 Ord \u66f4\u4e25\u683c\u7684\u5b9e\u73b0\u4e86 PartialOrd \u548c Eq \uff0c\u56e0\u4e3a\u6d6e\u70b9\u6570\u4e0d\u5177\u5907 Ord \u7279\u6027\uff0c\u4f46\u662f\u7b26\u5408 PartialOrd \u56e0\u4e3a\u6d6e\u70b9\u6570\u5177\u5907\u4e0b\u5217\u7279\u70b9\uff0c\u56e0\u6b64\u4e0d\u6ee1\u8db3 Ord \uff0c\u53ea\u6ee1\u8db3 PartialOrd 1 2 NaN < 0 == false NaN >= 0 == false Link Cfg Test and Cargo Test a Missing Information System V ABI read zone disbale SIMD Too Many Linked Lists Interior mutability in Rust: what, why, how? & vs. ref in Rust patterns Clear explanation of Rust\u2019s module system Understanding Rust slices Implement a bloom filter Frustrated? It's not you, it's Rust Clear explanation of Rust\u2019s module system https://depth-first.com/articles/2020/01/27/rust-ownership-by-example/ TODO https://github.com/stjepang/polling(done) https://fasterthanli.me/articles/surviving-rust-async-interfaces https://github.com/joshtriplett/async-pidfd https://github.com/rust-lang/async-book(Done) https://nick.groenen.me/posts/rust-error-handling/ https://stackoverflow.com/questions/63164973/why-does-rust-allow-calling-functions-via-null-pointers https://blog.carlosgaldino.com/writing-a-file-system-from-scratch-in-rust.html https://tokio.rs/tokio/tutorial https://fasterthanli.me/articles/small-strings-in-rust https://sokoban.iolivia.me/c01-00-intro.html https://github.com/cloudhead/popol http://www.sheshbabu.com/posts/rust-module-system/ (Done) https://createlang.rs/ https://blog.thoughtram.io/string-vs-str-in-rust/ https://fasterthanli.me/articles/working-with-strings-in-rust https://github.com/stjepang/smol https://dev.to/anshulgoyal15/a-beginners-guide-to-grpc-with-rust-3c7o https://cfsamson.github.io/books-futures-explained/introduction.html http://sled.rs/errors https://fasterthanli.me/articles/frustrated-its-not-you-its-rust (done) https://medium.com/swlh/writing-a-modern-http-s-tunnel-in-rust-56e70d898700 https://lowlvl.org/lesson1.html https://ferrous-systems.github.io/teaching-material/index.html https://github.com/pretzelhammer/rust-blog/blob/master/posts/common-rust-lifetime-misconceptions.md(Done) https://github.com/rust-lang/rfcs/blob/master/text/2025-nested-method-calls.md https://github.com/pretzelhammer/rust-blog/blob/master/posts/sizedness-in-rust.md https://github.com/rust-lang/rfcs/blob/master/text/2005-match-ergonomics.md(Done) https://github.com/nox/rust-rfcs/blob/master/text/0738-variance.md https://arzg.github.io/lang/ https://aloso.github.io/ https://boats.gitlab.io/blog/post/wakers-i/","title":"Index"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/rust/#_1","text":"\u5e38\u89c1\u7684\u5c5e\u6027 #[allow(non_camel_case_types)] // \u5141\u8bb8\u975e\u9a7c\u5cf0\u547d\u540d\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u7c7b\u578b\u540d\u9700\u8981\u662f\u9a7c\u5cf0\u7c7b\u578b\uff0c\u5426\u5219\u4f1a\u6709\u8b66\u544a #![allow(overflowing_literals)] (TODO)Rust\u4e2d\u9ed8\u8ba4\u7684\u201c\u53d6\u5f15\u7528\u201d\u3001\u201c\u89e3\u5f15\u7528\u201d\u64cd\u4f5c\u662f\u4e92\u8865\u62b5\u6d88\u7684\u5173\u7cfb\uff0c \u4e92\u4e3a\u9006\u8fd0\u7b97\u3002\u4f46\u662f\uff0c\u5728Rust\u4e2d\uff0c\u53ea\u5141\u8bb8\u81ea\u5b9a\u4e49\u201c\u89e3\u5f15\u7528\u201d\uff0c\u4e0d\u5141\u8bb8\u81ea\u5b9a\u4e49\u201c\u53d6\u5f15\u7528\u201d\u3002 \u5982\u679c\u7c7b\u578b\u6709\u81ea\u5b9a\u4e49\u201c\u89e3\u5f15\u7528\u201d\uff0c\u90a3\u4e48\u5bf9\u5b83\u6267\u884c\u201c\u89e3\u5f15\u7528\u201d\u548c\u201c\u53d6\u5f15\u7528\u201d\u5c31\u4e0d\u518d\u662f\u4e92\u8865\u62b5\u6d88\u7684\u7ed3\u679c\u4e86\u3002\u5148 & \u540e * \u4ee5\u53ca\u5148 * \u540e & \u7684\u7ed3\u679c\u662f\u4e0d\u540c\u7684\u3002 \u51fd\u6570\u53c2\u6570\u53ef\u4ee5\u76f4\u63a5\u89e3\u6784\u4f5c\u4e3a\u4e00\u4e2a\u4e2a\u72ec\u7acb\u53c2\u6570 1 2 3 4 5 6 7 8 9 10 11 12 13 struct T { item1 : char , item2 : bool , } fn test ( T { item1 : arg1 , item2 : arg2 , } : T ) { println! ( \"{} {}\" , arg1 , arg2 ); } Closure \u9ed8\u8ba4\u662f\u5f15\u7528\u6355\u83b7\uff0c\u53ef\u4ee5\u901a\u8fc7move\u6765\u505atake Ownership\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u4e0a\u5e76\u4e0d\u4e00\u5b9a\u662fmove\uff0c\u6709\u53ef\u80fd\u662fcopy 1 2 3 4 5 6 7 8 9 10 11 12 13 pub trait Fn < Args > : FnMut < Args > { extern \"rust-call\" fn call ( & self , args : Args ) -> Self :: Output ; } pub trait FnMut < Args > : FnOnce < Args > { extern \"rust-call\" fn call_mut ( & mut self , args : Args ) -> Self :: Output ; } pub trait FnOnce < Args > { type Output ; extern \"rust-call\" fn call_once ( self , args : Args ) -> Self :: Output ; } try!\uff0c\u9047\u5230\u9519\u8bef\u7684\u65f6\u5019\u63d0\u524dreturn 1 2 3 4 5 6 7 8 9 let socket1 : TcpStream = try ! ( TcpStream :: connect ( \"127.0.0.1:8000\" )); // Is equivalent to... let maybe_socket : Result < TcpStream > = TcpStream :: connect ( \"127.0.0.1:8000\" ); let socket2 : TcpStream = match maybe_socket { Ok ( val ) => val , Err ( err ) => { return Err ( err ) } }; Option::unwrap\uff0c\u65b9\u4fbf\u4e86\u5bf9Option \u8fd4\u56de\u503c\u7684\u5904\u7406\uff0c\u4f46\u662f\u5982\u679c\u662fNone\u4f1a\u5bfc\u81f4\u6267\u884c panic 1 2 3 4 5 6 fn unwrap < T > ( & self ) -> T { match * self { None => panic! ( \"Called `Option::unwrap()` on a `None` value\" ), Some ( value ) => value , } } \u4e3a\u4ec0\u4e48&String\u662f&str?\uff0c\u56e0\u4e3aString\u5b9e\u73b0\u4e86Deref trait 1 2 3 4 pub trait Deref { type Target : ? Sized ; fn deref ( & self ) -> & Self :: Target ; } String\u8f6c&str\uff0c\u4e0d\u80fd\u76f4\u63a5\u4f7f\u7528str\uff0c\u5fc5\u987b\u662f&str\uff0cstr\u662f\u4e00\u4e2aunsized\u7684\u7c7b\u578b 1 2 let addr = \"192.168.0.1:3000\" . to_string (); TcpStream :: connect ( &* addr ); #[derive(...)] \u544a\u8bc9\u7f16\u8bd1\u5668\u63d2\u5165trait\u7684\u9ed8\u8ba4\u5b9e\u73b0 Sized(\u7c7b\u578b\u5fc5\u6709\u6709\u5e38\u91cf\u5927\u5c0f\uff0c\u5728\u7f16\u8bd1\u65f6)\uff0c\u9ed8\u8ba4\u6240\u6709\u7684\u7c7b\u578b\u90fd\u662fSized\u7684\uff0c?Sized(\u7c7b\u578b\u53ef\u80fd\u6709\u5927\u5c0f) example: Box allows T: ?Sized. Trait object\u5bf9\u8c61\u5b89\u5168\uff0c\u53ea\u6709\u662f\u5bf9\u8c61\u5b89\u5168\u7684trait\u624d\u53ef\u4ee5\u505a\u52a8\u6001\u591a\u6001\uff0c\u5426\u5219\u53ea\u80fdstatic dispatch 1 2 3 4 5 A trait is object - safe if : 1. It does not require that Self : Sized 2. Its methods must not use Self 3. Its methods must not have any type parameters 4. Its methods do not require that Self : Sized \u5173\u8054\u7c7b\u578b\uff0c\u548ctrait\u76f8\u5173\u7684\u7c7b\u578b 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // \u907f\u514d\u8fd9\u6837\uff0cN\u548cE\u5728\u8fd9\u91cc\u4e0d\u5e94\u8be5\u662f\u901a\u7528\u7c7b\u578b\uff0c\u800c\u662f\u4e00\u4e2a\u548cGraph\u76f8\u5173\u7684\u7c7b\u578b\u3002 trait Graph < N , E > { fn edges ( & self , & N ) -> Vec < E > ; // etc } trait Graph { type N ; type E ; fn edges ( & self , & Self :: N ) -> Vec < Self :: E > ; } impl Graph for MyGraph { type N = MyNode ; type E = MyEdge ; fn edges ( & self , n : & MyNode ) -> Vec < MyEdge > { /*...*/ } } Rust\u4e2d\u7684\u8303\u578b\u53ef\u4ee5\u6307\u5b9a\u6ee1\u8db3\u90a3\u4e9bTrait\u548cC++20\u4e2d\u7684Concept\u4e00\u81f4 1 2 3 4 5 6 7 8 9 10 11 12 13 // T\u9700\u8981\u6709Clone trait fn cloning_machine < T : Clone > ( t : T ) -> ( T , T ) { ( t . clone (), t . clone ()) } // where\u8bed\u53e5\u6765\u9009\u62e9 fn cloning_machine_2 < T > ( t : T ) -> ( T , T ) where T : Clone { ( t . clone (), t . clone ()) } // \u6ee1\u8db3\u591a\u4e2atrait fn clone_and_compare < T : Clone + Ord > ( t1 : T , t2 : T ) -> bool { t1 . clone () > t2 . clone () } match\u6a21\u5f0f\u5339\u914d\u7684\u65f6\u5019\u9ed8\u8ba4\u662f\u503c\u62f7\u8d1d\u7684\u65b9\u5f0f\uff0c\u53ef\u4ee5\u901a\u8fc7 ref \u6765\u521b\u5efa\u5f15\u7528\u6216\u8005\u662f\u901a\u8fc7 ref mut \u6765\u521b\u5efa\u53ef\u53d8\u7684\u5f15\u7528 1 2 3 4 5 6 // \u76f8\u5e94\u5730\uff0c\u5b9a\u4e49\u4e24\u4e2a\u975e\u5f15\u7528\u7684\u503c\uff0c\u901a\u8fc7 `ref` \u548c `mut` \u53ef\u4ee5\u53d6\u5f97\u5f15\u7528\u3002 let value = 5 ; // \u4f7f\u7528 `ref` \u5173\u952e\u5b57\u6765\u521b\u5efa\u5f15\u7528\u3002 match value { ref r => println! ( \"Got a reference to a value: {:?}\" , r ), } \u5982\u679cmatch\u662f\u5bf9\u4e00\u4e2a\u5f15\u7528\u8fdb\u884c\u6a21\u5f0f\u5339\u914d\u7684\u5316\u53ef\u4ee5\u901a\u8fc7 * \u6765\u89e3\u5f15\u7528\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u901a\u8fc7\u503c\u62f7\u8d1d\u7684\u65b9\u5f0f\u6765\u8fdb\u884c\u6a21\u5f0f\u89e3\u8026 1 2 3 4 5 6 7 // \u83b7\u5f97\u4e00\u4e2a `i32` \u7c7b\u578b\u7684\u5f15\u7528\u3002`&` \u8868\u793a\u83b7\u53d6\u4e00\u4e2a\u5f15\u7528\u3002 let reference = & 4 ; // \u4e3a\u4e86\u907f\u514d `&` \u7684\u4f7f\u7528\uff0c\u9700\u8981\u5728\u5339\u914d\u524d\u89e3\u5f15\u7528\u3002 match * reference { val => println! ( \"Got a value via dereferencing: {:?}\" , val ), } \u5982\u679cmatch\u662f\u5bf9\u4e00\u4e2a\u5f15\u7528\u8fdb\u884c\u6a21\u5f0f\u5339\u914d\u7684\u5316\uff0c\u53ef\u4ee5\u4f7f\u7528\u503c\u7684\u65b9\u5f0f\u3001 ref \u7684\u65b9\u5f0f\u6765\uff0c & \u7684\u65b9\u5f0f\u6765\u8fdb\u884c\u5339\u914d 1 2 3 4 5 6 7 let reference = & 4 ; match reference { // val => println!(\"xxxx\"), // ref val => println!(\"xxxxx\"), & val => println! ( \"Got a value via destructuring: {:?}\" , val ), } \u6a21\u5f0f\u5339\u914d\u7684\u65f6\u5019\u53ef\u4ee5\u901a\u8fc7 .. \u6765\u5ffd\u7565\u67d0\u4e9b\u53d8\u91cf match \u5339\u914d\u7684\u65f6\u5019\uff0c\u8fd8\u53ef\u4ee5\u989d\u5916\u6dfb\u52a0 guard \u6765\u8fc7\u6ee4 1 2 3 4 5 6 7 8 let pair = ( 2 , - 2 ); println! ( \"Tell me about {:?}\" , pair ); match pair { ( x , y ) if x == y => println! ( \"These are twins\" ), ( x , y ) if x + y == 0 => println! ( \"Antimatter, kaboom!\" ), ( x , _ ) if x % 2 == 1 => println! ( \"The first one is odd\" ), _ => println! ( \"No correlation...\" ), } match \u5339\u914d\u7684\u65f6\u5019\uff0c\u5982\u679c\u5339\u914d\u7684\u662f\u4e00\u7cfb\u5217\u7684\u503c\u65f6\u53ef\u4ee5\u901a\u8fc7 @ \u6765\u7ed1\u5b9a\u5339\u914d\u5230\u7684\u4e00\u7cfb\u5217\u503c 1 2 3 4 5 6 7 let age : u32 = 15 ; match age { 0 => println! ( \"I'm not born yet I guess\" ), n @ 1 .. . 12 => println! ( \"I'm a child of age {:?}\" , n ), n @ 13 .. . 19 => println! ( \"I'm a teen of age {:?}\" , n ), n => println! ( \"I'm an old person of age {:?}\" , n ), } \u4f7f\u7528 if let \u53ef\u4ee5\u7528\u6765\u8fdb\u884c\u6a21\u5f0f\u5339\u914d\uff0c\u907f\u514d\u4f7f\u7528match\u5bfc\u81f4\u4ee3\u7801\u5197\u4f59 1 2 3 4 5 6 7 let number = Some ( 7 ); if let Some ( i ) == number { //..... } else { //..... } \u6307\u5b9a\u95ed\u5305\u8fdb\u884c\u53d8\u91cf\u6355\u83b7\u7684\u65b9\u5f0f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 Fn \uff1a\u95ed\u5305\u9700\u8981\u901a\u8fc7\u5f15\u7528\uff08 & T \uff09\u6355\u83b7 FnMut \uff1a\u95ed\u5305\u9700\u8981\u901a\u8fc7\u53ef\u53d8\u5f15\u7528\uff08 & mut T \uff09\u6355\u83b7 FnOnce \uff1a\u95ed\u5305\u9700\u8981\u901a\u8fc7\u503c\uff08 T \uff09\u6355\u83b7 fn apply < F > ( f : F ) where // \u95ed\u5305\u6ca1\u6709\u8f93\u5165\u503c\u548c\u8fd4\u56de\u503c\u3002 F : FnOnce () { // ^ \u8bd5\u4e00\u8bd5\uff1a\u5c06 `FnOnce` \u6362\u6210 `Fn` \u6216 `FnMut`\u3002 f (); } // \u4f7f\u7528\u95ed\u5305\u5e76\u8fd4\u56de\u4e00\u4e2a `i32` \u6574\u578b\u7684\u51fd\u6570\u3002 fn apply_to_3 < F > ( f : F ) -> i32 where // \u95ed\u5305\u5904\u7406\u4e00\u4e2a `i32` \u6574\u578b\u5e76\u8fd4\u56de\u4e00\u4e2a `i32` \u6574\u578b\u3002 F : Fn ( i32 ) -> i32 { f ( 3 ) } borrowing When data is immutably borrowed, it also freezes. Frozen data can't be modified via the original object until all references to it go out of scope: Data can be immutably borrowed any number of times, but while immutably borrowed, the original data can't be mutably borrowed. On the other hand, only one mutable borrow is allowed at a time. The original data can be borrowed again only after the mutable reference goes out of scope 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 fn main () { let mut _mutable_integer = 7 i32 ; { // Borrow `_mutable_integer` let _large_integer = & _mutable_integer ; // Error! `_mutable_integer` is frozen in this scope _mutable_integer = 50 ; // FIXME ^ Comment out this line // `_large_integer` goes out of scope } // Ok! `_mutable_integer` is not frozen in this scope _mutable_integer = 3 ; } Function with lifetimes function signatures with lifetimes have a few constraints: any reference must have an annotated lifetime. any reference being returned must have the same lifetime as an input or be static. Diverging functions \u504f\u79bb\u51fd\u6570\u5c31\u662f\u8fd4\u56de\u503c\u662f ! \u7684\u51fd\u6570 #![no_std] \u7981\u7528rust std\u6807\u51c6\u5e93 #[panic_handler] \u81ea\u5b9a\u4e49panic hook\u51fd\u6570\uff0c\u6807\u51c6\u5e93\u63d0\u4f9b\u4e86\u9ed8\u8ba4\u7248\u672c 1 2 3 4 5 6 use core :: panic :: PanicInfo ; #[panic_handler] fn panic ( info : & PanicInfo ) -> ! { //.... } -C panic|unwind \u901a\u8fc7\u7f16\u8bd1\u9009\u9879\u6765\u5173\u95ed(\u901a\u8fc7panic\u6765\u66ff\u4ee3)\u6216\u8005\u542f\u7528\u6808\u89e3\u65cb\uff0c\u6216\u8005\u901a\u8fc7cargo\u6765\u5f00\u542f 1 2 3 4 5 [ profile . dev ] panic = \"abort\" [ profile . release ] panic = \"abort\" C\u8fd0\u884c\u65f6\u542f\u52a8\u540e\u8c03\u7528crt0\uff0c\u7136\u540e\u8c03\u7528rust\u7684\u8fd0\u884c\u65f6(\u6807\u8bb0\u4e3astart language item)\uff0crust\u8fd0\u884c\u65f6\u6700\u540e\u518d\u8c03\u7528main\u51fd\u6570 no_mangle \u5173\u95edname mangling -C link-arg=-nostartfiles \u94fe\u63a5\u7684\u65f6\u5019\u4e0d\u94fe\u63a5libc\u8fd0\u884c\u65f6 #![no_main] \u8986\u76d6entry point\uff0cLinux\u4e0b\u53ef\u4ee5\u7528\u5982\u4e0b\u51e1\u4e8b\u5b9a\u4e49\u65b0\u7684entry point 1 2 3 4 5 #[no_mangle] // extern \"C\" \u7528\u4e8e\u544a\u8bc9\u7f16\u8bd1\u5668\uff0c\u6309\u7167C\u7684\u8c03\u7528\u7ea6\u5b9a\u6765\u8fdb\u884c\u51fd\u6570\u8c03\u7528 pub extern \"C\" fn _start () -> ! { loop {} } --target \u6307\u5b9a\u7f16\u8bd1\u7684\u5e73\u53f0\uff0c CPU\u67b6\u6784 \u3001 vendor \u3001 OS \u3001 ABI \u7b49\uff0c\u4e0b\u9762\u662f\u4e00\u4e2atarget\u7684\u4f8b\u5b50\u3002 1 2 3 4 5 6 7 8 9 10 { \"llvm-target\" : \"x86_64-unknown-none\" , \"data-layout\" : \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\" , \"arch\" : \"x86_64\" , \"target-endian\" : \"little\" , \"target-pointer-width\" : \"64\" , \"target-c-int-width\" : \"32\" , \"os\" : \"none\" , \"executables\" : true , } Copy trait \u672c\u8d28\u4e0a\u5b9e\u73b0\u662f\u6dfb\u52a0\u4e86 #[lang = \"copy\"] \u7f16\u8bd1\u5668\u5c5e\u6027 #[repr(u8)] \u6307\u5b9aenum\u4f7f\u7528 u8 \u7c7b\u578b\u6765\u5b58\u50a8 eh_personality \u7528\u4e8e\u5b9e\u73b0\u6808\u89e3\u65cb\uff0c\u662f\u4e00\u4e2alanguage item\uff0c #[derive(Debug, Clone, Copy, PartialEq, Eq)] \u5f00\u542fCopy\u8bed\u4e49 repr(C) \u8ba9rust\u4e2d\u7684struct\u5b57\u6bb5\u987a\u5e8f\u548cC\u4e2d\u7684struct\u4e00\u81f4 core::fmt::Write Traits \u9700\u8981\u5b9e\u73b0 fn write_str(&mut self, s: &str) -> fmt::Result \u65b9\u6cd5\uff0c\u53ef\u4ee5\u8c03\u7528 write! \u5b8f\uff0c\u5199\u5165\u683c\u5f0f\u5316\u5b57\u7b26\u4e32 #[macro_export] \u628a\u5b9a\u4e49\u7684\u5b8f\u66b4\u9732\u51fa\u53bb\uff0c\u6240\u6709\u7684crate\u90fd\u53ef\u4ee5\u4f7f\u7528\uff0c\u5c5e\u4e8eroot namesapce #[doc(hidden)] \u4e0d\u7ed9public\u7684function\u751f\u6210\u6587\u6863\u4fe1\u606f cargo\u4e2d\u53ef\u4ee5\u5b9a\u4e49section dev-dependencies \u7528\u6765\u53ea\u5728\u5f00\u53d1\u622a\u65ad\u624d\u4f9d\u8d56\u7684crate rust\u6761\u4ef6\u7f16\u8bd1\u6765\u786e\u5b9a\u5c5e\u6027 #![cfg_attr(not(test), no_main)] \u3001 #[cfg(not(test))] \u3001 #![cfg_attr(test, allow(unused_imports))] \u7b49 \u6570\u7ec4\u6784\u9020\u7684\u65f6\u5019\u8981\u6c42\u7c7b\u578b\u662fCopy\u8bed\u4e49\u7684 array construction in Rust requires that the contained type is Copy \u901a\u8fc7 array_init \u53ef\u4ee5\u8ba9\u6570\u7ec4\u6784\u9020\u4e0d\u662fCopy\u8bed\u4e49\u7684\u7c7b\u578b\u3002 volatile crate\u5e93\u7528\u4e8e\u907f\u514d\u7f16\u8bd1\u5668\u7684\u4f18\u5316\uff0c\u5bf9\u4e8e\u4e00\u6bb5\u5185\u5b58\uff0c\u5982\u679c\u53ea\u6709\u5199\u6ca1\u6709\u8bfb\uff0c\u7f16\u8bd1\u5668\u53ef\u80fd\u4f1a\u628a\u5199\u64cd\u4f5c\u7ed9\u4f18\u5316\u6389\u3002 Box::leak \u7528\u4e8e\u5c06\u6d88\u8d39Box::new\u521b\u5efa\u51fa\u6765\u7684\u667a\u80fd\u6307\u9488\uff0c\u5e76\u8fd4\u56de 'a mut \u6307\u9488 \u6570\u7ec4\u7684\u6784\u9020\u9700\u8981\u5176\u7c7b\u578b\u662fCopy\u8bed\u4e49\u7684\uff0c\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u9700\u8981\u7528\u5230 array-init crate 1 2 3 4 5 6 7 8 9 10 11 12 // Volatile \u662fNon-Copy\u7684\u7c7b\u578b struct Buffer { chars : [[ Volatile < ScreenChar > ; BUFFER_WIDTH ]; BUFFER_HEIGHT ], } fn construct_buffer () -> Buffer { use array_init :: array_init ; Buffer { chars : array_init ( | _ | array_init ( | _ | Volatile :: new ( empty_char ()))), } } #[repr(transparent)] \u786e\u4fddstruct\u548c\u5185\u90e8\u7684\u7c7b\u578b\u662f\u4e00\u81f4\u7684\u5185\u5b58\u5e03\u5c40 1 2 3 // \u786e\u4fddColorCode\u548cu8\u662f\u4e00\u6837\u7684\u5185\u5b58\u5e03\u5c40 #[repr(transparent)] struct ColorCode ( u8 ); \u6d4b\u8bd5panic\u7684\u573a\u666f 1 2 3 4 5 #[should_panic] // or use: #[should_panic(expected = \"Some message\" )] fn it_works2 () { } \u8f93\u51fa\u6d4b\u8bd5\u8f93\u51fa\u5185\u5bb9 cargo test -- --color always --nocapture cargo test -- --nocapture set RUST_TEST_NOCAPTURE=1 \u81ea\u5b9a\u4e49ERROR 1 2 3 4 5 6 7 8 9 #[derive(Debug, PartialEq)] pub enum UUIDError { InvalidChar ( char ), InvalidGroupCount ( usize ), InvalidLength ( usize ), InvalidGroupLength ( u8 ), } type Result < T > = result :: Result < T , UUIDError > ; mem::replace \u5982\u4f55\u5c06\u4e00\u4e2a\u5bf9\u8c61\u7684\u503cmove\u5230\u5176\u4ed6\u5730\u65b9\uff0c\u7136\u540e\u91cd\u65b0\u8d4b\u503c\u5462? 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 pub struct List { head : Link , } enum Link { Empty , More ( Box < Node > ), } struct Node { elem : i32 , next : Link , } pub fn push ( & mut self , elem : i32 ) { let new_node = Box :: new ( Node { elem : elem , next : self . head , // \u8fd9\u91cc\u5c06self.head\u79fb\u52a8\u5230next }); // \u8fd9\u91cc\u8fdb\u884c\u4e86\u91cd\u65b0\u8d4b\u503c\uff0c\u7f16\u8bd1\u5668\u4f1a\u8b66\u544a\uff0c\u56e0\u4e3a\u4f7f\u7528\u4e86\u4e00\u4e2a\u5df2\u7ecf\u88abmoved\u7684\u53d8\u91cf self . head = Link :: More ( new_node ); } // mem::replace\u53ef\u4ee5\u4e00\u6b21\u6027\u5b8c\u6210\u8fd9\u4e2a\u4ea4\u6362\u8d4b\u503c\u7684\u52a8\u4f5c\uff0c\u4e5f\u53ef\u4ee5\u5148\u4e34\u65f6\u66ff\u6362\u4e3a\u4e00\u4e2a\u4e2d\u95f4\u503c\uff0c\u7136\u540e\u518d\u8d4b\u503c pub fn push ( & mut self , elem : i32 ) { let new_node = Box :: new ( Node { elem : elem , // \u5148\u66ff\u6362\u4e3a\u4e00\u4e2a\u4e2d\u95f4\u503c next : mem :: replace ( & mut self . head , Link :: Empty ), }); self . head = Link :: More ( new_node ); } Option\u7684take\u65b9\u6cd5\u5176\u5b9e\u5c31\u662f mem::replace(&mut variable, None) ; Option map\u65b9\u6cd5 map\u65b9\u6cd5\u7b49\u540c\u4e8e\u4e0b\u9762\u8fd9\u79cd\u5f62\u5f0f\uff0c\u901a\u8fc7\u6a21\u5f0f\u5339\u914dOption\u62ff\u5230\u5176\u4e2d\u7684\u5143\u7d20\uff0c\u4f20\u9012\u5230map\u4e2d\u7684lambda\u65b9\u6cd5\uff0c \u5bf9\u4e8eLambda\u65b9\u6cd5\u4e2d\u8fd4\u56de\u7684\u5143\u7d20\u901a\u8fc7Some\u8fdb\u884c\u5305\u88c5\u3002 1 match option { None => None , Some ( x ) => Some ( y ) } Option<&mut value> \u8c03\u7528map\u4f20\u9012\u7684value\u5c31\u662fmut\u7684 \u5982\u4f55\u521b\u5efa\u81ea\u5b9a\u4e49\u8fed\u4ee3\u5668 lifetime-elision Each elided lifetime in input position becomes a distinct lifetime parameter. If there is exactly one input lifetime position (elided or not), that lifetime is assigned to all elided output lifetimes. If there are multiple input lifetime positions, but one of them is &self or &mut self, the lifetime of self is assigned to all elided output lifetimes. Otherwise, it is an error to elide an output lifetime. mut\u4fee\u9970\u4f4d\u7f6e\u4e0d\u540c\uff0c\u5176\u542b\u4e49\u4e0d\u540c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 fn main () { let mut var = 0_ i32 ; // mut\u4fee\u9970\u53d8\u91cf\u540d\uff0c\u8868\u793a\u8fd9\u4e2a\u53d8\u91cf\u662f\u53ef\u4ee5\u91cd\u65b0\u6307\u5411\u65b0\u7684\u53d8\u91cf\u7684\u3002 { let p1 = & mut var ; // mut \u4fee\u9970\u7684\u662f\u501f\u7528\u6307\u9488&\uff0c\u8868\u793a\u88ab\u6307\u5411\u7684\u5bf9\u8c61\u662f\u53ef\u4ee5\u88ab\u4fee\u6539\u7684 * p1 = 1 ; } { let temp = 2_ i32 ; let mut p2 = & var ; // p2\u53ef\u4ee5\u91cd\u65b0\u6307\u5411\uff0c\u4f46\u662f\u65e0\u6cd5\u901a\u8fc7p2\u6765\u66f4\u6539var\u7684\u503c p2 = & temp } { let mut temp = 3_ i32 ; let mut p3 = & mut var ; // \u65e2\u53ef\u4ee5\u91cd\u65b0\u6307\u5411\uff0c\u4e5f\u53ef\u4ee5\u4fee\u6539var\u7684\u503c * p3 = 3 ; p3 = & mut temp } } \u5171\u4eab\u4e0d\u53ef\u53d8\u3001\u53ef\u53d8\u4e0d\u5171\u4eab\uff0c\u552f\u4e00\u4fee\u6539\u6743\u539f\u5219 error handling \u9488\u5bf9Option\u6216Result\u5904\u7406\u65b9\u5f0f\u76f8\u540c panic! 1 2 3 4 5 6 7 8 9 10 11 fn guess ( n : i32 ) -> bool { if n < 1 || n > 10 { panic! ( \"Invalid number: {}\" , n ); } n == 5 } fn main () { guess ( 11 ); } unwrap() \u7b49\u540c\u4e8ematch\u7684\u65f6\u5019\uff0c\u9047\u5230error\u6216None\u89e6\u53d1 panic! 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 impl < T > Option < T > { fn unwrap ( self ) -> T { match self { Option :: Some ( val ) => val , Option :: None => panic! ( \"called `Option::unwrap()` on a `None` value\" ), } } } use std :: env ; fn main () { let mut argv = env :: args (); let arg : String = argv . nth ( 1 ). unwrap (); let n : i32 = arg . parse (). unwrap (); println! ( \"{}\" , 2 * n ); } unwrap_or \u4eceOption\u4e2d\u83b7\u53d6\u503c\uff0c\u5982\u679c\u662fNone\u5c31\u8fd4\u56de\u6307\u5b9a\u7684\u9ed8\u8ba4\u503c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 fn unwrap_or < T > ( option : Option < T > , default : T ) -> T { match option { None => default , Some ( value ) => value , } } use std :: env ; fn main () { let mut argv = env :: args (); let arg : String = argv . nth ( 1 ). unwrap_or ( String :: from ( \"unknow number\" )); let n : i32 = arg . parse (). unwrap_or ( 2 ); println! ( \"arg: {}, number: {}\" , arg , 2 * n ); } map \u5c06Option\u89e3\u5f00\uff0c\u5982\u679c\u4e0d\u662fNone\u5c31\u56de\u8c03function\uff0c\u6700\u540e\u5c06\u8fd4\u56de\u503c\u5305\u88c5\u6210Option\uff0c\u672c\u8d28\u4e0a\u662f\u4e00\u79cdOption\u8f6c\u6362\u6210\u53e6\u5916\u4e00\u79cdOption 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 fn map < F , T , A > ( option : Option < T > , f : F ) -> Option < A > where F : FnOnce ( T ) -> A { match option { None => None , Some ( value ) => Some ( f ( value )), } } // Searches `haystack` for the Unicode character `needle`. If one is found, the // byte offset of the character is returned. Otherwise, `None` is returned. fn find ( haystack : & str , needle : char ) -> Option < usize > { for ( offset , c ) in haystack . char_indices () { if c == needle { return Some ( offset ); } } None } fn main () { let m = find ( \"findstring\" , 'd' ); println! ( \"size: {}\" , m . map ( | x | ( x + 100 ). to_string () + \"oo\" ). unwrap ()); } and_then \u8fd9\u4e2a\u548cmap\u76f8\u540c\uff0c\u53ea\u662f\u8981\u6c42function\u7684\u8fd4\u56de\u503c\u662fOption\uff0c\u4e0d\u5bf9\u5176\u8fd4\u56de\u503c\u5c01\u88c5\u6210Option 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 fn and_then < F , T , A > ( option : Option < T > , f : F ) -> Option < A > where F : FnOnce ( T ) -> Option < A > { match option { None => None , Some ( value ) => f ( value ), } } // Searches `haystack` for the Unicode character `needle`. If one is found, the // byte offset of the character is returned. Otherwise, `None` is returned. fn find ( haystack : & str , needle : char ) -> Option < usize > { for ( offset , c ) in haystack . char_indices () { if c == needle { return Some ( offset ); } } None } fn main () { let m = find ( \"findstring\" , 'd' ); println! ( \"size: {}\" , m . and_then ( | x | Some ( x . to_string () + \"test\" )). unwrap ()); } unwrap_or_else \u5982\u679c\u662fNone\u5c31\u56de\u8c03function\uff0c\u8fd9\u4e2afunction\u4f1a\u8fd4\u56de\u4e00\u4e2a\u503c\uff0c\u5426\u5219\u5c31\u76f4\u63a5\u8fd4\u56deOption\u7684\u503c 1 2 3 4 5 fn main () { let mut argv = env :: args (); let arg : String = argv . nth ( 1 ). unwrap_or_else ( || \"test\" . to_owned ()); println! ( \"arg: {}\" , arg ); } Result type alias idiom 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 use std :: num :: ParseIntError ; use std :: result ; type Result < T > = result :: Result < T , ParseIntError > ; fn double_number ( number_str : & str ) -> Result < i32 > { unimplemented! (); } fn double_number ( number_str : & str ) -> i32 { 2 * number_str . parse :: < i32 > (). unwrap () } fn main () { let n : i32 = double_number ( \"10\" ); assert_eq! ( n , 20 ); } // \u901a\u8fc7map\u6765\u8f6c\u6362 fn double_number ( number_str : & str ) -> i32 { 2 * number_str . parse :: < i32 > (). map ( | number | number + 10 ). unwrap () } fn main () { let n : i32 = double_number ( \"10\" ); assert_eq! ( n , 40 ); } ok_or \u5c06Option\u8f6c\u6362\u4e3aResult 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 fn ok_or < T , E > ( option : Option < T > , err : E ) -> Result < T , E > { match option { Some ( val ) => Ok ( val ), None => Err ( err ), } } use std :: env ; fn double_arg ( mut argv : env :: Args ) -> Result < i32 , String > { argv . nth ( 1 ) . ok_or ( \"Please give at least one argument\" . to_owned ()) . and_then ( | arg | arg . parse :: < i32 > (). map_err ( | err | err . to_string ())) } fn main () { match double_arg ( env :: args ()) { Ok ( n ) => println! ( \"{}\" , n ), Err ( err ) => println! ( \"Error: {}\" , err ), } } map_err Maps a Result<T, E> to Result<T, F> \uff0c\u5982\u679c\u662fOk\u5c31\u539f\u5c01\u4e0d\u52a8\u8fd4\u56de\uff0c\u5426\u5219\u5c31\u5c06error\u503c\u4f20\u9012\u7ed9fucntion\uff0c\u8fd4\u56de\u53e6\u4e00\u79cd\u7c7b\u578b\uff0c\u6700\u540e\u5c06\u7ed3\u679c\u5305\u88c5\u6210Result 1 2 3 4 5 6 7 8 9 10 11 12 13 pub fn map_err < F , O > ( self , op : O ) -> Result < T , F > where O : FnOnce ( E ) -> F , fn stringify ( x : u32 ) -> String { format! ( \"error code: {}\" , x ) } fn main () { let x : Result < u32 , u32 > = Ok ( 2 ); assert_eq! ( x . map_err ( stringify ), Ok ( 2 )); let x : Result < u32 , u32 > = Err ( 13 ); assert_eq! ( x . map_err ( stringify ), Err ( \"error code: 13\" . to_string ())); } try! or ? 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 macro_rules! try { ( $e : expr ) => ( match $e { Ok ( val ) => val , Err ( err ) => return Err ( err ), }); } use std :: fs :: File ; use std :: io :: Read ; use std :: path :: Path ; fn file_double < P : AsRef < Path >> ( file_path : P ) -> Result < i32 , String > { let mut file = File :: open ( file_path ). map_err ( | e | e . to_string ()) ? ; let mut contents = String :: new (); file . read_to_string ( & mut contents ). map_err ( | e | e . to_string ()) ? ; let n = contents . trim (). parse :: < i32 > (). map_err ( | e | e . to_string ()) ? ; Ok ( 2 * n ) } fn main () { match file_double ( \"foobar\" ) { Ok ( n ) => println! ( \"{}\" , n ), Err ( err ) => println! ( \"Error: {}\" , err ), } } use std :: fs :: File ; use std :: io :: Read ; use std :: path :: Path ; fn file_double < P : AsRef < Path >> ( file_path : P ) -> Result < i32 , String > { let mut file = try ! ( File :: open ( file_path ). map_err ( | e | e . to_string ())); let mut contents = String :: new (); try ! ( file . read_to_string ( & mut contents ). map_err ( | e | e . to_string ())); let n = try ! ( contents . trim (). parse :: < i32 > (). map_err ( | e | e . to_string ())); Ok ( 2 * n ) } fn main () { match file_double ( \"foobar\" ) { Ok ( n ) => println! ( \"{}\" , n ), Err ( err ) => println! ( \"Error: {}\" , err ), } } std::error::Error trait\uff0c\u81ea\u5b9a\u4e49\u9519\u8bef\u7c7b\u578b\uff0c\u9700\u8981\u5b9e\u73b0\u8fd9\u4e2atrait 1 2 3 4 5 6 7 8 9 use std :: fmt :: { Debug , Display }; trait Error : Debug + Display { /// A short description of the error. fn description ( & self ) -> & str ; /// The lower level cause of this error, if any. fn cause ( & self ) -> Option <& Error > { None } } Box<dyn Error> \u4f7f\u7528\u8fd9\u4e2a\u9519\u8bef\u7c7b\u578b\uff0c\u800c\u4e0d\u662f\u5177\u4f53\u7684\u7c7b\u578b\uff0c\u4f46\u662f\u4e0d\u80fd\u5411\u4e0b\u8f6c\u578b\uff0c\u6ca1\u529e\u6cd5\u62ff\u5230\u8fdb\u4e00\u6b65\u7684\u9519\u8bef\u4fe1\u606f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 use std :: error :: Error ; use std :: fs :: File ; use std :: io :: Read ; use std :: path :: Path ; // \u4efb\u4f55\u7c7b\u578b\u7684Error\u90fd\u53ef\u4ee5\u5411\u4e0a\u8f6c\u578b\u4e3aBox<dyn Error> fn file_double < P : AsRef < Path >> ( file_path : P ) -> Result < i32 , Box < dyn Error >> { let mut file = File :: open ( file_path ) ? ; let mut contents = String :: new (); file . read_to_string ( & mut contents ) ? ; let n = contents . trim (). parse :: < i32 > () ? ; Ok ( 2 * n ) } fn main () { match file_double ( \"foobar\" ) { Ok ( n ) => println! ( \"{}\" , n ), Err ( err ) => println! ( \"Error: {}\" , err ), } } expect \u5982\u679c\u662fNone\u5c31 panic! \uff0c\u5e76\u8f93\u51fa\u4e00\u6bb5\u81ea\u5b9a\u4e49\u7684\u9519\u8bef\u6d88\u606f\u3002 std::convert::From \u81ea\u5b9a\u4e49\u7c7b\u578b\u8f6c\u6362\uff0c\u53ef\u4ee5\u5c06\u81ea\u5b9a\u4e49\u7684\u9519\u8bef\u7c7b\u578b\u8f6c\u6362\u4e3a\u9884\u671f\u7684\u6807\u51c6\u9519\u8bef\u7c7b\u578b 1 2 3 trait From < T > { fn from ( T ) -> Self ; } failure::Error failure crate\uff0c\u7c7b\u4f3c\u4e8e Box<Error> \uff0c\u4f46\u662f\u8fd9\u4e2acrate\u989d\u5916\u53ef\u4ee5\u6253\u5370backtraces\uff0c\u4ee5\u53ca\u597d\u7684\u5411\u4e0b\u8f6c\u578b\u7684\u652f\u6301\u3002 map_or \u63d0\u4f9b\u9ed8\u8ba4\u503c\uff0c\u548cmap\u4e0d\u540c\u7684\u65f6\u5019\uff0c\u8fd9\u4e2a\u8fd4\u56de\u503c\u548c\u63d0\u4f9b\u7684\u9ed8\u8ba4\u503c\u7c7b\u578b\u4e00\u81f4\uff0c\u800c\u4e0d\u662f\u7528 option \u518d\u5305\u88c5\u4e00\u6b21 1 2 3 4 5 6 7 8 9 10 pub fn map_or < U , F > ( self , default : U , f : F ) -> U where F : FnOnce ( T ) -> U , let x = Some ( \"foo\" ); assert_eq! ( x . map_or ( 42 , | v | v . len ()), 3 ); let x : Option <& str > = None ; assert_eq! ( x . map_or ( 42 , | v | v . len ()), 42 ); unwrap_err \u5982\u679c\u503c\u662fOk\u5219\u4f1apanic\uff0c\u5982\u679c\u503c\u662ferr\u5219\u8fd4\u56de\u5bf9\u5e94\u7684Error\u503c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 pub fn unwrap_err ( self ) -> E Unwraps a result , yielding the content of an Err . Panics Panics if the value is an Ok , with a custom panic message provided by the Ok ' s value . use std :: error :: Error ; use std :: fs ; use std :: io ; use std :: num ; fn main () { let io_err : io :: Error = io :: Error :: last_os_error (); let parse_err : num :: ParseIntError = \"2\" . parse :: < i32 > (). unwrap_err (); println! ( \"{}\" , parse_err ); } \u5185\u90e8\u53ef\u53d8\u6027 \u5bf9\u8c61\u662f\u4e0d\u53ef\u53d8\u7684\uff0c\u4f46\u662f\u53c8\u9700\u8981\u67d0\u4e9b\u60c5\u51b5\u4e0b\u5185\u90e8\u7684\u4e00\u4e9b\u5b57\u6bb5\u662f\u53ef\u53d8\u7684\uff0c\u5178\u578b\u7684\u50cfRc\u3001Mutex\u7b49\uff0cRc\u5728\u8d4b\u503c\u7684\u65f6\u5019\uff0c\u5e0c\u671b\u5185\u90e8\u7684\u5f15\u7528\u8ba1\u6570\u53ef\u4ee5\u9012\u589e\u3002\u4f46\u662fRc\u81ea\u8eab\u662f\u4e0d\u53ef\u53d8\u7684\u3002 RefCell\u548cCell\u53ef\u7528\u4e8e\u5b9e\u73b0\u5185\u90e8\u53ef\u53d8\u6027\uff0c\u524d\u8005\u5e26\u6709\u8fd0\u884c\u65f6\u7684\u501f\u7528\u68c0\u67e5\uff0c\u540e\u8005\u6ca1\u6709\uff0c\u540e\u8005\u8981\u6c42\u7c7b\u578b\u5fc5\u987b\u5b9e\u73b0Cope trait\uff0c\u524d\u8005\u4e0d\u8981\u6c42\u3002\u8fd9\u4e24\u8005\u90fd\u662f\u975e\u7ebf\u7a0b\u5b89\u5168\u7684\u3002 \u7ebf\u7a0b\u5b89\u5168\u7248\u672c\u7684\u5185\u90e8\u53ef\u53d8\u6027 1. Copy\u7c7b\u578b Atomic*\u7c7b\u578b \u53ef\u4ee5\u5b9e\u73b0\u7ebf\u7a0b\u5b89\u5168\u7248\u672c\u7684\u5185\u90e8\u53ef\u53d8\u6027\u3002 2. Non-Copy\u7c7b\u578b Arc<RwLock<_>> Arc<Vec<RwLock<T>>> \u548c Arc<RwLock<Vec<T>>> \u524d\u8005\u4e0d\u80fd\u5e76\u53d1\u7684\u64cd\u4f5c Vec \uff0c\u4f46\u662f\u53ef\u4ee5\u5e76\u53d1\u7684\u64cd\u4f5c\u5176\u503cT\uff0c\u540e\u8005\u53ef\u4ee5\u5e76\u53d1\u7684\u64cd\u4f5cVec\uff0c\u4f46\u662f\u65e0\u6cd5\u5e76\u53d1\u64cd\u4f5cT \u5185\u90e8\u53ef\u53d8\u6027\u7684\u5185\u90e8\u5b9e\u73b0\u4f9d\u9760 UnsafeCell \uff0c\u8d77\u5185\u90e8\u5b9e\u73b0\u4f9d\u9760\u7f16\u8bd1\u5668 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 #[lang = \"unsafe_cell\" ] #[stable(feature = \"rust1\" , since = \"1.0.0\" )] pub struct UnsafeCell < T : ? Sized > { value : T , } // \u5c06\u4e0d\u53ef\u53d8\u8f6c\u6362\u4e3a\u53ef\u53d8 pub fn get ( & self ) -> * mut T { & self . value as * const T as * mut T } pub struct Cell < T > { value : UnsafeCell < T > , } pub fn get ( & self ) -> T { unsafe { * self . value . get () } } pub fn set ( & self , value : T ) { unsafe { * self . value . get () = value ; } } pub struct RefCell < T : ? Sized > { borrow : Cell < BorrowFlag > , value : UnsafeCell < T > , } pub fn borrow ( & self ) -> Ref < T > { match BorrowRef :: new ( & self . borrow ) { Some ( b ) => Ref { value : unsafe { &* self . value . get () }, borrow : b , }, None => panic! ( \"RefCell<T> already mutably borrowed\" ), } } & vs ref in Rust patterns match\u65e2\u53ef\u4ee5\u64cd\u4f5c\u5f15\u7528\u4e5f\u53ef\u4ee5\u64cd\u4f5cvalue 1 2 3 4 5 6 7 8 9 10 struct Foo ( String ); fn main () { // \u5339\u914d\u5f15\u7528\uff0c\u56e0\u6b64\u5e76\u6ca1\u6709\u53d1\u751fmove match foo { Foo ( x ) => println! ( \"Matched! {}\" , x ), }; // \u8fd9\u91cc\u4ecd\u7136\u8fd8\u53ef\u4ee5\u5bf9foo\u8fdb\u884c\u64cd\u4f5c\u3002\u5982\u679c\u4e0a\u9762\u6362\u6210\u5bf9value\u8fdb\u884cmatch\uff0c\u8fd9\u91cc\u5c31\u4f1a\u51fa\u73b0\u9519\u8bef\uff0c\u663e\u793afoo\u7684\u503c\u5df2\u7ecf\u88abmoved\u4e86 println! ( \"{}\" , foo . 0 ); } & \u4f5c\u7528\u4e8ematch\u4e00\u4e2a\u5f15\u7528\u7684\u65f6\u5019\uff0c\u7528\u4e8ematch\u8fd9\u4e2a\u5f15\u7528\u6307\u5411\u7684\u5bf9\u8c61 1 2 3 4 5 6 7 8 9 10 11 struct Foo ( String ); fn main () { let foo = & Foo ( String :: from ( \"test\" )); match foo { // \u5e76\u4e0d\u662fmatch\u5f15\u7528\u672c\u8eab\uff0c\u800c\u662f\u5f15\u7528\u6307\u5411\u7684\u5bf9\u8c61\uff0cfoo\u672c\u8eab\u662f\u5f15\u7528\uff0c\u5176\u5f15\u7528\u90e8\u5206\u6b63\u597d\u548cpattern\u7684`&`\u62b5\u6d88\uff0c\u4e5f\u5c31\u662f\u6240\u6709Foo(x) \u6b63\u597d\u5bf9\u4e8evalue\u90e8\u5206 & Foo ( x ) => println! ( \"Matched! {}\" , x ), }; //\u8fd9\u91cc\u5c31\u4f1a\u51fa\u73b0\u9519\u8bef\uff0c\u663e\u793afoo\u7684\u503c\u5df2\u7ecf\u88abmoved\u4e86 println! ( \"{}\" , foo . 0 ); } 2. ref \u4f5c\u7528\u4e8ematch\uff0c\u907f\u514dvalue\u88abmove\uff0c\u800c\u662f\u4f7f\u7528\u5f15\u7528\u83b7\u53d6match\u5339\u914d\u7684\u503c 1 2 3 4 5 6 7 8 9 10 struct Foo ( String ); fn main () { let foo = Foo ( String :: from ( \"test\" )); // \u5c3d\u7ba1\u662f\u5bf9value\u8fdb\u884cmatch\uff0c\u4f46\u662f\u901a\u8fc7ref\u5173\u952e\u5b57\uff0c\u4f7f\u5f97\u53ef\u4ee5\u901a\u8fc7\u5f15\u7528\u8fc7\u7684\u65b9\u5f0f\u8bbf\u95eematch\u5230\u7684\u503c match foo { Foo ( ref x ) => println! ( \"Matched! {}\" , x ), }; println! ( \"{}\" , foo . 0 ); } std::mem::uninitialized \u521d\u59cb\u5316\u6570\u7ec4\u7684\u65f6\u5019\uff0c\u5982\u679c\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u4e0d\u662fCopy\u7c7b\u578b\u7684\u6570\u636e\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u4f7f\u7528\u5230 std::mem::uninitialized \u548clibc\u4ea4\u4e92\u7684\u65f6\u5019\uff0c\u58f0\u660e\u4e00\u4e2a\u53d8\u91cf\uff0c\u8fd9\u4e2a\u53d8\u91cf\u8981\u88ablibc\u521d\u59cb\u5316 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 use std :: mem ; use std :: ptr ; // Only declare the array. This safely leaves it // uninitialized in a way that Rust will track for us. // However we can't initialize it element-by-element // safely, and we can't use the `[value; 1000]` // constructor because it only works with `Copy` data. let mut data : [ Vec < u32 > ; 1000 ]; unsafe { data = mem :: uninitialized (); for elem in & mut data [ .. ] { ptr :: write ( elem , Vec :: new ()); } } println! ( \"{:?}\" , & data [ 0 ]); 1 2 3 4 5 6 7 8 9 10 11 12 impl PlatformInfo { pub fn new () -> io :: Result < Self > { unsafe { let mut uts : utsname = mem :: uninitialized (); if uname ( & mut uts ) == 0 { Ok ( Self { inner : uts }) } else { Err ( io :: Error :: last_os_error ()) } } } }","title":"\u8bed\u6cd5\u57fa\u7840"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/rust/#crate-and-mod","text":"crate\u662fRust\u4e2d\u72ec\u7acb\u7684\u7f16\u8bd1\u5355\u5143\uff0c\u6bcf\u4e00\u4e2acrate\u5bf9\u5e94\u751f\u6210\u4e00\u4e2a\u5e93\uff0c\u6216\u8005\u662f\u53ef\u6267\u884c\u6587\u4ef6\u3002 mod\u53ef\u4ee5\u7b80\u5355\u7406\u89e3\u6210\u547d\u540d\u7a7a\u95f4\uff0cmod\u53ef\u4ee5\u5d4c\u5957\uff0c\u8fd8\u53ef\u4ee5\u63a7\u5236\u5185\u90e8\u5143\u7d20\u7684\u53ef\u89c1\u6027\uff0cmod\u53ef\u4ee5\u5faa\u73af\u5f15\u7528\uff0ccrate\u4e4b\u95f4\u4e0d\u53ef\u4ee5\uff0crust\u9700\u8981\u628a\u6574\u4e2acrate\u5168\u90e8load\u624d\u80fd\u6267\u884c\u7f16\u8bd1\u3002 \u7248\u672c\u53f7\u7684\u6a21\u7cca\u5339\u914d: ^1.2.3 ==> 1.2.3 <= version < 2.0.0 (\u9ed8\u8ba4\u884c\u4e3a\uff0c\u76f4\u63a5\u5199\u4e00\u4e2a\u56fa\u5b9a\u7248\u672c\u53f7) ~1.2.3 ==> 1.2.3 <= version < 1.3.0 1.* ==> 1.0.0 <= version < 2.0.0 \u53ef\u4ee5\u6307\u5b9a\u5b98\u65b9\u4ed3\u5e93\u4e2d\u7684crate \u53ef\u4ee5\u6307\u5b9a\u672c\u5730\u7684crate \u53ef\u4ee5\u6307\u5b9agit pub use \u91cd\u65b0\u5bfc\u51fa\u6a21\u5757\u4e2d\u7684\u5143\u7d20\uff0c\u4f7f\u5f97\u5bfc\u51fa\u7684\u5143\u7d20\uff0c\u6210\u4e3a\u5f53\u524d\u6a21\u5757\u7684\u4e00\u90e8\u5206 \u6307\u5b9a\u65b9\u6cd5\u7684\u53ef\u89c1\u884c: pub(crate) pub(in xxx_mod) pub(self) \u6216\u8005 pub(in self) pub(super) \u6216\u8005 pub(in super) #[non_exhaustive] \u65b0\u589eenum\u6210\u5458\u7684\u65f6\u5019\uff0c\u4e0d\u7834\u574f\u517c\u5bb9\u6027","title":"crate and mod"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/rust/#ffi","text":"Rust\u548cC\u662fABI\u517c\u5bb9\u7684\uff0c\u4f46\u662f\u9700\u8981\u6ee1\u8db3\u4e00\u4e9b\u6761\u4ef6 \u4f7f\u7528 extern C \u4fee\u9970\u7684 \u4f7f\u7528 #[no_mangle] \u4fee\u9970\u7684\u51fd\u6570 \u51fd\u6570\u53c2\u6570\u3001\u8fd4\u56de\u503c\u4e2d\u4f7f\u7528\u7684\u7c7b\u578b\uff0c\u5fc5\u987b\u662f\u5728Rust\u548cC\u4e2d\u5177\u5907\u540c\u6837\u7684\u5185\u5b58\u5e03\u5c40 C\u8c03\u7528Rut Step1: \u6309\u7167\u4e0a\u8ff0\u89c4\u5219\u7f16\u5199Rust\u63a5\u53e3\uff0c\u63d0\u4f9b\u7ed9C\u8c03\u7528 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #[no_mangle] pub extern \"C\" fn rust_capitalize ( s : * mut c_char ) { unsafe { let mut p = s as * mut u8 ; while * p != 0 { let ch = char :: from ( * p ); if ch . is_ascii () { let upper = ch . to_ascii_uppercase (); * p = upper as u8 ; } p = p . offset ( 1 ); } } } Step2: \u7f16\u8bd1\u6210C\u7684\u9759\u6001\u5e93 1 rustc --crate-type=staticlib capitalize.rs Step3: \u7f16\u5199C\u4ee3\u7801\u5f00\u59cb\u8c03\u7528 1 2 3 4 5 6 7 8 9 10 #include <stdlib.h> #include <stdio.h> // declare extern void rust_capitalize ( char * ); int main () { char str [] = \"hello world\" ; rust_capitalize ( str ); printf ( \"%s \\n \" , str ); return 0 ; } gcc -o main main.c -L. -l:libcapitalize.a -lpthread -ldl Rust\u8c03\u7528C\u5e93 Step1: \u7f16\u8bd1\u597dC\u7684\u9759\u6001\u5e93 Step2: \u5728Rust\u4e2d\u4f7f\u7528 #[link = \"library_name\"] \u6765\u627e\u5230\u5bf9\u5e94\u7684\u9759\u6001\u5e93\uff0c\u5e76\u901a\u8fc7 extern \"C\" \u8fdb\u884c\u65b9\u6cd5\u7684\u58f0\u660e 1 2 3 4 5 6 7 8 9 use std :: os :: raw :: c_int ; #[link(name = \"simple_math\" )] extern \"C\" { fn add_square ( a : c_int , b : c_int ) -> c_int ; } fn main () { let r = unsafe { add_square ( 2 , 2 ) }; println! ( \"{}\" , r ); } \u5bf9\u4e8e\u4e00\u4e9b\u590d\u6742\u6570\u636e\u7c7b\u578b\uff0c\u53ef\u4ee5\u901a\u8fc7struct\u5e76\u6dfb\u52a0 #[repr(C)] \u6765\u4fdd\u8bc1\u548cC\u7684\u5185\u5b58\u5e03\u5c40\u4e00\u81f4\u6765\u7ec4\u5408\u590d\u6742\u7684\u6570\u636e\u7c7b\u578b Step3: \u7f16\u8bd1\u8fd0\u884c \u6307\u5b9a\u9759\u6001\u5e93\u7684\u641c\u7d22\u8def\u5f84 rustc -L . call_math.rs","title":"FFI"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/rust/#_2","text":"/// \u5f00\u5934\u7684\u6587\u6863\u88ab\u89c6\u4e3a\u662f\u7ed9\u5b83\u540e\u9762\u7684\u90a3\u4e2a\u5143\u7d20\u505a\u7684\u8bf4\u660e //! \u5f00\u5934\u7684\u6587\u6863\u88ab\u89c6\u4e3a\u662f\u7ed9\u5305\u542b\u8fd9\u5757\u6587\u6863\u7684\u5143\u7d20\u505a\u7684\u8bf4\u660e Rust\u6587\u6863\u91cc\u9762\u7684\u4ee3\u7801\u5757\uff0c\u5728\u4f7f\u7528cargo test\u547d\u4ee4\u65f6\uff0c\u4e5f\u662f\u4f1a\u88ab\u5f53\u505a\u6d4b\u8bd5\u7528\u4f8b\u6267\u884c\u7684\u3002 \u6587\u6863\u5185\u90e8\u652f\u6301markdown\u683c\u5f0f #[doc(include = \"external-doc.md\")] \u76f4\u63a5\u5f15\u7528\u5916\u90e8\u6587\u6863 #[cfg] \u5b83\u4e3b\u8981\u662f\u7528\u4e8e\u5b9e\u73b0\u5404\u79cd\u6761\u4ef6\u7f16\u8bd1\u3002\u6bd4\u5982 #[cfg(test)] \u610f\u601d\u662f\uff0c\u8fd9\u90e8\u5206\u4ee3\u7801\u53ea\u5728test\u8fd9\u4e2a\u5f00\u5173\u6253\u5f00\u7684\u65f6\u5019\u624d\u4f1a\u88ab \u7f16\u8bd1\u3002 1 2 3 4 #[cfg(any(unix, windows))] #[cfg(all(unix, target_pointer_width = \"32\" ))] #[cfg(not(foo))] #[cfg(any(not(unix), all(target_os= \"macos\" , target_arch = \"powerpc\" )))] \u81ea\u5b9a\u4e49\u5f00\u5173 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 [ features ] # \u9ed8\u8ba4\u5f00\u542f\u7684\u529f\u80fd\u5f00\u5173 default = [] # \u5b9a\u4e49\u4e00\u4e2a\u65b0\u7684\u529f\u80fd\u5f00\u5173 , \u4ee5\u53ca\u5b83\u6240\u4f9d\u8d56\u7684\u5176\u4ed6\u529f\u80fd # \u6211\u4eec\u5b9a\u4e49\u7684\u8fd9\u4e2a\u529f\u80fd\u4e0d\u4f9d\u8d56\u5176\u4ed6\u529f\u80fd , \u9ed8\u8ba4\u6ca1\u6709\u5f00\u542f my_feature_name = [] // \u7136\u540e\u5728\u4ee3\u7801\u4e2d\u8fdb\u884c\u5f15\u7528 #[cfg(feature = \"my_feature_name\" )] mod sub_module_name { } \u8fd9\u4e2a\u529f\u80fd\u662f\u5426\u5f00\u542f\uff0c\u53ef\u4ee5\u901a\u8fc7\u547d\u4ee4\u884c\u8fdb\u884c\u4f20\u9012 cargo build -- features \"my_feature_name\" #[ignore] \u6807\u8bb0\u6d4b\u8bd5\u7528\u4f8b\uff0c\u6682\u65f6\u5ffd\u7565\u8fd9\u4e2a\u6d4b\u8bd5 #[bench] \u6dfb\u52a0\u6027\u80fd\u6d4b\u8bd5\u7528\u4f8b","title":"\u6587\u6863\u548c\u6d4b\u8bd5"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/rust/#dst","text":"DST(\u80d6\u6307\u9488)\u7684\u8bbe\u8ba1\uff0c\u907f\u514d\u4e86\u6570\u636e\u7c7b\u578b\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u65f6\u81ea\u52a8\u9000\u5316\u4e3a\u88f8\u6307\u9488\u7c7b\u578b\uff0c\u4e22\u5931\u957f\u5ea6\u4fe1\u606f\u7684\u95ee\u9898\uff0c\u4fdd\u8bc1\u4e86\u7c7b\u578b\u5b89\u5168\u3002 enum\u4e2d\u4e0d\u80fd\u5305\u542bDST\u7c7b\u578b\uff0cstruct\u4e2d\u53ea\u6709\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u53ef\u4ee5\u662fDST\uff0c\u5176\u4ed6\u5730\u65b9\u4e0d\u884c\uff0c\u5982\u679c\u5305\u542b\u6709DST\u7c7b\u578b\uff0c\u90a3\u4e48\u8fd9\u4e2a\u7ed3\u6784\u4f53\u4e5f\u5c31\u6210\u4e86DST\u7c7b\u578b","title":"DST"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/rust/#macro","text":"Rust\u4e2d\u7684\u5b8f\u662f\u5728AST\u4e4b\u540e\u6267\u884c\u7684\uff0c\u56e0\u6b64\u5fc5\u987b\u7b26\u5408Rust\u8bed\u6cd5\uff0cRust\u9488\u5bf9\u8bed\u6cd5\u6269\u5c55\u63d0\u4f9b\u4e86\u4e0b\u5217\u51e0\u79cd\u8bed\u6cd5\u5f62\u5f0f\u3002 #[$arg] \u5982 #[derive(Clone)] \u3001 #[no_mangle] #![$arg] $name! $arg $name! $arg0 $arg1 \u800c\u5b8f\u5c31\u5c5e\u4e8e\u4e0a\u9762\u7684\u7b2c\u4e09\u79cd\u3002 item\u3001block\u3001stmt\u3001 pat\u3001expr\u3001ty\u3001 itent (is used for variable/function names) path tt ((token tree) item block stmt (statement) pat (pattern) expr (is used for expressions) ty (type) literal (is used for literal constants) vis(visibility qualifier) 1 2 macro_rules! MACRO_NAME { } hashmap\u5b8f\u7684\u4f7f\u7528\u4f8b\u5b50: 1 2 3 4 5 6 7 8 9 macro_rules! hashmap { ( $key : expr => $val : expr ) => { { let mut map = :: std :: collections :: HashMap :: new (); map . insert ( $key , $val ); map } } } \u5b8f\u53ef\u4ee5\u91cd\u8f7d\uff0c\u4e5f\u53ef\u4ee5\u91cd\u590d\u9012\u5f52\u8c03\u7528 \u5b8f\u7684\u53c2\u6570\u53ef\u4ee5\u4f7f\u7528+\u53f7\u6765\u8868\u793a\u91cd\u590d1\u5230\u591a\u6b21\u3001\u6216\u8005\u4f7f\u7528*\u8868\u793a\u91cd\u590d0\u5230\u591a\u6b21","title":"macro"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/rust/#static","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 // `print_refs` takes two references to `i32` which have different // lifetimes `'a` and `'b`. These two lifetimes must both be at // least as long as the function `print_refs`. fn print_refs <' a , ' b > ( x : & ' a i32 , y : & ' b i32 ) { println! ( \"x is {} and y is {}\" , x , y ); } // A function which takes no arguments, but has a lifetime parameter `'a`. fn failed_borrow <' a > () { let _x = 12 ; // ERROR: `_x` does not live long enough // _x\u7684\u751f\u547d\u5468\u671f\u663e\u7136\u6ca1\u6709'static\u957f //let y: &'a i32 = &_x; // Attempting to use the lifetime `'a` as an explicit type annotation // inside the function will fail because the lifetime of `&_x` is shorter // than that of `y`. A short lifetime cannot be coerced into a longer one. } fn main () { // Create variables to be borrowed below. let ( four , nine ) = ( 4 , 9 ); // Borrows (`&`) of both variables are passed into the function. print_refs ( & four , & nine ); // Any input which is borrowed must outlive the borrower. // In other words, the lifetime of `four` and `nine` must // be longer than that of `print_refs`. // \u751f\u547d\u5468\u671f\u9ed8\u8ba4\u662f'static failed_borrow (); // `failed_borrow` contains no references to force `'a` to be // longer than the lifetime of the function, but `'a` is longer. // Because the lifetime is never constrained, it defaults to `'static`. }","title":"\u51fd\u6570\u6ca1\u6709\u53c2\u6570\uff0c\u4f46\u662f\u5374\u5305\u542b\u4e86\u751f\u547d\u5468\u671f\u53c2\u6570\uff0c\u90a3\u4e48\u9ed8\u8ba4\u662f'static"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/rust/#_3","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 fn main () { let mut _mutable_integer = 7 i32 ; { // Borrow `_mutable_integer` // \u505a\u4e86\u4e0d\u53ef\u53d8\u7684\u501f\u7528 let _large_integer = & _mutable_integer ; // Error! `_mutable_integer` is frozen in this scope // \u5bfc\u81f4\u539f\u6765\u7684\u7684\u65e0\u6cd5\u4fee\u6539 _mutable_integer = 50 ; // FIXME ^ Comment out this line // `_large_integer` goes out of scope } // Ok! `_mutable_integer` is not frozen in this scope _mutable_integer = 3 ; }","title":"\u5f53\u6570\u636e\u88ab\u4e0d\u53ef\u53d8\u501f\u7528\u7684\u65f6\u5019\uff0c\u90a3\u4e48\u5c06\u65e0\u6cd5\u901a\u8fc7\u539f\u6765\u53ef\u53d8\u7684\u53d8\u91cf\u8fdb\u884c\u6570\u636e\u7684\u4fee\u6539"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/rust/#move","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 fn main () { let immutable_box = Box :: new ( 5 u32 ); println! ( \"immutable_box contains {}\" , immutable_box ); // Mutability error //*immutable_box = 4; // *Move* the box, changing the ownership (and mutability) let mut mutable_box = immutable_box ; println! ( \"mutable_box contains {}\" , mutable_box ); // Modify the contents of the box * mutable_box = 4 ; println! ( \"mutable_box now contains {}\" , mutable_box ); }","title":"\u5f53\u6570\u636e\u88abmove\u7684\u65f6\u5019\u53ef\u4ee5\u6539\u53d8\u5176\u53ef\u53d8\u6027"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/rust/#error-handle","text":"","title":"error handle"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/rust/#cargo","text":"Dev-dependencies are not used when compiling a package for building, but are used for compiling tests, examples, and benchmarks. [dev-dependencies] tempdir = \"0.3\"","title":"cargo"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/rust/#attribute","text":"This RFC introduces the #[non_exhaustive] attribute for enums and structs, which indicates that more variants/fields may be added to an enum/struct in the future. Adding this hint to enums will force downstream crates to add a wildcard arm to match statements, ensuring that adding new variants is not a breaking change. Adding this hint to structs or enum variants will prevent downstream crates from constructing or exhaustively matching, to ensure that adding new fields is not a breaking change.","title":"attribute"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/rust/#_4","text":"1 2 3 4 5 6 pub fn write_record<I, T>(&mut self, record: I) -> csv::Result<()> // \u5177\u5907\u8fed\u4ee3\u5668\u7684\u80fd\u529b\uff0c\u5e76\u4e14\u6ee1\u8db3AsRef<[u8]>\uff0c where I: IntoIterator<Item=T>, T: AsRef<[u8]> { // implementation elided } The AsRef<[u8]> bound is useful because types like String , &str , Vec<u8> and &[u8] all satisfy it.","title":"\u6280\u5de7"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/rust/#lifetime","text":"","title":"Lifetime"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/rust/#trait","text":"PartialEq \u76f8\u7b49\u6bd4\u8f83\u3001\u5177\u5907\u5bf9\u79f0\u6027\u548c\u4f20\u9012\u6027 1 2 3 4 5 6 7 8 // \u5bf9\u79f0\u6027 assert! ( a == b && b == a ); assert! ( b == c && c == b ); assert! ( a == c && c == a ); // \u4f20\u9012\u6027 assert! ( a == b && b == c && a == c ); assert! ( c == b && b == a && c == a ); Eq \u5728 PartialEq \u7684\u57fa\u7840\u4e0a\u5177\u5907\u4e86\u81ea\u53cd\u6027\uff0c\u4e5f\u5c31\u662f\u5bf9\u4e8e\u4efb\u610f a \u6709 a == a \u5176\u4e2d\u6d6e\u70b9\u6570\u90fd\u5b9e\u73b0\u4e86 PartialEq \uff0c\u4f46\u662f\u6ca1\u6709\u5b9e\u73b0 Eq \uff0c\u56e0\u4e3a NaN != NaN PartialOrd \u5b9e\u73b0\u4e86 < \u3001 <= \u3001 > \u3001 >= \u7b49\u8fd0\u7b97\u7b26\uff0c\u5e76\u4e14\u5177\u5907\u975e\u5bf9\u79f0\u6027\u548c\u4f20\u9012\u6027 1 2 \u82e5 a < b \u5219 ! ( a > b ) \uff08\u975e\u5bf9\u79f0\u6027\uff09 \u82e5 a < b && b < c \u5219 a < c \uff08\u4f20\u9012\u6027\uff09 Ord \u66f4\u4e25\u683c\u7684\u5b9e\u73b0\u4e86 PartialOrd \u548c Eq \uff0c\u56e0\u4e3a\u6d6e\u70b9\u6570\u4e0d\u5177\u5907 Ord \u7279\u6027\uff0c\u4f46\u662f\u7b26\u5408 PartialOrd \u56e0\u4e3a\u6d6e\u70b9\u6570\u5177\u5907\u4e0b\u5217\u7279\u70b9\uff0c\u56e0\u6b64\u4e0d\u6ee1\u8db3 Ord \uff0c\u53ea\u6ee1\u8db3 PartialOrd 1 2 NaN < 0 == false NaN >= 0 == false","title":"trait"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/rust/#link","text":"Cfg Test and Cargo Test a Missing Information System V ABI read zone disbale SIMD Too Many Linked Lists Interior mutability in Rust: what, why, how? & vs. ref in Rust patterns Clear explanation of Rust\u2019s module system Understanding Rust slices Implement a bloom filter Frustrated? It's not you, it's Rust Clear explanation of Rust\u2019s module system https://depth-first.com/articles/2020/01/27/rust-ownership-by-example/","title":"Link"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/rust/#todo","text":"https://github.com/stjepang/polling(done) https://fasterthanli.me/articles/surviving-rust-async-interfaces https://github.com/joshtriplett/async-pidfd https://github.com/rust-lang/async-book(Done) https://nick.groenen.me/posts/rust-error-handling/ https://stackoverflow.com/questions/63164973/why-does-rust-allow-calling-functions-via-null-pointers https://blog.carlosgaldino.com/writing-a-file-system-from-scratch-in-rust.html https://tokio.rs/tokio/tutorial https://fasterthanli.me/articles/small-strings-in-rust https://sokoban.iolivia.me/c01-00-intro.html https://github.com/cloudhead/popol http://www.sheshbabu.com/posts/rust-module-system/ (Done) https://createlang.rs/ https://blog.thoughtram.io/string-vs-str-in-rust/ https://fasterthanli.me/articles/working-with-strings-in-rust https://github.com/stjepang/smol https://dev.to/anshulgoyal15/a-beginners-guide-to-grpc-with-rust-3c7o https://cfsamson.github.io/books-futures-explained/introduction.html http://sled.rs/errors https://fasterthanli.me/articles/frustrated-its-not-you-its-rust (done) https://medium.com/swlh/writing-a-modern-http-s-tunnel-in-rust-56e70d898700 https://lowlvl.org/lesson1.html https://ferrous-systems.github.io/teaching-material/index.html https://github.com/pretzelhammer/rust-blog/blob/master/posts/common-rust-lifetime-misconceptions.md(Done) https://github.com/rust-lang/rfcs/blob/master/text/2025-nested-method-calls.md https://github.com/pretzelhammer/rust-blog/blob/master/posts/sizedness-in-rust.md https://github.com/rust-lang/rfcs/blob/master/text/2005-match-ergonomics.md(Done) https://github.com/nox/rust-rfcs/blob/master/text/0738-variance.md https://arzg.github.io/lang/ https://aloso.github.io/ https://boats.gitlab.io/blog/post/wakers-i/","title":"TODO"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/rust/Note/","text":"Rust\u5b66\u4e60\u7b14\u8bb0 Type from \u5b9e\u73b0From traits\uff0c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #[derive(Debug, Clone, Copy, PartialEq)] struct Vec2 { x : i64 , y : i64 , } impl From < ( i64 , i64 ) > for Vec2 { fn from (( x , y ) : ( i64 , i64 )) -> Self { Self { x , y } } } #[test] fn test_tuple () { // \u81ea\u52a8\u8c03\u7528from trait let v : Vec2 = ( 5 , 8 ). into (); assert_eq! ( v . x , 5 ); assert_eq! ( v . y , 8 ); } Default 1 2 3 4 5 6 7 8 9 10 11 12 #[derive(Clone, Copy, PartialEq)] enum Tile { Open , Tree , } impl Default for Tile { fn default () -> Self { Self :: Open } } let tile : Tile = Default :: default (); Option map unwrap_or_default Iterator \u4e09\u7c7b\u8fed\u4ee3\u5668\uff0cmove\u3001shared reference\u3001mutable reference\uff0cfor\u5faa\u73af\u9ed8\u8ba4\u4f7f\u7528 into_iter \uff0c\u4e5f\u5c31\u662fmove\u8fed\u4ee3\u5668\u3002 into_iter iter iter_mut \u8fed\u4ee3\u5668\u6709\u5f88\u591a\u9002\u914d\u5668\uff0c\u901a\u8fc7\u8fd9\u4e9b\u9002\u914d\u5668\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u8fdb\u884c\u4e00\u4e9b\u8ba1\u7b97\uff0c\u8fd9\u4e9b\u9002\u914d\u5668\u8fd4\u56de\u7684\u90fd\u662f\u53e6\u5916\u4e00\u4e2a\u8fed\u4ee3\u5668\u3002 copied \u9488\u5bf9iter\u7c7b\u578b\u7684\u8fed\u4ee3\u5668\u8fdb\u884c\u590d\u5236 into_iter\u7684\u8fed\u4ee3\u5668\u8d4b\u503c\u6ca1\u6709\u610f\u601d\uff0c\u672c\u8eab\u662fmove\u7684\uff0c\u518dCopy\u4e00\u6b21\u4e5f\u6ca1\u6709\u610f\u4e49 map \u63a5\u53d7\u4e00\u4e2afunc\uff0c\u5e76\u4ee5func\u7ed3\u679c\u4f5c\u4e3a\u53e6\u5916\u4e00\u4e2a\u8fed\u4ee3\u5668\u7684\u503c\u3002 collect \u5c06\u8fed\u4ee3\u5668\u8f6c\u6362\u4e3acollection enumerate \u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u8fed\u4ee3\u5668\uff0c\u8fed\u4ee3\u5668\u7684\u503c\u662f\u4e00\u4e2atuple\uff0c\u7b2c\u4e00\u4e2a\u503c\u662findex\uff0c\u7b2c\u4e8c\u503c\u662f\u8fed\u4ee3\u5668\u7684\u503c\u3002 filter_map \u8fd4\u56de\u503c\u7c7b\u578b\u662fOption\u7684\u8fed\u4ee3\u5668\uff0c\u8fed\u4ee3\u7684\u65f6\u5019\u53ea\u8fd4\u56de\u975eNone\u7684\u503c\u3002 lines \u6309\u884c\u5207\u5272\uff0c\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668 count \u8fd4\u56de\u8fed\u4ee3\u5668\u503c\u7684\u6570\u91cf product \u8fed\u4ee3\u5668\u4e2d\u7684\u5143\u7d20\u76f8\u4e58\uff0c\u5f97\u5230\u4e00\u4e2a\u6700\u540e\u7684\u7ed3\u679c itertools crate\u63d0\u4f9b\u4e86\u66f4\u4e30\u5bcc\u7684\u8fed\u4ee3\u5668 tuple_combinations \u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\u9002\u914d\u5668\uff0c\u8be5\u9002\u914d\u5668\u904d\u5386\u8fed\u4ee3\u5668\u4e2d\u5143\u7d20\u7684\u7ec4\u5408\u3002 \u5b9e\u73b0\u8fed\u4ee3\u5668 String Third party itertools \u63d0\u4f9b\u4e86\u4e30\u5bcc\u7684\u8fed\u4ee3\u5668\uff0c\u6bd4\u5982\u4e0a\u9762\u63d0\u5230\u7684 tuple_combinations \u8fed\u4ee3\u9002\u914d\u5668\u3002 peg \u53ef\u4ee5\u7528\u6765\u505a\u4e00\u4e9bparser\uff0cexample\u5982\u4e0b: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 // 1-3 a: abcde // 1-3 b: cdefg // 2-9 c: ccccccccc fn parse_line ( s : & str ) -> anyhow :: Result < ( PasswordPolicy , & str ) > { peg :: parser ! { grammar parser () for str { // \u5148\u5b9a\u4e49\u5404\u79cdrule\uff0c\u7528\u6765\u5339\u914d\u4e00\u4e9b\u57fa\u672c\u5143\u7d20\uff0c\u6bd4\u5982\u8fd9\u91cc\u7684number\u3001range\u3001byte\u3001password\u7b49 // \u6700\u540e\u7528\u8fd9\u4e9b\u57fa\u672c\u7684rule\u6765\u63cf\u8ff0\u6700\u7ec8\u8981\u89e3\u6790\u7684\u884c\uff0c\u4ee5\u6b64\u6765\u63d0\u53d6\u8fd9\u4e9b\u57fa\u672c\u5143\u7d20\u3002 rule number () -> usize = n : $( [ '0' ..= '9' ] + ) { n . parse (). unwrap () } rule range () -> RangeInclusive < usize > = min : number () \"-\" max : number () { min ..= max } rule byte () -> u8 = letter : $( [ 'a' ..= 'z' ]) { letter . as_bytes ()[ 0 ] } rule password () -> & ' input str = letters : $( [ _ ] * ) { letters } pub ( crate ) rule line () -> ( PasswordPolicy , &' input str ) = range : range () \" \" byte : byte () \": \" password : password () { ( PasswordPolicy { range , byte }, password ) } } } Ok ( parser :: line ( s ) ? ) } pest thiserror anyhow","title":"Rust\u5b66\u4e60\u7b14\u8bb0"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/rust/Note/#rust","text":"","title":"Rust\u5b66\u4e60\u7b14\u8bb0"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/rust/Note/#type","text":"from \u5b9e\u73b0From traits\uff0c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #[derive(Debug, Clone, Copy, PartialEq)] struct Vec2 { x : i64 , y : i64 , } impl From < ( i64 , i64 ) > for Vec2 { fn from (( x , y ) : ( i64 , i64 )) -> Self { Self { x , y } } } #[test] fn test_tuple () { // \u81ea\u52a8\u8c03\u7528from trait let v : Vec2 = ( 5 , 8 ). into (); assert_eq! ( v . x , 5 ); assert_eq! ( v . y , 8 ); } Default 1 2 3 4 5 6 7 8 9 10 11 12 #[derive(Clone, Copy, PartialEq)] enum Tile { Open , Tree , } impl Default for Tile { fn default () -> Self { Self :: Open } } let tile : Tile = Default :: default ();","title":"Type"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/rust/Note/#option","text":"map unwrap_or_default","title":"Option"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/rust/Note/#iterator","text":"\u4e09\u7c7b\u8fed\u4ee3\u5668\uff0cmove\u3001shared reference\u3001mutable reference\uff0cfor\u5faa\u73af\u9ed8\u8ba4\u4f7f\u7528 into_iter \uff0c\u4e5f\u5c31\u662fmove\u8fed\u4ee3\u5668\u3002 into_iter iter iter_mut \u8fed\u4ee3\u5668\u6709\u5f88\u591a\u9002\u914d\u5668\uff0c\u901a\u8fc7\u8fd9\u4e9b\u9002\u914d\u5668\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u8fdb\u884c\u4e00\u4e9b\u8ba1\u7b97\uff0c\u8fd9\u4e9b\u9002\u914d\u5668\u8fd4\u56de\u7684\u90fd\u662f\u53e6\u5916\u4e00\u4e2a\u8fed\u4ee3\u5668\u3002 copied \u9488\u5bf9iter\u7c7b\u578b\u7684\u8fed\u4ee3\u5668\u8fdb\u884c\u590d\u5236 into_iter\u7684\u8fed\u4ee3\u5668\u8d4b\u503c\u6ca1\u6709\u610f\u601d\uff0c\u672c\u8eab\u662fmove\u7684\uff0c\u518dCopy\u4e00\u6b21\u4e5f\u6ca1\u6709\u610f\u4e49 map \u63a5\u53d7\u4e00\u4e2afunc\uff0c\u5e76\u4ee5func\u7ed3\u679c\u4f5c\u4e3a\u53e6\u5916\u4e00\u4e2a\u8fed\u4ee3\u5668\u7684\u503c\u3002 collect \u5c06\u8fed\u4ee3\u5668\u8f6c\u6362\u4e3acollection enumerate \u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u8fed\u4ee3\u5668\uff0c\u8fed\u4ee3\u5668\u7684\u503c\u662f\u4e00\u4e2atuple\uff0c\u7b2c\u4e00\u4e2a\u503c\u662findex\uff0c\u7b2c\u4e8c\u503c\u662f\u8fed\u4ee3\u5668\u7684\u503c\u3002 filter_map \u8fd4\u56de\u503c\u7c7b\u578b\u662fOption\u7684\u8fed\u4ee3\u5668\uff0c\u8fed\u4ee3\u7684\u65f6\u5019\u53ea\u8fd4\u56de\u975eNone\u7684\u503c\u3002 lines \u6309\u884c\u5207\u5272\uff0c\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668 count \u8fd4\u56de\u8fed\u4ee3\u5668\u503c\u7684\u6570\u91cf product \u8fed\u4ee3\u5668\u4e2d\u7684\u5143\u7d20\u76f8\u4e58\uff0c\u5f97\u5230\u4e00\u4e2a\u6700\u540e\u7684\u7ed3\u679c itertools crate\u63d0\u4f9b\u4e86\u66f4\u4e30\u5bcc\u7684\u8fed\u4ee3\u5668 tuple_combinations \u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\u9002\u914d\u5668\uff0c\u8be5\u9002\u914d\u5668\u904d\u5386\u8fed\u4ee3\u5668\u4e2d\u5143\u7d20\u7684\u7ec4\u5408\u3002 \u5b9e\u73b0\u8fed\u4ee3\u5668","title":"Iterator"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/rust/Note/#string","text":"","title":"String"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/rust/Note/#third-party","text":"itertools \u63d0\u4f9b\u4e86\u4e30\u5bcc\u7684\u8fed\u4ee3\u5668\uff0c\u6bd4\u5982\u4e0a\u9762\u63d0\u5230\u7684 tuple_combinations \u8fed\u4ee3\u9002\u914d\u5668\u3002 peg \u53ef\u4ee5\u7528\u6765\u505a\u4e00\u4e9bparser\uff0cexample\u5982\u4e0b: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 // 1-3 a: abcde // 1-3 b: cdefg // 2-9 c: ccccccccc fn parse_line ( s : & str ) -> anyhow :: Result < ( PasswordPolicy , & str ) > { peg :: parser ! { grammar parser () for str { // \u5148\u5b9a\u4e49\u5404\u79cdrule\uff0c\u7528\u6765\u5339\u914d\u4e00\u4e9b\u57fa\u672c\u5143\u7d20\uff0c\u6bd4\u5982\u8fd9\u91cc\u7684number\u3001range\u3001byte\u3001password\u7b49 // \u6700\u540e\u7528\u8fd9\u4e9b\u57fa\u672c\u7684rule\u6765\u63cf\u8ff0\u6700\u7ec8\u8981\u89e3\u6790\u7684\u884c\uff0c\u4ee5\u6b64\u6765\u63d0\u53d6\u8fd9\u4e9b\u57fa\u672c\u5143\u7d20\u3002 rule number () -> usize = n : $( [ '0' ..= '9' ] + ) { n . parse (). unwrap () } rule range () -> RangeInclusive < usize > = min : number () \"-\" max : number () { min ..= max } rule byte () -> u8 = letter : $( [ 'a' ..= 'z' ]) { letter . as_bytes ()[ 0 ] } rule password () -> & ' input str = letters : $( [ _ ] * ) { letters } pub ( crate ) rule line () -> ( PasswordPolicy , &' input str ) = range : range () \" \" byte : byte () \": \" password : password () { ( PasswordPolicy { range , byte }, password ) } } } Ok ( parser :: line ( s ) ? ) } pest thiserror anyhow","title":"Third party"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/rust/library/","text":"clap Setp1: \u8bbe\u7f6eApp name\u3001version\u3001author\u3001about\u7b49 1 2 3 4 let matches = App :: new ( \"MyApp\" ) . version ( \"1.0\" ) . author ( \"Kevin K. <kbknapp@gmail.com>\" ) . about ( \"Does awesome things\" ) Setp2: serde 1 2 3 4 5 [ dependencies ] # \u9700\u8981\u5f00\u542f derive serde = { version = \"1.0.102\" , features = [ \"derive\" ]} serde_json = \"1.0.41\" serde_derive = \"1.0.102\" \u628ajson\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3ajson\u5bf9\u8c61(untyped)\u6216\u8005\u662f\u8f6c\u6362\u4e3astruct 1 2 3 4 5 6 7 8 9 10 11 12 let data = r#\" { \"name\": \"John Doe\", \"age\": 43, \"phones\": [ \"+44 1234567\", \"+44 2345678\" ] }\"# ; // Parse the string of data into serde_json::Value. let v : Value = serde_json :: from_str ( data ) ? ; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 #[macro_use] use serde :: { Deserialize , Serialize }; use serde_json :: Result ; use serde_json ; #[derive(Serialize, Deserialize)] struct Person { name : String , age : u8 , phones : Vec < String > , } fn typed_example () -> Result < () > { // Some JSON input data as a &str. Maybe this comes from the user. let data = r#\" { \"name\": \"John Doe\", \"age\": 43, \"phones\": [ \"+44 1234567\", \"+44 2345678\" ] }\"# ; // Parse the string of data into a Person object. This is exactly the // same function as the one that produced serde_json::Value above, but // now we are asking it for a Person as output. let p : Person = serde_json :: from_str ( data ) ? ; // Do things just like with any other Rust data structure. println! ( \"Please call {} at the number {}\" , p . name , p . phones [ 0 ]); Ok (()) } fn main () -> Result < () > { typed_example () } json\u5b8f\u8f6c\u6362json\u5b57\u7b26\u4e32\u4e3ajson\u5bf9\u8c61 1 2 3 4 5 6 7 8 let john = json ! ({ \"name\" : \"John Doe\" , \"age\" : 43 , \"phones\" : [ \"+44 1234567\" , \"+44 2345678\" ] }); \u5e8f\u5217\u5316\u4e00\u4e2astruct\u5230string 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 use serde :: { Serialize , Deserialize }; #[derive(Serialize, Deserialize, Debug)] struct Point { x : i32 , y : i32 , } fn main () { let point = Point { x : 1 , y : 2 }; let serialized = serde_json :: to_string ( & point ). unwrap (); println! ( \"serialized = {}\" , serialized ); let deserialized : Point = serde_json :: from_str ( & serialized ). unwrap (); println! ( \"deserialized = {:?}\" , deserialized ); } #[serde(rename = \"name\")] \u5b57\u6bb5\u91cd\u547d\u540d assert_cmd 1 2 3 4 5 6 7 8 9 extern crate assert_cmd ; use std :: process :: Command ; use assert_cmd :: prelude :: * ; Command :: cargo_bin ( \"bin_fixture\" ) . unwrap () . assert () . success (); predicates \u63d0\u4f9b\u4e00\u7cfb\u5217\u7684\u7b97\u5b50\u7ec4\u5408 std::collections shrink_to_fit \u5185\u5b58\u6536\u7f29 extend \u5185\u90e8\u8c03\u7528 into_iter \u4f1a\u5bfc\u81f4\u5bb9\u5668\u4e2d\u7684\u5143\u7d20\u8fdb\u884c\u503c\u503c\u4f20\u9012(\u79fb\u52a8) 1 2 3 4 5 6 7 8 9 10 11 fn main () { let mut vec1 = vec! [ 1 , 2 , 3 , 4 ]; let vec2 = vec! [ 10 , 20 , 30 , 40 ]; vec1 . extend ( vec2 ); // vec2\u5df2\u7ecf\u88abmove\u4e86 for x in vec2 . iter_mut () { println! ( \"vec contained {}\" , x ); * x += 1 ; } } collect \u4e00\u79cd\u96c6\u5408\u8f6c\u6362\u4e3a\u53e6\u5916\u4e00\u79cd\u96c6\u5408\u7684\u65b9\u5f0f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 use std :: collections :: VecDeque ; use std :: collections :: BinaryHeap ; use std :: collections :: BTreeSet ; use std :: collections :: HashSet ; use std :: collections :: LinkedList ; fn main () { let mut vec1 = vec! [ 1 , 2 , 3 , 4 ]; let vec2 = vec! [ 10 , 20 , 30 , 40 ]; vec1 . extend ( vec2 ); let vec = vec! [ 1 , 2 , 3 , 4 ]; // let buf: VecDeque<_> = vec.into_iter().collect(); // let buf: BinaryHeap<_> = vec.into_iter().collect(); // let buf: BTreeSet<_> = vec.into_iter().collect(); // let buf: HashSet<_> = vec.into_iter().collect(); let buf : LinkedList < _ > = vec . into_iter (). collect (); } rev \u8fed\u4ee3\u5668\uff0c\u53ef\u4ee5\u9006\u5411\u8f93\u51fa entry \u5f88\u65b9\u4fbf\u7684\u64cd\u4f5cmap\uff0c\u63d2\u5165\u4e00\u4e2akey\u7684\u65f6\u5019\uff0c\u5982\u679c\u5b58\u5728\u5c31\u63d2\u5165\uff0c\u5426\u5219\u5c31\u4e0d\u63d2\u5165\uff0c\u4f1a\u5bfc\u81f4\u4e24\u6b21key\u7684\u641c\u7d22\uff0c\u4f7f\u7528entry api\u53ef\u4ee5\u907f\u514d\u8fd9\u4e2a\u95ee\u9898 \u5982\u679ckey\u5b58\u5728\u5c31\u8fd4\u56de Vacant(entry) \uff0c\u53ef\u4ee5insert \u5982\u679ckey\u4e0d\u5b58\u5728\u5c31\u8fd4\u56de Occupied(entry) \uff0c\u53ef\u4ee5get\u3001insert\u3001remove Additionally, they can convert the occupied entry into a mutable reference to its value, providing symmetry to the vacant insert case. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 use std :: collections :: btree_map :: BTreeMap ; let mut count = BTreeMap :: new (); let message = \"she sells sea shells by the sea shore\" ; for c in message . chars () { // \u5982\u679ckey\u5b58\u5728\u5c31\u8fd4\u56deVacant(entry)\uff0c\u53ef\u4ee5\u63d2\u5165 // \u5982\u679ckey\u4e0d\u5b58\u5728\u5c31\u8fd4\u56deOccupied(entry)\uff0c\u53ef\u4ee5get\u3001insert\u3001remove * count . entry ( c ). or_insert ( 0 ) += 1 ; } assert_eq! ( count . get ( & 's' ), Some ( & 8 )); println! ( \"Number of occurrences of each character\" ); for ( char , count ) in & count { println! ( \"{}: {}\" , char , count ); } OccupiedEntry key remove_entry get get_mut BufRead 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 pub trait Read { fn read ( & mut self , buf : & mut [ u8 ]) -> Result < usize > ; fn read_vectored ( & mut self , bufs : & mut [ IoSliceMut ]) -> Result < usize > { .. . } unsafe fn initializer ( & self ) -> Initializer { .. . } fn read_to_end ( & mut self , buf : & mut Vec < u8 > ) -> Result < usize > { .. . } fn read_to_string ( & mut self , buf : & mut String ) -> Result < usize > { .. . } fn read_exact ( & mut self , buf : & mut [ u8 ]) -> Result < () > { .. . } fn by_ref ( & mut self ) -> & mut Self where Self : Sized , { .. . } fn bytes ( self ) -> Bytes < Self > where Self : Sized , { .. . } fn chain < R : Read > ( self , next : R ) -> Chain < Self , R > where Self : Sized , { .. . } fn take ( self , limit : u64 ) -> Take < Self > where Self : Sized , { .. . } } pub trait BufRead : Read { fn fill_buf ( & mut self ) -> Result <& [ u8 ] > ; fn consume ( & mut self , amt : usize ); fn read_until ( & mut self , byte : u8 , buf : & mut Vec < u8 > ) -> Result < usize > { .. . } fn read_line ( & mut self , buf : & mut String ) -> Result < usize > { .. . } fn split ( self , byte : u8 ) -> Split < Self > where Self : Sized , { .. . } fn lines ( self ) -> Lines < Self > where Self : Sized , { .. . } }","title":"Index"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/rust/library/#clap","text":"Setp1: \u8bbe\u7f6eApp name\u3001version\u3001author\u3001about\u7b49 1 2 3 4 let matches = App :: new ( \"MyApp\" ) . version ( \"1.0\" ) . author ( \"Kevin K. <kbknapp@gmail.com>\" ) . about ( \"Does awesome things\" ) Setp2:","title":"clap"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/rust/library/#serde","text":"1 2 3 4 5 [ dependencies ] # \u9700\u8981\u5f00\u542f derive serde = { version = \"1.0.102\" , features = [ \"derive\" ]} serde_json = \"1.0.41\" serde_derive = \"1.0.102\" \u628ajson\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3ajson\u5bf9\u8c61(untyped)\u6216\u8005\u662f\u8f6c\u6362\u4e3astruct 1 2 3 4 5 6 7 8 9 10 11 12 let data = r#\" { \"name\": \"John Doe\", \"age\": 43, \"phones\": [ \"+44 1234567\", \"+44 2345678\" ] }\"# ; // Parse the string of data into serde_json::Value. let v : Value = serde_json :: from_str ( data ) ? ; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 #[macro_use] use serde :: { Deserialize , Serialize }; use serde_json :: Result ; use serde_json ; #[derive(Serialize, Deserialize)] struct Person { name : String , age : u8 , phones : Vec < String > , } fn typed_example () -> Result < () > { // Some JSON input data as a &str. Maybe this comes from the user. let data = r#\" { \"name\": \"John Doe\", \"age\": 43, \"phones\": [ \"+44 1234567\", \"+44 2345678\" ] }\"# ; // Parse the string of data into a Person object. This is exactly the // same function as the one that produced serde_json::Value above, but // now we are asking it for a Person as output. let p : Person = serde_json :: from_str ( data ) ? ; // Do things just like with any other Rust data structure. println! ( \"Please call {} at the number {}\" , p . name , p . phones [ 0 ]); Ok (()) } fn main () -> Result < () > { typed_example () } json\u5b8f\u8f6c\u6362json\u5b57\u7b26\u4e32\u4e3ajson\u5bf9\u8c61 1 2 3 4 5 6 7 8 let john = json ! ({ \"name\" : \"John Doe\" , \"age\" : 43 , \"phones\" : [ \"+44 1234567\" , \"+44 2345678\" ] }); \u5e8f\u5217\u5316\u4e00\u4e2astruct\u5230string 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 use serde :: { Serialize , Deserialize }; #[derive(Serialize, Deserialize, Debug)] struct Point { x : i32 , y : i32 , } fn main () { let point = Point { x : 1 , y : 2 }; let serialized = serde_json :: to_string ( & point ). unwrap (); println! ( \"serialized = {}\" , serialized ); let deserialized : Point = serde_json :: from_str ( & serialized ). unwrap (); println! ( \"deserialized = {:?}\" , deserialized ); } #[serde(rename = \"name\")] \u5b57\u6bb5\u91cd\u547d\u540d","title":"serde"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/rust/library/#assert_cmd","text":"1 2 3 4 5 6 7 8 9 extern crate assert_cmd ; use std :: process :: Command ; use assert_cmd :: prelude :: * ; Command :: cargo_bin ( \"bin_fixture\" ) . unwrap () . assert () . success ();","title":"assert_cmd"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/rust/library/#predicates","text":"\u63d0\u4f9b\u4e00\u7cfb\u5217\u7684\u7b97\u5b50\u7ec4\u5408","title":"predicates"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/rust/library/#stdcollections","text":"shrink_to_fit \u5185\u5b58\u6536\u7f29 extend \u5185\u90e8\u8c03\u7528 into_iter \u4f1a\u5bfc\u81f4\u5bb9\u5668\u4e2d\u7684\u5143\u7d20\u8fdb\u884c\u503c\u503c\u4f20\u9012(\u79fb\u52a8) 1 2 3 4 5 6 7 8 9 10 11 fn main () { let mut vec1 = vec! [ 1 , 2 , 3 , 4 ]; let vec2 = vec! [ 10 , 20 , 30 , 40 ]; vec1 . extend ( vec2 ); // vec2\u5df2\u7ecf\u88abmove\u4e86 for x in vec2 . iter_mut () { println! ( \"vec contained {}\" , x ); * x += 1 ; } } collect \u4e00\u79cd\u96c6\u5408\u8f6c\u6362\u4e3a\u53e6\u5916\u4e00\u79cd\u96c6\u5408\u7684\u65b9\u5f0f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 use std :: collections :: VecDeque ; use std :: collections :: BinaryHeap ; use std :: collections :: BTreeSet ; use std :: collections :: HashSet ; use std :: collections :: LinkedList ; fn main () { let mut vec1 = vec! [ 1 , 2 , 3 , 4 ]; let vec2 = vec! [ 10 , 20 , 30 , 40 ]; vec1 . extend ( vec2 ); let vec = vec! [ 1 , 2 , 3 , 4 ]; // let buf: VecDeque<_> = vec.into_iter().collect(); // let buf: BinaryHeap<_> = vec.into_iter().collect(); // let buf: BTreeSet<_> = vec.into_iter().collect(); // let buf: HashSet<_> = vec.into_iter().collect(); let buf : LinkedList < _ > = vec . into_iter (). collect (); } rev \u8fed\u4ee3\u5668\uff0c\u53ef\u4ee5\u9006\u5411\u8f93\u51fa entry \u5f88\u65b9\u4fbf\u7684\u64cd\u4f5cmap\uff0c\u63d2\u5165\u4e00\u4e2akey\u7684\u65f6\u5019\uff0c\u5982\u679c\u5b58\u5728\u5c31\u63d2\u5165\uff0c\u5426\u5219\u5c31\u4e0d\u63d2\u5165\uff0c\u4f1a\u5bfc\u81f4\u4e24\u6b21key\u7684\u641c\u7d22\uff0c\u4f7f\u7528entry api\u53ef\u4ee5\u907f\u514d\u8fd9\u4e2a\u95ee\u9898 \u5982\u679ckey\u5b58\u5728\u5c31\u8fd4\u56de Vacant(entry) \uff0c\u53ef\u4ee5insert \u5982\u679ckey\u4e0d\u5b58\u5728\u5c31\u8fd4\u56de Occupied(entry) \uff0c\u53ef\u4ee5get\u3001insert\u3001remove Additionally, they can convert the occupied entry into a mutable reference to its value, providing symmetry to the vacant insert case. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 use std :: collections :: btree_map :: BTreeMap ; let mut count = BTreeMap :: new (); let message = \"she sells sea shells by the sea shore\" ; for c in message . chars () { // \u5982\u679ckey\u5b58\u5728\u5c31\u8fd4\u56deVacant(entry)\uff0c\u53ef\u4ee5\u63d2\u5165 // \u5982\u679ckey\u4e0d\u5b58\u5728\u5c31\u8fd4\u56deOccupied(entry)\uff0c\u53ef\u4ee5get\u3001insert\u3001remove * count . entry ( c ). or_insert ( 0 ) += 1 ; } assert_eq! ( count . get ( & 's' ), Some ( & 8 )); println! ( \"Number of occurrences of each character\" ); for ( char , count ) in & count { println! ( \"{}: {}\" , char , count ); } OccupiedEntry key remove_entry get get_mut BufRead 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 pub trait Read { fn read ( & mut self , buf : & mut [ u8 ]) -> Result < usize > ; fn read_vectored ( & mut self , bufs : & mut [ IoSliceMut ]) -> Result < usize > { .. . } unsafe fn initializer ( & self ) -> Initializer { .. . } fn read_to_end ( & mut self , buf : & mut Vec < u8 > ) -> Result < usize > { .. . } fn read_to_string ( & mut self , buf : & mut String ) -> Result < usize > { .. . } fn read_exact ( & mut self , buf : & mut [ u8 ]) -> Result < () > { .. . } fn by_ref ( & mut self ) -> & mut Self where Self : Sized , { .. . } fn bytes ( self ) -> Bytes < Self > where Self : Sized , { .. . } fn chain < R : Read > ( self , next : R ) -> Chain < Self , R > where Self : Sized , { .. . } fn take ( self , limit : u64 ) -> Take < Self > where Self : Sized , { .. . } } pub trait BufRead : Read { fn fill_buf ( & mut self ) -> Result <& [ u8 ] > ; fn consume ( & mut self , amt : usize ); fn read_until ( & mut self , byte : u8 , buf : & mut Vec < u8 > ) -> Result < usize > { .. . } fn read_line ( & mut self , buf : & mut String ) -> Result < usize > { .. . } fn split ( self , byte : u8 ) -> Split < Self > where Self : Sized , { .. . } fn lines ( self ) -> Lines < Self > where Self : Sized , { .. . } }","title":"std::collections"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/algorithm/","text":"\u8d1f\u8f7d\u5747\u8861\u7b97\u6cd5 Load balancing \u6839\u636eWiki\u7684\u5b9a\u4e49\uff0c\u8d1f\u8f7d\u5747\u8861\u6307\u7684\u662f\u5728\u4e00\u7ec4\u8d44\u6e90\uff08\u8ba1\u7b97\u5355\u5143\uff09\u4e0a\u5206\u914d\u4e00\u7ec4\u4efb\u52a1\u7684\u8fc7\u7a0b\uff0c\u76ee\u7684\u662f\u4f7f\u5b83\u4eec\u7684\u6574\u4f53\u5904\u7406\u6548\u7387\u66f4\u9ad8\u3002 \u8d1f\u8f7d\u5747\u8861\u7b97\u6cd5\u53ef\u4ee5\u4f18\u5316\u6bcf\u4e2a\u4efb\u52a1\u7684\u54cd\u5e94\u65f6\u95f4\uff0c\u907f\u514d\u5728\u5176\u4ed6\u8ba1\u7b97\u8282\u70b9\u5904\u4e8e\u7a7a\u95f2\u72b6\u6001\u65f6\u4e0d\u5747\u5300\u5730\u4f7f\u8ba1\u7b97\u8282\u70b9\u8fc7\u8f7d\u3002\u5e38\u89c1\u7684\u8d1f\u8f7d\u5747\u8861\u7b97\u6cd5\u6709\u968f\u673a\u3001\u8f6e\u8be2\u3001\u6700\u5c11\u8fde\u63a5\u7b49\uff0c\u8fd9\u4e9b\u7b97\u6cd5\u8fd8\u53ef\u4ee5\u7ed3\u5408\u6743\u91cd\u3002\u5728\u7ed3\u5408\u6743\u91cd\u7684\u60c5\u51b5\u4e0b\u5982\u4f55\u80fd\u9ad8\u6548\u7684 \u9009\u53d6\u4e00\u4e2a\u8282\u70b9\uff0c\u5e76\u4e14\u4fdd\u8bc1\u8d1f\u8f7d\u5747\u8861\u662f\u8861\u91cf\u7b97\u6cd5\u7684\u91cd\u8981\u7279\u5f81\uff0c\u672c\u6587\u4e3b\u8981\u5173\u6ce8\u4e00\u4e9b\u5f00\u6e90\u9879\u76ee\u4e2d\u4f7f\u7528\u7684\u57fa\u4e8e\u6743\u91cd\u7684\u4e00\u4e9b\u9ad8\u6548\u8d1f\u8f7d\u5747\u8861\u7b97\u6cd5\u7684\u5206\u6790\u3002 Smooth weighted round-robin \u8fd9\u662fNginx\u4f7f\u7528\u7684\u57fa\u4e8e\u6743\u91cd\u7684\u8f6e\u8be2\u7b97\u6cd5\uff0c\u540d\u4e3aSmooth\uff0c\u987e\u540d\u601d\u4e49\u8be5\u7b97\u6cd5\u76f8\u6bd4\u4e8e\u5176\u5b83\u52a0\u6743\u8f6e\u8be2\uff08WRR\uff09\u7b97\u6cd5\u591a\u4e00\u4e2a smooth\uff08\u5e73\u6ed1\uff09\u7684\u7279\u6027\u3002 \u8fd9\u4e2a\u7b97\u6cd5\u7684\u6838\u5fc3\u601d\u60f3\u662f\uff0c\u6bcf\u6b21\u9009\u62e9\u4e00\u53f0\u6743\u91cd\u6700\u5927\u7684\u673a\u5668\u540e\uff0c\u7528\u8fd9\u4e2a\u673a\u5668\u7684\u6743\u91cd\u51cf\u53bb\u603b\u7684\u6743\u91cd\uff0c\u4e0b\u6b21\u9009\u62e9\u7684\u65f6\u5019 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 Upstream: smooth weighted round-robin balancing. For edge case weights like { 5, 1, 1 } we now produce { a, a, b, a, c, a, a } sequence instead of { c, b, a, a, a, a, a } produced previously. Algorithm is as follows: on each peer selection we increase current_weight of each eligible peer by its weight, select peer with greatest current_weight and reduce its current_weight by total number of weight points distributed among peers. In case of { 5, 1, 1 } weights this gives the following sequence of current_weight's: a b c 0 0 0 (initial state) 5 1 1 (a selected) -2 1 1 3 2 2 (a selected) -4 2 2 1 3 3 (b selected) 1 -4 3 6 -3 4 (a selected) -1 -3 4 4 -2 5 (c selected) 4 -2 -2 9 -1 -1 (a selected) 2 -1 -1 7 0 0 (a selected) 0 0 0 LVS 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 Supposing that there is a server set S = { S0, S1, \u2026, Sn-1 } ; W ( Si ) indicates the weight of Si ; i indicates the server selected last time, and i is initialized with -1 ; cw is the current weight in scheduling, and cw is initialized with zero ; max ( S ) is the maximum weight of all the servers in S ; gcd ( S ) is the greatest common divisor of all server weights in S ; while ( true ) { i = ( i + 1 ) mod n ; if ( i == 0 ) { cw = cw - gcd ( S ) ; if ( cw < = 0 ) { cw = max ( S ) ; if ( cw == 0 ) return NULL ; } } if ( W ( Si ) > = cw ) return Si ; } Envoy EDF \u901a\u8fc7\u8fd9\u4e2a\u516c\u5f0f\u6765\u8ba1\u7b97\u6bcf\u4e00\u4e2a\u673a\u5668\u7684 deadline \u65f6\u95f4\uff0c current_time_ \u521d\u59cb\u4e3a0 const double deadline = current_time_ + 1.0 / weight; \u7136\u540e\u4f1a\u6309\u7167deadline\u7684\u5927\u5c0f \u5efa\u7acb\u5c0f\u6839\u5806\uff0cdeadline\u6700\u5c0f\u7684\u5728\u5806\u9876\uff0c\u4f18\u5148\u51fa\u961f\uff0c\u51fa\u961f\u540ecurrent_time_\u5c31\u7b49\u4e8e\u65b0\u51fa\u961f\u7684\u5143\u7d20\u7684deadline\u65f6\u95f4 \u53ef\u4ee5\u7406\u89e3\u6210\u60e9\u7f5a\u56e0\u5b50\uff0c\u901a\u8fc7\u8fd9\u4e2a\u503c\u53ef\u4ee5\u5c06\u4e0b\u4e00\u4e2a\u5165\u961f\u7684\u4e3b\u673a\u7684deadline\u65f6\u95f4\u53d8\u5927\u3002\u800c\u4e0d\u81f3\u4e8e\u6bcf\u6b21\u628a\u9ad8\u6743\u91cd\u7684\u673a\u5668\u52a0\u5165 \u5c31\u4f1a\u5bfc\u81f4\u8fd9\u4e2a\u673a\u5668\u88ab\u518d\u6b21\u9009\u4e2d\u3002 Shuffle sharding \u4f7f\u7528\u968f\u673a\u5206\u533a\u8fdb\u884c\u5de5\u4f5c\u8d1f\u8f7d\u9694\u79bb Load Balancing in the Datacenter Consistent Hashing: Algorithmic Tradeoffs HashTable/HashMap hash map\u6216\u8005\u8bf4\u662fhash table\u901a\u5e38\u6765\u8bf4\u662f\u7528\u4e8e\u5b9e\u73b0\u9ad8\u6548\u7387\u67e5\u627e\u7684\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u4ed6\u7684\u6838\u5fc3\u5728\u4e8ehash\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\uff0c\u4ee5\u53ca\u5982\u4f55\u5904\u7406hash\u51b2\u7a81\u7b49\u3002\u5178\u578b\u7684\u5b9e\u73b0\u65b9\u5f0f\u5982\u4e0b: \u62e5\u6709\u4e00\u4e2a\u6570\u7ec4\uff0c\u8fd9\u4e2a\u6570\u7ec4\u7684\u5927\u5c0f\u8981\u5c3d\u91cf\u5927\u4e8e\u6211\u4eec\u5b9e\u9645\u5b58\u653e\u7684\u5143\u7d20\u6570\u91cf\uff0c\u7136\u540e\u9009\u53d6\u4e00\u4e2ahash\u51fd\u6570\u5bf9key\u8fdb\u884chash\uff0c\u5e76\u9664\u4ee5\u8fd9\u4e2a\u6570\u7ec4\u7684\u5927\u5c0f\u5f97\u5230\u4e00\u4e2aindex\u5373\u53ef\u3002 \u8fd9\u4e2a\u5e26\u6765\u7684\u95ee\u9898\u5c31\u662f\u6570\u7ec4\u4e2d\u5b58\u5728\u5927\u91cf\u6ca1\u6709\u4f7f\u7528\u7684\u6761\u76ee\uff0c\u4f1a\u5e26\u6765\u5185\u5b58\u4e0a\u7684\u5f00\u9500(\u9700\u8981\u89e3\u51b3)\u3002\u5982\u679c\u8fd9\u4e2a\u6570\u7ec4\u592a\u5c0f\u53c8\u4f1a\u5bfc\u81f4\u51b2\u7a81\u6982\u7387\u6bd4\u8f83\u9ad8\uff0c\u5982\u679c\u53d1\u751f\u51b2\u7a81\u662f\u9700\u8981\u89e3\u51b3\u7684\uff0c\u5178\u578b\u7684 \u89e3\u51b3\u65b9\u5f0f\u6709\u94fe\u8868\u6cd5\u3001\u4e8c\u6b21hash\u7b49\u7b49 SwissTable/hashbrown Sparsehash unordered_map folly f4 Reference: weighted Sparsehash SeaHash SwissTable hashbrown Benchmark of major hash maps implementations VNSWRR","title":"\u8d1f\u8f7d\u5747\u8861\u7b97\u6cd5"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/algorithm/#_1","text":"Load balancing \u6839\u636eWiki\u7684\u5b9a\u4e49\uff0c\u8d1f\u8f7d\u5747\u8861\u6307\u7684\u662f\u5728\u4e00\u7ec4\u8d44\u6e90\uff08\u8ba1\u7b97\u5355\u5143\uff09\u4e0a\u5206\u914d\u4e00\u7ec4\u4efb\u52a1\u7684\u8fc7\u7a0b\uff0c\u76ee\u7684\u662f\u4f7f\u5b83\u4eec\u7684\u6574\u4f53\u5904\u7406\u6548\u7387\u66f4\u9ad8\u3002 \u8d1f\u8f7d\u5747\u8861\u7b97\u6cd5\u53ef\u4ee5\u4f18\u5316\u6bcf\u4e2a\u4efb\u52a1\u7684\u54cd\u5e94\u65f6\u95f4\uff0c\u907f\u514d\u5728\u5176\u4ed6\u8ba1\u7b97\u8282\u70b9\u5904\u4e8e\u7a7a\u95f2\u72b6\u6001\u65f6\u4e0d\u5747\u5300\u5730\u4f7f\u8ba1\u7b97\u8282\u70b9\u8fc7\u8f7d\u3002\u5e38\u89c1\u7684\u8d1f\u8f7d\u5747\u8861\u7b97\u6cd5\u6709\u968f\u673a\u3001\u8f6e\u8be2\u3001\u6700\u5c11\u8fde\u63a5\u7b49\uff0c\u8fd9\u4e9b\u7b97\u6cd5\u8fd8\u53ef\u4ee5\u7ed3\u5408\u6743\u91cd\u3002\u5728\u7ed3\u5408\u6743\u91cd\u7684\u60c5\u51b5\u4e0b\u5982\u4f55\u80fd\u9ad8\u6548\u7684 \u9009\u53d6\u4e00\u4e2a\u8282\u70b9\uff0c\u5e76\u4e14\u4fdd\u8bc1\u8d1f\u8f7d\u5747\u8861\u662f\u8861\u91cf\u7b97\u6cd5\u7684\u91cd\u8981\u7279\u5f81\uff0c\u672c\u6587\u4e3b\u8981\u5173\u6ce8\u4e00\u4e9b\u5f00\u6e90\u9879\u76ee\u4e2d\u4f7f\u7528\u7684\u57fa\u4e8e\u6743\u91cd\u7684\u4e00\u4e9b\u9ad8\u6548\u8d1f\u8f7d\u5747\u8861\u7b97\u6cd5\u7684\u5206\u6790\u3002","title":"\u8d1f\u8f7d\u5747\u8861\u7b97\u6cd5"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/algorithm/#smooth-weighted-round-robin","text":"\u8fd9\u662fNginx\u4f7f\u7528\u7684\u57fa\u4e8e\u6743\u91cd\u7684\u8f6e\u8be2\u7b97\u6cd5\uff0c\u540d\u4e3aSmooth\uff0c\u987e\u540d\u601d\u4e49\u8be5\u7b97\u6cd5\u76f8\u6bd4\u4e8e\u5176\u5b83\u52a0\u6743\u8f6e\u8be2\uff08WRR\uff09\u7b97\u6cd5\u591a\u4e00\u4e2a smooth\uff08\u5e73\u6ed1\uff09\u7684\u7279\u6027\u3002 \u8fd9\u4e2a\u7b97\u6cd5\u7684\u6838\u5fc3\u601d\u60f3\u662f\uff0c\u6bcf\u6b21\u9009\u62e9\u4e00\u53f0\u6743\u91cd\u6700\u5927\u7684\u673a\u5668\u540e\uff0c\u7528\u8fd9\u4e2a\u673a\u5668\u7684\u6743\u91cd\u51cf\u53bb\u603b\u7684\u6743\u91cd\uff0c\u4e0b\u6b21\u9009\u62e9\u7684\u65f6\u5019 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 Upstream: smooth weighted round-robin balancing. For edge case weights like { 5, 1, 1 } we now produce { a, a, b, a, c, a, a } sequence instead of { c, b, a, a, a, a, a } produced previously. Algorithm is as follows: on each peer selection we increase current_weight of each eligible peer by its weight, select peer with greatest current_weight and reduce its current_weight by total number of weight points distributed among peers. In case of { 5, 1, 1 } weights this gives the following sequence of current_weight's: a b c 0 0 0 (initial state) 5 1 1 (a selected) -2 1 1 3 2 2 (a selected) -4 2 2 1 3 3 (b selected) 1 -4 3 6 -3 4 (a selected) -1 -3 4 4 -2 5 (c selected) 4 -2 -2 9 -1 -1 (a selected) 2 -1 -1 7 0 0 (a selected) 0 0 0 LVS 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 Supposing that there is a server set S = { S0, S1, \u2026, Sn-1 } ; W ( Si ) indicates the weight of Si ; i indicates the server selected last time, and i is initialized with -1 ; cw is the current weight in scheduling, and cw is initialized with zero ; max ( S ) is the maximum weight of all the servers in S ; gcd ( S ) is the greatest common divisor of all server weights in S ; while ( true ) { i = ( i + 1 ) mod n ; if ( i == 0 ) { cw = cw - gcd ( S ) ; if ( cw < = 0 ) { cw = max ( S ) ; if ( cw == 0 ) return NULL ; } } if ( W ( Si ) > = cw ) return Si ; } Envoy EDF \u901a\u8fc7\u8fd9\u4e2a\u516c\u5f0f\u6765\u8ba1\u7b97\u6bcf\u4e00\u4e2a\u673a\u5668\u7684 deadline \u65f6\u95f4\uff0c current_time_ \u521d\u59cb\u4e3a0 const double deadline = current_time_ + 1.0 / weight; \u7136\u540e\u4f1a\u6309\u7167deadline\u7684\u5927\u5c0f \u5efa\u7acb\u5c0f\u6839\u5806\uff0cdeadline\u6700\u5c0f\u7684\u5728\u5806\u9876\uff0c\u4f18\u5148\u51fa\u961f\uff0c\u51fa\u961f\u540ecurrent_time_\u5c31\u7b49\u4e8e\u65b0\u51fa\u961f\u7684\u5143\u7d20\u7684deadline\u65f6\u95f4 \u53ef\u4ee5\u7406\u89e3\u6210\u60e9\u7f5a\u56e0\u5b50\uff0c\u901a\u8fc7\u8fd9\u4e2a\u503c\u53ef\u4ee5\u5c06\u4e0b\u4e00\u4e2a\u5165\u961f\u7684\u4e3b\u673a\u7684deadline\u65f6\u95f4\u53d8\u5927\u3002\u800c\u4e0d\u81f3\u4e8e\u6bcf\u6b21\u628a\u9ad8\u6743\u91cd\u7684\u673a\u5668\u52a0\u5165 \u5c31\u4f1a\u5bfc\u81f4\u8fd9\u4e2a\u673a\u5668\u88ab\u518d\u6b21\u9009\u4e2d\u3002 Shuffle sharding \u4f7f\u7528\u968f\u673a\u5206\u533a\u8fdb\u884c\u5de5\u4f5c\u8d1f\u8f7d\u9694\u79bb Load Balancing in the Datacenter Consistent Hashing: Algorithmic Tradeoffs","title":"Smooth weighted round-robin"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/algorithm/#hashtablehashmap","text":"hash map\u6216\u8005\u8bf4\u662fhash table\u901a\u5e38\u6765\u8bf4\u662f\u7528\u4e8e\u5b9e\u73b0\u9ad8\u6548\u7387\u67e5\u627e\u7684\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u4ed6\u7684\u6838\u5fc3\u5728\u4e8ehash\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\uff0c\u4ee5\u53ca\u5982\u4f55\u5904\u7406hash\u51b2\u7a81\u7b49\u3002\u5178\u578b\u7684\u5b9e\u73b0\u65b9\u5f0f\u5982\u4e0b: \u62e5\u6709\u4e00\u4e2a\u6570\u7ec4\uff0c\u8fd9\u4e2a\u6570\u7ec4\u7684\u5927\u5c0f\u8981\u5c3d\u91cf\u5927\u4e8e\u6211\u4eec\u5b9e\u9645\u5b58\u653e\u7684\u5143\u7d20\u6570\u91cf\uff0c\u7136\u540e\u9009\u53d6\u4e00\u4e2ahash\u51fd\u6570\u5bf9key\u8fdb\u884chash\uff0c\u5e76\u9664\u4ee5\u8fd9\u4e2a\u6570\u7ec4\u7684\u5927\u5c0f\u5f97\u5230\u4e00\u4e2aindex\u5373\u53ef\u3002 \u8fd9\u4e2a\u5e26\u6765\u7684\u95ee\u9898\u5c31\u662f\u6570\u7ec4\u4e2d\u5b58\u5728\u5927\u91cf\u6ca1\u6709\u4f7f\u7528\u7684\u6761\u76ee\uff0c\u4f1a\u5e26\u6765\u5185\u5b58\u4e0a\u7684\u5f00\u9500(\u9700\u8981\u89e3\u51b3)\u3002\u5982\u679c\u8fd9\u4e2a\u6570\u7ec4\u592a\u5c0f\u53c8\u4f1a\u5bfc\u81f4\u51b2\u7a81\u6982\u7387\u6bd4\u8f83\u9ad8\uff0c\u5982\u679c\u53d1\u751f\u51b2\u7a81\u662f\u9700\u8981\u89e3\u51b3\u7684\uff0c\u5178\u578b\u7684 \u89e3\u51b3\u65b9\u5f0f\u6709\u94fe\u8868\u6cd5\u3001\u4e8c\u6b21hash\u7b49\u7b49 SwissTable/hashbrown Sparsehash unordered_map folly f4 Reference: weighted Sparsehash SeaHash SwissTable hashbrown Benchmark of major hash maps implementations VNSWRR","title":"HashTable/HashMap"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/algorithm/skiplist/","text":"\u8df3\u8868\u5206\u6790","title":"\u8df3\u8868\u5206\u6790"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/algorithm/skiplist/#_1","text":"","title":"\u8df3\u8868\u5206\u6790"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/basic/","text":"OS\u57fa\u7840 x86\u5e73\u53f0\u4e0a\uff0c\u76ee\u524d\u6709\u4e24\u5957\u56fa\u4ef6\u6807\u51c6\uff0c\u4e00\u4e2a\u5c31\u662f\u65e9\u671f\u7684BIOS\u3001\u53e6\u5916\u4e00\u4e2a\u5c31\u662fUEFI\u3002 \u4e3a\u4e86\u907f\u514d\u8ba9\u6bcf\u4e00\u4e2a\u64cd\u4f5c\u7cfb\u7edf\u5b9e\u73b0bootloader\uff0c\u6240\u4ee5\u6709\u4e86bootloader\u6807\u51c6Multiboot\uff0c\u8fd9\u4e2a\u6807\u51c6\u5b9a\u4e49\u4e86bootloader\u548cOS\u4ea4\u4e92\u7684\u63a5\u53e3\uff0c\u5176\u53c2\u8003\u5b9e\u73b0\u5c31\u662fgrub\u3002 \u901a\u8fc7\u5185\u5b58\u6620\u5c04\u7684\u65b9\u5f0f\u8bbf\u95ee\uff0cVGA (0xb8000) QEMU -serial \u53ef\u4ee5\u5c06\u4e32\u53e3\u8f93\u51fa\u91cd\u5b9a\u5411\u5230\u53e6\u5916\u4e00\u4e2a\u5730\u65b9\uff0c\u4f8b\u5982: -serial mon:stdio \u3001 -serial file:output-file.txt Red Zone\u95ee\u9898 Read Zone\u662fSystem V ABI\u7684\u4e00\u4e2a\u4f18\u5316\uff0c\u5141\u8bb8\u51fd\u6570\u4e34\u65f6\u53bb\u4f7f\u7528\u6808\u5e27\u4e0b\u7684128\u4e2a\u5b57\u8282\uff0c\u800c\u4e0d\u7528\u53bb\u8c03\u6574\u5806\u6808\u6307\u9488\u3002 \u8fd9\u4e2a\u7ea2\u8272\u533a\u57df\uff08red zone\uff09\u5c31\u662f\u4e00\u4e2a\u4f18\u5316\u3002\u56e0\u4e3a\u8fd9\u4e2a\u533a\u57df\u4e0d\u4f1a\u88ab\u4fe1\u53f7\u6216\u8005\u4e2d\u65ad\u4fb5\u5360\uff0c\u51fd\u6570\u53ef\u4ee5\u5728\u4e0d\u79fb\u52a8\u6808\u6307\u9488\u7684\u60c5\u51b5\u4e0b\u4f7f\u7528\u5b83\u5b58\u53d6\u4e00\u4e9b\u4e34\u65f6\u6570\u636e\u2014\u2014\u4e8e\u662f\u4e24\u4e2a\u79fb\u52a8rsp\u7684\u6307\u4ee4\u5c31\u88ab\u8282\u7701\u4e0b\u6765\u4e86\u3002 \u7136\u800c\uff0c\u6807\u51c6\u53ea\u8bf4\u4e86\u4e0d\u4f1a\u88ab\u4fe1\u53f7\u548c\u7ec8\u7aef\u5904\u7406\u7a0b\u5e8f\u4fb5\u5360\uff0cred zone\u8fd8\u662f\u4f1a\u88ab\u63a5\u4e0b\u6765\u7684\u51fd\u6570\u8c03\u7528\u4f7f\u7528\u7684\uff0c\u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u90fd\u662f\u53f6\u5b50\u51fd\u6570\uff08\u4e0d\u4f1a\u518d\u8c03\u7528\u522b\u7684\u51fd\u6570\uff09\u4f7f\u7528\u8fd9\u79cd\u4f18\u5316\u3002\u4e0b\u9762\u6211\u4e3e\u4e00\u4e2a\u4f8b\u5b50\uff1a 1 2 3 4 5 6 7 8 9 10 11 long test2 ( long a , long b , long c ) /* \u53f6\u5b50\u51fd\u6570 */ { return a * b + c ; } long test1 ( long a , long b ) { return test2 ( b , a , 3 ); } int main ( int argc , char const * argv []) { return test1 ( 1 , 2 ); } \u5bf9\u5e94\u7684\u6c47\u7f16\u5982\u4e0b: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 00000000004004 d6 < test2 >: 4004 d6 : 55 push % rbp 4004 d7 : 48 89 e5 mov % rsp , % rbp 4004 da : 48 89 7 d f8 mov % rdi , -0x8 ( % rbp ) // \u4e0d\u9700\u8981\u8c03\u6574\u6808\u9876\uff0c\u76f4\u63a5\u4f7f\u7528\u539f\u6765\u6808\u9876\u7684\u5e95\u90e8128\u4e2a\u5b57\u8282 4004 de : 48 89 75 f0 mov % rsi , -0x10 ( % rbp ) 4004e2 : 48 89 55 e8 mov % rdx , -0x18 ( % rbp ) 4004e6 : 48 8 b 45 f8 mov -0x8 ( % rbp ), % rax 4004 ea : 48 0f af 45 f0 imul -0x10 ( % rbp ), % rax 4004 ef : 48 89 c2 mov % rax , % rdx 4004f 2 : 48 8 b 45 e8 mov -0x18 ( % rbp ), % rax 4004f 6 : 48 01 d0 add % rdx , % rax 4004f 9 : 5 d pop % rbp 4004f a : c3 retq 00000000004004f b < test1 >: 4004f b : 55 push % rbp 4004f c : 48 89 e5 mov % rsp , % rbp 4004f f : 48 83 ec 10 sub $0x10 , % rsp // \u8c03\u6574\u6808\u9876 400503 : 48 89 7 d f8 mov % rdi , -0x8 ( % rbp ) 400507 : 48 89 75 f0 mov % rsi , -0x10 ( % rbp ) 40050 b : 48 8 b 4 d f8 mov -0x8 ( % rbp ), % rcx 40050f : 48 8 b 45 f0 mov -0x10 ( % rbp ), % rax 400513 : ba 03 00 00 00 mov $0x3 , % edx 400518 : 48 89 ce mov % rcx , % rsi 40051 b : 48 89 c7 mov % rax , % rdi 40051 e : e8 b3 ff ff ff callq 4004 d6 < test2 > 400523 : c9 leaveq // \u6062\u590d\u6808\u9876 400524 : c3 retq \u53ef\u4ee5\u770b\u5230test1\u79fb\u52a8\u4e86\u6808\u9876\u6307\u9488\u6765\u83b7\u53d6\u6808\u5e27\u7a7a\u95f4\uff0c\u5373 sub $xxx, %rsp + leaveq \u7684\u7ec4\u5408\u3002\u4f46\u662ftest2\u5e76\u6ca1\u6709\u79fb\u52a8\u6808\u9876\u6307\u9488\uff0c \u800c\u662f\u76f4\u63a5\u4f7f\u7528ebp/esp\uff08\u6b64\u65f6\u5b83\u4eec\u4e24\u4e2a\u76f8\u7b49\uff0c\u7531\u4e8e\u662f\u53f6\u5b50\u4e5f\u4e0d\u7528\u8003\u8651\u5185\u5b58\u5bf9\u9f50\u7684\u95ee\u9898\uff09\u5b58\u653e\u8981\u4f7f\u7528\u7684\u6570\u636e\u3002 \u8fd9\u4e2a\u4f18\u5316\u5bf9\u4e8e\u5f02\u5e38\u548c\u786c\u4ef6\u4e2d\u65ad\u5219\u4f1a\u4ea7\u751f\u5de8\u5927\u95ee\u9898\uff0c\u4e00\u822c\u5185\u90e8\u90fd\u4f1a\u5173\u6389\u8fd9\u4e2a\u4f18\u5316\u3002 * https://os.phil-opp.com/red-zone/ \u865a\u62df\u5730\u5740\u6620\u5c04 \u5728\u5f00\u542f\u5206\u9875\u7684\u60c5\u51b5\u4e0b\uff0c\u5185\u6838\u5982\u4f55\u76f4\u63a5\u8bbf\u95ee\u7269\u7406\u5730\u5740\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u6709\u4e00\u5957\u673a\u5236\u5c06\u865a\u62df\u5730\u5740\u6620\u5c04\u5230\u5bf9\u5e94\u7684\u7269\u7406\u5730\u5740\u4e0a\uff0c\u6240\u4ee5\u5c31\u6709\u4e86\u4e00\u4e9b\u6280\u672f\u65b9\u6848\u3002 Identity Mapping \u865a\u62df\u5730\u5740\u548c\u7269\u7406\u5730\u5740\u4e00\u4e00\u6620\u5c04\uff0c\u5e26\u6765\u7684\u95ee\u9898\u5c31\u662f\u4f1a\u5bfc\u81f4\u5185\u5b58\u788e\u7247(\u5916\u90e8)\uff0c\u548c\u5206\u6bb5\u673a\u5236\u7684\u7f3a\u70b9\u662f\u4e00\u6837\u7684\uff0c\u5bfc\u81f4\u5728\u9700\u8981\u4e00\u7247\u8fde\u7eed\u5185\u5b58\u7684\u65f6\u5019\u65e0\u6cd5\u88ab\u6ee1\u8db3\u3002 \u800c\u4e14\u8d85\u8fc7frame\u8303\u56f4\u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4\u6ca1\u6709\u529e\u6cd5\u88ab\u6620\u5c04\u3002 Map at a Fixed Offset offset+\u865a\u62df\u5730\u5740\u7a7a\u95f4\u5730\u5740\u6765\u4e00\u4e00\u6620\u5c04\u5230frame\uff0c\u8fd9\u6837\u53ef\u4ee5\u907f\u514dIdentity Mapping\u56e0\u4e3a\u8d85\u8fc7frame\u8303\u56f4\u7684\u865a\u62df\u5730\u5740\u6ca1\u6709\u529e\u6cd5\u8fdb\u884c\u6620\u5c04\u7684\u95ee\u9898\uff0c\u4f46\u662f\u7f3a\u70b9\u5c31\u662f \u6bcf\u6b21\u521b\u5efa\u4e00\u4e2a\u9875\u8868\u5c31\u9700\u8981\u521b\u5efa\u8fd9\u6837\u7684\u4e00\u4e2a\u6620\u5c04\u5173\u7cfb\u3002\u800c\u4e14\u5b83\u4e0d\u5141\u8bb8\u8bbf\u95ee\u5176\u4ed6\u5730\u5740\u7a7a\u95f4\u7684\u9875\u8868\uff0c\u8fd9\u5728\u521b\u5efa\u65b0\u8fdb\u7a0b\u65f6\u5f88\u6709\u7528\u3002 Map the Complete Physical Memory \u5728Identify Maaping\u7684\u57fa\u7840\u4e0a\u6dfb\u52a0offset\u5c06\u865a\u62df\u5730\u5740\u6620\u5c04\u5230\u5168\u90e8\u7269\u7406\u5185\u5b58\u4e2d\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u53ef\u4ee5\u4f7f\u5f97\u5185\u6838\u53ef\u4ee5\u8bbf\u95ee\u4efb\u610f\u7684\u7269\u7406\u5185\u5b58\u3002\u4f46\u662f\u9700\u8981\u5206\u914d\u5f88\u591a\u9875\u8868 \u65e0\u8bba\u662f\u5df2\u7ecf\u6620\u5c04\u7684\u865a\u62df\u5730\u5740\u8fd8\u662f\u6ca1\u6709\u6620\u5c04\u7684\u3002\u8fd9\u4e9b\u9875\u8868\u4f1a\u5360\u7528\u6bd4\u8f83\u591a\u7684\u5185\u5b58\u3002\u4e0d\u8fc7\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7huge page\u7684\u65b9\u5f0f\u6765\u51cf\u5c11\u9700\u8981\u5b58\u50a8\u7684\u9875\u8868\u5927\u5c0f\u3002 Temporary Mapping Recursive Page Tables SIMD\u548cOS SIMD(Single Instruction Multiple Data)\uff0c\u5355\u6761\u6307\u4ee4\u53ef\u4ee5\u64cd\u4f5c\u591a\u4e2a\u5b57\u8282\u7684\u6570\u636e\u3002\u76ee\u524dx86\u652f\u6301\u4e09\u79cdSIMD\u7684\u6807\u51c6: MMX Multi Media Extension \uff0c\u8fd9\u4e2a\u6807\u51c6\u5b9a\u4e49\u4e868\u4e2a64\u4f4d\u7684\u5bc4\u5b58\u5668\uff0c\u5206\u522b\u662fmm0\u3001mm1\u3001mm2....mm7 SSE Streaming SIMD Extensions\uff0c\u6dfb\u52a0\u4e86\u5341\u516d\u4e2a\u65b0\u7684\u5bc4\u5b58\u5668\uff0c\u5206\u522b\u662fxmm0...xmm15\uff0c\u6bcf\u4e00\u4e2a\u5bc4\u5b58\u5668\u90fd\u662f128\u4f4d AVX Advanced Vector Extensions\uff0c\u65b0\u589e\u4e8616\u4e2a256\u4f4d\u7684\u5bc4\u5b58\u5668 ymm0....ymm15 SIMD\u6307\u4ee4\u867d\u7136\u53ef\u4ee5\u63d0\u9ad8\u6027\u80fd\uff0c\u4f46\u662f\u5bf9\u4e8eOS\u6765\u8bf4\u4f1a\u5bfc\u81f4\u4e0a\u4e0b\u6587\u5207\u6362\u7684\u5f00\u9500\u53d8\u5927\uff0c\u6bcf\u4e00\u6b21\u4e0a\u4e0b\u6587\u5207\u6362\u6216\u8005\u786c\u4ef6\u4e2d\u65ad\u90fd\u9700\u8981\u8fdb\u884c\u4e0a\u4e0b\u6587\u7684\u4fdd\u5b58\u548c\u6062\u590d \u56e0\u4e3a\u4f7f\u7528\u4e86SIMD\u6307\u4ee4\u4f1a\u5bfc\u81f4\u6bcf\u6b21\u9700\u8981\u4fdd\u5b58\u7684\u5185\u5bb9\u66f4\u591a\uff0c\u5e26\u6765\u6027\u80fd\u7684\u4e0a\u7684\u635f\u8017\u3002\u6240\u4ee5\u5185\u6838\u5f00\u53d1\u4f1a\u5173\u95edSIMD\u3002\u4f46\u662f\u76ee\u524dx86_64\u67b6\u6784\u4e00\u822c\u90fd\u4f1a\u4f7f\u7528 SIMDl\u6765\u5b9e\u73b0\u6d6e\u70b9\u6570\u7684\u64cd\u4f5c\uff0c\u5982\u679c\u5173\u95edSIMD\u4f1a\u5bfc\u81f4\u9519\u8bef\u3002\u5e78\u8fd0\u7684\u662fLLVM\u7ed9\u6211\u4eec\u63d0\u4f9b\u4e86soft-float\u80fd\u529b\uff0c\u53ef\u4ee5\u901a\u8fc7\u8f6f\u4ef6\u51fd\u6570\u6765\u6a21\u62df\u6240\u6709\u7684\u6d6e\u70b9\u6570\u64cd\u4f5c\u3002 Preserved and Sscratch Registers preserved registers \u8fd9\u7c7b\u5bc4\u5b58\u5668\u5728\u8de8\u51fd\u6570\u8c03\u7528\u7684\u65f6\u5019\u5fc5\u987b\u4e0d\u80fd\u88ab\u6539\u53d8\uff0c\u56e0\u6b64\u88ab\u8c03\u7528\u8005\u9700\u8981\u4e00\u5f00\u59cb\u5c31\u4fdd\u5b58\u8fd9\u4e9b\u5bc4\u5b58\u5668\uff0c\u7136\u540e\u5728\u8c03\u7528\u7ed3\u675f\u7684\u65f6\u5019\u8fdb\u884c\u6062\u590d rbp, rbx, rsp, r12, r13, r14, r15 callee-saved \u88ab\u8c03\u7528\u8005\u4fdd\u5b58 scratch registers \u8fd9\u7c7b\u5bc4\u5b58\u5668\u5c5e\u4e8e\u4e34\u65f6\u5bc4\u5b58\u5668\uff0c\u88ab\u8c03\u7528\u8005\u5728\u4f7f\u7528\u4e0a\u662f\u6ca1\u6709\u9650\u5236\u7684\uff0c\u8c03\u7528\u8005\u5982\u679c\u5411\u4fdd\u6301\u8fd9\u4e9b\u5bc4\u5b58\u5668\u7684\u503c\u4e0d\u53d8\u5c31\u9700\u8981\u4fdd\u5b58\u8fd9\u4e9b\u5bc4\u5b58\u5668\u3002 \u6240\u4ee5\u8fd9\u7c7b\u5bc4\u5b58\u5668\u88ab\u79f0\u4e3a\u8c03\u7528\u8005\u4fdd\u5b58 rax, rcx, rdx, rsi, rdi, r8, r9, r10, r11 caller-saved \u8c03\u7528\u8005\u4fdd\u5b58 Interrupt Calling Convention and Interrupt Stack Frame Interrupt Calling Convention \u4e2d\u65ad\u8c03\u7528\u548c\u51fd\u6570\u8c03\u7528\u5f88\u7c7b\u4f3c\uff0c\u90fd\u6709\u81ea\u5df1\u7684\u8c03\u7528\u89c4\u8303\uff0c\u56e0\u4e3a\u5f02\u5e38\u53ef\u4ee5\u53d1\u751f\u5728\u4efb\u4f55\u5730\u65b9\uff0c\u56e0\u6b64\u6211\u4eec\u6ca1\u529e\u6cd5\u63d0\u524d\u4fdd\u5b58\u9700\u8981\u7684\u5bc4\u5b58\u5668\uff0c\u56e0\u6b64 \u4e2d\u65ad\u8c03\u7528\u7684\u65f6\u5019\u9700\u8981\u4fdd\u5b58\u6240\u6709\u7684\u5bc4\u5b58\u5668\u3002\u4e2d\u65ad\u8c03\u7528\u7ed3\u675f\u540e\u6062\u590d\u6240\u6709\u4fdd\u5b58\u7684\u5bc4\u5b58\u5668\u3002\u4e3a\u4e86\u6548\u7387\uff0c\u5e76\u4e0d\u4f1a\u4fdd\u5b58\u6240\u6709\u7684\u5bc4\u5b58\u5668\uff0c\u800c\u8fd9\u662f\u4fdd\u5b58 \u88ab\u51fd\u6570\u8986\u76d6\u7684\u5bc4\u5b58\u5668\u3002 Interrupt Stack Frame Aligning the stack pointer Switching stacks Pushing the old stack pointer ushing and updating the RFLAGS register Pushing the instruction pointer Pushing an error code Invoking the interrupt handler VGA Buffer IST and TSS The Interrupt Stack Table (IST) is part of an old legacy structure called Task State Segment (TSS). The TSS used to hold various information (e.g. processor register state) about a task in 32-bit mode and was for example used for hardware context switching. However, hardware context switching is no longer supported in 64-bit mode and the format of the TSS changed completely. On x86_64, the TSS no longer holds any task specific information at all. Instead, it holds two stack tables (the IST is one of them). The only common field between the 32-bit and 64-bit TSS is the pointer to the I/O port permissions bitmap. The Privilege Stack Table is used by the CPU when the privilege level changes. For example, if an exception occurs while the CPU is in user mode (privilege level 3), the CPU normally switches to kernel mode (privilege level 0) before invoking the exception handler. In that case, the CPU would switch to the 0th stack in the Privilege Stack Table (since 0 is the target privilege level). We don't have any user mode programs yet, so we ignore this table for now. The Interrupt Descriptor Table In order to catch and handle exceptions, we have to set up a so-called Interrupt Descriptor Table (IDT). In this table we can specify a handler function for each CPU exception. The hardware uses this table directly, The Global Descriptor Table The Global Descriptor Table (GDT) is a relict that was used for memory segmentation before paging became the de facto standard. It is still needed in 64-bit mode for various things such as kernel/user mode configuration or TSS loading. The GDT is a structure that contains the segments of the program. It was used on older architectures to isolate programs from each other, before paging became the standard. For more information about segmentation check out the equally named chapter of the free \u201cThree Easy Pieces\u201d book. While segmentation is no longer supported in 64-bit mode, the GDT still exists. It is mostly used for two things: Switching between kernel space and user space, and loading a TSS structure. OS\u57fa\u7840 \u6700\u521d\u7684OS\u53ea\u80fd\u8fd0\u884c\u572816\u4f4d\u76848088\u5904\u7406\u5668\u4e0a\uff0c\u53ea\u80fd\u8bbf\u95ee\u52301MB\u7684\u5730\u5740\u7a7a\u95f4\u4ece0x00000000 ~ 0x000FFFFF\uff0c\u524d640KB\u88ab\u79f0\u4e3a\u4f4e\u5185\u5b58\u533a\uff0c\u662fOS\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u7684\u5185\u5b58\u3002 \u5269\u4e0b\u7684384KB\u4ece0x000A0000 ~ 0x000FFFFF\u5219\u662f\u4fdd\u7559\u7684\u7528\u4e8e\u8bbf\u95ee\u786c\u4ef6\u7684\u3002\u5176\u4e2dBIOS\u5360\u752864KB\u4ece0x000F0000 ~ 0X000FFFF\u3001\u8fd8\u6709VGA\u5360\u75280X000A0000 ~ 0x000C0000 \u6b64\u540eIntel\u7a81\u78341MB\u5185\u5b58\u9650\u5236\u540e\uff0c\u4e3a\u4e86\u5411\u540e\u517c\u5bb9\u4ecd\u7136\u4fdd\u6301\u8fd9\u6837\u7684\u5185\u5b58\u5e03\u5c40\uff0c\u8fd9\u6837\u5c31\u4f7f\u5f97\u5185\u5b58\u4e2d\u5b58\u5728\u4e00\u4e2ahole\uff0c0x000A0000~0x00100000\u3002\u5185\u5b58\u5219\u88ab\u5206\u6210\u4e86\u4e24\u4e2a\u90e8\u5206\uff0c\u7b2c\u4e00\u4e2a\u90e8\u5206\u5c31\u662f\u4ece0x00000000\u5230 0x000A0000\u8fd9640KB\u88ab\u79f0\u4e3a\u4f4e\u5185\u5b58\u533a\uff0c\u53e6\u5916\u4e00\u4e2a\u90e8\u5206\u5c31\u662f\u4ece0x00100000\u5f00\u59cb\uff0c\u88ab\u79f0\u4e3aextended memory\u3002\u6b64\u5916BIOS\u901a\u8fc7\u4f1a\u4fdd\u755932\u4f4d\u7684\u7269\u7406\u5730\u5740\u7a7a\u95f4\u7684\u9876\u90e8\u5185\u5b58\u7a7a\u95f4\uff0c\u7528\u4e8e\u7ed932\u4f4d\u7684PCI\u8bbe\u5907\u4f7f\u7528\u3002 \u542f\u52a8\u540e\uff0c\u7b2c\u4e00\u6761\u6307\u5b9a\u7684\u4f4d\u7f6e\u662f0x000ffff0\uff0c\u4e5f\u5c31\u662f\u9876\u90e8\u768416\u4e2a\u5b57\u8282\u7684\u4f4d\u7f6e(\u4e3a\u4ec0\u4e48\u662f\u8fd9\u91cc)\uff0c\u7b2c\u4e00\u6761\u6307\u4ee4\u662f\u4e00\u4e2aljmp\u7684\u6307\u4ee4\uff0c\u8df3\u8f6c\u52300x000fe05b\u7684\u4f4d\u7f6e\uff0c\u4e5f\u662f\u5c5e\u4e8e\u9876\u90e8\u768464KB\u7684\u8303\u56f4\u5185\uff0c\u8fd9\u4e2a\u4f4d\u7f6e\u662f\u56fa\u5b9a\u7684 \u4e5f\u5c31\u662f\u8bf4\uff0cBIOS\u771f\u6b63\u5f00\u59cb\u7684\u5730\u65b9\u5c31\u662f0xfe05b\u5904\u3002 BIOS\u6267\u884c\u4e86\u4e00\u5806\u81ea\u68c0\u64cd\u4f5c\u540e\uff0c\u627e\u5230\u542f\u52a8\u8bbe\u5907\uff0c\u7136\u540e\u8f7d\u5165\u542f\u52a8\u8bbe\u5907\u7684\u524d512\u5b57\u8282\u52300x7c00\u5904\uff0c\u7136\u540e\u5f00\u59cb\u6267\u884c\uff0c\u8fd9\u4e2a\u65f6\u5019\u63a7\u5236\u6743\u5c31\u8f6c\u4ea4\u7ed9bootloader\u4e86\uff0cbootload\u4e3b\u8981\u505a\u4e24\u4ef6\u4e8b: \u5b9e\u6a21\u5f0f\u523032\u4f4d\u4fdd\u62a4\u6a21\u5f0f\u7684\u5207\u6362 \u4ece\u78c1\u76d8\u8bfb\u53d6\u5185\u6838 \u5982\u4f55\u4ece\u5b9e\u6a21\u5f0f\u5207\u6362\u5230\u4fdd\u62a4\u6a21\u5f0f \u6253\u5f00A20\u5730\u5740\u7ebf\u540e \u52a0\u8f7dgdt CR0\u5bc4\u5b58\u5668\u7684PE\u4f4d\u7f6e\u8bbe\u7f6e\u4e3a1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 # Enable A20: # For backwards compatibility with the earliest PCs, physical # address line 20 is tied low, so that addresses higher than # 1MB wrap around to zero by default. This code undoes this. seta20 .1 : inb $0x64 , % al # Wait for not busy testb $0x2 , % al jnz seta20 .1 movb $0xd1 , % al # 0xd1 -> port 0x64 outb % al , $0x64 seta20 .2 : inb $0x64 , % al # Wait for not busy testb $0x2 , % al jnz seta20 .2 movb $0xdf , % al # 0xdf -> port 0x60 outb % al , $0x60 lgdt gdtdesc movl % cr0 , % eax orl $CR0_PE_ON , % eax movl % eax , % cr0 Bootloader\u5982\u4f55\u77e5\u9053\u5185\u6838\u5927\u5c0f\uff0c\u8bfb\u53d6\u6307\u5b9a\u7684\u6247\u533a\u628a\u5185\u6838\u52a0\u8f7d\u5230\u5bf9\u5e94\u7684\u5730\u65b9? \u8bfb\u53d6ELF\u5934\u90e8\u4fe1\u606f\uff0c\u901a\u8fc7ELF\u5934\u77e5\u9053\u8fd9\u4e2a\u7a0b\u5e8f\u5305\u542b\u591a\u5c11\u5b57\u8282\u5927\u5c0f\u7684\u5185\u5bb9\uff0cELF\u5934\u4e5f\u6307\u5b9a\u4e86\u5165\u53e3\u51fd\u6570\u7684\u5730\u5740\uff0c\u8f7d\u5165\u5730\u5740\u3001\u94fe\u63a5\u5730\u5740\u7b49\u4fe1\u606f\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 struct Proghdr * ph , * eph ; // read 1st page off disk readseg (( uint32_t ) ELFHDR , SECTSIZE * 8 , 0 ); // is this a valid ELF? if ( ELFHDR -> e_magic != ELF_MAGIC ) goto bad ; // load each program segment (ignores ph flags) ph = ( struct Proghdr * ) (( uint8_t * ) ELFHDR + ELFHDR -> e_phoff ); eph = ph + ELFHDR -> e_phnum ; for (; ph < eph ; ph ++ ) // p_pa is the load address of this segment (as well // as the physical address) readseg ( ph -> p_pa , ph -> p_memsz , ph -> p_offset ); // call the entry point from the ELF header // note: does not return! (( void ( * )( void )) ( ELFHDR -> e_entry ))(); ELF\u6709\u4e00\u4e2a\u56fa\u5b9a\u76844\u5b57\u8282\u7684header\uff0c\u8fd8\u6709\u53d8\u957f\u7684program header\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 tianqian - zyf @ tianqia - zyf : ~/ 6.828 / lab$ objdump - h obj / kern / kernel obj / kern / kernel : file format elf32 - i386 Sections : Idx Name Size VMA LMA File off Algn 0 . text 000019e9 f0100000 00100000 00001000 2 ** 4 CONTENTS , ALLOC , LOAD , READONLY , CODE 1 . rodata 000006 c0 f0101a00 00101 a00 00002 a00 2 ** 5 CONTENTS , ALLOC , LOAD , READONLY , DATA 2 . stab 00003 b95 f01020c0 001020 c0 000030 c0 2 ** 2 CONTENTS , ALLOC , LOAD , READONLY , DATA 3 . stabstr 00001 948 f0105c55 00105 c55 00006 c55 2 ** 0 CONTENTS , ALLOC , LOAD , READONLY , DATA 4 . data 0000 9300 f0108000 0010 8000 0000 9000 2 ** 12 CONTENTS , ALLOC , LOAD , DATA 5 . got 0000000 8 f0111300 00111300 00012300 2 ** 2 CONTENTS , ALLOC , LOAD , DATA 6 . got . plt 0000000 c f0111308 0011130 8 0001230 8 2 ** 2 CONTENTS , ALLOC , LOAD , DATA 7 . data . rel . local 00001000 f0112000 00112000 00013000 2 ** 12 CONTENTS , ALLOC , LOAD , DATA 8 . data . rel . ro . local 00000044 f0113000 00113000 00014000 2 ** 2 CONTENTS , ALLOC , LOAD , DATA 9 . bss 0000064 8 f0113060 00113060 00014060 2 ** 5 CONTENTS , ALLOC , LOAD , DATA 10 . comment 0000002 a 00000000 00000000 000146 a8 2 ** 0 CONTENTS , READONLY \u8f7d\u5165\u5185\u6838\u540e\uff0c\u5185\u6838\u5f00\u59cb\u8fdb\u884c\u4e00\u7cfb\u5217\u7684\u521d\u59cb\u5316\uff0c\u6700\u91cd\u8981\u7684\u5c31\u662f\u5f00\u542f\u865a\u62df\u5730\u5740\u3002\u5728\u6b64\u4e4b\u524d\u5185\u6838\u4e00\u76f4\u8fd0\u884c\u5728\u7269\u7406\u5730\u5740\u4e0b\uff0c\u5f00\u542f\u865a\u62df\u5730\u5740\u9700\u8981\u5f00\u542f\u5206\u9875\uff0c\u76f8\u5173\u4ee3\u7801\u5982\u4e0b: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # We haven't set up virtual memory yet, so we're running from # the physical address the boot loader loaded the kernel at: 1MB # (plus a few bytes). However, the C code is linked to run at # KERNBASE+1MB. Hence, we set up a trivial page directory that # translates virtual addresses [KERNBASE, KERNBASE+4MB) to # physical addresses [0, 4MB). This 4MB region will be # sufficient until we set up our real page table in mem_init # in lab 2. # Load the physical address of entry_pgdir into cr3. entry_pgdir # is defined in entrypgdir.c. movl $ ( RELOC ( entry_pgdir )), % eax movl % eax , % cr3 # Turn on paging. movl % cr0 , % eax orl $ ( CR0_PE | CR0_PG | CR0_WP ), % eax movl % eax , % cr0 \u7f16\u7a0b\u8303\u5f0f \u547d\u4ee4\u5f0f\u7f16\u7a0b(Imperative)\u3001\u58f0\u660e\u5f0f\u7f16\u7a0b(Declarative)\u3001\u51fd\u6570\u5f0f\u7f16\u7a0b(Functional) \u547d\u4ee4\u5f0f\u7f16\u7a0b: \u4e00\u6b65\u4e00\u6b65\u544a\u8bc9\u8ba1\u7b97\u673a\u505a\u505a\u4ec0\u4e48\u3001\u518d\u505a\u4ec0\u4e48 \u58f0\u660e\u5f0f\u7f16\u7a0b: \u544a\u8bc9\u8ba1\u7b97\u673a\u5e94\u8be5\u505a\u4ec0\u4e48\uff0c\u4f46\u662f\u4e0d\u6307\u5b9a\u5177\u4f53\u8981\u600e\u4e48\u505a \u51fd\u6570\u5f0f\u7f16\u7a0b: \u548c\u58f0\u660e\u5f0f\u7f16\u7a0b\u7c7b\u4f3c\uff0c\u4f46\u662f\u4ed6\u5f0f\u901a\u8fc7\u4e00\u4e2a\u4e2a\u51fd\u6570\u4e32\u8fde\u8d77\u6765\u7684\u3002 \u5982\u4f55\u83b7\u53d6\u8c03\u7528\u94fe? \u7f51\u7edc\u57fa\u7840 ARP\u548cGARP ARP\u534f\u8bae\u5de5\u4f5c\u5728\u4e8c\u5c42\uff0c\u7528\u4e8e\u83b7\u53d6IP\u5730\u5740\u5bf9\u5e94\u7684mac\u5730\u5740\uff0c\u62a5\u6587\u7684\u683c\u5f0f\u4e3a who has [IP_B], tell [IP_A] \uff0c\u5305\u542b\u4e86\u8981\u67e5\u8be2\u7684IP\u5730\u5740\uff0c\u4ee5\u53ca\u81ea\u5df1\u7684IP\u5730\u5740\u548cMac\u5730\u5740\u4fe1\u606f \u4f46\u662f\u5982\u679c\u8981\u67e5\u8be2\u7684\u5730\u5740\u5c31\u662f\u81ea\u5df1\u7684\u5730\u5740\uff0c\u8fd9\u4e2a\u65f6\u5019\u79f0\u4e3a\u662fGARP(Gratuitous ARP)\uff0c\u4e5f\u5c31\u662f\u514d\u8d39\u7684ARP\uff0c\u8fd9\u79cd\u62a5\u6587\u662f\u5141\u8bb8\u7684\uff0c\u6709\u4e24\u4e2a\u4f5c\u7528\u3002 \u7528\u6765\u63a2\u6d4bIP\u51b2\u7a81\u7684\u95ee\u9898\uff0c\u5982\u679c\u771f\u7684\u6709\u4eba\u54cd\u5e94\u8fd9\u4e2a\u62a5\u6587\uff0c\u8bf4\u660e\u5c40\u57df\u7f51\u4e2d\u6709\u548c\u81ea\u5df1\u76f8\u540cIP\u7684\u673a\u5668\u5b58\u5728 \u7528\u6765\u66f4\u65b0\u81ea\u5df1\u7684Mac\u5730\u5740\u4fe1\u606f\uff0c\u5f53\u81ea\u5df1\u7684Mac\u5730\u5740\u53d1\u751f\u53d8\u5316\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u901a\u8fc7\u8fd9\u79cd\u62a5\u6587\u4e3b\u52a8\u901a\u77e5\u7f51\u7edc\u4e2d\u7684\u5176\u4ed6\u4e3b\u673a\u66f4\u65b0\u81ea\u5df1\u7684ARP\u7f13\u5b58 Debuger\u3001Compiler\u3001ELF https://grafana.com/grafana/dashboards/7645 \u901a\u8fc7\u7f16\u8bd1\u5668\u7684 -g \u53c2\u6570\u53ef\u4ee5\u4ea7\u751fdebug\u4fe1\u606f\uff0c\u6700\u4e3a\u91cd\u8981\u7684\u662f debug_line \u3001 debug_info \u4e24\u7c7b\uff0c\u524d\u8005\u7528\u6765\u63d0\u4f9b\u884c\u53f7\u4fe1\u606f\uff0c\u540e\u8005\u5c31\u662f\u8457\u540d\u7684 DWARF \u63d0\u4f9b\u8c03\u8bd5\u4fe1\u606f\u3002 debug_line \u7684\u683c\u5f0f\u5982\u4e0b: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 .debug_line: line number info for a single cu Source lines (from CU-DIE at .debug_info offset 0x0000000b): NS new statement, BB new basic block, ET end of text sequence PE prologue end, EB epilogue begin IS=val ISA number, DI=val discriminator value <pc> [lno,col] NS BB ET PE EB IS= DI= uri: \"filepath\" 0x004004c0 [ 1, 0] NS uri: \"/home/tianqian-zyf/debuger/first.cc\" 0x004004cb [ 2,10] NS PE 0x004004d3 [ 3,10] NS 0x004004db [ 4,14] NS 0x004004df [ 4,16] 0x004004e3 [ 4,10] 0x004004e7 [ 5, 7] NS 0x004004ef [ 6, 5] NS 0x004004f6 [ 6, 5] NS ET \u5305\u542b\u4e86\u4e00\u4e9b\u8bf4\u660e\u4fe1\u606f\uff0c\u5df2\u7ecf\u5730\u5740\u548c\u884c\u53f7\u7684\u5bf9\u5e94\u5173\u7cfb: NS\u8868\u793a\u4e00\u4e2a\u65b0\u7684\u8bed\u53e5 BB \u8868\u793a\u4e00\u4e2a\u57fa\u672c\u7684block ET \u8868\u793a\u4e00\u4e2a\u7f16\u8bd1\u5355\u5143\u7684\u7ed3\u675f PE \u662f\u4e00\u4e2a\u51fd\u6570\u7684\u5f00\u59cb dwarfdump","title":"OS\u57fa\u7840"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/basic/#os","text":"x86\u5e73\u53f0\u4e0a\uff0c\u76ee\u524d\u6709\u4e24\u5957\u56fa\u4ef6\u6807\u51c6\uff0c\u4e00\u4e2a\u5c31\u662f\u65e9\u671f\u7684BIOS\u3001\u53e6\u5916\u4e00\u4e2a\u5c31\u662fUEFI\u3002 \u4e3a\u4e86\u907f\u514d\u8ba9\u6bcf\u4e00\u4e2a\u64cd\u4f5c\u7cfb\u7edf\u5b9e\u73b0bootloader\uff0c\u6240\u4ee5\u6709\u4e86bootloader\u6807\u51c6Multiboot\uff0c\u8fd9\u4e2a\u6807\u51c6\u5b9a\u4e49\u4e86bootloader\u548cOS\u4ea4\u4e92\u7684\u63a5\u53e3\uff0c\u5176\u53c2\u8003\u5b9e\u73b0\u5c31\u662fgrub\u3002 \u901a\u8fc7\u5185\u5b58\u6620\u5c04\u7684\u65b9\u5f0f\u8bbf\u95ee\uff0cVGA (0xb8000) QEMU -serial \u53ef\u4ee5\u5c06\u4e32\u53e3\u8f93\u51fa\u91cd\u5b9a\u5411\u5230\u53e6\u5916\u4e00\u4e2a\u5730\u65b9\uff0c\u4f8b\u5982: -serial mon:stdio \u3001 -serial file:output-file.txt","title":"OS\u57fa\u7840"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/basic/#red-zone","text":"Read Zone\u662fSystem V ABI\u7684\u4e00\u4e2a\u4f18\u5316\uff0c\u5141\u8bb8\u51fd\u6570\u4e34\u65f6\u53bb\u4f7f\u7528\u6808\u5e27\u4e0b\u7684128\u4e2a\u5b57\u8282\uff0c\u800c\u4e0d\u7528\u53bb\u8c03\u6574\u5806\u6808\u6307\u9488\u3002 \u8fd9\u4e2a\u7ea2\u8272\u533a\u57df\uff08red zone\uff09\u5c31\u662f\u4e00\u4e2a\u4f18\u5316\u3002\u56e0\u4e3a\u8fd9\u4e2a\u533a\u57df\u4e0d\u4f1a\u88ab\u4fe1\u53f7\u6216\u8005\u4e2d\u65ad\u4fb5\u5360\uff0c\u51fd\u6570\u53ef\u4ee5\u5728\u4e0d\u79fb\u52a8\u6808\u6307\u9488\u7684\u60c5\u51b5\u4e0b\u4f7f\u7528\u5b83\u5b58\u53d6\u4e00\u4e9b\u4e34\u65f6\u6570\u636e\u2014\u2014\u4e8e\u662f\u4e24\u4e2a\u79fb\u52a8rsp\u7684\u6307\u4ee4\u5c31\u88ab\u8282\u7701\u4e0b\u6765\u4e86\u3002 \u7136\u800c\uff0c\u6807\u51c6\u53ea\u8bf4\u4e86\u4e0d\u4f1a\u88ab\u4fe1\u53f7\u548c\u7ec8\u7aef\u5904\u7406\u7a0b\u5e8f\u4fb5\u5360\uff0cred zone\u8fd8\u662f\u4f1a\u88ab\u63a5\u4e0b\u6765\u7684\u51fd\u6570\u8c03\u7528\u4f7f\u7528\u7684\uff0c\u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u90fd\u662f\u53f6\u5b50\u51fd\u6570\uff08\u4e0d\u4f1a\u518d\u8c03\u7528\u522b\u7684\u51fd\u6570\uff09\u4f7f\u7528\u8fd9\u79cd\u4f18\u5316\u3002\u4e0b\u9762\u6211\u4e3e\u4e00\u4e2a\u4f8b\u5b50\uff1a 1 2 3 4 5 6 7 8 9 10 11 long test2 ( long a , long b , long c ) /* \u53f6\u5b50\u51fd\u6570 */ { return a * b + c ; } long test1 ( long a , long b ) { return test2 ( b , a , 3 ); } int main ( int argc , char const * argv []) { return test1 ( 1 , 2 ); } \u5bf9\u5e94\u7684\u6c47\u7f16\u5982\u4e0b: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 00000000004004 d6 < test2 >: 4004 d6 : 55 push % rbp 4004 d7 : 48 89 e5 mov % rsp , % rbp 4004 da : 48 89 7 d f8 mov % rdi , -0x8 ( % rbp ) // \u4e0d\u9700\u8981\u8c03\u6574\u6808\u9876\uff0c\u76f4\u63a5\u4f7f\u7528\u539f\u6765\u6808\u9876\u7684\u5e95\u90e8128\u4e2a\u5b57\u8282 4004 de : 48 89 75 f0 mov % rsi , -0x10 ( % rbp ) 4004e2 : 48 89 55 e8 mov % rdx , -0x18 ( % rbp ) 4004e6 : 48 8 b 45 f8 mov -0x8 ( % rbp ), % rax 4004 ea : 48 0f af 45 f0 imul -0x10 ( % rbp ), % rax 4004 ef : 48 89 c2 mov % rax , % rdx 4004f 2 : 48 8 b 45 e8 mov -0x18 ( % rbp ), % rax 4004f 6 : 48 01 d0 add % rdx , % rax 4004f 9 : 5 d pop % rbp 4004f a : c3 retq 00000000004004f b < test1 >: 4004f b : 55 push % rbp 4004f c : 48 89 e5 mov % rsp , % rbp 4004f f : 48 83 ec 10 sub $0x10 , % rsp // \u8c03\u6574\u6808\u9876 400503 : 48 89 7 d f8 mov % rdi , -0x8 ( % rbp ) 400507 : 48 89 75 f0 mov % rsi , -0x10 ( % rbp ) 40050 b : 48 8 b 4 d f8 mov -0x8 ( % rbp ), % rcx 40050f : 48 8 b 45 f0 mov -0x10 ( % rbp ), % rax 400513 : ba 03 00 00 00 mov $0x3 , % edx 400518 : 48 89 ce mov % rcx , % rsi 40051 b : 48 89 c7 mov % rax , % rdi 40051 e : e8 b3 ff ff ff callq 4004 d6 < test2 > 400523 : c9 leaveq // \u6062\u590d\u6808\u9876 400524 : c3 retq \u53ef\u4ee5\u770b\u5230test1\u79fb\u52a8\u4e86\u6808\u9876\u6307\u9488\u6765\u83b7\u53d6\u6808\u5e27\u7a7a\u95f4\uff0c\u5373 sub $xxx, %rsp + leaveq \u7684\u7ec4\u5408\u3002\u4f46\u662ftest2\u5e76\u6ca1\u6709\u79fb\u52a8\u6808\u9876\u6307\u9488\uff0c \u800c\u662f\u76f4\u63a5\u4f7f\u7528ebp/esp\uff08\u6b64\u65f6\u5b83\u4eec\u4e24\u4e2a\u76f8\u7b49\uff0c\u7531\u4e8e\u662f\u53f6\u5b50\u4e5f\u4e0d\u7528\u8003\u8651\u5185\u5b58\u5bf9\u9f50\u7684\u95ee\u9898\uff09\u5b58\u653e\u8981\u4f7f\u7528\u7684\u6570\u636e\u3002 \u8fd9\u4e2a\u4f18\u5316\u5bf9\u4e8e\u5f02\u5e38\u548c\u786c\u4ef6\u4e2d\u65ad\u5219\u4f1a\u4ea7\u751f\u5de8\u5927\u95ee\u9898\uff0c\u4e00\u822c\u5185\u90e8\u90fd\u4f1a\u5173\u6389\u8fd9\u4e2a\u4f18\u5316\u3002 * https://os.phil-opp.com/red-zone/","title":"Red Zone\u95ee\u9898"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/basic/#_1","text":"\u5728\u5f00\u542f\u5206\u9875\u7684\u60c5\u51b5\u4e0b\uff0c\u5185\u6838\u5982\u4f55\u76f4\u63a5\u8bbf\u95ee\u7269\u7406\u5730\u5740\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u6709\u4e00\u5957\u673a\u5236\u5c06\u865a\u62df\u5730\u5740\u6620\u5c04\u5230\u5bf9\u5e94\u7684\u7269\u7406\u5730\u5740\u4e0a\uff0c\u6240\u4ee5\u5c31\u6709\u4e86\u4e00\u4e9b\u6280\u672f\u65b9\u6848\u3002 Identity Mapping \u865a\u62df\u5730\u5740\u548c\u7269\u7406\u5730\u5740\u4e00\u4e00\u6620\u5c04\uff0c\u5e26\u6765\u7684\u95ee\u9898\u5c31\u662f\u4f1a\u5bfc\u81f4\u5185\u5b58\u788e\u7247(\u5916\u90e8)\uff0c\u548c\u5206\u6bb5\u673a\u5236\u7684\u7f3a\u70b9\u662f\u4e00\u6837\u7684\uff0c\u5bfc\u81f4\u5728\u9700\u8981\u4e00\u7247\u8fde\u7eed\u5185\u5b58\u7684\u65f6\u5019\u65e0\u6cd5\u88ab\u6ee1\u8db3\u3002 \u800c\u4e14\u8d85\u8fc7frame\u8303\u56f4\u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4\u6ca1\u6709\u529e\u6cd5\u88ab\u6620\u5c04\u3002 Map at a Fixed Offset offset+\u865a\u62df\u5730\u5740\u7a7a\u95f4\u5730\u5740\u6765\u4e00\u4e00\u6620\u5c04\u5230frame\uff0c\u8fd9\u6837\u53ef\u4ee5\u907f\u514dIdentity Mapping\u56e0\u4e3a\u8d85\u8fc7frame\u8303\u56f4\u7684\u865a\u62df\u5730\u5740\u6ca1\u6709\u529e\u6cd5\u8fdb\u884c\u6620\u5c04\u7684\u95ee\u9898\uff0c\u4f46\u662f\u7f3a\u70b9\u5c31\u662f \u6bcf\u6b21\u521b\u5efa\u4e00\u4e2a\u9875\u8868\u5c31\u9700\u8981\u521b\u5efa\u8fd9\u6837\u7684\u4e00\u4e2a\u6620\u5c04\u5173\u7cfb\u3002\u800c\u4e14\u5b83\u4e0d\u5141\u8bb8\u8bbf\u95ee\u5176\u4ed6\u5730\u5740\u7a7a\u95f4\u7684\u9875\u8868\uff0c\u8fd9\u5728\u521b\u5efa\u65b0\u8fdb\u7a0b\u65f6\u5f88\u6709\u7528\u3002 Map the Complete Physical Memory \u5728Identify Maaping\u7684\u57fa\u7840\u4e0a\u6dfb\u52a0offset\u5c06\u865a\u62df\u5730\u5740\u6620\u5c04\u5230\u5168\u90e8\u7269\u7406\u5185\u5b58\u4e2d\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u53ef\u4ee5\u4f7f\u5f97\u5185\u6838\u53ef\u4ee5\u8bbf\u95ee\u4efb\u610f\u7684\u7269\u7406\u5185\u5b58\u3002\u4f46\u662f\u9700\u8981\u5206\u914d\u5f88\u591a\u9875\u8868 \u65e0\u8bba\u662f\u5df2\u7ecf\u6620\u5c04\u7684\u865a\u62df\u5730\u5740\u8fd8\u662f\u6ca1\u6709\u6620\u5c04\u7684\u3002\u8fd9\u4e9b\u9875\u8868\u4f1a\u5360\u7528\u6bd4\u8f83\u591a\u7684\u5185\u5b58\u3002\u4e0d\u8fc7\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7huge page\u7684\u65b9\u5f0f\u6765\u51cf\u5c11\u9700\u8981\u5b58\u50a8\u7684\u9875\u8868\u5927\u5c0f\u3002 Temporary Mapping Recursive Page Tables","title":"\u865a\u62df\u5730\u5740\u6620\u5c04"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/basic/#simdos","text":"SIMD(Single Instruction Multiple Data)\uff0c\u5355\u6761\u6307\u4ee4\u53ef\u4ee5\u64cd\u4f5c\u591a\u4e2a\u5b57\u8282\u7684\u6570\u636e\u3002\u76ee\u524dx86\u652f\u6301\u4e09\u79cdSIMD\u7684\u6807\u51c6: MMX Multi Media Extension \uff0c\u8fd9\u4e2a\u6807\u51c6\u5b9a\u4e49\u4e868\u4e2a64\u4f4d\u7684\u5bc4\u5b58\u5668\uff0c\u5206\u522b\u662fmm0\u3001mm1\u3001mm2....mm7 SSE Streaming SIMD Extensions\uff0c\u6dfb\u52a0\u4e86\u5341\u516d\u4e2a\u65b0\u7684\u5bc4\u5b58\u5668\uff0c\u5206\u522b\u662fxmm0...xmm15\uff0c\u6bcf\u4e00\u4e2a\u5bc4\u5b58\u5668\u90fd\u662f128\u4f4d AVX Advanced Vector Extensions\uff0c\u65b0\u589e\u4e8616\u4e2a256\u4f4d\u7684\u5bc4\u5b58\u5668 ymm0....ymm15 SIMD\u6307\u4ee4\u867d\u7136\u53ef\u4ee5\u63d0\u9ad8\u6027\u80fd\uff0c\u4f46\u662f\u5bf9\u4e8eOS\u6765\u8bf4\u4f1a\u5bfc\u81f4\u4e0a\u4e0b\u6587\u5207\u6362\u7684\u5f00\u9500\u53d8\u5927\uff0c\u6bcf\u4e00\u6b21\u4e0a\u4e0b\u6587\u5207\u6362\u6216\u8005\u786c\u4ef6\u4e2d\u65ad\u90fd\u9700\u8981\u8fdb\u884c\u4e0a\u4e0b\u6587\u7684\u4fdd\u5b58\u548c\u6062\u590d \u56e0\u4e3a\u4f7f\u7528\u4e86SIMD\u6307\u4ee4\u4f1a\u5bfc\u81f4\u6bcf\u6b21\u9700\u8981\u4fdd\u5b58\u7684\u5185\u5bb9\u66f4\u591a\uff0c\u5e26\u6765\u6027\u80fd\u7684\u4e0a\u7684\u635f\u8017\u3002\u6240\u4ee5\u5185\u6838\u5f00\u53d1\u4f1a\u5173\u95edSIMD\u3002\u4f46\u662f\u76ee\u524dx86_64\u67b6\u6784\u4e00\u822c\u90fd\u4f1a\u4f7f\u7528 SIMDl\u6765\u5b9e\u73b0\u6d6e\u70b9\u6570\u7684\u64cd\u4f5c\uff0c\u5982\u679c\u5173\u95edSIMD\u4f1a\u5bfc\u81f4\u9519\u8bef\u3002\u5e78\u8fd0\u7684\u662fLLVM\u7ed9\u6211\u4eec\u63d0\u4f9b\u4e86soft-float\u80fd\u529b\uff0c\u53ef\u4ee5\u901a\u8fc7\u8f6f\u4ef6\u51fd\u6570\u6765\u6a21\u62df\u6240\u6709\u7684\u6d6e\u70b9\u6570\u64cd\u4f5c\u3002","title":"SIMD\u548cOS"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/basic/#preserved-and-sscratch-registers","text":"preserved registers \u8fd9\u7c7b\u5bc4\u5b58\u5668\u5728\u8de8\u51fd\u6570\u8c03\u7528\u7684\u65f6\u5019\u5fc5\u987b\u4e0d\u80fd\u88ab\u6539\u53d8\uff0c\u56e0\u6b64\u88ab\u8c03\u7528\u8005\u9700\u8981\u4e00\u5f00\u59cb\u5c31\u4fdd\u5b58\u8fd9\u4e9b\u5bc4\u5b58\u5668\uff0c\u7136\u540e\u5728\u8c03\u7528\u7ed3\u675f\u7684\u65f6\u5019\u8fdb\u884c\u6062\u590d rbp, rbx, rsp, r12, r13, r14, r15 callee-saved \u88ab\u8c03\u7528\u8005\u4fdd\u5b58 scratch registers \u8fd9\u7c7b\u5bc4\u5b58\u5668\u5c5e\u4e8e\u4e34\u65f6\u5bc4\u5b58\u5668\uff0c\u88ab\u8c03\u7528\u8005\u5728\u4f7f\u7528\u4e0a\u662f\u6ca1\u6709\u9650\u5236\u7684\uff0c\u8c03\u7528\u8005\u5982\u679c\u5411\u4fdd\u6301\u8fd9\u4e9b\u5bc4\u5b58\u5668\u7684\u503c\u4e0d\u53d8\u5c31\u9700\u8981\u4fdd\u5b58\u8fd9\u4e9b\u5bc4\u5b58\u5668\u3002 \u6240\u4ee5\u8fd9\u7c7b\u5bc4\u5b58\u5668\u88ab\u79f0\u4e3a\u8c03\u7528\u8005\u4fdd\u5b58 rax, rcx, rdx, rsi, rdi, r8, r9, r10, r11 caller-saved \u8c03\u7528\u8005\u4fdd\u5b58","title":"Preserved and Sscratch Registers"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/basic/#interrupt-calling-convention-and-interrupt-stack-frame","text":"Interrupt Calling Convention \u4e2d\u65ad\u8c03\u7528\u548c\u51fd\u6570\u8c03\u7528\u5f88\u7c7b\u4f3c\uff0c\u90fd\u6709\u81ea\u5df1\u7684\u8c03\u7528\u89c4\u8303\uff0c\u56e0\u4e3a\u5f02\u5e38\u53ef\u4ee5\u53d1\u751f\u5728\u4efb\u4f55\u5730\u65b9\uff0c\u56e0\u6b64\u6211\u4eec\u6ca1\u529e\u6cd5\u63d0\u524d\u4fdd\u5b58\u9700\u8981\u7684\u5bc4\u5b58\u5668\uff0c\u56e0\u6b64 \u4e2d\u65ad\u8c03\u7528\u7684\u65f6\u5019\u9700\u8981\u4fdd\u5b58\u6240\u6709\u7684\u5bc4\u5b58\u5668\u3002\u4e2d\u65ad\u8c03\u7528\u7ed3\u675f\u540e\u6062\u590d\u6240\u6709\u4fdd\u5b58\u7684\u5bc4\u5b58\u5668\u3002\u4e3a\u4e86\u6548\u7387\uff0c\u5e76\u4e0d\u4f1a\u4fdd\u5b58\u6240\u6709\u7684\u5bc4\u5b58\u5668\uff0c\u800c\u8fd9\u662f\u4fdd\u5b58 \u88ab\u51fd\u6570\u8986\u76d6\u7684\u5bc4\u5b58\u5668\u3002 Interrupt Stack Frame Aligning the stack pointer Switching stacks Pushing the old stack pointer ushing and updating the RFLAGS register Pushing the instruction pointer Pushing an error code Invoking the interrupt handler","title":"Interrupt Calling Convention and Interrupt Stack Frame"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/basic/#vga-buffer","text":"","title":"VGA Buffer"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/basic/#ist-and-tss","text":"The Interrupt Stack Table (IST) is part of an old legacy structure called Task State Segment (TSS). The TSS used to hold various information (e.g. processor register state) about a task in 32-bit mode and was for example used for hardware context switching. However, hardware context switching is no longer supported in 64-bit mode and the format of the TSS changed completely. On x86_64, the TSS no longer holds any task specific information at all. Instead, it holds two stack tables (the IST is one of them). The only common field between the 32-bit and 64-bit TSS is the pointer to the I/O port permissions bitmap. The Privilege Stack Table is used by the CPU when the privilege level changes. For example, if an exception occurs while the CPU is in user mode (privilege level 3), the CPU normally switches to kernel mode (privilege level 0) before invoking the exception handler. In that case, the CPU would switch to the 0th stack in the Privilege Stack Table (since 0 is the target privilege level). We don't have any user mode programs yet, so we ignore this table for now.","title":"IST and TSS"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/basic/#the-interrupt-descriptor-table","text":"In order to catch and handle exceptions, we have to set up a so-called Interrupt Descriptor Table (IDT). In this table we can specify a handler function for each CPU exception. The hardware uses this table directly,","title":"The Interrupt Descriptor Table"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/basic/#the-global-descriptor-table","text":"The Global Descriptor Table (GDT) is a relict that was used for memory segmentation before paging became the de facto standard. It is still needed in 64-bit mode for various things such as kernel/user mode configuration or TSS loading. The GDT is a structure that contains the segments of the program. It was used on older architectures to isolate programs from each other, before paging became the standard. For more information about segmentation check out the equally named chapter of the free \u201cThree Easy Pieces\u201d book. While segmentation is no longer supported in 64-bit mode, the GDT still exists. It is mostly used for two things: Switching between kernel space and user space, and loading a TSS structure.","title":"The Global Descriptor Table"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/basic/#os_1","text":"\u6700\u521d\u7684OS\u53ea\u80fd\u8fd0\u884c\u572816\u4f4d\u76848088\u5904\u7406\u5668\u4e0a\uff0c\u53ea\u80fd\u8bbf\u95ee\u52301MB\u7684\u5730\u5740\u7a7a\u95f4\u4ece0x00000000 ~ 0x000FFFFF\uff0c\u524d640KB\u88ab\u79f0\u4e3a\u4f4e\u5185\u5b58\u533a\uff0c\u662fOS\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u7684\u5185\u5b58\u3002 \u5269\u4e0b\u7684384KB\u4ece0x000A0000 ~ 0x000FFFFF\u5219\u662f\u4fdd\u7559\u7684\u7528\u4e8e\u8bbf\u95ee\u786c\u4ef6\u7684\u3002\u5176\u4e2dBIOS\u5360\u752864KB\u4ece0x000F0000 ~ 0X000FFFF\u3001\u8fd8\u6709VGA\u5360\u75280X000A0000 ~ 0x000C0000 \u6b64\u540eIntel\u7a81\u78341MB\u5185\u5b58\u9650\u5236\u540e\uff0c\u4e3a\u4e86\u5411\u540e\u517c\u5bb9\u4ecd\u7136\u4fdd\u6301\u8fd9\u6837\u7684\u5185\u5b58\u5e03\u5c40\uff0c\u8fd9\u6837\u5c31\u4f7f\u5f97\u5185\u5b58\u4e2d\u5b58\u5728\u4e00\u4e2ahole\uff0c0x000A0000~0x00100000\u3002\u5185\u5b58\u5219\u88ab\u5206\u6210\u4e86\u4e24\u4e2a\u90e8\u5206\uff0c\u7b2c\u4e00\u4e2a\u90e8\u5206\u5c31\u662f\u4ece0x00000000\u5230 0x000A0000\u8fd9640KB\u88ab\u79f0\u4e3a\u4f4e\u5185\u5b58\u533a\uff0c\u53e6\u5916\u4e00\u4e2a\u90e8\u5206\u5c31\u662f\u4ece0x00100000\u5f00\u59cb\uff0c\u88ab\u79f0\u4e3aextended memory\u3002\u6b64\u5916BIOS\u901a\u8fc7\u4f1a\u4fdd\u755932\u4f4d\u7684\u7269\u7406\u5730\u5740\u7a7a\u95f4\u7684\u9876\u90e8\u5185\u5b58\u7a7a\u95f4\uff0c\u7528\u4e8e\u7ed932\u4f4d\u7684PCI\u8bbe\u5907\u4f7f\u7528\u3002 \u542f\u52a8\u540e\uff0c\u7b2c\u4e00\u6761\u6307\u5b9a\u7684\u4f4d\u7f6e\u662f0x000ffff0\uff0c\u4e5f\u5c31\u662f\u9876\u90e8\u768416\u4e2a\u5b57\u8282\u7684\u4f4d\u7f6e(\u4e3a\u4ec0\u4e48\u662f\u8fd9\u91cc)\uff0c\u7b2c\u4e00\u6761\u6307\u4ee4\u662f\u4e00\u4e2aljmp\u7684\u6307\u4ee4\uff0c\u8df3\u8f6c\u52300x000fe05b\u7684\u4f4d\u7f6e\uff0c\u4e5f\u662f\u5c5e\u4e8e\u9876\u90e8\u768464KB\u7684\u8303\u56f4\u5185\uff0c\u8fd9\u4e2a\u4f4d\u7f6e\u662f\u56fa\u5b9a\u7684 \u4e5f\u5c31\u662f\u8bf4\uff0cBIOS\u771f\u6b63\u5f00\u59cb\u7684\u5730\u65b9\u5c31\u662f0xfe05b\u5904\u3002 BIOS\u6267\u884c\u4e86\u4e00\u5806\u81ea\u68c0\u64cd\u4f5c\u540e\uff0c\u627e\u5230\u542f\u52a8\u8bbe\u5907\uff0c\u7136\u540e\u8f7d\u5165\u542f\u52a8\u8bbe\u5907\u7684\u524d512\u5b57\u8282\u52300x7c00\u5904\uff0c\u7136\u540e\u5f00\u59cb\u6267\u884c\uff0c\u8fd9\u4e2a\u65f6\u5019\u63a7\u5236\u6743\u5c31\u8f6c\u4ea4\u7ed9bootloader\u4e86\uff0cbootload\u4e3b\u8981\u505a\u4e24\u4ef6\u4e8b: \u5b9e\u6a21\u5f0f\u523032\u4f4d\u4fdd\u62a4\u6a21\u5f0f\u7684\u5207\u6362 \u4ece\u78c1\u76d8\u8bfb\u53d6\u5185\u6838 \u5982\u4f55\u4ece\u5b9e\u6a21\u5f0f\u5207\u6362\u5230\u4fdd\u62a4\u6a21\u5f0f \u6253\u5f00A20\u5730\u5740\u7ebf\u540e \u52a0\u8f7dgdt CR0\u5bc4\u5b58\u5668\u7684PE\u4f4d\u7f6e\u8bbe\u7f6e\u4e3a1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 # Enable A20: # For backwards compatibility with the earliest PCs, physical # address line 20 is tied low, so that addresses higher than # 1MB wrap around to zero by default. This code undoes this. seta20 .1 : inb $0x64 , % al # Wait for not busy testb $0x2 , % al jnz seta20 .1 movb $0xd1 , % al # 0xd1 -> port 0x64 outb % al , $0x64 seta20 .2 : inb $0x64 , % al # Wait for not busy testb $0x2 , % al jnz seta20 .2 movb $0xdf , % al # 0xdf -> port 0x60 outb % al , $0x60 lgdt gdtdesc movl % cr0 , % eax orl $CR0_PE_ON , % eax movl % eax , % cr0 Bootloader\u5982\u4f55\u77e5\u9053\u5185\u6838\u5927\u5c0f\uff0c\u8bfb\u53d6\u6307\u5b9a\u7684\u6247\u533a\u628a\u5185\u6838\u52a0\u8f7d\u5230\u5bf9\u5e94\u7684\u5730\u65b9? \u8bfb\u53d6ELF\u5934\u90e8\u4fe1\u606f\uff0c\u901a\u8fc7ELF\u5934\u77e5\u9053\u8fd9\u4e2a\u7a0b\u5e8f\u5305\u542b\u591a\u5c11\u5b57\u8282\u5927\u5c0f\u7684\u5185\u5bb9\uff0cELF\u5934\u4e5f\u6307\u5b9a\u4e86\u5165\u53e3\u51fd\u6570\u7684\u5730\u5740\uff0c\u8f7d\u5165\u5730\u5740\u3001\u94fe\u63a5\u5730\u5740\u7b49\u4fe1\u606f\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 struct Proghdr * ph , * eph ; // read 1st page off disk readseg (( uint32_t ) ELFHDR , SECTSIZE * 8 , 0 ); // is this a valid ELF? if ( ELFHDR -> e_magic != ELF_MAGIC ) goto bad ; // load each program segment (ignores ph flags) ph = ( struct Proghdr * ) (( uint8_t * ) ELFHDR + ELFHDR -> e_phoff ); eph = ph + ELFHDR -> e_phnum ; for (; ph < eph ; ph ++ ) // p_pa is the load address of this segment (as well // as the physical address) readseg ( ph -> p_pa , ph -> p_memsz , ph -> p_offset ); // call the entry point from the ELF header // note: does not return! (( void ( * )( void )) ( ELFHDR -> e_entry ))(); ELF\u6709\u4e00\u4e2a\u56fa\u5b9a\u76844\u5b57\u8282\u7684header\uff0c\u8fd8\u6709\u53d8\u957f\u7684program header\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 tianqian - zyf @ tianqia - zyf : ~/ 6.828 / lab$ objdump - h obj / kern / kernel obj / kern / kernel : file format elf32 - i386 Sections : Idx Name Size VMA LMA File off Algn 0 . text 000019e9 f0100000 00100000 00001000 2 ** 4 CONTENTS , ALLOC , LOAD , READONLY , CODE 1 . rodata 000006 c0 f0101a00 00101 a00 00002 a00 2 ** 5 CONTENTS , ALLOC , LOAD , READONLY , DATA 2 . stab 00003 b95 f01020c0 001020 c0 000030 c0 2 ** 2 CONTENTS , ALLOC , LOAD , READONLY , DATA 3 . stabstr 00001 948 f0105c55 00105 c55 00006 c55 2 ** 0 CONTENTS , ALLOC , LOAD , READONLY , DATA 4 . data 0000 9300 f0108000 0010 8000 0000 9000 2 ** 12 CONTENTS , ALLOC , LOAD , DATA 5 . got 0000000 8 f0111300 00111300 00012300 2 ** 2 CONTENTS , ALLOC , LOAD , DATA 6 . got . plt 0000000 c f0111308 0011130 8 0001230 8 2 ** 2 CONTENTS , ALLOC , LOAD , DATA 7 . data . rel . local 00001000 f0112000 00112000 00013000 2 ** 12 CONTENTS , ALLOC , LOAD , DATA 8 . data . rel . ro . local 00000044 f0113000 00113000 00014000 2 ** 2 CONTENTS , ALLOC , LOAD , DATA 9 . bss 0000064 8 f0113060 00113060 00014060 2 ** 5 CONTENTS , ALLOC , LOAD , DATA 10 . comment 0000002 a 00000000 00000000 000146 a8 2 ** 0 CONTENTS , READONLY \u8f7d\u5165\u5185\u6838\u540e\uff0c\u5185\u6838\u5f00\u59cb\u8fdb\u884c\u4e00\u7cfb\u5217\u7684\u521d\u59cb\u5316\uff0c\u6700\u91cd\u8981\u7684\u5c31\u662f\u5f00\u542f\u865a\u62df\u5730\u5740\u3002\u5728\u6b64\u4e4b\u524d\u5185\u6838\u4e00\u76f4\u8fd0\u884c\u5728\u7269\u7406\u5730\u5740\u4e0b\uff0c\u5f00\u542f\u865a\u62df\u5730\u5740\u9700\u8981\u5f00\u542f\u5206\u9875\uff0c\u76f8\u5173\u4ee3\u7801\u5982\u4e0b: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # We haven't set up virtual memory yet, so we're running from # the physical address the boot loader loaded the kernel at: 1MB # (plus a few bytes). However, the C code is linked to run at # KERNBASE+1MB. Hence, we set up a trivial page directory that # translates virtual addresses [KERNBASE, KERNBASE+4MB) to # physical addresses [0, 4MB). This 4MB region will be # sufficient until we set up our real page table in mem_init # in lab 2. # Load the physical address of entry_pgdir into cr3. entry_pgdir # is defined in entrypgdir.c. movl $ ( RELOC ( entry_pgdir )), % eax movl % eax , % cr3 # Turn on paging. movl % cr0 , % eax orl $ ( CR0_PE | CR0_PG | CR0_WP ), % eax movl % eax , % cr0","title":"OS\u57fa\u7840"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/basic/#_2","text":"\u547d\u4ee4\u5f0f\u7f16\u7a0b(Imperative)\u3001\u58f0\u660e\u5f0f\u7f16\u7a0b(Declarative)\u3001\u51fd\u6570\u5f0f\u7f16\u7a0b(Functional) \u547d\u4ee4\u5f0f\u7f16\u7a0b: \u4e00\u6b65\u4e00\u6b65\u544a\u8bc9\u8ba1\u7b97\u673a\u505a\u505a\u4ec0\u4e48\u3001\u518d\u505a\u4ec0\u4e48 \u58f0\u660e\u5f0f\u7f16\u7a0b: \u544a\u8bc9\u8ba1\u7b97\u673a\u5e94\u8be5\u505a\u4ec0\u4e48\uff0c\u4f46\u662f\u4e0d\u6307\u5b9a\u5177\u4f53\u8981\u600e\u4e48\u505a \u51fd\u6570\u5f0f\u7f16\u7a0b: \u548c\u58f0\u660e\u5f0f\u7f16\u7a0b\u7c7b\u4f3c\uff0c\u4f46\u662f\u4ed6\u5f0f\u901a\u8fc7\u4e00\u4e2a\u4e2a\u51fd\u6570\u4e32\u8fde\u8d77\u6765\u7684\u3002","title":"\u7f16\u7a0b\u8303\u5f0f"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/basic/#_3","text":"","title":"\u5982\u4f55\u83b7\u53d6\u8c03\u7528\u94fe?"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/basic/#_4","text":"ARP\u548cGARP ARP\u534f\u8bae\u5de5\u4f5c\u5728\u4e8c\u5c42\uff0c\u7528\u4e8e\u83b7\u53d6IP\u5730\u5740\u5bf9\u5e94\u7684mac\u5730\u5740\uff0c\u62a5\u6587\u7684\u683c\u5f0f\u4e3a who has [IP_B], tell [IP_A] \uff0c\u5305\u542b\u4e86\u8981\u67e5\u8be2\u7684IP\u5730\u5740\uff0c\u4ee5\u53ca\u81ea\u5df1\u7684IP\u5730\u5740\u548cMac\u5730\u5740\u4fe1\u606f \u4f46\u662f\u5982\u679c\u8981\u67e5\u8be2\u7684\u5730\u5740\u5c31\u662f\u81ea\u5df1\u7684\u5730\u5740\uff0c\u8fd9\u4e2a\u65f6\u5019\u79f0\u4e3a\u662fGARP(Gratuitous ARP)\uff0c\u4e5f\u5c31\u662f\u514d\u8d39\u7684ARP\uff0c\u8fd9\u79cd\u62a5\u6587\u662f\u5141\u8bb8\u7684\uff0c\u6709\u4e24\u4e2a\u4f5c\u7528\u3002 \u7528\u6765\u63a2\u6d4bIP\u51b2\u7a81\u7684\u95ee\u9898\uff0c\u5982\u679c\u771f\u7684\u6709\u4eba\u54cd\u5e94\u8fd9\u4e2a\u62a5\u6587\uff0c\u8bf4\u660e\u5c40\u57df\u7f51\u4e2d\u6709\u548c\u81ea\u5df1\u76f8\u540cIP\u7684\u673a\u5668\u5b58\u5728 \u7528\u6765\u66f4\u65b0\u81ea\u5df1\u7684Mac\u5730\u5740\u4fe1\u606f\uff0c\u5f53\u81ea\u5df1\u7684Mac\u5730\u5740\u53d1\u751f\u53d8\u5316\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u901a\u8fc7\u8fd9\u79cd\u62a5\u6587\u4e3b\u52a8\u901a\u77e5\u7f51\u7edc\u4e2d\u7684\u5176\u4ed6\u4e3b\u673a\u66f4\u65b0\u81ea\u5df1\u7684ARP\u7f13\u5b58","title":"\u7f51\u7edc\u57fa\u7840"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/basic/#debugercompilerelf","text":"https://grafana.com/grafana/dashboards/7645 \u901a\u8fc7\u7f16\u8bd1\u5668\u7684 -g \u53c2\u6570\u53ef\u4ee5\u4ea7\u751fdebug\u4fe1\u606f\uff0c\u6700\u4e3a\u91cd\u8981\u7684\u662f debug_line \u3001 debug_info \u4e24\u7c7b\uff0c\u524d\u8005\u7528\u6765\u63d0\u4f9b\u884c\u53f7\u4fe1\u606f\uff0c\u540e\u8005\u5c31\u662f\u8457\u540d\u7684 DWARF \u63d0\u4f9b\u8c03\u8bd5\u4fe1\u606f\u3002 debug_line \u7684\u683c\u5f0f\u5982\u4e0b: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 .debug_line: line number info for a single cu Source lines (from CU-DIE at .debug_info offset 0x0000000b): NS new statement, BB new basic block, ET end of text sequence PE prologue end, EB epilogue begin IS=val ISA number, DI=val discriminator value <pc> [lno,col] NS BB ET PE EB IS= DI= uri: \"filepath\" 0x004004c0 [ 1, 0] NS uri: \"/home/tianqian-zyf/debuger/first.cc\" 0x004004cb [ 2,10] NS PE 0x004004d3 [ 3,10] NS 0x004004db [ 4,14] NS 0x004004df [ 4,16] 0x004004e3 [ 4,10] 0x004004e7 [ 5, 7] NS 0x004004ef [ 6, 5] NS 0x004004f6 [ 6, 5] NS ET \u5305\u542b\u4e86\u4e00\u4e9b\u8bf4\u660e\u4fe1\u606f\uff0c\u5df2\u7ecf\u5730\u5740\u548c\u884c\u53f7\u7684\u5bf9\u5e94\u5173\u7cfb: NS\u8868\u793a\u4e00\u4e2a\u65b0\u7684\u8bed\u53e5 BB \u8868\u793a\u4e00\u4e2a\u57fa\u672c\u7684block ET \u8868\u793a\u4e00\u4e2a\u7f16\u8bd1\u5355\u5143\u7684\u7ed3\u675f PE \u662f\u4e00\u4e2a\u51fd\u6570\u7684\u5f00\u59cb dwarfdump","title":"Debuger\u3001Compiler\u3001ELF"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/basic/Reverse/","text":"\u9006\u5411\u548c\u6c47\u7f16\u57fa\u7840 \u6808\u662f\u4ece\u9ad8\u5730\u5740\u5411\u4f4e\u5730\u5740\u751f\u957f\u7684\uff0c\u6808\u5e95\u5728\u9ad8\u5730\u5740\uff0c\u6808\u9876\u5728\u4f4e\u5730\u5740\uff0crsp\u59cb\u7ec8\u6307\u5411\u6808\u9876\uff0c\u6bcf\u6b21push\u7684\u65f6\u5019\u90fd\u4f1a\u5bfc\u81f4rsp\u7684\u5730\u5740\u51cf\u5c11\u3002 GCC\u628a\u6bcf\u4e00\u6b21\u7684\u51fd\u6570\u8c03\u7528\u90fd\u8f6c\u6362\u4e3a\u4e00\u4e2a\u6808\u5e27\uff0c\u7b80\u5355\u6765\u8bf4\uff0c\u6bcf\u4e00\u4e2a\u6808\u5e27\u5bf9\u5e94\u4e00\u4e2a\u51fd\u6570\u3002\u6808\u5e27\u53ef\u4ee5\u7406\u89e3\u6210\u6808\u4e2d\u7684\u4e00\u5757\u8fde\u7eed\u533a\u57df\u3002 \u800crbp\u5bc4\u5b58\u5668\u5219\u662f\u6307\u5411\u8fd9\u5757\u6808\u5e27\u7684\u542f\u59cb\u4f4d\u7f6e\uff0c 1 2 3 pushq %rbp movq %rsp, %rbp subq $16, %rsp \u5728\u6bcf\u4e00\u4e2a\u51fd\u6570\u8c03\u7528\u7684\u5f00\u59cb\u5904\u6211\u4eec\u90fd\u4f1a\u53d1\u73b0\u4e0a\u9762\u7c7b\u4f3c\u7684\u4ee3\u7801\uff0c\u5c06rbp\u653e\u5165\u5806\u6808\u4e2d\uff0c\u7136\u540e\u7528rbp\u4fdd\u5b58\u6700\u65b0\u7684\u6808\u9876\u5730\u5740\uff0c\u53ef\u4ee5\u7406\u89e3rbp\u5176\u5b9e\u662f\u5bf9 Linux\u5bc4\u5b58\u5668\u4f20\u9012\u53c2\u6570\u987a\u5e8f %rdi\u3001%rsi\u3001%rdx\uff0c%rcx\u3001%r8\u3001%r9 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include <stdio.h> int func1 ( int args1 , int args2 , int args3 ) { int ret = args1 + args2 + args3 ; return ret ; } int main () { int args1 = 10 ; int args2 = sizeof ( int ); int args3 = sizeof ( char ); int ret = func1 ( args1 , args2 , args3 ); printf ( \"%d \\n \" , ret ); return 0 ; } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 func1: pushq %rbp ; \u65b0\u7684\u6808\u5e27\uff0c\u628a\u4e0a\u4e00\u4e2a\u6808\u5e27\u7684rbp\u5bc4\u5b58\u5668\u4fdd\u5b58\u8d77\u6765\uff0c\u65b0\u7684\u6808\u5e27\u8981\u4f7f\u7528rbp\u6765\u8bbf\u95ee\u5806\u6808 movq %rsp , %rbp ; \u4fdd\u5b58\u65b0\u7684\u6808\u9876 movl %edi , -20 ( %rbp ) ; \u83b7\u53d6\u53c2\u6570\uff0c\u5e76\u4fdd\u5b58\u5728\u5806\u6808\u4e0a movl %esi , -24 ( %rbp ) ; \u7ee7\u7eed\u4fdd\u5b58\u5728\u5806\u6808\u4e0a movl %edx , -28 ( %rbp ) ; \u7ee7\u7eed\u4fdd\u5b58\u5728\u5806\u6808\u4e0a movl -20 ( %rbp ), %edx ; movl -24 ( %rbp ), %eax addl %eax , %edx ; \u5b9e\u73b0\u52a0\u6cd5 movl -28 ( %rbp ), %eax addl %edx , %eax movl %eax , -4 ( %rbp ) ; \u8fd4\u56de\u56de\u53bb movl -4 ( %rbp ), %eax popq %rbp ret main: // \u4fdd\u5b58rbp\u5bc4\u5b58\u5668\uff0c\u7136\u540e\u4f7f\u7528rbp\u4fdd\u5b58\u65b0\u7684\u6808\u9876\u5bc4\u5b58\u5668\uff0c pushq %rbp movq %rsp , %rbp // \u5f00\u8f9f\u4e00\u6bb5\u6808\u7a7a\u95f4\uff0c\u7528\u6765\u4fdd\u5b58\u5c40\u90e8\u53d8\u91cf subq $16 , %rsp // \u901a\u8fc7rbp\u6765\u5b9a\u4f4d\u5230\u5bf9\u5e94\u6808\u7a7a\u95f4 movl $10 , -4 ( %rbp ) ; args1\uff0c\u5b58\u653e10 movl $4 , -8 ( %rbp ) ; args2, \u5b58\u653e4 movl $1 , -12 ( %rbp ) ; args3, \u5b58\u653e1 movl -12 ( %rbp ), %edx // \u7b2c\u4e09\u4e2a\u53c2\u6570 movl -8 ( %rbp ), %ecx movl -4 ( %rbp ), %eax movl %ecx , %esi // \u7b2c\u4e8c\u4e2a\u53c2\u6570 movl %eax , %edi // \u7b2c\u4e00\u4e2a\u53c2\u6570 call func1 // \u51fd\u6570\u8c03\u7528 movl %eax , -16 ( %rbp ) movl -16 ( %rbp ), %eax movl %eax , %esi movl $.LC0 , %edi movl $0 , %eax call printf movl $0 , %eax leave ret \u57fa\u672c\u6c47\u7f16\u5206\u6790 1 2 3 4 5 6 7 8 00000000000006 aa < main > : 6 aa: 48 83 ec 08 sub $0x8 , %rsp 6 ae: 83 ff 02 cmp $0x2 , %edi 6 b1: 75 68 jne 71b < main + 0x71 > // edi\u4ee3\u8868\u7b2c\u4e00\u4e2a\u53c2\u6570\u3001(rdi\u3001rsi\u3001rdx\u3001rcx\u3001r8\u3001r9\uff0c\u8d85\u51fa6\u7684\u53c2\u6570\u7684\u4f7f\u7528\u5806\u6808\u6765\u4f20\u9012\u53c2\u6570\uff0c\u901a\u8fc7rsp\u6765\u4f20\u9012) if ( argc ! = 2 ) { ..... } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 71 b: 48 8 d 3 d b2 00 00 00 lea 0xb2 ( %rip ), %rdi # 7d4 <_IO_stdin_used+0x4> 722: e8 49 fe ff ff callq 570 < puts@plt > 727: b8 ff ff ff ff mov $0xffffffff , %eax 72 c: eb e8 jmp 716 < main + 0x6c > 716: 48 83 c4 08 add $0x8 , %rsp 71 a: c3 retq // lea \u5c06rip\u5bc4\u5b58\u5668\u7684\u503c\u52a0\u4e0a0xb2\uff0c\u653e\u5230rdi\u5bc4\u5b58\u5668\u4e2d // rip\u5bc4\u5b58\u5668\u7684\u503c\u7b49\u4e8e\u4e0b\u4e00\u6761\u6307\u4ee4\u7684\u5730\u5740\uff0c\u4e5f\u5c31\u662f0x722 // \u901a\u8fc7xxd -s \u5730\u5740 -l \u957f\u5ea6 \u4e8c\u8fdb\u5236\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u627e\u5230\u6307\u5b9a\u5730\u5740\u7684ASCII\u7801\u5185\u5bb9 tianqian-zyf@tianqia-zyf: ~/ crackmes$ xxd - s 0x7d4 - l 0x40 crackme02.64 000007 d4: 4 e65 6564 2065 7861 6374 6 c79 206 f 6 e65 Need exactly one 000007 e4: 2061 7267 756 d 656 e 742 e 004 e 6 f2c 2025 argument..No , % 000007 f4: 7320 6973 206 e 6 f74 2063 6 f72 7265 6374 s is not correct 00000804: 2 e0a 0070 6173 7377 6 f72 6431 0059 6573 ...password1.Yes // rax\u5bc4\u5b58\u5668\u5b58\u653e\u8fd4\u56de\u503c\uff0c\u8fd9\u91cc\u662f\u6709\u7b26\u53f7\u7c7b\u578b\u7684-1 // mov $0xffffffff,%eax\uff0c if ( argc ! = 2 ) { puts ( \" Need exactly one argument \" ) ; return -1 ; } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 6 b3: 48 8 b 56 08 mov 0x8 ( %rsi ), %rdx 6 b7: 0 f b6 02 movzbl ( %rdx ), %eax // al\u5bc4\u5b58\u5668\u4f4e8\u4f4d\u8fdb\u884c\u76f8\u4e0e\uff0c\u770bal\u662f\u5426\u662f0 6 ba: 84 c0 test %al , %al 6 bc: 74 3 d je 6fb < main + 0x51 > // %rip\u7684\u5730\u5740\u4e3a 0x702 // \u7b2c\u4e8c\u4e2a\u53c2\u6570rsi\uff0c\u662fformat string 6 fb: 48 8 d 35 0 f 01 00 00 lea 0x10f ( %rip ), %rsi # 811 <_IO_stdin_used+0x41> // \u7b2c\u4e00\u4e2a\u53c2\u6570rdi\u7684\u503c\u662f1\uff0c\u8868\u660e\u6709\u4e00\u4e2a\u53c2\u6570 // \u7b2c\u4e09\u4e2a\u53c2\u6570\u662frdx // \u8fd9\u91ccmov $0x0,%eax\uff0c\u8868\u793a\u53ef\u53d8\u53c2\u6570\u4f7f\u7528xmm\u5bc4\u5b58\u5668\u7684\u4e2a\u6570 (xmm\u5bc4\u5b58\u5668\u662f\u7528\u6765\u5b58\u653e\u6d6e\u70b9\u6570\u7684\uff0c\u5982\u679c\u53ef\u53d8\u53c2\u6570\u4e2d\u6709\u6d6e\u70b9\u6570\u4e00\u822c\u5c31\u662f\u901a\u8fc7xmm\u5bc4\u5b58\u5668\u6765\u5b58\u653e) 702: bf 01 00 00 00 mov $0x1 , %edi 707: b8 00 00 00 00 mov $0x0 , %eax 70 c: e8 6 f fe ff ff callq 580 < __printf_chk@plt > 711: b8 00 00 00 00 mov $0x0 , %eax 716: 48 83 c4 08 add $0x8 , %rsp 71 a: c3 retq tianqian-zyf@tianqia-zyf: ~/ crackmes$ xxd - s 0x811 - l 0x40 crackme02.64 00000811: 5965 732 c 2025 7320 6973 2063 6 f72 7265 Yes , %s is corre 00000821: 6374 210 a 0000 0001 1 b03 3 b3c 0000 0006 ct !....... ;<.... 00000831: 0000 0038 fdff ff88 0000 0068 fdff ffb0 ...8.......h.... 00000841: 0000 0078 fdff ff58 0000 0082 feff ffc8 ...x...X........ // \u7b2c\u4e00\u4e2a\u53c2\u6570rdi\u503c\u662f1\uff0c\u8868\u660e\u6709\u4e00\u4e2a\u53c2\u6570\uff0c \u7b2c\u4e8c\u4e2a\u53c2\u6570rsi\u662fformat string\uff0c\u7b2c\u4e09\u4e2a\u53c2\u6570\u662frdx\uff0c\u91cc\u9762\u5b58\u653e\u4e86argv[1] if ( argv [ 1 ][ 0 ] == 0 ) { printf ( \" Yes , %s is correct ! \" , argv [ 1 ]) ; return 0 ; } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 6be: 3c 6f cmp $0x6f,%al 6c0: 75 6c jne 72e <main+0x84> // rip\u5bc4\u5b58\u5668\u7684\u5730\u5740\u662f0x735 72e: 48 8d 35 ba 00 00 00 lea 0xba(%rip),%rsi # 7ef <_IO_stdin_used+0x1f> 735: bf 01 00 00 00 mov $0x1,%edi 73a: b8 00 00 00 00 mov $0x0,%eax 73f: e8 3c fe ff ff callq 580 <__printf_chk@plt> 744: b8 01 00 00 00 mov $0x1,%eax 749: eb cb jmp 716 <main+0x6c> 716: 48 83 c4 08 add $0x8,%rsp 71a: c3 retq tianqian-zyf@tianqia-zyf:~/crackmes$ xxd -s 0x7ef -l 0x40 crackme02.64 000007ef: 4e6f 2c20 2573 2069 7320 6e6f 7420 636f No, %s is not co 000007ff: 7272 6563 742e 0a00 7061 7373 776f 7264 rrect...password 0000080f: 3100 5965 732c 2025 7320 6973 2063 6f72 1.Yes, %s is cor 0000081f: 7265 6374 210a 0000 0001 1b03 3b3c 0000 rect!.......;<.. if (argv[1][0] != 0x6f) { printf(\"No, %s is not correct\", argv[1]); return 1; } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 6 c2: be 01 00 00 00 mov $0x1 , %esi 6 c7: b8 61 00 00 00 mov $0x61 , %eax 6 cc: b9 01 00 00 00 mov $0x1 , %ecx 6 d1: 48 8 d 3 d 2 f 01 00 00 lea 0x12f ( %rip ), %rdi # 807 <_IO_stdin_used+0x37> // argv[1] + 1 * 1 > argv[1][1] 6 d8: 0 f b6 0 c 0 a movzbl ( %rdx , %rcx , 1 ), %ecx 6 dc: 84 c9 test %cl , %cl 6 de: 74 1 b je 6fb < main + 0x51 > // %rip\u7684\u5730\u5740\u4e3a 0x702 6 fb: 48 8 d 35 0 f 01 00 00 lea 0x10f ( %rip ), %rsi # 811 <_IO_stdin_used+0x41> 702: bf 01 00 00 00 mov $0x1 , %edi 707: b8 00 00 00 00 mov $0x0 , %eax 70 c: e8 6 f fe ff ff callq 580 < __printf_chk@plt > 711: b8 00 00 00 00 mov $0x0 , %eax 716: 48 83 c4 08 add $0x8 , %rsp 71 a: c3 retq if ( argv [ 1 ][ 1 ] == 0 ) { printf ( \" Yes , %s is correct ! \" , argv [ 1 ]) ; return 0 ; } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 6 e0: 0 f be c0 movsbl %al , %eax 6 e3: 83 e8 01 sub $0x1 , %eax 6 e6: 0 f be c9 movsbl %cl , %ecx 6 e9: 39 c8 cmp %ecx , %eax 6 eb: 75 41 jne 72e < main + 0x84 > 72 e: 48 8 d 35 ba 00 00 00 lea 0xba ( %rip ), %rsi # 7ef <_IO_stdin_used+0x1f> 735: bf 01 00 00 00 mov $0x1 , %edi 73 a: b8 00 00 00 00 mov $0x0 , %eax 73 f: e8 3 c fe ff ff callq 580 < __printf_chk@plt > 744: b8 01 00 00 00 mov $0x1 , %eax 749: eb cb jmp 716 < main + 0x6c > 716: 48 83 c4 08 add $0x8 , %rsp 71 a: c3 retq if ( argv [ 1 ][ 1 ] ! = 0x60 ) { printf ( \" No , %s is not correct \" , argv [ 1 ]) ; return 1 ; } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 6 ed: 83 c6 01 add $0x1 , %esi 6 f0: 48 63 ce movslq %esi , %rcx 6 f3: 0 f b6 04 0 f movzbl ( %rdi , %rcx , 1 ), %eax 6 f7: 84 c0 test %al , %al 6 f9: 75 dd jne 6d8 < main + 0x2e > 6 d8: 0 f b6 0 c 0 a movzbl ( %rdx , %rcx , 1 ), %ecx 6 dc: 84 c9 test %cl , %cl 6 de: 74 1 b je 6fb < main + 0x51 > // %rip\u7684\u5730\u5740\u4e3a 0x702 6 fb: 48 8 d 35 0 f 01 00 00 lea 0x10f ( %rip ), %rsi # 811 <_IO_stdin_used+0x41> 702: bf 01 00 00 00 mov $0x1 , %edi 707: b8 00 00 00 00 mov $0x0 , %eax 70 c: e8 6 f fe ff ff callq 580 < __printf_chk@plt > 711: b8 00 00 00 00 mov $0x0 , %eax 716: 48 83 c4 08 add $0x8 , %rsp 71 a: c3 retq","title":"Reverse"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/basic/Reverse/#_1","text":"\u6808\u662f\u4ece\u9ad8\u5730\u5740\u5411\u4f4e\u5730\u5740\u751f\u957f\u7684\uff0c\u6808\u5e95\u5728\u9ad8\u5730\u5740\uff0c\u6808\u9876\u5728\u4f4e\u5730\u5740\uff0crsp\u59cb\u7ec8\u6307\u5411\u6808\u9876\uff0c\u6bcf\u6b21push\u7684\u65f6\u5019\u90fd\u4f1a\u5bfc\u81f4rsp\u7684\u5730\u5740\u51cf\u5c11\u3002 GCC\u628a\u6bcf\u4e00\u6b21\u7684\u51fd\u6570\u8c03\u7528\u90fd\u8f6c\u6362\u4e3a\u4e00\u4e2a\u6808\u5e27\uff0c\u7b80\u5355\u6765\u8bf4\uff0c\u6bcf\u4e00\u4e2a\u6808\u5e27\u5bf9\u5e94\u4e00\u4e2a\u51fd\u6570\u3002\u6808\u5e27\u53ef\u4ee5\u7406\u89e3\u6210\u6808\u4e2d\u7684\u4e00\u5757\u8fde\u7eed\u533a\u57df\u3002 \u800crbp\u5bc4\u5b58\u5668\u5219\u662f\u6307\u5411\u8fd9\u5757\u6808\u5e27\u7684\u542f\u59cb\u4f4d\u7f6e\uff0c 1 2 3 pushq %rbp movq %rsp, %rbp subq $16, %rsp \u5728\u6bcf\u4e00\u4e2a\u51fd\u6570\u8c03\u7528\u7684\u5f00\u59cb\u5904\u6211\u4eec\u90fd\u4f1a\u53d1\u73b0\u4e0a\u9762\u7c7b\u4f3c\u7684\u4ee3\u7801\uff0c\u5c06rbp\u653e\u5165\u5806\u6808\u4e2d\uff0c\u7136\u540e\u7528rbp\u4fdd\u5b58\u6700\u65b0\u7684\u6808\u9876\u5730\u5740\uff0c\u53ef\u4ee5\u7406\u89e3rbp\u5176\u5b9e\u662f\u5bf9 Linux\u5bc4\u5b58\u5668\u4f20\u9012\u53c2\u6570\u987a\u5e8f %rdi\u3001%rsi\u3001%rdx\uff0c%rcx\u3001%r8\u3001%r9 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include <stdio.h> int func1 ( int args1 , int args2 , int args3 ) { int ret = args1 + args2 + args3 ; return ret ; } int main () { int args1 = 10 ; int args2 = sizeof ( int ); int args3 = sizeof ( char ); int ret = func1 ( args1 , args2 , args3 ); printf ( \"%d \\n \" , ret ); return 0 ; } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 func1: pushq %rbp ; \u65b0\u7684\u6808\u5e27\uff0c\u628a\u4e0a\u4e00\u4e2a\u6808\u5e27\u7684rbp\u5bc4\u5b58\u5668\u4fdd\u5b58\u8d77\u6765\uff0c\u65b0\u7684\u6808\u5e27\u8981\u4f7f\u7528rbp\u6765\u8bbf\u95ee\u5806\u6808 movq %rsp , %rbp ; \u4fdd\u5b58\u65b0\u7684\u6808\u9876 movl %edi , -20 ( %rbp ) ; \u83b7\u53d6\u53c2\u6570\uff0c\u5e76\u4fdd\u5b58\u5728\u5806\u6808\u4e0a movl %esi , -24 ( %rbp ) ; \u7ee7\u7eed\u4fdd\u5b58\u5728\u5806\u6808\u4e0a movl %edx , -28 ( %rbp ) ; \u7ee7\u7eed\u4fdd\u5b58\u5728\u5806\u6808\u4e0a movl -20 ( %rbp ), %edx ; movl -24 ( %rbp ), %eax addl %eax , %edx ; \u5b9e\u73b0\u52a0\u6cd5 movl -28 ( %rbp ), %eax addl %edx , %eax movl %eax , -4 ( %rbp ) ; \u8fd4\u56de\u56de\u53bb movl -4 ( %rbp ), %eax popq %rbp ret main: // \u4fdd\u5b58rbp\u5bc4\u5b58\u5668\uff0c\u7136\u540e\u4f7f\u7528rbp\u4fdd\u5b58\u65b0\u7684\u6808\u9876\u5bc4\u5b58\u5668\uff0c pushq %rbp movq %rsp , %rbp // \u5f00\u8f9f\u4e00\u6bb5\u6808\u7a7a\u95f4\uff0c\u7528\u6765\u4fdd\u5b58\u5c40\u90e8\u53d8\u91cf subq $16 , %rsp // \u901a\u8fc7rbp\u6765\u5b9a\u4f4d\u5230\u5bf9\u5e94\u6808\u7a7a\u95f4 movl $10 , -4 ( %rbp ) ; args1\uff0c\u5b58\u653e10 movl $4 , -8 ( %rbp ) ; args2, \u5b58\u653e4 movl $1 , -12 ( %rbp ) ; args3, \u5b58\u653e1 movl -12 ( %rbp ), %edx // \u7b2c\u4e09\u4e2a\u53c2\u6570 movl -8 ( %rbp ), %ecx movl -4 ( %rbp ), %eax movl %ecx , %esi // \u7b2c\u4e8c\u4e2a\u53c2\u6570 movl %eax , %edi // \u7b2c\u4e00\u4e2a\u53c2\u6570 call func1 // \u51fd\u6570\u8c03\u7528 movl %eax , -16 ( %rbp ) movl -16 ( %rbp ), %eax movl %eax , %esi movl $.LC0 , %edi movl $0 , %eax call printf movl $0 , %eax leave ret","title":"\u9006\u5411\u548c\u6c47\u7f16\u57fa\u7840"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/basic/Reverse/#_2","text":"1 2 3 4 5 6 7 8 00000000000006 aa < main > : 6 aa: 48 83 ec 08 sub $0x8 , %rsp 6 ae: 83 ff 02 cmp $0x2 , %edi 6 b1: 75 68 jne 71b < main + 0x71 > // edi\u4ee3\u8868\u7b2c\u4e00\u4e2a\u53c2\u6570\u3001(rdi\u3001rsi\u3001rdx\u3001rcx\u3001r8\u3001r9\uff0c\u8d85\u51fa6\u7684\u53c2\u6570\u7684\u4f7f\u7528\u5806\u6808\u6765\u4f20\u9012\u53c2\u6570\uff0c\u901a\u8fc7rsp\u6765\u4f20\u9012) if ( argc ! = 2 ) { ..... } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 71 b: 48 8 d 3 d b2 00 00 00 lea 0xb2 ( %rip ), %rdi # 7d4 <_IO_stdin_used+0x4> 722: e8 49 fe ff ff callq 570 < puts@plt > 727: b8 ff ff ff ff mov $0xffffffff , %eax 72 c: eb e8 jmp 716 < main + 0x6c > 716: 48 83 c4 08 add $0x8 , %rsp 71 a: c3 retq // lea \u5c06rip\u5bc4\u5b58\u5668\u7684\u503c\u52a0\u4e0a0xb2\uff0c\u653e\u5230rdi\u5bc4\u5b58\u5668\u4e2d // rip\u5bc4\u5b58\u5668\u7684\u503c\u7b49\u4e8e\u4e0b\u4e00\u6761\u6307\u4ee4\u7684\u5730\u5740\uff0c\u4e5f\u5c31\u662f0x722 // \u901a\u8fc7xxd -s \u5730\u5740 -l \u957f\u5ea6 \u4e8c\u8fdb\u5236\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u627e\u5230\u6307\u5b9a\u5730\u5740\u7684ASCII\u7801\u5185\u5bb9 tianqian-zyf@tianqia-zyf: ~/ crackmes$ xxd - s 0x7d4 - l 0x40 crackme02.64 000007 d4: 4 e65 6564 2065 7861 6374 6 c79 206 f 6 e65 Need exactly one 000007 e4: 2061 7267 756 d 656 e 742 e 004 e 6 f2c 2025 argument..No , % 000007 f4: 7320 6973 206 e 6 f74 2063 6 f72 7265 6374 s is not correct 00000804: 2 e0a 0070 6173 7377 6 f72 6431 0059 6573 ...password1.Yes // rax\u5bc4\u5b58\u5668\u5b58\u653e\u8fd4\u56de\u503c\uff0c\u8fd9\u91cc\u662f\u6709\u7b26\u53f7\u7c7b\u578b\u7684-1 // mov $0xffffffff,%eax\uff0c if ( argc ! = 2 ) { puts ( \" Need exactly one argument \" ) ; return -1 ; } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 6 b3: 48 8 b 56 08 mov 0x8 ( %rsi ), %rdx 6 b7: 0 f b6 02 movzbl ( %rdx ), %eax // al\u5bc4\u5b58\u5668\u4f4e8\u4f4d\u8fdb\u884c\u76f8\u4e0e\uff0c\u770bal\u662f\u5426\u662f0 6 ba: 84 c0 test %al , %al 6 bc: 74 3 d je 6fb < main + 0x51 > // %rip\u7684\u5730\u5740\u4e3a 0x702 // \u7b2c\u4e8c\u4e2a\u53c2\u6570rsi\uff0c\u662fformat string 6 fb: 48 8 d 35 0 f 01 00 00 lea 0x10f ( %rip ), %rsi # 811 <_IO_stdin_used+0x41> // \u7b2c\u4e00\u4e2a\u53c2\u6570rdi\u7684\u503c\u662f1\uff0c\u8868\u660e\u6709\u4e00\u4e2a\u53c2\u6570 // \u7b2c\u4e09\u4e2a\u53c2\u6570\u662frdx // \u8fd9\u91ccmov $0x0,%eax\uff0c\u8868\u793a\u53ef\u53d8\u53c2\u6570\u4f7f\u7528xmm\u5bc4\u5b58\u5668\u7684\u4e2a\u6570 (xmm\u5bc4\u5b58\u5668\u662f\u7528\u6765\u5b58\u653e\u6d6e\u70b9\u6570\u7684\uff0c\u5982\u679c\u53ef\u53d8\u53c2\u6570\u4e2d\u6709\u6d6e\u70b9\u6570\u4e00\u822c\u5c31\u662f\u901a\u8fc7xmm\u5bc4\u5b58\u5668\u6765\u5b58\u653e) 702: bf 01 00 00 00 mov $0x1 , %edi 707: b8 00 00 00 00 mov $0x0 , %eax 70 c: e8 6 f fe ff ff callq 580 < __printf_chk@plt > 711: b8 00 00 00 00 mov $0x0 , %eax 716: 48 83 c4 08 add $0x8 , %rsp 71 a: c3 retq tianqian-zyf@tianqia-zyf: ~/ crackmes$ xxd - s 0x811 - l 0x40 crackme02.64 00000811: 5965 732 c 2025 7320 6973 2063 6 f72 7265 Yes , %s is corre 00000821: 6374 210 a 0000 0001 1 b03 3 b3c 0000 0006 ct !....... ;<.... 00000831: 0000 0038 fdff ff88 0000 0068 fdff ffb0 ...8.......h.... 00000841: 0000 0078 fdff ff58 0000 0082 feff ffc8 ...x...X........ // \u7b2c\u4e00\u4e2a\u53c2\u6570rdi\u503c\u662f1\uff0c\u8868\u660e\u6709\u4e00\u4e2a\u53c2\u6570\uff0c \u7b2c\u4e8c\u4e2a\u53c2\u6570rsi\u662fformat string\uff0c\u7b2c\u4e09\u4e2a\u53c2\u6570\u662frdx\uff0c\u91cc\u9762\u5b58\u653e\u4e86argv[1] if ( argv [ 1 ][ 0 ] == 0 ) { printf ( \" Yes , %s is correct ! \" , argv [ 1 ]) ; return 0 ; } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 6be: 3c 6f cmp $0x6f,%al 6c0: 75 6c jne 72e <main+0x84> // rip\u5bc4\u5b58\u5668\u7684\u5730\u5740\u662f0x735 72e: 48 8d 35 ba 00 00 00 lea 0xba(%rip),%rsi # 7ef <_IO_stdin_used+0x1f> 735: bf 01 00 00 00 mov $0x1,%edi 73a: b8 00 00 00 00 mov $0x0,%eax 73f: e8 3c fe ff ff callq 580 <__printf_chk@plt> 744: b8 01 00 00 00 mov $0x1,%eax 749: eb cb jmp 716 <main+0x6c> 716: 48 83 c4 08 add $0x8,%rsp 71a: c3 retq tianqian-zyf@tianqia-zyf:~/crackmes$ xxd -s 0x7ef -l 0x40 crackme02.64 000007ef: 4e6f 2c20 2573 2069 7320 6e6f 7420 636f No, %s is not co 000007ff: 7272 6563 742e 0a00 7061 7373 776f 7264 rrect...password 0000080f: 3100 5965 732c 2025 7320 6973 2063 6f72 1.Yes, %s is cor 0000081f: 7265 6374 210a 0000 0001 1b03 3b3c 0000 rect!.......;<.. if (argv[1][0] != 0x6f) { printf(\"No, %s is not correct\", argv[1]); return 1; } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 6 c2: be 01 00 00 00 mov $0x1 , %esi 6 c7: b8 61 00 00 00 mov $0x61 , %eax 6 cc: b9 01 00 00 00 mov $0x1 , %ecx 6 d1: 48 8 d 3 d 2 f 01 00 00 lea 0x12f ( %rip ), %rdi # 807 <_IO_stdin_used+0x37> // argv[1] + 1 * 1 > argv[1][1] 6 d8: 0 f b6 0 c 0 a movzbl ( %rdx , %rcx , 1 ), %ecx 6 dc: 84 c9 test %cl , %cl 6 de: 74 1 b je 6fb < main + 0x51 > // %rip\u7684\u5730\u5740\u4e3a 0x702 6 fb: 48 8 d 35 0 f 01 00 00 lea 0x10f ( %rip ), %rsi # 811 <_IO_stdin_used+0x41> 702: bf 01 00 00 00 mov $0x1 , %edi 707: b8 00 00 00 00 mov $0x0 , %eax 70 c: e8 6 f fe ff ff callq 580 < __printf_chk@plt > 711: b8 00 00 00 00 mov $0x0 , %eax 716: 48 83 c4 08 add $0x8 , %rsp 71 a: c3 retq if ( argv [ 1 ][ 1 ] == 0 ) { printf ( \" Yes , %s is correct ! \" , argv [ 1 ]) ; return 0 ; } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 6 e0: 0 f be c0 movsbl %al , %eax 6 e3: 83 e8 01 sub $0x1 , %eax 6 e6: 0 f be c9 movsbl %cl , %ecx 6 e9: 39 c8 cmp %ecx , %eax 6 eb: 75 41 jne 72e < main + 0x84 > 72 e: 48 8 d 35 ba 00 00 00 lea 0xba ( %rip ), %rsi # 7ef <_IO_stdin_used+0x1f> 735: bf 01 00 00 00 mov $0x1 , %edi 73 a: b8 00 00 00 00 mov $0x0 , %eax 73 f: e8 3 c fe ff ff callq 580 < __printf_chk@plt > 744: b8 01 00 00 00 mov $0x1 , %eax 749: eb cb jmp 716 < main + 0x6c > 716: 48 83 c4 08 add $0x8 , %rsp 71 a: c3 retq if ( argv [ 1 ][ 1 ] ! = 0x60 ) { printf ( \" No , %s is not correct \" , argv [ 1 ]) ; return 1 ; } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 6 ed: 83 c6 01 add $0x1 , %esi 6 f0: 48 63 ce movslq %esi , %rcx 6 f3: 0 f b6 04 0 f movzbl ( %rdi , %rcx , 1 ), %eax 6 f7: 84 c0 test %al , %al 6 f9: 75 dd jne 6d8 < main + 0x2e > 6 d8: 0 f b6 0 c 0 a movzbl ( %rdx , %rcx , 1 ), %ecx 6 dc: 84 c9 test %cl , %cl 6 de: 74 1 b je 6fb < main + 0x51 > // %rip\u7684\u5730\u5740\u4e3a 0x702 6 fb: 48 8 d 35 0 f 01 00 00 lea 0x10f ( %rip ), %rsi # 811 <_IO_stdin_used+0x41> 702: bf 01 00 00 00 mov $0x1 , %edi 707: b8 00 00 00 00 mov $0x0 , %eax 70 c: e8 6 f fe ff ff callq 580 < __printf_chk@plt > 711: b8 00 00 00 00 mov $0x0 , %eax 716: 48 83 c4 08 add $0x8 , %rsp 71 a: c3 retq","title":"\u57fa\u672c\u6c47\u7f16\u5206\u6790"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/basic/compiler/","text":"\u7f16\u8bd1\u5668 CFG(Context-free grammar)\u4e0a\u4e0b\u6587\u65e0\u6cd5\u8bed\u6cd5\uff0cPEG(Parsing expression grammar)\u8868\u8fbe\u5f0f\u89e3\u6790\u8bed\u6cd5\uff0c \u8fd9\u662f\u4e24\u79cd\u6587\u6cd5\u5f62\u5f0f\u3002 BNF\u3001EBNF\u5c5e\u4e8eCFG\u6587\u6cd5\u7684\u4e24\u79cd\u5b9e\u73b0\u3002 \u5bf9\u4e8e\u4e0a\u4e0b\u6587\u65e0\u5173\u6587\u6cd5\u6765\u8bf4\uff0c\u4ea7\u751f\u5f0f\u5de6\u8fb9\u5fc5\u987b\u662f\u4e00\u4e2a\u975e\u7ec8\u7ed3\u7b26(\u4ee3\u8868\u53ef\u4ee5\u7ee7\u7eed\u6269\u5c55\u6216\u4ea7\u751f\u7684\u7b26\u5408)\u3002\u4e0d\u5b58\u5728\u6b67\u4e49\uff0c\u8bcd\u8bed\u5206\u6790\u7ed3\u679c\u552f\u4e00\uff0c\u751f\u6210\u7684\u8bed\u6cd5\u6811\u552f\u4e00\u3002\u53cd\u4e4b\u79f0\u4e3a\u4e0a\u4e0b\u6587\u6709\u5173\u7684\u8bed\u6cd5 \u4ea7\u751f\u5f0f\u5de6\u4fa7\u7684\u7b26\u53f7\u79f0\u4e3a \u975e\u7ec8\u7ed3\u7b26\uff08nonterminal\uff09 \uff0c\u4ee3\u8868\u53ef\u4ee5\u7ee7\u7eed\u6269\u5c55\u6216\u4ea7\u751f\u7684\u7b26\u53f7\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5f53\u5728\u67d0\u6761\u4ea7\u751f\u5f0f\u7684\u53f3\u8fb9\u9047\u5230\u4e86\u6b64\u975e\u7ec8\u7ed3\u7b26\u7684\u65f6\u5019\uff0c\u603b\u662f\u53ef\u4ee5\u7528\u672c\u4ea7\u751f\u5f0f\u7684\u53f3\u8fb9\u6765\u66ff\u6362\u8fd9\u4e2a\u975e\u7ec8\u7ed3\u7b26\u3002 PEG\u6765\u63cf\u8ff0\u8bed\u6cd5(pest): Tokens = {} SOI \u5f00\u59cb EOI \u7ed3\u675f Parser\u7684\u7ed3\u679c\u53ef\u4ee5\u901a\u8fc7tokens\u83b7\u53d6\u5230\u6240\u6709\u7684token 1 2 3 4 5 6 7 let parse_result = Parser :: parse ( Rule :: sum , \"1773 + 1362\" ). unwrap (); let tokens = parse_result . tokens (); // \u8f93\u51fa1773 + 1362\u4e09\u4e2atoken for token in tokens { println! ( \"{:?}\" , token ); } \u6bcf\u4e00\u4e2atoken\u5305\u542b\u4e24\u4e2a\u5b57\u6bb5: rule, which explains which rule generated them; and pos, which indicates their positions. Token\u4f7f\u7528\u8d77\u6765\u8fd8\u662f\u6709\u4e9b\u4e0d\u65b9\u4fbf\uff0cPest\u63d0\u4f9b\u4e86pair A Pair represents a matching pair of tokens, or, equivalently, the spanned text that a named rule successfully matched. It is commonly used in several ways: Determining which rule produced the Pair Using the Pair as a raw &str Inspecting the inner named sub-rules that produced the Pair 1 2 3 4 5 6 7 8 let pair = Parser :: parse ( Rule :: enclosed , \"(..6472..) and more text\" ) . unwrap (). next (). unwrap (); assert_eq! ( pair . as_rule (), Rule :: enclosed ); assert_eq! ( pair . as_str (), \"(..6472..)\" ); let inner_rules = pair . into_inner (); println! ( \"{}\" , inner_rules ); // --> [number(3, 7)] Example: 1 2 3 field = { (ASCII_DIGIT | \".\" | \"-\")+ } record = { field ~ (\",\" ~ field)* } file = { SOI ~ (record ~ (\"\\r\\n\" | \"\\n\"))* ~ EOI } Reference: https://en.wikipedia.org/wiki/Parsing_expression_grammar","title":"\u7f16\u8bd1\u5668"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/basic/compiler/#_1","text":"CFG(Context-free grammar)\u4e0a\u4e0b\u6587\u65e0\u6cd5\u8bed\u6cd5\uff0cPEG(Parsing expression grammar)\u8868\u8fbe\u5f0f\u89e3\u6790\u8bed\u6cd5\uff0c \u8fd9\u662f\u4e24\u79cd\u6587\u6cd5\u5f62\u5f0f\u3002 BNF\u3001EBNF\u5c5e\u4e8eCFG\u6587\u6cd5\u7684\u4e24\u79cd\u5b9e\u73b0\u3002 \u5bf9\u4e8e\u4e0a\u4e0b\u6587\u65e0\u5173\u6587\u6cd5\u6765\u8bf4\uff0c\u4ea7\u751f\u5f0f\u5de6\u8fb9\u5fc5\u987b\u662f\u4e00\u4e2a\u975e\u7ec8\u7ed3\u7b26(\u4ee3\u8868\u53ef\u4ee5\u7ee7\u7eed\u6269\u5c55\u6216\u4ea7\u751f\u7684\u7b26\u5408)\u3002\u4e0d\u5b58\u5728\u6b67\u4e49\uff0c\u8bcd\u8bed\u5206\u6790\u7ed3\u679c\u552f\u4e00\uff0c\u751f\u6210\u7684\u8bed\u6cd5\u6811\u552f\u4e00\u3002\u53cd\u4e4b\u79f0\u4e3a\u4e0a\u4e0b\u6587\u6709\u5173\u7684\u8bed\u6cd5 \u4ea7\u751f\u5f0f\u5de6\u4fa7\u7684\u7b26\u53f7\u79f0\u4e3a \u975e\u7ec8\u7ed3\u7b26\uff08nonterminal\uff09 \uff0c\u4ee3\u8868\u53ef\u4ee5\u7ee7\u7eed\u6269\u5c55\u6216\u4ea7\u751f\u7684\u7b26\u53f7\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5f53\u5728\u67d0\u6761\u4ea7\u751f\u5f0f\u7684\u53f3\u8fb9\u9047\u5230\u4e86\u6b64\u975e\u7ec8\u7ed3\u7b26\u7684\u65f6\u5019\uff0c\u603b\u662f\u53ef\u4ee5\u7528\u672c\u4ea7\u751f\u5f0f\u7684\u53f3\u8fb9\u6765\u66ff\u6362\u8fd9\u4e2a\u975e\u7ec8\u7ed3\u7b26\u3002 PEG\u6765\u63cf\u8ff0\u8bed\u6cd5(pest): Tokens = {} SOI \u5f00\u59cb EOI \u7ed3\u675f Parser\u7684\u7ed3\u679c\u53ef\u4ee5\u901a\u8fc7tokens\u83b7\u53d6\u5230\u6240\u6709\u7684token 1 2 3 4 5 6 7 let parse_result = Parser :: parse ( Rule :: sum , \"1773 + 1362\" ). unwrap (); let tokens = parse_result . tokens (); // \u8f93\u51fa1773 + 1362\u4e09\u4e2atoken for token in tokens { println! ( \"{:?}\" , token ); } \u6bcf\u4e00\u4e2atoken\u5305\u542b\u4e24\u4e2a\u5b57\u6bb5: rule, which explains which rule generated them; and pos, which indicates their positions. Token\u4f7f\u7528\u8d77\u6765\u8fd8\u662f\u6709\u4e9b\u4e0d\u65b9\u4fbf\uff0cPest\u63d0\u4f9b\u4e86pair A Pair represents a matching pair of tokens, or, equivalently, the spanned text that a named rule successfully matched. It is commonly used in several ways: Determining which rule produced the Pair Using the Pair as a raw &str Inspecting the inner named sub-rules that produced the Pair 1 2 3 4 5 6 7 8 let pair = Parser :: parse ( Rule :: enclosed , \"(..6472..) and more text\" ) . unwrap (). next (). unwrap (); assert_eq! ( pair . as_rule (), Rule :: enclosed ); assert_eq! ( pair . as_str (), \"(..6472..)\" ); let inner_rules = pair . into_inner (); println! ( \"{}\" , inner_rules ); // --> [number(3, 7)] Example: 1 2 3 field = { (ASCII_DIGIT | \".\" | \"-\")+ } record = { field ~ (\",\" ~ field)* } file = { SOI ~ (record ~ (\"\\r\\n\" | \"\\n\"))* ~ EOI } Reference: https://en.wikipedia.org/wiki/Parsing_expression_grammar","title":"\u7f16\u8bd1\u5668"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/basic/concurrency/","text":"\u5e76\u53d1\u7f16\u7a0b Hazard Pointer \u7b80\u79f0HP\uff0c\u6838\u5fc3\u8981\u89e3\u51b3\u7684\u95ee\u9898\u662f\u600e\u4e48\u6837\u5b89\u5168\u7684\u91ca\u653e\u5185\u5b58\u3002 \u4fdd\u8bc1\u4e86\u5173\u952e\u8282\u70b9\u7684\u8bbf\u95ee\u662f\u5408\u6cd5\u7684\uff0c\u4e0d\u4f1a\u5bfc\u81f4\u7a0b\u5e8f\u5c1d\u8bd5\u53bb\u8bfb\u53d6\u5df2\u7ecf\u91ca\u653e\u4e86\u7684\u5185\u5b58\u3002 \u4fdd\u8bc1\u4e86 ABA \u95ee\u9898\u4e0d\u4f1a\u51fa\u73b0\uff0c\u7a0b\u5e8f\u903b\u8f91\u6b63\u786e\u7684\u524d\u63d0\u3002 \u5728\u65e0\u9501\u7b97\u6cd5\u4e2d\u91ca\u653e\u5185\u5b58\u4e4b\u6240\u4ee5\u96be\uff0c\u4e3b\u8981\u539f\u56e0\u5728\u4e8e\uff0c\u5f53\u4e00\u4e2a\u7ebf\u7a0b\u51c6\u5907\u91ca\u653e\u4e00\u5757\u5185\u5b58\u65f6\uff0c\u5b83\u65e0\u6cd5\u77e5\u9053\u662f\u5426\u53e6\u6709\u522b\u7684\u7ebf\u7a0b\u4e5f\u540c\u65f6\u6301\u6709\u8be5\u5757\u5185\u5b58\u7684\u6307\u9488\u5e76\u9700\u8981\u8bbf\u95ee\uff0c\u56e0\u6b64\u89e3\u51b3\u8fd9\u4e2a\u96be\u70b9\u7684\u4e00\u4e2a\u76f4\u63a5\u60f3\u6cd5\u5c31\u662f\uff0c\u5728\u6bcf\u4e2a\u7ebf\u7a0b\u83b7\u53d6\u4e86\u4e00\u4e2a\u5173\u952e\u5185\u5b58\u7684\u6307\u9488\u540e\uff0c\u8be5\u7ebf\u7a0b\u5c06\u8bbe\u7f6e\u4e00\u4e2a\u6807\u5fd7\uff0c \u8868\u660e\"\u6211\u6b63\u5728\u64cd\u4f5c\u8fd9\u4e2a\u5173\u952e\u6570\u636e\uff0c\u4f60\u4eec\u8c01\u90fd\u522b\u7ed9\u6211\u968f\u4fbf\u5c31\u91ca\u653e\u4e86\"\u3002\u5f53\u7136\uff0c\u8fd9\u4e2a\u6807\u5fd7\u9700\u8981\u653e\u5728\u4e00\u4e2a\u516c\u5171\u533a\u57df\uff0c\u4f7f\u5f97\u4efb\u4f55\u7ebf\u7a0b\u90fd\u53ef\u4ee5\u53bb\u8bfb\u3002\u5f53\u53e6\u4e00\u4e2a\u7ebf\u7a0b\u60f3\u8981\u91ca\u653e\u4e00\u5757\u5185\u5b58\u65f6\uff0c\u5b83\u5c31\u53bb\u628a\u6bcf\u4e2a\u7ebf\u7a0b\u7684\u6807\u5fd7\u90fd\u770b\u4e00\u4e0b\uff0c \u770b\u770b\u662f\u5426\u6709\u522b\u7684\u7ebf\u7a0b\u4e5f\u5728\u64cd\u4f5c\u8fd9\u5757\u5185\u5b58\uff0c\u4ece\u800c\u51b3\u5b9a\u662f\u5426\u9a6c\u4e0a\u91ca\u653e\u8be5\u5185\u5b58\uff1a\u5982\u679c\u6709\u522b\u7684\u7ebf\u7a0b\u5728\u64cd\u4f5c\u8be5\u5185\u5b58\uff0c\u5219\u6682\u65f6\u4e0d\u91ca\u653e\uff0c\u7b49\u4e0b\u6b21\u3002\u5177\u4f53\u5b9e\u73b0\u5982\u4e0b\uff1a \u5efa\u7acb\u4e00\u4e2a\u5168\u5c40\u6570\u7ec4 HP hp[N]\uff0c\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u4e3a\u6307\u9488\uff0c\u79f0\u4e3a Hazard pointer\uff0c\u6570\u7ec4\u7684\u5927\u5c0f\u4e3a\u7ebf\u7a0b\u7684\u6570\u76ee\uff0c\u5373\u6bcf\u4e2a\u7ebf\u7a0b\u62e5\u6709\u4e00\u4e2a HP\u3002 \u7ea6\u5b9a\u6bcf\u4e2a\u7ebf\u7a0b\u53ea\u80fd\u4fee\u6539\u81ea\u5df1\u7684 HP\uff0c\u800c\u4e0d\u5141\u8bb8\u4fee\u6539\u522b\u7684\u7ebf\u7a0b\u7684 HP\uff0c\u4f46\u53ef\u4ee5\u53bb\u8bfb\u522b\u7684\u7ebf\u7a0b\u7684 HP \u503c\u3002 \u5f53\u7ebf\u7a0b\u5c1d\u8bd5\u53bb\u8bbf\u95ee\u4e00\u4e2a\u5173\u952e\u6570\u636e\u8282\u70b9\u65f6\uff0c\u5b83\u5f97\u5148\u628a\u8be5\u8282\u70b9\u7684\u6307\u9488\u8d4b\u7ed9\u81ea\u5df1\u7684 HP\uff0c\u5373\u544a\u8bc9\u522b\u4eba\u4e0d\u8981\u91ca\u653e\u8fd9\u4e2a\u8282\u70b9\u3002 \u6bcf\u4e2a\u7ebf\u7a0b\u7ef4\u62a4\u4e00\u4e2a\u79c1\u6709\u94fe\u8868(free list)\uff0c\u5f53\u8be5\u7ebf\u7a0b\u51c6\u5907\u91ca\u653e\u4e00\u4e2a\u8282\u70b9\u65f6\uff0c\u628a\u8be5\u8282\u70b9\u653e\u5165\u81ea\u5df1\u7684\u94fe\u8868\u4e2d\uff0c\u5f53\u94fe\u8868\u6570\u76ee\u8fbe\u5230\u4e00\u4e2a\u8bbe\u5b9a\u6570\u76ee R \u540e\uff0c\u904d\u5386\u8be5\u94fe\u8868\u628a\u80fd\u91ca\u653e\u7684\u8282\u70b9\u901a\u901a\u91ca\u653e\u3002 \u5f53\u4e00\u4e2a\u7ebf\u7a0b\u8981\u91ca\u653e\u67d0\u4e2a\u8282\u70b9\u65f6\uff0c\u5b83\u9700\u8981\u68c0\u67e5\u5168\u5c40\u7684 HP \u6570\u7ec4\uff0c\u786e\u5b9a\u5982\u679c\u6ca1\u6709\u4efb\u4f55\u4e00\u4e2a\u7ebf\u7a0b\u7684 HP \u503c\u4e0e\u5f53\u524d\u8282\u70b9\u7684\u6307\u9488\u76f8\u540c\uff0c\u5219\u91ca\u653e\u4e4b\uff0c\u5426\u5219\u4e0d\u91ca\u653e\uff0c\u4ecd\u65e7\u628a\u8be5\u8282\u70b9\u653e\u56de\u81ea\u5df1\u7684\u94fe\u8868\u4e2d\u3002 Quiescent-State-Based Reclamation(QSBR) Linux\u5185\u6838\u4e2d\u7684RCU\u5c5e\u4e8e\u8fd9\u4e2a\u7c7b\u578b","title":"\u5e76\u53d1\u7f16\u7a0b"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/basic/concurrency/#_1","text":"Hazard Pointer \u7b80\u79f0HP\uff0c\u6838\u5fc3\u8981\u89e3\u51b3\u7684\u95ee\u9898\u662f\u600e\u4e48\u6837\u5b89\u5168\u7684\u91ca\u653e\u5185\u5b58\u3002 \u4fdd\u8bc1\u4e86\u5173\u952e\u8282\u70b9\u7684\u8bbf\u95ee\u662f\u5408\u6cd5\u7684\uff0c\u4e0d\u4f1a\u5bfc\u81f4\u7a0b\u5e8f\u5c1d\u8bd5\u53bb\u8bfb\u53d6\u5df2\u7ecf\u91ca\u653e\u4e86\u7684\u5185\u5b58\u3002 \u4fdd\u8bc1\u4e86 ABA \u95ee\u9898\u4e0d\u4f1a\u51fa\u73b0\uff0c\u7a0b\u5e8f\u903b\u8f91\u6b63\u786e\u7684\u524d\u63d0\u3002 \u5728\u65e0\u9501\u7b97\u6cd5\u4e2d\u91ca\u653e\u5185\u5b58\u4e4b\u6240\u4ee5\u96be\uff0c\u4e3b\u8981\u539f\u56e0\u5728\u4e8e\uff0c\u5f53\u4e00\u4e2a\u7ebf\u7a0b\u51c6\u5907\u91ca\u653e\u4e00\u5757\u5185\u5b58\u65f6\uff0c\u5b83\u65e0\u6cd5\u77e5\u9053\u662f\u5426\u53e6\u6709\u522b\u7684\u7ebf\u7a0b\u4e5f\u540c\u65f6\u6301\u6709\u8be5\u5757\u5185\u5b58\u7684\u6307\u9488\u5e76\u9700\u8981\u8bbf\u95ee\uff0c\u56e0\u6b64\u89e3\u51b3\u8fd9\u4e2a\u96be\u70b9\u7684\u4e00\u4e2a\u76f4\u63a5\u60f3\u6cd5\u5c31\u662f\uff0c\u5728\u6bcf\u4e2a\u7ebf\u7a0b\u83b7\u53d6\u4e86\u4e00\u4e2a\u5173\u952e\u5185\u5b58\u7684\u6307\u9488\u540e\uff0c\u8be5\u7ebf\u7a0b\u5c06\u8bbe\u7f6e\u4e00\u4e2a\u6807\u5fd7\uff0c \u8868\u660e\"\u6211\u6b63\u5728\u64cd\u4f5c\u8fd9\u4e2a\u5173\u952e\u6570\u636e\uff0c\u4f60\u4eec\u8c01\u90fd\u522b\u7ed9\u6211\u968f\u4fbf\u5c31\u91ca\u653e\u4e86\"\u3002\u5f53\u7136\uff0c\u8fd9\u4e2a\u6807\u5fd7\u9700\u8981\u653e\u5728\u4e00\u4e2a\u516c\u5171\u533a\u57df\uff0c\u4f7f\u5f97\u4efb\u4f55\u7ebf\u7a0b\u90fd\u53ef\u4ee5\u53bb\u8bfb\u3002\u5f53\u53e6\u4e00\u4e2a\u7ebf\u7a0b\u60f3\u8981\u91ca\u653e\u4e00\u5757\u5185\u5b58\u65f6\uff0c\u5b83\u5c31\u53bb\u628a\u6bcf\u4e2a\u7ebf\u7a0b\u7684\u6807\u5fd7\u90fd\u770b\u4e00\u4e0b\uff0c \u770b\u770b\u662f\u5426\u6709\u522b\u7684\u7ebf\u7a0b\u4e5f\u5728\u64cd\u4f5c\u8fd9\u5757\u5185\u5b58\uff0c\u4ece\u800c\u51b3\u5b9a\u662f\u5426\u9a6c\u4e0a\u91ca\u653e\u8be5\u5185\u5b58\uff1a\u5982\u679c\u6709\u522b\u7684\u7ebf\u7a0b\u5728\u64cd\u4f5c\u8be5\u5185\u5b58\uff0c\u5219\u6682\u65f6\u4e0d\u91ca\u653e\uff0c\u7b49\u4e0b\u6b21\u3002\u5177\u4f53\u5b9e\u73b0\u5982\u4e0b\uff1a \u5efa\u7acb\u4e00\u4e2a\u5168\u5c40\u6570\u7ec4 HP hp[N]\uff0c\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u4e3a\u6307\u9488\uff0c\u79f0\u4e3a Hazard pointer\uff0c\u6570\u7ec4\u7684\u5927\u5c0f\u4e3a\u7ebf\u7a0b\u7684\u6570\u76ee\uff0c\u5373\u6bcf\u4e2a\u7ebf\u7a0b\u62e5\u6709\u4e00\u4e2a HP\u3002 \u7ea6\u5b9a\u6bcf\u4e2a\u7ebf\u7a0b\u53ea\u80fd\u4fee\u6539\u81ea\u5df1\u7684 HP\uff0c\u800c\u4e0d\u5141\u8bb8\u4fee\u6539\u522b\u7684\u7ebf\u7a0b\u7684 HP\uff0c\u4f46\u53ef\u4ee5\u53bb\u8bfb\u522b\u7684\u7ebf\u7a0b\u7684 HP \u503c\u3002 \u5f53\u7ebf\u7a0b\u5c1d\u8bd5\u53bb\u8bbf\u95ee\u4e00\u4e2a\u5173\u952e\u6570\u636e\u8282\u70b9\u65f6\uff0c\u5b83\u5f97\u5148\u628a\u8be5\u8282\u70b9\u7684\u6307\u9488\u8d4b\u7ed9\u81ea\u5df1\u7684 HP\uff0c\u5373\u544a\u8bc9\u522b\u4eba\u4e0d\u8981\u91ca\u653e\u8fd9\u4e2a\u8282\u70b9\u3002 \u6bcf\u4e2a\u7ebf\u7a0b\u7ef4\u62a4\u4e00\u4e2a\u79c1\u6709\u94fe\u8868(free list)\uff0c\u5f53\u8be5\u7ebf\u7a0b\u51c6\u5907\u91ca\u653e\u4e00\u4e2a\u8282\u70b9\u65f6\uff0c\u628a\u8be5\u8282\u70b9\u653e\u5165\u81ea\u5df1\u7684\u94fe\u8868\u4e2d\uff0c\u5f53\u94fe\u8868\u6570\u76ee\u8fbe\u5230\u4e00\u4e2a\u8bbe\u5b9a\u6570\u76ee R \u540e\uff0c\u904d\u5386\u8be5\u94fe\u8868\u628a\u80fd\u91ca\u653e\u7684\u8282\u70b9\u901a\u901a\u91ca\u653e\u3002 \u5f53\u4e00\u4e2a\u7ebf\u7a0b\u8981\u91ca\u653e\u67d0\u4e2a\u8282\u70b9\u65f6\uff0c\u5b83\u9700\u8981\u68c0\u67e5\u5168\u5c40\u7684 HP \u6570\u7ec4\uff0c\u786e\u5b9a\u5982\u679c\u6ca1\u6709\u4efb\u4f55\u4e00\u4e2a\u7ebf\u7a0b\u7684 HP \u503c\u4e0e\u5f53\u524d\u8282\u70b9\u7684\u6307\u9488\u76f8\u540c\uff0c\u5219\u91ca\u653e\u4e4b\uff0c\u5426\u5219\u4e0d\u91ca\u653e\uff0c\u4ecd\u65e7\u628a\u8be5\u8282\u70b9\u653e\u56de\u81ea\u5df1\u7684\u94fe\u8868\u4e2d\u3002 Quiescent-State-Based Reclamation(QSBR) Linux\u5185\u6838\u4e2d\u7684RCU\u5c5e\u4e8e\u8fd9\u4e2a\u7c7b\u578b","title":"\u5e76\u53d1\u7f16\u7a0b"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/basic/gdb/","text":"GDB Tips Install pretty script \u4e0b\u8f7d\u5bf9\u5e94gcc\u7248\u672c\u7684pretty script /opt/rh/devtoolset-8/root/usr/share/gdb/python/libstdcxx/v6/ /usr/share/gcc-4.8.5/python/libstdcxx/v6/ python module\u8def\u5f84\u662f\u4ecelibstdcxx/v6/\u5f00\u59cb\u7684\uff0c\u56e0\u6b64\u4ece\u8fd9\u91cc\u5f00\u59cb\u8981\u6784\u5efa\u597d\u5b8c\u6574\u7684\u76ee\u5f55 \u521b\u5efa.gdbinit\u6587\u4ef6 1 2 3 4 5 6 python import sys sys . path . insert ( 0 , '/root/python' ) from libstdcxx.v6.printers import register_libstdcxx_printers register_libstdcxx_printers ( None ) end \u4f7f\u7528Gdb\u6765dump\u5185\u5b58\u4fe1\u606f 1 2 3 4 5 6 7 sudo gdb > attach \u8fdb\u7a0bPID > i proc mappings # \u67e5\u770b\u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4\u4fe1\u606f \u7b49\u540c\u4e8e /proc/PID/maps > i files # \u53ef\u4ee5\u770b\u5230\u66f4\u4e3a\u8be6\u7ec6\u7684\u5185\u5b58\u4fe1\u606f \u7b49\u540c\u4e8e /proc/PID/smaps > dump memory \u8981\u5b58\u653e\u7684\u4f4d\u7f6e SRC DST # \u628aSRC\u5230DST \u5730\u5740\u8303\u56f4\u5185\u7684\u5185\u5b58\u4fe1\u606fdump\u51fa\u6765 \u5bf9dump\u51fa\u6765\u7684\u5185\u5bb9\u5b9e\u7528strings\u5373\u53ef\u67e5\u770b\u5230\u8be5\u6bb5\u5185\u5b58\u4e2d\u5b58\u653e\u7684\u5b57\u7b26\u4e32\u4fe1\u606f\u4e86 Enable pretty print set print object on ptype obj/class/struct set print pretty on set print vtbl on set print elements 0 \u8f93\u51fa\u5168\u90e8\u5143\u7d20 handle SIGPIPE nostop info vtbl VAR \u67e5\u770b\u865a\u8868 x command x command Displays the memory contents at a given address using the specified format. Syntax 1 2 3 4 x [Address expression] x /[Format] [Address expression] x /[Length][Format] [Address expression] x Parameters Address expression Specifies the memory address which contents will be displayed. This can be the address itself or any C/C++ expression evaluating to address. The expression can include registers (e.g. $eip) and pseudoregisters (e.g. $pc). If the address expression is not specified, the command will continue displaying memory contents from the address where the previous instance of this command has finished. Format If specified, allows overriding the output format used by the command. Valid format specifiers are: o - octal x - hexadecimal d - decimal u - unsigned decimal t - binary f - floating point a - address c - char s - string i - instruction The following size modifiers are supported: b - byte h - halfword (16-bit value) w - word (32-bit value) g - giant word (64-bit value) Length Specifies the number of elements that will be displayed by this command. gdb history set history save on set history size 10000 set history filename ~/.gdb_history Dump memory","title":"GDB Tips"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/basic/gdb/#gdb-tips","text":"","title":"GDB Tips"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/basic/gdb/#install-pretty-script","text":"\u4e0b\u8f7d\u5bf9\u5e94gcc\u7248\u672c\u7684pretty script /opt/rh/devtoolset-8/root/usr/share/gdb/python/libstdcxx/v6/ /usr/share/gcc-4.8.5/python/libstdcxx/v6/ python module\u8def\u5f84\u662f\u4ecelibstdcxx/v6/\u5f00\u59cb\u7684\uff0c\u56e0\u6b64\u4ece\u8fd9\u91cc\u5f00\u59cb\u8981\u6784\u5efa\u597d\u5b8c\u6574\u7684\u76ee\u5f55 \u521b\u5efa.gdbinit\u6587\u4ef6 1 2 3 4 5 6 python import sys sys . path . insert ( 0 , '/root/python' ) from libstdcxx.v6.printers import register_libstdcxx_printers register_libstdcxx_printers ( None ) end","title":"Install pretty script"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/basic/gdb/#gdbdump","text":"1 2 3 4 5 6 7 sudo gdb > attach \u8fdb\u7a0bPID > i proc mappings # \u67e5\u770b\u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4\u4fe1\u606f \u7b49\u540c\u4e8e /proc/PID/maps > i files # \u53ef\u4ee5\u770b\u5230\u66f4\u4e3a\u8be6\u7ec6\u7684\u5185\u5b58\u4fe1\u606f \u7b49\u540c\u4e8e /proc/PID/smaps > dump memory \u8981\u5b58\u653e\u7684\u4f4d\u7f6e SRC DST # \u628aSRC\u5230DST \u5730\u5740\u8303\u56f4\u5185\u7684\u5185\u5b58\u4fe1\u606fdump\u51fa\u6765 \u5bf9dump\u51fa\u6765\u7684\u5185\u5bb9\u5b9e\u7528strings\u5373\u53ef\u67e5\u770b\u5230\u8be5\u6bb5\u5185\u5b58\u4e2d\u5b58\u653e\u7684\u5b57\u7b26\u4e32\u4fe1\u606f\u4e86","title":"\u4f7f\u7528Gdb\u6765dump\u5185\u5b58\u4fe1\u606f"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/basic/gdb/#enable-pretty-print","text":"set print object on ptype obj/class/struct set print pretty on set print vtbl on set print elements 0 \u8f93\u51fa\u5168\u90e8\u5143\u7d20 handle SIGPIPE nostop info vtbl VAR \u67e5\u770b\u865a\u8868","title":"Enable pretty print"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/basic/gdb/#x-command","text":"x command Displays the memory contents at a given address using the specified format. Syntax 1 2 3 4 x [Address expression] x /[Format] [Address expression] x /[Length][Format] [Address expression] x Parameters Address expression Specifies the memory address which contents will be displayed. This can be the address itself or any C/C++ expression evaluating to address. The expression can include registers (e.g. $eip) and pseudoregisters (e.g. $pc). If the address expression is not specified, the command will continue displaying memory contents from the address where the previous instance of this command has finished. Format If specified, allows overriding the output format used by the command. Valid format specifiers are: o - octal x - hexadecimal d - decimal u - unsigned decimal t - binary f - floating point a - address c - char s - string i - instruction The following size modifiers are supported: b - byte h - halfword (16-bit value) w - word (32-bit value) g - giant word (64-bit value) Length Specifies the number of elements that will be displayed by this command.","title":"x command"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/basic/gdb/#gdb-history","text":"set history save on set history size 10000 set history filename ~/.gdb_history","title":"gdb history"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/basic/gdb/#dump-memory","text":"","title":"Dump memory"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/basic/review/","text":"\u9762\u8bd5\u9898 \u57fa\u7840 epoll\u662f\u540c\u6b65\u8fd8\u662f\u5f02\u6b65 epoll \u548c select\u6a21\u578b\u7684\u5dee\u5f02 \u5982\u4f55\u6392\u67e5\u5185\u5b58\u6cc4\u9732\u95ee\u9898\uff0c\u7ed9\u4e00\u4e9b\u601d\u8def? epoll\u9cb8\u7fa4\u95ee\u9898(\u591a\u7ebf\u7a0b\u5171\u4eabepoll fd) Linux\u865a\u5047\u5524\u9192\u3001\u6761\u4ef6\u53d8\u91cf \u4e3a\u4ec0\u4e48\u8981\u5b57\u8282\u5bf9\u9f50 \u5982\u4f55\u505c\u6b62\u4e00\u4e2a\u7ebf\u7a0b mmap\u7684\u539f\u7406 \u5e38\u89c1\u7684\u7ebf\u7a0b\u6a21\u578b \u4ec0\u4e48\u662f\u4f2a\u5171\u4eab? \u4ec0\u4e48\u662f\u5185\u5b58\u5c4f\u969c? C++ \u79fb\u52a8\u8bed\u4e49\u3001\u53f3\u503c\u5f15\u7528\u548c\u8f6c\u53d1\u5f15\u7528(\u901a\u7528\u5f15\u7528)\u3001\u5b8c\u7f8e\u8f6c\u53d1 \u4f7f\u7528\u8fc7\u54ea\u4e9b\u667a\u80fd\u6307\u9488\uff0cshared_ptr \u7ebf\u7a0b\u5b89\u5168\u5417? volitate \u5b9e\u73b0\u7ebf\u7a0b\u5b89\u5168\u7684\u5355\u4f8b Go \u7528\u8fc7\u90a3\u4e9bgolang\u7684\u5e76\u53d1\u6a21\u5f0f? \u4ec0\u4e48\u662f\u9003\u9038\u5206\u6790? \u57fa\u4e8eindex\u548c\u57fa\u4e8ekey/value\u7684\u4e24\u79cdfor range\u7684\u533a\u522b \u5b57\u7b26\u4e32\u8f6c\u6210byte\u6570\u7ec4\uff0c\u4f1a\u53d1\u751f\u5185\u5b58\u62f7\u8d1d\u5417\uff1f \u5bf9\u5df2\u7ecf\u5173\u95ed\u7684\u7684chan\u8fdb\u884c\u8bfb\u5199\uff0c\u4f1a\u600e\u4e48\u6837\uff1f\u4e3a\u4ec0\u4e48\uff1f https://github.com/tmrts/go-patterns Envoy\u90e8\u5206 Envoy\u7684\u7ebf\u7a0b\u6a21\u578b\u3001dispatcher\u673a\u5236\uff0c\u5982\u4f55\u4fdd\u8bc1\u914d\u7f6e\u66f4\u65b0\u662f\u7ebf\u7a0b\u5b89\u5168\u7684? Envoy\u7684\u70ed\u91cd\u542f\u673a\u5236\u7684\u6d41\u7a0b\uff0c\u5982\u4f55\u5904\u7406\u5df2\u6709\u8fde\u63a5\u7684close Envoy\u7684\u5185\u5b58\u4f18\u5316\u601d\u8def Envoy\u7684\u7ebf\u7a0b\u6c60\u5b58\u5728\u4ec0\u4e48\u95ee\u9898? \u81ea\u5df1\u51c6\u5907\u9762\u8bd5 vector\u7684\u589e\u957f\u56e0\u5b50\u4e3a\u4ec0\u4e48\u662f\u6210\u500d\u589e\u957f\uff0c\u4e3a\u4ec0\u4e48\u662f2\u500d(gcc\u662f2\u500d\uff0cMSVC\u662f1.5\u3001folly\u7684FBVector \u662f1.5) \u6709\u51e0\u4e2a\u539f\u56e0\uff0c\u4e3b\u8981\u56f4\u7ed5\u5c3d\u53ef\u80fd\u51cf\u5c11\u5206\u914d\u5185\u5b58\u7684\u6b21\u6570\u3001\u8fd8\u9700\u8981\u4fdd\u8bc1\u4e0d\u80fd\u6d6a\u8d39\u5185\u5b58\u7a7a\u95f4\uff0c\u6700\u597d\u8fd8\u80fd\u5145\u5206\u5229\u7528\u7f13\u5b58(\u5c31\u662f\u91cd\u590d\u5229\u7528\u4e4b\u524d\u56de\u6536\u7684\u5185\u5b58) 1\u30012\u30014\u30018\u300116\u300132(\u6bcf\u6b21\u5206\u914d\u90fd\u6ca1\u529e\u6cd5\u590d\u7528\u4e4b\u524d\u91ca\u653e\u7684\u5185\u5b58\uff0c\u90fd\u4e0d\u591f) 1\u30011.5\u30012.25\u30013.375\u30015.0625\u30017.59375(\u53ef\u4ee5\u590d\u7528\u524d\u56db\u6b21\u91ca\u653e\u7684\u5185\u5b58\u4e86)\uff0c\u6309\u71671.5\u500d\u589e\u957f\u5bf9\u7f13\u5b58\u66f4\u53cb\u597d Ref: * FBVector HashTable\u7684\u5b9e\u73b0 \u6838\u5fc3\u8ba1\u6570\u70b9: \u8f7d\u5165\u56e0\u5b50\u3001\u89e3\u51b3hash\u51b2\u7a81(\u94fe\u8868\u6cd5\u3001\u91cdhash\u6cd5)\u3001\u5185\u5b58\u6d88\u8017\u3001\u7f13\u5b58\u53cb\u597d\u6027\u7b49\u51e0\u4e2a\u65b9\u9762\u6765\u5206\u6790 \u8f7d\u5165\u56e0\u5b50\u51b3\u5b9a\u4e86HashTable\u7684\u5b58\u5728hash\u51b2\u7a81\u7684\u6982\u7387\u3001\u9047\u5230hash\u51b2\u7a81\u901a\u5e38\u7684\u89e3\u51b3\u529e\u6cd5 \u8d1f\u8f7d\u5747\u8861\u7b97\u6cd5 \u9762\u8bd5\u8bb0\u5f55","title":"\u9762\u8bd5\u9898"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/basic/review/#_1","text":"","title":"\u9762\u8bd5\u9898"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/basic/review/#_2","text":"epoll\u662f\u540c\u6b65\u8fd8\u662f\u5f02\u6b65 epoll \u548c select\u6a21\u578b\u7684\u5dee\u5f02 \u5982\u4f55\u6392\u67e5\u5185\u5b58\u6cc4\u9732\u95ee\u9898\uff0c\u7ed9\u4e00\u4e9b\u601d\u8def? epoll\u9cb8\u7fa4\u95ee\u9898(\u591a\u7ebf\u7a0b\u5171\u4eabepoll fd) Linux\u865a\u5047\u5524\u9192\u3001\u6761\u4ef6\u53d8\u91cf \u4e3a\u4ec0\u4e48\u8981\u5b57\u8282\u5bf9\u9f50 \u5982\u4f55\u505c\u6b62\u4e00\u4e2a\u7ebf\u7a0b mmap\u7684\u539f\u7406 \u5e38\u89c1\u7684\u7ebf\u7a0b\u6a21\u578b \u4ec0\u4e48\u662f\u4f2a\u5171\u4eab? \u4ec0\u4e48\u662f\u5185\u5b58\u5c4f\u969c?","title":"\u57fa\u7840"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/basic/review/#c","text":"\u79fb\u52a8\u8bed\u4e49\u3001\u53f3\u503c\u5f15\u7528\u548c\u8f6c\u53d1\u5f15\u7528(\u901a\u7528\u5f15\u7528)\u3001\u5b8c\u7f8e\u8f6c\u53d1 \u4f7f\u7528\u8fc7\u54ea\u4e9b\u667a\u80fd\u6307\u9488\uff0cshared_ptr \u7ebf\u7a0b\u5b89\u5168\u5417? volitate \u5b9e\u73b0\u7ebf\u7a0b\u5b89\u5168\u7684\u5355\u4f8b","title":"C++"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/basic/review/#go","text":"\u7528\u8fc7\u90a3\u4e9bgolang\u7684\u5e76\u53d1\u6a21\u5f0f? \u4ec0\u4e48\u662f\u9003\u9038\u5206\u6790? \u57fa\u4e8eindex\u548c\u57fa\u4e8ekey/value\u7684\u4e24\u79cdfor range\u7684\u533a\u522b \u5b57\u7b26\u4e32\u8f6c\u6210byte\u6570\u7ec4\uff0c\u4f1a\u53d1\u751f\u5185\u5b58\u62f7\u8d1d\u5417\uff1f \u5bf9\u5df2\u7ecf\u5173\u95ed\u7684\u7684chan\u8fdb\u884c\u8bfb\u5199\uff0c\u4f1a\u600e\u4e48\u6837\uff1f\u4e3a\u4ec0\u4e48\uff1f https://github.com/tmrts/go-patterns","title":"Go"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/basic/review/#envoy","text":"Envoy\u7684\u7ebf\u7a0b\u6a21\u578b\u3001dispatcher\u673a\u5236\uff0c\u5982\u4f55\u4fdd\u8bc1\u914d\u7f6e\u66f4\u65b0\u662f\u7ebf\u7a0b\u5b89\u5168\u7684? Envoy\u7684\u70ed\u91cd\u542f\u673a\u5236\u7684\u6d41\u7a0b\uff0c\u5982\u4f55\u5904\u7406\u5df2\u6709\u8fde\u63a5\u7684close Envoy\u7684\u5185\u5b58\u4f18\u5316\u601d\u8def Envoy\u7684\u7ebf\u7a0b\u6c60\u5b58\u5728\u4ec0\u4e48\u95ee\u9898?","title":"Envoy\u90e8\u5206"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/basic/review/#_3","text":"vector\u7684\u589e\u957f\u56e0\u5b50\u4e3a\u4ec0\u4e48\u662f\u6210\u500d\u589e\u957f\uff0c\u4e3a\u4ec0\u4e48\u662f2\u500d(gcc\u662f2\u500d\uff0cMSVC\u662f1.5\u3001folly\u7684FBVector \u662f1.5) \u6709\u51e0\u4e2a\u539f\u56e0\uff0c\u4e3b\u8981\u56f4\u7ed5\u5c3d\u53ef\u80fd\u51cf\u5c11\u5206\u914d\u5185\u5b58\u7684\u6b21\u6570\u3001\u8fd8\u9700\u8981\u4fdd\u8bc1\u4e0d\u80fd\u6d6a\u8d39\u5185\u5b58\u7a7a\u95f4\uff0c\u6700\u597d\u8fd8\u80fd\u5145\u5206\u5229\u7528\u7f13\u5b58(\u5c31\u662f\u91cd\u590d\u5229\u7528\u4e4b\u524d\u56de\u6536\u7684\u5185\u5b58) 1\u30012\u30014\u30018\u300116\u300132(\u6bcf\u6b21\u5206\u914d\u90fd\u6ca1\u529e\u6cd5\u590d\u7528\u4e4b\u524d\u91ca\u653e\u7684\u5185\u5b58\uff0c\u90fd\u4e0d\u591f) 1\u30011.5\u30012.25\u30013.375\u30015.0625\u30017.59375(\u53ef\u4ee5\u590d\u7528\u524d\u56db\u6b21\u91ca\u653e\u7684\u5185\u5b58\u4e86)\uff0c\u6309\u71671.5\u500d\u589e\u957f\u5bf9\u7f13\u5b58\u66f4\u53cb\u597d Ref: * FBVector HashTable\u7684\u5b9e\u73b0 \u6838\u5fc3\u8ba1\u6570\u70b9: \u8f7d\u5165\u56e0\u5b50\u3001\u89e3\u51b3hash\u51b2\u7a81(\u94fe\u8868\u6cd5\u3001\u91cdhash\u6cd5)\u3001\u5185\u5b58\u6d88\u8017\u3001\u7f13\u5b58\u53cb\u597d\u6027\u7b49\u51e0\u4e2a\u65b9\u9762\u6765\u5206\u6790 \u8f7d\u5165\u56e0\u5b50\u51b3\u5b9a\u4e86HashTable\u7684\u5b58\u5728hash\u51b2\u7a81\u7684\u6982\u7387\u3001\u9047\u5230hash\u51b2\u7a81\u901a\u5e38\u7684\u89e3\u51b3\u529e\u6cd5 \u8d1f\u8f7d\u5747\u8861\u7b97\u6cd5","title":"\u81ea\u5df1\u51c6\u5907\u9762\u8bd5"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/basic/review/#_4","text":"","title":"\u9762\u8bd5\u8bb0\u5f55"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/basic/tls/","text":"SSL TLS\uff08\u4f20\u8f93\u5c42\u5b89\u5168\uff09\u662f\u66f4\u4e3a\u5b89\u5168\u7684\u5347\u7ea7\u7248 SSL SSL\u63e1\u624b\u534f\u8bae(SSL Handshake protocol) SSL\u8bb0\u5f55\u534f\u8bae(Record Protocol) \u6570\u5b57\u7b7e\u540d \u6570\u5b57\u7b7e\u540d\u5c31\u662f\u201c\u975e\u5bf9\u79f0\u52a0\u5bc6+\u6458\u8981\u7b97\u6cd5\u201d\uff0c\u5176\u76ee\u7684\u4e0d\u662f\u4e3a\u4e86\u52a0\u5bc6\uff0c\u800c\u662f\u7528\u6765\u9632\u6b62\u4ed6\u4eba\u7be1\u6539\u6570\u636e\u3002 \u5176\u6838\u5fc3\u601d\u60f3\u662f\uff1a\u6bd4\u5982A\u8981\u7ed9B\u53d1\u9001\u6570\u636e\uff0cA\u5148\u7528\u6458\u8981\u7b97\u6cd5\u5f97\u5230\u6570\u636e\u7684\u6307\u7eb9\uff0c\u7136\u540e\u7528A\u7684\u79c1\u94a5\u52a0\u5bc6\u6307\u7eb9\uff0c\u52a0\u5bc6\u540e\u7684\u6307\u7eb9\u5c31\u662fA\u7684\u7b7e\u540d\uff0cB\u6536\u5230\u6570\u636e\u548cA\u7684\u7b7e\u540d\u540e\uff0c\u4e5f\u7528\u540c\u6837\u7684\u6458\u8981\u7b97\u6cd5\u8ba1\u7b97\u6307\u7eb9\uff0c\u7136\u540e\u7528A\u516c\u5f00\u7684\u516c\u94a5\u89e3\u5bc6\u7b7e\u540d\uff0c \u6bd4\u8f83\u4e24\u4e2a\u6307\u7eb9\uff0c\u5982\u679c\u76f8\u540c\uff0c\u8bf4\u660e\u6570\u636e\u6ca1\u6709\u88ab\u7be1\u6539\uff0c\u786e\u5b9e\u662fA\u53d1\u8fc7\u6765\u7684\u6570\u636e\u3002\u5047\u8bbeC\u60f3\u6539A\u53d1\u7ed9B\u7684\u6570\u636e\u6765\u6b3a\u9a97B\uff0c\u56e0\u4e3a\u7be1\u6539\u6570\u636e\u540e\u6307\u7eb9\u4f1a\u53d8\uff0c\u8981\u60f3\u8ddfA\u7684\u7b7e\u540d\u91cc\u9762\u7684\u6307\u7eb9\u4e00\u81f4\uff0c\u5c31\u5f97\u6539\u7b7e\u540d\uff0c\u4f46\u7531\u4e8e\u6ca1\u6709A\u7684\u79c1\u94a5\uff0c \u6240\u4ee5\u6539\u4e0d\u4e86\uff0c\u5982\u679cC\u7528\u81ea\u5df1\u7684\u79c1\u94a5\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u7b7e\u540d\uff0cB\u6536\u5230\u6570\u636e\u540e\u7528A\u7684\u516c\u94a5\u6839\u672c\u5c31\u89e3\u4e0d\u5f00\u3002 https://www.ruanyifeng.com/blog/2014/02/ssl_tls.html TLS\u8fc7\u7a0b: 1. ClientHello (client -> server)\uff0c\u5ba2\u6237\u7aef\u5411\u670d\u52a1\u7aef\u63d0\u4f9b\u4ee5\u4e0b\u4fe1\u606f: \u652f\u6301\u7684\u534f\u8bae\u7248\u672c \u4e00\u4e2a\u5ba2\u6237\u7aef\u751f\u6210\u7684\u968f\u673a\u6570\uff0c\u7a0d\u540e\u7528\u4e8e\u751f\u6210\"\u5bf9\u8bdd\u5bc6\u94a5\" \u652f\u6301\u7684\u52a0\u5bc6\u65b9\u6cd5\uff0c\u6bd4\u5982RSA\u516c\u94a5\u52a0\u5bc6 \u652f\u6301\u7684\u538b\u7f29\u65b9\u6cd5 \u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5ba2\u6237\u7aef\u53d1\u9001\u7684\u4fe1\u606f\u4e4b\u4e2d\u4e0d\u5305\u62ec\u670d\u52a1\u5668\u7684\u57df\u540d\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u7406\u8bba\u4e0a\u670d\u52a1\u5668\u53ea\u80fd\u5305\u542b\u4e00\u4e2a\u7f51\u7ad9\uff0c\u5426\u5219\u4f1a\u5206\u4e0d\u6e05\u5e94\u8be5\u5411\u5ba2\u6237\u7aef\u63d0\u4f9b\u54ea\u4e00\u4e2a\u7f51\u7ad9\u7684\u6570\u5b57\u8bc1\u4e66\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u901a\u5e38\u4e00\u53f0\u670d\u52a1\u5668\u53ea\u80fd\u6709\u4e00\u5f20\u6570\u5b57\u8bc1\u4e66\u7684\u539f\u56e0\u3002 \u5bf9\u4e8e\u865a\u62df\u4e3b\u673a\u7684\u7528\u6237\u6765\u8bf4\uff0c\u8fd9\u5f53\u7136\u5f88\u4e0d\u65b9\u4fbf\u30022006\u5e74\uff0cTLS\u534f\u8bae\u52a0\u5165\u4e86\u4e00\u4e2aServer Name Indication\u6269\u5c55\uff0c\u5141\u8bb8\u5ba2\u6237\u7aef\u5411\u670d\u52a1\u5668\u63d0\u4f9b\u5b83\u6240\u8bf7\u6c42\u7684\u57df\u540d\u3002 \u670d\u52a1\u5668\u54cd\u5e94ServeHello \u786e\u8ba4\u4f7f\u7528\u7684\u52a0\u5bc6\u901a\u4fe1\u534f\u8bae\u7248\u672c \u4e00\u4e2a\u670d\u52a1\u5668\u751f\u6210\u7684\u968f\u673a\u6570\uff0c\u7a0d\u540e\u7528\u4e8e\u751f\u6210\"\u5bf9\u8bdd\u5bc6\u94a5\" \u786e\u8ba4\u4f7f\u7528\u7684\u52a0\u5bc6\u65b9\u6cd5\uff0c\u6bd4\u5982RSA\u516c\u94a5\u52a0\u5bc6 \u670d\u52a1\u5668\u8bc1\u4e66 \u9664\u4e86\u4e0a\u9762\u8fd9\u4e9b\u4fe1\u606f\uff0c\u5982\u679c\u670d\u52a1\u5668\u9700\u8981\u786e\u8ba4\u5ba2\u6237\u7aef\u7684\u8eab\u4efd\uff0c\u5c31\u4f1a\u518d\u5305\u542b\u4e00\u9879\u8bf7\u6c42\uff0c\u8981\u6c42\u5ba2\u6237\u7aef\u63d0\u4f9b\"\u5ba2\u6237\u7aef\u8bc1\u4e66\"\u3002\u6bd4\u5982\uff0c\u91d1\u878d\u673a\u6784\u5f80\u5f80\u53ea\u5141\u8bb8\u8ba4\u8bc1\u5ba2\u6237\u8fde\u5165\u81ea\u5df1\u7684\u7f51\u7edc\uff0c\u5c31\u4f1a\u5411\u6b63\u5f0f\u5ba2\u6237\u63d0\u4f9bUSB\u5bc6\u94a5\uff0c\u91cc\u9762\u5c31\u5305\u542b\u4e86\u4e00\u5f20\u5ba2\u6237\u7aef\u8bc1\u4e66\u3002 \u5ba2\u6237\u7aef\u56de\u5e94 \u4e00\u4e2a\u968f\u673a\u6570\u3002\u8be5\u968f\u673a\u6570\u7528\u670d\u52a1\u5668\u516c\u94a5\u52a0\u5bc6\uff0c\u9632\u6b62\u88ab\u7a83\u542c\u3002 \u7f16\u7801\u6539\u53d8\u901a\u77e5\uff0c\u8868\u793a\u968f\u540e\u7684\u4fe1\u606f\u90fd\u5c06\u7528\u53cc\u65b9\u5546\u5b9a\u7684\u52a0\u5bc6\u65b9\u6cd5\u548c\u5bc6\u94a5\u53d1\u9001\u3002 \u5ba2\u6237\u7aef\u63e1\u624b\u7ed3\u675f\u901a\u77e5\uff0c\u8868\u793a\u5ba2\u6237\u7aef\u7684\u63e1\u624b\u9636\u6bb5\u5df2\u7ecf\u7ed3\u675f\u3002\u8fd9\u4e00\u9879\u540c\u65f6\u4e5f\u662f\u524d\u9762\u53d1\u9001\u7684\u6240\u6709\u5185\u5bb9\u7684hash\u503c\uff0c\u7528\u6765\u4f9b\u670d\u52a1\u5668\u6821\u9a8c\u3002","title":"SSL"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/basic/tls/#ssl","text":"TLS\uff08\u4f20\u8f93\u5c42\u5b89\u5168\uff09\u662f\u66f4\u4e3a\u5b89\u5168\u7684\u5347\u7ea7\u7248 SSL SSL\u63e1\u624b\u534f\u8bae(SSL Handshake protocol) SSL\u8bb0\u5f55\u534f\u8bae(Record Protocol) \u6570\u5b57\u7b7e\u540d \u6570\u5b57\u7b7e\u540d\u5c31\u662f\u201c\u975e\u5bf9\u79f0\u52a0\u5bc6+\u6458\u8981\u7b97\u6cd5\u201d\uff0c\u5176\u76ee\u7684\u4e0d\u662f\u4e3a\u4e86\u52a0\u5bc6\uff0c\u800c\u662f\u7528\u6765\u9632\u6b62\u4ed6\u4eba\u7be1\u6539\u6570\u636e\u3002 \u5176\u6838\u5fc3\u601d\u60f3\u662f\uff1a\u6bd4\u5982A\u8981\u7ed9B\u53d1\u9001\u6570\u636e\uff0cA\u5148\u7528\u6458\u8981\u7b97\u6cd5\u5f97\u5230\u6570\u636e\u7684\u6307\u7eb9\uff0c\u7136\u540e\u7528A\u7684\u79c1\u94a5\u52a0\u5bc6\u6307\u7eb9\uff0c\u52a0\u5bc6\u540e\u7684\u6307\u7eb9\u5c31\u662fA\u7684\u7b7e\u540d\uff0cB\u6536\u5230\u6570\u636e\u548cA\u7684\u7b7e\u540d\u540e\uff0c\u4e5f\u7528\u540c\u6837\u7684\u6458\u8981\u7b97\u6cd5\u8ba1\u7b97\u6307\u7eb9\uff0c\u7136\u540e\u7528A\u516c\u5f00\u7684\u516c\u94a5\u89e3\u5bc6\u7b7e\u540d\uff0c \u6bd4\u8f83\u4e24\u4e2a\u6307\u7eb9\uff0c\u5982\u679c\u76f8\u540c\uff0c\u8bf4\u660e\u6570\u636e\u6ca1\u6709\u88ab\u7be1\u6539\uff0c\u786e\u5b9e\u662fA\u53d1\u8fc7\u6765\u7684\u6570\u636e\u3002\u5047\u8bbeC\u60f3\u6539A\u53d1\u7ed9B\u7684\u6570\u636e\u6765\u6b3a\u9a97B\uff0c\u56e0\u4e3a\u7be1\u6539\u6570\u636e\u540e\u6307\u7eb9\u4f1a\u53d8\uff0c\u8981\u60f3\u8ddfA\u7684\u7b7e\u540d\u91cc\u9762\u7684\u6307\u7eb9\u4e00\u81f4\uff0c\u5c31\u5f97\u6539\u7b7e\u540d\uff0c\u4f46\u7531\u4e8e\u6ca1\u6709A\u7684\u79c1\u94a5\uff0c \u6240\u4ee5\u6539\u4e0d\u4e86\uff0c\u5982\u679cC\u7528\u81ea\u5df1\u7684\u79c1\u94a5\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u7b7e\u540d\uff0cB\u6536\u5230\u6570\u636e\u540e\u7528A\u7684\u516c\u94a5\u6839\u672c\u5c31\u89e3\u4e0d\u5f00\u3002 https://www.ruanyifeng.com/blog/2014/02/ssl_tls.html TLS\u8fc7\u7a0b: 1. ClientHello (client -> server)\uff0c\u5ba2\u6237\u7aef\u5411\u670d\u52a1\u7aef\u63d0\u4f9b\u4ee5\u4e0b\u4fe1\u606f: \u652f\u6301\u7684\u534f\u8bae\u7248\u672c \u4e00\u4e2a\u5ba2\u6237\u7aef\u751f\u6210\u7684\u968f\u673a\u6570\uff0c\u7a0d\u540e\u7528\u4e8e\u751f\u6210\"\u5bf9\u8bdd\u5bc6\u94a5\" \u652f\u6301\u7684\u52a0\u5bc6\u65b9\u6cd5\uff0c\u6bd4\u5982RSA\u516c\u94a5\u52a0\u5bc6 \u652f\u6301\u7684\u538b\u7f29\u65b9\u6cd5 \u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5ba2\u6237\u7aef\u53d1\u9001\u7684\u4fe1\u606f\u4e4b\u4e2d\u4e0d\u5305\u62ec\u670d\u52a1\u5668\u7684\u57df\u540d\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u7406\u8bba\u4e0a\u670d\u52a1\u5668\u53ea\u80fd\u5305\u542b\u4e00\u4e2a\u7f51\u7ad9\uff0c\u5426\u5219\u4f1a\u5206\u4e0d\u6e05\u5e94\u8be5\u5411\u5ba2\u6237\u7aef\u63d0\u4f9b\u54ea\u4e00\u4e2a\u7f51\u7ad9\u7684\u6570\u5b57\u8bc1\u4e66\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u901a\u5e38\u4e00\u53f0\u670d\u52a1\u5668\u53ea\u80fd\u6709\u4e00\u5f20\u6570\u5b57\u8bc1\u4e66\u7684\u539f\u56e0\u3002 \u5bf9\u4e8e\u865a\u62df\u4e3b\u673a\u7684\u7528\u6237\u6765\u8bf4\uff0c\u8fd9\u5f53\u7136\u5f88\u4e0d\u65b9\u4fbf\u30022006\u5e74\uff0cTLS\u534f\u8bae\u52a0\u5165\u4e86\u4e00\u4e2aServer Name Indication\u6269\u5c55\uff0c\u5141\u8bb8\u5ba2\u6237\u7aef\u5411\u670d\u52a1\u5668\u63d0\u4f9b\u5b83\u6240\u8bf7\u6c42\u7684\u57df\u540d\u3002 \u670d\u52a1\u5668\u54cd\u5e94ServeHello \u786e\u8ba4\u4f7f\u7528\u7684\u52a0\u5bc6\u901a\u4fe1\u534f\u8bae\u7248\u672c \u4e00\u4e2a\u670d\u52a1\u5668\u751f\u6210\u7684\u968f\u673a\u6570\uff0c\u7a0d\u540e\u7528\u4e8e\u751f\u6210\"\u5bf9\u8bdd\u5bc6\u94a5\" \u786e\u8ba4\u4f7f\u7528\u7684\u52a0\u5bc6\u65b9\u6cd5\uff0c\u6bd4\u5982RSA\u516c\u94a5\u52a0\u5bc6 \u670d\u52a1\u5668\u8bc1\u4e66 \u9664\u4e86\u4e0a\u9762\u8fd9\u4e9b\u4fe1\u606f\uff0c\u5982\u679c\u670d\u52a1\u5668\u9700\u8981\u786e\u8ba4\u5ba2\u6237\u7aef\u7684\u8eab\u4efd\uff0c\u5c31\u4f1a\u518d\u5305\u542b\u4e00\u9879\u8bf7\u6c42\uff0c\u8981\u6c42\u5ba2\u6237\u7aef\u63d0\u4f9b\"\u5ba2\u6237\u7aef\u8bc1\u4e66\"\u3002\u6bd4\u5982\uff0c\u91d1\u878d\u673a\u6784\u5f80\u5f80\u53ea\u5141\u8bb8\u8ba4\u8bc1\u5ba2\u6237\u8fde\u5165\u81ea\u5df1\u7684\u7f51\u7edc\uff0c\u5c31\u4f1a\u5411\u6b63\u5f0f\u5ba2\u6237\u63d0\u4f9bUSB\u5bc6\u94a5\uff0c\u91cc\u9762\u5c31\u5305\u542b\u4e86\u4e00\u5f20\u5ba2\u6237\u7aef\u8bc1\u4e66\u3002 \u5ba2\u6237\u7aef\u56de\u5e94 \u4e00\u4e2a\u968f\u673a\u6570\u3002\u8be5\u968f\u673a\u6570\u7528\u670d\u52a1\u5668\u516c\u94a5\u52a0\u5bc6\uff0c\u9632\u6b62\u88ab\u7a83\u542c\u3002 \u7f16\u7801\u6539\u53d8\u901a\u77e5\uff0c\u8868\u793a\u968f\u540e\u7684\u4fe1\u606f\u90fd\u5c06\u7528\u53cc\u65b9\u5546\u5b9a\u7684\u52a0\u5bc6\u65b9\u6cd5\u548c\u5bc6\u94a5\u53d1\u9001\u3002 \u5ba2\u6237\u7aef\u63e1\u624b\u7ed3\u675f\u901a\u77e5\uff0c\u8868\u793a\u5ba2\u6237\u7aef\u7684\u63e1\u624b\u9636\u6bb5\u5df2\u7ecf\u7ed3\u675f\u3002\u8fd9\u4e00\u9879\u540c\u65f6\u4e5f\u662f\u524d\u9762\u53d1\u9001\u7684\u6240\u6709\u5185\u5bb9\u7684hash\u503c\uff0c\u7528\u6765\u4f9b\u670d\u52a1\u5668\u6821\u9a8c\u3002","title":"SSL"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/basic/bazel/","text":"Command line args --workspace_status_command=bazel/get_workspace_status \u6307\u5b9a\u4e00\u4e2a\u811a\u672c\u5728\u8fd0\u884cbazel\u4e4b\u524d\u4f1a\u5148\u8fd9\u884c\u8fd9\u4e2a\u811a\u672c\uff0c\u8fd9\u4e2a\u811a\u672c\u4f1a\u8f93\u51fa\u4f1a\u88ab\u653e\u5230 bazel-out/volatile-status.txt \u6587\u4ef6\u4e2d\uff0c\u53ef\u4ee5\u88ab\u5176\u4ed6\u89c4\u5219\u6240\u4f7f\u7528\u3002","title":"Index"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/basic/bazel/#command-line-args","text":"--workspace_status_command=bazel/get_workspace_status \u6307\u5b9a\u4e00\u4e2a\u811a\u672c\u5728\u8fd0\u884cbazel\u4e4b\u524d\u4f1a\u5148\u8fd9\u884c\u8fd9\u4e2a\u811a\u672c\uff0c\u8fd9\u4e2a\u811a\u672c\u4f1a\u8f93\u51fa\u4f1a\u88ab\u653e\u5230 bazel-out/volatile-status.txt \u6587\u4ef6\u4e2d\uff0c\u53ef\u4ee5\u88ab\u5176\u4ed6\u89c4\u5219\u6240\u4f7f\u7528\u3002","title":"Command line args"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/design/","text":"\u8bbe\u8ba1\u6a21\u5f0f SOLID Single Responsibility Principle Open-Closed Principle Liskov Substituion Principle Interface Segregation Principle Dependency Inversion/Injection Factory Builder 1 2 3 4 HtmlBuilder builder { \"ul\" }; builder . add_child ( \"li\" , \"hello\" ); builder . add_child ( \"li\" , \"world\" ); cout << builder . str () << endl ; Fluent Builder 1 2 3 HtmlElement htmlElement1 = HtmlElement :: build ( \"ul\" ). add_child ( \"li\" , \"hello\" ). add_child ( \"li\" , \"world\" ); cout << htmlElement1 . str () << endl ; Groovy Style Builder 1 2 3 std :: cout << P { IMG { \"http://pokemon.com/pikachu.png\" }, P { IMG { \"http://pokemon.com/pikachu.jpg\" }}} << std :: endl ; Builder Facets 1 2 3 4 5 6 7 8 9 10 Person p = Person :: create () . lives () . at ( \"123 London Road\" ) . with_postcode ( \"SW1 1GB\" ) . in ( \"London\" ) . works () . at ( \"PragmaSoft\" ) . as_a ( \"Consultant\" ) . earning ( 10e6 ); cout << p << endl ; \u591a\u79cdFactory\u7684\u5b9e\u73b0: \u7c7b\u7684\u9759\u6001\u65b9\u6cd5 \u72ec\u7acb\u7684Factory\u7c7b \u5185\u90e8\u7c7b \u62bd\u8c61\u7684Factory 1 2 DrinkFactory df ; df . make_drink ( \"coffee\" ); Prototype A partially or fully initialized object that you copy/clone and make use of. Bridge PIMPL = Pointer to an Implementation flyweight(\u4eab\u5143\u6a21\u5f0f) Visitor Strategy State Observer Callback Pattern \u76f4\u63a5\u5b9a\u4e49\u597d\u4e00\u4e2acallback\uff0c\u4e24\u4e2a\u7c7b\u4e4b\u95f4\u7684\u4f9d\u8d56\u901a\u8fc7callback\u6765\u8fdb\u884c 1 2 3 4 5 6 7 class PersonA { using UpdateNameCallback = std :: function < bool ( const std :: string & ) > ; void set_update_name_callback ( UpdateNameCallback callback ) { UpdateNameCallback = & callback ; } UpdateNameCallback * update_name_callback_ ; }; \u5176\u4ed6\u7684\u6a21\u5757\u53ef\u4ee5\u901a\u8fc7 set_update_name_callback \u6765\u8bbe\u7f6ecallback\u8fdb\u884c\u56de\u8c03\uff0c\u8fdb\u800c\u6765\u8fdb\u884c\u89e3\u8026\u3002 Strategized Locking \u57fa\u4e8eStrategy Pattern\u6765\u5b9e\u73b0\uff0c\u8fd9\u4e2a\u6a21\u5f0f\u7684\u7279\u70b9\u5728\u4e8e\uff0c\u5b9a\u4e49\u4e86\u4e00\u7ec4\u5b9e\u73b0\uff0c\u5c06\u6bcf\u4e00\u4e2a\u5b9e\u73b0\u90fd\u5c01\u88c5\u8d77\u6765\uff0c\u5e76\u4e14\u4f7f\u4ed6\u4eec\u4e4b\u95f4\u53ef\u4ee5\u76f8\u4e92\u8f6c\u6362 \u8fd0\u884c\u65f6\u591a\u6001 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 // Strategy\u63a5\u53e3\uff0c\u4f1a\u6709\u591a\u79cd\u5b9e\u73b0 class Lock { public : virtual void lock () const = 0 ; virtual void unlock () const = 0 ; }; // Context\u7c7b\uff0c\u8d1f\u8d23\u7ec4\u88c5Strategy class StrategizedLocking { public : StrategizedLocking ( Lock & l ) : lock_ ( l ) { lock . lock (); } ~ StrategizedLocking () { lock . unlock (); } private : Lock & lock_ ; } struct NullObjectMutex { void lock () {} void unlock () {} }; class NoLock : public lock { mutable NullObjectMutex mutex_ ; }; class ExclusiveLock : public lock { mutable std :: mutex mutex_ ; } class SharedLock : public Lock { mutable std :: shared_mutex shared_mutex_ ; } \u7f16\u8bd1\u65f6\u591a\u6001 1 2 3 4 5 6 7 8 9 10 11 12 13 template < typename LOCK > class StrategizedLocking { public : StrategizedLocking ( LOCK & l ) : lock ( l ) { lock . lock (); } ~ StrategizedLocking () { lock . unlock (); } private : LOCK & lock ; } \u8fd8\u6709\u4e00\u79cd\u65b9\u5f0f\u5c31\u662f\u63d0\u4f9b _unlock \u540e\u7f00\u7684\u65b9\u6cd5\u3002 Active Object Active Object \u8bbe\u8ba1\u6a21\u5f0f\u7684\u672c\u8d28\u662f\u89e3\u8026\u5408\u65b9\u6cd5\u7684\u8c03\u7528 (Method invocation) \u4e0e\u65b9\u6cd5\u7684\u6267\u884c (Method execution)\uff0c\u65b9\u6cd5\u8c03\u7528\u53d1\u751f\u5728\u8c03\u7528\u8005\u7ebf\u7a0b\u4e0a\u4e0b\u6587\u4e2d\uff0c\u800c\u65b9\u6cd5\u7684\u6267\u884c\u53d1\u751f\u5728\u72ec\u7acb\u4e8e\u8c03\u7528\u8005\u7ebf\u7a0b\u7684 Active Object \u7ebf\u7a0b\u4e0a\u4e0b\u6587\u4e2d\u3002 \u5e76\u4e14\u91cd\u8981\u7684\u4e00\u70b9\u662f\uff0c\u8be5\u65b9\u6cd5\u4e0e\u5176\u5b83\u666e\u901a\u7684\u5bf9\u8c61\u6210\u5458\u65b9\u6cd5\u5bf9\u4e8e\u8c03\u7528\u8005\u6765\u8bf4\uff0c\u6ca1\u6709\u4ec0\u4e48\u7279\u522b\u7684\u4e0d\u540c\u3002\u4ece\u8fd0\u884c\u65f6\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u8fd9\u91cc\u6d89\u53ca\u5230\u4e24\u7c7b\u7ebf\u7a0b\uff0c\u4e00\u4e2a\u662f\u8c03\u7528\u8005\u7ebf\u7a0b\uff0c\u53e6\u5916\u4e00\u4e2a\u662f Active Object \u7ebf\u7a0b 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 #include <algorithm> #include <deque> #include <functional> #include <future> #include <iostream> #include <memory> #include <mutex> #include <numeric> #include <random> #include <thread> #include <utility> #include <vector> class IsPrime { public : std :: pair < bool , int > operator ()( int i ) { for ( int j = 2 ; j * j <= i ; ++ j ) { if ( i % j == 0 ) return std :: make_pair ( false , i ); } return std :: make_pair ( true , i ); } }; class ActiveObject { public : std :: future < std :: pair < bool , int >> enqueueTask ( int i ) { IsPrime isPrime ; std :: packaged_task < std :: pair < bool , int > ( int ) > newJob ( isPrime ); auto isPrimeFuture = newJob . get_future (); auto pair = std :: make_pair ( std :: move ( newJob ), i ); { std :: lock_guard < std :: mutex > lockGuard ( activationListMutex ); activationList . push_back ( std :: move ( pair )); } return isPrimeFuture ; } void run () { std :: thread servant ([ this ] { while ( ! isEmpty ()) { auto myTask = dequeueTask (); myTask . first ( myTask . second ); } }); servant . join (); } private : std :: pair < std :: packaged_task < std :: pair < bool , int > ( int ) > , int > dequeueTask () { std :: lock_guard < std :: mutex > lockGuard ( activationListMutex ); auto myTask = std :: move ( activationList . front ()); activationList . pop_front (); return myTask ; } bool isEmpty () { std :: lock_guard < std :: mutex > lockGuard ( activationListMutex ); auto empty = activationList . empty (); return empty ; } std :: deque < std :: pair < std :: packaged_task < std :: pair < bool , int > ( int ) > , int >> activationList ; std :: mutex activationListMutex ; }; std :: vector < int > getRandNumbers ( int number ) { std :: vector < int > numbers ; for ( long long i = 0 ; i < number ; ++ i ) numbers . push_back ( i ); return numbers ; } std :: future < std :: vector < std :: future < std :: pair < bool , int >>>> getFutures ( ActiveObject & activeObject , int numberPrimes ) { return std :: async ([ & activeObject , numberPrimes ] { std :: vector < std :: future < std :: pair < bool , int >>> futures ; auto randNumbers = getRandNumbers ( numberPrimes ); for ( auto numb : randNumbers ) { futures . push_back ( activeObject . enqueueTask ( numb )); } return futures ; }); } int main () { std :: cout << \"starting........\" << std :: endl ; ActiveObject activeObject ; auto client1 = getFutures ( activeObject , 1998 ); auto client2 = getFutures ( activeObject , 2003 ); auto client3 = getFutures ( activeObject , 2011 ); auto client4 = getFutures ( activeObject , 2014 ); auto client5 = getFutures ( activeObject , 2017 ); auto futures = client1 . get (); auto futures2 = client2 . get (); auto futures3 = client3 . get (); auto futures4 = client4 . get (); auto futures5 = client5 . get (); futures . insert ( futures . end (), std :: make_move_iterator ( futures2 . begin ()), std :: make_move_iterator ( futures2 . end ())); futures . insert ( futures . end (), std :: make_move_iterator ( futures3 . begin ()), std :: make_move_iterator ( futures3 . end ())); futures . insert ( futures . end (), std :: make_move_iterator ( futures4 . begin ()), std :: make_move_iterator ( futures4 . end ())); futures . insert ( futures . end (), std :: make_move_iterator ( futures5 . begin ()), std :: make_move_iterator ( futures5 . end ())); activeObject . run (); std :: vector < std :: pair < bool , int >> futResults ; futResults . reserve ( futures . size ()); for ( auto & fut : futures ) futResults . push_back ( fut . get ()); std :: sort ( futResults . begin (), futResults . end ()); auto prIt = std :: find_if ( futResults . begin (), futResults . end (), []( std :: pair < bool , int > pa ) { return pa . first == true ; }); std :: cout << \"Number primes: \" << std :: distance ( prIt , futResults . end ()) << std :: endl ; std :: cout << \"Primes: \" << std :: endl ; std :: for_each ( prIt , futResults . end (), []( auto p ) { std :: cout << p . second << \" \" ;}); std :: cout << \" \\n\\n \" ; std :: cout << \"Number on primes: \" << std :: distance ( futResults . begin (), prIt ) << std :: endl ; std :: cout << \"No primes: \" << std :: endl ; std :: for_each ( futResults . begin (), prIt , []( auto p ) { std :: cout << p . second << \" \" ;}); std :: cout << std :: endl ; return 0 ; } API\u8bbe\u8ba1 \u6c38\u8fdc\u4e0d\u8981\u8fd4\u56de\u79c1\u6709\u6570\u636e\u6210\u5458\u7684\u975econst\u6307\u9488\u6216\u5f15\u7528\uff0c\u8fd9\u4f1a\u7834\u574f\u5c01\u88c5\u6027\u3002 \u5c06\u79c1\u6709\u529f\u80fd\u58f0\u660e\u5728.cc\u6587\u4ef6\u4e2d\u7684\u9759\u6001\u51fd\u6570\uff0c\u800c\u4e0d\u8981\u5c06\u5176\u4f5c\u4e3a\u79c1\u6709\u65b9\u6cd5\u66b4\u9732\u5728\u516c\u5f00\u7684\u5934\u6587\u4ef6\u4e2d \u5243\u5200\u539f\u7406\uff0c\u82e5\u65e0\u5fc5\u8981\uff0c\u52ff\u589e\u5b9e\u4f53 \u7591\u60d1\u4e4b\u65f6\uff0c\u679c\u65ad\u5f03\u4e4b\uff0c\u7cbe\u7b80API\u4e2d\u516c\u6709\u7684\u7c7b\u548c\u51fd\u6570\uff0c\u5f53\u4e0d\u786e\u5b9a\u662f\u5426\u9700\u8981\u67d0\u4e2a\u63a5\u53e3\u65f6\uff0c\u5c31\u4e0d\u8981\u63d0\u4f9b\u6b64\u63a5\u53e3\uff0c\u8be5\u5efa\u8bae\u8fdd\u80cc\u4e86API\u8bbe\u8ba1\u4eba\u5458\u7684\u826f\u597d\u610f\u613f\uff0c\u56e0\u4e3a\u5de5\u7a0b\u5e08\u5bb9\u6613\u88ab\u89e3\u51b3\u65b9\u6848\u7684\u901a\u7528\u6027\u548c\u7075\u6d3b\u6027\u8bf1\u60d1\uff0c\u6240\u4ee5\u53ef\u80fd\u60c5\u4e0d\u81ea\u7981\u7684\u4e3aAPI \u589e\u52a0\u62bd\u8c61\u5c42\u6b21\u6216\u901a\u7528\u6027\uff0c\u76fc\u671b\u7740\u4ed6\u4eec\u5c06\u6765\u53ef\u80fd\u88ab\u7528\u5230\u3002\u5de5\u7a0b\u5e08\u5e94\u8be5\u62b5\u5236\u8fd9\u79cd\u8bf1\u60d1\uff0c\u539f\u56e0\u5982\u4e0b: \u4f60\u60f3\u8981\u6dfb\u52a0\u7684\u901a\u7528\u6027\u53ef\u80fd\u6c38\u8fdc\u7528\u4e0d\u5230 \u5982\u679c\u67d0\u5929\u7528\u5230\u4e86\u60f3\u8981\u6dfb\u52a0\u7684\u901a\u7528\u6027\uff0c\u90a3\u65f6\u4f60\u53ef\u80fd\u5df2\u7ecf\u638c\u63e1\u4e86\u66f4\u591aAPI\u8bbe\u8ba1\u7684\u77e5\u8bc6\uff0c\u5e76\u53ef\u80fd\u6709\u4e86\u4e0e\u6700\u521d\u8bbe\u60f3\u65b9\u6848\u4e0d\u7528\u7684\u89e3\u51b3\u65b9\u6848\u3002 \u5982\u679c\u4f60\u786e\u5b9e\u9700\u8981\u6dfb\u52a0\u65b0\u529f\u80fd\uff0c\u90a3\u4e48\u7b80\u5355\u7684API\u6bd4\u590d\u6742\u7684API\u66f4\u5bb9\u6613\u6dfb\u52a0\u65b0\u529f\u80fd \u8c28\u614e\u6dfb\u52a0\u865a\u51fd\u6570 \u865a\u51fd\u6570\u7684\u8c03\u7528\u5fc5\u987b\u5728\u8fd0\u884c\u65f6\u67e5\u8be2\u51fd\u6570\u8868\u6765\u51b3\u5b9a\uff0c\u8fd9\u5c31\u4f7f\u5f97\u865a\u51fd\u6570\u7684\u8c03\u7528\u6bd4\u975e\u865a\u51fd\u6570\u8c03\u7528\u7684\u6162\u3002 \u4f7f\u7528\u865a\u51fd\u6570\u4e00\u822c\u9700\u8981\u7ef4\u62a4\u6307\u5411\u865a\u51fd\u6570\u8868\u7684\u6307\u9488\uff0c\u8fdb\u800c\u589e\u52a0\u4e86\u5bf9\u8c61\u7684\u5927\u5c0f\u3002 \u6dfb\u52a0\u3001\u91cd\u6392\u3001\u79fb\u9664\u865a\u51fd\u6570\u4f1a\u7834\u574f\u4e8c\u8fdb\u5236\u517c\u5bb9\u6027 NVI(Non-Virtual interface idiom)\uff0c\u63a5\u53e3\u662f\u975e\u865a\u7684\uff0c\u5c06\u865a\u63a5\u53e3\u58f0\u660e\u4e3a\u79c1\u6709\u7684\u3002\u7136\u540e\u5728\u5185\u90e8\u8c03\u7528\u865a\u63a5\u53e3\u3002 API\u5e94\u8be5\u7b26\u5408\u6b63\u4ea4\u539f\u5219\uff0c\u610f\u5473\u7740\u51fd\u6570\u6ca1\u6709\u526f\u4f5c\u7528\u3002 \u8bbe\u8ba1\u6b63\u4ea4API\u65f6\u9700\u8981\u94ed\u8bb0\u5982\u4e0b\u4e24\u4e2a\u91cd\u8981\u56e0\u7d20\uff1a \u51cf\u5c11\u5197\u4f59 \u589e\u52a0\u72ec\u7acb\u6027 \u9664\u975e\u786e\u5b9e\u9700\u8981 #include \u7c7b\u7684\u5b8c\u6574\u5b9a\u4e49\uff0c\u5426\u5219\u5e94\u8be5\u4e3a\u7c7b\u4f7f\u7528\u524d\u7f6e\u58f0\u660e\u3002 \u4e0d\u8981\u5c06\u5e73\u53f0\u76f8\u5173\u7684 #if \u6216 #ifdef \u8bed\u53e5\u653e\u5728\u516c\u5171\u7684API\u4e2d\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u8bed\u53e5\u66b4\u9732\u4e86\u5b9e\u73b0\u7ec6\u8282\uff0c\u5e76\u4f7fAPI\u56e0\u5e73\u53f0\u800c\u5f02\u3002 \u4f18\u79c0\u7684API\u8868\u73b0\u4e3a\u677e\u8026\u5408\u548c\u9ad8\u5185\u805a \u4f7f\u7528Pimpl\u60ef\u7528\u6cd5\uff0c\u5c06\u5b9e\u73b0\u7ec6\u8282\u4ece\u516c\u6709\u5934\u6587\u4ef6\u4e2d\u5206\u79bb\u51fa\u6765\uff0c\u800c\u4e14\u8981\u91c7\u7528\u79c1\u6709\u5185\u5d4c\u5b9e\u73b0\u7c7b\uff0c\u53ea\u6709\u5728.cc\u6587\u4ef6\u4e2d\u7684\u5176\u4ed6\u7c7b\u9700\u8981\u8bbf\u95eeImpl\u6210\u5458\u65f6\u624d\u5e94\u91c7\u7528\u516c\u6709\u5185\u5d4c\u7c7b\u3002 Pimpl\u5e26\u6765\u4e86\u4f18\u70b9: \u4fe1\u606f\u9690\u85cf \u964d\u4f4e\u8026\u5408 \u52a0\u901f\u7f16\u8bd1 \u66f4\u597d\u7684\u4e8c\u8fdb\u5236\u517c\u5bb9\u6027 \u60f0\u6027\u5206\u914d \u5e26\u6765\u7684\u7f3a\u70b9\u5219\u662f: \u5fc5\u987b\u901a\u8fc7\u6307\u9488\u95f4\u63a5\u8bbf\u95ee\u6240\u6709\u6210\u5458\u53d8\u91cf\uff0c\u53ef\u80fd\u5f15\u5165\u6027\u80fd\u51b2\u51fb \u7f16\u8bd1\u5668\u5c06\u4e0d\u80fd\u6355\u83b7const\u65b9\u6cd5\u4e2d\u5bf9\u6210\u5458\u53d8\u91cf\u7684\u4fee\u6539 \u4efb\u4f55\u590d\u6742\u7684\u7cfb\u7edf\u90fd\u6709\u4e24\u79cd\u5c42\u6b21\u5316\u89c6\u89d2 \u5bf9\u8c61\u5c42\u6b21\u7ed3\u6784\uff0c\u63cf\u8ff0\u7cfb\u7edf\u4e2d\u4e0d\u540c\u7684\u5bf9\u8c61\u5982\u4f55\u5408\u4f5c\uff0c\u8fd9\u8868\u73b0\u4e3a\u57fa\u4e8e\u5bf9\u8c61\u4e4b\u95f4\u7684 \"part of\" \u8fd9\u79cd\u5173\u7cfb\u7684\u7ed3\u6784\u5316\u5206\u7ec4\u3002 \u7c7b\u5c42\u6b21\u7ed3\u6784 \u63cf\u8ff0\u5171\u5b58\u4e8e\u5173\u8054\u5bf9\u8c61\u4e4b\u95f4\u7684\u516c\u5171\u7ed3\u6784\u548c\u884c\u4e3a\uff0c\u53ef\u4ee5\u8ba4\u4e3a\u662f\u5bf9\u8c61\u5c42\u6b21\u7ed3\u6784\u4e4b\u95f4\u7684\u4e00\u79cd \"is a\" \u7684\u5173\u7cfb \u540d\u8bcd\u6765\u8868\u793a\u5bf9\u8c61\u3001\u52a8\u8bcd\u8868\u793a\u51fd\u6570\u540d\u3001\u800c\u5f62\u5bb9\u8bcd\u548c\u6240\u6709\u683c\u540d\u8bcd\u8868\u793a\u5c5e\u6027 \u5bf9\u4e8e\u5355\u53c2\u6570\u6784\u9020\u51fd\u6570\u4f7f\u7528 explicit \u5173\u952e\u5b57\u4ee5\u907f\u514d\u610f\u5916\u7684\u7c7b\u578b\u8f6c\u6362 Liskov\u66ff\u6362\u539f\u5219\u6307\u51fa\uff0c\u5728\u4e0d\u4fee\u6539\u4efb\u4f55\u884c\u4e3a\u7684\u60c5\u51b5\u4e0b\u7528\u6d3e\u751f\u7c7b\u66ff\u6362\u57fa\u7c7b\uff0c\u8fd9\u5e94\u8be5\u603b\u662f\u53ef\u884c\u7684 \u5f00\u653e-\u5c01\u95ed\u539f\u5219\uff0c\u8be5\u539f\u5219\u6307\u51fa\uff0c\u7c7b\u7684\u76ee\u6807\u5e94\u8be5\u662f\u4e3a\u4e86\u6269\u5c55\u800c\u5f00\u653e\uff0c\u4e3a\u4fee\u6539\u800c\u5173\u95ed\u3002 \u63a5\u53e3\u5f80\u5f80\u4f7f\u7528\u5bf9\u8c61\u6a21\u578b\u4e2d\u7684\u5f62\u5bb9\u8bcd\u6765\u8868\u793a \u4e0d\u540c\u7684\u7f16\u8bd1\u5355\u5143\u4e2d\u975e\u5c40\u90e8\u9759\u6001\u5bf9\u8c61\u7684\u521d\u59cb\u5316\u987a\u5e8f\u662f\u672a\u5b9a\u4e49\u7684 \u4f7f\u7528\u4e00\u81f4\u7684\u51fd\u6570\u547d\u540d\u548c\u53c2\u6570\u987a\u5e8f \u4f7f\u7528\u679a\u4e3e\u7c7b\u578b\u4ee3\u66ff\u5e03\u5c14\u7c7b\u578b\uff0c\u63d0\u9ad8\u4ee3\u7801\u7684\u53ef\u8bfb\u6027 \u57fa\u4e8e\u6700\u5c0f\u5316\u6838\u5fc3API\uff0c\u4ee5\u72ec\u7acb\u7684\u6a21\u5757\u6216\u5e93\u7684\u5f62\u5f0f\u6784\u5efa\u4fbf\u6377API WillChange\u3001DidChange \u901a\u77e5\u662f\u5728\u4e8b\u4ef6\u4e4b\u524d\u8fd8\u662f\u4e4b\u540e\u53d1\u9001 \u56de\u8c03\u662f\u4e00\u79cd\u7528\u4e8e\u6253\u7834\u5faa\u73af\u4f9d\u8d56\u7684\u5e38\u7528\u6280\u672f Big three\u539f\u5219\uff0c\u610f\u601d\u5c31\u662f\u6790\u6784\u51fd\u6570\u3001\u590d\u5236\u6784\u9020\u51fd\u6570\u548c\u8d4b\u503c\u64cd\u4f5c\u7b26\u8fd9\u4e09\u4e2a\u6210\u5458\u51fd\u6570\u59cb\u7ec8\u5e94\u8be5\u5728\u4e00\u8d77\u51fa\u73b0\uff0c\u5982\u679c\u5b9a\u4e49\u4e86\u5176\u4e2d\u4e00\u4e2a\uff0c\u901a\u5e38\u4e5f\u9700\u8981\u5b9a\u4e49\u53e6\u5916\u4e24\u4e2a -fno-implicit-templates \u5173\u95ed\u9690\u5f0f\u5b9e\u4f8b\u5316\uff0c\u5c3d\u91cf\u9009\u62e9\u663e\u793a\u6a21\u7248\u5b9e\u4f8b\u5316\uff0c\u8fd9\u6837\u505a\u53ef\u4ee5\u9690\u85cf\u79c1\u6709\u7ec6\u8282\uff0c\u5e76\u964d\u4f4e\u6784\u5efa\u65f6\u95f4\uff0cC++11\u4e2d\u53ef\u4ee5extern\u5173\u952e\u5b57\u6765\u963b\u6b62\u7f16\u8bd1\u5668\u5728\u5f53\u524d \u7f16\u8bd1\u5355\u5143\u4e2d\u5b9e\u4f8b\u5316\u4e00\u4e2a\u6a21\u7248","title":"\u8bbe\u8ba1\u6a21\u5f0f"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/design/#_1","text":"","title":"\u8bbe\u8ba1\u6a21\u5f0f"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/design/#solid","text":"Single Responsibility Principle Open-Closed Principle Liskov Substituion Principle Interface Segregation Principle Dependency Inversion/Injection","title":"SOLID"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/design/#factory","text":"Builder 1 2 3 4 HtmlBuilder builder { \"ul\" }; builder . add_child ( \"li\" , \"hello\" ); builder . add_child ( \"li\" , \"world\" ); cout << builder . str () << endl ; Fluent Builder 1 2 3 HtmlElement htmlElement1 = HtmlElement :: build ( \"ul\" ). add_child ( \"li\" , \"hello\" ). add_child ( \"li\" , \"world\" ); cout << htmlElement1 . str () << endl ; Groovy Style Builder 1 2 3 std :: cout << P { IMG { \"http://pokemon.com/pikachu.png\" }, P { IMG { \"http://pokemon.com/pikachu.jpg\" }}} << std :: endl ; Builder Facets 1 2 3 4 5 6 7 8 9 10 Person p = Person :: create () . lives () . at ( \"123 London Road\" ) . with_postcode ( \"SW1 1GB\" ) . in ( \"London\" ) . works () . at ( \"PragmaSoft\" ) . as_a ( \"Consultant\" ) . earning ( 10e6 ); cout << p << endl ; \u591a\u79cdFactory\u7684\u5b9e\u73b0: \u7c7b\u7684\u9759\u6001\u65b9\u6cd5 \u72ec\u7acb\u7684Factory\u7c7b \u5185\u90e8\u7c7b \u62bd\u8c61\u7684Factory 1 2 DrinkFactory df ; df . make_drink ( \"coffee\" );","title":"Factory"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/design/#prototype","text":"A partially or fully initialized object that you copy/clone and make use of.","title":"Prototype"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/design/#bridge","text":"PIMPL = Pointer to an Implementation","title":"Bridge"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/design/#flyweight","text":"","title":"flyweight(\u4eab\u5143\u6a21\u5f0f)"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/design/#visitor","text":"","title":"Visitor"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/design/#strategy","text":"","title":"Strategy"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/design/#state","text":"","title":"State"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/design/#observer","text":"","title":"Observer"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/design/#callback-pattern","text":"\u76f4\u63a5\u5b9a\u4e49\u597d\u4e00\u4e2acallback\uff0c\u4e24\u4e2a\u7c7b\u4e4b\u95f4\u7684\u4f9d\u8d56\u901a\u8fc7callback\u6765\u8fdb\u884c 1 2 3 4 5 6 7 class PersonA { using UpdateNameCallback = std :: function < bool ( const std :: string & ) > ; void set_update_name_callback ( UpdateNameCallback callback ) { UpdateNameCallback = & callback ; } UpdateNameCallback * update_name_callback_ ; }; \u5176\u4ed6\u7684\u6a21\u5757\u53ef\u4ee5\u901a\u8fc7 set_update_name_callback \u6765\u8bbe\u7f6ecallback\u8fdb\u884c\u56de\u8c03\uff0c\u8fdb\u800c\u6765\u8fdb\u884c\u89e3\u8026\u3002","title":"Callback Pattern"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/design/#strategized-locking","text":"\u57fa\u4e8eStrategy Pattern\u6765\u5b9e\u73b0\uff0c\u8fd9\u4e2a\u6a21\u5f0f\u7684\u7279\u70b9\u5728\u4e8e\uff0c\u5b9a\u4e49\u4e86\u4e00\u7ec4\u5b9e\u73b0\uff0c\u5c06\u6bcf\u4e00\u4e2a\u5b9e\u73b0\u90fd\u5c01\u88c5\u8d77\u6765\uff0c\u5e76\u4e14\u4f7f\u4ed6\u4eec\u4e4b\u95f4\u53ef\u4ee5\u76f8\u4e92\u8f6c\u6362 \u8fd0\u884c\u65f6\u591a\u6001 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 // Strategy\u63a5\u53e3\uff0c\u4f1a\u6709\u591a\u79cd\u5b9e\u73b0 class Lock { public : virtual void lock () const = 0 ; virtual void unlock () const = 0 ; }; // Context\u7c7b\uff0c\u8d1f\u8d23\u7ec4\u88c5Strategy class StrategizedLocking { public : StrategizedLocking ( Lock & l ) : lock_ ( l ) { lock . lock (); } ~ StrategizedLocking () { lock . unlock (); } private : Lock & lock_ ; } struct NullObjectMutex { void lock () {} void unlock () {} }; class NoLock : public lock { mutable NullObjectMutex mutex_ ; }; class ExclusiveLock : public lock { mutable std :: mutex mutex_ ; } class SharedLock : public Lock { mutable std :: shared_mutex shared_mutex_ ; } \u7f16\u8bd1\u65f6\u591a\u6001 1 2 3 4 5 6 7 8 9 10 11 12 13 template < typename LOCK > class StrategizedLocking { public : StrategizedLocking ( LOCK & l ) : lock ( l ) { lock . lock (); } ~ StrategizedLocking () { lock . unlock (); } private : LOCK & lock ; } \u8fd8\u6709\u4e00\u79cd\u65b9\u5f0f\u5c31\u662f\u63d0\u4f9b _unlock \u540e\u7f00\u7684\u65b9\u6cd5\u3002","title":"Strategized Locking"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/design/#active-object","text":"Active Object \u8bbe\u8ba1\u6a21\u5f0f\u7684\u672c\u8d28\u662f\u89e3\u8026\u5408\u65b9\u6cd5\u7684\u8c03\u7528 (Method invocation) \u4e0e\u65b9\u6cd5\u7684\u6267\u884c (Method execution)\uff0c\u65b9\u6cd5\u8c03\u7528\u53d1\u751f\u5728\u8c03\u7528\u8005\u7ebf\u7a0b\u4e0a\u4e0b\u6587\u4e2d\uff0c\u800c\u65b9\u6cd5\u7684\u6267\u884c\u53d1\u751f\u5728\u72ec\u7acb\u4e8e\u8c03\u7528\u8005\u7ebf\u7a0b\u7684 Active Object \u7ebf\u7a0b\u4e0a\u4e0b\u6587\u4e2d\u3002 \u5e76\u4e14\u91cd\u8981\u7684\u4e00\u70b9\u662f\uff0c\u8be5\u65b9\u6cd5\u4e0e\u5176\u5b83\u666e\u901a\u7684\u5bf9\u8c61\u6210\u5458\u65b9\u6cd5\u5bf9\u4e8e\u8c03\u7528\u8005\u6765\u8bf4\uff0c\u6ca1\u6709\u4ec0\u4e48\u7279\u522b\u7684\u4e0d\u540c\u3002\u4ece\u8fd0\u884c\u65f6\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u8fd9\u91cc\u6d89\u53ca\u5230\u4e24\u7c7b\u7ebf\u7a0b\uff0c\u4e00\u4e2a\u662f\u8c03\u7528\u8005\u7ebf\u7a0b\uff0c\u53e6\u5916\u4e00\u4e2a\u662f Active Object \u7ebf\u7a0b 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 #include <algorithm> #include <deque> #include <functional> #include <future> #include <iostream> #include <memory> #include <mutex> #include <numeric> #include <random> #include <thread> #include <utility> #include <vector> class IsPrime { public : std :: pair < bool , int > operator ()( int i ) { for ( int j = 2 ; j * j <= i ; ++ j ) { if ( i % j == 0 ) return std :: make_pair ( false , i ); } return std :: make_pair ( true , i ); } }; class ActiveObject { public : std :: future < std :: pair < bool , int >> enqueueTask ( int i ) { IsPrime isPrime ; std :: packaged_task < std :: pair < bool , int > ( int ) > newJob ( isPrime ); auto isPrimeFuture = newJob . get_future (); auto pair = std :: make_pair ( std :: move ( newJob ), i ); { std :: lock_guard < std :: mutex > lockGuard ( activationListMutex ); activationList . push_back ( std :: move ( pair )); } return isPrimeFuture ; } void run () { std :: thread servant ([ this ] { while ( ! isEmpty ()) { auto myTask = dequeueTask (); myTask . first ( myTask . second ); } }); servant . join (); } private : std :: pair < std :: packaged_task < std :: pair < bool , int > ( int ) > , int > dequeueTask () { std :: lock_guard < std :: mutex > lockGuard ( activationListMutex ); auto myTask = std :: move ( activationList . front ()); activationList . pop_front (); return myTask ; } bool isEmpty () { std :: lock_guard < std :: mutex > lockGuard ( activationListMutex ); auto empty = activationList . empty (); return empty ; } std :: deque < std :: pair < std :: packaged_task < std :: pair < bool , int > ( int ) > , int >> activationList ; std :: mutex activationListMutex ; }; std :: vector < int > getRandNumbers ( int number ) { std :: vector < int > numbers ; for ( long long i = 0 ; i < number ; ++ i ) numbers . push_back ( i ); return numbers ; } std :: future < std :: vector < std :: future < std :: pair < bool , int >>>> getFutures ( ActiveObject & activeObject , int numberPrimes ) { return std :: async ([ & activeObject , numberPrimes ] { std :: vector < std :: future < std :: pair < bool , int >>> futures ; auto randNumbers = getRandNumbers ( numberPrimes ); for ( auto numb : randNumbers ) { futures . push_back ( activeObject . enqueueTask ( numb )); } return futures ; }); } int main () { std :: cout << \"starting........\" << std :: endl ; ActiveObject activeObject ; auto client1 = getFutures ( activeObject , 1998 ); auto client2 = getFutures ( activeObject , 2003 ); auto client3 = getFutures ( activeObject , 2011 ); auto client4 = getFutures ( activeObject , 2014 ); auto client5 = getFutures ( activeObject , 2017 ); auto futures = client1 . get (); auto futures2 = client2 . get (); auto futures3 = client3 . get (); auto futures4 = client4 . get (); auto futures5 = client5 . get (); futures . insert ( futures . end (), std :: make_move_iterator ( futures2 . begin ()), std :: make_move_iterator ( futures2 . end ())); futures . insert ( futures . end (), std :: make_move_iterator ( futures3 . begin ()), std :: make_move_iterator ( futures3 . end ())); futures . insert ( futures . end (), std :: make_move_iterator ( futures4 . begin ()), std :: make_move_iterator ( futures4 . end ())); futures . insert ( futures . end (), std :: make_move_iterator ( futures5 . begin ()), std :: make_move_iterator ( futures5 . end ())); activeObject . run (); std :: vector < std :: pair < bool , int >> futResults ; futResults . reserve ( futures . size ()); for ( auto & fut : futures ) futResults . push_back ( fut . get ()); std :: sort ( futResults . begin (), futResults . end ()); auto prIt = std :: find_if ( futResults . begin (), futResults . end (), []( std :: pair < bool , int > pa ) { return pa . first == true ; }); std :: cout << \"Number primes: \" << std :: distance ( prIt , futResults . end ()) << std :: endl ; std :: cout << \"Primes: \" << std :: endl ; std :: for_each ( prIt , futResults . end (), []( auto p ) { std :: cout << p . second << \" \" ;}); std :: cout << \" \\n\\n \" ; std :: cout << \"Number on primes: \" << std :: distance ( futResults . begin (), prIt ) << std :: endl ; std :: cout << \"No primes: \" << std :: endl ; std :: for_each ( futResults . begin (), prIt , []( auto p ) { std :: cout << p . second << \" \" ;}); std :: cout << std :: endl ; return 0 ; }","title":"Active Object"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/design/#api","text":"\u6c38\u8fdc\u4e0d\u8981\u8fd4\u56de\u79c1\u6709\u6570\u636e\u6210\u5458\u7684\u975econst\u6307\u9488\u6216\u5f15\u7528\uff0c\u8fd9\u4f1a\u7834\u574f\u5c01\u88c5\u6027\u3002 \u5c06\u79c1\u6709\u529f\u80fd\u58f0\u660e\u5728.cc\u6587\u4ef6\u4e2d\u7684\u9759\u6001\u51fd\u6570\uff0c\u800c\u4e0d\u8981\u5c06\u5176\u4f5c\u4e3a\u79c1\u6709\u65b9\u6cd5\u66b4\u9732\u5728\u516c\u5f00\u7684\u5934\u6587\u4ef6\u4e2d \u5243\u5200\u539f\u7406\uff0c\u82e5\u65e0\u5fc5\u8981\uff0c\u52ff\u589e\u5b9e\u4f53 \u7591\u60d1\u4e4b\u65f6\uff0c\u679c\u65ad\u5f03\u4e4b\uff0c\u7cbe\u7b80API\u4e2d\u516c\u6709\u7684\u7c7b\u548c\u51fd\u6570\uff0c\u5f53\u4e0d\u786e\u5b9a\u662f\u5426\u9700\u8981\u67d0\u4e2a\u63a5\u53e3\u65f6\uff0c\u5c31\u4e0d\u8981\u63d0\u4f9b\u6b64\u63a5\u53e3\uff0c\u8be5\u5efa\u8bae\u8fdd\u80cc\u4e86API\u8bbe\u8ba1\u4eba\u5458\u7684\u826f\u597d\u610f\u613f\uff0c\u56e0\u4e3a\u5de5\u7a0b\u5e08\u5bb9\u6613\u88ab\u89e3\u51b3\u65b9\u6848\u7684\u901a\u7528\u6027\u548c\u7075\u6d3b\u6027\u8bf1\u60d1\uff0c\u6240\u4ee5\u53ef\u80fd\u60c5\u4e0d\u81ea\u7981\u7684\u4e3aAPI \u589e\u52a0\u62bd\u8c61\u5c42\u6b21\u6216\u901a\u7528\u6027\uff0c\u76fc\u671b\u7740\u4ed6\u4eec\u5c06\u6765\u53ef\u80fd\u88ab\u7528\u5230\u3002\u5de5\u7a0b\u5e08\u5e94\u8be5\u62b5\u5236\u8fd9\u79cd\u8bf1\u60d1\uff0c\u539f\u56e0\u5982\u4e0b: \u4f60\u60f3\u8981\u6dfb\u52a0\u7684\u901a\u7528\u6027\u53ef\u80fd\u6c38\u8fdc\u7528\u4e0d\u5230 \u5982\u679c\u67d0\u5929\u7528\u5230\u4e86\u60f3\u8981\u6dfb\u52a0\u7684\u901a\u7528\u6027\uff0c\u90a3\u65f6\u4f60\u53ef\u80fd\u5df2\u7ecf\u638c\u63e1\u4e86\u66f4\u591aAPI\u8bbe\u8ba1\u7684\u77e5\u8bc6\uff0c\u5e76\u53ef\u80fd\u6709\u4e86\u4e0e\u6700\u521d\u8bbe\u60f3\u65b9\u6848\u4e0d\u7528\u7684\u89e3\u51b3\u65b9\u6848\u3002 \u5982\u679c\u4f60\u786e\u5b9e\u9700\u8981\u6dfb\u52a0\u65b0\u529f\u80fd\uff0c\u90a3\u4e48\u7b80\u5355\u7684API\u6bd4\u590d\u6742\u7684API\u66f4\u5bb9\u6613\u6dfb\u52a0\u65b0\u529f\u80fd \u8c28\u614e\u6dfb\u52a0\u865a\u51fd\u6570 \u865a\u51fd\u6570\u7684\u8c03\u7528\u5fc5\u987b\u5728\u8fd0\u884c\u65f6\u67e5\u8be2\u51fd\u6570\u8868\u6765\u51b3\u5b9a\uff0c\u8fd9\u5c31\u4f7f\u5f97\u865a\u51fd\u6570\u7684\u8c03\u7528\u6bd4\u975e\u865a\u51fd\u6570\u8c03\u7528\u7684\u6162\u3002 \u4f7f\u7528\u865a\u51fd\u6570\u4e00\u822c\u9700\u8981\u7ef4\u62a4\u6307\u5411\u865a\u51fd\u6570\u8868\u7684\u6307\u9488\uff0c\u8fdb\u800c\u589e\u52a0\u4e86\u5bf9\u8c61\u7684\u5927\u5c0f\u3002 \u6dfb\u52a0\u3001\u91cd\u6392\u3001\u79fb\u9664\u865a\u51fd\u6570\u4f1a\u7834\u574f\u4e8c\u8fdb\u5236\u517c\u5bb9\u6027 NVI(Non-Virtual interface idiom)\uff0c\u63a5\u53e3\u662f\u975e\u865a\u7684\uff0c\u5c06\u865a\u63a5\u53e3\u58f0\u660e\u4e3a\u79c1\u6709\u7684\u3002\u7136\u540e\u5728\u5185\u90e8\u8c03\u7528\u865a\u63a5\u53e3\u3002 API\u5e94\u8be5\u7b26\u5408\u6b63\u4ea4\u539f\u5219\uff0c\u610f\u5473\u7740\u51fd\u6570\u6ca1\u6709\u526f\u4f5c\u7528\u3002 \u8bbe\u8ba1\u6b63\u4ea4API\u65f6\u9700\u8981\u94ed\u8bb0\u5982\u4e0b\u4e24\u4e2a\u91cd\u8981\u56e0\u7d20\uff1a \u51cf\u5c11\u5197\u4f59 \u589e\u52a0\u72ec\u7acb\u6027 \u9664\u975e\u786e\u5b9e\u9700\u8981 #include \u7c7b\u7684\u5b8c\u6574\u5b9a\u4e49\uff0c\u5426\u5219\u5e94\u8be5\u4e3a\u7c7b\u4f7f\u7528\u524d\u7f6e\u58f0\u660e\u3002 \u4e0d\u8981\u5c06\u5e73\u53f0\u76f8\u5173\u7684 #if \u6216 #ifdef \u8bed\u53e5\u653e\u5728\u516c\u5171\u7684API\u4e2d\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u8bed\u53e5\u66b4\u9732\u4e86\u5b9e\u73b0\u7ec6\u8282\uff0c\u5e76\u4f7fAPI\u56e0\u5e73\u53f0\u800c\u5f02\u3002 \u4f18\u79c0\u7684API\u8868\u73b0\u4e3a\u677e\u8026\u5408\u548c\u9ad8\u5185\u805a \u4f7f\u7528Pimpl\u60ef\u7528\u6cd5\uff0c\u5c06\u5b9e\u73b0\u7ec6\u8282\u4ece\u516c\u6709\u5934\u6587\u4ef6\u4e2d\u5206\u79bb\u51fa\u6765\uff0c\u800c\u4e14\u8981\u91c7\u7528\u79c1\u6709\u5185\u5d4c\u5b9e\u73b0\u7c7b\uff0c\u53ea\u6709\u5728.cc\u6587\u4ef6\u4e2d\u7684\u5176\u4ed6\u7c7b\u9700\u8981\u8bbf\u95eeImpl\u6210\u5458\u65f6\u624d\u5e94\u91c7\u7528\u516c\u6709\u5185\u5d4c\u7c7b\u3002 Pimpl\u5e26\u6765\u4e86\u4f18\u70b9: \u4fe1\u606f\u9690\u85cf \u964d\u4f4e\u8026\u5408 \u52a0\u901f\u7f16\u8bd1 \u66f4\u597d\u7684\u4e8c\u8fdb\u5236\u517c\u5bb9\u6027 \u60f0\u6027\u5206\u914d \u5e26\u6765\u7684\u7f3a\u70b9\u5219\u662f: \u5fc5\u987b\u901a\u8fc7\u6307\u9488\u95f4\u63a5\u8bbf\u95ee\u6240\u6709\u6210\u5458\u53d8\u91cf\uff0c\u53ef\u80fd\u5f15\u5165\u6027\u80fd\u51b2\u51fb \u7f16\u8bd1\u5668\u5c06\u4e0d\u80fd\u6355\u83b7const\u65b9\u6cd5\u4e2d\u5bf9\u6210\u5458\u53d8\u91cf\u7684\u4fee\u6539 \u4efb\u4f55\u590d\u6742\u7684\u7cfb\u7edf\u90fd\u6709\u4e24\u79cd\u5c42\u6b21\u5316\u89c6\u89d2 \u5bf9\u8c61\u5c42\u6b21\u7ed3\u6784\uff0c\u63cf\u8ff0\u7cfb\u7edf\u4e2d\u4e0d\u540c\u7684\u5bf9\u8c61\u5982\u4f55\u5408\u4f5c\uff0c\u8fd9\u8868\u73b0\u4e3a\u57fa\u4e8e\u5bf9\u8c61\u4e4b\u95f4\u7684 \"part of\" \u8fd9\u79cd\u5173\u7cfb\u7684\u7ed3\u6784\u5316\u5206\u7ec4\u3002 \u7c7b\u5c42\u6b21\u7ed3\u6784 \u63cf\u8ff0\u5171\u5b58\u4e8e\u5173\u8054\u5bf9\u8c61\u4e4b\u95f4\u7684\u516c\u5171\u7ed3\u6784\u548c\u884c\u4e3a\uff0c\u53ef\u4ee5\u8ba4\u4e3a\u662f\u5bf9\u8c61\u5c42\u6b21\u7ed3\u6784\u4e4b\u95f4\u7684\u4e00\u79cd \"is a\" \u7684\u5173\u7cfb \u540d\u8bcd\u6765\u8868\u793a\u5bf9\u8c61\u3001\u52a8\u8bcd\u8868\u793a\u51fd\u6570\u540d\u3001\u800c\u5f62\u5bb9\u8bcd\u548c\u6240\u6709\u683c\u540d\u8bcd\u8868\u793a\u5c5e\u6027 \u5bf9\u4e8e\u5355\u53c2\u6570\u6784\u9020\u51fd\u6570\u4f7f\u7528 explicit \u5173\u952e\u5b57\u4ee5\u907f\u514d\u610f\u5916\u7684\u7c7b\u578b\u8f6c\u6362 Liskov\u66ff\u6362\u539f\u5219\u6307\u51fa\uff0c\u5728\u4e0d\u4fee\u6539\u4efb\u4f55\u884c\u4e3a\u7684\u60c5\u51b5\u4e0b\u7528\u6d3e\u751f\u7c7b\u66ff\u6362\u57fa\u7c7b\uff0c\u8fd9\u5e94\u8be5\u603b\u662f\u53ef\u884c\u7684 \u5f00\u653e-\u5c01\u95ed\u539f\u5219\uff0c\u8be5\u539f\u5219\u6307\u51fa\uff0c\u7c7b\u7684\u76ee\u6807\u5e94\u8be5\u662f\u4e3a\u4e86\u6269\u5c55\u800c\u5f00\u653e\uff0c\u4e3a\u4fee\u6539\u800c\u5173\u95ed\u3002 \u63a5\u53e3\u5f80\u5f80\u4f7f\u7528\u5bf9\u8c61\u6a21\u578b\u4e2d\u7684\u5f62\u5bb9\u8bcd\u6765\u8868\u793a \u4e0d\u540c\u7684\u7f16\u8bd1\u5355\u5143\u4e2d\u975e\u5c40\u90e8\u9759\u6001\u5bf9\u8c61\u7684\u521d\u59cb\u5316\u987a\u5e8f\u662f\u672a\u5b9a\u4e49\u7684 \u4f7f\u7528\u4e00\u81f4\u7684\u51fd\u6570\u547d\u540d\u548c\u53c2\u6570\u987a\u5e8f \u4f7f\u7528\u679a\u4e3e\u7c7b\u578b\u4ee3\u66ff\u5e03\u5c14\u7c7b\u578b\uff0c\u63d0\u9ad8\u4ee3\u7801\u7684\u53ef\u8bfb\u6027 \u57fa\u4e8e\u6700\u5c0f\u5316\u6838\u5fc3API\uff0c\u4ee5\u72ec\u7acb\u7684\u6a21\u5757\u6216\u5e93\u7684\u5f62\u5f0f\u6784\u5efa\u4fbf\u6377API WillChange\u3001DidChange \u901a\u77e5\u662f\u5728\u4e8b\u4ef6\u4e4b\u524d\u8fd8\u662f\u4e4b\u540e\u53d1\u9001 \u56de\u8c03\u662f\u4e00\u79cd\u7528\u4e8e\u6253\u7834\u5faa\u73af\u4f9d\u8d56\u7684\u5e38\u7528\u6280\u672f Big three\u539f\u5219\uff0c\u610f\u601d\u5c31\u662f\u6790\u6784\u51fd\u6570\u3001\u590d\u5236\u6784\u9020\u51fd\u6570\u548c\u8d4b\u503c\u64cd\u4f5c\u7b26\u8fd9\u4e09\u4e2a\u6210\u5458\u51fd\u6570\u59cb\u7ec8\u5e94\u8be5\u5728\u4e00\u8d77\u51fa\u73b0\uff0c\u5982\u679c\u5b9a\u4e49\u4e86\u5176\u4e2d\u4e00\u4e2a\uff0c\u901a\u5e38\u4e5f\u9700\u8981\u5b9a\u4e49\u53e6\u5916\u4e24\u4e2a -fno-implicit-templates \u5173\u95ed\u9690\u5f0f\u5b9e\u4f8b\u5316\uff0c\u5c3d\u91cf\u9009\u62e9\u663e\u793a\u6a21\u7248\u5b9e\u4f8b\u5316\uff0c\u8fd9\u6837\u505a\u53ef\u4ee5\u9690\u85cf\u79c1\u6709\u7ec6\u8282\uff0c\u5e76\u964d\u4f4e\u6784\u5efa\u65f6\u95f4\uff0cC++11\u4e2d\u53ef\u4ee5extern\u5173\u952e\u5b57\u6765\u963b\u6b62\u7f16\u8bd1\u5668\u5728\u5f53\u524d \u7f16\u8bd1\u5355\u5143\u4e2d\u5b9e\u4f8b\u5316\u4e00\u4e2a\u6a21\u7248","title":"API\u8bbe\u8ba1"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/linux/","text":"\u5173\u95ed\u5730\u5740\u7a7a\u95f4\u968f\u673a\u5316(ALSR) 0 - \u8868\u793a\u5173\u95ed\u8fdb\u7a0b\u5730\u5740\u7a7a\u95f4\u968f\u673a\u5316\u3002 1 - \u8868\u793a\u5c06mmap\u7684\u57fa\u5740\uff0cstack\u548cvdso\u9875\u9762\u968f\u673a\u5316\u3002 2 - \u8868\u793a\u57281\u7684\u57fa\u7840\u4e0a\u589e\u52a0\u6808\uff08heap\uff09\u7684\u968f\u673a\u5316\u3002 1 # echo 0 >/proc/sys/kernel/randomize_va_space pthread_atfork \u53ef\u4ee5\u6ce8\u518cfork\u524d\u3001parent\u3001child\u7b49\u56de\u8c03\u505a\u4e00\u4e9b\u6e05\u7406\u7684\u52a8\u4f5c _exit \u4e0d\u4f1a\u6790\u6784\u5168\u5c40\u5bf9\u8c61\u3001\u4e5f\u4e0d\u4f1a\u6267\u884c\u4efb\u4f55\u6e05\u7406\u52a8\u4f5c signal handler\u4e2d\u53ea\u80fd\u8c03\u7528\u5f02\u6b65\u4fe1\u53f7\u5b89\u5168\u7684\u51fd\u6570\uff0c\u5e76\u4e14\u5982\u679c\u9700\u8981\u4fee\u6539\u5168\u5c40\u6570\u636e\u7684\u65f6\u5019\uff0c\u90a3\u4e48\u88ab\u4fee\u6539\u7684\u53d8\u91cf\u5fc5\u987b\u662fsig_atomic_t\u7c7b\u578b\u7684\uff0c\u5426\u5219\u88ab\u6253\u65ad\u7684\u51fd\u6570\u5728\u6062\u590d\u6267\u884c\u540e\u5f88\u53ef\u80fd\u4e0d\u80fd\u7acb\u523b\u770b\u5230signal handler\u6539\u52a8\u540e\u7684\u6570\u636e\u3002\u56e0\u4e3a\u7f16\u8bd1\u5668\u6709\u53ef\u80fd\u5047\u5b9a\u8fd9\u4e2a\u53d8\u91cf\u4e0d\u4f1a\u88ab\u4ed6\u5904\u4fee\u6539\uff0c\u800c\u4ece\u4f18\u5316\u4e86\u5185\u5b58\u8bbf\u95ee\u3002","title":"Index"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/linux/#alsr","text":"0 - \u8868\u793a\u5173\u95ed\u8fdb\u7a0b\u5730\u5740\u7a7a\u95f4\u968f\u673a\u5316\u3002 1 - \u8868\u793a\u5c06mmap\u7684\u57fa\u5740\uff0cstack\u548cvdso\u9875\u9762\u968f\u673a\u5316\u3002 2 - \u8868\u793a\u57281\u7684\u57fa\u7840\u4e0a\u589e\u52a0\u6808\uff08heap\uff09\u7684\u968f\u673a\u5316\u3002 1 # echo 0 >/proc/sys/kernel/randomize_va_space pthread_atfork \u53ef\u4ee5\u6ce8\u518cfork\u524d\u3001parent\u3001child\u7b49\u56de\u8c03\u505a\u4e00\u4e9b\u6e05\u7406\u7684\u52a8\u4f5c _exit \u4e0d\u4f1a\u6790\u6784\u5168\u5c40\u5bf9\u8c61\u3001\u4e5f\u4e0d\u4f1a\u6267\u884c\u4efb\u4f55\u6e05\u7406\u52a8\u4f5c signal handler\u4e2d\u53ea\u80fd\u8c03\u7528\u5f02\u6b65\u4fe1\u53f7\u5b89\u5168\u7684\u51fd\u6570\uff0c\u5e76\u4e14\u5982\u679c\u9700\u8981\u4fee\u6539\u5168\u5c40\u6570\u636e\u7684\u65f6\u5019\uff0c\u90a3\u4e48\u88ab\u4fee\u6539\u7684\u53d8\u91cf\u5fc5\u987b\u662fsig_atomic_t\u7c7b\u578b\u7684\uff0c\u5426\u5219\u88ab\u6253\u65ad\u7684\u51fd\u6570\u5728\u6062\u590d\u6267\u884c\u540e\u5f88\u53ef\u80fd\u4e0d\u80fd\u7acb\u523b\u770b\u5230signal handler\u6539\u52a8\u540e\u7684\u6570\u636e\u3002\u56e0\u4e3a\u7f16\u8bd1\u5668\u6709\u53ef\u80fd\u5047\u5b9a\u8fd9\u4e2a\u53d8\u91cf\u4e0d\u4f1a\u88ab\u4ed6\u5904\u4fee\u6539\uff0c\u800c\u4ece\u4f18\u5316\u4e86\u5185\u5b58\u8bbf\u95ee\u3002","title":"\u5173\u95ed\u5730\u5740\u7a7a\u95f4\u968f\u673a\u5316(ALSR)"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/linux/asm_syscall/","text":"Linux: x86-64 syscall The syscall number is passed in register rax. Parameters are passed in registers [rdi, rsi, rdx, rcx, r8, r9]. I haven\u2019t found documentation on what x86-64 Linux does for syscalls with more than six parameters. The syscall instruction is used to pass control to the kernel. Linux syscall numbers for x86-64 are defined in arch/x86/entry/syscalls/syscall_64.tbl. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 .data .set .L_STDOUT , 1 .set .L_SYSCALL_EXIT , 60 .set .L_SYSCALL_WRITE , 1 .L_message: .ascii \"Hello, world!\\n\" .set .L_message_len , . - .L_message .text .global _start _start: # write(STDOUT, message, message_len) mov $.L_SYSCALL_WRITE , %rax mov $.L_STDOUT , %rdi mov $.L_message , %rsi mov $.L_message_len , %rdx syscall # exit(0) mov $.L_SYSCALL_EXIT , %rax mov $0 , %rdi syscall static linking 1 2 3 4 5 6 $ as --64 -o hello.o hello.s $ ld -m elf_x86_64 -o hello hello.o $ file hello hello: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, not stripped $ ./hello Hello, world! dynamic linking 1 2 3 4 5 6 7 8 9 10 11 $ as --64 -o hello.o hello.s $ ld -m elf_x86_64 -o hello hello.o \\ --dynamic-linker /lib64/ld-linux-x86-64.so.2 \\ -l:ld-linux-x86-64.so.2 $ file hello hello: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, not stripped $ ldd hello /lib64/ld-linux-x86-64.so.2 (0x00007f472a831000) linux-vdso.so.1 (0x00007ffe83d7a000) $ ./hello Hello, world!","title":"Linux: x86-64 syscall"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/linux/asm_syscall/#linux-x86-64-syscall","text":"The syscall number is passed in register rax. Parameters are passed in registers [rdi, rsi, rdx, rcx, r8, r9]. I haven\u2019t found documentation on what x86-64 Linux does for syscalls with more than six parameters. The syscall instruction is used to pass control to the kernel. Linux syscall numbers for x86-64 are defined in arch/x86/entry/syscalls/syscall_64.tbl. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 .data .set .L_STDOUT , 1 .set .L_SYSCALL_EXIT , 60 .set .L_SYSCALL_WRITE , 1 .L_message: .ascii \"Hello, world!\\n\" .set .L_message_len , . - .L_message .text .global _start _start: # write(STDOUT, message, message_len) mov $.L_SYSCALL_WRITE , %rax mov $.L_STDOUT , %rdi mov $.L_message , %rsi mov $.L_message_len , %rdx syscall # exit(0) mov $.L_SYSCALL_EXIT , %rax mov $0 , %rdi syscall static linking 1 2 3 4 5 6 $ as --64 -o hello.o hello.s $ ld -m elf_x86_64 -o hello hello.o $ file hello hello: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, not stripped $ ./hello Hello, world! dynamic linking 1 2 3 4 5 6 7 8 9 10 11 $ as --64 -o hello.o hello.s $ ld -m elf_x86_64 -o hello hello.o \\ --dynamic-linker /lib64/ld-linux-x86-64.so.2 \\ -l:ld-linux-x86-64.so.2 $ file hello hello: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, not stripped $ ldd hello /lib64/ld-linux-x86-64.so.2 (0x00007f472a831000) linux-vdso.so.1 (0x00007ffe83d7a000) $ ./hello Hello, world!","title":"Linux: x86-64 syscall"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/linux/linux_socket_balancing/","text":"\u4e09\u79cd\u5e38\u89c1\u7684socket balancing\u6a21\u5f0f Single listen socket, single worker process. 1 Network stack -> Accept queue -> Worker Single listen socket, multiple worker processes. 1 2 3 -> Worker 1 Network stack -> Accept queue -> Worker 2 -> Worker 3 Multiple worker processes, each with separate listen socket. 1 2 3 -> Accept queue1 -> Worker 1 Network stack -> Accept queue2 -> Worker 2 -> Accept queue3 -> Worker 3 \u65b9\u68482\u4e2d\u901a\u8fc7\u963b\u585e\u7684Accept\u6765\u63a5\u6536\u8fde\u63a5\u4f1a\u5c06\u6240\u6709\u7684\u8fde\u63a5\u5e73\u5747\u5206\u914d\u7ed9\u591a\u4e2aWorker\uff0c\u7c7b\u4f3c\u4e8eRR\u8f6e\u8be2\uff0c\u9075\u5faaFIFO\u6a21\u578b\uff0c \u4f46\u662f\u5982\u679c\u4f7f\u7528epoll\u9488\u5bf9\u975e\u963b\u585e\u7684Accept\u5219\u4f1a\u5bfc\u81f4\u5927\u90e8\u5206\u7684\u8fde\u63a5\u90fd\u88ab\u5206\u914d\u5230\u4e00\u4e2aworker\u4e2d,\u9075\u5faa\u7684\u662fLIFO\u6a21\u578b \u4f1a\u5bfc\u81f4\u8fde\u63a5\u5206\u5e03\u4e0d\u5747\u8861\uff0c\u53ef\u4ee5\u901a\u8fc7SO_REUSEPORT\u521b\u5efa\u591a\u4e2alisten socket\uff0c\u4e5f\u5c31\u662f\u4e0a\u9762\u7684\u65b9\u68483\uff0c\u867d\u7136\u8fd9\u4e2a\u65b9\u6848\u53ef\u4ee5\u4f7f\u5f97\u5404\u4e2aworker\u8fdb\u7a0b\u8d1f\u8f7d\u5747\u8861\uff0c\u4f46\u662f\u4f1a\u5bfc\u81f4\u5ef6\u8fdf\u53d8\u5927 https://blog.cloudflare.com/the-sad-state-of-linux-socket-balancing/ epoll\u7684\u9cb8\u7fa4\u95ee\u9898: The best and the only scalable approach is to use recent Kernel 4.5+ and use level-triggered events with EPOLLEXCLUSIVE flag. This will ensure only one thread is woken for an event, avoid \"thundering herd\" issue and scale properly across multiple CPU's Without EPOLLEXCLUSIVE, similar behavior it can be emulated with edge-triggered and EPOLLONESHOT, at a cost of one extra epoll_ctl() syscall after each event. This will distribute load across multiple CPU's properly, but at most one worker will call accept() at a time, limiting throughput.","title":"\u4e09\u79cd\u5e38\u89c1\u7684socket balancing\u6a21\u5f0f"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/linux/linux_socket_balancing/#socket-balancing","text":"Single listen socket, single worker process. 1 Network stack -> Accept queue -> Worker Single listen socket, multiple worker processes. 1 2 3 -> Worker 1 Network stack -> Accept queue -> Worker 2 -> Worker 3 Multiple worker processes, each with separate listen socket. 1 2 3 -> Accept queue1 -> Worker 1 Network stack -> Accept queue2 -> Worker 2 -> Accept queue3 -> Worker 3 \u65b9\u68482\u4e2d\u901a\u8fc7\u963b\u585e\u7684Accept\u6765\u63a5\u6536\u8fde\u63a5\u4f1a\u5c06\u6240\u6709\u7684\u8fde\u63a5\u5e73\u5747\u5206\u914d\u7ed9\u591a\u4e2aWorker\uff0c\u7c7b\u4f3c\u4e8eRR\u8f6e\u8be2\uff0c\u9075\u5faaFIFO\u6a21\u578b\uff0c \u4f46\u662f\u5982\u679c\u4f7f\u7528epoll\u9488\u5bf9\u975e\u963b\u585e\u7684Accept\u5219\u4f1a\u5bfc\u81f4\u5927\u90e8\u5206\u7684\u8fde\u63a5\u90fd\u88ab\u5206\u914d\u5230\u4e00\u4e2aworker\u4e2d,\u9075\u5faa\u7684\u662fLIFO\u6a21\u578b \u4f1a\u5bfc\u81f4\u8fde\u63a5\u5206\u5e03\u4e0d\u5747\u8861\uff0c\u53ef\u4ee5\u901a\u8fc7SO_REUSEPORT\u521b\u5efa\u591a\u4e2alisten socket\uff0c\u4e5f\u5c31\u662f\u4e0a\u9762\u7684\u65b9\u68483\uff0c\u867d\u7136\u8fd9\u4e2a\u65b9\u6848\u53ef\u4ee5\u4f7f\u5f97\u5404\u4e2aworker\u8fdb\u7a0b\u8d1f\u8f7d\u5747\u8861\uff0c\u4f46\u662f\u4f1a\u5bfc\u81f4\u5ef6\u8fdf\u53d8\u5927 https://blog.cloudflare.com/the-sad-state-of-linux-socket-balancing/ epoll\u7684\u9cb8\u7fa4\u95ee\u9898: The best and the only scalable approach is to use recent Kernel 4.5+ and use level-triggered events with EPOLLEXCLUSIVE flag. This will ensure only one thread is woken for an event, avoid \"thundering herd\" issue and scale properly across multiple CPU's Without EPOLLEXCLUSIVE, similar behavior it can be emulated with edge-triggered and EPOLLONESHOT, at a cost of one extra epoll_ctl() syscall after each event. This will distribute load across multiple CPU's properly, but at most one worker will call accept() at a time, limiting throughput.","title":"\u4e09\u79cd\u5e38\u89c1\u7684socket balancing\u6a21\u5f0f"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/linux/linux_syscall/","text":"kcmp (4.16) \u8fd9\u4e2a\u7cfb\u7edf\u8c03\u7528\u662f\u7528\u4e8e\u63a2\u6d4b\u4e24\u4e2a\u8fdb\u7a0b\u662f\u5426\u5171\u4eab\u4e00\u4e2a\u5185\u6838\u8d44\u6e90\uff0cglibc\u6ca1\u6709\u5c01\u88c5\u8fd9\u4e2a\u7cfb\u7edf\u8c03\u7528\uff0c \u5e76\u4e14\u8fd9\u4e2a\u7cfb\u7edf\u8c03\u7528\u53ea\u5728\u5185\u6838\u914d\u7f6e\u4e86 CONFIG_CHECKPOINT_RESTORE \u9009\u9879\u7684\u65f6\u5019\u624d\u5f00\u542f\uff0c \u8fd9\u4e2a\u7cfb\u7edf\u8c03\u7528\u7684\u76ee\u7684\u662f\u4e3a\u4e86 checkpoint/restore \u7684feature\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 #define _GNU_SOURCE #include <sys/syscall.h> #include <sys/wait.h> #include <sys/stat.h> #include <stdlib.h> #include <stdio.h> #include <unistd.h> #include <fcntl.h> #include <linux/kcmp.h> #define errExit(msg) do { perror(msg); exit(EXIT_FAILURE); \\ } while (0) static int kcmp ( pid_t pid1 , pid_t pid2 , int type , unsigned long idx1 , unsigned long idx2 ) { return syscall ( SYS_kcmp , pid1 , pid2 , type , idx1 , idx2 ); } static void test_kcmp ( char * msg , id_t pid1 , pid_t pid2 , int fd_a , int fd_b ) { printf ( \" \\t %s \\n \" , msg ); printf ( \" \\t\\t kcmp(%ld, %ld, KCMP_FILE, %d, %d) ==> %s \\n \" , ( long ) pid1 , ( long ) pid2 , fd_a , fd_b , ( kcmp ( pid1 , pid2 , KCMP_FILE , fd_a , fd_b ) == 0 ) ? \"same\" : \"different\" ); } int main ( int argc , char * argv []) { int fd1 , fd2 , fd3 ; char pathname [] = \"/tmp/kcmp.test\" ; fd1 = open ( pathname , O_CREAT | O_RDWR , S_IRUSR | S_IWUSR ); if ( fd1 == -1 ) errExit ( \"open\" ); printf ( \"Parent PID is %ld \\n \" , ( long ) getpid ()); printf ( \"Parent opened file on FD %d \\n\\n \" , fd1 ); switch ( fork ()) { case -1 : errExit ( \"fork\" ); case 0 : printf ( \"PID of child of fork() is %ld \\n \" , ( long ) getpid ()); test_kcmp ( \"Compare duplicate FDs from different processes:\" , getpid (), getppid (), fd1 , fd1 ); fd2 = open ( pathname , O_CREAT | O_RDWR , S_IRUSR | S_IWUSR ); if ( fd2 == -1 ) errExit ( \"open\" ); printf ( \"Child opened file on FD %d \\n \" , fd2 ); test_kcmp ( \"Compare FDs from distinct open()s in same process:\" , getpid (), getpid (), fd1 , fd2 ); fd3 = dup ( fd1 ); if ( fd3 == -1 ) errExit ( \"dup\" ); printf ( \"Child duplicated FD %d to create FD %d \\n \" , fd1 , fd3 ); test_kcmp ( \"Compare duplicated FDs in same process:\" , getpid (), getpid (), fd1 , fd3 ); break ; default : wait ( NULL ); } exit ( EXIT_SUCCESS ); } man pages vsock (4.8+) 1 2 3 4 5 #include <sys/socket.h> #include <linux/vm_sockets.h> stream_socket = socket ( AF_VSOCK , SOCK_STREAM , 0 ); datagram_socket = socket ( AF_VSOCK , SOCK_DGRAM , 0 ); \u8fd9\u662f\u4e00\u4e2a\u65b0\u7684socket\u7c7b\u578b\uff0c\u662fLinux\u72ec\u6709\u7684\uff0c\u4e3b\u8981\u662f\u7528\u4e8e\u865a\u62df\u673a\u548c\u5bbf\u4e3b\u673a\u4e4b\u95f4\u7684\u901a\u4fe1\u3002 reference: 1. man pages 2. vsock test mincore \u7528\u4e8e\u5224\u65ad\u4e00\u4e2a\u6587\u4ef6\u662f\u5426\u5728\u5185\u5b58\u4e2d 1 2 3 4 5 6 7 mincore - determine whether pages are resident in memory SYNOPSIS #include <unistd.h> #include <sys/mman.h> int mincore ( void * addr , size_t length , unsigned char * vec ); reference: man pages memfd_create \u521b\u5efa\u4e00\u4e2a\u533f\u540d\u6587\u4ef6\uff0c\u8fd9\u4e2a\u6587\u4ef6\u7684\u884c\u4e3a\u548c\u4e00\u4e2a\u666e\u901a\u6587\u4ef6\u4e00\u6837\uff0c\u4f46\u662f\u548c\u666e\u901a\u6587\u4ef6\u4e0d\u540c\u7684\u662f\uff0c\u8fd9\u4e2a\u6587\u4ef6\u662f\u5b58\u653e\u5728\u5185\u5b58\u4e2d\u7684 \u5f53\u6240\u6709\u5f15\u7528\u4e22\u5931\u7684\u65f6\u5019\u4f1a\u81ea\u52a8\u91ca\u653e\u3002\u901a\u8fc7memfd_create\u521b\u5efa\u4e00\u4e2a\u5927\u5c0f\u4e3a0\u7684\u6587\u4ef6\uff0c\u7136\u540e\u901a\u8fc7ftruncate\u6765\u8bbe\u7f6e\u6587\u4ef6\u5927\u5c0f \u4e5f\u53ef\u4ee5\u901a\u8fc7writer\u8c03\u7528\u6765\u586b\u5145\uff0c\u591a\u4e2a\u6587\u4ef6\u53ef\u4ee5\u5177\u6709\u76f8\u540c\u7684\u540d\u5b57\u3002\u8fd9\u4e2asyscall\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u9650\u5236fd\u7684\u53ef\u7528\u64cd\u4f5c\u6765\u907f\u514d\u53d1\u751f\u4e00\u4e9brace condition\u3002 \u4e00\u822c\u9700\u8981\u7ed3\u5408mmap\u6765\u4f7f\u7528\uff0c\u7b49\u540c\u4e8e\u5728tmpfs\u4e2d\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 File sealing In the absence of file sealing, processes that communicate via shared memory must either trust each other, or take measures to deal with the possibility that an untrusted peer may manipulate the shared memory region in problematic ways. For example, an untrusted peer might modify the contents of the shared memory at any time, or shrink the shared memory region. The former possibility leaves the local process vulnerable to time-of-check-to-time-of-use race conditions (typically dealt with by copying data from the shared memory region before checking and using it). The latter possibility leaves the local process vulnerable to SIGBUS signals when an attempt is made to access a now-nonexistent location in the shared memory region. (Dealing with this possibility necessitates the use of a handler for the SIGBUS signal.) Dealing with untrusted peers imposes extra complexity on code that employs shared memory. Memory sealing enables that extra complexity to be eliminated, by allowing a process to operate secure in the knowledge that its peer can't modify the shared memory in an undesired fashion. \u901a\u8fc7memfd_create\u5c31\u53ef\u4ee5\u5b9e\u73b0File sealing\u6765\u907f\u514d\u5bf9untrusted\u7684\u64cd\u4f5c\u8fdb\u884c\u5904\u7406\u3002\u53ef\u4ee5\u76f4\u63a5\u9650\u5236\u5141\u8bb8\u7684\u64cd\u4f5c\u3002 reference: 1. man pages SOCK_SEQPACKET SOCK_STREAM TCP Socket\u7c7b\u578b SOCK_DGRAM UDP Scoket\u7c7b\u578b SOCK_SEQPACKET \u517c\u5177\u4e86 SOCK_STREAM\u7684\u53ef\u9760\u3001\u987a\u5e8f\u3001\u53cc\u5411\u901a\u4fe1\u7684\u7279\u70b9\uff0c\u53c8\u5177\u5907\u4e86SOCK_DGRAM\u4f20\u8f93\u5b8c\u6574\u5305\u7684\u7279\u70b9\u3002\u4f20\u8f93\u7684\u5305\u5177\u6709\u5b8c\u6574\u7684\u8fb9\u754c\u3001\u4e0d\u4f1a\u62c6\u5305\u3002 TIOCSTI \u53ef\u4ee5\u5f80\u6307\u5b9a\u7684\u7ec8\u7aef\u7684\u8f93\u5165\u7f13\u51b2\u533a\u653e\u7f6e\u76f8\u5173\u7684\u5b57\u7b26 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #include <stdio.h> #include <sys/ioctl.h> #include <sys/types.h> #include <sys/stat.h> #include <fcntl.h> #include <string.h> int main(int argc, char **argv) { char tty[16] = {0}; char cmd[64] = {0}; char tmp[2] = {0}; int len, i; int fd; strncpy(tty, argv[1], strlen(argv[1])); strncpy(cmd, argv[2], strlen(argv[2])); len = strlen(cmd); fd = open(tty, O_RDWR); for (i = 0; i < len; i++) { sprintf(tmp, \"%c \", cmd[i]); ioctl(fd, TIOCSTI, tmp); } ioctl(fd, TIOCSTI, \"\\n \"); } copy_file_range \u53ef\u4ee5\u5feb\u901f\u7684\u5728\u4e24\u4e2a\u6587\u4ef6\u4e2d\u62f7\u8d1d\u6570\u636e\uff0c\u4e0d\u9700\u8981\u5c06\u6570\u636e\u62f7\u8d1d\u5230\u7528\u6237\u6001\uff0c\u7136\u540e\u518d\u4ece\u7528\u6237\u6001\u5199\u5165\u5230\u53e6\u5916\u4e00\u4e2a\u6587\u4ef6\u4e2d\uff0c\u5178\u578b\u7684\u5e94\u7528\u573a\u666f\u50cfCopy-On-Write(\u591a\u4e2a\u6587\u4ef6\u5171\u4eab\u5e95\u5c42\u76f8\u540c\u7684\u6570\u636e\u5757)\u3001NFS\u7b49 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 #define _GNU_SOURCE #include <fcntl.h> #include <stdio.h> #include <stdlib.h> #include <sys/stat.h> #include <unistd.h> int main ( int argc , char ** argv ) { int fd_in , fd_out ; struct stat stat ; off64_t len , ret ; if ( argc != 3 ) { fprintf ( stderr , \"Usage: %s <source> <destination> \\n \" , argv [ 0 ]); exit ( EXIT_FAILURE ); } fd_in = open ( argv [ 1 ], O_RDONLY ); if ( fd_in == -1 ) { perror ( \"open (argv[1])\" ); exit ( EXIT_FAILURE ); } if ( fstat ( fd_in , & stat ) == -1 ) { perror ( \"fstat\" ); exit ( EXIT_FAILURE ); } len = stat . st_size ; fd_out = open ( argv [ 2 ], O_CREAT | O_WRONLY | O_TRUNC , 0644 ); if ( fd_out == -1 ) { perror ( \"open (argv[2])\" ); exit ( EXIT_FAILURE ); } do { ret = copy_file_range ( fd_in , NULL , fd_out , NULL , len , 0 ); if ( ret == -1 ) { perror ( \"copy_file_range\" ); exit ( EXIT_FAILURE ); } len -= ret ; } while ( len > 0 && ret > 0 ); close ( fd_in ); close ( fd_out ); exit ( EXIT_SUCCESS ); } https://man7.org/linux/man-pages/man2/copy_file_range.2.html xstat https://man7.org/linux/man-pages/man2/statx.2.html Restartable sequences https://lwn.net/Articles/650333/ \u672a\u5f52\u7c7b\u7684 https://lwn.net/Articles/789623/ https://man7.org/tlpi/api_changes/index.html","title":"Linux syscall"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/linux/linux_syscall/#kcmp-416","text":"\u8fd9\u4e2a\u7cfb\u7edf\u8c03\u7528\u662f\u7528\u4e8e\u63a2\u6d4b\u4e24\u4e2a\u8fdb\u7a0b\u662f\u5426\u5171\u4eab\u4e00\u4e2a\u5185\u6838\u8d44\u6e90\uff0cglibc\u6ca1\u6709\u5c01\u88c5\u8fd9\u4e2a\u7cfb\u7edf\u8c03\u7528\uff0c \u5e76\u4e14\u8fd9\u4e2a\u7cfb\u7edf\u8c03\u7528\u53ea\u5728\u5185\u6838\u914d\u7f6e\u4e86 CONFIG_CHECKPOINT_RESTORE \u9009\u9879\u7684\u65f6\u5019\u624d\u5f00\u542f\uff0c \u8fd9\u4e2a\u7cfb\u7edf\u8c03\u7528\u7684\u76ee\u7684\u662f\u4e3a\u4e86 checkpoint/restore \u7684feature\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 #define _GNU_SOURCE #include <sys/syscall.h> #include <sys/wait.h> #include <sys/stat.h> #include <stdlib.h> #include <stdio.h> #include <unistd.h> #include <fcntl.h> #include <linux/kcmp.h> #define errExit(msg) do { perror(msg); exit(EXIT_FAILURE); \\ } while (0) static int kcmp ( pid_t pid1 , pid_t pid2 , int type , unsigned long idx1 , unsigned long idx2 ) { return syscall ( SYS_kcmp , pid1 , pid2 , type , idx1 , idx2 ); } static void test_kcmp ( char * msg , id_t pid1 , pid_t pid2 , int fd_a , int fd_b ) { printf ( \" \\t %s \\n \" , msg ); printf ( \" \\t\\t kcmp(%ld, %ld, KCMP_FILE, %d, %d) ==> %s \\n \" , ( long ) pid1 , ( long ) pid2 , fd_a , fd_b , ( kcmp ( pid1 , pid2 , KCMP_FILE , fd_a , fd_b ) == 0 ) ? \"same\" : \"different\" ); } int main ( int argc , char * argv []) { int fd1 , fd2 , fd3 ; char pathname [] = \"/tmp/kcmp.test\" ; fd1 = open ( pathname , O_CREAT | O_RDWR , S_IRUSR | S_IWUSR ); if ( fd1 == -1 ) errExit ( \"open\" ); printf ( \"Parent PID is %ld \\n \" , ( long ) getpid ()); printf ( \"Parent opened file on FD %d \\n\\n \" , fd1 ); switch ( fork ()) { case -1 : errExit ( \"fork\" ); case 0 : printf ( \"PID of child of fork() is %ld \\n \" , ( long ) getpid ()); test_kcmp ( \"Compare duplicate FDs from different processes:\" , getpid (), getppid (), fd1 , fd1 ); fd2 = open ( pathname , O_CREAT | O_RDWR , S_IRUSR | S_IWUSR ); if ( fd2 == -1 ) errExit ( \"open\" ); printf ( \"Child opened file on FD %d \\n \" , fd2 ); test_kcmp ( \"Compare FDs from distinct open()s in same process:\" , getpid (), getpid (), fd1 , fd2 ); fd3 = dup ( fd1 ); if ( fd3 == -1 ) errExit ( \"dup\" ); printf ( \"Child duplicated FD %d to create FD %d \\n \" , fd1 , fd3 ); test_kcmp ( \"Compare duplicated FDs in same process:\" , getpid (), getpid (), fd1 , fd3 ); break ; default : wait ( NULL ); } exit ( EXIT_SUCCESS ); } man pages","title":"kcmp (4.16)"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/linux/linux_syscall/#vsock-48","text":"1 2 3 4 5 #include <sys/socket.h> #include <linux/vm_sockets.h> stream_socket = socket ( AF_VSOCK , SOCK_STREAM , 0 ); datagram_socket = socket ( AF_VSOCK , SOCK_DGRAM , 0 ); \u8fd9\u662f\u4e00\u4e2a\u65b0\u7684socket\u7c7b\u578b\uff0c\u662fLinux\u72ec\u6709\u7684\uff0c\u4e3b\u8981\u662f\u7528\u4e8e\u865a\u62df\u673a\u548c\u5bbf\u4e3b\u673a\u4e4b\u95f4\u7684\u901a\u4fe1\u3002 reference: 1. man pages 2. vsock test","title":"vsock (4.8+)"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/linux/linux_syscall/#mincore","text":"\u7528\u4e8e\u5224\u65ad\u4e00\u4e2a\u6587\u4ef6\u662f\u5426\u5728\u5185\u5b58\u4e2d 1 2 3 4 5 6 7 mincore - determine whether pages are resident in memory SYNOPSIS #include <unistd.h> #include <sys/mman.h> int mincore ( void * addr , size_t length , unsigned char * vec ); reference: man pages","title":"mincore"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/linux/linux_syscall/#memfd_create","text":"\u521b\u5efa\u4e00\u4e2a\u533f\u540d\u6587\u4ef6\uff0c\u8fd9\u4e2a\u6587\u4ef6\u7684\u884c\u4e3a\u548c\u4e00\u4e2a\u666e\u901a\u6587\u4ef6\u4e00\u6837\uff0c\u4f46\u662f\u548c\u666e\u901a\u6587\u4ef6\u4e0d\u540c\u7684\u662f\uff0c\u8fd9\u4e2a\u6587\u4ef6\u662f\u5b58\u653e\u5728\u5185\u5b58\u4e2d\u7684 \u5f53\u6240\u6709\u5f15\u7528\u4e22\u5931\u7684\u65f6\u5019\u4f1a\u81ea\u52a8\u91ca\u653e\u3002\u901a\u8fc7memfd_create\u521b\u5efa\u4e00\u4e2a\u5927\u5c0f\u4e3a0\u7684\u6587\u4ef6\uff0c\u7136\u540e\u901a\u8fc7ftruncate\u6765\u8bbe\u7f6e\u6587\u4ef6\u5927\u5c0f \u4e5f\u53ef\u4ee5\u901a\u8fc7writer\u8c03\u7528\u6765\u586b\u5145\uff0c\u591a\u4e2a\u6587\u4ef6\u53ef\u4ee5\u5177\u6709\u76f8\u540c\u7684\u540d\u5b57\u3002\u8fd9\u4e2asyscall\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u9650\u5236fd\u7684\u53ef\u7528\u64cd\u4f5c\u6765\u907f\u514d\u53d1\u751f\u4e00\u4e9brace condition\u3002 \u4e00\u822c\u9700\u8981\u7ed3\u5408mmap\u6765\u4f7f\u7528\uff0c\u7b49\u540c\u4e8e\u5728tmpfs\u4e2d\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 File sealing In the absence of file sealing, processes that communicate via shared memory must either trust each other, or take measures to deal with the possibility that an untrusted peer may manipulate the shared memory region in problematic ways. For example, an untrusted peer might modify the contents of the shared memory at any time, or shrink the shared memory region. The former possibility leaves the local process vulnerable to time-of-check-to-time-of-use race conditions (typically dealt with by copying data from the shared memory region before checking and using it). The latter possibility leaves the local process vulnerable to SIGBUS signals when an attempt is made to access a now-nonexistent location in the shared memory region. (Dealing with this possibility necessitates the use of a handler for the SIGBUS signal.) Dealing with untrusted peers imposes extra complexity on code that employs shared memory. Memory sealing enables that extra complexity to be eliminated, by allowing a process to operate secure in the knowledge that its peer can't modify the shared memory in an undesired fashion. \u901a\u8fc7memfd_create\u5c31\u53ef\u4ee5\u5b9e\u73b0File sealing\u6765\u907f\u514d\u5bf9untrusted\u7684\u64cd\u4f5c\u8fdb\u884c\u5904\u7406\u3002\u53ef\u4ee5\u76f4\u63a5\u9650\u5236\u5141\u8bb8\u7684\u64cd\u4f5c\u3002 reference: 1. man pages","title":"memfd_create"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/linux/linux_syscall/#sock_seqpacket","text":"SOCK_STREAM TCP Socket\u7c7b\u578b SOCK_DGRAM UDP Scoket\u7c7b\u578b SOCK_SEQPACKET \u517c\u5177\u4e86 SOCK_STREAM\u7684\u53ef\u9760\u3001\u987a\u5e8f\u3001\u53cc\u5411\u901a\u4fe1\u7684\u7279\u70b9\uff0c\u53c8\u5177\u5907\u4e86SOCK_DGRAM\u4f20\u8f93\u5b8c\u6574\u5305\u7684\u7279\u70b9\u3002\u4f20\u8f93\u7684\u5305\u5177\u6709\u5b8c\u6574\u7684\u8fb9\u754c\u3001\u4e0d\u4f1a\u62c6\u5305\u3002","title":"SOCK_SEQPACKET"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/linux/linux_syscall/#tiocsti","text":"\u53ef\u4ee5\u5f80\u6307\u5b9a\u7684\u7ec8\u7aef\u7684\u8f93\u5165\u7f13\u51b2\u533a\u653e\u7f6e\u76f8\u5173\u7684\u5b57\u7b26 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #include <stdio.h> #include <sys/ioctl.h> #include <sys/types.h> #include <sys/stat.h> #include <fcntl.h> #include <string.h> int main(int argc, char **argv) { char tty[16] = {0}; char cmd[64] = {0}; char tmp[2] = {0}; int len, i; int fd; strncpy(tty, argv[1], strlen(argv[1])); strncpy(cmd, argv[2], strlen(argv[2])); len = strlen(cmd); fd = open(tty, O_RDWR); for (i = 0; i < len; i++) { sprintf(tmp, \"%c \", cmd[i]); ioctl(fd, TIOCSTI, tmp); } ioctl(fd, TIOCSTI, \"\\n \"); }","title":"TIOCSTI"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/linux/linux_syscall/#copy_file_range","text":"\u53ef\u4ee5\u5feb\u901f\u7684\u5728\u4e24\u4e2a\u6587\u4ef6\u4e2d\u62f7\u8d1d\u6570\u636e\uff0c\u4e0d\u9700\u8981\u5c06\u6570\u636e\u62f7\u8d1d\u5230\u7528\u6237\u6001\uff0c\u7136\u540e\u518d\u4ece\u7528\u6237\u6001\u5199\u5165\u5230\u53e6\u5916\u4e00\u4e2a\u6587\u4ef6\u4e2d\uff0c\u5178\u578b\u7684\u5e94\u7528\u573a\u666f\u50cfCopy-On-Write(\u591a\u4e2a\u6587\u4ef6\u5171\u4eab\u5e95\u5c42\u76f8\u540c\u7684\u6570\u636e\u5757)\u3001NFS\u7b49 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 #define _GNU_SOURCE #include <fcntl.h> #include <stdio.h> #include <stdlib.h> #include <sys/stat.h> #include <unistd.h> int main ( int argc , char ** argv ) { int fd_in , fd_out ; struct stat stat ; off64_t len , ret ; if ( argc != 3 ) { fprintf ( stderr , \"Usage: %s <source> <destination> \\n \" , argv [ 0 ]); exit ( EXIT_FAILURE ); } fd_in = open ( argv [ 1 ], O_RDONLY ); if ( fd_in == -1 ) { perror ( \"open (argv[1])\" ); exit ( EXIT_FAILURE ); } if ( fstat ( fd_in , & stat ) == -1 ) { perror ( \"fstat\" ); exit ( EXIT_FAILURE ); } len = stat . st_size ; fd_out = open ( argv [ 2 ], O_CREAT | O_WRONLY | O_TRUNC , 0644 ); if ( fd_out == -1 ) { perror ( \"open (argv[2])\" ); exit ( EXIT_FAILURE ); } do { ret = copy_file_range ( fd_in , NULL , fd_out , NULL , len , 0 ); if ( ret == -1 ) { perror ( \"copy_file_range\" ); exit ( EXIT_FAILURE ); } len -= ret ; } while ( len > 0 && ret > 0 ); close ( fd_in ); close ( fd_out ); exit ( EXIT_SUCCESS ); } https://man7.org/linux/man-pages/man2/copy_file_range.2.html","title":"copy_file_range"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/linux/linux_syscall/#xstat","text":"https://man7.org/linux/man-pages/man2/statx.2.html","title":"xstat"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/linux/linux_syscall/#restartable-sequences","text":"https://lwn.net/Articles/650333/","title":"Restartable sequences"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/linux/linux_syscall/#_1","text":"https://lwn.net/Articles/789623/ https://man7.org/tlpi/api_changes/index.html","title":"\u672a\u5f52\u7c7b\u7684"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/linux/shell/","text":"printf(\"%-5s\", xxx) \u5de6\u5bf9\u9f50\uff0c\u5bbd\u5ea6\u662f5\uff0c\u4e0d\u8db3\u7684\u7528\u7a7a\u683c\u8865\u5168 echo -n \u4e0d\u8f93\u51fa\u6362\u884c\u7b26 echo -e \u8f6c\u4e49\u5b57\u7b26\u751f\u6548 \u901a\u8fc7 /proc/$PID/environ \u67e5\u770b\u5176\u4ed6\u8fdb\u7a0b\u7684\u73af\u5883\u53d8\u91cf\uff0c\u662f\u4ee5'\\0'\u6765\u5206\u5272\u591a\u4e2a\u53d8\u91cf ${#var} \u83b7\u53d6\u53d8\u91cf\u7684\u957f\u5ea6 echo $SHELL \u6216 echo $0 \u83b7\u53d6\u5f53\u524d\u7684shell\u7c7b\u578b PS1\u73af\u5883\u53d8\u91cf\u53ef\u4ee5\u7528\u4e8e\u4fee\u6539\u5f53\u524d\u7684\u547d\u4ee4\u884c\u63d0\u793a\u7b26 \u8def\u5f84\u6dfb\u52a0\u51fd\u6570 1 2 3 4 prepend() { [ -d \"$2\" ] && eval $1=\\\"$2':'\\$$1\\\" && export $1; } example: prepend PATH /opt/myapp/bin * ${parameter:+expression} \u5982\u679cparameter\u6709\u503c\u4e0d\u4e3a\u7a7a\uff0c\u5219\u4f7f\u7528expression * ``\u7b97\u6570\u64cd\u4f5c let 1 2 3 4 5 let result=no1+no2 let no1++ let no2++ let no+=6 let no-=6 [] 1 2 result=$[ no1 + no2 ] result=$[ $no1 + 5 ] $(()) 1 result=$(( no1 + 50 )) expr 1 2 result=`expr 3 + 4` result=$(expr $no1 + 5) bc 1 2 3 4 5 6 7 8 9 echo \"4 * 0.56\" | bc no=54 result=`echo \"$no * 1.5\" | bc` echo $result echo \"scale=2;22/7\" | bc np=100 echo \"obase=2;$no\" | bc echo \"obase=10;ibase=2;$no\" | bc echo \"sqrt(100)\" | bc \u91cd\u5b9a\u5411\u5230\u6587\u672c\u5757 1 2 cat << EOF > log.txt EOF \u81ea\u5b9a\u4e49\u63cf\u8ff0\u7b26 1 2 3 exec 3<input.txt exec 4>output.txt exec 5>>output_append.txt","title":"Shell"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/linux/bpf/READMME/","text":"eBPF\u539f\u7406 BPF basic 11\u4e2a64\u4f4d\u5bc4\u5b58\u5668\u3001r0 \u7528\u4e8e\u4fdd\u5b58\u8fd4\u56de\u503c\uff0cr1~r5\u7528\u4e8e\u4fdd\u5b58bpf\u8c03\u7528\u7684\u53c2\u6570\u3001r6~r9\u7528\u4e8e\u88ab\u8c03\u7528\u7684\u51fd\u6570\u5728\u5185\u90e8\u4f7f\u7528 \u6267\u884cBPF\u7a0b\u5e8f\u7684\u65f6\u5019\uff0c\u5bc4\u5b58\u5668r1\u7528\u6237\u5b58\u653econtext\uff0c\u4e0d\u540c\u7c7b\u578b\u7684\u7a0b\u5e8f\u5176context\u5185\u5bb9\u4e0d\u540c\u3002 bpf helper function 1 2 3 4 bpf_map_lookup_elem bpf_map_update_elem bpf_map_delete_elem bpf_map_push_elem XDP generic \u548c XDP native \u524d\u8005\u662f\u5728\u7f51\u5361\u6536\u5230\u5305\u540e\uff0c\u521b\u5efaskb\u7684\u65f6\u5019(\u9700\u8981\u8bbe\u7f6eXDP_FLAGS_SKB_MODE\u542f\u7528)\uff0c\u4f5c\u7528\u5728Linux\u5185\u6838\u5c42\u9762\uff0c \u540e\u8005\u5219\u662f\u76f4\u63a5\u5728\u7f51\u5361\u9a71\u52a8\u5c42\u3002\u524d\u8005\u62ff\u5230\u5305\u540e\u53ef\u4ee5\u4efb\u610f\u5904\u7406\uff0c\u4f46\u662f\u540e\u8005\u8981redirect\u7684\u65f6\u5019\uff0c\u53ea\u80fdredirect\u5230\u53e6\u5916\u4e00\u4e2a\u652f\u6301XDP native\u7684\u8bbe\u5907\u4e2d\u3002 eBPF map per cpu\u7684\uff0c\u591a\u4e2a\u5b9e\u4f8b\u5171\u4eab\u540c\u4e00\u4e2amap\u3002\u907f\u514d\u4e86\u591a\u4e2aCPU cache\u4e4b\u95f4\u8fdb\u884c\u540c\u6b65 tail call \u591a\u4e2aeBPF\u7a0b\u5e8f\u53ef\u4ee5\u7ea7\u8fde\uff0c\u901a\u8fc7 tail call \u6765\u8c03\u7528\u53e6\u5916\u4e00\u4e2aeBPF\u7a0b\u5e8f\u3002 eBPF\u5de5\u4f5c\u6d41 Create an eBPF program Call new new bpf() syscall to inject the program in the kernel and obtain a reference to it Attach the program to a socket (with the new SO_ATTACH_BPF setsockopt() option): setsockopt(socket, SOL_SOCKET, SO_ATTACH_BPF, &fd, sizeof(fd)); where \u201csocket\u201d represents the socket of interest, and \u201cfd\u201d holds the file descriptor for the loaded eBPF program Once the program is loaded, it will be fired on each packet that shows up on the given socket limitation: programs cannot do anything to influence the delivery or contents of the packet These programs are not actually \u201cfilters\u201d; all they can do is store information in eBPF \u201cmaps\u201d for consumption by user space USDT(Userland Statically Defined Tracepoints) DTRACE_PROBE\uff0c\u5b9a\u4e49\u7528\u6237\u6001\u7684tracepoint\uff0c\u9700\u8981\u5f15\u5165systemtap-sdt-dev\u5305\uff0c\u5e76\u5305\u542b #include <sys/sdt.h> \u5934\u6587\u4ef6 eBPF\u8f7d\u5165\u7a0b\u5e8f\u540e\u4f1a\u8fdb\u884c\u6df1\u5ea6\u641c\u7d22CFG\u6765\u68c0\u6d4b\uff0c\u5982\u679c\u53d1\u73b0\u4e0d\u53ef\u8fbe\u7684\u6307\u4ee4\u5c31\u7981\u6b62\u6267\u884c\u3001 BPF verifier. Providing a verdict for kernel whether safe to run Simulation of execution of all paths of the program Steps involved (extract): Checking control flow graph for loops Detecting out of range jumps, unreachable instructions Tracking context access, initialized memory, stack spill/fills Checking unpriviledged pointer leaks Verifying helper function call arguments Value and alignment tracking for data access (pkt pointer, map access) Register liveness analysis for pruning State pruning for reducing verification complexity bcc 1 2 3 4 5 6 7 // 1. \u7b2c\u4e00\u79cd\u5f62\u5f0f BPF ( text = \"BPF\u7a0b\u5e8f\u4ee3\u7801\" ) . trace_print () // 2. \u7b2c\u4e8c\u79cd\u5f62\u5f0f b = BPF ( text = \"BPF\u7a0b\u5e8f\u4ee3\u7801\" ) b . attach_kprobe ( event = \"syscall\u540d\u79f0\" , fn_name = \"\u56de\u8c03BPF\u7a0b\u5e8f\u4ee3\u7801\u4e2d\u5bf9\u5e94\u540d\u79f0\u7684\u51fd\u6570\" ) b . trace_fields () // \u5c06\u8f93\u51fa\u4fe1\u606f\u6309\u7167\u5b57\u6bb5\u5206\u5272\u7684\u5f62\u5f0f\u8f93\u51fa ( task , pid , cpu , flags , ts , msg ) bpf_ktime_get_ns \u83b7\u53d6\u5f53\u524d\u65f6\u95f4\uff0c\u5355\u4f4d\u662fnanoseconds BPF_HASH(last) \u521b\u5efa\u540d\u4e3alast\u7684\u5173\u8054\u6570\u7ec4\uff0c\u5982\u679c\u6ca1\u6709\u6307\u5b9a\u989d\u5916\u53c2\u6570\u7684\u5316\uff0ckey\u548cvalue\u7684\u7c7b\u578b\u90fd\u662fu64 last.lookup(&key) \u67e5\u8be2key\u662f\u5426\u5728hash\u4e2d\uff0c\u4e0d\u5728\u5c31\u8fd4\u56deNULL last.delete(&key) \u4ecehash\u4e2d\u5220\u9664key last.update(&key, &value) \u66f4\u65b0\u6570\u636e bpf_trace_printk bpf\u7a0b\u5e8f\u8f93\u51fa bpf\u7a0b\u5e8f\u4e2d\u6240\u6709\u8981\u8fd0\u884c\u7684\u51fd\u6570\uff0c\u5176\u7b2c\u4e00\u4e2a\u53c2\u6570\u90fd\u9700\u8981\u662f struct pt_regs* bpf_get_current_pid_tgid \u8fd4\u56de\u8fdb\u7a0bPID bpf_get_current_comm \u83b7\u53d6\u5f53\u524d\u7a0b\u5e8f\u540d\u79f0 BPF_PERF_OUTPUT(events) \u5b9a\u4e49\u8f93\u51fa\u7684channel\u540d\u79f0 events.perf_submit() \u63d0\u4ea4event\u5230\u7528\u6237\u7a7a\u95f4 b[\"events\"].open_perf_buffer(print_event) \u628a\u8f93\u51fa\u51fd\u6570\u548c\u8f93\u51fa\u7684channel\u5173\u8054\u8d77\u6765 b.perf_buffer_poll() \u963b\u585e\u7b49\u5f85events BPF_HISTOGRAM \u5b9a\u4e49BPF Map\u5bf9\u8c61\uff0c\u8fd9\u662f\u4e00\u4e2ahistogram(dist.increment()bucket\u9012\u589e) bpf_log2l \u8fd4\u56delog2\u51fd\u6570\u8ba1\u7b97\u7684\u7ed3\u679c\u3002 b[\"dist\"].print_log2_hist(\"kbytes\") \u6309\u7167log2\u4f5c\u4e3akey\uff0ckbytes\u4f5c\u4e3aheader\uff0c\u6253\u5370dist\u8fd9\u4e2ahistogram\u4e2d\u7684\u6570\u636e attach_kretprobe attach\u5230\u4e00\u4e2a\u5185\u6838\u51fd\u6570\u7684 return \u70b9 BPF(src_file = \"vfsreadlat.c\") \u4ece\u6e90\u7801\u4e2d\u8bfb\u53d6BPF\u7a0b\u5e8f attach_uprobe attach\u5230\u4e00\u4e2auprobe PT_REGS_PARM1 \u83b7\u53d6\u5230\u8981trace\u7684\u51fd\u6570\u4e2d\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570 bpf_usdt_readarg(6, ctx, &addr) \u8bfb\u53d6USDT probe\u7684\u7b2c\u516d\u4e2a\u53c2\u6570\u5230addr\u53d8\u91cf\u4e2d bpf_probe_read(&path, sizeof(path), (void *)addr) \u5c06addr\u4e2d\u7684\u5185\u5bb9\u8bfb\u53d6\u51fa\u6765\u8d4b\u503c\u7ed9path\u53d8\u91cf\uff0c\u53ef\u4ee5\u7406\u89e3\u662f\u5b89\u5168\u7248\u672c\u7684memcpy USDT(pid=int(pid)) \u5bf9\u6307\u5b9aPID\u5f00\u542fUSDT tracing\u529f\u80fd enable_probe(probe=\"http__server__request\", fn_name=\"do_trace\") attach do_trace\u51fd\u6570\u5230Node.js\u7684 http__server__request USDT probe BPF(text=bpf_text, usdt_contexts=[u]) \u5c06USDT\u5bf9\u8c61u\u4f20\u9012\u7ed9BPF\u5bf9\u8c61 uprobe \u6838\u5fc3\u5c31\u662f b.attach_uretprobe(name=name, sym=\"readline\", fn_name=\"printret\") \u8fd9\u6bb5\u4ee3\u7801\uff0c\u5171\u4eab\u5e93\u4f4d\u7f6e/\u4e8c\u8fdb\u5236\u4f4d\u7f6e\uff0c\u8981uprobe\u7684\u7b26\u53f7\u540d\u79f0\uff0c\u89e6\u53d1\u7684function 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 # load BPF program bpf_text = \"\"\" #include <uapi/linux/ptrace.h> struct str_t { u64 pid; char str[80]; }; //Setp1: \u5b9a\u4e49\u8f93\u51fa\u7684events BPF_PERF_OUTPUT(events); int printret(struct pt_regs *ctx) { // Setp2: \u81ea\u5b9a\u4e49event\u7684\u7ed3\u6784 struct str_t data = {} ; u32 pid; if (!PT_REGS_RC(ctx)) return 0; pid = bpf_get_current_pid_tgid(); data.pid = pid; bpf_probe_read(&data.str, sizeof(data.str), (void *)PT_REGS_RC(ctx)); // Setp3: \u63d0\u4ea4event events.perf_submit(ctx,&data,sizeof(data)); return 0; }; \"\"\" b = BPF ( text = bpf_text ) # name\u662f\u5171\u4eab\u5e93\u6216\u8005\u662f\u53ef\u6267\u884c\u7a0b\u5e8f\u5230\u8fbe\u540d\u79f0 b . attach_uretprobe ( name = name , sym = \"readline\" , fn_name = \"printret\" ) # header print ( \" %-9s %-6s %s \" % ( \"TIME\" , \"PID\" , \"COMMAND\" )) def print_event ( cpu , data , size ): event = b [ \"events\" ] . event ( data ) print ( \" %-9s %-6d %s \" % ( strftime ( \"%H:%M:%S\" ), event . pid , event . str . decode ( 'utf-8' , 'replace' ))) b [ \"events\" ] . open_perf_buffer ( print_event ) while 1 : try : b . perf_buffer_poll () except KeyboardInterrupt : exit () tracepoint 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 from __future__ import print_function from bcc import BPF from bcc.utils import printb # load BPF program b = BPF ( text = \"\"\" // module\u540d\u548cevent\u540d TRACEPOINT_PROBE(random, urandom_read) { // args is from /sys/kernel/debug/tracing/events/random/urandom_read/format bpf_trace_printk(\" %d \\\\ n\", args->got_bits); return 0; } \"\"\" ) # header print ( \" %-18s %-16s %-6s %s \" % ( \"TIME(s)\" , \"COMM\" , \"PID\" , \"GOTBITS\" )) # format output while 1 : try : ( task , pid , cpu , flags , ts , msg ) = b . trace_fields () except ValueError : continue except KeyboardInterrupt : exit () printb ( b \" %-18.9f %-16s %-6d %s \" % ( ts , task , pid , msg ))","title":"READMME"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/linux/bpf/READMME/#ebpf","text":"","title":"eBPF\u539f\u7406"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/linux/bpf/READMME/#bpf-basic","text":"11\u4e2a64\u4f4d\u5bc4\u5b58\u5668\u3001r0 \u7528\u4e8e\u4fdd\u5b58\u8fd4\u56de\u503c\uff0cr1~r5\u7528\u4e8e\u4fdd\u5b58bpf\u8c03\u7528\u7684\u53c2\u6570\u3001r6~r9\u7528\u4e8e\u88ab\u8c03\u7528\u7684\u51fd\u6570\u5728\u5185\u90e8\u4f7f\u7528 \u6267\u884cBPF\u7a0b\u5e8f\u7684\u65f6\u5019\uff0c\u5bc4\u5b58\u5668r1\u7528\u6237\u5b58\u653econtext\uff0c\u4e0d\u540c\u7c7b\u578b\u7684\u7a0b\u5e8f\u5176context\u5185\u5bb9\u4e0d\u540c\u3002","title":"BPF basic"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/linux/bpf/READMME/#bpf-helper-function","text":"1 2 3 4 bpf_map_lookup_elem bpf_map_update_elem bpf_map_delete_elem bpf_map_push_elem","title":"bpf helper function"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/linux/bpf/READMME/#xdp-generic-xdp-native","text":"\u524d\u8005\u662f\u5728\u7f51\u5361\u6536\u5230\u5305\u540e\uff0c\u521b\u5efaskb\u7684\u65f6\u5019(\u9700\u8981\u8bbe\u7f6eXDP_FLAGS_SKB_MODE\u542f\u7528)\uff0c\u4f5c\u7528\u5728Linux\u5185\u6838\u5c42\u9762\uff0c \u540e\u8005\u5219\u662f\u76f4\u63a5\u5728\u7f51\u5361\u9a71\u52a8\u5c42\u3002\u524d\u8005\u62ff\u5230\u5305\u540e\u53ef\u4ee5\u4efb\u610f\u5904\u7406\uff0c\u4f46\u662f\u540e\u8005\u8981redirect\u7684\u65f6\u5019\uff0c\u53ea\u80fdredirect\u5230\u53e6\u5916\u4e00\u4e2a\u652f\u6301XDP native\u7684\u8bbe\u5907\u4e2d\u3002","title":"XDP generic \u548c XDP native"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/linux/bpf/READMME/#ebpf-map","text":"per cpu\u7684\uff0c\u591a\u4e2a\u5b9e\u4f8b\u5171\u4eab\u540c\u4e00\u4e2amap\u3002\u907f\u514d\u4e86\u591a\u4e2aCPU cache\u4e4b\u95f4\u8fdb\u884c\u540c\u6b65","title":"eBPF map"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/linux/bpf/READMME/#tail-call","text":"\u591a\u4e2aeBPF\u7a0b\u5e8f\u53ef\u4ee5\u7ea7\u8fde\uff0c\u901a\u8fc7 tail call \u6765\u8c03\u7528\u53e6\u5916\u4e00\u4e2aeBPF\u7a0b\u5e8f\u3002","title":"tail call"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/linux/bpf/READMME/#ebpf_1","text":"Create an eBPF program Call new new bpf() syscall to inject the program in the kernel and obtain a reference to it Attach the program to a socket (with the new SO_ATTACH_BPF setsockopt() option): setsockopt(socket, SOL_SOCKET, SO_ATTACH_BPF, &fd, sizeof(fd)); where \u201csocket\u201d represents the socket of interest, and \u201cfd\u201d holds the file descriptor for the loaded eBPF program Once the program is loaded, it will be fired on each packet that shows up on the given socket limitation: programs cannot do anything to influence the delivery or contents of the packet These programs are not actually \u201cfilters\u201d; all they can do is store information in eBPF \u201cmaps\u201d for consumption by user space","title":"eBPF\u5de5\u4f5c\u6d41"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/linux/bpf/READMME/#usdtuserland-statically-defined-tracepoints","text":"DTRACE_PROBE\uff0c\u5b9a\u4e49\u7528\u6237\u6001\u7684tracepoint\uff0c\u9700\u8981\u5f15\u5165systemtap-sdt-dev\u5305\uff0c\u5e76\u5305\u542b #include <sys/sdt.h> \u5934\u6587\u4ef6 eBPF\u8f7d\u5165\u7a0b\u5e8f\u540e\u4f1a\u8fdb\u884c\u6df1\u5ea6\u641c\u7d22CFG\u6765\u68c0\u6d4b\uff0c\u5982\u679c\u53d1\u73b0\u4e0d\u53ef\u8fbe\u7684\u6307\u4ee4\u5c31\u7981\u6b62\u6267\u884c\u3001","title":"USDT(Userland Statically Defined Tracepoints)"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/linux/bpf/READMME/#bpf-verifier","text":"Providing a verdict for kernel whether safe to run Simulation of execution of all paths of the program Steps involved (extract): Checking control flow graph for loops Detecting out of range jumps, unreachable instructions Tracking context access, initialized memory, stack spill/fills Checking unpriviledged pointer leaks Verifying helper function call arguments Value and alignment tracking for data access (pkt pointer, map access) Register liveness analysis for pruning State pruning for reducing verification complexity","title":"BPF verifier."},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/linux/bpf/READMME/#bcc","text":"1 2 3 4 5 6 7 // 1. \u7b2c\u4e00\u79cd\u5f62\u5f0f BPF ( text = \"BPF\u7a0b\u5e8f\u4ee3\u7801\" ) . trace_print () // 2. \u7b2c\u4e8c\u79cd\u5f62\u5f0f b = BPF ( text = \"BPF\u7a0b\u5e8f\u4ee3\u7801\" ) b . attach_kprobe ( event = \"syscall\u540d\u79f0\" , fn_name = \"\u56de\u8c03BPF\u7a0b\u5e8f\u4ee3\u7801\u4e2d\u5bf9\u5e94\u540d\u79f0\u7684\u51fd\u6570\" ) b . trace_fields () // \u5c06\u8f93\u51fa\u4fe1\u606f\u6309\u7167\u5b57\u6bb5\u5206\u5272\u7684\u5f62\u5f0f\u8f93\u51fa ( task , pid , cpu , flags , ts , msg ) bpf_ktime_get_ns \u83b7\u53d6\u5f53\u524d\u65f6\u95f4\uff0c\u5355\u4f4d\u662fnanoseconds BPF_HASH(last) \u521b\u5efa\u540d\u4e3alast\u7684\u5173\u8054\u6570\u7ec4\uff0c\u5982\u679c\u6ca1\u6709\u6307\u5b9a\u989d\u5916\u53c2\u6570\u7684\u5316\uff0ckey\u548cvalue\u7684\u7c7b\u578b\u90fd\u662fu64 last.lookup(&key) \u67e5\u8be2key\u662f\u5426\u5728hash\u4e2d\uff0c\u4e0d\u5728\u5c31\u8fd4\u56deNULL last.delete(&key) \u4ecehash\u4e2d\u5220\u9664key last.update(&key, &value) \u66f4\u65b0\u6570\u636e bpf_trace_printk bpf\u7a0b\u5e8f\u8f93\u51fa bpf\u7a0b\u5e8f\u4e2d\u6240\u6709\u8981\u8fd0\u884c\u7684\u51fd\u6570\uff0c\u5176\u7b2c\u4e00\u4e2a\u53c2\u6570\u90fd\u9700\u8981\u662f struct pt_regs* bpf_get_current_pid_tgid \u8fd4\u56de\u8fdb\u7a0bPID bpf_get_current_comm \u83b7\u53d6\u5f53\u524d\u7a0b\u5e8f\u540d\u79f0 BPF_PERF_OUTPUT(events) \u5b9a\u4e49\u8f93\u51fa\u7684channel\u540d\u79f0 events.perf_submit() \u63d0\u4ea4event\u5230\u7528\u6237\u7a7a\u95f4 b[\"events\"].open_perf_buffer(print_event) \u628a\u8f93\u51fa\u51fd\u6570\u548c\u8f93\u51fa\u7684channel\u5173\u8054\u8d77\u6765 b.perf_buffer_poll() \u963b\u585e\u7b49\u5f85events BPF_HISTOGRAM \u5b9a\u4e49BPF Map\u5bf9\u8c61\uff0c\u8fd9\u662f\u4e00\u4e2ahistogram(dist.increment()bucket\u9012\u589e) bpf_log2l \u8fd4\u56delog2\u51fd\u6570\u8ba1\u7b97\u7684\u7ed3\u679c\u3002 b[\"dist\"].print_log2_hist(\"kbytes\") \u6309\u7167log2\u4f5c\u4e3akey\uff0ckbytes\u4f5c\u4e3aheader\uff0c\u6253\u5370dist\u8fd9\u4e2ahistogram\u4e2d\u7684\u6570\u636e attach_kretprobe attach\u5230\u4e00\u4e2a\u5185\u6838\u51fd\u6570\u7684 return \u70b9 BPF(src_file = \"vfsreadlat.c\") \u4ece\u6e90\u7801\u4e2d\u8bfb\u53d6BPF\u7a0b\u5e8f attach_uprobe attach\u5230\u4e00\u4e2auprobe PT_REGS_PARM1 \u83b7\u53d6\u5230\u8981trace\u7684\u51fd\u6570\u4e2d\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570 bpf_usdt_readarg(6, ctx, &addr) \u8bfb\u53d6USDT probe\u7684\u7b2c\u516d\u4e2a\u53c2\u6570\u5230addr\u53d8\u91cf\u4e2d bpf_probe_read(&path, sizeof(path), (void *)addr) \u5c06addr\u4e2d\u7684\u5185\u5bb9\u8bfb\u53d6\u51fa\u6765\u8d4b\u503c\u7ed9path\u53d8\u91cf\uff0c\u53ef\u4ee5\u7406\u89e3\u662f\u5b89\u5168\u7248\u672c\u7684memcpy USDT(pid=int(pid)) \u5bf9\u6307\u5b9aPID\u5f00\u542fUSDT tracing\u529f\u80fd enable_probe(probe=\"http__server__request\", fn_name=\"do_trace\") attach do_trace\u51fd\u6570\u5230Node.js\u7684 http__server__request USDT probe BPF(text=bpf_text, usdt_contexts=[u]) \u5c06USDT\u5bf9\u8c61u\u4f20\u9012\u7ed9BPF\u5bf9\u8c61","title":"bcc"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/linux/bpf/READMME/#uprobe","text":"\u6838\u5fc3\u5c31\u662f b.attach_uretprobe(name=name, sym=\"readline\", fn_name=\"printret\") \u8fd9\u6bb5\u4ee3\u7801\uff0c\u5171\u4eab\u5e93\u4f4d\u7f6e/\u4e8c\u8fdb\u5236\u4f4d\u7f6e\uff0c\u8981uprobe\u7684\u7b26\u53f7\u540d\u79f0\uff0c\u89e6\u53d1\u7684function 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 # load BPF program bpf_text = \"\"\" #include <uapi/linux/ptrace.h> struct str_t { u64 pid; char str[80]; }; //Setp1: \u5b9a\u4e49\u8f93\u51fa\u7684events BPF_PERF_OUTPUT(events); int printret(struct pt_regs *ctx) { // Setp2: \u81ea\u5b9a\u4e49event\u7684\u7ed3\u6784 struct str_t data = {} ; u32 pid; if (!PT_REGS_RC(ctx)) return 0; pid = bpf_get_current_pid_tgid(); data.pid = pid; bpf_probe_read(&data.str, sizeof(data.str), (void *)PT_REGS_RC(ctx)); // Setp3: \u63d0\u4ea4event events.perf_submit(ctx,&data,sizeof(data)); return 0; }; \"\"\" b = BPF ( text = bpf_text ) # name\u662f\u5171\u4eab\u5e93\u6216\u8005\u662f\u53ef\u6267\u884c\u7a0b\u5e8f\u5230\u8fbe\u540d\u79f0 b . attach_uretprobe ( name = name , sym = \"readline\" , fn_name = \"printret\" ) # header print ( \" %-9s %-6s %s \" % ( \"TIME\" , \"PID\" , \"COMMAND\" )) def print_event ( cpu , data , size ): event = b [ \"events\" ] . event ( data ) print ( \" %-9s %-6d %s \" % ( strftime ( \"%H:%M:%S\" ), event . pid , event . str . decode ( 'utf-8' , 'replace' ))) b [ \"events\" ] . open_perf_buffer ( print_event ) while 1 : try : b . perf_buffer_poll () except KeyboardInterrupt : exit ()","title":"uprobe"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/linux/bpf/READMME/#tracepoint","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 from __future__ import print_function from bcc import BPF from bcc.utils import printb # load BPF program b = BPF ( text = \"\"\" // module\u540d\u548cevent\u540d TRACEPOINT_PROBE(random, urandom_read) { // args is from /sys/kernel/debug/tracing/events/random/urandom_read/format bpf_trace_printk(\" %d \\\\ n\", args->got_bits); return 0; } \"\"\" ) # header print ( \" %-18s %-16s %-6s %s \" % ( \"TIME(s)\" , \"COMM\" , \"PID\" , \"GOTBITS\" )) # format output while 1 : try : ( task , pid , cpu , flags , ts , msg ) = b . trace_fields () except ValueError : continue except KeyboardInterrupt : exit () printb ( b \" %-18.9f %-16s %-6d %s \" % ( ts , task , pid , msg ))","title":"tracepoint"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/linux/bpf/seccomp-bpf/","text":"\u4e00\u4e2aseccomp\u7684example 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #include <unistd.h> #include <seccomp.h> #include <linux/seccomp.h> int main ( void ){ // \u6784\u9020ctx\uff0c\u7136\u540e\u901a\u8fc7seccomp_load\u8f7d\u5165ctx\u8fdb\u884c\u62e6\u622a scmp_filter_ctx ctx ; // \u8bbe\u7f6e\u9ed8\u8ba4\u7684ctx\u89c4\u5219\uff0cSCMP_ACT_ALLOW\u8868\u793a\u9ed8\u8ba4\u5141\u8bb8\uff0cSCMP_ACT_KILL\u9ed8\u8ba4\u7981\u6b62 ctx = seccomp_init ( SCMP_ACT_ALLOW ); // \u5f80ctx\u4e2d\u6dfb\u52a0\u89c4\u5219 seccomp_rule_add ( ctx , SCMP_ACT_KILL , SCMP_SYS ( execve ), 0 ); seccomp_load ( ctx ); char * filename = \"/bin/sh\" ; char * argv [] = { \"/bin/sh\" , NULL }; char * envp [] = { NULL }; write ( 1 , \"i will give you a shell \\n \" , 24 ); syscall ( 59 , filename , argv , envp ); //execve return 0 ; } \u53ea\u62e6\u622a\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e3a10\u7684write\u7cfb\u7edf\u8c03\u7528 1 2 3 4 5 6 7 8 9 10 11 12 13 #include <unistd.h> #include <seccomp.h> #include <linux/seccomp.h> int main ( void ){ scmp_filter_ctx ctx ; ctx = seccomp_init ( SCMP_ACT_ALLOW ); seccomp_rule_add ( ctx , SCMP_ACT_KILL , SCMP_SYS ( write ), 1 , SCMP_A2 ( SCMP_CMP_EQ , 0x10 )); //\u7b2c2(\u4ece0)\u4e2a\u53c2\u6570\u7b49\u4e8e0x10 seccomp_load ( ctx ); write ( 1 , \"i will give you a shell \\n \" , 24 ); //\u4e0d\u88ab\u62e6\u622a write ( 1 , \"1234567812345678\" , 0x10 ); //\u88ab\u62e6\u622a return 0 ; } \u901a\u8fc7prctl\u6765\u8bbe\u7f6eseccomp bpf filter 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 #include <unistd.h> #include <sys/prctl.h> #include <linux/filter.h> #include <linux/seccomp.h> int main ( void ){ prctl ( PR_SET_NO_NEW_PRIVS , 1 , 0 , 0 , 0 ); struct sock_filter sfi [] = { { 0x20 , 0x00 , 0x00 , 0x00000004 }, { 0x15 , 0x00 , 0x09 , 0xc000003e }, { 0x20 , 0x00 , 0x00 , 0x00000000 }, { 0x35 , 0x07 , 0x00 , 0x40000000 }, { 0x15 , 0x06 , 0x00 , 0x0000003b }, { 0x15 , 0x00 , 0x04 , 0x00000001 }, { 0x20 , 0x00 , 0x00 , 0x00000024 }, { 0x15 , 0x00 , 0x02 , 0x00000000 }, { 0x20 , 0x00 , 0x00 , 0x00000020 }, { 0x15 , 0x01 , 0x00 , 0x00000010 }, { 0x06 , 0x00 , 0x00 , 0x7fff0000 }, { 0x06 , 0x00 , 0x00 , 0x00000000 } }; struct sock_fprog sfp = { 12 , sfi }; prctl ( PR_SET_SECCOMP , SECCOMP_MODE_FILTER , & sfp ); char * filename = \"/bin/sh\" ; char * argv [] = { \"/bin/sh\" , NULL }; char * envp [] = { NULL }; write ( 1 , \"i will give you a shell \\n \" , 24 ); write ( 1 , \"1234567812345678\" , 0x10 ); syscall ( 0x4000003b , filename , argv , envp ); //execve return 0 ; }","title":"Seccomp bpf"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/linux/ftrace/","text":"\u5f00\u542fftrace 1 2 sudo mount -t debugfs nodev /sys/kernel/debug/ sudo bash -c \"echo 1 > /sys/kernel/debug/tracing/tracing_on\" trace cmd record - record a trace into a trace.dat file start - start tracing without recording into a file extract - extract a trace from the kernel stop - stop the kernel from recording trace data show - show the contents of the kernel tracing buffer reset - disable all kernel tracing and clear the trace buffers report - read out the trace stored in a trace.dat file hist - show a historgram of the trace.dat information split - parse a trace.dat file into smaller file(s) options - list the plugin options available for trace-cmd report listen - listen on a network socket for trace clients list - list the available events, plugins or options restore - restore a crashed record snapshot - take snapshot of running trace stack - output, enable or disable kernel stack tracing check-events - parse trace event formats git://git.kernel.org/pub/scm/linux/kernel/git/rostedt/trace-cmd.git Function tracing 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 // function tracing # cd /sys/kernel/debug/tracing # echo function > current_tracer # cat trace // ditto # trace-cmd start -p function # trace-cmd show // stop tarcing # echo nop > current_tracer # cat trace # trace-cmd start -p nop // function graph tracing # echo function_graph > current_tracer # cat trace # trace-cmd start -p function_graph -g SyS_read # trace-cmd show // function tracing filter # set_ftrace_filter // \u53ea\u5bf9\u76f8\u5173\u7684\u51fd\u8fdb\u884ctracing # set_ftrace_notrace // \u4e0d\u5bf9\u5217\u5728\u5176\u4e2d\u7684\u51fd\u6570\u8fdb\u884ctracing\uff0c\u4f1a\u8986\u76d6set_ftrace_filter\u4e2d\u7684\u5185\u5bb9 # available_filter_functions // \u5217\u51fa\u53ef\u4ee5\u52a0\u5165\u5230\u4e0a\u8ff0\u6587\u4ef6\u4e2d\u7684\u51fd\u6570\u5217\u8868 # set_graph_function // \u5bf9\u6307\u5b9a\u51fd\u6570\uff0c\u751f\u6210function graph # max_graph_depth Function triggers <function-name>:<trigger>:<count> trigger: 1. traceoff 2. traceon 3. stacktrace 4. dump 5. cpudump 6. enable_event/disable_event uprobe tracer https://www.kernel.org/doc/html/v4.17/trace/uprobetracer.html","title":"Index"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/linux/ftrace/#ftrace","text":"1 2 sudo mount -t debugfs nodev /sys/kernel/debug/ sudo bash -c \"echo 1 > /sys/kernel/debug/tracing/tracing_on\"","title":"\u5f00\u542fftrace"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/linux/ftrace/#trace-cmd","text":"record - record a trace into a trace.dat file start - start tracing without recording into a file extract - extract a trace from the kernel stop - stop the kernel from recording trace data show - show the contents of the kernel tracing buffer reset - disable all kernel tracing and clear the trace buffers report - read out the trace stored in a trace.dat file hist - show a historgram of the trace.dat information split - parse a trace.dat file into smaller file(s) options - list the plugin options available for trace-cmd report listen - listen on a network socket for trace clients list - list the available events, plugins or options restore - restore a crashed record snapshot - take snapshot of running trace stack - output, enable or disable kernel stack tracing check-events - parse trace event formats git://git.kernel.org/pub/scm/linux/kernel/git/rostedt/trace-cmd.git","title":"trace cmd"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/linux/ftrace/#function-tracing","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 // function tracing # cd /sys/kernel/debug/tracing # echo function > current_tracer # cat trace // ditto # trace-cmd start -p function # trace-cmd show // stop tarcing # echo nop > current_tracer # cat trace # trace-cmd start -p nop // function graph tracing # echo function_graph > current_tracer # cat trace # trace-cmd start -p function_graph -g SyS_read # trace-cmd show // function tracing filter # set_ftrace_filter // \u53ea\u5bf9\u76f8\u5173\u7684\u51fd\u8fdb\u884ctracing # set_ftrace_notrace // \u4e0d\u5bf9\u5217\u5728\u5176\u4e2d\u7684\u51fd\u6570\u8fdb\u884ctracing\uff0c\u4f1a\u8986\u76d6set_ftrace_filter\u4e2d\u7684\u5185\u5bb9 # available_filter_functions // \u5217\u51fa\u53ef\u4ee5\u52a0\u5165\u5230\u4e0a\u8ff0\u6587\u4ef6\u4e2d\u7684\u51fd\u6570\u5217\u8868 # set_graph_function // \u5bf9\u6307\u5b9a\u51fd\u6570\uff0c\u751f\u6210function graph # max_graph_depth","title":"Function tracing"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/linux/ftrace/#function-triggers","text":"<function-name>:<trigger>:<count> trigger: 1. traceoff 2. traceon 3. stacktrace 4. dump 5. cpudump 6. enable_event/disable_event","title":"Function triggers"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/linux/ftrace/#uprobe-tracer","text":"https://www.kernel.org/doc/html/v4.17/trace/uprobetracer.html","title":"uprobe tracer"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/linux/fuse/","text":"low level #include <cuse_lowlevel.h>","title":"Index"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/linux/fuse/#low-level","text":"#include <cuse_lowlevel.h>","title":"low level"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/linux/io/io_uring/","text":"","title":"Io uring"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/linux/network/","text":"Ingress - they're coming Packets arrive at the NIC NIC will verify MAC (if not on promiscuous mode) and FCS(FCS\uff1aFrame Check Sequence\uff08\u5e27\u6821\u9a8c\u5e8f\u5217) and decide to drop or to continue NIC will DMA packets at RAM , in a region previously prepared (mapped) by the driver Packet is copied (via DMA) to a ring buffer in kernel memory. 1 2 3 // \u7f51\u5361\u8bbe\u5907\u7684ring buffer\u5927\u5c0f Check command: ethtool -g ethX Change command: ethtool -G ethX rx value tx value NIC will enqueue references to the packets at receive ring buffer queue rx until rx-usecs(\u8d85\u65f6\u65f6\u95f4\uff0c\u53ea\u6709\u5230\u4e86\u8fd9\u4e2a\u8d85\u65f6\u65f6\u95f4\u624d\u89e6\u53d1\u786c\u4e2d\u65ad\uff0c\u907f\u514d\u5927\u91cf\u4e2d\u65ad) timeout or rx-frames(\u7f51\u5361\u6536\u5230\u6307\u5b9a\u6570\u91cf\u7684\u5305\uff0c\u624d\u4f1a\u89e6\u53d1\u786c\u4ef6\u4e2d\u65ad) 1 2 3 4 5 6 7 8 # ethtool \u2013C eth1 // \u67e5\u770b\u7f51\u5361\u7684\u5f53\u524d\u8bbe\u7f6e # ethtool \u2013C eth1 rx-usecs 450 // \u8bbe\u7f6e\u7f51\u5361\u7684rx-usecs\u53c2\u6570 # Valid range for rx-usecs are: 0,1,3, 10-8191 // \u7f51\u5361\u7684\u53d6\u503c\u8303\u56f4 1. 0= off, real-time interruption, one package one interrupt, the lowest delay 2. 1=dynamic\uff0cwhich rangefor interrupts is 4000-70000 3. 3=dynamicconservative(default)\uff0cwhich range for interrupts is 4000-20000 4. 10-8191\uff0chow many microseconds every interruption will occurs. For example,you may wish to control the number of interrupt in every second less than 1000 , then setrx-usecs to 1000000/1000=1000 microseconds, if less than 2000, then set it to1000000/2000=500 NIC will raise a hard IRQ CPU will run the IRQ handler that runs the driver's code Driver will schedule a NAPI, clear the hard IRQ and return 1 2 3 NAPI\uff1a\u6570\u636e\u5305\u5230\u6765\uff0c\u7b2c\u4e00\u4e2a\u6570\u636e\u5305\u4ea7\u751f\u786c\u4ef6\u4e2d\u65ad\uff0c\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u5c06\u8bbe\u5907\u7684napi_struct\u7ed3\u6784\u6302\u5728\u5f53\u524dcpu\u7684\u5f85\u6536\u5305\u8bbe\u5907\u94fe\u8868softnet_data->poll_list\u4e2d\uff0c\u5e76\u89e6\u53d1\u8f6f\u4e2d\u65ad\uff0c\u8f6f\u4e2d\u65ad\u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u904d\u5386softnet_data->poll_list\u4e2d\u7684\u6240\u6709\u8bbe\u5907\uff0c\u4f9d\u6b21\u8c03\u7528\u5176\u6536\u5305\u51fd\u6570napi_sturct->poll\uff0c\u5904\u7406\u6536\u5305\u8fc7\u7a0b\uff1b \u975eNAPI\uff1a\u6bcf\u4e2a\u6570\u636e\u5305\u5230\u6765\uff0c\u90fd\u4f1a\u4ea7\u751f\u786c\u4ef6\u4e2d\u65ad\uff0c\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u5c06\u6536\u5230\u7684\u5305\u653e\u5165\u5f53\u524dcpu\u7684\u6536\u5305\u961f\u5217softnet_data->input_pkt_queue\u4e2d\uff0c\u5e76\u4e14\u5c06\u975enapi\u8bbe\u5907\u5bf9\u5e94\u7684\u865a\u62df\u8bbe\u5907napi\u7ed3\u6784softnet->backlog\u7ed3\u6784\u6302\u5728\u5f53\u524dcpu\u7684\u5f85\u6536\u5305\u8bbe\u5907\u94fe\u8868softnet_data->poll_list\u4e2d\uff0c\u5e76\u89e6\u53d1\u8f6f\u4e2d\u65ad\uff0c\u8f6f\u4e2d\u65ad\u5904\u7406\u8fc7\u7a0b\u4e2d\uff0c\u4f1a\u8c03\u7528backlog\u7684\u56de\u8c03\u5904\u7406\u51fd\u6570process_backlog\uff0c\u5c06\u6536\u5305\u961f\u5217input_pkt_queue\u5408\u5e76\u5230softdata->process_queue\u540e\u9762\uff0c\u5e76\u4f9d\u6b21\u5904\u7406\u8be5\u961f\u5217\u4e2d\u7684\u6570\u636e\u5305\uff1b Driver raise a soft IRQ (NET_RX_SOFTIRQ) NAPI will poll data from the receive ring buffer until netdev_budget_usecs(poll\u7684\u8d85\u65f6\u65f6\u95f4) timeout or netdev_budget(\u6700\u4f4e\u9700\u8981\u5904\u7406\u7684\u62a5\u6587\u6570\u91cf) and dev_weight(\u4e00\u6b21poll\u7d2f\u8ba1\u5904\u7406\u7684\u6700\u5927\u62a5\u6587\u6570) packets 1 2 3 net.core.netdev_budget \u53ef\u4ee5poll\u7684\u62a5\u6587\u6570\u91cf\uff0c\u4f4e\u4e8e\u8fd9\u4e2a\u6570\u503c\u5c31\u505c\u6b62poll\uff0c net.core.netdev_budget \u53ef\u4ee5poll\u7684\u65f6\u95f4 net.core.dev_weight poll\u7684\u62a5\u6587\u6570\u91cf\u7684\u6700\u5927\u503c Linux will also allocated memory to sk_buff Linux fills the metadata: protocol, interface, setmacheader, removes ethernet Linux will pass the skb to the kernel stack (netif_receive_skb) It will set the network header, clone skb to taps (i.e. tcpdump) and pass it to tc ingress Reference: http://tldp.org/HOWTO/Traffic-Control-HOWTO/intro.html Packets are handled to a qdisc sized netdev_max_backlog with its algorithm defined by default_qdisc 1 2 3 net.core.somaxconn \u5df2\u7ecf\u8fde\u63a5\u7684socket\uff0c\u4f46\u662f\u8fd8\u6ca1\u6709\u88abaccept\u7684\u961f\u5217\u5927\u5c0f /proc/sys/net/ipv4/tcp_max_syn_backlog \u534a\u8fde\u63a5\u961f\u5217\u7684\u5927\u5c0f(\u5df2\u7ecf\u8fd4\u56de\u4e86sync+ack\u62a5\u6587\u4e86\uff0c\u7b49\u5f85ack) /proc/sys/net/core/netdev_max_backlog \u7f51\u5361\u8bbe\u5907\u7684\u961f\u5217\u5927\u5c0f\uff0c\u53ea\u6709\u5728\u5f00\u542fPRS\u624d\u6709\u4f5c\u7528 It calls ip_rcv and packets are handled to IP It calls netfilter (PREROUTING) It looks at the routing table, if forwarding or local If it's local it calls netfilter (LOCAL_IN) It calls the L4 protocol (for instance tcp_v4_rcv) It finds the right socket It goes to the tcp finite state machine Enqueue the packet to the receive buffer and sized as tcp_rmem rules 1 2 3 Check command: sysctl net.ipv4.tcp_rmem Change command: sysctl -w net.ipv4.tcp_rmem=\"min default max\"; when changing default value, remember to restart your user space app (i.e. your web server, nginx, etc) If tcp_moderate_rcvbuf is enabled kernel will auto-tune the receive buffer 1 net.ipv4.tcp_moderate_rcvbuf = 1 // \u81ea\u52a8\u8c03\u6574\u63a5\u6536buffer\u7684\u5927\u5c0f Kernel will signalize that there is data available to apps (epoll or any polling system) Application wakes up and reads the data Reference: https://github.com/leandromoreira/linux-network-performance-parameters#linux-network-queues-overview Egress - they're leaving Application sends message (sendmsg or other) TCP send message allocates skb_buff It enqueues skb to the socket write buffer of tcp_wmem size 1 2 3 Check command: sysctl net.ipv4.tcp_wmem Change command: sysctl -w net.ipv4.tcp_wmem=\"min default max\"; when changing default value, remember to restart your user space app (i.e. your web server, nginx, etc) Builds the TCP header (src and dst port, checksum) Calls L3 handler (in this case ipv4 on tcp_write_xmit and tcp_transmit_skb) L3 (ip_queue_xmit) does its work: build ip header and call netfilter (LOCAL_OUT) Calls output route action Calls netfilter (POST_ROUTING) Fragment the packet (ip_output) Calls L2 send function (dev_queue_xmit) Feeds the output (QDisc) queue of txqueuelen length with its algorithm default_qdisc 1 2 3 4 5 6 7 // \u8c03\u6574txqueuelen\u8f93\u51fa\u961f\u5217\u7684\u5927\u5c0f Check command: ifconfig ethX Change command: ifconfig ethX txqueuelen value // \u8c03\u6574qdisc\u7684\u7b56\u7565 Check command: sysctl net.core.default_qdisc Change command: sysctl -w net.core.default_qdisc value The driver code enqueue the packets at the ring buffer tx The driver will do a soft IRQ (NET_TX_SOFTIRQ) after tx-usecs timeout or tx-frames Re-enable hard IRQ to NIC Driver will map all the packets (to be sent) to some DMA'ed region NIC fetches the packets (via DMA) from RAM to transmit After the transmission NIC will raise a hard IRQ to signal its completion The driver will handle this IRQ (turn it off) And schedule (soft IRQ) the NAPI poll system NAPI will handle the receive packets signaling and free the RAM How to monitor cat /proc/interrupts \u770b\u4e2d\u65ad\u6570\u91cf cat /proc/net/softnet_stat \u7f51\u7edc\u8f6f\u4e2d\u65ad\u60c5\u51b5\uff0c\u53ef\u4ee5\u901a\u8fc7 code/softnet.sh \u6765\u8f93\u51fa 1 2 3 4 5 6 7 8 9 \u6bcf\u4e00\u884c\u5bf9\u5e94\u5230\u4e00\u4e2aCPU: \u7b2c\u4e00\u4f8b: \u5904\u7406\u7684\u5305\u6570\u91cf\uff0c\u5728boding\u6a21\u5f0f\u4e0b\uff0c\u76f8\u540cpacket\u4f1a\u88ab\u8bb0\u5f55\u591a\u6b21 \u7b2c\u4e8c\u4f8b: dropped\u7684\u5305\u6570\u91cf \u7b2c\u4e09\u4f8b: poll\u56e0\u4e3abudget\u6216\u8005\u65f6\u95f4\u7684\u95ee\u9898\u88ab\u4e2d\u65ad\u7684\u6b21\u6570 \u7b2c\u56db~\u516b\u4f8b: \u603b\u662f0 \u7b2c\u4e5d\u4f8b: CPU\u51b2\u7a81\u7684\u6570\u91cf \u7b2c\u5341\u4f8b: CPU\u56e0\u4e3ainter-processor Interrupt\u5524\u9192\u7684\u6b21\u6570 \u6700\u540e\u4e00\u4f8b: \u88ab\u6d41\u63a7\u9650\u5236\u7684\u6570\u91cf (\u6d41\u63a7\u9650\u5236\u662fRPS(Receive Packet Steering)\u7684\u4e00\u4e2afeature) cat /proc/net/sockstat 1 2 3 4 5 6 7 8 sockets: used 159 TCP: inuse 49 orphan 0 tw 2 alloc 61 mem 487 UDP: inuse 0 mem 0 UDPLITE: inuse 0 RAW: inuse 0 FRAG: inuse 0 memory 0 mem\u4ee3\u8868\u4e86\u6d88\u8017\u7684\u5185\u5b58\uff0c\u5355\u4f4d\u662fPAGE SIZE\uff0c\u4e00\u822c\u4e3a4KB\u3002487 * 4KB\u5373\u4e3a\uff0c\u5185\u6838\u5904\u7f13\u5b58\u7528\u6237\u6ca1\u6709\u53ca\u65f6\u6536\u53d6\u5230\u7528\u6237\u7a7a\u95f4\u7684tcp\u6570\u636e\u6240\u6d88\u8017\u7684\u5185\u5b58\u5927\u5c0f\u3002 * netstat -atn | awk '/tcp/ {print $6}' | sort | uniq -c or ss -s * ss -neopt state time-wait | wc -l counters by a specific state: established, syn-sent, syn-recv, fin-wait-1, fin-wait-2, time-wait, closed, close-wait, last-ack, listening, closing * netstat -st or nstat -a * cat /proc/net/tcp detailed stats, see each field meaning at the kernel docs * cat /proc/net/netstat ListenOverflows and ListenDrops are important fields to keep an eye on * /sys/class/net/eth0/statistics/ or ethtool -S eth0 \u76d1\u63a7\u7f51\u5361\u7684\u7edf\u8ba1\u4fe1\u606f * /proc/net/dev high level\u7ea7\u522b\u7684\u7f51\u5361\u7edf\u8ba1\u4fe1\u606f Tuning RSS(Receive Side Scaling) / Receive Packet Steering (RPS)/ multiqueue \u8c03\u6574\u7f51\u5361\u961f\u5217\u7684\u6570\u91cf 1 2 3 sudo ethtool -l eth0 // \u67e5\u770b\u961f\u5217\u6570\u91cf sudo ethtool -L eth0 combined 8 // \u8c03\u6574\u63a5\u6536\u961f\u5217\u548c\u53d1\u9001\u961f\u5217\u6570\u91cf\u4e3a8 sudo ethtool -L eth0 rx 8 // \u72ec\u7acb\u8c03\u6574\u63a5\u6536\u961f\u5217\u6570\u91cf\u4e3a8 \u8c03\u6574\u7f51\u5361\u961f\u5217\u7684\u5927\u5c0f 1 2 sudo ethtool -g eth0 // \u67e5\u770b\u961f\u5217\u5927\u5c0f sudo ethtool -G eth0 rx 4096 // \u8bbe\u7f6e\u63a5\u6536\u961f\u5217\u7684\u5927\u5c0f \u8c03\u6574\u961f\u5217\u7684\u6743\u91cd 1 2 3 sudo ethtool -x eth0 // \u67e5\u770b\u7f51\u5361\u7684hash\u503c\u5230queue\u7684\u6620\u5c04\u5173\u7cfb sudo ethtool -X eth0 equal 2 // eth0\u7f51\u5361\u4f7f\u7528\u524d2\u4e2aqueue\u5747\u5300\u6765\u5904\u7406\u6570\u636e\u5305 sudo ethtool -X eth0 weight 6 2 // \u7b2c\u4e00\u4e2aqueue\u7684\u6743\u91cd\u662f6\u3001\u7b2c\u4e8c\u4e2a\u662f2 \u8c03\u6574\u961f\u5217\u7684hash\u6570\u636e\u6e90 1 2 sudo ethtool -n eth0 rx-flow-hash udp4 // \u67e5\u770budp\u7684rx\u961f\u5217\u4e2d\u7684hash\u7b97\u6cd5\u7684\u6570\u636e\u6e90 sudo ethtool -N eth0 rx-flow-hash udp4 sdfn // \u8bbe\u7f6eudp\u7684rx\u961f\u5217\u7684hash\u7b97\u6cd5\u7684\u6570\u636e\u6e90\u4e3asdfn ntuple filtering(\u7528\u4e8e\u8bbe\u7f6e\u6839\u636e\u67d0\u4e9b\u6761\u4ef6\uff0c\u5c06\u6570\u636e\u5305hash\u5230\u6307\u5b9a\u7684queue\u4e0a) 1 2 3 sudo ethtool -k eth0 // \u67e5\u770b\u5f53\u524d\u7f51\u5361\u7684ntuple filters sudo ethtool -K eth0 ntuple on // Enable ntuple filters sudo ethtool -U eth0 flow-type tcp4 dst-port 80 action 2 // tcp\u6d41\uff0c\u5e26\u670980\u7aef\u53e3\uff0chash\u5230\u63a5\u6536\u961f\u52172\u4e0a Interrupt coalescing(\u4e2d\u65ad\u5408\u5e76\uff0c\u53ea\u6709\u8fbe\u5230\u4e00\u5b9a\u6570\u91cf\u7684\u6570\u636e\u5305\u8fbe\u5230\u624d\u4f1a\u89e6\u53d1\u4e2d\u65ad) 1 2 3 4 5 6 sudo ethtool -c eth0 sudo ethtool -C eth0 adaptive-rx on 1. rx-usecs 2. rx-frames 3. rx-usecs-irq 4. rx-frames-irq Adjusting IRQ affinities \u9700\u8981\u5173\u95ed irqbalance \u67e5\u770b /proc/interrupts \u9700\u8981\u7ed1\u5b9aCPU\u7684\u7f51\u5361\u4e2d\u65ad\u53f7 sudo bash -c 'echo 1 > /proc/irq/8/smp_affinity' // \u7ed1\u5b9airq number\u4e3a8\u7684queue\u5230CPU0\u4e0a \u8c03\u6574NAPI poll\u7684\u76f8\u5173\u53c2\u6570 1 2 3 net.core.netdev_budget \u53ef\u4ee5poll\u7684\u62a5\u6587\u6570\u91cf\uff0c\u4f4e\u4e8e\u8fd9\u4e2a\u6570\u503c\u5c31\u505c\u6b62poll\uff0c net.core.netdev_budget_timeout \u53ef\u4ee5poll\u7684\u65f6\u95f4 net.core.dev_weight poll\u7684\u62a5\u6587\u6570\u91cf\u7684\u6700\u5927\u503c LRO(Large Receive Offloading)/GRO(Generic Receive Offloading) LRO\u662f\u786c\u4ef6\u5b9e\u73b0\u3001GRO\u662f\u8f6f\u4ef6\u5b9e\u73b0\uff0c\u5176\u76ee\u7684\u662f\u4e3a\u4e86\u5c06packet\u5408\u5e76\u653e\u5230network stack\u4e2d\u8fdb\u884c\u5904\u7406\uff0c\u4ee5\u6b64\u51cf\u5c11CPU\u7684\u5904\u7406\u65f6\u95f4\uff0c\u4f46\u662fLRO\u5408\u5e76packet\u8fc7\u4e8e\u5bbd\u6cdb \uff0c\u4f1a\u5b58\u5728\u4fe1\u606f\u4e22\u5931\u7684\u95ee\u9898\uff0c\u56e0\u4e3a\u67d0\u4e9bpacket\u4f1a\u643a\u5e26\u4e00\u4e9b\u6807\u5fd7\uff0c\u5408\u5e76packet\u540e\u4f1a\u4e22\u5931\u8fd9\u4e9b\u6807\u5fd7\u3002\u800cGRO\u5904\u7406\u66f4\u4e3a\u4e25\u683c\u3002 1 2 sudo ethtool -k eth0 | grep generic-receive-offload // \u67e5\u770b\u662f\u5426\u5f00\u542fGRO sudo ethtool -K eth0 gro on // \u5f00\u542fGRO Receive Packet Steering (RPS)/Receive Side Scaling (RSS) 1 echo \"10000000\" > /sys/class/net/eth0/queues/rx-0/rps_cpus // eth0\u7f51\u5361\u7684\u63a5\u6536\u961f\u52170\uff0c\u6620\u5c04\u5230CPU0 Receive Flow Steering (RFS) PRS/RSS \u53ea\u80fd\u5c06\u5305\u5e73\u5747\u7684\u5206\u53d1\u7ed9\u5404\u4e2aCPU\uff0c\u4f46\u662f\u6ca1\u529e\u6cd5\u6700\u5927\u5316\u7684\u5229\u7528CPU Cache\uff0c\u76f8\u540c\u6d41\u7684\u6570\u636e\u5305\u4e0d\u4e00\u5b9a\u4f1a\u5206\u914d\u5230\u540c\u4e00\u4e2aCPU\u4e2d\uff0c\u800cRFS\u5219\u662f\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684 \u4f1a\u5c06\u76f8\u540c\u6d41\u7684\u6570\u636e\u5305\u8ba9\u76f8\u540c\u7684CPU\u6765\u5904\u7406\uff0c\u63d0\u4f9bCPU\u7684\u7f13\u5b58\u547d\u4e2d\u7387\u3002 1 2 sudo sysctl -w net.core.rps_sock_flow_entries=32768 // \u8bbe\u7f6eRFS socket hash\u8868\u5927\u5c0f sudo bash -c 'echo 2048 > /sys/class/net/eth0/queues/rx-0/rps_flow_cnt' //\u6bcf\u4e2aqueue\u6700\u5927\u7684\u6d41\u6570\u91cf Enabling accelerated RFS (aRFS) RPS\u5f00\u542f RFS\u5f00\u542f \u5185\u6838\u7f16\u8bd1\u7684\u65f6\u5019\uff0c\u914d\u7f6e\u4e86CONFIG_RFS_ACCEL\u53c2\u6570 \u8bbe\u5907\u652f\u6301ntuple RX queue\u548cCPU\u4e00\u5bf9\u4e00\u6620\u5c04\u914d\u7f6e\u597d\u4e86 \u53ea\u8981\u4e0a\u8ff0\u6761\u4ef6\u6ee1\u8db3\u5c31\u81ea\u52a8\u5f00\u542faRFS RX packet timestamping (\u5728\u8fdb\u5165RPS\u4e4b\u524d\u6253\u4e0a\u65f6\u95f4\u6233\uff0c\u8fd8\u662f\u4e4b\u540e\uff0c\u9ed8\u8ba4\u662f\u4e4b\u524d) 1 2 // \u5728\u8fdb\u5165RPS\u4e4b\u540e\uff0c\u624d\u5f00\u59cb\u6253\u4e0a\u65f6\u95f4\u6233\uff0c\u800c\u4e0d\u662f\u4e4b\u524d sudo sysctl -w net.core.netdev_tstamp_prequeue=0 Enabling flow limits and tuning flow limit hash table size 1 2 sudo sysctl -w net.core.flow_limit_table_len=8192 /proc/sys/net/core/flow_limit_cpu_bitmap adjusting IP protocol early demux \u5728\u8fdb\u53bb\u8def\u7531\u8868\u8fdb\u884c\u8def\u7531\u5339\u914d\u7684\u65f6\u5019\u5148\u770b\u4e0b\u662f\u5426\u6709\u8def\u7531\u7f13\u5b58\uff0c\u9ed8\u8ba4\u662f\u5f00\u542f\u7684\uff0c\u5728\u67d0\u4e9b\u573a\u666f\u4e0b\u5f00\u542f\u4f1a\u5bfc\u81f45%\u7684\u6027\u80fd\u4e0b\u964d 1 sudo sysctl -w net.ipv4.ip_early_demux=0 SO_INCOMING_CPU \u7ed3\u5408getsockopt\uff0c\u53ef\u4ee5\u7528\u4e8e\u67e5\u770b\u5f53\u524dsocket\u5728\u88ab\u54ea\u4e2aCPU\u5904\u7406 Reference: https://blog.packagecloud.io/eng/2016/06/22/monitoring-tuning-linux-networking-stack-receiving-data/#special-thanks Reference: https://vincent.bernat.ch/en/blog/2014-tcp-time-wait-state-linux TCP connection repair https://lwn.net/Articles/495304/ Reference https://blog.cloudflare.com/when-tcp-sockets-refuse-to-die-zh/","title":"Index"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/linux/network/#ingress-theyre-coming","text":"Packets arrive at the NIC NIC will verify MAC (if not on promiscuous mode) and FCS(FCS\uff1aFrame Check Sequence\uff08\u5e27\u6821\u9a8c\u5e8f\u5217) and decide to drop or to continue NIC will DMA packets at RAM , in a region previously prepared (mapped) by the driver Packet is copied (via DMA) to a ring buffer in kernel memory. 1 2 3 // \u7f51\u5361\u8bbe\u5907\u7684ring buffer\u5927\u5c0f Check command: ethtool -g ethX Change command: ethtool -G ethX rx value tx value NIC will enqueue references to the packets at receive ring buffer queue rx until rx-usecs(\u8d85\u65f6\u65f6\u95f4\uff0c\u53ea\u6709\u5230\u4e86\u8fd9\u4e2a\u8d85\u65f6\u65f6\u95f4\u624d\u89e6\u53d1\u786c\u4e2d\u65ad\uff0c\u907f\u514d\u5927\u91cf\u4e2d\u65ad) timeout or rx-frames(\u7f51\u5361\u6536\u5230\u6307\u5b9a\u6570\u91cf\u7684\u5305\uff0c\u624d\u4f1a\u89e6\u53d1\u786c\u4ef6\u4e2d\u65ad) 1 2 3 4 5 6 7 8 # ethtool \u2013C eth1 // \u67e5\u770b\u7f51\u5361\u7684\u5f53\u524d\u8bbe\u7f6e # ethtool \u2013C eth1 rx-usecs 450 // \u8bbe\u7f6e\u7f51\u5361\u7684rx-usecs\u53c2\u6570 # Valid range for rx-usecs are: 0,1,3, 10-8191 // \u7f51\u5361\u7684\u53d6\u503c\u8303\u56f4 1. 0= off, real-time interruption, one package one interrupt, the lowest delay 2. 1=dynamic\uff0cwhich rangefor interrupts is 4000-70000 3. 3=dynamicconservative(default)\uff0cwhich range for interrupts is 4000-20000 4. 10-8191\uff0chow many microseconds every interruption will occurs. For example,you may wish to control the number of interrupt in every second less than 1000 , then setrx-usecs to 1000000/1000=1000 microseconds, if less than 2000, then set it to1000000/2000=500 NIC will raise a hard IRQ CPU will run the IRQ handler that runs the driver's code Driver will schedule a NAPI, clear the hard IRQ and return 1 2 3 NAPI\uff1a\u6570\u636e\u5305\u5230\u6765\uff0c\u7b2c\u4e00\u4e2a\u6570\u636e\u5305\u4ea7\u751f\u786c\u4ef6\u4e2d\u65ad\uff0c\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u5c06\u8bbe\u5907\u7684napi_struct\u7ed3\u6784\u6302\u5728\u5f53\u524dcpu\u7684\u5f85\u6536\u5305\u8bbe\u5907\u94fe\u8868softnet_data->poll_list\u4e2d\uff0c\u5e76\u89e6\u53d1\u8f6f\u4e2d\u65ad\uff0c\u8f6f\u4e2d\u65ad\u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u904d\u5386softnet_data->poll_list\u4e2d\u7684\u6240\u6709\u8bbe\u5907\uff0c\u4f9d\u6b21\u8c03\u7528\u5176\u6536\u5305\u51fd\u6570napi_sturct->poll\uff0c\u5904\u7406\u6536\u5305\u8fc7\u7a0b\uff1b \u975eNAPI\uff1a\u6bcf\u4e2a\u6570\u636e\u5305\u5230\u6765\uff0c\u90fd\u4f1a\u4ea7\u751f\u786c\u4ef6\u4e2d\u65ad\uff0c\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u5c06\u6536\u5230\u7684\u5305\u653e\u5165\u5f53\u524dcpu\u7684\u6536\u5305\u961f\u5217softnet_data->input_pkt_queue\u4e2d\uff0c\u5e76\u4e14\u5c06\u975enapi\u8bbe\u5907\u5bf9\u5e94\u7684\u865a\u62df\u8bbe\u5907napi\u7ed3\u6784softnet->backlog\u7ed3\u6784\u6302\u5728\u5f53\u524dcpu\u7684\u5f85\u6536\u5305\u8bbe\u5907\u94fe\u8868softnet_data->poll_list\u4e2d\uff0c\u5e76\u89e6\u53d1\u8f6f\u4e2d\u65ad\uff0c\u8f6f\u4e2d\u65ad\u5904\u7406\u8fc7\u7a0b\u4e2d\uff0c\u4f1a\u8c03\u7528backlog\u7684\u56de\u8c03\u5904\u7406\u51fd\u6570process_backlog\uff0c\u5c06\u6536\u5305\u961f\u5217input_pkt_queue\u5408\u5e76\u5230softdata->process_queue\u540e\u9762\uff0c\u5e76\u4f9d\u6b21\u5904\u7406\u8be5\u961f\u5217\u4e2d\u7684\u6570\u636e\u5305\uff1b Driver raise a soft IRQ (NET_RX_SOFTIRQ) NAPI will poll data from the receive ring buffer until netdev_budget_usecs(poll\u7684\u8d85\u65f6\u65f6\u95f4) timeout or netdev_budget(\u6700\u4f4e\u9700\u8981\u5904\u7406\u7684\u62a5\u6587\u6570\u91cf) and dev_weight(\u4e00\u6b21poll\u7d2f\u8ba1\u5904\u7406\u7684\u6700\u5927\u62a5\u6587\u6570) packets 1 2 3 net.core.netdev_budget \u53ef\u4ee5poll\u7684\u62a5\u6587\u6570\u91cf\uff0c\u4f4e\u4e8e\u8fd9\u4e2a\u6570\u503c\u5c31\u505c\u6b62poll\uff0c net.core.netdev_budget \u53ef\u4ee5poll\u7684\u65f6\u95f4 net.core.dev_weight poll\u7684\u62a5\u6587\u6570\u91cf\u7684\u6700\u5927\u503c Linux will also allocated memory to sk_buff Linux fills the metadata: protocol, interface, setmacheader, removes ethernet Linux will pass the skb to the kernel stack (netif_receive_skb) It will set the network header, clone skb to taps (i.e. tcpdump) and pass it to tc ingress Reference: http://tldp.org/HOWTO/Traffic-Control-HOWTO/intro.html Packets are handled to a qdisc sized netdev_max_backlog with its algorithm defined by default_qdisc 1 2 3 net.core.somaxconn \u5df2\u7ecf\u8fde\u63a5\u7684socket\uff0c\u4f46\u662f\u8fd8\u6ca1\u6709\u88abaccept\u7684\u961f\u5217\u5927\u5c0f /proc/sys/net/ipv4/tcp_max_syn_backlog \u534a\u8fde\u63a5\u961f\u5217\u7684\u5927\u5c0f(\u5df2\u7ecf\u8fd4\u56de\u4e86sync+ack\u62a5\u6587\u4e86\uff0c\u7b49\u5f85ack) /proc/sys/net/core/netdev_max_backlog \u7f51\u5361\u8bbe\u5907\u7684\u961f\u5217\u5927\u5c0f\uff0c\u53ea\u6709\u5728\u5f00\u542fPRS\u624d\u6709\u4f5c\u7528 It calls ip_rcv and packets are handled to IP It calls netfilter (PREROUTING) It looks at the routing table, if forwarding or local If it's local it calls netfilter (LOCAL_IN) It calls the L4 protocol (for instance tcp_v4_rcv) It finds the right socket It goes to the tcp finite state machine Enqueue the packet to the receive buffer and sized as tcp_rmem rules 1 2 3 Check command: sysctl net.ipv4.tcp_rmem Change command: sysctl -w net.ipv4.tcp_rmem=\"min default max\"; when changing default value, remember to restart your user space app (i.e. your web server, nginx, etc) If tcp_moderate_rcvbuf is enabled kernel will auto-tune the receive buffer 1 net.ipv4.tcp_moderate_rcvbuf = 1 // \u81ea\u52a8\u8c03\u6574\u63a5\u6536buffer\u7684\u5927\u5c0f Kernel will signalize that there is data available to apps (epoll or any polling system) Application wakes up and reads the data Reference: https://github.com/leandromoreira/linux-network-performance-parameters#linux-network-queues-overview","title":"Ingress - they're coming"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/linux/network/#egress-theyre-leaving","text":"Application sends message (sendmsg or other) TCP send message allocates skb_buff It enqueues skb to the socket write buffer of tcp_wmem size 1 2 3 Check command: sysctl net.ipv4.tcp_wmem Change command: sysctl -w net.ipv4.tcp_wmem=\"min default max\"; when changing default value, remember to restart your user space app (i.e. your web server, nginx, etc) Builds the TCP header (src and dst port, checksum) Calls L3 handler (in this case ipv4 on tcp_write_xmit and tcp_transmit_skb) L3 (ip_queue_xmit) does its work: build ip header and call netfilter (LOCAL_OUT) Calls output route action Calls netfilter (POST_ROUTING) Fragment the packet (ip_output) Calls L2 send function (dev_queue_xmit) Feeds the output (QDisc) queue of txqueuelen length with its algorithm default_qdisc 1 2 3 4 5 6 7 // \u8c03\u6574txqueuelen\u8f93\u51fa\u961f\u5217\u7684\u5927\u5c0f Check command: ifconfig ethX Change command: ifconfig ethX txqueuelen value // \u8c03\u6574qdisc\u7684\u7b56\u7565 Check command: sysctl net.core.default_qdisc Change command: sysctl -w net.core.default_qdisc value The driver code enqueue the packets at the ring buffer tx The driver will do a soft IRQ (NET_TX_SOFTIRQ) after tx-usecs timeout or tx-frames Re-enable hard IRQ to NIC Driver will map all the packets (to be sent) to some DMA'ed region NIC fetches the packets (via DMA) from RAM to transmit After the transmission NIC will raise a hard IRQ to signal its completion The driver will handle this IRQ (turn it off) And schedule (soft IRQ) the NAPI poll system NAPI will handle the receive packets signaling and free the RAM","title":"Egress - they're leaving"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/linux/network/#how-to-monitor","text":"cat /proc/interrupts \u770b\u4e2d\u65ad\u6570\u91cf cat /proc/net/softnet_stat \u7f51\u7edc\u8f6f\u4e2d\u65ad\u60c5\u51b5\uff0c\u53ef\u4ee5\u901a\u8fc7 code/softnet.sh \u6765\u8f93\u51fa 1 2 3 4 5 6 7 8 9 \u6bcf\u4e00\u884c\u5bf9\u5e94\u5230\u4e00\u4e2aCPU: \u7b2c\u4e00\u4f8b: \u5904\u7406\u7684\u5305\u6570\u91cf\uff0c\u5728boding\u6a21\u5f0f\u4e0b\uff0c\u76f8\u540cpacket\u4f1a\u88ab\u8bb0\u5f55\u591a\u6b21 \u7b2c\u4e8c\u4f8b: dropped\u7684\u5305\u6570\u91cf \u7b2c\u4e09\u4f8b: poll\u56e0\u4e3abudget\u6216\u8005\u65f6\u95f4\u7684\u95ee\u9898\u88ab\u4e2d\u65ad\u7684\u6b21\u6570 \u7b2c\u56db~\u516b\u4f8b: \u603b\u662f0 \u7b2c\u4e5d\u4f8b: CPU\u51b2\u7a81\u7684\u6570\u91cf \u7b2c\u5341\u4f8b: CPU\u56e0\u4e3ainter-processor Interrupt\u5524\u9192\u7684\u6b21\u6570 \u6700\u540e\u4e00\u4f8b: \u88ab\u6d41\u63a7\u9650\u5236\u7684\u6570\u91cf (\u6d41\u63a7\u9650\u5236\u662fRPS(Receive Packet Steering)\u7684\u4e00\u4e2afeature) cat /proc/net/sockstat 1 2 3 4 5 6 7 8 sockets: used 159 TCP: inuse 49 orphan 0 tw 2 alloc 61 mem 487 UDP: inuse 0 mem 0 UDPLITE: inuse 0 RAW: inuse 0 FRAG: inuse 0 memory 0 mem\u4ee3\u8868\u4e86\u6d88\u8017\u7684\u5185\u5b58\uff0c\u5355\u4f4d\u662fPAGE SIZE\uff0c\u4e00\u822c\u4e3a4KB\u3002487 * 4KB\u5373\u4e3a\uff0c\u5185\u6838\u5904\u7f13\u5b58\u7528\u6237\u6ca1\u6709\u53ca\u65f6\u6536\u53d6\u5230\u7528\u6237\u7a7a\u95f4\u7684tcp\u6570\u636e\u6240\u6d88\u8017\u7684\u5185\u5b58\u5927\u5c0f\u3002 * netstat -atn | awk '/tcp/ {print $6}' | sort | uniq -c or ss -s * ss -neopt state time-wait | wc -l counters by a specific state: established, syn-sent, syn-recv, fin-wait-1, fin-wait-2, time-wait, closed, close-wait, last-ack, listening, closing * netstat -st or nstat -a * cat /proc/net/tcp detailed stats, see each field meaning at the kernel docs * cat /proc/net/netstat ListenOverflows and ListenDrops are important fields to keep an eye on * /sys/class/net/eth0/statistics/ or ethtool -S eth0 \u76d1\u63a7\u7f51\u5361\u7684\u7edf\u8ba1\u4fe1\u606f * /proc/net/dev high level\u7ea7\u522b\u7684\u7f51\u5361\u7edf\u8ba1\u4fe1\u606f","title":"How to monitor"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/linux/network/#tuning","text":"RSS(Receive Side Scaling) / Receive Packet Steering (RPS)/ multiqueue \u8c03\u6574\u7f51\u5361\u961f\u5217\u7684\u6570\u91cf 1 2 3 sudo ethtool -l eth0 // \u67e5\u770b\u961f\u5217\u6570\u91cf sudo ethtool -L eth0 combined 8 // \u8c03\u6574\u63a5\u6536\u961f\u5217\u548c\u53d1\u9001\u961f\u5217\u6570\u91cf\u4e3a8 sudo ethtool -L eth0 rx 8 // \u72ec\u7acb\u8c03\u6574\u63a5\u6536\u961f\u5217\u6570\u91cf\u4e3a8 \u8c03\u6574\u7f51\u5361\u961f\u5217\u7684\u5927\u5c0f 1 2 sudo ethtool -g eth0 // \u67e5\u770b\u961f\u5217\u5927\u5c0f sudo ethtool -G eth0 rx 4096 // \u8bbe\u7f6e\u63a5\u6536\u961f\u5217\u7684\u5927\u5c0f \u8c03\u6574\u961f\u5217\u7684\u6743\u91cd 1 2 3 sudo ethtool -x eth0 // \u67e5\u770b\u7f51\u5361\u7684hash\u503c\u5230queue\u7684\u6620\u5c04\u5173\u7cfb sudo ethtool -X eth0 equal 2 // eth0\u7f51\u5361\u4f7f\u7528\u524d2\u4e2aqueue\u5747\u5300\u6765\u5904\u7406\u6570\u636e\u5305 sudo ethtool -X eth0 weight 6 2 // \u7b2c\u4e00\u4e2aqueue\u7684\u6743\u91cd\u662f6\u3001\u7b2c\u4e8c\u4e2a\u662f2 \u8c03\u6574\u961f\u5217\u7684hash\u6570\u636e\u6e90 1 2 sudo ethtool -n eth0 rx-flow-hash udp4 // \u67e5\u770budp\u7684rx\u961f\u5217\u4e2d\u7684hash\u7b97\u6cd5\u7684\u6570\u636e\u6e90 sudo ethtool -N eth0 rx-flow-hash udp4 sdfn // \u8bbe\u7f6eudp\u7684rx\u961f\u5217\u7684hash\u7b97\u6cd5\u7684\u6570\u636e\u6e90\u4e3asdfn ntuple filtering(\u7528\u4e8e\u8bbe\u7f6e\u6839\u636e\u67d0\u4e9b\u6761\u4ef6\uff0c\u5c06\u6570\u636e\u5305hash\u5230\u6307\u5b9a\u7684queue\u4e0a) 1 2 3 sudo ethtool -k eth0 // \u67e5\u770b\u5f53\u524d\u7f51\u5361\u7684ntuple filters sudo ethtool -K eth0 ntuple on // Enable ntuple filters sudo ethtool -U eth0 flow-type tcp4 dst-port 80 action 2 // tcp\u6d41\uff0c\u5e26\u670980\u7aef\u53e3\uff0chash\u5230\u63a5\u6536\u961f\u52172\u4e0a Interrupt coalescing(\u4e2d\u65ad\u5408\u5e76\uff0c\u53ea\u6709\u8fbe\u5230\u4e00\u5b9a\u6570\u91cf\u7684\u6570\u636e\u5305\u8fbe\u5230\u624d\u4f1a\u89e6\u53d1\u4e2d\u65ad) 1 2 3 4 5 6 sudo ethtool -c eth0 sudo ethtool -C eth0 adaptive-rx on 1. rx-usecs 2. rx-frames 3. rx-usecs-irq 4. rx-frames-irq Adjusting IRQ affinities \u9700\u8981\u5173\u95ed irqbalance \u67e5\u770b /proc/interrupts \u9700\u8981\u7ed1\u5b9aCPU\u7684\u7f51\u5361\u4e2d\u65ad\u53f7 sudo bash -c 'echo 1 > /proc/irq/8/smp_affinity' // \u7ed1\u5b9airq number\u4e3a8\u7684queue\u5230CPU0\u4e0a \u8c03\u6574NAPI poll\u7684\u76f8\u5173\u53c2\u6570 1 2 3 net.core.netdev_budget \u53ef\u4ee5poll\u7684\u62a5\u6587\u6570\u91cf\uff0c\u4f4e\u4e8e\u8fd9\u4e2a\u6570\u503c\u5c31\u505c\u6b62poll\uff0c net.core.netdev_budget_timeout \u53ef\u4ee5poll\u7684\u65f6\u95f4 net.core.dev_weight poll\u7684\u62a5\u6587\u6570\u91cf\u7684\u6700\u5927\u503c LRO(Large Receive Offloading)/GRO(Generic Receive Offloading) LRO\u662f\u786c\u4ef6\u5b9e\u73b0\u3001GRO\u662f\u8f6f\u4ef6\u5b9e\u73b0\uff0c\u5176\u76ee\u7684\u662f\u4e3a\u4e86\u5c06packet\u5408\u5e76\u653e\u5230network stack\u4e2d\u8fdb\u884c\u5904\u7406\uff0c\u4ee5\u6b64\u51cf\u5c11CPU\u7684\u5904\u7406\u65f6\u95f4\uff0c\u4f46\u662fLRO\u5408\u5e76packet\u8fc7\u4e8e\u5bbd\u6cdb \uff0c\u4f1a\u5b58\u5728\u4fe1\u606f\u4e22\u5931\u7684\u95ee\u9898\uff0c\u56e0\u4e3a\u67d0\u4e9bpacket\u4f1a\u643a\u5e26\u4e00\u4e9b\u6807\u5fd7\uff0c\u5408\u5e76packet\u540e\u4f1a\u4e22\u5931\u8fd9\u4e9b\u6807\u5fd7\u3002\u800cGRO\u5904\u7406\u66f4\u4e3a\u4e25\u683c\u3002 1 2 sudo ethtool -k eth0 | grep generic-receive-offload // \u67e5\u770b\u662f\u5426\u5f00\u542fGRO sudo ethtool -K eth0 gro on // \u5f00\u542fGRO Receive Packet Steering (RPS)/Receive Side Scaling (RSS) 1 echo \"10000000\" > /sys/class/net/eth0/queues/rx-0/rps_cpus // eth0\u7f51\u5361\u7684\u63a5\u6536\u961f\u52170\uff0c\u6620\u5c04\u5230CPU0 Receive Flow Steering (RFS) PRS/RSS \u53ea\u80fd\u5c06\u5305\u5e73\u5747\u7684\u5206\u53d1\u7ed9\u5404\u4e2aCPU\uff0c\u4f46\u662f\u6ca1\u529e\u6cd5\u6700\u5927\u5316\u7684\u5229\u7528CPU Cache\uff0c\u76f8\u540c\u6d41\u7684\u6570\u636e\u5305\u4e0d\u4e00\u5b9a\u4f1a\u5206\u914d\u5230\u540c\u4e00\u4e2aCPU\u4e2d\uff0c\u800cRFS\u5219\u662f\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684 \u4f1a\u5c06\u76f8\u540c\u6d41\u7684\u6570\u636e\u5305\u8ba9\u76f8\u540c\u7684CPU\u6765\u5904\u7406\uff0c\u63d0\u4f9bCPU\u7684\u7f13\u5b58\u547d\u4e2d\u7387\u3002 1 2 sudo sysctl -w net.core.rps_sock_flow_entries=32768 // \u8bbe\u7f6eRFS socket hash\u8868\u5927\u5c0f sudo bash -c 'echo 2048 > /sys/class/net/eth0/queues/rx-0/rps_flow_cnt' //\u6bcf\u4e2aqueue\u6700\u5927\u7684\u6d41\u6570\u91cf Enabling accelerated RFS (aRFS) RPS\u5f00\u542f RFS\u5f00\u542f \u5185\u6838\u7f16\u8bd1\u7684\u65f6\u5019\uff0c\u914d\u7f6e\u4e86CONFIG_RFS_ACCEL\u53c2\u6570 \u8bbe\u5907\u652f\u6301ntuple RX queue\u548cCPU\u4e00\u5bf9\u4e00\u6620\u5c04\u914d\u7f6e\u597d\u4e86 \u53ea\u8981\u4e0a\u8ff0\u6761\u4ef6\u6ee1\u8db3\u5c31\u81ea\u52a8\u5f00\u542faRFS RX packet timestamping (\u5728\u8fdb\u5165RPS\u4e4b\u524d\u6253\u4e0a\u65f6\u95f4\u6233\uff0c\u8fd8\u662f\u4e4b\u540e\uff0c\u9ed8\u8ba4\u662f\u4e4b\u524d) 1 2 // \u5728\u8fdb\u5165RPS\u4e4b\u540e\uff0c\u624d\u5f00\u59cb\u6253\u4e0a\u65f6\u95f4\u6233\uff0c\u800c\u4e0d\u662f\u4e4b\u524d sudo sysctl -w net.core.netdev_tstamp_prequeue=0 Enabling flow limits and tuning flow limit hash table size 1 2 sudo sysctl -w net.core.flow_limit_table_len=8192 /proc/sys/net/core/flow_limit_cpu_bitmap adjusting IP protocol early demux \u5728\u8fdb\u53bb\u8def\u7531\u8868\u8fdb\u884c\u8def\u7531\u5339\u914d\u7684\u65f6\u5019\u5148\u770b\u4e0b\u662f\u5426\u6709\u8def\u7531\u7f13\u5b58\uff0c\u9ed8\u8ba4\u662f\u5f00\u542f\u7684\uff0c\u5728\u67d0\u4e9b\u573a\u666f\u4e0b\u5f00\u542f\u4f1a\u5bfc\u81f45%\u7684\u6027\u80fd\u4e0b\u964d 1 sudo sysctl -w net.ipv4.ip_early_demux=0 SO_INCOMING_CPU \u7ed3\u5408getsockopt\uff0c\u53ef\u4ee5\u7528\u4e8e\u67e5\u770b\u5f53\u524dsocket\u5728\u88ab\u54ea\u4e2aCPU\u5904\u7406 Reference: https://blog.packagecloud.io/eng/2016/06/22/monitoring-tuning-linux-networking-stack-receiving-data/#special-thanks Reference: https://vincent.bernat.ch/en/blog/2014-tcp-time-wait-state-linux","title":"Tuning"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/linux/network/#tcp-connection-repair","text":"https://lwn.net/Articles/495304/","title":"TCP connection repair"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/linux/network/#reference","text":"https://blog.cloudflare.com/when-tcp-sockets-refuse-to-die-zh/","title":"Reference"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/linux/network/epoll/","text":"epoll https://blog.csdn.net/dog250/article/details/80837278 https://blog.csdn.net/dog250/article/details/6612496","title":"Epoll"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/linux/network/epoll/#epoll","text":"https://blog.csdn.net/dog250/article/details/80837278 https://blog.csdn.net/dog250/article/details/6612496","title":"epoll"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/linux/network/ip_transparent/","text":"IP_TRANSPARENT\u9009\u9879\u7684\u4f5c\u7528? IP_TRANSPARENT \u7684\u76ee\u7684\u662f\u7528\u6765\u5b9e\u73b0\u6240\u8c13\u7684\u900f\u660e\u4ee3\u7406\uff0c\u548c\u5176\u5bf9\u5e94\u7684\u5c31\u662f\u4f20\u7edf\u7684\u6b63\u5411\u4ee3\u7406\uff0c\u9700\u8981\u7528\u6237\u611f\u77e5\u4ee3\u7406\u7684\u5b58\u5728\uff0c\u7528\u6237\u8bbf\u95ee\u7684\u5176\u5b9e\u662f\u4ee3\u7406\u670d\u52a1\u5668\uff0c\u4ee3\u7406\u670d\u52a1\u5668\u95f4\u63a5\u7684\u8bf7\u6c42\u771f\u6b63\u7684\u670d\u52a1\uff0c\u7136\u540e\u5c06\u7ed3\u679c\u4f20\u9012\u7ed9\u7528\u6237\uff0c\u800c\u900f\u660e\u4ee3\u7406\u662f\u4e0d\u4f1a\u8ba9\u7528\u6237\u611f\u77e5\u7684\uff0c\u8981\u505a\u5230\u8fd9\u70b9\u5176\u5b9e\u5c31\u662f\u9700\u8981\u900f\u660e\u7684\u62e6\u622a\u6389\u7528\u6237\u7684\u6d41\u91cf\uff0c\u5c06\u6d41\u91cf\u5bfc\u5411\u5230\u4ee3\u7406\u670d\u52a1\u5668\u5b9e\u73b0\u4ee3\u7406\u3002\u6bd4\u5982\u7528\u6237\u8bbf\u95ee8.8.8.8\u768480\u7aef\u53e3\uff0c\u90a3\u4e48\u901a\u8fc7\u4e00\u4e9b\u624b\u6bb5(\u6bd4\u5982\u9ed8\u8ba4\u7f51\u5173)\u5c06\u8bf7\u6c42\u8f6c\u53d1\u5230\u4ee3\u7406\u670d\u52a1\u5668\u4e0a\uff0c\u90a3\u4e48\u4ee3\u7406\u670d\u52a1\u5668\u9700\u8981accept\u8fd9\u4e2a\u8bf7\u6c42\uff0c\u4f46\u662f\u8fd9\u4e2a\u8bf7\u6c42\u8bbf\u95ee\u7684\u5730\u5740\u5176\u5b9e\u662f 8.8.8.8 \uff0c\u6b63\u5e38\u60c5\u51b5\u4e0b\u662f\u65e0\u6cd5accept\u8fd9\u4e2a\u8bf7\u6c42\u7684\u3002\u53ef\u4ee5\u901a\u8fc7\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\u6765\u9a8c\u8bc1\uff1a \u5148\u5b9e\u73b0\u4e00\u4e2a\u6a21\u62df\u7684\u4ee3\u7406\u670d\u52a1\u5668\uff0c\u53ea\u8d1f\u8d23\u63a5\u53d7\u94fe\u63a5\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 #include <stdio.h> #include <unistd.h> #include <arpa/inet.h> #include <sys/socket.h> #include <sys/types.h> int main () { int fd = socket ( AF_INET , SOCK_STREAM , 0 ); int value = 1 ; int ret ; ret = setsockopt ( fd , SOL_SOCKET , SO_REUSEADDR , & value , sizeof ( value )); perror ( \"setsockopt:\" ); struct sockaddr_in name ; name . sin_family = AF_INET ; name . sin_port = htons ( 9999 ); name . sin_addr . s_addr = htonl ( INADDR_ANY ); ret = bind ( fd , ( struct sockaddr * ) & name , sizeof ( name )); perror ( \"bind:\" ); struct sockaddr_in remote_addr ; socklen_t addr_len = sizeof ( sockaddr_in ); ret = listen ( fd , 128 ); perror ( \"listen:\" ); ret = accept ( fd , ( struct sockaddr * ) & remote_addr , & addr_len ); perror ( \"accept\" ); char ipaddr [ 20 ] = { 0 }; printf ( \"%s \\n \" , inet_ntop ( AF_INET , ( void * ) & remote_addr . sin_addr , ipaddr , 16 )); } \u6dfb\u52a0\u9ed8\u8ba4\u7f51\u5173\uff0c\u6240\u6709\u7684\u6d41\u91cf\u90fd\u5bfc\u5411\u672c\u5730\u7684 127.0.0.1 1 sudo route add default gw 127 .0.0.1 \u6a21\u62df\u7528\u6237\u8bbf\u95ee\u4e00\u4e2a\u8fdc\u7a0b\u5730\u5740\u6bd4\u5982 8.8.8.8 \u7684 9999 \u7aef\u53e3 1 nc 8 .8.8.8 9999 \u867d\u7136\u7528\u6237\u7684\u8bf7\u6c42\u88ab\u62e6\u622a\u4e86\uff0c\u5e76\u53d1\u5411\u4e86\u672c\u673a\u7684\u4ee3\u7406\u670d\u52a1\u5668\u4e0a\uff0c\u4f46\u662f\u7528\u6237\u7684\u8fd9\u4e2a\u8bf7\u6c42\u76ee\u7684\u5730\u5740\u662f 8.8.8.8 \uff0c\u5e76\u4e0d\u662f\u4ee3\u7406\u670d\u52a1\u5668\u7684\u5730\u5740\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4ee3\u7406\u670d\u52a1\u5668\u65e0\u6cd5\u63a5\u53d7\u8fd9\u4e2a\u8bf7\u6c42\u7684\uff0c\u8fd9\u4e2a\u662f\u56e0\u4e3a\u5f53\u4e00\u4e2a\u8bf7\u6c42\u88ab\u5185\u6838\u63a5\u53d7\u7684\u65f6\u5019\u4f1a\u5148\u67e5\u8be2\u4e0b local \u8def\u7531\u8868\u67e5\u770b\u76ee\u7684\u5730\u5740\u662f\u5426\u5728\u8def\u7531\u8868\u4e2d\uff0c\u5982\u679c\u5728\u624d\u4f1a\u63a5\u53d7\u94fe\u63a5\uff0c\u5426\u5219\u662f\u4e0d\u4f1a\u63a5\u53d7\u7684\u3002\u6240\u4ee5\u4e3a\u4e86\u8ba9\u4ee3\u7406\u670d\u52a1\u5668\u63a5\u53d7\u8bf7\u6c42\u53ef\u4ee5\u5728\u4ee3\u7406\u670d\u52a1\u5668\u7684\u673a\u5668\u4e0a\u5c06 8.8.8.8 \u6dfb\u52a0\u5230 local \u8def\u7531\u8868\u4e2d\u3002 \u5c06 8.8.8.8 \u6dfb\u52a0\u5230 local \u8def\u7531\u8868 1 ip route add to local 8 .8.8.8 dev lo \u518d\u6b21\u8fde\u63a5 8.8.8.8 \u90a3\u4e48\u8fd9\u4e2a\u8bf7\u6c42\u5c31\u4f1a\u987a\u5229\u88ab\u4ee3\u7406\u7a0b\u5e8f\u6240\u63a5\u53d7\u3002\u53e6\u5916\u4e00\u4e2a\u529e\u6cd5\u5c31\u662f\u672c\u6587\u6240\u63cf\u8ff0\u7684 IP_TRANSPARENT \uff0c\u901a\u8fc7\u7ed9 socket \u8bbe\u7f6e\u8fd9\u4e2a\u9009\u9879\u540e\u4ee3\u7406\u7a0b\u5e8f\u5c31\u53ef\u4ee5\u63a5\u53d7\u4efb\u4f55\u975e local \u8def\u7531\u8868\u4e2d\u51fa\u73b0\u7684\u5730\u5740\uff0c\u5c31\u53ef\u4ee5\u5b9e\u73b0\u900f\u660e\u4ee3\u7406\u4e86\u3002 \u7ed9socket\u8bbe\u7f6e IP_TRANSPARENT 1 2 3 int value = 1 ; int ret ; ret = setsockopt ( fd, SOL_IP, IP_TRANSPARENT, & value, sizeof ( value )) ; \u501f\u52a9IP_TRANSPARENT\u8fd9\u4e2asocket\u9009\u9879\u53ef\u4ee5\u4f7f\u5f97\u7a0b\u5e8f\u76d1\u542c\u5728\u4e00\u4e2a\u975e\u672c\u673a\u7684IP\u5730\u5740\u4e0a\u3002 Reference Linux\u8def\u7531\u5206\u6790 - Just For Coding Transparent proxy support \u56fe\u89e3\u6b63\u5411\u4ee3\u7406\u3001\u53cd\u5411\u4ee3\u7406\u3001\u900f\u660e\u4ee3\u7406-\u4e01\u80d6\u80d6\u7684BLOG-51CTO\u535a\u5ba2 IP_TRANSPARENT (since Linux 2.6.24) Setting this boolean option enables transparent proxying on this socket. This socket option allows the calling applica\u2010 tion to bind to a nonlocal IP address and operate both as a client and a server with the foreign address as the local end\u2010 point. NOTE: this requires that routing be set up in a way that packets going to the foreign address are routed through the TProxy box (i.e., the system hosting the application that employs the IP_TRANSPARENT socket option). Enabling this socket option requires superuser privileges (the CAP_NET_ADMIN capability). 1 2 TProxy redirection with the iptables TPROXY target also requires that this option be set on the redirected socket.","title":"Ip transparent"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/linux/network/ip_transparent/#ip_transparent","text":"IP_TRANSPARENT \u7684\u76ee\u7684\u662f\u7528\u6765\u5b9e\u73b0\u6240\u8c13\u7684\u900f\u660e\u4ee3\u7406\uff0c\u548c\u5176\u5bf9\u5e94\u7684\u5c31\u662f\u4f20\u7edf\u7684\u6b63\u5411\u4ee3\u7406\uff0c\u9700\u8981\u7528\u6237\u611f\u77e5\u4ee3\u7406\u7684\u5b58\u5728\uff0c\u7528\u6237\u8bbf\u95ee\u7684\u5176\u5b9e\u662f\u4ee3\u7406\u670d\u52a1\u5668\uff0c\u4ee3\u7406\u670d\u52a1\u5668\u95f4\u63a5\u7684\u8bf7\u6c42\u771f\u6b63\u7684\u670d\u52a1\uff0c\u7136\u540e\u5c06\u7ed3\u679c\u4f20\u9012\u7ed9\u7528\u6237\uff0c\u800c\u900f\u660e\u4ee3\u7406\u662f\u4e0d\u4f1a\u8ba9\u7528\u6237\u611f\u77e5\u7684\uff0c\u8981\u505a\u5230\u8fd9\u70b9\u5176\u5b9e\u5c31\u662f\u9700\u8981\u900f\u660e\u7684\u62e6\u622a\u6389\u7528\u6237\u7684\u6d41\u91cf\uff0c\u5c06\u6d41\u91cf\u5bfc\u5411\u5230\u4ee3\u7406\u670d\u52a1\u5668\u5b9e\u73b0\u4ee3\u7406\u3002\u6bd4\u5982\u7528\u6237\u8bbf\u95ee8.8.8.8\u768480\u7aef\u53e3\uff0c\u90a3\u4e48\u901a\u8fc7\u4e00\u4e9b\u624b\u6bb5(\u6bd4\u5982\u9ed8\u8ba4\u7f51\u5173)\u5c06\u8bf7\u6c42\u8f6c\u53d1\u5230\u4ee3\u7406\u670d\u52a1\u5668\u4e0a\uff0c\u90a3\u4e48\u4ee3\u7406\u670d\u52a1\u5668\u9700\u8981accept\u8fd9\u4e2a\u8bf7\u6c42\uff0c\u4f46\u662f\u8fd9\u4e2a\u8bf7\u6c42\u8bbf\u95ee\u7684\u5730\u5740\u5176\u5b9e\u662f 8.8.8.8 \uff0c\u6b63\u5e38\u60c5\u51b5\u4e0b\u662f\u65e0\u6cd5accept\u8fd9\u4e2a\u8bf7\u6c42\u7684\u3002\u53ef\u4ee5\u901a\u8fc7\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\u6765\u9a8c\u8bc1\uff1a \u5148\u5b9e\u73b0\u4e00\u4e2a\u6a21\u62df\u7684\u4ee3\u7406\u670d\u52a1\u5668\uff0c\u53ea\u8d1f\u8d23\u63a5\u53d7\u94fe\u63a5\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 #include <stdio.h> #include <unistd.h> #include <arpa/inet.h> #include <sys/socket.h> #include <sys/types.h> int main () { int fd = socket ( AF_INET , SOCK_STREAM , 0 ); int value = 1 ; int ret ; ret = setsockopt ( fd , SOL_SOCKET , SO_REUSEADDR , & value , sizeof ( value )); perror ( \"setsockopt:\" ); struct sockaddr_in name ; name . sin_family = AF_INET ; name . sin_port = htons ( 9999 ); name . sin_addr . s_addr = htonl ( INADDR_ANY ); ret = bind ( fd , ( struct sockaddr * ) & name , sizeof ( name )); perror ( \"bind:\" ); struct sockaddr_in remote_addr ; socklen_t addr_len = sizeof ( sockaddr_in ); ret = listen ( fd , 128 ); perror ( \"listen:\" ); ret = accept ( fd , ( struct sockaddr * ) & remote_addr , & addr_len ); perror ( \"accept\" ); char ipaddr [ 20 ] = { 0 }; printf ( \"%s \\n \" , inet_ntop ( AF_INET , ( void * ) & remote_addr . sin_addr , ipaddr , 16 )); } \u6dfb\u52a0\u9ed8\u8ba4\u7f51\u5173\uff0c\u6240\u6709\u7684\u6d41\u91cf\u90fd\u5bfc\u5411\u672c\u5730\u7684 127.0.0.1 1 sudo route add default gw 127 .0.0.1 \u6a21\u62df\u7528\u6237\u8bbf\u95ee\u4e00\u4e2a\u8fdc\u7a0b\u5730\u5740\u6bd4\u5982 8.8.8.8 \u7684 9999 \u7aef\u53e3 1 nc 8 .8.8.8 9999 \u867d\u7136\u7528\u6237\u7684\u8bf7\u6c42\u88ab\u62e6\u622a\u4e86\uff0c\u5e76\u53d1\u5411\u4e86\u672c\u673a\u7684\u4ee3\u7406\u670d\u52a1\u5668\u4e0a\uff0c\u4f46\u662f\u7528\u6237\u7684\u8fd9\u4e2a\u8bf7\u6c42\u76ee\u7684\u5730\u5740\u662f 8.8.8.8 \uff0c\u5e76\u4e0d\u662f\u4ee3\u7406\u670d\u52a1\u5668\u7684\u5730\u5740\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4ee3\u7406\u670d\u52a1\u5668\u65e0\u6cd5\u63a5\u53d7\u8fd9\u4e2a\u8bf7\u6c42\u7684\uff0c\u8fd9\u4e2a\u662f\u56e0\u4e3a\u5f53\u4e00\u4e2a\u8bf7\u6c42\u88ab\u5185\u6838\u63a5\u53d7\u7684\u65f6\u5019\u4f1a\u5148\u67e5\u8be2\u4e0b local \u8def\u7531\u8868\u67e5\u770b\u76ee\u7684\u5730\u5740\u662f\u5426\u5728\u8def\u7531\u8868\u4e2d\uff0c\u5982\u679c\u5728\u624d\u4f1a\u63a5\u53d7\u94fe\u63a5\uff0c\u5426\u5219\u662f\u4e0d\u4f1a\u63a5\u53d7\u7684\u3002\u6240\u4ee5\u4e3a\u4e86\u8ba9\u4ee3\u7406\u670d\u52a1\u5668\u63a5\u53d7\u8bf7\u6c42\u53ef\u4ee5\u5728\u4ee3\u7406\u670d\u52a1\u5668\u7684\u673a\u5668\u4e0a\u5c06 8.8.8.8 \u6dfb\u52a0\u5230 local \u8def\u7531\u8868\u4e2d\u3002 \u5c06 8.8.8.8 \u6dfb\u52a0\u5230 local \u8def\u7531\u8868 1 ip route add to local 8 .8.8.8 dev lo \u518d\u6b21\u8fde\u63a5 8.8.8.8 \u90a3\u4e48\u8fd9\u4e2a\u8bf7\u6c42\u5c31\u4f1a\u987a\u5229\u88ab\u4ee3\u7406\u7a0b\u5e8f\u6240\u63a5\u53d7\u3002\u53e6\u5916\u4e00\u4e2a\u529e\u6cd5\u5c31\u662f\u672c\u6587\u6240\u63cf\u8ff0\u7684 IP_TRANSPARENT \uff0c\u901a\u8fc7\u7ed9 socket \u8bbe\u7f6e\u8fd9\u4e2a\u9009\u9879\u540e\u4ee3\u7406\u7a0b\u5e8f\u5c31\u53ef\u4ee5\u63a5\u53d7\u4efb\u4f55\u975e local \u8def\u7531\u8868\u4e2d\u51fa\u73b0\u7684\u5730\u5740\uff0c\u5c31\u53ef\u4ee5\u5b9e\u73b0\u900f\u660e\u4ee3\u7406\u4e86\u3002 \u7ed9socket\u8bbe\u7f6e IP_TRANSPARENT 1 2 3 int value = 1 ; int ret ; ret = setsockopt ( fd, SOL_IP, IP_TRANSPARENT, & value, sizeof ( value )) ; \u501f\u52a9IP_TRANSPARENT\u8fd9\u4e2asocket\u9009\u9879\u53ef\u4ee5\u4f7f\u5f97\u7a0b\u5e8f\u76d1\u542c\u5728\u4e00\u4e2a\u975e\u672c\u673a\u7684IP\u5730\u5740\u4e0a\u3002","title":"IP_TRANSPARENT\u9009\u9879\u7684\u4f5c\u7528?"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/linux/network/ip_transparent/#reference","text":"Linux\u8def\u7531\u5206\u6790 - Just For Coding Transparent proxy support \u56fe\u89e3\u6b63\u5411\u4ee3\u7406\u3001\u53cd\u5411\u4ee3\u7406\u3001\u900f\u660e\u4ee3\u7406-\u4e01\u80d6\u80d6\u7684BLOG-51CTO\u535a\u5ba2 IP_TRANSPARENT (since Linux 2.6.24) Setting this boolean option enables transparent proxying on this socket. This socket option allows the calling applica\u2010 tion to bind to a nonlocal IP address and operate both as a client and a server with the foreign address as the local end\u2010 point. NOTE: this requires that routing be set up in a way that packets going to the foreign address are routed through the TProxy box (i.e., the system hosting the application that employs the IP_TRANSPARENT socket option). Enabling this socket option requires superuser privileges (the CAP_NET_ADMIN capability). 1 2 TProxy redirection with the iptables TPROXY target also requires that this option be set on the redirected socket.","title":"Reference"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/linux/network/tcp-ip-program/","text":"enable SO_REUSEADDR ignore SIGPIPE in any concurrent TCP server \u5f80\u5df2\u7ecf\u5173\u95ed\u7684socket\u5199\u6570\u636e\u7684\u65f6\u5019\u4f1a\u89e6\u53d1SIGPIPE\u4fe1\u53f7 TCP_NODELAY Nagle's algorithm Nagle\u7b97\u6cd5\u7684\u57fa\u672c\u5b9a\u4e49\u662f\u4efb\u610f\u65f6\u523b\uff0c\u6700\u591a\u53ea\u80fd\u6709\u4e00\u4e2a\u672a\u88ab\u786e\u8ba4\u7684\u5c0f\u6bb5\u3002 \u6240\u8c13\u201c\u5c0f\u6bb5\u201d\uff0c\u6307\u7684\u662f\u5c0f\u4e8eMSS\u5c3a\u5bf8\u7684\u6570\u636e\u5757\uff0c \u6240\u8c13\u201c\u672a\u88ab\u786e\u8ba4\u201d\uff0c\u662f\u6307\u4e00\u4e2a\u6570\u636e\u5757\u53d1\u9001\u51fa\u53bb\u540e\uff0c\u6ca1\u6709\u6536\u5230\u5bf9\u65b9\u53d1\u9001\u7684ACK\u786e\u8ba4\u8be5\u6570\u636e\u5df2\u6536\u5230\u3002 \u5982\u679c\u5305\u957f\u5ea6\u8fbe\u5230MSS\uff0c\u5219\u5141\u8bb8\u53d1\u9001\uff1b \u5982\u679c\u8be5\u5305\u542b\u6709FIN\uff0c\u5219\u5141\u8bb8\u53d1\u9001\uff1b \u8bbe\u7f6e\u4e86TCP_NODELAY\u9009\u9879\uff0c\u5219\u5141\u8bb8\u53d1\u9001\uff1b \u672a\u8bbe\u7f6eTCP_CORK\u9009\u9879\u65f6\uff0c\u82e5\u6240\u6709\u53d1\u51fa\u53bb\u7684\u5c0f\u6570\u636e\u5305\uff08\u5305\u957f\u5ea6\u5c0f\u4e8eMSS\uff09\u5747\u88ab\u786e\u8ba4\uff0c\u5219\u5141\u8bb8\u53d1\u9001\uff1b \u4e0a\u8ff0\u6761\u4ef6\u90fd\u672a\u6ee1\u8db3\uff0c\u4f46\u53d1\u751f\u4e86\u8d85\u65f6\uff08\u4e00\u822c\u4e3a200ms\uff09\uff0c\u5219\u7acb\u5373\u53d1\u9001\u3002 \u5f71\u54cd\u54cd\u5e94\u7684\u5ef6\u8fdf\u3001\u8c03\u7528writer\u540e\u5982\u679c\u6ca1\u6709\u6536\u5230\u4e0a\u4e00\u6b21\u7684ACK\u5c31\u4e0d\u53d1\u9001\u6570\u636e\u3002 SO_LINGER The correct close the socket \u6b63\u5e38\u60c5\u51b5\u4e0b\u5982\u679c\u63a5\u6536\u7f13\u51b2\u533a\u6709\u6570\u636e\uff0c\u8fd9\u4e2a\u65f6\u5019\u5173\u95edsocket\u4f1a\u5bfc\u81f4RST\u5206\u8282\u53d1\u9001\uff0c\u5982\u679c\u6b64\u65f6\u53d1\u9001\u7f13\u51b2\u533a\u4e2d\u6709\u6570\u636e\u4f1a\u5bfc\u81f4\u6570\u636e\u4e22\u5931\u3002 \u6b63\u786e\u5173\u95edsocket\u7684\u65b9\u6cd5: \u53d1\u9001\u65b9: send() + shutdown(WR) + read()->(\u8d85\u65f6\u63a7\u5236) + close() \u63a5\u6536\u65b9: read()->0 + if nothing more to send + close()","title":"Tcp ip program"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/linux/network/tcp_back_log/","text":"How TCP backlog works in Linux Linux\u6709\u4e24\u4e2a\u961f\u5217\uff0c\u4e00\u4e2a\u662f\u534a\u8fde\u63a5\u961f\u5217\uff0c\u53e6\u5916\u4e00\u4e2a\u662f\u8fde\u63a5\u961f\u5217\uff0c\u534a\u8fde\u63a5\u961f\u5217\u7684\u5927\u5c0f\u7531[1]\u63a7\u5236\uff0c\u8fde\u63a5\u961f\u5217\u7684\u5927\u5c0f\u662f\u7a0b\u5e8f\u63a7\u5236\u7684\u7a0b\u5e8f\u5728listen\u7684\u65f6\u5019\u9700\u8981\u4f20\u5165\u4e00\u4e2abacklog\u503c\uff0c\u8fd9\u4e2a\u503c\u5c31\u662f\u8fde\u63a5\u961f\u5217\u7684\u5927\u5c0f\uff0c\u7a0b\u5e8faccept\u7684\u65f6\u5019\u5176\u5b9e\u5c31\u662f\u4ece\u8fd9\u4e2a\u8fde\u63a5\u961f\u5217\u4e2d\u53d6\u4e00\u4e2a\u8fde\u63a5\u51fa\u6765\u3002\u5178\u578b\u7684\u4e00\u6b21\u8fde\u63a5\u8fc7\u7a0b\u5982\u4e0b: \u5ba2\u6237\u7aef\u53d1\u51fasyn\u8bf7\u6c42\uff0c \u72b6\u6001\u7531CLOSED\u53d8\u6210SYN_SEND \u670d\u52a1\u7aef\u6536\u5230syn\u8bf7\u6c42\u540e\uff0c\u5c06\u8be5\u8bf7\u6c42\u653e\u5230\u534a\u8fde\u63a5\u961f\u5217\uff0c\u7136\u540e\u8fd4\u56desyn + ack\uff0c\u72b6\u6001\u53d8\u4e3aSYN_RECV \u5ba2\u6237\u7aef\u53d7\u5230syn+ack\u540e\uff0c\u54cd\u5e94\u4e00\u4e2aack\u8bf7\u6c42\uff0c\u72b6\u6001\u53d8\u4e3aESTABLISHED \u670d\u52a1\u5668\u7aef\u6536\u5230ack\u8bf7\u6c42\u540e\uff0c\u5c06\u8be5\u8fde\u63a5\u4ece\u534a\u8fde\u63a5\u961f\u5217\u79fb\u52a8\u5230\u8fde\u63a5\u961f\u5217\u4e2d\uff0c\u72b6\u6001\u53d8\u4e3aESTABLISHED \u5982\u679c\u8fde\u63a5\u961f\u5217\u662f\u6ee1\u7684\uff0c\u90a3\u4e48 \u670d\u52a1\u5668\u7aef\u4f1a\u5ffd\u7565\u5ba2\u6237\u7aef\u53d1\u8fc7\u6765\u7684ack\u8bf7\u6c42\uff0c\u90a3\u4e48\u5ba2\u6237\u7aef\u4f1a\u8fdb\u884c\u91cd\u53d1\u6700\u540e\u4e00\u4e2aack\u8bf7\u6c42\uff0c\u91cd\u53d1\u7684\u6b21\u6570\u53d6\u51b3\u4e8e[2]\u5982\u679c\u5728\u91cd\u53d1\u8fc7\u7a0b\u4e2d\u670d\u52a1\u5668\u7aef\u7684\u8fde\u63a5\u961f\u5217\u4e0d\u662f\u6ee1\u4e86\uff0c\u90a3\u4e48\u5c31\u4f1a\u54cd\u5e94\u91cd\u53d1\u7684ack\uff0c\u5c06\u8fde\u63a5\u4ece\u534a\u8fde\u63a5\u961f\u5217\u79fb\u52a8\u5230\u8bf7\u6c42\u961f\u5217\u4e2d\uff0c\u5426\u5219\u8fde\u63a5\u5c31\u65ad\u6389\u4e86\u5904\u4e8e\u534a\u6253\u5f00\u7684\u72b6\u6001\uff0c\u4ece\u670d\u52a1\u5668\u7aef\u662f\u65e0\u6cd5\u770b\u5230\u8fd9\u4e2a\u8fde\u63a5\u7684\uff0c\u4f46\u662f\u5728\u5ba2\u6237\u7aef\u770b\u6765\u8fd9\u4e2a\u8fde\u63a5\u662fESTABLISHED\u72b6\u6001\u7684\u3002\u5bf9\u4e8e\u8fd9\u4e2a\u95ee\u9898\u53ef\u4ee5\u501f\u52a9\u4e8e[3]\u5c06\u8fd9\u4e2a\u9009\u9879\u8bbe\u7f6e\u4e3a1\u7684\u65f6\u5019\uff0c\u5982\u679c\u670d\u52a1\u5668\u7aef\u7684\u8fde\u63a5\u961f\u5217\u662f\u6ee1\u7684\uff0c\u90a3\u4e48\u5ba2\u6237\u7aef\u53d1\u8d77\u8fde\u63a5\u7684\u65f6\u5019\u4f1a\u6536\u5230\u670d\u52a1\u5668\u7aef\u54cd\u5e94\u7684RST\u62a5\u6587\u3002 [1] /proc/sys/net/ipv4/tcp_max_syn_backlog [2] /proc/sys/net/ipv4/tcp_synack_retrie [3] /proc/sys/net/ipv4/tcp_abort_on_overflow","title":"Tcp back log"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/linux/network/tcp_back_log/#how-tcp-backlog-works-in-linux","text":"Linux\u6709\u4e24\u4e2a\u961f\u5217\uff0c\u4e00\u4e2a\u662f\u534a\u8fde\u63a5\u961f\u5217\uff0c\u53e6\u5916\u4e00\u4e2a\u662f\u8fde\u63a5\u961f\u5217\uff0c\u534a\u8fde\u63a5\u961f\u5217\u7684\u5927\u5c0f\u7531[1]\u63a7\u5236\uff0c\u8fde\u63a5\u961f\u5217\u7684\u5927\u5c0f\u662f\u7a0b\u5e8f\u63a7\u5236\u7684\u7a0b\u5e8f\u5728listen\u7684\u65f6\u5019\u9700\u8981\u4f20\u5165\u4e00\u4e2abacklog\u503c\uff0c\u8fd9\u4e2a\u503c\u5c31\u662f\u8fde\u63a5\u961f\u5217\u7684\u5927\u5c0f\uff0c\u7a0b\u5e8faccept\u7684\u65f6\u5019\u5176\u5b9e\u5c31\u662f\u4ece\u8fd9\u4e2a\u8fde\u63a5\u961f\u5217\u4e2d\u53d6\u4e00\u4e2a\u8fde\u63a5\u51fa\u6765\u3002\u5178\u578b\u7684\u4e00\u6b21\u8fde\u63a5\u8fc7\u7a0b\u5982\u4e0b: \u5ba2\u6237\u7aef\u53d1\u51fasyn\u8bf7\u6c42\uff0c \u72b6\u6001\u7531CLOSED\u53d8\u6210SYN_SEND \u670d\u52a1\u7aef\u6536\u5230syn\u8bf7\u6c42\u540e\uff0c\u5c06\u8be5\u8bf7\u6c42\u653e\u5230\u534a\u8fde\u63a5\u961f\u5217\uff0c\u7136\u540e\u8fd4\u56desyn + ack\uff0c\u72b6\u6001\u53d8\u4e3aSYN_RECV \u5ba2\u6237\u7aef\u53d7\u5230syn+ack\u540e\uff0c\u54cd\u5e94\u4e00\u4e2aack\u8bf7\u6c42\uff0c\u72b6\u6001\u53d8\u4e3aESTABLISHED \u670d\u52a1\u5668\u7aef\u6536\u5230ack\u8bf7\u6c42\u540e\uff0c\u5c06\u8be5\u8fde\u63a5\u4ece\u534a\u8fde\u63a5\u961f\u5217\u79fb\u52a8\u5230\u8fde\u63a5\u961f\u5217\u4e2d\uff0c\u72b6\u6001\u53d8\u4e3aESTABLISHED \u5982\u679c\u8fde\u63a5\u961f\u5217\u662f\u6ee1\u7684\uff0c\u90a3\u4e48 \u670d\u52a1\u5668\u7aef\u4f1a\u5ffd\u7565\u5ba2\u6237\u7aef\u53d1\u8fc7\u6765\u7684ack\u8bf7\u6c42\uff0c\u90a3\u4e48\u5ba2\u6237\u7aef\u4f1a\u8fdb\u884c\u91cd\u53d1\u6700\u540e\u4e00\u4e2aack\u8bf7\u6c42\uff0c\u91cd\u53d1\u7684\u6b21\u6570\u53d6\u51b3\u4e8e[2]\u5982\u679c\u5728\u91cd\u53d1\u8fc7\u7a0b\u4e2d\u670d\u52a1\u5668\u7aef\u7684\u8fde\u63a5\u961f\u5217\u4e0d\u662f\u6ee1\u4e86\uff0c\u90a3\u4e48\u5c31\u4f1a\u54cd\u5e94\u91cd\u53d1\u7684ack\uff0c\u5c06\u8fde\u63a5\u4ece\u534a\u8fde\u63a5\u961f\u5217\u79fb\u52a8\u5230\u8bf7\u6c42\u961f\u5217\u4e2d\uff0c\u5426\u5219\u8fde\u63a5\u5c31\u65ad\u6389\u4e86\u5904\u4e8e\u534a\u6253\u5f00\u7684\u72b6\u6001\uff0c\u4ece\u670d\u52a1\u5668\u7aef\u662f\u65e0\u6cd5\u770b\u5230\u8fd9\u4e2a\u8fde\u63a5\u7684\uff0c\u4f46\u662f\u5728\u5ba2\u6237\u7aef\u770b\u6765\u8fd9\u4e2a\u8fde\u63a5\u662fESTABLISHED\u72b6\u6001\u7684\u3002\u5bf9\u4e8e\u8fd9\u4e2a\u95ee\u9898\u53ef\u4ee5\u501f\u52a9\u4e8e[3]\u5c06\u8fd9\u4e2a\u9009\u9879\u8bbe\u7f6e\u4e3a1\u7684\u65f6\u5019\uff0c\u5982\u679c\u670d\u52a1\u5668\u7aef\u7684\u8fde\u63a5\u961f\u5217\u662f\u6ee1\u7684\uff0c\u90a3\u4e48\u5ba2\u6237\u7aef\u53d1\u8d77\u8fde\u63a5\u7684\u65f6\u5019\u4f1a\u6536\u5230\u670d\u52a1\u5668\u7aef\u54cd\u5e94\u7684RST\u62a5\u6587\u3002 [1] /proc/sys/net/ipv4/tcp_max_syn_backlog [2] /proc/sys/net/ipv4/tcp_synack_retrie [3] /proc/sys/net/ipv4/tcp_abort_on_overflow","title":"How TCP backlog works in Linux"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/linux/network/tcp_fast_open/","text":"\u4e09\u6b21\u63e1\u624b\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5f53\u7528\u6237\u9996\u6b21\u8bbf\u95eeserver\u65f6\uff0c\u53d1\u9001 syn \u5305\uff0cserver\u6839\u636e\u7528\u6237IP\u751f\u6210 cookie \uff0c\u5e76\u4e0e syn+ack \u4e00\u540c\u53d1\u56declient\uff0cclient\u518d\u6b21\u8bbf\u95eeserver\u65f6\uff0c\u5728syn\u5305\u643a\u5e26TCP cookie\uff1b \u5982\u679cserver\u6821\u9a8c\u5408\u6cd5\uff0c\u5219\u5728\u7528\u6237\u56de\u590dack\u524d\u5c31\u53ef\u4ee5\u76f4\u63a5\u53d1\u9001\u6570\u636e\uff1b\u5426\u5219\u6309\u7167\u6b63\u5e38\u4e09\u6b21\u63e1\u624b\u8fdb\u884c\u3002TFO\u63d0\u9ad8\u6027\u80fd\u7684\u5173\u952e\u662f\u7701\u53bb\u4e86\u70ed\u8bf7\u6c42\u7684\u4e09\u6b21\u63e1\u624b\uff0c\u8fd9\u5728\u5145\u65a5\u7740\u5c0f\u5bf9\u8c61\u7684\u79fb\u52a8\u5e94\u7528\u573a\u666f\u4e2d\u80fd\u591f\u6781\u5927\u63d0\u5347\u6027\u80fd\u3002 \u5ba2\u6237\u7aef\u4f7f\u7528\u8d77\u6765\u6bd4\u8f83\u9ebb\u70e6\u5982\u679c\u4f7f\u7528 sendmsg/sendto \u7cfb\u7edf\u8c03\u7528\uff0c\u9700\u8981\u52a0\u4e0a MSG_FASTOPEN \u8fd9\u4e2aflag\uff0c\u670d\u52a1\u7aef\u4e0d\u9700\u8981\u505a\u4efb\u4f55\u8bbe\u7f6e\u3002 Reference TCP Fast Open: expediting web services TCP Fast Open Internals","title":"Tcp fast open"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/linux/network/tcp_fast_open/#reference","text":"TCP Fast Open: expediting web services TCP Fast Open Internals","title":"Reference"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/linux/network/tcp_splicing/","text":"SOCKMAP - TCP splicing of the future \u6700\u8fd1\u6211\u5076\u7136\u53d1\u73b0\u4e86\u4e00\u4e2a\u53cd\u5411\u4ee3\u7406\u4e2d\u7684\u79d8\u5bc6\u6b66\u5668-TCP Socket splicing API\uff0c\u8fd9\u5f15\u8d77\u4e86\u6211\u7684\u6ce8\u610f\uff0c\u6b63\u5982\u4f60\u6240\u77e5\uff0c\u6211\u6240\u5728\u7684\u516c\u53f8\u6b63\u8fd0\u884c\u7740\u5168\u7f51\u7ea7\u522b\u7684\u53cd\u5411\u4ee3\u7406\u670d\u52a1\u3002 \u9002\u5f53\u7684\u4f7f\u7528TCP Socket splicing\u6280\u672f\u53ef\u4ee5\u51cf\u5c11\u7528\u6237\u6001\u8fdb\u7a0b\u7684\u8d1f\u8f7d\uff0c\u53ef\u4ee5\u5b9e\u73b0\u66f4\u9ad8\u6548\u7684\u6570\u636e\u8f6c\u53d1\u3002\u6211\u4e86\u89e3\u5230Linux kernel\u4e2d\u7684SOCKMAP\u6280\u672f\u53ef\u4ee5\u8fbe\u5230\u8fd9\u4e2a\u76ee\u7684\u3002 SOCKMAP\u662f\u4e00\u4e2a\u975e\u5e38\u6709\u524d\u666f\u7684API\uff0c\u5b83\u53ef\u80fd\u4f1a\u5bfc\u81f4\u6570\u636e\u5bc6\u96c6\u578b\u7684\u5e94\u7528\u7a0b\u5e8f(\u6bd4\u5982\u53cd\u5411\u4ee3\u7406)\u7684\u4f53\u7cfb\u7ed3\u6784\u53d1\u751f\u8f6c\u53d8\u3002 \u5728\u6b64\u4e4b\u524d\uff0c\u8bf7\u8ba9\u6211\u4eec\u56de\u987e\u4e0b\u5386\u53f2\u3002","title":"SOCKMAP - TCP splicing of the future"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/linux/network/tcp_splicing/#sockmap-tcp-splicing-of-the-future","text":"\u6700\u8fd1\u6211\u5076\u7136\u53d1\u73b0\u4e86\u4e00\u4e2a\u53cd\u5411\u4ee3\u7406\u4e2d\u7684\u79d8\u5bc6\u6b66\u5668-TCP Socket splicing API\uff0c\u8fd9\u5f15\u8d77\u4e86\u6211\u7684\u6ce8\u610f\uff0c\u6b63\u5982\u4f60\u6240\u77e5\uff0c\u6211\u6240\u5728\u7684\u516c\u53f8\u6b63\u8fd0\u884c\u7740\u5168\u7f51\u7ea7\u522b\u7684\u53cd\u5411\u4ee3\u7406\u670d\u52a1\u3002 \u9002\u5f53\u7684\u4f7f\u7528TCP Socket splicing\u6280\u672f\u53ef\u4ee5\u51cf\u5c11\u7528\u6237\u6001\u8fdb\u7a0b\u7684\u8d1f\u8f7d\uff0c\u53ef\u4ee5\u5b9e\u73b0\u66f4\u9ad8\u6548\u7684\u6570\u636e\u8f6c\u53d1\u3002\u6211\u4e86\u89e3\u5230Linux kernel\u4e2d\u7684SOCKMAP\u6280\u672f\u53ef\u4ee5\u8fbe\u5230\u8fd9\u4e2a\u76ee\u7684\u3002 SOCKMAP\u662f\u4e00\u4e2a\u975e\u5e38\u6709\u524d\u666f\u7684API\uff0c\u5b83\u53ef\u80fd\u4f1a\u5bfc\u81f4\u6570\u636e\u5bc6\u96c6\u578b\u7684\u5e94\u7528\u7a0b\u5e8f(\u6bd4\u5982\u53cd\u5411\u4ee3\u7406)\u7684\u4f53\u7cfb\u7ed3\u6784\u53d1\u751f\u8f6c\u53d8\u3002 \u5728\u6b64\u4e4b\u524d\uff0c\u8bf7\u8ba9\u6211\u4eec\u56de\u987e\u4e0b\u5386\u53f2\u3002","title":"SOCKMAP - TCP splicing of the future"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/linux/network/time_wait/","text":"\u4e3a\u4ec0\u4e48\u8981\u6709 TIME_WAIT \u72b6\u6001? \u907f\u514d\u4e32\u8bdd\uff0c\u4e0a\u56fe\u4e2d\u4e00\u7aef\u8fde\u7eed\u53d1\u9001\u4e86\u4e09\u4e2a\u5305\uff0c\u5176\u4e2d SEQ=3 \u7684\u5305 delay \u4e86\u8fd8\u6ca1\u6709\u5230\u8fbe\u5bf9\u7aef\uff0c\u8fd9\u4e2a\u65f6\u5019\u5982\u679c\u5bf9\u7aef\u5173\u95ed\u8fde\u63a5\uff0c\u5e76\u53d1\u8d77\u56db\u6b21\u6325\u624b\u7684\u8fc7\u7a0b\uff0c\u6700\u540e\u505c\u7559\u5728 TIME-WAIT \u72b6\u6001\uff0c\u5047\u60f3\u4e0b\u5982\u679c\u6ca1\u6709 TIME-WAIT \u72b6\u6001\uff0c\u8fd9\u4e2a\u65f6\u5019\u5bf9\u7aef\u91cd\u65b0\u53d1\u8d77\u4e00\u4e2a\u65b0\u7684\u94fe\u63a5\u5e76\u4e14\u4f7f\u7528\u7684\u7aef\u53e3\u548c\u4e4b\u524d\u4e00\u6837\uff0c\u8fde\u63a5\u5efa\u7acb\u540e\u597d\u5f00\u59cb\u6b63\u5e38\u7684\u6570\u636e\u4f20\u8f93\uff0c\u8fd9\u4e2a\u65f6\u5019 SEQ=3 \u5305\u5230\u8fbe\u4e86\uff0c\u5e76\u4e14\u5e8f\u53f7\u6b63\u597d\u8fde\u7eed\uff0c\u8fd9\u4e2a\u65f6\u5019\u5c31\u4f1a\u88ab\u5f53\u6210\u662f\u6b63\u786e\u7684\u5305\u6765\u63a5\u6536\u3002 \u4e00\u7aef\u53d1\u8d77 FIN \u56db\u6b21\u6325\u624b\uff0c\u5728\u53d1\u9001\u5b8c\u6700\u540e\u4e00\u4e2a ACK\u5305 \u7684\u65f6\u5019\uff0c\u56e0\u4e3a\u7f51\u7edc\u7b49\u95ee\u9898\u5bfc\u81f4\u8fd9\u4e2a\u5305\u8fdf\u8fdf\u6ca1\u6709\u8fbe\u5230\u5bf9\u7aef\uff0c\u4f7f\u5f97\u5bf9\u7aef\u4e00\u76f4\u5904\u4e8e LAST-ACK \u7684\u72b6\u6001\uff0c\u8fd9\u4e2a\u65f6\u5019\u5982\u679c\u6ca1\u6709 TIME-WAIT \u72b6\u6001\uff0c\u90a3\u4e48\u5bf9\u7aef\u5c31\u53ef\u4ee5\u91cd\u65b0\u53d1\u8d77\u4e00\u4e2a\u65b0\u7684\u8bf7\u6c42\uff0c\u8fd9\u4e2a\u8bf7\u6c42\u8fbe\u5230\u5bf9\u7aef\u7684\u65f6\u5019\uff0c\u56e0\u4e3a\u5bf9\u7aef\u8fd8\u5904\u4e8e LAST-ACK \u72b6\u6001\uff0c\u5bfc\u81f4\u5bf9\u7aef\u54cd\u5e94\u4e00\u4e2aRST\u5305\u6587\u3002 \u603b\u7ed3\u6765\u8bf4\u6709\u51e0\u70b9 \u53ea\u6709\u4e3b\u52a8\u53d1\u8d77\u56db\u6b21\u6325\u624b\u7684\u4e00\u65b9\u624d\u4f1a\u8fdb\u5165 TIME-WAIT \u72b6\u6001\uff0c\u8fd9\u4e2a\u89d2\u8272\u901a\u5e38\u662f\u670d\u52a1\u7aef\u3002 TIME_WAIT \u72b6\u6001\u4e0b\u76f8\u540c\u7684\u7aef\u53e3\u65e0\u6cd5\u518d\u6b21\u53d1\u8d77\u8fde\u63a5\u8bf7\u6c42\uff0c\u8c03\u7528 connect \u4f1a\u8fd4\u56de EADDRNOTAVAL \u3002 \u5904\u4e8e TIME_WAIT \u72b6\u6001\u4e0b\u7684 socket \u5185\u6838\u5bf9\u8c61\u4f1a\u4e00\u76f4\u4fdd\u7559\u5728\u5185\u6838\u4e2d\uff0c\u5360\u7528\u5c11\u91cf\u7684\u5185\u5b58\u8d44\u6e90\u3002 \u5ba2\u6237\u7aef\u4e00\u822c\u901a\u8fc7\u589e\u52a0\u7aef\u53e3\u8303\u56f4\u3001\u914d\u7f6e\u591a\u4e2aIP\u3001\u8bbe\u7f6e net.ipv4.tcp_tw_reuse \u9009\u9879\u7684\u65b9\u5f0f\u6765\u89c4\u907f\u56e0\u4e3a TIME-WAIT \u72b6\u6001\u5bfc\u81f4\u7684\u65e0\u6cd5\u8fde\u63a5\u670d\u52a1\u7684\u95ee\u9898\u3002 \u901a\u8fc7\u5173\u95ed socket lingering \u53ef\u4ee5\u907f\u514d\u8fdb\u5165 TIME-WAIT \u72b6\u6001\uff0c\u76f4\u63a5\u4ee5 RST \u62a5\u6587\u54cd\u5e94\u3002 net.ipv4.tcp_tw_reuse \u9009\u9879\u901a\u8fc7\u6bd4\u8f83 socket \u7684 timestamp \u5b57\u6bb5\uff0c\u5982\u679c\u5b57\u6bb5\u662f\u9012\u589e\u7684\u4e14\u5927\u4e8e1\u79d2\u5c31\u590d\u7528 TIME-WAIT \u72b6\u6001\u7684 socket \uff0c\u53ea\u9488\u5bf9\u90a3\u4e9b \u5bf9\u5916\u8fde\u63a5 \u7684 socket \u5bf9\u8c61\u3002( \u5f88\u91cd\u8981\uff0c\u5bf9\u5916\u8fde\u63a5\u7684socket\u7684\u624d\u8d77\u4f5c\u7528 ) net.ipv4.tcp_tw_reuse \u53ef\u4ee5\u6709\u6548\u907f\u514d\u4e32\u8bdd\uff0c\u56e0\u4e3a\u5ef6\u8fdf\u5230\u6765\u7684\u5305\uff0c\u5b83\u7684\u65f6\u95f4\u6233\u5c0f\u4e8e\u65b0\u521b\u5efa\u7684\u8fde\u63a5\uff0c\u4f1a\u76f4\u63a5 RST \u62a5\u6587\u54cd\u5e94(\u5982\u4e0b\u56fe)\u3002 net.ipv4.tcp_tw_recycle \u7684\u539f\u7406\u4e5f\u662f\u5229\u7528\u4e86 timestamp \uff0c\u4f46\u662f\u5bf9\u8fdb\u6765\u7684\u8fde\u63a5\u548c\u5bf9\u5916\u8fde\u63a5\u7684socket\u90fd\u8d77\u4f5c\u7528\u3002\u5bf9\u4e8e\u5bf9\u5916\u8fde\u63a5\u7684socket\u539f\u7406\u548c net.ipv4.tcp_tw_reuse \u4e00\u81f4\uff0c\u5bf9\u4e8e\u8fdb\u6765\u7684\u8fde\u63a5\u5728\u6307\u5b9a\u65f6\u95f4\u8303\u56f4\u5185\u8981\u6c42 timestamp \u9012\u589e\uff0c\u5426\u5219\u5c31\u54cd\u5e94RST\u62a5\u6587\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #define TCP_PAWS_WINDOW 1 #define TCP_PAWS_MSL 60 if ( tmp_opt . saw_tstamp && tcp_death_row . sysctl_tw_recycle && ( dst = inet_csk_route_req ( sk , & fl4 , req , want_cookie )) != NULL && fl4 . daddr == saddr && ( peer = rt_get_peer (( struct rtable * ) dst , fl4 . daddr )) != NULL ) { inet_peer_refcheck ( peer ); // \u67e5\u770b\u662f\u5426\u8d85\u65f6\uff0c if (( u32 ) get_seconds () - peer -> tcp_ts_stamp < TCP_PAWS_MSL && ( s32 )( peer -> tcp_ts - req -> ts_recent ) > TCP_PAWS_WINDOW ) { NET_INC_STATS_BH ( sock_net ( sk ), LINUX_MIB_PAWSPASSIVEREJECTED ); goto drop_and_release ; } } \u5bf9\u4e8e\u7b2c\u4e00\u4e2a\u6761\u4ef6 (u32)get_seconds() - peer->tcp_ts_stamp < TCP_PAWS_MSL \u8fd9\u4e2a\u8981\u6c42\u572860\u79d2\u5185\u76f8\u540c\u7684\u6e90\u5730\u5740\u548c\u7aef\u53e3\u53d1\u8d77\u7684\u8bf7\u6c42\uff0c (s32)(peer->tcp_ts - req->ts_recent) > TCP_PAWS_WINDOW \u7b2c\u4e8c\u4e2a\u6761\u4ef6\u5c31\u662f\u8981\u6c42\u65f6\u95f4\u6233\u662f\u9012\u589e\u7684\uff0c\u53ea\u6709\u540c\u65f6\u6ee1\u8db3\u8fd9\u4e24\u4e2a\u6761\u4ef6\u624d\u4f1a\u88ab\u8ba4\u4e3a\u662f\u6709\u6548\u7684\uff0c\u5c31\u53ef\u4ee5\u590d\u7528 TIME_WAIT \u7684socket\uff0c\u5426\u5219\u5c31\u54cd\u5e94RST\u62a5\u6587\u3002\u5728NAT\u573a\u666f\u4e0b\uff0cNAT\u80cc\u540e\u7684\u4e00\u5806\u673a\u5668\u5176\u65f6\u949f\u5e76\u4e0d\u662f\u4e00\u81f4\u7684\uff0c\u6240\u4ee5\u4e00\u5b9a\u6982\u7387\u7684\u60c5\u51b5\u4e0b\u4f1a\u51fa\u73b0\u524d\u540e\u4e24\u4e2a\u94fe\u63a5\uff0c\u540e\u8005\u7684timestamp\u8981\u5927\u4e8e\u524d\u8005\uff0c\u7ed3\u679c\u5c31\u4f1a\u5bfc\u81f4\u540e\u9762\u7684\u94fe\u63a5\u88abRST\u6389\uff0c\u5bfc\u81f4\u95ee\u9898\u7684\u53d1\u751f\u3002 net.ipv4.tcp_tw_recyle \u548c net.ipv4.tcp_tw_reuse \u540c\u65f6\u5f00\u542f\u662f\u65e0\u7528\u7684\uff0c\u5ba2\u6237\u7aef\u4e00\u822c\u5f00\u542f net.ipv4.tcp_tw_reuse \u5373\u53ef\u3002 Reference Coping with the TCP TIME-WAIT state on busy Linux servers","title":"Time wait"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/linux/network/time_wait/#time_wait","text":"\u907f\u514d\u4e32\u8bdd\uff0c\u4e0a\u56fe\u4e2d\u4e00\u7aef\u8fde\u7eed\u53d1\u9001\u4e86\u4e09\u4e2a\u5305\uff0c\u5176\u4e2d SEQ=3 \u7684\u5305 delay \u4e86\u8fd8\u6ca1\u6709\u5230\u8fbe\u5bf9\u7aef\uff0c\u8fd9\u4e2a\u65f6\u5019\u5982\u679c\u5bf9\u7aef\u5173\u95ed\u8fde\u63a5\uff0c\u5e76\u53d1\u8d77\u56db\u6b21\u6325\u624b\u7684\u8fc7\u7a0b\uff0c\u6700\u540e\u505c\u7559\u5728 TIME-WAIT \u72b6\u6001\uff0c\u5047\u60f3\u4e0b\u5982\u679c\u6ca1\u6709 TIME-WAIT \u72b6\u6001\uff0c\u8fd9\u4e2a\u65f6\u5019\u5bf9\u7aef\u91cd\u65b0\u53d1\u8d77\u4e00\u4e2a\u65b0\u7684\u94fe\u63a5\u5e76\u4e14\u4f7f\u7528\u7684\u7aef\u53e3\u548c\u4e4b\u524d\u4e00\u6837\uff0c\u8fde\u63a5\u5efa\u7acb\u540e\u597d\u5f00\u59cb\u6b63\u5e38\u7684\u6570\u636e\u4f20\u8f93\uff0c\u8fd9\u4e2a\u65f6\u5019 SEQ=3 \u5305\u5230\u8fbe\u4e86\uff0c\u5e76\u4e14\u5e8f\u53f7\u6b63\u597d\u8fde\u7eed\uff0c\u8fd9\u4e2a\u65f6\u5019\u5c31\u4f1a\u88ab\u5f53\u6210\u662f\u6b63\u786e\u7684\u5305\u6765\u63a5\u6536\u3002 \u4e00\u7aef\u53d1\u8d77 FIN \u56db\u6b21\u6325\u624b\uff0c\u5728\u53d1\u9001\u5b8c\u6700\u540e\u4e00\u4e2a ACK\u5305 \u7684\u65f6\u5019\uff0c\u56e0\u4e3a\u7f51\u7edc\u7b49\u95ee\u9898\u5bfc\u81f4\u8fd9\u4e2a\u5305\u8fdf\u8fdf\u6ca1\u6709\u8fbe\u5230\u5bf9\u7aef\uff0c\u4f7f\u5f97\u5bf9\u7aef\u4e00\u76f4\u5904\u4e8e LAST-ACK \u7684\u72b6\u6001\uff0c\u8fd9\u4e2a\u65f6\u5019\u5982\u679c\u6ca1\u6709 TIME-WAIT \u72b6\u6001\uff0c\u90a3\u4e48\u5bf9\u7aef\u5c31\u53ef\u4ee5\u91cd\u65b0\u53d1\u8d77\u4e00\u4e2a\u65b0\u7684\u8bf7\u6c42\uff0c\u8fd9\u4e2a\u8bf7\u6c42\u8fbe\u5230\u5bf9\u7aef\u7684\u65f6\u5019\uff0c\u56e0\u4e3a\u5bf9\u7aef\u8fd8\u5904\u4e8e LAST-ACK \u72b6\u6001\uff0c\u5bfc\u81f4\u5bf9\u7aef\u54cd\u5e94\u4e00\u4e2aRST\u5305\u6587\u3002 \u603b\u7ed3\u6765\u8bf4\u6709\u51e0\u70b9 \u53ea\u6709\u4e3b\u52a8\u53d1\u8d77\u56db\u6b21\u6325\u624b\u7684\u4e00\u65b9\u624d\u4f1a\u8fdb\u5165 TIME-WAIT \u72b6\u6001\uff0c\u8fd9\u4e2a\u89d2\u8272\u901a\u5e38\u662f\u670d\u52a1\u7aef\u3002 TIME_WAIT \u72b6\u6001\u4e0b\u76f8\u540c\u7684\u7aef\u53e3\u65e0\u6cd5\u518d\u6b21\u53d1\u8d77\u8fde\u63a5\u8bf7\u6c42\uff0c\u8c03\u7528 connect \u4f1a\u8fd4\u56de EADDRNOTAVAL \u3002 \u5904\u4e8e TIME_WAIT \u72b6\u6001\u4e0b\u7684 socket \u5185\u6838\u5bf9\u8c61\u4f1a\u4e00\u76f4\u4fdd\u7559\u5728\u5185\u6838\u4e2d\uff0c\u5360\u7528\u5c11\u91cf\u7684\u5185\u5b58\u8d44\u6e90\u3002 \u5ba2\u6237\u7aef\u4e00\u822c\u901a\u8fc7\u589e\u52a0\u7aef\u53e3\u8303\u56f4\u3001\u914d\u7f6e\u591a\u4e2aIP\u3001\u8bbe\u7f6e net.ipv4.tcp_tw_reuse \u9009\u9879\u7684\u65b9\u5f0f\u6765\u89c4\u907f\u56e0\u4e3a TIME-WAIT \u72b6\u6001\u5bfc\u81f4\u7684\u65e0\u6cd5\u8fde\u63a5\u670d\u52a1\u7684\u95ee\u9898\u3002 \u901a\u8fc7\u5173\u95ed socket lingering \u53ef\u4ee5\u907f\u514d\u8fdb\u5165 TIME-WAIT \u72b6\u6001\uff0c\u76f4\u63a5\u4ee5 RST \u62a5\u6587\u54cd\u5e94\u3002 net.ipv4.tcp_tw_reuse \u9009\u9879\u901a\u8fc7\u6bd4\u8f83 socket \u7684 timestamp \u5b57\u6bb5\uff0c\u5982\u679c\u5b57\u6bb5\u662f\u9012\u589e\u7684\u4e14\u5927\u4e8e1\u79d2\u5c31\u590d\u7528 TIME-WAIT \u72b6\u6001\u7684 socket \uff0c\u53ea\u9488\u5bf9\u90a3\u4e9b \u5bf9\u5916\u8fde\u63a5 \u7684 socket \u5bf9\u8c61\u3002( \u5f88\u91cd\u8981\uff0c\u5bf9\u5916\u8fde\u63a5\u7684socket\u7684\u624d\u8d77\u4f5c\u7528 ) net.ipv4.tcp_tw_reuse \u53ef\u4ee5\u6709\u6548\u907f\u514d\u4e32\u8bdd\uff0c\u56e0\u4e3a\u5ef6\u8fdf\u5230\u6765\u7684\u5305\uff0c\u5b83\u7684\u65f6\u95f4\u6233\u5c0f\u4e8e\u65b0\u521b\u5efa\u7684\u8fde\u63a5\uff0c\u4f1a\u76f4\u63a5 RST \u62a5\u6587\u54cd\u5e94(\u5982\u4e0b\u56fe)\u3002 net.ipv4.tcp_tw_recycle \u7684\u539f\u7406\u4e5f\u662f\u5229\u7528\u4e86 timestamp \uff0c\u4f46\u662f\u5bf9\u8fdb\u6765\u7684\u8fde\u63a5\u548c\u5bf9\u5916\u8fde\u63a5\u7684socket\u90fd\u8d77\u4f5c\u7528\u3002\u5bf9\u4e8e\u5bf9\u5916\u8fde\u63a5\u7684socket\u539f\u7406\u548c net.ipv4.tcp_tw_reuse \u4e00\u81f4\uff0c\u5bf9\u4e8e\u8fdb\u6765\u7684\u8fde\u63a5\u5728\u6307\u5b9a\u65f6\u95f4\u8303\u56f4\u5185\u8981\u6c42 timestamp \u9012\u589e\uff0c\u5426\u5219\u5c31\u54cd\u5e94RST\u62a5\u6587\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #define TCP_PAWS_WINDOW 1 #define TCP_PAWS_MSL 60 if ( tmp_opt . saw_tstamp && tcp_death_row . sysctl_tw_recycle && ( dst = inet_csk_route_req ( sk , & fl4 , req , want_cookie )) != NULL && fl4 . daddr == saddr && ( peer = rt_get_peer (( struct rtable * ) dst , fl4 . daddr )) != NULL ) { inet_peer_refcheck ( peer ); // \u67e5\u770b\u662f\u5426\u8d85\u65f6\uff0c if (( u32 ) get_seconds () - peer -> tcp_ts_stamp < TCP_PAWS_MSL && ( s32 )( peer -> tcp_ts - req -> ts_recent ) > TCP_PAWS_WINDOW ) { NET_INC_STATS_BH ( sock_net ( sk ), LINUX_MIB_PAWSPASSIVEREJECTED ); goto drop_and_release ; } } \u5bf9\u4e8e\u7b2c\u4e00\u4e2a\u6761\u4ef6 (u32)get_seconds() - peer->tcp_ts_stamp < TCP_PAWS_MSL \u8fd9\u4e2a\u8981\u6c42\u572860\u79d2\u5185\u76f8\u540c\u7684\u6e90\u5730\u5740\u548c\u7aef\u53e3\u53d1\u8d77\u7684\u8bf7\u6c42\uff0c (s32)(peer->tcp_ts - req->ts_recent) > TCP_PAWS_WINDOW \u7b2c\u4e8c\u4e2a\u6761\u4ef6\u5c31\u662f\u8981\u6c42\u65f6\u95f4\u6233\u662f\u9012\u589e\u7684\uff0c\u53ea\u6709\u540c\u65f6\u6ee1\u8db3\u8fd9\u4e24\u4e2a\u6761\u4ef6\u624d\u4f1a\u88ab\u8ba4\u4e3a\u662f\u6709\u6548\u7684\uff0c\u5c31\u53ef\u4ee5\u590d\u7528 TIME_WAIT \u7684socket\uff0c\u5426\u5219\u5c31\u54cd\u5e94RST\u62a5\u6587\u3002\u5728NAT\u573a\u666f\u4e0b\uff0cNAT\u80cc\u540e\u7684\u4e00\u5806\u673a\u5668\u5176\u65f6\u949f\u5e76\u4e0d\u662f\u4e00\u81f4\u7684\uff0c\u6240\u4ee5\u4e00\u5b9a\u6982\u7387\u7684\u60c5\u51b5\u4e0b\u4f1a\u51fa\u73b0\u524d\u540e\u4e24\u4e2a\u94fe\u63a5\uff0c\u540e\u8005\u7684timestamp\u8981\u5927\u4e8e\u524d\u8005\uff0c\u7ed3\u679c\u5c31\u4f1a\u5bfc\u81f4\u540e\u9762\u7684\u94fe\u63a5\u88abRST\u6389\uff0c\u5bfc\u81f4\u95ee\u9898\u7684\u53d1\u751f\u3002 net.ipv4.tcp_tw_recyle \u548c net.ipv4.tcp_tw_reuse \u540c\u65f6\u5f00\u542f\u662f\u65e0\u7528\u7684\uff0c\u5ba2\u6237\u7aef\u4e00\u822c\u5f00\u542f net.ipv4.tcp_tw_reuse \u5373\u53ef\u3002","title":"\u4e3a\u4ec0\u4e48\u8981\u6709TIME_WAIT\u72b6\u6001?"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/linux/network/time_wait/#reference","text":"Coping with the TCP TIME-WAIT state on busy Linux servers","title":"Reference"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/linux/network/virtual-network/","text":"Bridge vxlan \u521b\u5efa\u70b9\u5bf9\u70b9\u7684\u7c7b\u578b\u7684vxlan\uff0c 1 2 3 4 5 $ ip link add vxlan0 type vxlan \\ id 42 \\ remote 192 .168.8.101 \\ local 192 .168.8.100 \\ dev enp0s8 \u7ed9vxlan\u8bbe\u7f6eIP\uff0c\u5e76\u5f00\u542fvxlan\u63a5\u53e3 1 2 $ ip addr add 10 .20.1.2/24 dev vxlan0 $ ip link set vxlan0 up \u6267\u884c\u5b8c\u6210\u540e\u4f1a\u5728\u8def\u7531\u8868\u4e2d\u6dfb\u52a0\u5982\u4e0b\u8def\u7531\u6761\u76ee: 1 10 .20.1.0/24 dev vxlan0 proto kernel scope link src 10 .20.1.2 https://developers.redhat.com/blog/2018/10/22/introduction-to-linux-interfaces-for-virtual-networking/","title":"Virtual network"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/linux/network/virtual-network/#bridge","text":"","title":"Bridge"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/linux/network/virtual-network/#vxlan","text":"\u521b\u5efa\u70b9\u5bf9\u70b9\u7684\u7c7b\u578b\u7684vxlan\uff0c 1 2 3 4 5 $ ip link add vxlan0 type vxlan \\ id 42 \\ remote 192 .168.8.101 \\ local 192 .168.8.100 \\ dev enp0s8 \u7ed9vxlan\u8bbe\u7f6eIP\uff0c\u5e76\u5f00\u542fvxlan\u63a5\u53e3 1 2 $ ip addr add 10 .20.1.2/24 dev vxlan0 $ ip link set vxlan0 up \u6267\u884c\u5b8c\u6210\u540e\u4f1a\u5728\u8def\u7531\u8868\u4e2d\u6dfb\u52a0\u5982\u4e0b\u8def\u7531\u6761\u76ee: 1 10 .20.1.0/24 dev vxlan0 proto kernel scope link src 10 .20.1.2 https://developers.redhat.com/blog/2018/10/22/introduction-to-linux-interfaces-for-virtual-networking/","title":"vxlan"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/linux/perf/","text":"\u6027\u80fd\u4f18\u5316\u57fa\u7840 \u5de5\u5177\u7bc7 pidstat \u8fdb\u7a0b\u7ea7\u522b\u7684\u6027\u80fd\u5206\u6790 -u CPU\u4f7f\u7528\u7387\u5206\u6790 %guest \u82b1\u8d39\u5728\u8fd0\u884c\u865a\u62df\u673a\u7684cpu \u767e\u5206\u6bd4 %wait \u82b1\u8d39\u5728\u7b49\u5f85CPU\u53bb\u8fd0\u884c\u7684CPU\u767e\u5206\u6bd4\uff0c\u8fd9\u4e2a\u503c\u8d8a\u9ad8\u8bf4\u660eCPU\u4e0d\u8db3\u6bd4\u8f83\u4e25\u91cd stress-ng --cpu 10 --timeout 600 \u901a\u8fc7stress-ng\u6a21\u62df\u8d85\u8fc7CPU\u6838\u5fc3\u6570\u7684\u8fdb\u7a0b\u8fd0\u884c\u65f6\u5c31\u4f1a\u51fa\u73b0%wait\u503c\u5f88\u9ad8\u7684\u573a\u666f -d IO\u5206\u6790 kB_rd/s \u6bcf\u79d2\u78c1\u76d8\u8bfb\u53d6\u7684kb\u6570\uff0c\u6ce8\u610f\u8fd9\u91cc\u662f\u8bfb\u6b21\u76d8\uff0c\u5e76\u4e0d\u662f\u8bfb\u7f13\u5b58 kB_wr/s \u6bcf\u79d2\u78c1\u76d8\u5199\u5165\u7684kb\u6570 kB_ccwr/s \u6bcf\u79d2\u56e0\u4e3atruncate\u5bfc\u81f4page cache dirty\u88ab\u64a4\u9500\u7684kb\u6570 iodelay \u7b49\u5f85 \u540c\u6b65io\u5b8c\u6210 \u548c\u56e0\u4e3a swap in\u800c\u5bfc\u81f4\u7684block IO\u5b8c\u6210 \u6240\u9700\u8981\u7b49\u5f85\u7684\u65f6\u949f\u5468\u671f -w \u4e0a\u4e0b\u6587\u5207\u6362\u5206\u6790 cswch/s \u4e3b\u52a8\u8ba9\u51faCPU\u5bfc\u81f4\u7684\u4e0a\u4e0b\u6587\u5207\u6362(\u6bd4\u5982\u7b49\u5f85IO) nvcswch/s \u88ab\u52a8\u8ba9\u51faCPU\u5bfc\u81f4\u7684\u4e0a\u4e0b\u6587\u5207\u6362(\u6bd4\u5982\u65f6\u95f4\u7247\u7528\u5b8c) Tips IO\u5bc6\u96c6\u578b\u7684\u8fdb\u7a0b\uff0ccswch/s\u7684\u503c\u4f1a\u66f4\u9ad8\u4e00\u4e9b \u9ed8\u8ba4pidstat\u663e\u793a\u7684\u6570\u8fdb\u7a0b\u7ea7\u522b\u7684\u7ebf\u7a0b\u5207\u6362\u6b21\u6570\uff0c\u4f46\u662f\u4e0a\u4e0b\u6587\u5207\u6362\u5176\u5b9e\u662f\u7ebf\u7a0b\u7ea7\u522b\u7684\uff0c\u6240\u4ee5\u9ed8\u8ba4\u53ea\u4f1a\u663e\u793a\u4e3b\u7ebf\u7a0b\u7684\u4e0a\u4e0b\u6587\u5207\u6362\u6b21\u6570\uff0c\u9700\u8981\u52a0\u4e0a-t\u663e\u793a\u6240\u6709\u7ebf\u7a0b\u7684\u5207\u6362\u6b21\u6570 \u4e0a\u4e0b\u6587\u5207\u6362\u6b21\u6570\u589e\u591a\u4f1a\u5bfc\u81f4\u4e2d\u65ad\u6b21\u6570\u4e5f\u589e\u591a\uff0c\u4e2d\u65ad\u6709\u5f88\u591a\u79cd\uff0c\u5176\u4e2d\u4e00\u79cd\u53eb\u505aRES(\u91cd\u8c03\u5ea6\u4e2d\u65ad\uff0c\u901a\u8fc7/proc/interrupts\u67e5\u770b)\u4e2d\u65ad\uff0c\u8ba9\u7a7a\u95f2\u7684CPU\u6765\u8c03\u5ea6\u4efb\u52a1\u3002 mpstat \u7cfb\u7edf\u7ea7\u522b\u7684CPU\u5206\u6790\uff0c\u5206\u6790\u591a\u6838CPU\u7684\u6574\u4f53\u60c5\u51b5\uff0c\u4ee5\u53ca\u5404\u4e2aCPU\u7684\u4f7f\u7528\u7387\u3001iowait\u7b49 1 mpstat -P ALL interval dstat top \u57fa\u4e8eproc\u6587\u4ef6\u5feb\u7167\u5b9e\u73b0\uff0c\u5bf9\u4e8e\u751f\u547d\u5468\u671f\u6bd4\u8f83\u77ed\u7684\u8fdb\u7a0b\u5c31\u65e0\u80fd\u4e3a\u529b\u4e86 \u6309\u4e0bM\u5207\u6362\u5230\u5185\u5b58\u6392\u5e8f \u6309\u4e0bP\u5207\u6362\u5230CPU\u4f7f\u7528\u7387\u6392\u5e8f 1 2 3 4 5 6 7 8 9 10 11 As a default, percentages for these individual categories are displayed. Where two labels are shown below, those for more recent kernel versions are shown first. us, user : time running un-niced user processes sy, system : time running kernel processes ni, nice : time running niced user processes id, idle : time spent in the kernel idle handler wa, IO-wait : time waiting for I/O completion hi : time spent servicing hardware interrupts si : time spent servicing software interrupts st : time stolen from this vm by the hypervisor iostat \u67e5\u770b\u78c1\u76d8\u7684\u8bfb\u3001\u5199\u901f\u5ea6\u3001\u4ee5\u53cacpu\u7684iowait\u3001\u4f7f\u7528\u7387\u7b49 vmstat \u5206\u6790\u7cfb\u7edf\u7ea7\u522b\u7684\u4e0a\u4e0b\u6587\u5207\u6362\u3001\u8fdb\u7a0b\u961f\u5217\u5927\u5c0f\u3001\u4e2d\u65ad\u6570\u7b49 top\u3001pidstat\u3001ps\u7b49\u67e5\u770bCPU\u4f7f\u7528\u7387\u7684\u65f6\u5019\uff0c\u4f1a\u5b58\u5728\u4e0d\u4e00\u81f4\u7684\u95ee\u9898\uff0c\u672c\u8d28\u4e0a\u662f\u56e0\u4e3a\uff0c\u8fd9\u4e9b\u5de5\u5177\u8ba1\u7b97CPU\u4f7f\u7528\u7387\u7684\u65f6\u5019\u7528\u7684\u90fd\u662f\u5e73\u5747CPU\u4f7f\u7528\u7387 \u4e5f\u5c31\u662f\u8ba1\u7b97\u4e00\u6bb5\u65f6\u95f4\u5185\u7684\u5e73\u5747CPU\u4f7f\u7528\u7387\uff0ctop\u9ed8\u8ba4\u662f3\u79d2\u8ba1\u7b97\u4e00\u6b21\u3002\u800cps\u770b\u7684\u662f\u6574\u4e2a\u8fdb\u7a0b\u7684\u751f\u547d\u5468\u671f\u3002 sar -r \u663e\u793a\u5185\u5b58\u4f7f\u7528\u60c5\u51b5 -S \u663e\u793aSwap\u7684\u4f7f\u7528\u60c5\u51b5 iowait \u8868\u793a\u5728\u4e00\u4e2a\u91c7\u6837\u5468\u671f\u5185\u6709\u767e\u5206\u4e4b\u51e0\u7684\u65f6\u95f4\u5c5e\u4e8e\u4ee5\u4e0b\u60c5\u51b5\uff1aCPU\u7a7a\u95f2\u3001\u5e76\u4e14\u6709\u4ecd\u672a\u5b8c\u6210\u7684I/O\u8bf7\u6c42\u3002iowait\u9ad8\u5e76\u4e0d\u4ee3\u8868I/O\u6709\u74f6\u9888 \u56e0\u4e3aiowait\u7684\u503c\u53d6\u51b3\u4e8eCPU\u7a7a\u95f2\u72b6\u6001\u4e0b\u7684\u672a\u5b8c\u6210I/O\u8bf7\u6c42\uff0c\u610f\u601d\u5c31\u662fI/O\u672a\u5b8c\u6210\u4e0d\u662f\u56e0\u4e3a\u6ca1\u6709CPU\u5bfc\u81f4\u7684\uff0c\u800c\u662f\u5728\u7b49\u5f85IO\u3002\u6240\u4ee5\u8fd9\u4e2a\u503c\u4f1a\u53d7\u5230CPU\u662f\u5426 \u7a7a\u95f2\u7684\u5f71\u54cd\uff0c\u5982\u679cCPU\u5f88\u7e41\u5fd9\uff0c\u90a3\u4e48\u8fd9\u4e2a\u503c\u4e0d\u53d7\u5f71\u54cd\u3002\u4e00\u65e6CPU\u7a7a\u95f2\u4e86\uff0c\u8fd9\u4e2a\u503c\u5c31\u5347\u9ad8\u4e86\uff0c\u4f46\u662f\u524d\u540e\u7684IO\u6ca1\u6709\u53d8\u5316\u3002 echo 3 > /proc/sys/vm/drop_caches pcstat \u53ef\u4ee5\u7528\u6765\u67e5\u8be2\u4e00\u4e2a\u6587\u4ef6\u662f\u5426\u88ab\u7f13\u5b58\u4e86\uff0c\u6838\u5fc3\u662f\u4f7f\u7528\u4e86mincore\u7cfb\u7edf\u8c03\u7528 bcc\u7684cachestat.py\u3001cachetop.py\u3001memleak.py\u3001 strace -p xxx -c \u7edf\u8ba1\u7cfb\u7edf\u8c03\u7528\u7684\u6b21\u6570\u548c\u8017\u65f6 \u573a\u666fcase \u5927\u91cf\u8fdb\u7a0b\u9891\u7e41\u521b\u5efa\u548c\u9000\u51fa\u5bfc\u81f4\u7684CPU\u4f7f\u7528\u7387\u4e0a\u5347\uff0c\u4f46\u662fps\u3001top\u3001pidstat\u65e0\u6cd5\u67e5\u770b\u5230\u8fd9\u4e00\u73b0\u8c61 top\u3001ps\u3001pidstat\u8fd9\u4e9b\u90fd\u662f\u57fa\u4e8e\u4e00\u6bb5\u95f4\u9694\u6765\u7edf\u8ba1\u548c\u8ba1\u7b97\uff0c\u6ca1\u529e\u6cd5\u5bf9\u4e8e\u90a3\u4e9b\u751f\u547d\u5468\u671f\u975e\u5e38\u77ed\u7684\u5927\u91cf\u8fdb\u7a0b\u5bfc\u81f4\u7684CPU\u4f7f\u7528\u7387\u53d8\u9ad8\u7684\u5206\u6790\uff0c\u9700\u8981\u7ed3\u5408perf record\u6765\u5206\u6790\u3002 \u76f4\u63a5IO\u8bfb\u78c1\u76d8\uff0c\u5bfc\u81f4iowait\u5347\u9ad8\uff0c\u4f46\u662fCPU\u4f7f\u7528\u7387\u4e0d\u9ad8\uff0cload\u4e5f\u5347\u9ad8\u4e86\u3002 \u57fa\u672c\u539f\u7406 Linux\u8c03\u5ea6\u5668\u539f\u7406\u548c\u4f18\u5148\u7ea7 \u8c03\u5ea6\u7b56\u7565\u6709SCHED_FIFO\u3001SCHED_RR\u3001SCHED_BATCH\u3001SCHED_IDLE\u3001SCHED_NORMAL\uff0c\u524d\u4e24\u4e2a\u662f\u5b9e\u65f6\u8fdb\u7a0b\u7684\u8c03\u5ea6\u7b56\u7565\uff0c\u9ed8\u8ba4\u662fSCHED_NORMAL\uff0c\u53ef\u4ee5\u901a\u8fc7sched_setscheduler\u6765\u8c03\u6574\u8c03\u5ea6\u7b56\u7565\u548c\u4f18\u5148\u7ea7\u3002 \u975e\u5b9e\u65f6\u8fdb\u7a0b\uff0c\u901a\u8fc7nice(\u8fdb\u7a0b\u4f18\u5148\u7ea7\uff0c\u8303\u56f4-20~19)\u6765\u8c03\u6574\uff0c\u5728\u8fdb\u7a0b\u5185\u90e8\u53ef\u4ee5\u8c03\u7528getpriority/setpriority\u6765\u8bbe\u7f6e\uff0c\u8fd9\u4e2anice\u53ea\u662f\u6743\u91cd\uff0c\u5e76\u4e0d\u662f\u7edd\u5bf9\u7684\u3002 \u5b9e\u65f6\u8fdb\u7a0b\u5176\u4f18\u5148\u7ea7\u8303\u56f4\u4e3a1~99 \u5b9e\u65f6\u8fdb\u7a0b\u4e00\u65e6\u8fd0\u884c\u4f1a\u4e00\u76f4\u8fd0\u884c\uff0c\u9664\u975e\u88ab\u9ad8\u4f18\u5148\u7ea7\u7684\u8fdb\u7a0b\u62a2\u5360\u3001\u8fdb\u7a0b\u7ec8\u6b62\u3001\u963b\u585e(\u7b49\u5f85IO)\u3001\u81ea\u52a8\u8c03\u7528sched_yield\u653e\u5f03CPU\u3002 \u8fdb\u7a0b\u4e0a\u4e0b\u6587\u5207\u6362\u7684\u573a\u666f \u65f6\u95f4\u7247\u7528\u5b8c\u4e86 \u8fdb\u7a0b\u8d44\u6e90\u4e0d\u8db3\uff0c\u7b49\u5f85IO\u6216\u8005\u7b49\u5f85\u5185\u5b58\u8d44\u6e90 \u8fdb\u7a0b\u4e3b\u52a8sleep \u8fdb\u7a0b\u4e3b\u52a8\u8ba9\u51facpu(\u5b9e\u65f6\u8fdb\u7a0b\u624d\u80fd\u8fd9\u4e48\u505a) \u4f18\u5148\u7ea7\u62a2\u5360 \u786c\u4ef6\u4e2d\u65ad \u5185\u5b58\u4e0d\u8db3\u65f6\u5982\u4f55\u5904\u7406 OOM\u6765\u6740\u6b7b\u8fdb\u7a0b (oom_score\u6765\u786e\u5b9a\u54ea\u4e2a\u8fdb\u7a0b\u88ab\u6740\u6b7b\uff0c\u6d88\u8017\u7684\u5185\u5b58\u8d8a\u5927oom_score\u8d8a\u5927\uff0c\u8d8a\u5927\u8d8a\u5bb9\u6613\u6740\u6b7b\uff0c[-17, 15]\uff0c\u53ef\u4ee5/proc/$PID/oom_adj \u6765\u6311\u6218\u8fd9\u4e2a\u503c) swap\u5904\u7406\uff0c\u5c06\u4e0d\u5e38\u4f7f\u7528\u7684\u533f\u540d\u9875\u6362\u51fa \u628a\u6700\u8fd1\u4f7f\u7528\u8f83\u5c11\u7684\u7f13\u5b58\u9875\u56de\u6536 Buffer\u548cCache Buffer\u662f\u5bf9\u78c1\u76d8\u6570\u636e\u7684\u7f13\u5b58\uff0c\u800cCache\u662f\u6587\u4ef6\u6570\u636e\u7684\u7f13\u5b58\uff0c\u5b83\u4eec\u65e2\u4f1a\u7528\u5728\u8bfb\u8bf7\u6c42\u4e2d\uff0c\u4e5f\u4f1a \u7528\u5728\u5199\u8bf7\u6c42\u4e2d\u3002 \u7406\u8bba\u4e0a\uff0c\u4e00\u4e2a\u6587\u4ef6\u8bfb\u9996\u5148\u5230Block Buffer, \u7136\u540e\u5230Page Cache\u3002\u6709\u4e86\u6587\u4ef6\u7cfb\u7edf\u624d\u6709\u4e86Page Cache. \u5728\u8001\u7684Linux\u4e0a\u8fd9\u4e24\u4e2aCache\u662f\u5206\u5f00\u7684\u3002\u90a3\u8fd9\u6837\u5bf9\u4e8e\u6587\u4ef6\u6570\u636e\uff0c\u4f1a\u88abCache\u4e24\u6b21\u3002\u8fd9\u79cd\u65b9\u6848\u867d\u7136\u7b80\u5355\uff0c \u4f46\u4f4e\u6548\u3002 \u540e\u671fLinux\u628a\u8fd9\u4e24\u4e2aCache\u7edf\u4e00\u4e86\u3002\u5bf9\u4e8e\u6587\u4ef6\uff0cPage Cache\u6307\u5411Block Buffer\uff0c\u5bf9\u4e8e\u975e\u6587\u4ef6 \u5219\u662fBlock Buffer\u3002 \u8fd9\u6837\u5c31\u5982\u6587\u4ef6\u5b9e\u9a8c\u7684\u7ed3\u679c\uff0c\u6587\u4ef6\u64cd\u4f5c\uff0c\u53ea\u5f71\u54cdPage Cache\uff0cRaw\u64cd\u4f5c\uff0c\u5219\u53ea\u5f71\u54cdBuffer. \u5185\u5b58\u5206\u7c7b \u4ece\u51e0\u4e2a\u7eac\u5ea6\u5206\u4e3a\u4e0b\u9762\u56db\u4e2a\u8c61\u9650\u3002 1 2 3 4 5 6 7 8 9 10 Private | Shared 1 | 2 Anonymous . stack | . malloc() | . brk()/sbrk() | . POSIX shm* . mmap(PRIVATE, ANON) | . mmap(SHARED, ANON) -----------------------+---------------------- . mmap(PRIVATE, fd) | . mmap(SHARED, fd) File-backed . pgms/shared libs | 3 | 4 \u533f\u540d\u9875\u3001\u57fa\u4e8e\u6587\u4ef6\u6620\u5c04\u3001privated\u3001shared\u7684\uff0c\u5185\u6838\u5728 \u6027\u80fd\u5206\u6790 CPU CPI/IPC \u6bcf\u6307\u4ee4\u5468\u671f\u6570/\u6bcf\u5468\u671f\u6307\u4ee4\u6570\uff0c\u8fd9\u4e2a\u6570\u503c\u8d8a\u9ad8\uff0c\u8868\u660eCPU\u7ecf\u5e38\u9677\u5165\u505c\u6ede\uff0c\u901a\u5e38\u662f\u5728\u8bbf\u95ee\u5185\u5b58\u3002(perf stat) \u4f7f\u7528\u7387 (mpstat\u3001top) \u7528\u6237\u65f6\u95f4/\u5185\u6838\u65f6\u95f4 \u8ba1\u7b97\u5bc6\u96c6\u578b\u7528\u6237\u65f6\u95f4\u591a\uff0cIO\u5bc6\u96c6\u578b\u5219\u5185\u6838\u65f6\u95f4\u591a\u3002(mpstat\u3001top) \u7f13\u5b58\u4eb2\u548c\u6027 \u8fdb\u7a0bCPU\u7ed1\u5b9a\u3001cpuset\u72ec\u5360CPU\u7ec4\u7b49\u65b9\u5f0f\uff0c\u907f\u514d\u8fdb\u7a0b\u8de8CPU\u5207\u6362\u5bfc\u81f4\u7f13\u5b58\u5931\u6548\u3002(perf stat) \u8c03\u5ea6\u7b56\u7565 \u4e0a\u4e0b\u6587\u5207\u6362\u5f00\u9500 (vmstat\u3001pidstat -w) \u901a\u8fc7cpuset\u5b9e\u73b0\u72ec\u5360CPU\u7ec4 1 2 3 4 5 6 cd /sys/fs/cgroup/cpuset mkdir prodset cd prodset echo 7 -10 > cpus echo 1 > cpu_exclusive echo PID > tasks \u901a\u8fc7taskset\u8fdb\u884c\u8fdb\u7a0b\u7ed1\u5b9a 1 taskset -pc 7 -10 PID Memory TLB\u7f13\u5b58\u547d\u4e2d\u7387 HugePage\u6765\u63d0\u9ad8TLB\u7f13\u5b58\u547d\u4e2d\u7387\uff0c\u8fd8\u6709THP(\u900f\u660e\u5de8\u9875\u9762) swappiness swap\u4ea4\u6362\u7684\u503e\u5411\u6027 oom /proc/PID/oom_adj [-17, 15]\u6570\u503c\u8d8a\u5927\uff0c\u8d8a\u5bb9\u6613\u88abOOM\u6740\u6b7b\uff0ccgroup\u4e2d\u901a\u8fc7memory.oom \u6765\u5f00\u542f\u6216\u8005\u7981\u7528oom \u810f\u9875\u56de\u6536\u7b56\u7565 \u9875\u7f13\u5b58\u548cBuffer \u7f3a\u9875\u5f02\u5e38 slab\u7f13\u5b58 (slabtop) /proc/sys/vm/min_free_kbytes \u5b9a\u671f\u56de\u6536\u5185\u5b58\u7684\u9600\u503c /proc/sys/vm/swappiness \u6587\u4ef6\u9875\u548c\u533f\u540d\u9875\u7684\u56de\u6536\u503e\u5411 Linux proc /proc/PID/smaps PSS \u628a\u5171\u4eab\u5185\u5b58\u5e73\u5206\u5230\u5404\u4e2a\u8fdb\u7a0b\u540e\uff0c\u518d\u52a0\u4e0a\u8fdb\u7a0b\u672c\u8eab\u975e\u5171\u4eab\u5185\u5b58\u7684\u5927\u5c0f The \"proportional set size\" (PSS) of a process is the count of pages it has in memory, where each page is divided by the number of processes sharing it. So if a process has 1000 pages all to itself, and 1000 shared with one other process, its PSS will be 1500. Linux perf perf record -e \u4e8b\u4ef6/probe options -a trace all cpu -g capture call graphs Counting Events: perf stat: -d Detailed CPU counter statistics -p specified PID -a CPU counter statistics for the entire system Tcmalloc perf yum install pprof graphviz heapprofiler 1 2 export HEAPPROFILE = /var/log/envoy/envoy.prof pprof --base = /var/log/envoy/envoy.prof.0001.heap --svg /home/admin/alimesh/bin/envoy /var/log/envoy/envoy.prof.0008.heap cpuprofiler Link \u7406\u89e3 %IOWAIT (%WIO)","title":"\u6027\u80fd\u4f18\u5316\u57fa\u7840"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/linux/perf/#_1","text":"","title":"\u6027\u80fd\u4f18\u5316\u57fa\u7840"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/linux/perf/#_2","text":"pidstat \u8fdb\u7a0b\u7ea7\u522b\u7684\u6027\u80fd\u5206\u6790 -u CPU\u4f7f\u7528\u7387\u5206\u6790 %guest \u82b1\u8d39\u5728\u8fd0\u884c\u865a\u62df\u673a\u7684cpu \u767e\u5206\u6bd4 %wait \u82b1\u8d39\u5728\u7b49\u5f85CPU\u53bb\u8fd0\u884c\u7684CPU\u767e\u5206\u6bd4\uff0c\u8fd9\u4e2a\u503c\u8d8a\u9ad8\u8bf4\u660eCPU\u4e0d\u8db3\u6bd4\u8f83\u4e25\u91cd stress-ng --cpu 10 --timeout 600 \u901a\u8fc7stress-ng\u6a21\u62df\u8d85\u8fc7CPU\u6838\u5fc3\u6570\u7684\u8fdb\u7a0b\u8fd0\u884c\u65f6\u5c31\u4f1a\u51fa\u73b0%wait\u503c\u5f88\u9ad8\u7684\u573a\u666f -d IO\u5206\u6790 kB_rd/s \u6bcf\u79d2\u78c1\u76d8\u8bfb\u53d6\u7684kb\u6570\uff0c\u6ce8\u610f\u8fd9\u91cc\u662f\u8bfb\u6b21\u76d8\uff0c\u5e76\u4e0d\u662f\u8bfb\u7f13\u5b58 kB_wr/s \u6bcf\u79d2\u78c1\u76d8\u5199\u5165\u7684kb\u6570 kB_ccwr/s \u6bcf\u79d2\u56e0\u4e3atruncate\u5bfc\u81f4page cache dirty\u88ab\u64a4\u9500\u7684kb\u6570 iodelay \u7b49\u5f85 \u540c\u6b65io\u5b8c\u6210 \u548c\u56e0\u4e3a swap in\u800c\u5bfc\u81f4\u7684block IO\u5b8c\u6210 \u6240\u9700\u8981\u7b49\u5f85\u7684\u65f6\u949f\u5468\u671f -w \u4e0a\u4e0b\u6587\u5207\u6362\u5206\u6790 cswch/s \u4e3b\u52a8\u8ba9\u51faCPU\u5bfc\u81f4\u7684\u4e0a\u4e0b\u6587\u5207\u6362(\u6bd4\u5982\u7b49\u5f85IO) nvcswch/s \u88ab\u52a8\u8ba9\u51faCPU\u5bfc\u81f4\u7684\u4e0a\u4e0b\u6587\u5207\u6362(\u6bd4\u5982\u65f6\u95f4\u7247\u7528\u5b8c) Tips IO\u5bc6\u96c6\u578b\u7684\u8fdb\u7a0b\uff0ccswch/s\u7684\u503c\u4f1a\u66f4\u9ad8\u4e00\u4e9b \u9ed8\u8ba4pidstat\u663e\u793a\u7684\u6570\u8fdb\u7a0b\u7ea7\u522b\u7684\u7ebf\u7a0b\u5207\u6362\u6b21\u6570\uff0c\u4f46\u662f\u4e0a\u4e0b\u6587\u5207\u6362\u5176\u5b9e\u662f\u7ebf\u7a0b\u7ea7\u522b\u7684\uff0c\u6240\u4ee5\u9ed8\u8ba4\u53ea\u4f1a\u663e\u793a\u4e3b\u7ebf\u7a0b\u7684\u4e0a\u4e0b\u6587\u5207\u6362\u6b21\u6570\uff0c\u9700\u8981\u52a0\u4e0a-t\u663e\u793a\u6240\u6709\u7ebf\u7a0b\u7684\u5207\u6362\u6b21\u6570 \u4e0a\u4e0b\u6587\u5207\u6362\u6b21\u6570\u589e\u591a\u4f1a\u5bfc\u81f4\u4e2d\u65ad\u6b21\u6570\u4e5f\u589e\u591a\uff0c\u4e2d\u65ad\u6709\u5f88\u591a\u79cd\uff0c\u5176\u4e2d\u4e00\u79cd\u53eb\u505aRES(\u91cd\u8c03\u5ea6\u4e2d\u65ad\uff0c\u901a\u8fc7/proc/interrupts\u67e5\u770b)\u4e2d\u65ad\uff0c\u8ba9\u7a7a\u95f2\u7684CPU\u6765\u8c03\u5ea6\u4efb\u52a1\u3002 mpstat \u7cfb\u7edf\u7ea7\u522b\u7684CPU\u5206\u6790\uff0c\u5206\u6790\u591a\u6838CPU\u7684\u6574\u4f53\u60c5\u51b5\uff0c\u4ee5\u53ca\u5404\u4e2aCPU\u7684\u4f7f\u7528\u7387\u3001iowait\u7b49 1 mpstat -P ALL interval dstat top \u57fa\u4e8eproc\u6587\u4ef6\u5feb\u7167\u5b9e\u73b0\uff0c\u5bf9\u4e8e\u751f\u547d\u5468\u671f\u6bd4\u8f83\u77ed\u7684\u8fdb\u7a0b\u5c31\u65e0\u80fd\u4e3a\u529b\u4e86 \u6309\u4e0bM\u5207\u6362\u5230\u5185\u5b58\u6392\u5e8f \u6309\u4e0bP\u5207\u6362\u5230CPU\u4f7f\u7528\u7387\u6392\u5e8f 1 2 3 4 5 6 7 8 9 10 11 As a default, percentages for these individual categories are displayed. Where two labels are shown below, those for more recent kernel versions are shown first. us, user : time running un-niced user processes sy, system : time running kernel processes ni, nice : time running niced user processes id, idle : time spent in the kernel idle handler wa, IO-wait : time waiting for I/O completion hi : time spent servicing hardware interrupts si : time spent servicing software interrupts st : time stolen from this vm by the hypervisor iostat \u67e5\u770b\u78c1\u76d8\u7684\u8bfb\u3001\u5199\u901f\u5ea6\u3001\u4ee5\u53cacpu\u7684iowait\u3001\u4f7f\u7528\u7387\u7b49 vmstat \u5206\u6790\u7cfb\u7edf\u7ea7\u522b\u7684\u4e0a\u4e0b\u6587\u5207\u6362\u3001\u8fdb\u7a0b\u961f\u5217\u5927\u5c0f\u3001\u4e2d\u65ad\u6570\u7b49 top\u3001pidstat\u3001ps\u7b49\u67e5\u770bCPU\u4f7f\u7528\u7387\u7684\u65f6\u5019\uff0c\u4f1a\u5b58\u5728\u4e0d\u4e00\u81f4\u7684\u95ee\u9898\uff0c\u672c\u8d28\u4e0a\u662f\u56e0\u4e3a\uff0c\u8fd9\u4e9b\u5de5\u5177\u8ba1\u7b97CPU\u4f7f\u7528\u7387\u7684\u65f6\u5019\u7528\u7684\u90fd\u662f\u5e73\u5747CPU\u4f7f\u7528\u7387 \u4e5f\u5c31\u662f\u8ba1\u7b97\u4e00\u6bb5\u65f6\u95f4\u5185\u7684\u5e73\u5747CPU\u4f7f\u7528\u7387\uff0ctop\u9ed8\u8ba4\u662f3\u79d2\u8ba1\u7b97\u4e00\u6b21\u3002\u800cps\u770b\u7684\u662f\u6574\u4e2a\u8fdb\u7a0b\u7684\u751f\u547d\u5468\u671f\u3002 sar -r \u663e\u793a\u5185\u5b58\u4f7f\u7528\u60c5\u51b5 -S \u663e\u793aSwap\u7684\u4f7f\u7528\u60c5\u51b5 iowait \u8868\u793a\u5728\u4e00\u4e2a\u91c7\u6837\u5468\u671f\u5185\u6709\u767e\u5206\u4e4b\u51e0\u7684\u65f6\u95f4\u5c5e\u4e8e\u4ee5\u4e0b\u60c5\u51b5\uff1aCPU\u7a7a\u95f2\u3001\u5e76\u4e14\u6709\u4ecd\u672a\u5b8c\u6210\u7684I/O\u8bf7\u6c42\u3002iowait\u9ad8\u5e76\u4e0d\u4ee3\u8868I/O\u6709\u74f6\u9888 \u56e0\u4e3aiowait\u7684\u503c\u53d6\u51b3\u4e8eCPU\u7a7a\u95f2\u72b6\u6001\u4e0b\u7684\u672a\u5b8c\u6210I/O\u8bf7\u6c42\uff0c\u610f\u601d\u5c31\u662fI/O\u672a\u5b8c\u6210\u4e0d\u662f\u56e0\u4e3a\u6ca1\u6709CPU\u5bfc\u81f4\u7684\uff0c\u800c\u662f\u5728\u7b49\u5f85IO\u3002\u6240\u4ee5\u8fd9\u4e2a\u503c\u4f1a\u53d7\u5230CPU\u662f\u5426 \u7a7a\u95f2\u7684\u5f71\u54cd\uff0c\u5982\u679cCPU\u5f88\u7e41\u5fd9\uff0c\u90a3\u4e48\u8fd9\u4e2a\u503c\u4e0d\u53d7\u5f71\u54cd\u3002\u4e00\u65e6CPU\u7a7a\u95f2\u4e86\uff0c\u8fd9\u4e2a\u503c\u5c31\u5347\u9ad8\u4e86\uff0c\u4f46\u662f\u524d\u540e\u7684IO\u6ca1\u6709\u53d8\u5316\u3002 echo 3 > /proc/sys/vm/drop_caches pcstat \u53ef\u4ee5\u7528\u6765\u67e5\u8be2\u4e00\u4e2a\u6587\u4ef6\u662f\u5426\u88ab\u7f13\u5b58\u4e86\uff0c\u6838\u5fc3\u662f\u4f7f\u7528\u4e86mincore\u7cfb\u7edf\u8c03\u7528 bcc\u7684cachestat.py\u3001cachetop.py\u3001memleak.py\u3001 strace -p xxx -c \u7edf\u8ba1\u7cfb\u7edf\u8c03\u7528\u7684\u6b21\u6570\u548c\u8017\u65f6","title":"\u5de5\u5177\u7bc7"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/linux/perf/#case","text":"\u5927\u91cf\u8fdb\u7a0b\u9891\u7e41\u521b\u5efa\u548c\u9000\u51fa\u5bfc\u81f4\u7684CPU\u4f7f\u7528\u7387\u4e0a\u5347\uff0c\u4f46\u662fps\u3001top\u3001pidstat\u65e0\u6cd5\u67e5\u770b\u5230\u8fd9\u4e00\u73b0\u8c61 top\u3001ps\u3001pidstat\u8fd9\u4e9b\u90fd\u662f\u57fa\u4e8e\u4e00\u6bb5\u95f4\u9694\u6765\u7edf\u8ba1\u548c\u8ba1\u7b97\uff0c\u6ca1\u529e\u6cd5\u5bf9\u4e8e\u90a3\u4e9b\u751f\u547d\u5468\u671f\u975e\u5e38\u77ed\u7684\u5927\u91cf\u8fdb\u7a0b\u5bfc\u81f4\u7684CPU\u4f7f\u7528\u7387\u53d8\u9ad8\u7684\u5206\u6790\uff0c\u9700\u8981\u7ed3\u5408perf record\u6765\u5206\u6790\u3002 \u76f4\u63a5IO\u8bfb\u78c1\u76d8\uff0c\u5bfc\u81f4iowait\u5347\u9ad8\uff0c\u4f46\u662fCPU\u4f7f\u7528\u7387\u4e0d\u9ad8\uff0cload\u4e5f\u5347\u9ad8\u4e86\u3002","title":"\u573a\u666fcase"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/linux/perf/#_3","text":"Linux\u8c03\u5ea6\u5668\u539f\u7406\u548c\u4f18\u5148\u7ea7 \u8c03\u5ea6\u7b56\u7565\u6709SCHED_FIFO\u3001SCHED_RR\u3001SCHED_BATCH\u3001SCHED_IDLE\u3001SCHED_NORMAL\uff0c\u524d\u4e24\u4e2a\u662f\u5b9e\u65f6\u8fdb\u7a0b\u7684\u8c03\u5ea6\u7b56\u7565\uff0c\u9ed8\u8ba4\u662fSCHED_NORMAL\uff0c\u53ef\u4ee5\u901a\u8fc7sched_setscheduler\u6765\u8c03\u6574\u8c03\u5ea6\u7b56\u7565\u548c\u4f18\u5148\u7ea7\u3002 \u975e\u5b9e\u65f6\u8fdb\u7a0b\uff0c\u901a\u8fc7nice(\u8fdb\u7a0b\u4f18\u5148\u7ea7\uff0c\u8303\u56f4-20~19)\u6765\u8c03\u6574\uff0c\u5728\u8fdb\u7a0b\u5185\u90e8\u53ef\u4ee5\u8c03\u7528getpriority/setpriority\u6765\u8bbe\u7f6e\uff0c\u8fd9\u4e2anice\u53ea\u662f\u6743\u91cd\uff0c\u5e76\u4e0d\u662f\u7edd\u5bf9\u7684\u3002 \u5b9e\u65f6\u8fdb\u7a0b\u5176\u4f18\u5148\u7ea7\u8303\u56f4\u4e3a1~99 \u5b9e\u65f6\u8fdb\u7a0b\u4e00\u65e6\u8fd0\u884c\u4f1a\u4e00\u76f4\u8fd0\u884c\uff0c\u9664\u975e\u88ab\u9ad8\u4f18\u5148\u7ea7\u7684\u8fdb\u7a0b\u62a2\u5360\u3001\u8fdb\u7a0b\u7ec8\u6b62\u3001\u963b\u585e(\u7b49\u5f85IO)\u3001\u81ea\u52a8\u8c03\u7528sched_yield\u653e\u5f03CPU\u3002 \u8fdb\u7a0b\u4e0a\u4e0b\u6587\u5207\u6362\u7684\u573a\u666f \u65f6\u95f4\u7247\u7528\u5b8c\u4e86 \u8fdb\u7a0b\u8d44\u6e90\u4e0d\u8db3\uff0c\u7b49\u5f85IO\u6216\u8005\u7b49\u5f85\u5185\u5b58\u8d44\u6e90 \u8fdb\u7a0b\u4e3b\u52a8sleep \u8fdb\u7a0b\u4e3b\u52a8\u8ba9\u51facpu(\u5b9e\u65f6\u8fdb\u7a0b\u624d\u80fd\u8fd9\u4e48\u505a) \u4f18\u5148\u7ea7\u62a2\u5360 \u786c\u4ef6\u4e2d\u65ad \u5185\u5b58\u4e0d\u8db3\u65f6\u5982\u4f55\u5904\u7406 OOM\u6765\u6740\u6b7b\u8fdb\u7a0b (oom_score\u6765\u786e\u5b9a\u54ea\u4e2a\u8fdb\u7a0b\u88ab\u6740\u6b7b\uff0c\u6d88\u8017\u7684\u5185\u5b58\u8d8a\u5927oom_score\u8d8a\u5927\uff0c\u8d8a\u5927\u8d8a\u5bb9\u6613\u6740\u6b7b\uff0c[-17, 15]\uff0c\u53ef\u4ee5/proc/$PID/oom_adj \u6765\u6311\u6218\u8fd9\u4e2a\u503c) swap\u5904\u7406\uff0c\u5c06\u4e0d\u5e38\u4f7f\u7528\u7684\u533f\u540d\u9875\u6362\u51fa \u628a\u6700\u8fd1\u4f7f\u7528\u8f83\u5c11\u7684\u7f13\u5b58\u9875\u56de\u6536 Buffer\u548cCache Buffer\u662f\u5bf9\u78c1\u76d8\u6570\u636e\u7684\u7f13\u5b58\uff0c\u800cCache\u662f\u6587\u4ef6\u6570\u636e\u7684\u7f13\u5b58\uff0c\u5b83\u4eec\u65e2\u4f1a\u7528\u5728\u8bfb\u8bf7\u6c42\u4e2d\uff0c\u4e5f\u4f1a \u7528\u5728\u5199\u8bf7\u6c42\u4e2d\u3002 \u7406\u8bba\u4e0a\uff0c\u4e00\u4e2a\u6587\u4ef6\u8bfb\u9996\u5148\u5230Block Buffer, \u7136\u540e\u5230Page Cache\u3002\u6709\u4e86\u6587\u4ef6\u7cfb\u7edf\u624d\u6709\u4e86Page Cache. \u5728\u8001\u7684Linux\u4e0a\u8fd9\u4e24\u4e2aCache\u662f\u5206\u5f00\u7684\u3002\u90a3\u8fd9\u6837\u5bf9\u4e8e\u6587\u4ef6\u6570\u636e\uff0c\u4f1a\u88abCache\u4e24\u6b21\u3002\u8fd9\u79cd\u65b9\u6848\u867d\u7136\u7b80\u5355\uff0c \u4f46\u4f4e\u6548\u3002 \u540e\u671fLinux\u628a\u8fd9\u4e24\u4e2aCache\u7edf\u4e00\u4e86\u3002\u5bf9\u4e8e\u6587\u4ef6\uff0cPage Cache\u6307\u5411Block Buffer\uff0c\u5bf9\u4e8e\u975e\u6587\u4ef6 \u5219\u662fBlock Buffer\u3002 \u8fd9\u6837\u5c31\u5982\u6587\u4ef6\u5b9e\u9a8c\u7684\u7ed3\u679c\uff0c\u6587\u4ef6\u64cd\u4f5c\uff0c\u53ea\u5f71\u54cdPage Cache\uff0cRaw\u64cd\u4f5c\uff0c\u5219\u53ea\u5f71\u54cdBuffer. \u5185\u5b58\u5206\u7c7b \u4ece\u51e0\u4e2a\u7eac\u5ea6\u5206\u4e3a\u4e0b\u9762\u56db\u4e2a\u8c61\u9650\u3002 1 2 3 4 5 6 7 8 9 10 Private | Shared 1 | 2 Anonymous . stack | . malloc() | . brk()/sbrk() | . POSIX shm* . mmap(PRIVATE, ANON) | . mmap(SHARED, ANON) -----------------------+---------------------- . mmap(PRIVATE, fd) | . mmap(SHARED, fd) File-backed . pgms/shared libs | 3 | 4 \u533f\u540d\u9875\u3001\u57fa\u4e8e\u6587\u4ef6\u6620\u5c04\u3001privated\u3001shared\u7684\uff0c\u5185\u6838\u5728","title":"\u57fa\u672c\u539f\u7406"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/linux/perf/#_4","text":"CPU CPI/IPC \u6bcf\u6307\u4ee4\u5468\u671f\u6570/\u6bcf\u5468\u671f\u6307\u4ee4\u6570\uff0c\u8fd9\u4e2a\u6570\u503c\u8d8a\u9ad8\uff0c\u8868\u660eCPU\u7ecf\u5e38\u9677\u5165\u505c\u6ede\uff0c\u901a\u5e38\u662f\u5728\u8bbf\u95ee\u5185\u5b58\u3002(perf stat) \u4f7f\u7528\u7387 (mpstat\u3001top) \u7528\u6237\u65f6\u95f4/\u5185\u6838\u65f6\u95f4 \u8ba1\u7b97\u5bc6\u96c6\u578b\u7528\u6237\u65f6\u95f4\u591a\uff0cIO\u5bc6\u96c6\u578b\u5219\u5185\u6838\u65f6\u95f4\u591a\u3002(mpstat\u3001top) \u7f13\u5b58\u4eb2\u548c\u6027 \u8fdb\u7a0bCPU\u7ed1\u5b9a\u3001cpuset\u72ec\u5360CPU\u7ec4\u7b49\u65b9\u5f0f\uff0c\u907f\u514d\u8fdb\u7a0b\u8de8CPU\u5207\u6362\u5bfc\u81f4\u7f13\u5b58\u5931\u6548\u3002(perf stat) \u8c03\u5ea6\u7b56\u7565 \u4e0a\u4e0b\u6587\u5207\u6362\u5f00\u9500 (vmstat\u3001pidstat -w) \u901a\u8fc7cpuset\u5b9e\u73b0\u72ec\u5360CPU\u7ec4 1 2 3 4 5 6 cd /sys/fs/cgroup/cpuset mkdir prodset cd prodset echo 7 -10 > cpus echo 1 > cpu_exclusive echo PID > tasks \u901a\u8fc7taskset\u8fdb\u884c\u8fdb\u7a0b\u7ed1\u5b9a 1 taskset -pc 7 -10 PID Memory TLB\u7f13\u5b58\u547d\u4e2d\u7387 HugePage\u6765\u63d0\u9ad8TLB\u7f13\u5b58\u547d\u4e2d\u7387\uff0c\u8fd8\u6709THP(\u900f\u660e\u5de8\u9875\u9762) swappiness swap\u4ea4\u6362\u7684\u503e\u5411\u6027 oom /proc/PID/oom_adj [-17, 15]\u6570\u503c\u8d8a\u5927\uff0c\u8d8a\u5bb9\u6613\u88abOOM\u6740\u6b7b\uff0ccgroup\u4e2d\u901a\u8fc7memory.oom \u6765\u5f00\u542f\u6216\u8005\u7981\u7528oom \u810f\u9875\u56de\u6536\u7b56\u7565 \u9875\u7f13\u5b58\u548cBuffer \u7f3a\u9875\u5f02\u5e38 slab\u7f13\u5b58 (slabtop) /proc/sys/vm/min_free_kbytes \u5b9a\u671f\u56de\u6536\u5185\u5b58\u7684\u9600\u503c /proc/sys/vm/swappiness \u6587\u4ef6\u9875\u548c\u533f\u540d\u9875\u7684\u56de\u6536\u503e\u5411","title":"\u6027\u80fd\u5206\u6790"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/linux/perf/#linux-proc","text":"/proc/PID/smaps PSS \u628a\u5171\u4eab\u5185\u5b58\u5e73\u5206\u5230\u5404\u4e2a\u8fdb\u7a0b\u540e\uff0c\u518d\u52a0\u4e0a\u8fdb\u7a0b\u672c\u8eab\u975e\u5171\u4eab\u5185\u5b58\u7684\u5927\u5c0f The \"proportional set size\" (PSS) of a process is the count of pages it has in memory, where each page is divided by the number of processes sharing it. So if a process has 1000 pages all to itself, and 1000 shared with one other process, its PSS will be 1500.","title":"Linux proc"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/linux/perf/#linux-perf","text":"perf record -e \u4e8b\u4ef6/probe options -a trace all cpu -g capture call graphs Counting Events: perf stat: -d Detailed CPU counter statistics -p specified PID -a CPU counter statistics for the entire system","title":"Linux perf"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/linux/perf/#tcmalloc-perf","text":"yum install pprof graphviz heapprofiler 1 2 export HEAPPROFILE = /var/log/envoy/envoy.prof pprof --base = /var/log/envoy/envoy.prof.0001.heap --svg /home/admin/alimesh/bin/envoy /var/log/envoy/envoy.prof.0008.heap cpuprofiler","title":"Tcmalloc perf"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/linux/perf/#link","text":"\u7406\u89e3 %IOWAIT (%WIO)","title":"Link"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/linux/synchronization/","text":"Linux lock types Blocking: mutex, semaphore Non-blocking: spinlocks, seqlocks, completions sync lock\u57fa\u7840 hardware\u6709\u90a3\u4e9bintrinsic\u53ef\u4ee5\u5e2e\u52a9\u5b9e\u73b0lock \u5176\u4e2d\u5404\u81ea\u7684\u7279\u70b9\uff08\u5728\u4e0d\u540c\u573a\u666f\u4f18\u70b9\uff0c\u7f3a\u70b9\uff09\u662f\u4ec0\u4e48\uff0c\u8bf7\u505a\u6027\u80fd\u5206\u6790\u9884\u6d4b \u53ef\u4ee5\u5bf9lock\u505a\u51fa\u54ea\u4e9b\u4f18\u5316\uff0c\u4ee5\u53ca\u4e3a\u4ec0\u4e48\u505a\u8fd9\u4e9b\u4f18\u5316 60\u5e74\u4ee3\u7684\u65f6\u5019\uff0cDijkstra\u548cKnuth\u90fd\u8bc1\u660e\u4e86\uff0c\u5728\u7b26\u5408sequential consistency\u7684memory system\u91cc\uff0c\u53ea\u9700atomic read\u548cwrite\u5c31\u53ef\u4ee5\u5b9e\u73b0mutual exclusion \u5e38\u89c1\u7684intrinsic\u6709: IBM\uff1acompare&swap\u3002Intel\u63a8\u51fa\u7684\u662fLOCK prefix\u3002MIPS\u7684\u66f4\u7075\u6d3b\u4e00\u4e9b\uff1aLL/SC \u4e00\u4e2async\u64cd\u4f5c\uff0c\u5206\u4e3a\u4e09\u4e2a\u90e8\u5206: 1. Accquire\u30012. Waiting\u30013. Release 1 2 3 lock // Acquire and Waiting critical_section ; unlock // Release \u5728Acquire\u90e8\u5206\uff0c\u6240\u6709thread\u5fc5\u987b\u7ade\u4e89\uff0c\u9009\u51fa\u4e00\u4e2a\u83b7\u80dc\u8005\uff0closers\u5219\u8fdb\u5165waiting(spin lock\u662fbusy waitting\u3001mutex\u5219\u662fsleep)\u3002 Winner\u5b8c\u6210critical_section\u540e\uff0cWinner\u91ca\u653elock\uff0c\u800c\u90a3\u4e9b\u6b63\u5728busy waiting\u7684losers\u518d\u4e00\u6b21\u7ade\u4e89\uff0c\u9009\u51fa\u4e0b\u4e00\u4e2aWinner\u3002 Acquire\u9700\u8981\u4f7f\u7528\u539f\u5b50\u7684 read-modify-write \u64cd\u4f5c\uff0c\u5178\u578b\u7684\u5b9e\u73b0\u65b9\u5f0f\u4e3aTest And Set\u3002 1 2 3 4 5 6 7 8 9 Test_And_Set ( int * p ) { old = * p ; * p = 1 ; // \u5047\u8bbep\u7684\u521d\u59cb\u503c\u4e3a0\uff0c\u6bcf\u6b21\u6211\u4eec\u90fd\u8bd5\u56fe\u5199\u51651 return old } lock ( int * p ) { while ( Test_And_Set ( p ) == 1 ); // \u76f4\u5230\u8fd4\u56de0\u4e3a\u6b62 } \u8fd9\u79cd Test And Set \u7684\u65b9\u5f0f\u5b58\u5728\u4e00\u4e2a\u95ee\u9898\u5c31\u662f\u6bcf\u6b21\u65e0\u8bba\u662f\u5426Accquire\u90fd\u9700\u8981\u8fdb\u884c\u4e00\u6b21\u5199\u64cd\u4f5c\uff0c\u8fd9\u4f1a\u5e26\u6765\u4e00\u4e2a\u95ee\u9898\u5c31\u662f\uff0c\u4e00\u4e2awinner\u5728\u5199\u5165\u4e4b\u540e\uff0c\u6210\u4e3ap\u6240\u5728cache line\u7684owner\uff1b \u4f46\u7acb\u523b\u5c31\u6709\u4e00\u4e2aloser issue\u4e86\u4e00\u4e2awrite\uff0c\u903cwinner\u653e\u5f03\u4e86owner\u7684\u6743\u5229\uff1b\u7acb\u523b\u53c8\u6709\u4e00\u4e2aloser\u5e72\u4e86\u540c\u6837\u7684\u4e8b\u3002\u6240\u6709\u7684\u7ade\u4e89\u8005\u90fd\u5728\u4e0d\u505c\u7684\u5236\u9020\u5927\u91cf\u7684bus transaction\uff0c \u800cp\u6240\u5728\u7684cache line\u53cd\u590d\u7684\u88ab\u5207\u6362owner\u3002 Test_And_Set\u672c\u8eab\u662f\u6709\u6539\u8fdb\u7a7a\u95f4\u7684\u3002\u56e0\u4e3a\u6211\u4eec\u77e5\u9053\u4e86bus transaction\u4ee5\u53cacacheline owner flip\u7684\u95ee\u9898\u4e4b\u540e\uff0c\u76f8\u5e94\u7684\u89e3\u51b3\u529e\u6cd5\u5c31\u662f\u51cf\u5c11bus transaction\u3002 backoff \u5f53loser\u53d1\u73b0\u81ea\u5df1\u5931\u8d25\u540e\uff0c\u7a0d\u5fae\u7b49\u4e00\u4e0b\u518d\u63a5\u7740\u7ade\u4e89\uff0c\u4f46\u662f\u5230\u5e95\u7b49\u5f85\u591a\u957f\u65f6\u95f4\u662f\u4e00\u4e2a\u95ee\u9898\u3002 Test And Test and Set \u5728\u8fdb\u5165Test And Set\u4e4b\u524d\u5148\u5224\u65ad\u4e0block\u662f\u5426\u662f0\uff0c\u53ea\u6709\u4e0d\u4e3a0\u7684\u65f6\u5019\u624d\u8fdb\u5165Test_And_Set\u3002\u8fd9\u6837\u53ef\u4ee5\u663e\u8457\u51cf\u5c11writer\u7684\u6b21\u6570\uff0c\u5e76\u4e14\u6709\u76f8\u5f53\u6570\u91cf\u7684reader\u53ef\u4ee5\u547d\u4e2d local cache(\u8bfblock)\u3002 1 2 3 4 5 6 7 while ( 0 != atomic_dec ( & lock -> counter )) { do { // Pause the CPU until some coherence // traffic(a prerequisite for the counter changing) // saving power } while ( lock -> counter <= 0 ); } Test And Test and Set \u7684\u8fd9\u79cd\u65b9\u5f0f\u4ecd\u7136\u5b58\u5728\u95ee\u9898\uff0c\u5c31\u662f\u5f53winner release lock\u7684\u65f6\u5019\u6240\u6709\u7684loser\u90fd\u4f1a\u88ab\u540c\u65f6\u5524\u9192\uff0c\u4e8e\u662f\u4ed6\u4eec\u4f1a\u53d1\u8d77\u7ade\u4e89\uff0c\u9020\u6210burst traffic\u3002 \u53e6\u5916\u4e00\u4e2a\u95ee\u9898\u5219\u662f\u516c\u5e73\u6027\u7684\u95ee\u9898\uff0c\u6240\u6709\u7684\u7ebf\u7a0b\u5728\u7b2c\u4e00\u6b21\u7ade\u4e89\u90fd\u662f\u516c\u5e73\u7684\uff0c\u4f46\u662f\u4e00\u65e6\u6709winner\u4e4b\u540e\uff0cwinner\u5c31\u4f1a\u4e00\u76f4\u5360\u636e\u4f18\u5148\u6743\uff0c\u8fd9\u662f\u56e0\u4e3awinner\u80fd\u6bd4\u5176\u5b83\u7684\u7ebf\u7a0b\u66f4\u65e9\u770b\u5230P\u7684\u503c\uff0cwinner \u5728Release\u7684\u65f6\u5019\u4f1a\u8fdb\u884c\u5199\u5165\u64cd\u4f5c\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u4f1a\u5148\u8fdb\u5165store buffer\uff0c\u7136\u540e\u518d\u8fdb\u5165ram\uff0c\u800c\u4ece\u5176\u5b83loser\u89d2\u5ea6\u6765\u770b\uff0c\u4ed6\u4eec\u4f1a\u5148\u4f53\u9a8c\u4e00\u6b21read miss\uff0c\u7136\u540e\u518d\u4eceram\u91cc\u8bfb\u5230p\u7684\u503c\u3002\u8fd9\u4e2a\u65f6\u95f4\u5dee \u5bfc\u81f4\u4e86winner\u80fd\u66f4\u65e9\u8bfb\u5230p\u7684\u503c\u3002 Linux kernel TicketLock \u5176\u57fa\u672c\u6982\u5ff5\u5c31\u662f\u5927\u5bb6\u53bb\u94f6\u884c\u6392\u961f\u7684\u65f6\u5019\uff0c\u53bb\u53d6\u7968\u673a\u62ff\u4e00\u5f20\u7968\uff0c\u4e0a\u9762\u5199\u7740\u4e00\u4e2a\u53f7\u3002\u7136\u540e\u5927\u5bb6\u4e0d\u505c\u7684\u770b\u5f53\u524d\u670d\u52a1\u7684\u53f7\u662f\u51e0\u3002 \u5982\u679c\u8ddf\u81ea\u5df1\u7684\u624b\u4e2d\u7684\u7968\u53f7\u4e00\u6837\uff0c\u90a3\u4e48\u8fdb\u53bb\u63a5\u53d7\u670d\u52a1\u3002\u7b49\u81ea\u5df1\u51fa\u6765\u7684\u65f6\u5019\uff0c\u522b\u5fd8\u4e86\u628a\u5f53\u524d\u670d\u52a1\u53f7+1\uff0c\u8ba9\u4e0b\u4e00\u4f4d\u987e\u5ba2\u6709\u673a\u4f1a\u8fdb\u6765\u3002 \u8fd9\u4e2a\u7b97\u6cd5\u89e3\u51b3\u4e86\u516c\u5e73\u6027\u7684\u95ee\u9898\uff0cwinner\u5931\u53bb\u4e86\u4f18\u5148\u6743\uff0c\u800c\u4e14\u53ea\u6709\u518dwinner Release\u7684\u65f6\u5019\u624d\u4f1a\u4ea7\u751f\u4e00\u4e2awrite/invalidate\u3002\u4f46\u662f\u8fd9\u4e2a\u7b97\u6cd5\u8fd8\u662f\u6709\u95ee\u9898\uff0c\u5f53winner\u6539\u53d8\u670d\u52a1\u53f7\u7684\u65f6\u5019\uff0c\u6240\u6709\u7684 loser\u90fd\u4f1a\u88abinvalidate\u3002\u6709\u6ca1\u6709\u53ef\u80fd\u518dunlock\u7684\u65f6\u5019\u53ea\u5524\u9192\u4e00\u4f4dloser\u5462? \u4e5f\u5c31\u662f\u53ea\u8ba9\u4e00\u4e2aloser\u4ea7\u751fread miss\uff0c\u800c\u5176\u4ed6\u7684loser\u5b8c\u5168\u5bdf\u89c9\u4e0d\u5230cacheline\u7684\u6539\u53d8\u5462? Array-based lock \u6574\u4e2a\u7cfb\u7edf\u91cc\u6709\u4e00\u4e2aarray\uff0c\u5176slot\u7684\u6570\u91cf\u7b49\u4e8ethread\u7684\u6570\u91cf\uff0c\u6709\u4e00\u4e2a\u5168\u5c40\u7684index\uff0c\u521d\u59cb\u5316\u4e3a0\uff0c\u5f53\u5f00\u59cb\u7ade\u4e89\u7684\u65f6\u5019\uff0c\u6bcf\u4e2athread\u8bd5\u56fe\u589e\u52a0index\uff0c\u62a2\u5230\u4e00\u4e2aindex\u540e\u5c31\u5f00\u59cbspin\u3002 1 2 3 4 5 6 lock : int my_index = fetch_n_add ( index ); while ( array [ my_index ] == 0 ); unlock : array [ my_index + 1 ] == 1 ; \u8fd9\u4e2a\u7b97\u6cd5\u7684\u4f18\u70b9\u5c31\u662f\uff0c\u6bcf\u4e00\u4e2aloser\u53ea\u5173\u5fc3\u81ea\u5df1\u6240\u5728\u7684slot\uff0c\u800c\u4e0d\u662f\u5168\u90fd\u5173\u5fc3\u4e00\u4e2a\u5168\u5c40\u5730\u5740\u7684\u503c\u3002\uff0c\u800cwinner\u4e5f\u53ea\u89e3\u9501\u6392\u5728\u81ea\u5df1\u540e\u9762\u7684loser\u3002\u8fd9\u6837\u7684\u8bdd\uff0c\u5f53winner unlock\u7684\u65f6\u5019\uff0c\u53ea\u6709 \u4e00\u4e2aloserhi\u53d1\u73b0\u81ea\u5df1\u7684cache line\u88abinvalidate\u3002\u8fd9\u4e2a\u7b97\u6cd5\u7684\u7f3a\u70b9\u5c31\u662f\u7a7a\u95f4\u590d\u6742\u5ea6\u7531O(1)\u53d8\u6210\u4e86O(n)\u3002 \u8fd9\u4e2a\u7b97\u6cd5\u8fd8\u5b58\u5728\u53e6\u5916\u4e00\u4e2a\u95ee\u9898\u5c31\u662f\u8de8numa\u8282\u70b9\u8bbf\u95ee\u5185\u5b58\u7684\u95ee\u9898\uff0c\u5982\u679cthread\u5206\u5e03\u5728\u4e0d\u540csocket\u4e0a\uff0c\u90a3\u4e48\u56e0\u4e3a\u4ed6\u4eec\u5e76\u4e0d\u77e5\u9053\u81ea\u5df1\u4f1a\u5f97\u5230array\u4e2d\u54ea\u4e2aindex\uff0c\u6240\u4ee5\u5fc5\u7136 \u4f1a\u6709\u4e00\u90e8\u5206thread\u5f97spin\u5728\u8fdc\u7a0b\u5730\u5740\u4e0a\uff0c\u4e5f\u5c31\u610f\u5473\u7740\u6240\u6709\u7684invalidate/read/write\u90fd\u4e0d\u518d\u5728\u672c\u5730bus\u4e86\u3002\u8fd9\u662f\u4e00\u4e2a\u5f88\u4e25\u91cd\u7684\u95ee\u9898\u3002\u56e0\u4e3aQPI\u7684\u6027\u80fd\u6bd4bus\u8981\u906d\u7684\u591a\u7684\u591a\u3002 \u6240\u4ee5\u6211\u4eec\u5c31\u5f97\u518d\u505a\u6539\u8fdb\uff0c\u8ba9\u6bcf\u4e2athread\u9884\u5148\uff08compile time\uff09\u5c31\u77e5\u9053\u81ea\u5df1\u4f1aspin\u5728\u54ea\u5757\u5730\u5740\u4e0a\uff0c\u4ece\u800c\u4f7f\u5f97\u6bcf\u4e2athread\u90fd\u53easpin\u5728\u672c\u5730\u5185\u5b58\u4e0a\u3002\u8fd9\u4e2a\u7ed3\u679c\u5c31\u662fsoftware queue lock\u3002 Linux RW Spinlocks \u4f4e24\u4f4d\u7528\u4e8e\u8868\u793a\u5f53\u524d\u7684\u6709\u6548\u7684readers \u7b2c25\u4f4d\u7528\u4e8e\u8868\u793awriter \u5f53\u6709\u4e00\u8fde\u4e32\u7684reader\u5728\u8bfb\u6570\u636e\uff0cwriter\u4f1a\u5b58\u5728\u9965\u997f\u95ee\u9898\uff0c\u5e94\u8be5\u8ba9writer\u4f18\u5148\u3002Linux\u4e2d\u7684Seqlocks\u5c31\u662f\u5199\u8005\u4f18\u5148\uff0c\u8bfb\u8005\u53ef\u80fd\u4f1a\u88ab\u997f\u6b7b\u3002 Writer\u4fa7: \u4e00\u4e2a\u663e\u5f0f\u7684write lock\uff0c\u540c\u65f6\u53ea\u5141\u8bb8\u4e00\u4e2awriter \u4e00\u4e2a\u7248\u672c\u53f7\uff0c\u5728\u8fdb\u5165\u4e34\u754c\u533a\u548c\u9000\u51fa\u4e34\u754c\u533a\u7684\u65f6\u5019\u90fd\u4f1a\u5bf9\u8fd9\u4e2a\u7248\u672c\u53f7\u8fdb\u884c\u9012\u589e \u5f88\u663e\u7136\uff0c\u5982\u679c\u4e34\u754c\u533a\u6ca1\u6709\u4efb\u4f55writer\uff0c\u90a3\u4e48version\u4e00\u5b9a\u662f\u5947\u6570\uff0c\u5426\u5219\u4e00\u5b9a\u662f\u5076\u6570 Reader\u4fa7: 1. \u83b7\u53d6version\uff0c\u5982\u679c\u662f\u5076\u6570\u5219\u8fdb\u53bb\u4e34\u754c\u533a\uff0c\u5982\u679c\u662f\u5947\u6570\u5c31\u7b49\u5f85writer \u79bb\u5f00\u4e34\u754c\u533a 2. \u8fdb\u5165\u4e34\u754c\u533a\uff0c\u8bfb\u53d6\u6570\u636e 3. \u83b7\u53d6version\u503c\uff0c\u5982\u679c\u662f\u521d\u59cb\u83b7\u53d6\u7684\u503c\u76f8\u7b49\u5c31OK\uff0c\u5426\u5219\u5c31\u56de\u5230\u7b2c\u4e00\u6b65\u3002 seqlock\u4e00\u822c\u9002\u7528\u4e8e: 1. read\u64cd\u4f5c\u6bd4\u8f83\u9891\u7e41 2. writer\u64cd\u4f5c\u6bd4\u8f83\u5c11\uff0c\u4f46\u662f\u6027\u80fd\u8981\u6c42\u9ad8\uff0c\u4e0d\u5e0c\u671b\u88abreader thread\u963b\u6321","title":"Index"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/linux/synchronization/#linux-lock-types","text":"Blocking: mutex, semaphore Non-blocking: spinlocks, seqlocks, completions","title":"Linux lock types"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/linux/synchronization/#sync-lock","text":"hardware\u6709\u90a3\u4e9bintrinsic\u53ef\u4ee5\u5e2e\u52a9\u5b9e\u73b0lock \u5176\u4e2d\u5404\u81ea\u7684\u7279\u70b9\uff08\u5728\u4e0d\u540c\u573a\u666f\u4f18\u70b9\uff0c\u7f3a\u70b9\uff09\u662f\u4ec0\u4e48\uff0c\u8bf7\u505a\u6027\u80fd\u5206\u6790\u9884\u6d4b \u53ef\u4ee5\u5bf9lock\u505a\u51fa\u54ea\u4e9b\u4f18\u5316\uff0c\u4ee5\u53ca\u4e3a\u4ec0\u4e48\u505a\u8fd9\u4e9b\u4f18\u5316 60\u5e74\u4ee3\u7684\u65f6\u5019\uff0cDijkstra\u548cKnuth\u90fd\u8bc1\u660e\u4e86\uff0c\u5728\u7b26\u5408sequential consistency\u7684memory system\u91cc\uff0c\u53ea\u9700atomic read\u548cwrite\u5c31\u53ef\u4ee5\u5b9e\u73b0mutual exclusion \u5e38\u89c1\u7684intrinsic\u6709: IBM\uff1acompare&swap\u3002Intel\u63a8\u51fa\u7684\u662fLOCK prefix\u3002MIPS\u7684\u66f4\u7075\u6d3b\u4e00\u4e9b\uff1aLL/SC \u4e00\u4e2async\u64cd\u4f5c\uff0c\u5206\u4e3a\u4e09\u4e2a\u90e8\u5206: 1. Accquire\u30012. Waiting\u30013. Release 1 2 3 lock // Acquire and Waiting critical_section ; unlock // Release \u5728Acquire\u90e8\u5206\uff0c\u6240\u6709thread\u5fc5\u987b\u7ade\u4e89\uff0c\u9009\u51fa\u4e00\u4e2a\u83b7\u80dc\u8005\uff0closers\u5219\u8fdb\u5165waiting(spin lock\u662fbusy waitting\u3001mutex\u5219\u662fsleep)\u3002 Winner\u5b8c\u6210critical_section\u540e\uff0cWinner\u91ca\u653elock\uff0c\u800c\u90a3\u4e9b\u6b63\u5728busy waiting\u7684losers\u518d\u4e00\u6b21\u7ade\u4e89\uff0c\u9009\u51fa\u4e0b\u4e00\u4e2aWinner\u3002 Acquire\u9700\u8981\u4f7f\u7528\u539f\u5b50\u7684 read-modify-write \u64cd\u4f5c\uff0c\u5178\u578b\u7684\u5b9e\u73b0\u65b9\u5f0f\u4e3aTest And Set\u3002 1 2 3 4 5 6 7 8 9 Test_And_Set ( int * p ) { old = * p ; * p = 1 ; // \u5047\u8bbep\u7684\u521d\u59cb\u503c\u4e3a0\uff0c\u6bcf\u6b21\u6211\u4eec\u90fd\u8bd5\u56fe\u5199\u51651 return old } lock ( int * p ) { while ( Test_And_Set ( p ) == 1 ); // \u76f4\u5230\u8fd4\u56de0\u4e3a\u6b62 } \u8fd9\u79cd Test And Set \u7684\u65b9\u5f0f\u5b58\u5728\u4e00\u4e2a\u95ee\u9898\u5c31\u662f\u6bcf\u6b21\u65e0\u8bba\u662f\u5426Accquire\u90fd\u9700\u8981\u8fdb\u884c\u4e00\u6b21\u5199\u64cd\u4f5c\uff0c\u8fd9\u4f1a\u5e26\u6765\u4e00\u4e2a\u95ee\u9898\u5c31\u662f\uff0c\u4e00\u4e2awinner\u5728\u5199\u5165\u4e4b\u540e\uff0c\u6210\u4e3ap\u6240\u5728cache line\u7684owner\uff1b \u4f46\u7acb\u523b\u5c31\u6709\u4e00\u4e2aloser issue\u4e86\u4e00\u4e2awrite\uff0c\u903cwinner\u653e\u5f03\u4e86owner\u7684\u6743\u5229\uff1b\u7acb\u523b\u53c8\u6709\u4e00\u4e2aloser\u5e72\u4e86\u540c\u6837\u7684\u4e8b\u3002\u6240\u6709\u7684\u7ade\u4e89\u8005\u90fd\u5728\u4e0d\u505c\u7684\u5236\u9020\u5927\u91cf\u7684bus transaction\uff0c \u800cp\u6240\u5728\u7684cache line\u53cd\u590d\u7684\u88ab\u5207\u6362owner\u3002 Test_And_Set\u672c\u8eab\u662f\u6709\u6539\u8fdb\u7a7a\u95f4\u7684\u3002\u56e0\u4e3a\u6211\u4eec\u77e5\u9053\u4e86bus transaction\u4ee5\u53cacacheline owner flip\u7684\u95ee\u9898\u4e4b\u540e\uff0c\u76f8\u5e94\u7684\u89e3\u51b3\u529e\u6cd5\u5c31\u662f\u51cf\u5c11bus transaction\u3002 backoff \u5f53loser\u53d1\u73b0\u81ea\u5df1\u5931\u8d25\u540e\uff0c\u7a0d\u5fae\u7b49\u4e00\u4e0b\u518d\u63a5\u7740\u7ade\u4e89\uff0c\u4f46\u662f\u5230\u5e95\u7b49\u5f85\u591a\u957f\u65f6\u95f4\u662f\u4e00\u4e2a\u95ee\u9898\u3002 Test And Test and Set \u5728\u8fdb\u5165Test And Set\u4e4b\u524d\u5148\u5224\u65ad\u4e0block\u662f\u5426\u662f0\uff0c\u53ea\u6709\u4e0d\u4e3a0\u7684\u65f6\u5019\u624d\u8fdb\u5165Test_And_Set\u3002\u8fd9\u6837\u53ef\u4ee5\u663e\u8457\u51cf\u5c11writer\u7684\u6b21\u6570\uff0c\u5e76\u4e14\u6709\u76f8\u5f53\u6570\u91cf\u7684reader\u53ef\u4ee5\u547d\u4e2d local cache(\u8bfblock)\u3002 1 2 3 4 5 6 7 while ( 0 != atomic_dec ( & lock -> counter )) { do { // Pause the CPU until some coherence // traffic(a prerequisite for the counter changing) // saving power } while ( lock -> counter <= 0 ); } Test And Test and Set \u7684\u8fd9\u79cd\u65b9\u5f0f\u4ecd\u7136\u5b58\u5728\u95ee\u9898\uff0c\u5c31\u662f\u5f53winner release lock\u7684\u65f6\u5019\u6240\u6709\u7684loser\u90fd\u4f1a\u88ab\u540c\u65f6\u5524\u9192\uff0c\u4e8e\u662f\u4ed6\u4eec\u4f1a\u53d1\u8d77\u7ade\u4e89\uff0c\u9020\u6210burst traffic\u3002 \u53e6\u5916\u4e00\u4e2a\u95ee\u9898\u5219\u662f\u516c\u5e73\u6027\u7684\u95ee\u9898\uff0c\u6240\u6709\u7684\u7ebf\u7a0b\u5728\u7b2c\u4e00\u6b21\u7ade\u4e89\u90fd\u662f\u516c\u5e73\u7684\uff0c\u4f46\u662f\u4e00\u65e6\u6709winner\u4e4b\u540e\uff0cwinner\u5c31\u4f1a\u4e00\u76f4\u5360\u636e\u4f18\u5148\u6743\uff0c\u8fd9\u662f\u56e0\u4e3awinner\u80fd\u6bd4\u5176\u5b83\u7684\u7ebf\u7a0b\u66f4\u65e9\u770b\u5230P\u7684\u503c\uff0cwinner \u5728Release\u7684\u65f6\u5019\u4f1a\u8fdb\u884c\u5199\u5165\u64cd\u4f5c\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u4f1a\u5148\u8fdb\u5165store buffer\uff0c\u7136\u540e\u518d\u8fdb\u5165ram\uff0c\u800c\u4ece\u5176\u5b83loser\u89d2\u5ea6\u6765\u770b\uff0c\u4ed6\u4eec\u4f1a\u5148\u4f53\u9a8c\u4e00\u6b21read miss\uff0c\u7136\u540e\u518d\u4eceram\u91cc\u8bfb\u5230p\u7684\u503c\u3002\u8fd9\u4e2a\u65f6\u95f4\u5dee \u5bfc\u81f4\u4e86winner\u80fd\u66f4\u65e9\u8bfb\u5230p\u7684\u503c\u3002","title":"sync lock\u57fa\u7840"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/linux/synchronization/#linux-kernel-ticketlock","text":"\u5176\u57fa\u672c\u6982\u5ff5\u5c31\u662f\u5927\u5bb6\u53bb\u94f6\u884c\u6392\u961f\u7684\u65f6\u5019\uff0c\u53bb\u53d6\u7968\u673a\u62ff\u4e00\u5f20\u7968\uff0c\u4e0a\u9762\u5199\u7740\u4e00\u4e2a\u53f7\u3002\u7136\u540e\u5927\u5bb6\u4e0d\u505c\u7684\u770b\u5f53\u524d\u670d\u52a1\u7684\u53f7\u662f\u51e0\u3002 \u5982\u679c\u8ddf\u81ea\u5df1\u7684\u624b\u4e2d\u7684\u7968\u53f7\u4e00\u6837\uff0c\u90a3\u4e48\u8fdb\u53bb\u63a5\u53d7\u670d\u52a1\u3002\u7b49\u81ea\u5df1\u51fa\u6765\u7684\u65f6\u5019\uff0c\u522b\u5fd8\u4e86\u628a\u5f53\u524d\u670d\u52a1\u53f7+1\uff0c\u8ba9\u4e0b\u4e00\u4f4d\u987e\u5ba2\u6709\u673a\u4f1a\u8fdb\u6765\u3002 \u8fd9\u4e2a\u7b97\u6cd5\u89e3\u51b3\u4e86\u516c\u5e73\u6027\u7684\u95ee\u9898\uff0cwinner\u5931\u53bb\u4e86\u4f18\u5148\u6743\uff0c\u800c\u4e14\u53ea\u6709\u518dwinner Release\u7684\u65f6\u5019\u624d\u4f1a\u4ea7\u751f\u4e00\u4e2awrite/invalidate\u3002\u4f46\u662f\u8fd9\u4e2a\u7b97\u6cd5\u8fd8\u662f\u6709\u95ee\u9898\uff0c\u5f53winner\u6539\u53d8\u670d\u52a1\u53f7\u7684\u65f6\u5019\uff0c\u6240\u6709\u7684 loser\u90fd\u4f1a\u88abinvalidate\u3002\u6709\u6ca1\u6709\u53ef\u80fd\u518dunlock\u7684\u65f6\u5019\u53ea\u5524\u9192\u4e00\u4f4dloser\u5462? \u4e5f\u5c31\u662f\u53ea\u8ba9\u4e00\u4e2aloser\u4ea7\u751fread miss\uff0c\u800c\u5176\u4ed6\u7684loser\u5b8c\u5168\u5bdf\u89c9\u4e0d\u5230cacheline\u7684\u6539\u53d8\u5462? Array-based lock \u6574\u4e2a\u7cfb\u7edf\u91cc\u6709\u4e00\u4e2aarray\uff0c\u5176slot\u7684\u6570\u91cf\u7b49\u4e8ethread\u7684\u6570\u91cf\uff0c\u6709\u4e00\u4e2a\u5168\u5c40\u7684index\uff0c\u521d\u59cb\u5316\u4e3a0\uff0c\u5f53\u5f00\u59cb\u7ade\u4e89\u7684\u65f6\u5019\uff0c\u6bcf\u4e2athread\u8bd5\u56fe\u589e\u52a0index\uff0c\u62a2\u5230\u4e00\u4e2aindex\u540e\u5c31\u5f00\u59cbspin\u3002 1 2 3 4 5 6 lock : int my_index = fetch_n_add ( index ); while ( array [ my_index ] == 0 ); unlock : array [ my_index + 1 ] == 1 ; \u8fd9\u4e2a\u7b97\u6cd5\u7684\u4f18\u70b9\u5c31\u662f\uff0c\u6bcf\u4e00\u4e2aloser\u53ea\u5173\u5fc3\u81ea\u5df1\u6240\u5728\u7684slot\uff0c\u800c\u4e0d\u662f\u5168\u90fd\u5173\u5fc3\u4e00\u4e2a\u5168\u5c40\u5730\u5740\u7684\u503c\u3002\uff0c\u800cwinner\u4e5f\u53ea\u89e3\u9501\u6392\u5728\u81ea\u5df1\u540e\u9762\u7684loser\u3002\u8fd9\u6837\u7684\u8bdd\uff0c\u5f53winner unlock\u7684\u65f6\u5019\uff0c\u53ea\u6709 \u4e00\u4e2aloserhi\u53d1\u73b0\u81ea\u5df1\u7684cache line\u88abinvalidate\u3002\u8fd9\u4e2a\u7b97\u6cd5\u7684\u7f3a\u70b9\u5c31\u662f\u7a7a\u95f4\u590d\u6742\u5ea6\u7531O(1)\u53d8\u6210\u4e86O(n)\u3002 \u8fd9\u4e2a\u7b97\u6cd5\u8fd8\u5b58\u5728\u53e6\u5916\u4e00\u4e2a\u95ee\u9898\u5c31\u662f\u8de8numa\u8282\u70b9\u8bbf\u95ee\u5185\u5b58\u7684\u95ee\u9898\uff0c\u5982\u679cthread\u5206\u5e03\u5728\u4e0d\u540csocket\u4e0a\uff0c\u90a3\u4e48\u56e0\u4e3a\u4ed6\u4eec\u5e76\u4e0d\u77e5\u9053\u81ea\u5df1\u4f1a\u5f97\u5230array\u4e2d\u54ea\u4e2aindex\uff0c\u6240\u4ee5\u5fc5\u7136 \u4f1a\u6709\u4e00\u90e8\u5206thread\u5f97spin\u5728\u8fdc\u7a0b\u5730\u5740\u4e0a\uff0c\u4e5f\u5c31\u610f\u5473\u7740\u6240\u6709\u7684invalidate/read/write\u90fd\u4e0d\u518d\u5728\u672c\u5730bus\u4e86\u3002\u8fd9\u662f\u4e00\u4e2a\u5f88\u4e25\u91cd\u7684\u95ee\u9898\u3002\u56e0\u4e3aQPI\u7684\u6027\u80fd\u6bd4bus\u8981\u906d\u7684\u591a\u7684\u591a\u3002 \u6240\u4ee5\u6211\u4eec\u5c31\u5f97\u518d\u505a\u6539\u8fdb\uff0c\u8ba9\u6bcf\u4e2athread\u9884\u5148\uff08compile time\uff09\u5c31\u77e5\u9053\u81ea\u5df1\u4f1aspin\u5728\u54ea\u5757\u5730\u5740\u4e0a\uff0c\u4ece\u800c\u4f7f\u5f97\u6bcf\u4e2athread\u90fd\u53easpin\u5728\u672c\u5730\u5185\u5b58\u4e0a\u3002\u8fd9\u4e2a\u7ed3\u679c\u5c31\u662fsoftware queue lock\u3002","title":"Linux kernel TicketLock"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/linux/synchronization/#linux-rw-spinlocks","text":"\u4f4e24\u4f4d\u7528\u4e8e\u8868\u793a\u5f53\u524d\u7684\u6709\u6548\u7684readers \u7b2c25\u4f4d\u7528\u4e8e\u8868\u793awriter \u5f53\u6709\u4e00\u8fde\u4e32\u7684reader\u5728\u8bfb\u6570\u636e\uff0cwriter\u4f1a\u5b58\u5728\u9965\u997f\u95ee\u9898\uff0c\u5e94\u8be5\u8ba9writer\u4f18\u5148\u3002Linux\u4e2d\u7684Seqlocks\u5c31\u662f\u5199\u8005\u4f18\u5148\uff0c\u8bfb\u8005\u53ef\u80fd\u4f1a\u88ab\u997f\u6b7b\u3002 Writer\u4fa7: \u4e00\u4e2a\u663e\u5f0f\u7684write lock\uff0c\u540c\u65f6\u53ea\u5141\u8bb8\u4e00\u4e2awriter \u4e00\u4e2a\u7248\u672c\u53f7\uff0c\u5728\u8fdb\u5165\u4e34\u754c\u533a\u548c\u9000\u51fa\u4e34\u754c\u533a\u7684\u65f6\u5019\u90fd\u4f1a\u5bf9\u8fd9\u4e2a\u7248\u672c\u53f7\u8fdb\u884c\u9012\u589e \u5f88\u663e\u7136\uff0c\u5982\u679c\u4e34\u754c\u533a\u6ca1\u6709\u4efb\u4f55writer\uff0c\u90a3\u4e48version\u4e00\u5b9a\u662f\u5947\u6570\uff0c\u5426\u5219\u4e00\u5b9a\u662f\u5076\u6570 Reader\u4fa7: 1. \u83b7\u53d6version\uff0c\u5982\u679c\u662f\u5076\u6570\u5219\u8fdb\u53bb\u4e34\u754c\u533a\uff0c\u5982\u679c\u662f\u5947\u6570\u5c31\u7b49\u5f85writer \u79bb\u5f00\u4e34\u754c\u533a 2. \u8fdb\u5165\u4e34\u754c\u533a\uff0c\u8bfb\u53d6\u6570\u636e 3. \u83b7\u53d6version\u503c\uff0c\u5982\u679c\u662f\u521d\u59cb\u83b7\u53d6\u7684\u503c\u76f8\u7b49\u5c31OK\uff0c\u5426\u5219\u5c31\u56de\u5230\u7b2c\u4e00\u6b65\u3002 seqlock\u4e00\u822c\u9002\u7528\u4e8e: 1. read\u64cd\u4f5c\u6bd4\u8f83\u9891\u7e41 2. writer\u64cd\u4f5c\u6bd4\u8f83\u5c11\uff0c\u4f46\u662f\u6027\u80fd\u8981\u6c42\u9ad8\uff0c\u4e0d\u5e0c\u671b\u88abreader thread\u963b\u6321","title":"Linux RW Spinlocks"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/linux/synchronization/memory_order/","text":"","title":"Memory order"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/linux/system_interface/","text":"","title":"Index"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/why/","text":"\u8ba1\u7b97\u673a\u57fa\u7840\u767e\u79d1 \u4ec0\u4e48\u662f\u865a\u5047\u5524\u9192? \u9700\u8981\u957f\u671fwait\u7684\u7cfb\u7edf\u8c03\u7528\u4e3a\u4ec0\u4e48\u4f1a\u88absignal\u6253\u65ad? \u865a\u5047\u5524\u9192\u5c31\u662f\u4e00\u4e9b\u963b\u585e\u7684\u8c03\u7528\u88ab\u5524\u9192\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u5e76\u6ca1\u6709\u8fbe\u5230\u9884\u671f\u7684\u5524\u9192\u6761\u4ef6\uff0c\u6bd4\u5982\u8bfb\u53d6socket\u7684\u65f6\u5019\u4e00\u76f4\u963b\u585e\u7684\u7b49\u5f85\u6570\u636e\u5230\u6765\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a \u5e76\u6ca1\u6709\u6570\u636e\u4e5f\u5bfc\u81f4\u4e86read\u8fd4\u56de\uff0c\u8fd8\u6709\u6761\u4ef6\u53d8\u91cf\u5728wait\u7684\u65f6\u5019\uff0c\u53ef\u80fd\u6761\u4ef6\u672a\u6ee1\u8db3\u4e5f\u5bfc\u81f4\u4e86wait\u8fd4\u56de\u3002\u51fa\u73b0\u865a\u5047\u73af\u5883\u7684\u539f\u56e0\uff0c\u603b\u7ed3\u6765\u8bf4\u6709\u4e09\u70b9: \u591a\u7ebf\u7a0b\u591a\u5904\u7406\u5668\u60c5\u51b5\u4e0b\u5bfc\u81f4\u7684\u6761\u4ef6\u53d8\u91cf\u5524\u9192\u591a\u6b21 http://pubs.opengroup.org/onlinepubs/000095399/functions/pthread_cond_signal.html Following is the quote from the above link for code snippet: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 pthread_cond_wait ( mutex , cond ) : value = cond -> value ; /* 1 */ pthread_mutex_unlock ( mutex ); /* 2 */ pthread_mutex_lock ( cond -> mutex ); /* 10 */ if ( value == cond -> value ) { /* 11 */ me -> next_cond = cond -> waiter ; cond -> waiter = me ; pthread_mutex_unlock ( cond -> mutex ); unable_to_run ( me ); } else pthread_mutex_unlock ( cond -> mutex ); /* 12 */ pthread_mutex_lock ( mutex ); /* 13 */ pthread_cond_signal ( cond ) : pthread_mutex_lock ( cond -> mutex ); /* 3 */ cond -> value ++ ; /* 4 */ if ( cond -> waiter ) { /* 5 */ sleeper = cond -> waiter ; /* 6 */ cond -> waiter = sleeper -> next_cond ; /* 7 */ able_to_run ( sleeper ); /* 8 */ } pthread_mutex_unlock ( cond -> mutex ); /* 9 */ \u7ebf\u7a0bA\u6267\u884c\u4e0a\u4e0a\u9762\u4ee3\u7801\u4e2d\u7684\u6b65\u9aa42\uff0c\u7ebf\u7a0bB\u5728\u53e6\u5916\u4e00\u4e2aCPU\u4e0a\u8fd0\u884c\uff0c\u6267\u884c pthread_cond_signal \uff0c\u7ebf\u7a0bC\u5df2\u7ecf\u963b\u585e\u5728 pthread_cond_wait \u8c03\u7528\u4e2d\u4e86\uff0c\u8fd9\u4e2a\u65f6\u5019\u5c31\u4f1a\u51fa\u73b0 pthread_cond_signal \u5524\u9192\u4e86A\u548cC https://sites.google.com/site/embeddedmonologue/home/mutual-exclusion-and-synchronization/spurious-wakeup-and-infinite-waiting-on-condvar \u56e0\u4e3aOS\u8c03\u5ea6\u5bfc\u81f4 \u540c\u6837\u5728\u5355\u7ebf\u7a0b\u60c5\u51b5\u4e0b\uff0c\u7ebf\u7a0bA\u8fd0\u884c\u5230\u6b65\u9aa42\u540e\u53ef\u80fd\u56e0\u4e3a\u4f18\u5148\u7ea7\u6216\u8005\u65f6\u95f4\u7247\u7528\u5b8c\u7b49\u539f\u56e0\uff0c\u5207\u56de\u5230\u7ebf\u7a0bB\u8fd0\u884c pthread_cond_signal \u4ece\u800c\u5bfc\u81f4\u5524\u9192\u4e86\u591a\u4e2a\u7ebf\u7a0b \u88ab\u4fe1\u53f7\u4e2d\u65ad Linux\u7cfb\u7edf\u4e2d\uff0c\u963b\u585e\u7684\u6162\u7cfb\u7edf\u8c03\u7528\u4f1a\u88ab\u4fe1\u53f7\u6253\u65ad\uff0c\u5e76\u8bbe\u7f6e\u5bf9\u5e94\u7684\u9519\u8bef\u7801\u4e3aEINTR\uff0c\u5bfc\u81f4\u865a\u5047\u5524\u9192 \u4ec0\u4e48\u662f\u5f02\u6b65\u4fe1\u53f7\u5b89\u5168? \u4e3a\u4ec0\u4e48unix socket\u6bd4tcp socket\u6027\u80fd\u597d? \u4e3a\u4ec0\u4e48Linux\u4e2d\u7684\u7cfb\u7edf\u8c03\u7528\u4f1a\u8fd4\u56deEINTR\u9519\u8bef? \u8fd9\u4e2a\u95ee\u9898\u53ef\u80fd\u5927\u591a\u6570\u4eba\u90fd\u53ea\u662f\u77e5\u9053\u8981\u600e\u4e48\u53bb\u5904\u7406\uff0c\u4f46\u662f\u5374\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u4f1a\u53d1\u751f\u4e2d\u65ad? \u5982\u679c\u4e00\u4e2a\u7cfb\u7edf\u8c03\u7528\u5728\u6267\u884c\u7684\u65f6\u5019\uff0c\u4e00\u4e2a\u4fe1\u53f7\u5230\u6765\uff0c\u8fd9\u4e2a\u65f6\u5019\u9700\u8981\u5207\u6362\u5230\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u4e2d\u6267\u884c\uff0c \u4f46\u662f\u7cfb\u7edf\u8c03\u7528\u662f\u5728\u5185\u6838\u6001\u4e2d\u6267\u884c\u7684\uff0c\u5982\u679c\u73b0\u5728\u6267\u884c\u4ee5\u5185\u6838\u6001\u6765\u8fd0\u884c\u7528\u6237\u6001\u7f16\u5199\u7684\u4fe1\u53f7\u5904\u7406\u51fd\u6570\uff0c\u8fd9\u4f1a\u7ed9\u5185\u6838\u5e26\u6765\u5b89\u5168\u98ce\u9669\uff0c\u6240\u4ee5\u7406\u8bba\u4e0a\u8fd9\u91cc\u5e94\u8be5\u8981\u5207\u6362\u8fd0\u884c\u6001\u5c9b\u7528\u6237\u6001\uff0c \u65e2\u7136\u8981\u5207\u6362\u90a3\u4e48\u5c31\u9700\u8981\u4fdd\u5b58\u5f53\u524d\u7684\u72b6\u6001\uff0c\u4f46\u662f\u8fd9\u5c31\u6d89\u53ca\u5230\u4e00\u4e2a\u95ee\u9898\u5c31\u662f\u4e2d\u95f4\u72b6\u6001\uff0c\u8fd9\u4e2a\u65f6\u5019\u6267\u884c\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u53ef\u80fd\u770b\u5230\u4e00\u4e2a\u4e2d\u95f4\u7684\u65e0\u6548\u72b6\u6001\uff0c\u5bfc\u81f4\u7a0b\u5e8f\u884c\u4e3a\u65f6\u672a\u5b9a\u4e49\u7684\uff0c \u8fd8\u6709\u9501\u7684\u95ee\u9898\uff0c\u8d44\u6e90\u5360\u7528\u7b49\u95ee\u9898\u3002\u6240\u4ee5\u8fd9\u79cd\u5207\u6362\u72b6\u6001\u7684\u65b9\u5f0f\u662f\u4e0d\u53ef\u884c\u7684\uff0clinux\u4f7f\u7528\u4e86\u4e00\u79cd\u66f4\u52a0\u7075\u6d3b\u7684\u65b9\u5f0f\u6765\u5904\u7406\uff0c\u5f53\u7cfb\u7edf\u8c03\u7528\u5728\u6267\u884c\u7684\u8fc7\u7a0b\u4e2d\u6709\u4fe1\u53f7\u5230\u6765\u5219\u4e2d\u65ad\u5f53\u524d\u7684\u7cfb\u7edf\u8c03\u7528\uff0c \u7136\u540e\u8fd4\u56de-1\uff0c\u5e76\u8bbe\u7f6e\u9519\u8bef\u7801\u4e3aEINTR\uff0c\u4ea4\u7ed9\u7528\u6237\u6765\u91cd\u65b0\u518d\u8fd0\u884c\u8be5\u7cfb\u7edf\u8c03\u7528\u3002 https://lwn.net/Articles/17744/ https://unix.stackexchange.com/questions/16455/interruption-of-system-calls-when-a-signal-is-caught https://blog.csdn.net/zhangyifei216/article/details/77955339 \u4e3a\u4ec0\u4e48\u8981\u505a\u5b57\u8282\u5bf9\u9f50? x86_64\u5904\u7406\u5668\u7684\u6307\u9488\u8d4b\u503c\u662f\u539f\u5b50\u64cd\u4f5c\u5417\uff1f https://blog.csdn.net/dog250/article/details/103948307 \u4e3a\u4ec0\u4e48 TCP \u5efa\u7acb\u8fde\u63a5\u9700\u8981\u4e09\u6b21\u63e1\u624b? Note The reliability and flow control mechanisms described above require that TCPs initialize and maintain certain status information for each data stream. The combination of this information, including sockets, sequence numbers, and window sizes, is called a connection. \u7528\u4e8e\u4fdd\u8bc1\u53ef\u9760\u6027\u548c\u6d41\u63a7\u5236\u673a\u5236\u7684\u4fe1\u606f\uff0c\u5305\u62ec Socket\u3001\u5e8f\u5217\u53f7\u4ee5\u53ca\u7a97\u53e3\u5927\u5c0f\u53eb\u505a\u8fde\u63a5\uff0c\u6240\u4ee5\uff0c\u5efa\u7acb TCP \u8fde\u63a5\u5c31\u662f\u901a\u4fe1\u7684\u53cc\u65b9\u9700\u8981\u5bf9\u4e0a\u8ff0\u7684\u4e09\u79cd\u4fe1\u606f\u8fbe\u6210\u5171\u8bc6\uff0c\u8fde\u63a5\u4e2d\u7684\u4e00\u5bf9 Socket \u662f\u7531\u4e92\u8054\u7f51\u5730\u5740\u6807\u5fd7\u7b26\u548c\u7aef\u53e3\u7ec4\u6210\u7684\uff0c \u7a97\u53e3\u5927\u5c0f\u4e3b\u8981\u7528\u6765\u505a\u6d41\u63a7\u5236\uff0c\u6700\u540e\u7684\u5e8f\u5217\u53f7\u662f\u7528\u6765\u8ffd\u8e2a\u901a\u4fe1\u53d1\u8d77\u65b9\u53d1\u9001\u7684\u6570\u636e\u5305\u5e8f\u53f7\uff0c\u63a5\u6536\u65b9\u53ef\u4ee5\u901a\u8fc7\u5e8f\u5217\u53f7\u5411\u53d1\u9001\u65b9\u786e\u8ba4\u67d0\u4e2a\u6570\u636e\u5305\u7684\u6210\u529f\u63a5\u6536\u3002 \u4e3a\u4ec0\u4e48\u6211\u4eec\u9700\u8981\u901a\u8fc7\u4e09\u6b21\u63e1\u624b\u624d\u53ef\u4ee5\u521d\u59cb\u5316 Sockets\u3001\u7a97\u53e3\u5927\u5c0f\u3001\u521d\u59cb\u5e8f\u5217\u53f7\u5e76\u5efa\u7acb TCP \u8fde\u63a5? \u901a\u8fc7\u4e09\u6b21\u63e1\u624b\u624d\u80fd\u963b\u6b62\u91cd\u590d\u5386\u53f2\u8fde\u63a5\u7684\u521d\u59cb\u5316\uff1b \u901a\u8fc7\u4e09\u6b21\u63e1\u624b\u624d\u80fd\u5bf9\u901a\u4fe1\u53cc\u65b9\u7684\u521d\u59cb\u5e8f\u5217\u53f7\u8fdb\u884c\u521d\u59cb\u5316\uff1b \u8ba8\u8bba\u5176\u4ed6\u6b21\u6570\u63e1\u624b\u5efa\u7acb\u8fde\u63a5\u7684\u53ef\u80fd\u6027\uff1b \u8fd9\u51e0\u4e2a\u8bba\u70b9\u4e2d\u7684\u7b2c\u4e00\u4e2a\u662f TCP \u9009\u62e9\u4f7f\u7528\u4e09\u6b21\u63e1\u624b\u7684\u6700\u4e3b\u8981\u539f\u56e0\uff0c\u5176\u4ed6\u7684\u51e0\u4e2a\u539f\u56e0\u76f8\u6bd4\u4e4b\u4e0b\u90fd\u662f\u6b21\u8981\u7684\u539f\u56e0\uff0c\u6211\u4eec\u5728\u8fd9\u91cc\u5bf9\u5b83\u4eec\u7684\u8ba8\u8bba\u53ea\u662f\u4e3a\u4e86\u8ba9\u6574\u4e2a\u89c6\u89d2\u66f4\u52a0\u4e30\u5bcc\uff0c\u901a\u8fc7\u591a\u65b9\u9762\u7406\u89e3\u8fd9\u4e00\u6709\u8da3\u7684\u8bbe\u8ba1\u51b3\u7b56\u3002 https://draveness.me/whys-the-design-tcp-three-way-handshake","title":"\u8ba1\u7b97\u673a\u57fa\u7840\u767e\u79d1"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/why/#_1","text":"","title":"\u8ba1\u7b97\u673a\u57fa\u7840\u767e\u79d1"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/why/#waitsignal","text":"\u865a\u5047\u5524\u9192\u5c31\u662f\u4e00\u4e9b\u963b\u585e\u7684\u8c03\u7528\u88ab\u5524\u9192\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u5e76\u6ca1\u6709\u8fbe\u5230\u9884\u671f\u7684\u5524\u9192\u6761\u4ef6\uff0c\u6bd4\u5982\u8bfb\u53d6socket\u7684\u65f6\u5019\u4e00\u76f4\u963b\u585e\u7684\u7b49\u5f85\u6570\u636e\u5230\u6765\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a \u5e76\u6ca1\u6709\u6570\u636e\u4e5f\u5bfc\u81f4\u4e86read\u8fd4\u56de\uff0c\u8fd8\u6709\u6761\u4ef6\u53d8\u91cf\u5728wait\u7684\u65f6\u5019\uff0c\u53ef\u80fd\u6761\u4ef6\u672a\u6ee1\u8db3\u4e5f\u5bfc\u81f4\u4e86wait\u8fd4\u56de\u3002\u51fa\u73b0\u865a\u5047\u73af\u5883\u7684\u539f\u56e0\uff0c\u603b\u7ed3\u6765\u8bf4\u6709\u4e09\u70b9: \u591a\u7ebf\u7a0b\u591a\u5904\u7406\u5668\u60c5\u51b5\u4e0b\u5bfc\u81f4\u7684\u6761\u4ef6\u53d8\u91cf\u5524\u9192\u591a\u6b21 http://pubs.opengroup.org/onlinepubs/000095399/functions/pthread_cond_signal.html Following is the quote from the above link for code snippet: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 pthread_cond_wait ( mutex , cond ) : value = cond -> value ; /* 1 */ pthread_mutex_unlock ( mutex ); /* 2 */ pthread_mutex_lock ( cond -> mutex ); /* 10 */ if ( value == cond -> value ) { /* 11 */ me -> next_cond = cond -> waiter ; cond -> waiter = me ; pthread_mutex_unlock ( cond -> mutex ); unable_to_run ( me ); } else pthread_mutex_unlock ( cond -> mutex ); /* 12 */ pthread_mutex_lock ( mutex ); /* 13 */ pthread_cond_signal ( cond ) : pthread_mutex_lock ( cond -> mutex ); /* 3 */ cond -> value ++ ; /* 4 */ if ( cond -> waiter ) { /* 5 */ sleeper = cond -> waiter ; /* 6 */ cond -> waiter = sleeper -> next_cond ; /* 7 */ able_to_run ( sleeper ); /* 8 */ } pthread_mutex_unlock ( cond -> mutex ); /* 9 */ \u7ebf\u7a0bA\u6267\u884c\u4e0a\u4e0a\u9762\u4ee3\u7801\u4e2d\u7684\u6b65\u9aa42\uff0c\u7ebf\u7a0bB\u5728\u53e6\u5916\u4e00\u4e2aCPU\u4e0a\u8fd0\u884c\uff0c\u6267\u884c pthread_cond_signal \uff0c\u7ebf\u7a0bC\u5df2\u7ecf\u963b\u585e\u5728 pthread_cond_wait \u8c03\u7528\u4e2d\u4e86\uff0c\u8fd9\u4e2a\u65f6\u5019\u5c31\u4f1a\u51fa\u73b0 pthread_cond_signal \u5524\u9192\u4e86A\u548cC https://sites.google.com/site/embeddedmonologue/home/mutual-exclusion-and-synchronization/spurious-wakeup-and-infinite-waiting-on-condvar \u56e0\u4e3aOS\u8c03\u5ea6\u5bfc\u81f4 \u540c\u6837\u5728\u5355\u7ebf\u7a0b\u60c5\u51b5\u4e0b\uff0c\u7ebf\u7a0bA\u8fd0\u884c\u5230\u6b65\u9aa42\u540e\u53ef\u80fd\u56e0\u4e3a\u4f18\u5148\u7ea7\u6216\u8005\u65f6\u95f4\u7247\u7528\u5b8c\u7b49\u539f\u56e0\uff0c\u5207\u56de\u5230\u7ebf\u7a0bB\u8fd0\u884c pthread_cond_signal \u4ece\u800c\u5bfc\u81f4\u5524\u9192\u4e86\u591a\u4e2a\u7ebf\u7a0b \u88ab\u4fe1\u53f7\u4e2d\u65ad Linux\u7cfb\u7edf\u4e2d\uff0c\u963b\u585e\u7684\u6162\u7cfb\u7edf\u8c03\u7528\u4f1a\u88ab\u4fe1\u53f7\u6253\u65ad\uff0c\u5e76\u8bbe\u7f6e\u5bf9\u5e94\u7684\u9519\u8bef\u7801\u4e3aEINTR\uff0c\u5bfc\u81f4\u865a\u5047\u5524\u9192","title":"\u4ec0\u4e48\u662f\u865a\u5047\u5524\u9192? \u9700\u8981\u957f\u671fwait\u7684\u7cfb\u7edf\u8c03\u7528\u4e3a\u4ec0\u4e48\u4f1a\u88absignal\u6253\u65ad?"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/why/#_2","text":"","title":"\u4ec0\u4e48\u662f\u5f02\u6b65\u4fe1\u53f7\u5b89\u5168?"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/why/#unix-sockettcp-socket","text":"","title":"\u4e3a\u4ec0\u4e48unix socket\u6bd4tcp socket\u6027\u80fd\u597d?"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/why/#linuxeintr","text":"\u8fd9\u4e2a\u95ee\u9898\u53ef\u80fd\u5927\u591a\u6570\u4eba\u90fd\u53ea\u662f\u77e5\u9053\u8981\u600e\u4e48\u53bb\u5904\u7406\uff0c\u4f46\u662f\u5374\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u4f1a\u53d1\u751f\u4e2d\u65ad? \u5982\u679c\u4e00\u4e2a\u7cfb\u7edf\u8c03\u7528\u5728\u6267\u884c\u7684\u65f6\u5019\uff0c\u4e00\u4e2a\u4fe1\u53f7\u5230\u6765\uff0c\u8fd9\u4e2a\u65f6\u5019\u9700\u8981\u5207\u6362\u5230\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u4e2d\u6267\u884c\uff0c \u4f46\u662f\u7cfb\u7edf\u8c03\u7528\u662f\u5728\u5185\u6838\u6001\u4e2d\u6267\u884c\u7684\uff0c\u5982\u679c\u73b0\u5728\u6267\u884c\u4ee5\u5185\u6838\u6001\u6765\u8fd0\u884c\u7528\u6237\u6001\u7f16\u5199\u7684\u4fe1\u53f7\u5904\u7406\u51fd\u6570\uff0c\u8fd9\u4f1a\u7ed9\u5185\u6838\u5e26\u6765\u5b89\u5168\u98ce\u9669\uff0c\u6240\u4ee5\u7406\u8bba\u4e0a\u8fd9\u91cc\u5e94\u8be5\u8981\u5207\u6362\u8fd0\u884c\u6001\u5c9b\u7528\u6237\u6001\uff0c \u65e2\u7136\u8981\u5207\u6362\u90a3\u4e48\u5c31\u9700\u8981\u4fdd\u5b58\u5f53\u524d\u7684\u72b6\u6001\uff0c\u4f46\u662f\u8fd9\u5c31\u6d89\u53ca\u5230\u4e00\u4e2a\u95ee\u9898\u5c31\u662f\u4e2d\u95f4\u72b6\u6001\uff0c\u8fd9\u4e2a\u65f6\u5019\u6267\u884c\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u53ef\u80fd\u770b\u5230\u4e00\u4e2a\u4e2d\u95f4\u7684\u65e0\u6548\u72b6\u6001\uff0c\u5bfc\u81f4\u7a0b\u5e8f\u884c\u4e3a\u65f6\u672a\u5b9a\u4e49\u7684\uff0c \u8fd8\u6709\u9501\u7684\u95ee\u9898\uff0c\u8d44\u6e90\u5360\u7528\u7b49\u95ee\u9898\u3002\u6240\u4ee5\u8fd9\u79cd\u5207\u6362\u72b6\u6001\u7684\u65b9\u5f0f\u662f\u4e0d\u53ef\u884c\u7684\uff0clinux\u4f7f\u7528\u4e86\u4e00\u79cd\u66f4\u52a0\u7075\u6d3b\u7684\u65b9\u5f0f\u6765\u5904\u7406\uff0c\u5f53\u7cfb\u7edf\u8c03\u7528\u5728\u6267\u884c\u7684\u8fc7\u7a0b\u4e2d\u6709\u4fe1\u53f7\u5230\u6765\u5219\u4e2d\u65ad\u5f53\u524d\u7684\u7cfb\u7edf\u8c03\u7528\uff0c \u7136\u540e\u8fd4\u56de-1\uff0c\u5e76\u8bbe\u7f6e\u9519\u8bef\u7801\u4e3aEINTR\uff0c\u4ea4\u7ed9\u7528\u6237\u6765\u91cd\u65b0\u518d\u8fd0\u884c\u8be5\u7cfb\u7edf\u8c03\u7528\u3002 https://lwn.net/Articles/17744/ https://unix.stackexchange.com/questions/16455/interruption-of-system-calls-when-a-signal-is-caught https://blog.csdn.net/zhangyifei216/article/details/77955339","title":"\u4e3a\u4ec0\u4e48Linux\u4e2d\u7684\u7cfb\u7edf\u8c03\u7528\u4f1a\u8fd4\u56deEINTR\u9519\u8bef?"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/why/#_3","text":"","title":"\u4e3a\u4ec0\u4e48\u8981\u505a\u5b57\u8282\u5bf9\u9f50?"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/why/#x86_64","text":"https://blog.csdn.net/dog250/article/details/103948307","title":"x86_64\u5904\u7406\u5668\u7684\u6307\u9488\u8d4b\u503c\u662f\u539f\u5b50\u64cd\u4f5c\u5417\uff1f"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/why/#tcp","text":"Note The reliability and flow control mechanisms described above require that TCPs initialize and maintain certain status information for each data stream. The combination of this information, including sockets, sequence numbers, and window sizes, is called a connection. \u7528\u4e8e\u4fdd\u8bc1\u53ef\u9760\u6027\u548c\u6d41\u63a7\u5236\u673a\u5236\u7684\u4fe1\u606f\uff0c\u5305\u62ec Socket\u3001\u5e8f\u5217\u53f7\u4ee5\u53ca\u7a97\u53e3\u5927\u5c0f\u53eb\u505a\u8fde\u63a5\uff0c\u6240\u4ee5\uff0c\u5efa\u7acb TCP \u8fde\u63a5\u5c31\u662f\u901a\u4fe1\u7684\u53cc\u65b9\u9700\u8981\u5bf9\u4e0a\u8ff0\u7684\u4e09\u79cd\u4fe1\u606f\u8fbe\u6210\u5171\u8bc6\uff0c\u8fde\u63a5\u4e2d\u7684\u4e00\u5bf9 Socket \u662f\u7531\u4e92\u8054\u7f51\u5730\u5740\u6807\u5fd7\u7b26\u548c\u7aef\u53e3\u7ec4\u6210\u7684\uff0c \u7a97\u53e3\u5927\u5c0f\u4e3b\u8981\u7528\u6765\u505a\u6d41\u63a7\u5236\uff0c\u6700\u540e\u7684\u5e8f\u5217\u53f7\u662f\u7528\u6765\u8ffd\u8e2a\u901a\u4fe1\u53d1\u8d77\u65b9\u53d1\u9001\u7684\u6570\u636e\u5305\u5e8f\u53f7\uff0c\u63a5\u6536\u65b9\u53ef\u4ee5\u901a\u8fc7\u5e8f\u5217\u53f7\u5411\u53d1\u9001\u65b9\u786e\u8ba4\u67d0\u4e2a\u6570\u636e\u5305\u7684\u6210\u529f\u63a5\u6536\u3002 \u4e3a\u4ec0\u4e48\u6211\u4eec\u9700\u8981\u901a\u8fc7\u4e09\u6b21\u63e1\u624b\u624d\u53ef\u4ee5\u521d\u59cb\u5316 Sockets\u3001\u7a97\u53e3\u5927\u5c0f\u3001\u521d\u59cb\u5e8f\u5217\u53f7\u5e76\u5efa\u7acb TCP \u8fde\u63a5? \u901a\u8fc7\u4e09\u6b21\u63e1\u624b\u624d\u80fd\u963b\u6b62\u91cd\u590d\u5386\u53f2\u8fde\u63a5\u7684\u521d\u59cb\u5316\uff1b \u901a\u8fc7\u4e09\u6b21\u63e1\u624b\u624d\u80fd\u5bf9\u901a\u4fe1\u53cc\u65b9\u7684\u521d\u59cb\u5e8f\u5217\u53f7\u8fdb\u884c\u521d\u59cb\u5316\uff1b \u8ba8\u8bba\u5176\u4ed6\u6b21\u6570\u63e1\u624b\u5efa\u7acb\u8fde\u63a5\u7684\u53ef\u80fd\u6027\uff1b \u8fd9\u51e0\u4e2a\u8bba\u70b9\u4e2d\u7684\u7b2c\u4e00\u4e2a\u662f TCP \u9009\u62e9\u4f7f\u7528\u4e09\u6b21\u63e1\u624b\u7684\u6700\u4e3b\u8981\u539f\u56e0\uff0c\u5176\u4ed6\u7684\u51e0\u4e2a\u539f\u56e0\u76f8\u6bd4\u4e4b\u4e0b\u90fd\u662f\u6b21\u8981\u7684\u539f\u56e0\uff0c\u6211\u4eec\u5728\u8fd9\u91cc\u5bf9\u5b83\u4eec\u7684\u8ba8\u8bba\u53ea\u662f\u4e3a\u4e86\u8ba9\u6574\u4e2a\u89c6\u89d2\u66f4\u52a0\u4e30\u5bcc\uff0c\u901a\u8fc7\u591a\u65b9\u9762\u7406\u89e3\u8fd9\u4e00\u6709\u8da3\u7684\u8bbe\u8ba1\u51b3\u7b56\u3002 https://draveness.me/whys-the-design-tcp-three-way-handshake","title":"\u4e3a\u4ec0\u4e48 TCP \u5efa\u7acb\u8fde\u63a5\u9700\u8981\u4e09\u6b21\u63e1\u624b?"}]}